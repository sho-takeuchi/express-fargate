{
  "version": 3,
  "sources": ["elasticsearch.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:01:52.368Z\",\"fingerprint\":\"cZrr5Jc1uh2XnRY3LBjdzMOUSRjRcAiIgRuTRu70dlg=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                      \nexport interface CfnDomainProps {\n\nn    readonly accessPolicies?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly advancedOptions?: { [key: string]: (string) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                   \n    readonly advancedSecurityOptions?: CfnDomain.AdvancedSecurityOptionsInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                     \n    readonly cognitoOptions?: CfnDomain.CognitoOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                           \n    readonly domainEndpointOptions?: CfnDomain.DomainEndpointOptionsProperty | cdk.IResolvable;\n\nn    readonly domainName?: string;\n\nn    readonly ebsOptions?: CfnDomain.EBSOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    readonly elasticsearchClusterConfig?: CfnDomain.ElasticsearchClusterConfigProperty | cdk.IResolvable;\n\nn    readonly elasticsearchVersion?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly encryptionAtRestOptions?: CfnDomain.EncryptionAtRestOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly logPublishingOptions?: { [key: string]: (CfnDomain.LogPublishingOptionProperty | cdk.IResolvable) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly nodeToNodeEncryptionOptions?: CfnDomain.NodeToNodeEncryptionOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                       \n    readonly snapshotOptions?: CfnDomain.SnapshotOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                         \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly vpcOptions?: CfnDomain.VPCOptionsProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDomainProps`\n *\n * @param properties - the TypeScript properties of a `CfnDomainProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomainPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessPolicies', cdk.validateObject)(properties.accessPolicies));\n    errors.collect(cdk.propertyValidator('advancedOptions', cdk.hashValidator(cdk.validateString))(properties.advancedOptions));\n    errors.collect(cdk.propertyValidator('advancedSecurityOptions', CfnDomain_AdvancedSecurityOptionsInputPropertyValidator)(properties.advancedSecurityOptions));\n    errors.collect(cdk.propertyValidator('cognitoOptions', CfnDomain_CognitoOptionsPropertyValidator)(properties.cognitoOptions));\n    errors.collect(cdk.propertyValidator('domainEndpointOptions', CfnDomain_DomainEndpointOptionsPropertyValidator)(properties.domainEndpointOptions));\n    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));\n    errors.collect(cdk.propertyValidator('ebsOptions', CfnDomain_EBSOptionsPropertyValidator)(properties.ebsOptions));\n    errors.collect(cdk.propertyValidator('elasticsearchClusterConfig', CfnDomain_ElasticsearchClusterConfigPropertyValidator)(properties.elasticsearchClusterConfig));\n    errors.collect(cdk.propertyValidator('elasticsearchVersion', cdk.validateString)(properties.elasticsearchVersion));\n    errors.collect(cdk.propertyValidator('encryptionAtRestOptions', CfnDomain_EncryptionAtRestOptionsPropertyValidator)(properties.encryptionAtRestOptions));\n    errors.collect(cdk.propertyValidator('logPublishingOptions', cdk.hashValidator(CfnDomain_LogPublishingOptionPropertyValidator))(properties.logPublishingOptions));\n    errors.collect(cdk.propertyValidator('nodeToNodeEncryptionOptions', CfnDomain_NodeToNodeEncryptionOptionsPropertyValidator)(properties.nodeToNodeEncryptionOptions));\n    errors.collect(cdk.propertyValidator('snapshotOptions', CfnDomain_SnapshotOptionsPropertyValidator)(properties.snapshotOptions));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcOptions', CfnDomain_VPCOptionsPropertyValidator)(properties.vpcOptions));\n    return errors.wrap('supplied properties not correct for \"CfnDomainProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain` resource\n *\n * @param properties - the TypeScript properties of a `CfnDomainProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomainPropsValidator(properties).assertSuccess();\n    return {\n        AccessPolicies: cdk.objectToCloudFormation(properties.accessPolicies),\n        AdvancedOptions: cdk.hashMapper(cdk.stringToCloudFormation)(properties.advancedOptions),\n        AdvancedSecurityOptions: cfnDomainAdvancedSecurityOptionsInputPropertyToCloudFormation(properties.advancedSecurityOptions),\n        CognitoOptions: cfnDomainCognitoOptionsPropertyToCloudFormation(properties.cognitoOptions),\n        DomainEndpointOptions: cfnDomainDomainEndpointOptionsPropertyToCloudFormation(properties.domainEndpointOptions),\n        DomainName: cdk.stringToCloudFormation(properties.domainName),\n        EBSOptions: cfnDomainEBSOptionsPropertyToCloudFormation(properties.ebsOptions),\n        ElasticsearchClusterConfig: cfnDomainElasticsearchClusterConfigPropertyToCloudFormation(properties.elasticsearchClusterConfig),\n        ElasticsearchVersion: cdk.stringToCloudFormation(properties.elasticsearchVersion),\n        EncryptionAtRestOptions: cfnDomainEncryptionAtRestOptionsPropertyToCloudFormation(properties.encryptionAtRestOptions),\n        LogPublishingOptions: cdk.hashMapper(cfnDomainLogPublishingOptionPropertyToCloudFormation)(properties.logPublishingOptions),\n        NodeToNodeEncryptionOptions: cfnDomainNodeToNodeEncryptionOptionsPropertyToCloudFormation(properties.nodeToNodeEncryptionOptions),\n        SnapshotOptions: cfnDomainSnapshotOptionsPropertyToCloudFormation(properties.snapshotOptions),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VPCOptions: cfnDomainVPCOptionsPropertyToCloudFormation(properties.vpcOptions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomainProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomainProps>();\n    ret.addPropertyResult('accessPolicies', 'AccessPolicies', properties.AccessPolicies != null ? cfn_parse.FromCloudFormation.getAny(properties.AccessPolicies) : undefined);\n    ret.addPropertyResult('advancedOptions', 'AdvancedOptions', properties.AdvancedOptions != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.AdvancedOptions) : undefined);\n    ret.addPropertyResult('advancedSecurityOptions', 'AdvancedSecurityOptions', properties.AdvancedSecurityOptions != null ? CfnDomainAdvancedSecurityOptionsInputPropertyFromCloudFormation(properties.AdvancedSecurityOptions) : undefined);\n    ret.addPropertyResult('cognitoOptions', 'CognitoOptions', properties.CognitoOptions != null ? CfnDomainCognitoOptionsPropertyFromCloudFormation(properties.CognitoOptions) : undefined);\n    ret.addPropertyResult('domainEndpointOptions', 'DomainEndpointOptions', properties.DomainEndpointOptions != null ? CfnDomainDomainEndpointOptionsPropertyFromCloudFormation(properties.DomainEndpointOptions) : undefined);\n    ret.addPropertyResult('domainName', 'DomainName', properties.DomainName != null ? cfn_parse.FromCloudFormation.getString(properties.DomainName) : undefined);\n    ret.addPropertyResult('ebsOptions', 'EBSOptions', properties.EBSOptions != null ? CfnDomainEBSOptionsPropertyFromCloudFormation(properties.EBSOptions) : undefined);\n    ret.addPropertyResult('elasticsearchClusterConfig', 'ElasticsearchClusterConfig', properties.ElasticsearchClusterConfig != null ? CfnDomainElasticsearchClusterConfigPropertyFromCloudFormation(properties.ElasticsearchClusterConfig) : undefined);\n    ret.addPropertyResult('elasticsearchVersion', 'ElasticsearchVersion', properties.ElasticsearchVersion != null ? cfn_parse.FromCloudFormation.getString(properties.ElasticsearchVersion) : undefined);\n    ret.addPropertyResult('encryptionAtRestOptions', 'EncryptionAtRestOptions', properties.EncryptionAtRestOptions != null ? CfnDomainEncryptionAtRestOptionsPropertyFromCloudFormation(properties.EncryptionAtRestOptions) : undefined);\n    ret.addPropertyResult('logPublishingOptions', 'LogPublishingOptions', properties.LogPublishingOptions != null ? cfn_parse.FromCloudFormation.getMap(CfnDomainLogPublishingOptionPropertyFromCloudFormation)(properties.LogPublishingOptions) : undefined);\n    ret.addPropertyResult('nodeToNodeEncryptionOptions', 'NodeToNodeEncryptionOptions', properties.NodeToNodeEncryptionOptions != null ? CfnDomainNodeToNodeEncryptionOptionsPropertyFromCloudFormation(properties.NodeToNodeEncryptionOptions) : undefined);\n    ret.addPropertyResult('snapshotOptions', 'SnapshotOptions', properties.SnapshotOptions != null ? CfnDomainSnapshotOptionsPropertyFromCloudFormation(properties.SnapshotOptions) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('vpcOptions', 'VPCOptions', properties.VPCOptions != null ? CfnDomainVPCOptionsPropertyFromCloudFormation(properties.VPCOptions) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDomain extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Elasticsearch::Domain\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDomain {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDomainPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDomain(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                         \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                       \n    public readonly attrDomainEndpoint: string;\n\nn    public accessPolicies: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public advancedOptions: { [key: string]: (string) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                   \n    public advancedSecurityOptions: CfnDomain.AdvancedSecurityOptionsInputProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                     \n    public cognitoOptions: CfnDomain.CognitoOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                           \n    public domainEndpointOptions: CfnDomain.DomainEndpointOptionsProperty | cdk.IResolvable | undefined;\n\nn    public domainName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public ebsOptions: CfnDomain.EBSOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    public elasticsearchClusterConfig: CfnDomain.ElasticsearchClusterConfigProperty | cdk.IResolvable | undefined;\n\nn    public elasticsearchVersion: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public encryptionAtRestOptions: CfnDomain.EncryptionAtRestOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public logPublishingOptions: { [key: string]: (CfnDomain.LogPublishingOptionProperty | cdk.IResolvable) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    public nodeToNodeEncryptionOptions: CfnDomain.NodeToNodeEncryptionOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                       \n    public snapshotOptions: CfnDomain.SnapshotOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                         \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public vpcOptions: CfnDomain.VPCOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnDomainProps = {}) {\n        super(scope, id, { type: CfnDomain.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrDomainEndpoint = cdk.Token.asString(this.getAtt('DomainEndpoint'));\n\n        this.accessPolicies = props.accessPolicies;\n        this.advancedOptions = props.advancedOptions;\n        this.advancedSecurityOptions = props.advancedSecurityOptions;\n        this.cognitoOptions = props.cognitoOptions;\n        this.domainEndpointOptions = props.domainEndpointOptions;\n        this.domainName = props.domainName;\n        this.ebsOptions = props.ebsOptions;\n        this.elasticsearchClusterConfig = props.elasticsearchClusterConfig;\n        this.elasticsearchVersion = props.elasticsearchVersion;\n        this.encryptionAtRestOptions = props.encryptionAtRestOptions;\n        this.logPublishingOptions = props.logPublishingOptions;\n        this.nodeToNodeEncryptionOptions = props.nodeToNodeEncryptionOptions;\n        this.snapshotOptions = props.snapshotOptions;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Elasticsearch::Domain\", props.tags, { tagPropertyName: 'tags' });\n        this.vpcOptions = props.vpcOptions;\n        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {\n            this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === undefined\n              ? ['\\'AWS::Elasticsearch::Domain\\' is a stateful resource type, and you must specify a Removal Policy for it. Call \\'resource.applyRemovalPolicy()\\'.']\n              : [] });\n        }\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDomain.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            accessPolicies: this.accessPolicies,\n            advancedOptions: this.advancedOptions,\n            advancedSecurityOptions: this.advancedSecurityOptions,\n            cognitoOptions: this.cognitoOptions,\n            domainEndpointOptions: this.domainEndpointOptions,\n            domainName: this.domainName,\n            ebsOptions: this.ebsOptions,\n            elasticsearchClusterConfig: this.elasticsearchClusterConfig,\n            elasticsearchVersion: this.elasticsearchVersion,\n            encryptionAtRestOptions: this.encryptionAtRestOptions,\n            logPublishingOptions: this.logPublishingOptions,\n            nodeToNodeEncryptionOptions: this.nodeToNodeEncryptionOptions,\n            snapshotOptions: this.snapshotOptions,\n            tags: this.tags.renderTags(),\n            vpcOptions: this.vpcOptions,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDomainPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDomain {\nn    export interface AdvancedSecurityOptionsInputProperty {\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly enabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                               \n        readonly internalUserDatabaseEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                       \n        readonly masterUserOptions?: CfnDomain.MasterUserOptionsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AdvancedSecurityOptionsInputProperty`\n *\n * @param properties - the TypeScript properties of a `AdvancedSecurityOptionsInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_AdvancedSecurityOptionsInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('internalUserDatabaseEnabled', cdk.validateBoolean)(properties.internalUserDatabaseEnabled));\n    errors.collect(cdk.propertyValidator('masterUserOptions', CfnDomain_MasterUserOptionsPropertyValidator)(properties.masterUserOptions));\n    return errors.wrap('supplied properties not correct for \"AdvancedSecurityOptionsInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.AdvancedSecurityOptionsInput` resource\n *\n * @param properties - the TypeScript properties of a `AdvancedSecurityOptionsInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.AdvancedSecurityOptionsInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainAdvancedSecurityOptionsInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_AdvancedSecurityOptionsInputPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        InternalUserDatabaseEnabled: cdk.booleanToCloudFormation(properties.internalUserDatabaseEnabled),\n        MasterUserOptions: cfnDomainMasterUserOptionsPropertyToCloudFormation(properties.masterUserOptions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainAdvancedSecurityOptionsInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.AdvancedSecurityOptionsInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.AdvancedSecurityOptionsInputProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('internalUserDatabaseEnabled', 'InternalUserDatabaseEnabled', properties.InternalUserDatabaseEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.InternalUserDatabaseEnabled) : undefined);\n    ret.addPropertyResult('masterUserOptions', 'MasterUserOptions', properties.MasterUserOptions != null ? CfnDomainMasterUserOptionsPropertyFromCloudFormation(properties.MasterUserOptions) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface CognitoOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly enabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly identityPoolId?: string;\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly roleArn?: string;\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly userPoolId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CognitoOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `CognitoOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_CognitoOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('identityPoolId', cdk.validateString)(properties.identityPoolId));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('userPoolId', cdk.validateString)(properties.userPoolId));\n    return errors.wrap('supplied properties not correct for \"CognitoOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.CognitoOptions` resource\n *\n * @param properties - the TypeScript properties of a `CognitoOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.CognitoOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainCognitoOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_CognitoOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        IdentityPoolId: cdk.stringToCloudFormation(properties.identityPoolId),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        UserPoolId: cdk.stringToCloudFormation(properties.userPoolId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainCognitoOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.CognitoOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.CognitoOptionsProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('identityPoolId', 'IdentityPoolId', properties.IdentityPoolId != null ? cfn_parse.FromCloudFormation.getString(properties.IdentityPoolId) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);\n    ret.addPropertyResult('userPoolId', 'UserPoolId', properties.UserPoolId != null ? cfn_parse.FromCloudFormation.getString(properties.UserPoolId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface ColdStorageOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly enabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ColdStorageOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `ColdStorageOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_ColdStorageOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"ColdStorageOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.ColdStorageOptions` resource\n *\n * @param properties - the TypeScript properties of a `ColdStorageOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.ColdStorageOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainColdStorageOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_ColdStorageOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainColdStorageOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.ColdStorageOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.ColdStorageOptionsProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface DomainEndpointOptionsProperty {\n                                                                                                                                                                                                                                                                                                           \n        readonly customEndpoint?: string;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly customEndpointCertificateArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly customEndpointEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                         \n        readonly enforceHttps?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly tlsSecurityPolicy?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DomainEndpointOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `DomainEndpointOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_DomainEndpointOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('customEndpoint', cdk.validateString)(properties.customEndpoint));\n    errors.collect(cdk.propertyValidator('customEndpointCertificateArn', cdk.validateString)(properties.customEndpointCertificateArn));\n    errors.collect(cdk.propertyValidator('customEndpointEnabled', cdk.validateBoolean)(properties.customEndpointEnabled));\n    errors.collect(cdk.propertyValidator('enforceHttps', cdk.validateBoolean)(properties.enforceHttps));\n    errors.collect(cdk.propertyValidator('tlsSecurityPolicy', cdk.validateString)(properties.tlsSecurityPolicy));\n    return errors.wrap('supplied properties not correct for \"DomainEndpointOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.DomainEndpointOptions` resource\n *\n * @param properties - the TypeScript properties of a `DomainEndpointOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.DomainEndpointOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainDomainEndpointOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_DomainEndpointOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        CustomEndpoint: cdk.stringToCloudFormation(properties.customEndpoint),\n        CustomEndpointCertificateArn: cdk.stringToCloudFormation(properties.customEndpointCertificateArn),\n        CustomEndpointEnabled: cdk.booleanToCloudFormation(properties.customEndpointEnabled),\n        EnforceHTTPS: cdk.booleanToCloudFormation(properties.enforceHttps),\n        TLSSecurityPolicy: cdk.stringToCloudFormation(properties.tlsSecurityPolicy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainDomainEndpointOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.DomainEndpointOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.DomainEndpointOptionsProperty>();\n    ret.addPropertyResult('customEndpoint', 'CustomEndpoint', properties.CustomEndpoint != null ? cfn_parse.FromCloudFormation.getString(properties.CustomEndpoint) : undefined);\n    ret.addPropertyResult('customEndpointCertificateArn', 'CustomEndpointCertificateArn', properties.CustomEndpointCertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.CustomEndpointCertificateArn) : undefined);\n    ret.addPropertyResult('customEndpointEnabled', 'CustomEndpointEnabled', properties.CustomEndpointEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CustomEndpointEnabled) : undefined);\n    ret.addPropertyResult('enforceHttps', 'EnforceHTTPS', properties.EnforceHTTPS != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnforceHTTPS) : undefined);\n    ret.addPropertyResult('tlsSecurityPolicy', 'TLSSecurityPolicy', properties.TLSSecurityPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.TLSSecurityPolicy) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface EBSOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                 \n        readonly ebsEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly iops?: number;\nn        readonly volumeSize?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly volumeType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EBSOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `EBSOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_EBSOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ebsEnabled', cdk.validateBoolean)(properties.ebsEnabled));\n    errors.collect(cdk.propertyValidator('iops', cdk.validateNumber)(properties.iops));\n    errors.collect(cdk.propertyValidator('volumeSize', cdk.validateNumber)(properties.volumeSize));\n    errors.collect(cdk.propertyValidator('volumeType', cdk.validateString)(properties.volumeType));\n    return errors.wrap('supplied properties not correct for \"EBSOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.EBSOptions` resource\n *\n * @param properties - the TypeScript properties of a `EBSOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.EBSOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainEBSOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_EBSOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        EBSEnabled: cdk.booleanToCloudFormation(properties.ebsEnabled),\n        Iops: cdk.numberToCloudFormation(properties.iops),\n        VolumeSize: cdk.numberToCloudFormation(properties.volumeSize),\n        VolumeType: cdk.stringToCloudFormation(properties.volumeType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainEBSOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.EBSOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.EBSOptionsProperty>();\n    ret.addPropertyResult('ebsEnabled', 'EBSEnabled', properties.EBSEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EBSEnabled) : undefined);\n    ret.addPropertyResult('iops', 'Iops', properties.Iops != null ? cfn_parse.FromCloudFormation.getNumber(properties.Iops) : undefined);\n    ret.addPropertyResult('volumeSize', 'VolumeSize', properties.VolumeSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSize) : undefined);\n    ret.addPropertyResult('volumeType', 'VolumeType', properties.VolumeType != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface ElasticsearchClusterConfigProperty {\n                                                                                                                                                                                                                                                                                                                      \n        readonly coldStorageOptions?: CfnDomain.ColdStorageOptionsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly dedicatedMasterCount?: number;\nn        readonly dedicatedMasterEnabled?: boolean | cdk.IResolvable;\nn        readonly dedicatedMasterType?: string;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly instanceCount?: number;\nn        readonly instanceType?: string;\n                                                                                                                                                                                                                                                                                                       \n        readonly warmCount?: number;\n                                                                                                                                                                                                                                                                                                                \n        readonly warmEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                             \n        readonly warmType?: string;\n                                                                                                                                                                                                                                                                                                                                                                       \n        readonly zoneAwarenessConfig?: CfnDomain.ZoneAwarenessConfigProperty | cdk.IResolvable;\nn        readonly zoneAwarenessEnabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ElasticsearchClusterConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ElasticsearchClusterConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_ElasticsearchClusterConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('coldStorageOptions', CfnDomain_ColdStorageOptionsPropertyValidator)(properties.coldStorageOptions));\n    errors.collect(cdk.propertyValidator('dedicatedMasterCount', cdk.validateNumber)(properties.dedicatedMasterCount));\n    errors.collect(cdk.propertyValidator('dedicatedMasterEnabled', cdk.validateBoolean)(properties.dedicatedMasterEnabled));\n    errors.collect(cdk.propertyValidator('dedicatedMasterType', cdk.validateString)(properties.dedicatedMasterType));\n    errors.collect(cdk.propertyValidator('instanceCount', cdk.validateNumber)(properties.instanceCount));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('warmCount', cdk.validateNumber)(properties.warmCount));\n    errors.collect(cdk.propertyValidator('warmEnabled', cdk.validateBoolean)(properties.warmEnabled));\n    errors.collect(cdk.propertyValidator('warmType', cdk.validateString)(properties.warmType));\n    errors.collect(cdk.propertyValidator('zoneAwarenessConfig', CfnDomain_ZoneAwarenessConfigPropertyValidator)(properties.zoneAwarenessConfig));\n    errors.collect(cdk.propertyValidator('zoneAwarenessEnabled', cdk.validateBoolean)(properties.zoneAwarenessEnabled));\n    return errors.wrap('supplied properties not correct for \"ElasticsearchClusterConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.ElasticsearchClusterConfig` resource\n *\n * @param properties - the TypeScript properties of a `ElasticsearchClusterConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.ElasticsearchClusterConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainElasticsearchClusterConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_ElasticsearchClusterConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ColdStorageOptions: cfnDomainColdStorageOptionsPropertyToCloudFormation(properties.coldStorageOptions),\n        DedicatedMasterCount: cdk.numberToCloudFormation(properties.dedicatedMasterCount),\n        DedicatedMasterEnabled: cdk.booleanToCloudFormation(properties.dedicatedMasterEnabled),\n        DedicatedMasterType: cdk.stringToCloudFormation(properties.dedicatedMasterType),\n        InstanceCount: cdk.numberToCloudFormation(properties.instanceCount),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        WarmCount: cdk.numberToCloudFormation(properties.warmCount),\n        WarmEnabled: cdk.booleanToCloudFormation(properties.warmEnabled),\n        WarmType: cdk.stringToCloudFormation(properties.warmType),\n        ZoneAwarenessConfig: cfnDomainZoneAwarenessConfigPropertyToCloudFormation(properties.zoneAwarenessConfig),\n        ZoneAwarenessEnabled: cdk.booleanToCloudFormation(properties.zoneAwarenessEnabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainElasticsearchClusterConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.ElasticsearchClusterConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.ElasticsearchClusterConfigProperty>();\n    ret.addPropertyResult('coldStorageOptions', 'ColdStorageOptions', properties.ColdStorageOptions != null ? CfnDomainColdStorageOptionsPropertyFromCloudFormation(properties.ColdStorageOptions) : undefined);\n    ret.addPropertyResult('dedicatedMasterCount', 'DedicatedMasterCount', properties.DedicatedMasterCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.DedicatedMasterCount) : undefined);\n    ret.addPropertyResult('dedicatedMasterEnabled', 'DedicatedMasterEnabled', properties.DedicatedMasterEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DedicatedMasterEnabled) : undefined);\n    ret.addPropertyResult('dedicatedMasterType', 'DedicatedMasterType', properties.DedicatedMasterType != null ? cfn_parse.FromCloudFormation.getString(properties.DedicatedMasterType) : undefined);\n    ret.addPropertyResult('instanceCount', 'InstanceCount', properties.InstanceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount) : undefined);\n    ret.addPropertyResult('instanceType', 'InstanceType', properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined);\n    ret.addPropertyResult('warmCount', 'WarmCount', properties.WarmCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.WarmCount) : undefined);\n    ret.addPropertyResult('warmEnabled', 'WarmEnabled', properties.WarmEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.WarmEnabled) : undefined);\n    ret.addPropertyResult('warmType', 'WarmType', properties.WarmType != null ? cfn_parse.FromCloudFormation.getString(properties.WarmType) : undefined);\n    ret.addPropertyResult('zoneAwarenessConfig', 'ZoneAwarenessConfig', properties.ZoneAwarenessConfig != null ? CfnDomainZoneAwarenessConfigPropertyFromCloudFormation(properties.ZoneAwarenessConfig) : undefined);\n    ret.addPropertyResult('zoneAwarenessEnabled', 'ZoneAwarenessEnabled', properties.ZoneAwarenessEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ZoneAwarenessEnabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface EncryptionAtRestOptionsProperty {\n                                                                                                                                                                                                                                                                                                   \n        readonly enabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                              \n        readonly kmsKeyId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EncryptionAtRestOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `EncryptionAtRestOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_EncryptionAtRestOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    return errors.wrap('supplied properties not correct for \"EncryptionAtRestOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.EncryptionAtRestOptions` resource\n *\n * @param properties - the TypeScript properties of a `EncryptionAtRestOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.EncryptionAtRestOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainEncryptionAtRestOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_EncryptionAtRestOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainEncryptionAtRestOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.EncryptionAtRestOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.EncryptionAtRestOptionsProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface LogPublishingOptionProperty {\n                                                                                                                                                                                                                                                                                                                  \n        readonly cloudWatchLogsLogGroupArn?: string;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly enabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogPublishingOptionProperty`\n *\n * @param properties - the TypeScript properties of a `LogPublishingOptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_LogPublishingOptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchLogsLogGroupArn', cdk.validateString)(properties.cloudWatchLogsLogGroupArn));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"LogPublishingOptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.LogPublishingOption` resource\n *\n * @param properties - the TypeScript properties of a `LogPublishingOptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.LogPublishingOption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainLogPublishingOptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_LogPublishingOptionPropertyValidator(properties).assertSuccess();\n    return {\n        CloudWatchLogsLogGroupArn: cdk.stringToCloudFormation(properties.cloudWatchLogsLogGroupArn),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainLogPublishingOptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.LogPublishingOptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.LogPublishingOptionProperty>();\n    ret.addPropertyResult('cloudWatchLogsLogGroupArn', 'CloudWatchLogsLogGroupArn', properties.CloudWatchLogsLogGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.CloudWatchLogsLogGroupArn) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface MasterUserOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly masterUserArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly masterUserName?: string;\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly masterUserPassword?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MasterUserOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `MasterUserOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_MasterUserOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('masterUserArn', cdk.validateString)(properties.masterUserArn));\n    errors.collect(cdk.propertyValidator('masterUserName', cdk.validateString)(properties.masterUserName));\n    errors.collect(cdk.propertyValidator('masterUserPassword', cdk.validateString)(properties.masterUserPassword));\n    return errors.wrap('supplied properties not correct for \"MasterUserOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.MasterUserOptions` resource\n *\n * @param properties - the TypeScript properties of a `MasterUserOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.MasterUserOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainMasterUserOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_MasterUserOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        MasterUserARN: cdk.stringToCloudFormation(properties.masterUserArn),\n        MasterUserName: cdk.stringToCloudFormation(properties.masterUserName),\n        MasterUserPassword: cdk.stringToCloudFormation(properties.masterUserPassword),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainMasterUserOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.MasterUserOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.MasterUserOptionsProperty>();\n    ret.addPropertyResult('masterUserArn', 'MasterUserARN', properties.MasterUserARN != null ? cfn_parse.FromCloudFormation.getString(properties.MasterUserARN) : undefined);\n    ret.addPropertyResult('masterUserName', 'MasterUserName', properties.MasterUserName != null ? cfn_parse.FromCloudFormation.getString(properties.MasterUserName) : undefined);\n    ret.addPropertyResult('masterUserPassword', 'MasterUserPassword', properties.MasterUserPassword != null ? cfn_parse.FromCloudFormation.getString(properties.MasterUserPassword) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface NodeToNodeEncryptionOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                  \n        readonly enabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NodeToNodeEncryptionOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `NodeToNodeEncryptionOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_NodeToNodeEncryptionOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"NodeToNodeEncryptionOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.NodeToNodeEncryptionOptions` resource\n *\n * @param properties - the TypeScript properties of a `NodeToNodeEncryptionOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.NodeToNodeEncryptionOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainNodeToNodeEncryptionOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_NodeToNodeEncryptionOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainNodeToNodeEncryptionOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.NodeToNodeEncryptionOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.NodeToNodeEncryptionOptionsProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface SnapshotOptionsProperty {\nn        readonly automatedSnapshotStartHour?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SnapshotOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `SnapshotOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_SnapshotOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('automatedSnapshotStartHour', cdk.validateNumber)(properties.automatedSnapshotStartHour));\n    return errors.wrap('supplied properties not correct for \"SnapshotOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.SnapshotOptions` resource\n *\n * @param properties - the TypeScript properties of a `SnapshotOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.SnapshotOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainSnapshotOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_SnapshotOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        AutomatedSnapshotStartHour: cdk.numberToCloudFormation(properties.automatedSnapshotStartHour),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainSnapshotOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.SnapshotOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.SnapshotOptionsProperty>();\n    ret.addPropertyResult('automatedSnapshotStartHour', 'AutomatedSnapshotStartHour', properties.AutomatedSnapshotStartHour != null ? cfn_parse.FromCloudFormation.getNumber(properties.AutomatedSnapshotStartHour) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface VPCOptionsProperty {\nn        readonly securityGroupIds?: string[];\nn        readonly subnetIds?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VPCOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `VPCOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_VPCOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    return errors.wrap('supplied properties not correct for \"VPCOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.VPCOptions` resource\n *\n * @param properties - the TypeScript properties of a `VPCOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.VPCOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainVPCOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_VPCOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainVPCOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.VPCOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.VPCOptionsProperty>();\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('subnetIds', 'SubnetIds', properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface ZoneAwarenessConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly availabilityZoneCount?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ZoneAwarenessConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ZoneAwarenessConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_ZoneAwarenessConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityZoneCount', cdk.validateNumber)(properties.availabilityZoneCount));\n    return errors.wrap('supplied properties not correct for \"ZoneAwarenessConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.ZoneAwarenessConfig` resource\n *\n * @param properties - the TypeScript properties of a `ZoneAwarenessConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Elasticsearch::Domain.ZoneAwarenessConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainZoneAwarenessConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_ZoneAwarenessConfigPropertyValidator(properties).assertSuccess();\n    return {\n        AvailabilityZoneCount: cdk.numberToCloudFormation(properties.availabilityZoneCount),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainZoneAwarenessConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.ZoneAwarenessConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.ZoneAwarenessConfigProperty>();\n    ret.addPropertyResult('availabilityZoneCount', 'AvailabilityZoneCount', properties.AvailabilityZoneCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.AvailabilityZoneCount) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
