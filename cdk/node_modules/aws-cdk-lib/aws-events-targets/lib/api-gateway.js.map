{
  "version": 3,
  "sources": ["api-gateway.ts"],
  "sourcesContent": ["import * as api from '../../aws-apigateway';\nimport * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport { addToDeadLetterQueueResourcePolicy, bindBaseTargetConfig, singletonEventRole, TargetBaseProps } from './util';\n\n                                                 \nexport interface ApiGatewayProps extends TargetBaseProps {\n\n                                                                                                            \n  readonly method?: string;\n\n                                                                                                                                                                                                                              \n  readonly path?: string;\n\n                                                                                                                                                      \n  readonly stage?: string;\n\n                                                                                                  \n  readonly headerParameters?: { [key: string]: (string) };\n\n                                                                                                                                                     \n  readonly pathParameterValues?: string[];\n\n                                                                                                                 \n  readonly queryStringParameters?: { [key: string]: (string) };\n\n                                                                                                                    \n  readonly postBody?: events.RuleTargetInput;\n\n                                                                                                                                                                          \n  readonly eventRole?: iam.IRole;\n}\n\n                                                                                 \nexport class ApiGateway implements events.IRuleTarget {\n\n  constructor(public readonly restApi: api.RestApi, private readonly props?: ApiGatewayProps) {\n  }\n\n                                                                                                                                                                                                                                                                         \n  public bind(rule: events.IRule, _id?: string): events.RuleTargetConfig {\n    if (this.props?.deadLetterQueue) {\n      addToDeadLetterQueueResourcePolicy(rule, this.props.deadLetterQueue);\n    }\n\n    const wildcardCountsInPath = this.props?.path?.match( /\\*/g )?.length ?? 0;\n    if (wildcardCountsInPath !== (this.props?.pathParameterValues || []).length) {\n      throw new Error('The number of wildcards in the path does not match the number of path pathParameterValues.');\n    }\n\n    const restApiArn = this.restApi.arnForExecuteApi(\n      this.props?.method,\n      this.props?.path || '/',\n      this.props?.stage || this.restApi.deploymentStage.stageName,\n    );\n    return {\n      ...(this.props ? bindBaseTargetConfig(this.props) : {}),\n      arn: restApiArn,\n      role: this.props?.eventRole || singletonEventRole(this.restApi, [new iam.PolicyStatement({\n        resources: [restApiArn],\n        actions: [\n          'execute-api:Invoke',\n          'execute-api:ManageConnections',\n        ],\n      })]),\n      deadLetterConfig: this.props?.deadLetterQueue && { arn: this.props.deadLetterQueue?.queueArn },\n      input: this.props?.postBody,\n      targetResource: this.restApi,\n      httpParameters: {\n        headerParameters: this.props?.headerParameters,\n        queryStringParameters: this.props?.queryStringParameters,\n        pathParameterValues: this.props?.pathParameterValues,\n      },\n    };\n  }\n\n}\n\n"],
  "mappings": "iNAEA,IAAA,QAAA,iBACA,OAAA,QAAA,UA+BA,gBAAuB,CAErB,YAA4B,QAAuC,MAAuB,CAA9D,KAAA,QAAA,QAAuC,KAAA,MAAA,wJAI5D,KAAK,KAAoB,IAAY,qDAM1C,8DALA,KAAI,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,kBACd,OAAA,mCAAmC,KAAM,KAAK,MAAM,iBAIlD,AADsB,KAAA,IAAA,IAAA,IAAG,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,QAAI,MAAA,KAAA,OAAA,OAAA,GAAE,MAAO,UAAK,MAAA,KAAA,OAAA,OAAA,GAAI,UAAM,MAAA,KAAA,OAAA,GAAI,KAC3C,MAAA,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,sBAAuB,IAAI,OACnE,KAAM,IAAI,OAAM,8FAGlB,KAAM,YAAa,KAAK,QAAQ,iBAAgB,IAC9C,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,OACZ,KAAA,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,OAAQ,IACpB,KAAA,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,QAAS,KAAK,QAAQ,gBAAgB,WAEpD,MAAO,IACD,KAAK,MAAQ,OAAA,qBAAqB,KAAK,OAAS,GACpD,IAAK,WACL,KAAM,KAAA,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,YAAa,OAAA,mBAAmB,KAAK,QAAS,CAAC,GAAI,KAAI,gBAAgB,CACvF,UAAW,CAAC,YACZ,QAAS,CACP,qBACA,qCAGJ,iBAAkB,KAAA,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,kBAAmB,CAAE,IAAG,IAAE,KAAK,MAAM,mBAAe,MAAA,KAAA,OAAA,OAAA,GAAE,UACpF,MAAK,IAAE,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,SACnB,eAAgB,KAAK,QACrB,eAAgB,CACd,iBAAgB,IAAE,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,iBAC9B,sBAAqB,IAAE,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,sBACnC,oBAAmB,IAAE,KAAK,SAAK,MAAA,KAAA,OAAA,OAAA,GAAE,uBArCzC,QAAA,WAAA",
  "names": []
}
