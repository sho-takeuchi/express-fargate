{
  "version": 3,
  "sources": ["sqs.ts"],
  "sourcesContent": ["import * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport * as sqs from '../../aws-sqs';\nimport { addToDeadLetterQueueResourcePolicy, TargetBaseProps, bindBaseTargetConfig } from './util';\n\n                                               \nexport interface SqsQueueProps extends TargetBaseProps {\n\n                                                                                                                                                                                              \n  readonly messageGroupId?: string;\n\n                                                                                                                                                                  \n  readonly message?: events.RuleTargetInput;\n}\n\n                                                                                                                                                                                                                                                                                                           \nexport class SqsQueue implements events.IRuleTarget {\n\n  constructor(public readonly queue: sqs.IQueue, private readonly props: SqsQueueProps = {}) {\n    if (props.messageGroupId !== undefined && !queue.fifo) {\n      throw new Error('messageGroupId cannot be specified for non-FIFO queues');\n    }\n  }\n\n                                                                                                                                                                                                                                                             \n  public bind(rule: events.IRule, _id?: string): events.RuleTargetConfig {\n    // Only add the rule as a condition if the queue is not encrypted, to avoid circular dependency. See issue #11158.\n    const principalOpts = this.queue.encryptionMasterKey ? {} : {\n      conditions: {\n        ArnEquals: { 'aws:SourceArn': rule.ruleArn },\n      },\n    };\n\n    // deduplicated automatically\n    this.queue.grantSendMessages(new iam.ServicePrincipal('events.amazonaws.com', principalOpts));\n\n    if (this.props.deadLetterQueue) {\n      addToDeadLetterQueueResourcePolicy(rule, this.props.deadLetterQueue);\n    }\n\n    return {\n      ...bindBaseTargetConfig(this.props),\n      arn: this.queue.queueArn,\n      input: this.props.message,\n      targetResource: this.queue,\n      sqsParameters: this.props.messageGroupId ? { messageGroupId: this.props.messageGroupId } : undefined,\n    };\n  }\n\n}\n"],
  "mappings": "+MACA,IAAA,QAAA,iBAEA,OAAA,QAAA,UAaA,cAAqB,CAEnB,YAA4B,MAAoC,MAAuB,GAAE,CACvF,GAD0B,KAAA,MAAA,MAAoC,KAAA,MAAA,4IAC1D,MAAM,iBAAmB,QAAa,CAAC,MAAM,KAC/C,KAAM,IAAI,OAAM,0DAKb,KAAK,KAAoB,IAAY,4DAE1C,KAAM,eAAgB,KAAK,MAAM,oBAAsB,GAAK,CAC1D,WAAY,CACV,UAAW,CAAE,gBAAiB,KAAK,WAKvC,YAAK,MAAM,kBAAkB,GAAI,KAAI,iBAAiB,uBAAwB,gBAE1E,KAAK,MAAM,iBACb,OAAA,mCAAmC,KAAM,KAAK,MAAM,iBAG/C,IACF,OAAA,qBAAqB,KAAK,OAC7B,IAAK,KAAK,MAAM,SAChB,MAAO,KAAK,MAAM,QAClB,eAAgB,KAAK,MACrB,cAAe,KAAK,MAAM,eAAiB,CAAE,eAAgB,KAAK,MAAM,gBAAmB,SA7BjG,QAAA,SAAA",
  "names": []
}
