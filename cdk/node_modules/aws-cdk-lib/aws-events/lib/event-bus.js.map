{
  "version": 3,
  "sources": ["event-bus.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport { ArnFormat, IResource, Lazy, Names, Resource, Stack, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { Archive, BaseArchiveProps } from './archive';\nimport { CfnEventBus } from './events.generated';\n\n                                                                    \nexport interface IEventBus extends IResource {\n                                                                                                                                                                                                                     \n  readonly eventBusName: string;\n\n                                                                                                                                                                                                   \n  readonly eventBusArn: string;\n\n                                                                                                                                                                                                              \n  readonly eventBusPolicy: string;\n\n                                                                                                                                                                                                                                        \n  readonly eventSourceName?: string;\n\n                                                                                                                                                                                                                                                                                        \n  archive(id: string, props: BaseArchiveProps): Archive;\n\n                                                                                                                                                                                     \n  grantPutEventsTo(grantee: iam.IGrantable): iam.Grant;\n}\n\n                                            \nexport interface EventBusProps {\n                                                                                                                                                                                                                                                                                                                    \n  readonly eventBusName?: string;\n\n                                                                                                                                                                                                                                                                                                                                               \n  readonly eventSourceName?: string;\n}\n\n                                                                            \nexport interface EventBusAttributes {\n                                                                                                                                                                                                     \n  readonly eventBusName: string;\n\n                                                                                                                                                                                   \n  readonly eventBusArn: string;\n\n                                                                                                                                                                                              \n  readonly eventBusPolicy: string;\n\n                                                                                                                                                                                                                                                                                \n  readonly eventSourceName?: string;\n}\n\nabstract class EventBusBase extends Resource implements IEventBus {\n  /**\n   * The physical ID of this event bus resource\n   */\n  public abstract readonly eventBusName: string;\n\n  /**\n   * The ARN of the event bus, such as:\n   * arn:aws:events:us-east-2:123456789012:event-bus/aws.partner/PartnerName/acct1/repo1.\n   */\n  public abstract readonly eventBusArn: string;\n\n  /**\n   * The policy for the event bus in JSON form.\n   */\n  public abstract readonly eventBusPolicy: string;\n\n  /**\n   * The name of the partner event source\n   */\n  public abstract readonly eventSourceName?: string;\n\n  public archive(id: string, props: BaseArchiveProps): Archive {\n    return new Archive(this, id, {\n      sourceEventBus: this,\n      description: props.description || `Event Archive for ${this.eventBusName} Event Bus`,\n      eventPattern: props.eventPattern,\n      retention: props.retention,\n      archiveName: props.archiveName,\n    });\n  }\n\n  public grantPutEventsTo(grantee: iam.IGrantable): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: ['events:PutEvents'],\n      resourceArns: [this.eventBusArn],\n    });\n  }\n}\n\n                                                                               \nexport class EventBus extends EventBusBase {\n\n                                                                                                                                                                       \n  public static fromEventBusArn(scope: Construct, id: string, eventBusArn: string): IEventBus {\n    const parts = Stack.of(scope).splitArn(eventBusArn, ArnFormat.SLASH_RESOURCE_NAME);\n\n    return new ImportedEventBus(scope, id, {\n      eventBusArn: eventBusArn,\n      eventBusName: parts.resourceName || '',\n      eventBusPolicy: '',\n    });\n  }\n\n                                                                                                                                                                         \n  public static fromEventBusName(scope: Construct, id: string, eventBusName: string): IEventBus {\n    const eventBusArn = Stack.of(scope).formatArn({\n      resource: 'event-bus',\n      service: 'events',\n      resourceName: eventBusName,\n    });\n\n    return EventBus.fromEventBusAttributes(scope, id, {\n      eventBusName: eventBusName,\n      eventBusArn: eventBusArn,\n      eventBusPolicy: '',\n    });\n  }\n\n                                                                                                                                                                     \n  public static fromEventBusAttributes(scope: Construct, id: string, attrs: EventBusAttributes): IEventBus {\n    return new ImportedEventBus(scope, id, attrs);\n  }\n\n                                                                                                                                                                                                                                    \n  public static grantPutEvents(grantee: iam.IGrantable): iam.Grant {\n    // It's currently not possible to restrict PutEvents to specific resources.\n    // See https://docs.aws.amazon.com/eventbridge/latest/userguide/permissions-reference-eventbridge.html\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: ['events:PutEvents'],\n      resourceArns: ['*'],\n    });\n  }\n\n                                                                                                                                                                                     \n  public static grantAllPutEvents(grantee: iam.IGrantable): iam.Grant {\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: ['events:PutEvents'],\n      resourceArns: ['*'],\n    });\n  }\n\n  private static eventBusProps(defaultEventBusName: string, props: EventBusProps = {}) {\n    const { eventBusName, eventSourceName } = props;\n    const eventBusNameRegex = /^[\\/\\.\\-_A-Za-z0-9]{1,256}$/;\n\n    if (eventBusName !== undefined && eventSourceName !== undefined) {\n      throw new Error(\n        '\\'eventBusName\\' and \\'eventSourceName\\' cannot both be provided',\n      );\n    }\n\n    if (eventBusName !== undefined) {\n      if (!Token.isUnresolved(eventBusName)) {\n        if (eventBusName === 'default') {\n          throw new Error(\n            '\\'eventBusName\\' must not be \\'default\\'',\n          );\n        } else if (eventBusName.indexOf('/') > -1) {\n          throw new Error(\n            '\\'eventBusName\\' must not contain \\'/\\'',\n          );\n        } else if (!eventBusNameRegex.test(eventBusName)) {\n          throw new Error(\n            `'eventBusName' must satisfy: ${eventBusNameRegex}`,\n          );\n        }\n      }\n      return { eventBusName };\n    }\n\n    if (eventSourceName !== undefined) {\n      // Ex: aws.partner/PartnerName/acct1/repo1\n      const eventSourceNameRegex = /^aws\\.partner(\\/[\\.\\-_A-Za-z0-9]+){2,}$/;\n      if (!eventSourceNameRegex.test(eventSourceName)) {\n        throw new Error(\n          `'eventSourceName' must satisfy: ${eventSourceNameRegex}`,\n        );\n      } else if (!eventBusNameRegex.test(eventSourceName)) {\n        throw new Error(\n          `'eventSourceName' must satisfy: ${eventBusNameRegex}`,\n        );\n      }\n      return { eventBusName: eventSourceName, eventSourceName };\n    }\n\n    return { eventBusName: defaultEventBusName };\n  }\n\n                                                           \n  public readonly eventBusName: string;\n\n                                                                                                                                             \n  public readonly eventBusArn: string;\n\n                                                           \n  public readonly eventBusPolicy: string;\n\n                                                     \n  public readonly eventSourceName?: string;\n\n  constructor(scope: Construct, id: string, props?: EventBusProps) {\n    const { eventBusName, eventSourceName } = EventBus.eventBusProps(\n      Lazy.string({ produce: () => Names.uniqueId(this) }),\n      props,\n    );\n\n    super(scope, id, { physicalName: eventBusName });\n\n    const eventBus = new CfnEventBus(this, 'Resource', {\n      name: this.physicalName,\n      eventSourceName,\n    });\n\n    this.eventBusArn = this.getResourceArnAttribute(eventBus.attrArn, {\n      service: 'events',\n      resource: 'event-bus',\n      resourceName: eventBus.name,\n    });\n\n    this.eventBusName = this.getResourceNameAttribute(eventBus.ref);\n    this.eventBusPolicy = eventBus.attrPolicy;\n    this.eventSourceName = eventBus.eventSourceName;\n  }\n}\n\nclass ImportedEventBus extends EventBusBase {\n  public readonly eventBusArn: string;\n  public readonly eventBusName: string;\n  public readonly eventBusPolicy: string;\n  public readonly eventSourceName?: string;\n  constructor(scope: Construct, id: string, attrs: EventBusAttributes) {\n    const arnParts = Stack.of(scope).splitArn(attrs.eventBusArn, ArnFormat.SLASH_RESOURCE_NAME);\n    super(scope, id, {\n      account: arnParts.account,\n      region: arnParts.region,\n    });\n\n    this.eventBusArn = attrs.eventBusArn;\n    this.eventBusName = attrs.eventBusName;\n    this.eventBusPolicy = attrs.eventBusPolicy;\n    this.eventSourceName = attrs.eventSourceName;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
