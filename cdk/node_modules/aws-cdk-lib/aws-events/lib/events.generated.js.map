{
  "version": 3,
  "sources": ["events.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:53:38.143Z\",\"fingerprint\":\"1xpL2kq3l6Al0nDMv+0D3H6dC669KKYqf5HFU5CVZV0=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                               \nexport interface CfnApiDestinationProps {\n\n                                                                                                                                                                                                                                                                                                                                             \n    readonly connectionArn: string;\n\n                                                                                                                                                                                                                                                        \n    readonly httpMethod: string;\n\n                                                                                                                                                                                                                                                              \n    readonly invocationEndpoint: string;\n\n                                                                                                                                                                                                                                       \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                          \n    readonly invocationRateLimitPerSecond?: number;\n\n                                                                                                                                                                                                                           \n    readonly name?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApiDestinationProps`\n *\n * @param properties - the TypeScript properties of a `CfnApiDestinationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnApiDestinationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectionArn', cdk.requiredValidator)(properties.connectionArn));\n    errors.collect(cdk.propertyValidator('connectionArn', cdk.validateString)(properties.connectionArn));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('httpMethod', cdk.requiredValidator)(properties.httpMethod));\n    errors.collect(cdk.propertyValidator('httpMethod', cdk.validateString)(properties.httpMethod));\n    errors.collect(cdk.propertyValidator('invocationEndpoint', cdk.requiredValidator)(properties.invocationEndpoint));\n    errors.collect(cdk.propertyValidator('invocationEndpoint', cdk.validateString)(properties.invocationEndpoint));\n    errors.collect(cdk.propertyValidator('invocationRateLimitPerSecond', cdk.validateNumber)(properties.invocationRateLimitPerSecond));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CfnApiDestinationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::ApiDestination` resource\n *\n * @param properties - the TypeScript properties of a `CfnApiDestinationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::ApiDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApiDestinationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApiDestinationPropsValidator(properties).assertSuccess();\n    return {\n        ConnectionArn: cdk.stringToCloudFormation(properties.connectionArn),\n        HttpMethod: cdk.stringToCloudFormation(properties.httpMethod),\n        InvocationEndpoint: cdk.stringToCloudFormation(properties.invocationEndpoint),\n        Description: cdk.stringToCloudFormation(properties.description),\n        InvocationRateLimitPerSecond: cdk.numberToCloudFormation(properties.invocationRateLimitPerSecond),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApiDestinationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApiDestinationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApiDestinationProps>();\n    ret.addPropertyResult('connectionArn', 'ConnectionArn', cfn_parse.FromCloudFormation.getString(properties.ConnectionArn));\n    ret.addPropertyResult('httpMethod', 'HttpMethod', cfn_parse.FromCloudFormation.getString(properties.HttpMethod));\n    ret.addPropertyResult('invocationEndpoint', 'InvocationEndpoint', cfn_parse.FromCloudFormation.getString(properties.InvocationEndpoint));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('invocationRateLimitPerSecond', 'InvocationRateLimitPerSecond', properties.InvocationRateLimitPerSecond != null ? cfn_parse.FromCloudFormation.getNumber(properties.InvocationRateLimitPerSecond) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnApiDestination extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Events::ApiDestination\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApiDestination {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApiDestinationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApiDestination(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                          \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                                             \n    public connectionArn: string;\n\n                                                                                                                                                                                                                                                        \n    public httpMethod: string;\n\n                                                                                                                                                                                                                                                              \n    public invocationEndpoint: string;\n\n                                                                                                                                                                                                                                       \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                          \n    public invocationRateLimitPerSecond: number | undefined;\n\n                                                                                                                                                                                                                           \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnApiDestinationProps) {\n        super(scope, id, { type: CfnApiDestination.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'connectionArn', this);\n        cdk.requireProperty(props, 'httpMethod', this);\n        cdk.requireProperty(props, 'invocationEndpoint', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.connectionArn = props.connectionArn;\n        this.httpMethod = props.httpMethod;\n        this.invocationEndpoint = props.invocationEndpoint;\n        this.description = props.description;\n        this.invocationRateLimitPerSecond = props.invocationRateLimitPerSecond;\n        this.name = props.name;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApiDestination.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            connectionArn: this.connectionArn,\n            httpMethod: this.httpMethod,\n            invocationEndpoint: this.invocationEndpoint,\n            description: this.description,\n            invocationRateLimitPerSecond: this.invocationRateLimitPerSecond,\n            name: this.name,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApiDestinationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                 \nexport interface CfnArchiveProps {\n\n                                                                                                                                                                                                                                 \n    readonly sourceArn: string;\n\n                                                                                                                                                                                                            \n    readonly archiveName?: string;\n\n                                                                                                                                                                                                       \n    readonly description?: string;\n\n                                                                                                                                                                                                                                       \n    readonly eventPattern?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                     \n    readonly retentionDays?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnArchiveProps`\n *\n * @param properties - the TypeScript properties of a `CfnArchiveProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnArchivePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('archiveName', cdk.validateString)(properties.archiveName));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('eventPattern', cdk.validateObject)(properties.eventPattern));\n    errors.collect(cdk.propertyValidator('retentionDays', cdk.validateNumber)(properties.retentionDays));\n    errors.collect(cdk.propertyValidator('sourceArn', cdk.requiredValidator)(properties.sourceArn));\n    errors.collect(cdk.propertyValidator('sourceArn', cdk.validateString)(properties.sourceArn));\n    return errors.wrap('supplied properties not correct for \"CfnArchiveProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Archive` resource\n *\n * @param properties - the TypeScript properties of a `CfnArchiveProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Archive` resource.\n */\n// @ts-ignore TS6133\nfunction cfnArchivePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnArchivePropsValidator(properties).assertSuccess();\n    return {\n        SourceArn: cdk.stringToCloudFormation(properties.sourceArn),\n        ArchiveName: cdk.stringToCloudFormation(properties.archiveName),\n        Description: cdk.stringToCloudFormation(properties.description),\n        EventPattern: cdk.objectToCloudFormation(properties.eventPattern),\n        RetentionDays: cdk.numberToCloudFormation(properties.retentionDays),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnArchivePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnArchiveProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnArchiveProps>();\n    ret.addPropertyResult('sourceArn', 'SourceArn', cfn_parse.FromCloudFormation.getString(properties.SourceArn));\n    ret.addPropertyResult('archiveName', 'ArchiveName', properties.ArchiveName != null ? cfn_parse.FromCloudFormation.getString(properties.ArchiveName) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('eventPattern', 'EventPattern', properties.EventPattern != null ? cfn_parse.FromCloudFormation.getAny(properties.EventPattern) : undefined);\n    ret.addPropertyResult('retentionDays', 'RetentionDays', properties.RetentionDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.RetentionDays) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnArchive extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Events::Archive\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnArchive {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnArchivePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnArchive(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                    \n    public readonly attrArchiveName: string;\n\n                                                                                          \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                 \n    public sourceArn: string;\n\n                                                                                                                                                                                                            \n    public archiveName: string | undefined;\n\n                                                                                                                                                                                                       \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                       \n    public eventPattern: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                     \n    public retentionDays: number | undefined;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnArchiveProps) {\n        super(scope, id, { type: CfnArchive.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'sourceArn', this);\n        this.attrArchiveName = cdk.Token.asString(this.getAtt('ArchiveName'));\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.sourceArn = props.sourceArn;\n        this.archiveName = props.archiveName;\n        this.description = props.description;\n        this.eventPattern = props.eventPattern;\n        this.retentionDays = props.retentionDays;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnArchive.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            sourceArn: this.sourceArn,\n            archiveName: this.archiveName,\n            description: this.description,\n            eventPattern: this.eventPattern,\n            retentionDays: this.retentionDays,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnArchivePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                       \nexport interface CfnConnectionProps {\n\n                                                                                                                                                                                                                                         \n    readonly authorizationType: string;\n\n                                                                                                                                                                                                                                                                                                                    \n    readonly authParameters: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                          \n    readonly description?: string;\n\n                                                                                                                                                                                                              \n    readonly name?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnConnectionProps`\n *\n * @param properties - the TypeScript properties of a `CfnConnectionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authParameters', cdk.requiredValidator)(properties.authParameters));\n    errors.collect(cdk.propertyValidator('authParameters', cdk.validateObject)(properties.authParameters));\n    errors.collect(cdk.propertyValidator('authorizationType', cdk.requiredValidator)(properties.authorizationType));\n    errors.collect(cdk.propertyValidator('authorizationType', cdk.validateString)(properties.authorizationType));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CfnConnectionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Connection` resource\n *\n * @param properties - the TypeScript properties of a `CfnConnectionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Connection` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectionPropsValidator(properties).assertSuccess();\n    return {\n        AuthorizationType: cdk.stringToCloudFormation(properties.authorizationType),\n        AuthParameters: cdk.objectToCloudFormation(properties.authParameters),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectionProps>();\n    ret.addPropertyResult('authorizationType', 'AuthorizationType', cfn_parse.FromCloudFormation.getString(properties.AuthorizationType));\n    ret.addPropertyResult('authParameters', 'AuthParameters', cfn_parse.FromCloudFormation.getAny(properties.AuthParameters));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                        \nexport class CfnConnection extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Events::Connection\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnConnection {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnConnectionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnConnection(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                     \n    public readonly attrArn: string;\n\n                                                                                                                   \n    public readonly attrSecretArn: string;\n\n                                                                                                                                                                                                                                         \n    public authorizationType: string;\n\n                                                                                                                                                                                                                                                                                                                    \n    public authParameters: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                          \n    public description: string | undefined;\n\n                                                                                                                                                                                                              \n    public name: string | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnConnectionProps) {\n        super(scope, id, { type: CfnConnection.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'authParameters', this);\n        cdk.requireProperty(props, 'authorizationType', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrSecretArn = cdk.Token.asString(this.getAtt('SecretArn'));\n\n        this.authorizationType = props.authorizationType;\n        this.authParameters = props.authParameters;\n        this.description = props.description;\n        this.name = props.name;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnConnection.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            authorizationType: this.authorizationType,\n            authParameters: this.authParameters,\n            description: this.description,\n            name: this.name,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnConnectionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                   \nexport interface CfnEventBusProps {\n\nn    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                            \n    readonly eventSourceName?: string;\n\n                                                                                                                                                                                                \n    readonly tags?: CfnEventBus.TagEntryProperty[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEventBusProps`\n *\n * @param properties - the TypeScript properties of a `CfnEventBusProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventBusPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('eventSourceName', cdk.validateString)(properties.eventSourceName));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(CfnEventBus_TagEntryPropertyValidator))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnEventBusProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::EventBus` resource\n *\n * @param properties - the TypeScript properties of a `CfnEventBusProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::EventBus` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventBusPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventBusPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        EventSourceName: cdk.stringToCloudFormation(properties.eventSourceName),\n        Tags: cdk.listMapper(cfnEventBusTagEntryPropertyToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventBusPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventBusProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventBusProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('eventSourceName', 'EventSourceName', properties.EventSourceName != null ? cfn_parse.FromCloudFormation.getString(properties.EventSourceName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(CfnEventBusTagEntryPropertyFromCloudFormation)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \nexport class CfnEventBus extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Events::EventBus\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEventBus {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEventBusPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEventBus(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                    \n    public readonly attrArn: string;\n\n                                                                                                                          \n    public readonly attrName: string;\n\n                                                                                                        \n    public readonly attrPolicy: string;\n\nn    public name: string;\n\n                                                                                                                                                                                                                                                                                                            \n    public eventSourceName: string | undefined;\n\n                                                                                                                                                                                                \n    public tags: CfnEventBus.TagEntryProperty[] | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnEventBusProps) {\n        super(scope, id, { type: CfnEventBus.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n        this.attrPolicy = cdk.Token.asString(this.getAtt('Policy'));\n\n        this.name = props.name;\n        this.eventSourceName = props.eventSourceName;\n        this.tags = props.tags;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEventBus.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            eventSourceName: this.eventSourceName,\n            tags: this.tags,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEventBusPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnEventBus {\n                                                                                                                                                                                                      \n    export interface TagEntryProperty {\n                                                                                                                                                                                                                                             \n        readonly key: string;\n                                                                                                                                                                                                                                                 \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagEntryProperty`\n *\n * @param properties - the TypeScript properties of a `TagEntryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventBus_TagEntryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"TagEntryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::EventBus.TagEntry` resource\n *\n * @param properties - the TypeScript properties of a `TagEntryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::EventBus.TagEntry` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventBusTagEntryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventBus_TagEntryPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventBusTagEntryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventBus.TagEntryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventBus.TagEntryProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                               \nexport interface CfnEventBusPolicyProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly statementId: string;\n\n                                                                                                                                                                                                                                                \n    readonly action?: string;\n\nn    readonly condition?: CfnEventBusPolicy.ConditionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                            \n    readonly eventBusName?: string;\n\nn    readonly principal?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly statement?: any | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEventBusPolicyProps`\n *\n * @param properties - the TypeScript properties of a `CfnEventBusPolicyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventBusPolicyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('action', cdk.validateString)(properties.action));\n    errors.collect(cdk.propertyValidator('condition', CfnEventBusPolicy_ConditionPropertyValidator)(properties.condition));\n    errors.collect(cdk.propertyValidator('eventBusName', cdk.validateString)(properties.eventBusName));\n    errors.collect(cdk.propertyValidator('principal', cdk.validateString)(properties.principal));\n    errors.collect(cdk.propertyValidator('statement', cdk.validateObject)(properties.statement));\n    errors.collect(cdk.propertyValidator('statementId', cdk.requiredValidator)(properties.statementId));\n    errors.collect(cdk.propertyValidator('statementId', cdk.validateString)(properties.statementId));\n    return errors.wrap('supplied properties not correct for \"CfnEventBusPolicyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::EventBusPolicy` resource\n *\n * @param properties - the TypeScript properties of a `CfnEventBusPolicyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::EventBusPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventBusPolicyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventBusPolicyPropsValidator(properties).assertSuccess();\n    return {\n        StatementId: cdk.stringToCloudFormation(properties.statementId),\n        Action: cdk.stringToCloudFormation(properties.action),\n        Condition: cfnEventBusPolicyConditionPropertyToCloudFormation(properties.condition),\n        EventBusName: cdk.stringToCloudFormation(properties.eventBusName),\n        Principal: cdk.stringToCloudFormation(properties.principal),\n        Statement: cdk.objectToCloudFormation(properties.statement),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventBusPolicyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventBusPolicyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventBusPolicyProps>();\n    ret.addPropertyResult('statementId', 'StatementId', cfn_parse.FromCloudFormation.getString(properties.StatementId));\n    ret.addPropertyResult('action', 'Action', properties.Action != null ? cfn_parse.FromCloudFormation.getString(properties.Action) : undefined);\n    ret.addPropertyResult('condition', 'Condition', properties.Condition != null ? CfnEventBusPolicyConditionPropertyFromCloudFormation(properties.Condition) : undefined);\n    ret.addPropertyResult('eventBusName', 'EventBusName', properties.EventBusName != null ? cfn_parse.FromCloudFormation.getString(properties.EventBusName) : undefined);\n    ret.addPropertyResult('principal', 'Principal', properties.Principal != null ? cfn_parse.FromCloudFormation.getString(properties.Principal) : undefined);\n    ret.addPropertyResult('statement', 'Statement', properties.Statement != null ? cfn_parse.FromCloudFormation.getAny(properties.Statement) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnEventBusPolicy extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Events::EventBusPolicy\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEventBusPolicy {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEventBusPolicyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEventBusPolicy(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\nn    public statementId: string;\n\n                                                                                                                                                                                                                                                \n    public action: string | undefined;\n\nn    public condition: CfnEventBusPolicy.ConditionProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                            \n    public eventBusName: string | undefined;\n\nn    public principal: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                               \n    public statement: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnEventBusPolicyProps) {\n        super(scope, id, { type: CfnEventBusPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'statementId', this);\n\n        this.statementId = props.statementId;\n        this.action = props.action;\n        this.condition = props.condition;\n        this.eventBusName = props.eventBusName;\n        this.principal = props.principal;\n        this.statement = props.statement;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEventBusPolicy.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            statementId: this.statementId,\n            action: this.action,\n            condition: this.condition,\n            eventBusName: this.eventBusName,\n            principal: this.principal,\n            statement: this.statement,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEventBusPolicyPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnEventBusPolicy {\nn    export interface ConditionProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly key?: string;\n                                                                                                                                                                                                                                                                                                                 \n        readonly type?: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConditionProperty`\n *\n * @param properties - the TypeScript properties of a `ConditionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventBusPolicy_ConditionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"ConditionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::EventBusPolicy.Condition` resource\n *\n * @param properties - the TypeScript properties of a `ConditionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::EventBusPolicy.Condition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventBusPolicyConditionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventBusPolicy_ConditionPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Type: cdk.stringToCloudFormation(properties.type),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventBusPolicyConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventBusPolicy.ConditionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventBusPolicy.ConditionProperty>();\n    ret.addPropertyResult('key', 'Key', properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                           \nexport interface CfnRuleProps {\n\n                                                                                                                                                                                               \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                               \n    readonly eventBusName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly eventPattern?: any | cdk.IResolvable;\n\n                                                                                                                                                                                 \n    readonly name?: string;\n\nn    readonly roleArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly scheduleExpression?: string;\n\n                                                                                                                                                                                   \n    readonly state?: string;\n\nn    readonly targets?: Array<CfnRule.TargetProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRuleProps`\n *\n * @param properties - the TypeScript properties of a `CfnRuleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRulePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('eventBusName', cdk.validateString)(properties.eventBusName));\n    errors.collect(cdk.propertyValidator('eventPattern', cdk.validateObject)(properties.eventPattern));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.validateString)(properties.scheduleExpression));\n    errors.collect(cdk.propertyValidator('state', cdk.validateString)(properties.state));\n    errors.collect(cdk.propertyValidator('targets', cdk.listValidator(CfnRule_TargetPropertyValidator))(properties.targets));\n    return errors.wrap('supplied properties not correct for \"CfnRuleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule` resource\n *\n * @param properties - the TypeScript properties of a `CfnRuleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRulePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRulePropsValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        EventBusName: cdk.stringToCloudFormation(properties.eventBusName),\n        EventPattern: cdk.objectToCloudFormation(properties.eventPattern),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        ScheduleExpression: cdk.stringToCloudFormation(properties.scheduleExpression),\n        State: cdk.stringToCloudFormation(properties.state),\n        Targets: cdk.listMapper(cfnRuleTargetPropertyToCloudFormation)(properties.targets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRuleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRuleProps>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('eventBusName', 'EventBusName', properties.EventBusName != null ? cfn_parse.FromCloudFormation.getString(properties.EventBusName) : undefined);\n    ret.addPropertyResult('eventPattern', 'EventPattern', properties.EventPattern != null ? cfn_parse.FromCloudFormation.getAny(properties.EventPattern) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);\n    ret.addPropertyResult('scheduleExpression', 'ScheduleExpression', properties.ScheduleExpression != null ? cfn_parse.FromCloudFormation.getString(properties.ScheduleExpression) : undefined);\n    ret.addPropertyResult('state', 'State', properties.State != null ? cfn_parse.FromCloudFormation.getString(properties.State) : undefined);\n    ret.addPropertyResult('targets', 'Targets', properties.Targets != null ? cfn_parse.FromCloudFormation.getArray(CfnRuleTargetPropertyFromCloudFormation)(properties.Targets) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnRule extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Events::Rule\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRule {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRulePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRule(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                              \n    public readonly attrArn: string;\n\n                                                                                                                                                                                               \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                               \n    public eventBusName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                               \n    public eventPattern: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                 \n    public name: string | undefined;\n\nn    public roleArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public scheduleExpression: string | undefined;\n\n                                                                                                                                                                                   \n    public state: string | undefined;\n\nn    public targets: Array<CfnRule.TargetProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnRuleProps = {}) {\n        super(scope, id, { type: CfnRule.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.description = props.description;\n        this.eventBusName = props.eventBusName;\n        this.eventPattern = props.eventPattern;\n        this.name = props.name;\n        this.roleArn = props.roleArn;\n        this.scheduleExpression = props.scheduleExpression;\n        this.state = props.state;\n        this.targets = props.targets;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRule.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            description: this.description,\n            eventBusName: this.eventBusName,\n            eventPattern: this.eventPattern,\n            name: this.name,\n            roleArn: this.roleArn,\n            scheduleExpression: this.scheduleExpression,\n            state: this.state,\n            targets: this.targets,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRulePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface AwsVpcConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly assignPublicIp?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly securityGroups?: string[];\n                                                                                                                                                                                                                                                                                                                                                              \n        readonly subnets: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AwsVpcConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `AwsVpcConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_AwsVpcConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('assignPublicIp', cdk.validateString)(properties.assignPublicIp));\n    errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(cdk.validateString))(properties.securityGroups));\n    errors.collect(cdk.propertyValidator('subnets', cdk.requiredValidator)(properties.subnets));\n    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));\n    return errors.wrap('supplied properties not correct for \"AwsVpcConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.AwsVpcConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `AwsVpcConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.AwsVpcConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleAwsVpcConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_AwsVpcConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AssignPublicIp: cdk.stringToCloudFormation(properties.assignPublicIp),\n        SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),\n        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleAwsVpcConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.AwsVpcConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.AwsVpcConfigurationProperty>();\n    ret.addPropertyResult('assignPublicIp', 'AssignPublicIp', properties.AssignPublicIp != null ? cfn_parse.FromCloudFormation.getString(properties.AssignPublicIp) : undefined);\n    ret.addPropertyResult('securityGroups', 'SecurityGroups', properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroups) : undefined);\n    ret.addPropertyResult('subnets', 'Subnets', cfn_parse.FromCloudFormation.getStringArray(properties.Subnets));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface BatchArrayPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                 \n        readonly size?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BatchArrayPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `BatchArrayPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_BatchArrayPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('size', cdk.validateNumber)(properties.size));\n    return errors.wrap('supplied properties not correct for \"BatchArrayPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.BatchArrayProperties` resource\n *\n * @param properties - the TypeScript properties of a `BatchArrayPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.BatchArrayProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleBatchArrayPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_BatchArrayPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        Size: cdk.numberToCloudFormation(properties.size),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleBatchArrayPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.BatchArrayPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.BatchArrayPropertiesProperty>();\n    ret.addPropertyResult('size', 'Size', properties.Size != null ? cfn_parse.FromCloudFormation.getNumber(properties.Size) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                               \n    export interface BatchParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly arrayProperties?: CfnRule.BatchArrayPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly jobDefinition: string;\n                                                                                                                                                                                                                                                                                                      \n        readonly jobName: string;\nn        readonly retryStrategy?: CfnRule.BatchRetryStrategyProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BatchParametersProperty`\n *\n * @param properties - the TypeScript properties of a `BatchParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_BatchParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arrayProperties', CfnRule_BatchArrayPropertiesPropertyValidator)(properties.arrayProperties));\n    errors.collect(cdk.propertyValidator('jobDefinition', cdk.requiredValidator)(properties.jobDefinition));\n    errors.collect(cdk.propertyValidator('jobDefinition', cdk.validateString)(properties.jobDefinition));\n    errors.collect(cdk.propertyValidator('jobName', cdk.requiredValidator)(properties.jobName));\n    errors.collect(cdk.propertyValidator('jobName', cdk.validateString)(properties.jobName));\n    errors.collect(cdk.propertyValidator('retryStrategy', CfnRule_BatchRetryStrategyPropertyValidator)(properties.retryStrategy));\n    return errors.wrap('supplied properties not correct for \"BatchParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.BatchParameters` resource\n *\n * @param properties - the TypeScript properties of a `BatchParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.BatchParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleBatchParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_BatchParametersPropertyValidator(properties).assertSuccess();\n    return {\n        ArrayProperties: cfnRuleBatchArrayPropertiesPropertyToCloudFormation(properties.arrayProperties),\n        JobDefinition: cdk.stringToCloudFormation(properties.jobDefinition),\n        JobName: cdk.stringToCloudFormation(properties.jobName),\n        RetryStrategy: cfnRuleBatchRetryStrategyPropertyToCloudFormation(properties.retryStrategy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleBatchParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.BatchParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.BatchParametersProperty>();\n    ret.addPropertyResult('arrayProperties', 'ArrayProperties', properties.ArrayProperties != null ? CfnRuleBatchArrayPropertiesPropertyFromCloudFormation(properties.ArrayProperties) : undefined);\n    ret.addPropertyResult('jobDefinition', 'JobDefinition', cfn_parse.FromCloudFormation.getString(properties.JobDefinition));\n    ret.addPropertyResult('jobName', 'JobName', cfn_parse.FromCloudFormation.getString(properties.JobName));\n    ret.addPropertyResult('retryStrategy', 'RetryStrategy', properties.RetryStrategy != null ? CfnRuleBatchRetryStrategyPropertyFromCloudFormation(properties.RetryStrategy) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface BatchRetryStrategyProperty {\n                                                                                                                                                                                                                                                                                                             \n        readonly attempts?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BatchRetryStrategyProperty`\n *\n * @param properties - the TypeScript properties of a `BatchRetryStrategyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_BatchRetryStrategyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attempts', cdk.validateNumber)(properties.attempts));\n    return errors.wrap('supplied properties not correct for \"BatchRetryStrategyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.BatchRetryStrategy` resource\n *\n * @param properties - the TypeScript properties of a `BatchRetryStrategyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.BatchRetryStrategy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleBatchRetryStrategyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_BatchRetryStrategyPropertyValidator(properties).assertSuccess();\n    return {\n        Attempts: cdk.numberToCloudFormation(properties.attempts),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleBatchRetryStrategyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.BatchRetryStrategyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.BatchRetryStrategyProperty>();\n    ret.addPropertyResult('attempts', 'Attempts', properties.Attempts != null ? cfn_parse.FromCloudFormation.getNumber(properties.Attempts) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface CapacityProviderStrategyItemProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly base?: number;\n                                                                                                                                                                                                                                                                                                \n        readonly capacityProvider: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly weight?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CapacityProviderStrategyItemProperty`\n *\n * @param properties - the TypeScript properties of a `CapacityProviderStrategyItemProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_CapacityProviderStrategyItemPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('base', cdk.validateNumber)(properties.base));\n    errors.collect(cdk.propertyValidator('capacityProvider', cdk.requiredValidator)(properties.capacityProvider));\n    errors.collect(cdk.propertyValidator('capacityProvider', cdk.validateString)(properties.capacityProvider));\n    errors.collect(cdk.propertyValidator('weight', cdk.validateNumber)(properties.weight));\n    return errors.wrap('supplied properties not correct for \"CapacityProviderStrategyItemProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.CapacityProviderStrategyItem` resource\n *\n * @param properties - the TypeScript properties of a `CapacityProviderStrategyItemProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.CapacityProviderStrategyItem` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleCapacityProviderStrategyItemPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_CapacityProviderStrategyItemPropertyValidator(properties).assertSuccess();\n    return {\n        Base: cdk.numberToCloudFormation(properties.base),\n        CapacityProvider: cdk.stringToCloudFormation(properties.capacityProvider),\n        Weight: cdk.numberToCloudFormation(properties.weight),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleCapacityProviderStrategyItemPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.CapacityProviderStrategyItemProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.CapacityProviderStrategyItemProperty>();\n    ret.addPropertyResult('base', 'Base', properties.Base != null ? cfn_parse.FromCloudFormation.getNumber(properties.Base) : undefined);\n    ret.addPropertyResult('capacityProvider', 'CapacityProvider', cfn_parse.FromCloudFormation.getString(properties.CapacityProvider));\n    ret.addPropertyResult('weight', 'Weight', properties.Weight != null ? cfn_parse.FromCloudFormation.getNumber(properties.Weight) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                         \n    export interface DeadLetterConfigProperty {\n                                                                                                                                                                                                                                                                                              \n        readonly arn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeadLetterConfigProperty`\n *\n * @param properties - the TypeScript properties of a `DeadLetterConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_DeadLetterConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    return errors.wrap('supplied properties not correct for \"DeadLetterConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.DeadLetterConfig` resource\n *\n * @param properties - the TypeScript properties of a `DeadLetterConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.DeadLetterConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleDeadLetterConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_DeadLetterConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleDeadLetterConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.DeadLetterConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.DeadLetterConfigProperty>();\n    ret.addPropertyResult('arn', 'Arn', properties.Arn != null ? cfn_parse.FromCloudFormation.getString(properties.Arn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                               \n    export interface EcsParametersProperty {\nn        readonly capacityProviderStrategy?: Array<CfnRule.CapacityProviderStrategyItemProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly enableEcsManagedTags?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly enableExecuteCommand?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                              \n        readonly group?: string;\nn        readonly launchType?: string;\nn        readonly networkConfiguration?: CfnRule.NetworkConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly placementConstraints?: Array<CfnRule.PlacementConstraintProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly placementStrategies?: Array<CfnRule.PlacementStrategyProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly platformVersion?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly propagateTags?: string;\n                                                                                                                                                                                                                                                          \n        readonly referenceId?: string;\nn        readonly tagList?: Array<cdk.CfnTag | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                              \n        readonly taskCount?: number;\n                                                                                                                                                                                                                                                                                                           \n        readonly taskDefinitionArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EcsParametersProperty`\n *\n * @param properties - the TypeScript properties of a `EcsParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_EcsParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('capacityProviderStrategy', cdk.listValidator(CfnRule_CapacityProviderStrategyItemPropertyValidator))(properties.capacityProviderStrategy));\n    errors.collect(cdk.propertyValidator('enableEcsManagedTags', cdk.validateBoolean)(properties.enableEcsManagedTags));\n    errors.collect(cdk.propertyValidator('enableExecuteCommand', cdk.validateBoolean)(properties.enableExecuteCommand));\n    errors.collect(cdk.propertyValidator('group', cdk.validateString)(properties.group));\n    errors.collect(cdk.propertyValidator('launchType', cdk.validateString)(properties.launchType));\n    errors.collect(cdk.propertyValidator('networkConfiguration', CfnRule_NetworkConfigurationPropertyValidator)(properties.networkConfiguration));\n    errors.collect(cdk.propertyValidator('placementConstraints', cdk.listValidator(CfnRule_PlacementConstraintPropertyValidator))(properties.placementConstraints));\n    errors.collect(cdk.propertyValidator('placementStrategies', cdk.listValidator(CfnRule_PlacementStrategyPropertyValidator))(properties.placementStrategies));\n    errors.collect(cdk.propertyValidator('platformVersion', cdk.validateString)(properties.platformVersion));\n    errors.collect(cdk.propertyValidator('propagateTags', cdk.validateString)(properties.propagateTags));\n    errors.collect(cdk.propertyValidator('referenceId', cdk.validateString)(properties.referenceId));\n    errors.collect(cdk.propertyValidator('tagList', cdk.listValidator(cdk.validateCfnTag))(properties.tagList));\n    errors.collect(cdk.propertyValidator('taskCount', cdk.validateNumber)(properties.taskCount));\n    errors.collect(cdk.propertyValidator('taskDefinitionArn', cdk.requiredValidator)(properties.taskDefinitionArn));\n    errors.collect(cdk.propertyValidator('taskDefinitionArn', cdk.validateString)(properties.taskDefinitionArn));\n    return errors.wrap('supplied properties not correct for \"EcsParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.EcsParameters` resource\n *\n * @param properties - the TypeScript properties of a `EcsParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.EcsParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleEcsParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_EcsParametersPropertyValidator(properties).assertSuccess();\n    return {\n        CapacityProviderStrategy: cdk.listMapper(cfnRuleCapacityProviderStrategyItemPropertyToCloudFormation)(properties.capacityProviderStrategy),\n        EnableECSManagedTags: cdk.booleanToCloudFormation(properties.enableEcsManagedTags),\n        EnableExecuteCommand: cdk.booleanToCloudFormation(properties.enableExecuteCommand),\n        Group: cdk.stringToCloudFormation(properties.group),\n        LaunchType: cdk.stringToCloudFormation(properties.launchType),\n        NetworkConfiguration: cfnRuleNetworkConfigurationPropertyToCloudFormation(properties.networkConfiguration),\n        PlacementConstraints: cdk.listMapper(cfnRulePlacementConstraintPropertyToCloudFormation)(properties.placementConstraints),\n        PlacementStrategies: cdk.listMapper(cfnRulePlacementStrategyPropertyToCloudFormation)(properties.placementStrategies),\n        PlatformVersion: cdk.stringToCloudFormation(properties.platformVersion),\n        PropagateTags: cdk.stringToCloudFormation(properties.propagateTags),\n        ReferenceId: cdk.stringToCloudFormation(properties.referenceId),\n        TagList: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tagList),\n        TaskCount: cdk.numberToCloudFormation(properties.taskCount),\n        TaskDefinitionArn: cdk.stringToCloudFormation(properties.taskDefinitionArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleEcsParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.EcsParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.EcsParametersProperty>();\n    ret.addPropertyResult('capacityProviderStrategy', 'CapacityProviderStrategy', properties.CapacityProviderStrategy != null ? cfn_parse.FromCloudFormation.getArray(CfnRuleCapacityProviderStrategyItemPropertyFromCloudFormation)(properties.CapacityProviderStrategy) : undefined);\n    ret.addPropertyResult('enableEcsManagedTags', 'EnableECSManagedTags', properties.EnableECSManagedTags != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableECSManagedTags) : undefined);\n    ret.addPropertyResult('enableExecuteCommand', 'EnableExecuteCommand', properties.EnableExecuteCommand != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableExecuteCommand) : undefined);\n    ret.addPropertyResult('group', 'Group', properties.Group != null ? cfn_parse.FromCloudFormation.getString(properties.Group) : undefined);\n    ret.addPropertyResult('launchType', 'LaunchType', properties.LaunchType != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchType) : undefined);\n    ret.addPropertyResult('networkConfiguration', 'NetworkConfiguration', properties.NetworkConfiguration != null ? CfnRuleNetworkConfigurationPropertyFromCloudFormation(properties.NetworkConfiguration) : undefined);\n    ret.addPropertyResult('placementConstraints', 'PlacementConstraints', properties.PlacementConstraints != null ? cfn_parse.FromCloudFormation.getArray(CfnRulePlacementConstraintPropertyFromCloudFormation)(properties.PlacementConstraints) : undefined);\n    ret.addPropertyResult('placementStrategies', 'PlacementStrategies', properties.PlacementStrategies != null ? cfn_parse.FromCloudFormation.getArray(CfnRulePlacementStrategyPropertyFromCloudFormation)(properties.PlacementStrategies) : undefined);\n    ret.addPropertyResult('platformVersion', 'PlatformVersion', properties.PlatformVersion != null ? cfn_parse.FromCloudFormation.getString(properties.PlatformVersion) : undefined);\n    ret.addPropertyResult('propagateTags', 'PropagateTags', properties.PropagateTags != null ? cfn_parse.FromCloudFormation.getString(properties.PropagateTags) : undefined);\n    ret.addPropertyResult('referenceId', 'ReferenceId', properties.ReferenceId != null ? cfn_parse.FromCloudFormation.getString(properties.ReferenceId) : undefined);\n    ret.addPropertyResult('tagList', 'TagList', properties.TagList != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.TagList) : undefined);\n    ret.addPropertyResult('taskCount', 'TaskCount', properties.TaskCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.TaskCount) : undefined);\n    ret.addPropertyResult('taskDefinitionArn', 'TaskDefinitionArn', cfn_parse.FromCloudFormation.getString(properties.TaskDefinitionArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface HttpParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly headerParameters?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly pathParameterValues?: string[];\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly queryStringParameters?: { [key: string]: (string) } | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HttpParametersProperty`\n *\n * @param properties - the TypeScript properties of a `HttpParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_HttpParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('headerParameters', cdk.hashValidator(cdk.validateString))(properties.headerParameters));\n    errors.collect(cdk.propertyValidator('pathParameterValues', cdk.listValidator(cdk.validateString))(properties.pathParameterValues));\n    errors.collect(cdk.propertyValidator('queryStringParameters', cdk.hashValidator(cdk.validateString))(properties.queryStringParameters));\n    return errors.wrap('supplied properties not correct for \"HttpParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.HttpParameters` resource\n *\n * @param properties - the TypeScript properties of a `HttpParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.HttpParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleHttpParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_HttpParametersPropertyValidator(properties).assertSuccess();\n    return {\n        HeaderParameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.headerParameters),\n        PathParameterValues: cdk.listMapper(cdk.stringToCloudFormation)(properties.pathParameterValues),\n        QueryStringParameters: cdk.hashMapper(cdk.stringToCloudFormation)(properties.queryStringParameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleHttpParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.HttpParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.HttpParametersProperty>();\n    ret.addPropertyResult('headerParameters', 'HeaderParameters', properties.HeaderParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.HeaderParameters) : undefined);\n    ret.addPropertyResult('pathParameterValues', 'PathParameterValues', properties.PathParameterValues != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PathParameterValues) : undefined);\n    ret.addPropertyResult('queryStringParameters', 'QueryStringParameters', properties.QueryStringParameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.QueryStringParameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                   \n    export interface InputTransformerProperty {\nn        readonly inputPathsMap?: { [key: string]: (string) } | cdk.IResolvable;\nn        readonly inputTemplate: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputTransformerProperty`\n *\n * @param properties - the TypeScript properties of a `InputTransformerProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_InputTransformerPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('inputPathsMap', cdk.hashValidator(cdk.validateString))(properties.inputPathsMap));\n    errors.collect(cdk.propertyValidator('inputTemplate', cdk.requiredValidator)(properties.inputTemplate));\n    errors.collect(cdk.propertyValidator('inputTemplate', cdk.validateString)(properties.inputTemplate));\n    return errors.wrap('supplied properties not correct for \"InputTransformerProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.InputTransformer` resource\n *\n * @param properties - the TypeScript properties of a `InputTransformerProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.InputTransformer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleInputTransformerPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_InputTransformerPropertyValidator(properties).assertSuccess();\n    return {\n        InputPathsMap: cdk.hashMapper(cdk.stringToCloudFormation)(properties.inputPathsMap),\n        InputTemplate: cdk.stringToCloudFormation(properties.inputTemplate),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleInputTransformerPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.InputTransformerProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.InputTransformerProperty>();\n    ret.addPropertyResult('inputPathsMap', 'InputPathsMap', properties.InputPathsMap != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.InputPathsMap) : undefined);\n    ret.addPropertyResult('inputTemplate', 'InputTemplate', cfn_parse.FromCloudFormation.getString(properties.InputTemplate));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface KinesisParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly partitionKeyPath: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KinesisParametersProperty`\n *\n * @param properties - the TypeScript properties of a `KinesisParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_KinesisParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('partitionKeyPath', cdk.requiredValidator)(properties.partitionKeyPath));\n    errors.collect(cdk.propertyValidator('partitionKeyPath', cdk.validateString)(properties.partitionKeyPath));\n    return errors.wrap('supplied properties not correct for \"KinesisParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.KinesisParameters` resource\n *\n * @param properties - the TypeScript properties of a `KinesisParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.KinesisParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleKinesisParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_KinesisParametersPropertyValidator(properties).assertSuccess();\n    return {\n        PartitionKeyPath: cdk.stringToCloudFormation(properties.partitionKeyPath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleKinesisParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.KinesisParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.KinesisParametersProperty>();\n    ret.addPropertyResult('partitionKeyPath', 'PartitionKeyPath', cfn_parse.FromCloudFormation.getString(properties.PartitionKeyPath));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                  \n    export interface NetworkConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly awsVpcConfiguration?: CfnRule.AwsVpcConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_NetworkConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('awsVpcConfiguration', CfnRule_AwsVpcConfigurationPropertyValidator)(properties.awsVpcConfiguration));\n    return errors.wrap('supplied properties not correct for \"NetworkConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.NetworkConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `NetworkConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.NetworkConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleNetworkConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_NetworkConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AwsVpcConfiguration: cfnRuleAwsVpcConfigurationPropertyToCloudFormation(properties.awsVpcConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleNetworkConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.NetworkConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.NetworkConfigurationProperty>();\n    ret.addPropertyResult('awsVpcConfiguration', 'AwsVpcConfiguration', properties.AwsVpcConfiguration != null ? CfnRuleAwsVpcConfigurationPropertyFromCloudFormation(properties.AwsVpcConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface PlacementConstraintProperty {\nn        readonly expression?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PlacementConstraintProperty`\n *\n * @param properties - the TypeScript properties of a `PlacementConstraintProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_PlacementConstraintPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('expression', cdk.validateString)(properties.expression));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"PlacementConstraintProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.PlacementConstraint` resource\n *\n * @param properties - the TypeScript properties of a `PlacementConstraintProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.PlacementConstraint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRulePlacementConstraintPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_PlacementConstraintPropertyValidator(properties).assertSuccess();\n    return {\n        Expression: cdk.stringToCloudFormation(properties.expression),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRulePlacementConstraintPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.PlacementConstraintProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.PlacementConstraintProperty>();\n    ret.addPropertyResult('expression', 'Expression', properties.Expression != null ? cfn_parse.FromCloudFormation.getString(properties.Expression) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface PlacementStrategyProperty {\nn        readonly field?: string;\nn        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PlacementStrategyProperty`\n *\n * @param properties - the TypeScript properties of a `PlacementStrategyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_PlacementStrategyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('field', cdk.validateString)(properties.field));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"PlacementStrategyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.PlacementStrategy` resource\n *\n * @param properties - the TypeScript properties of a `PlacementStrategyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.PlacementStrategy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRulePlacementStrategyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_PlacementStrategyPropertyValidator(properties).assertSuccess();\n    return {\n        Field: cdk.stringToCloudFormation(properties.field),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRulePlacementStrategyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.PlacementStrategyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.PlacementStrategyProperty>();\n    ret.addPropertyResult('field', 'Field', properties.Field != null ? cfn_parse.FromCloudFormation.getString(properties.Field) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface RedshiftDataParametersProperty {\n                                                                                                                                                                                                                                                                                                                       \n        readonly database: string;\n                                                                                                                                                                                                                                                                                                                   \n        readonly dbUser?: string;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly secretManagerArn?: string;\n                                                                                                                                                                                                                                                             \n        readonly sql: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly statementName?: string;\n                                                                                                                                                                                                                                                                                                                         \n        readonly withEvent?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RedshiftDataParametersProperty`\n *\n * @param properties - the TypeScript properties of a `RedshiftDataParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_RedshiftDataParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('database', cdk.requiredValidator)(properties.database));\n    errors.collect(cdk.propertyValidator('database', cdk.validateString)(properties.database));\n    errors.collect(cdk.propertyValidator('dbUser', cdk.validateString)(properties.dbUser));\n    errors.collect(cdk.propertyValidator('secretManagerArn', cdk.validateString)(properties.secretManagerArn));\n    errors.collect(cdk.propertyValidator('sql', cdk.requiredValidator)(properties.sql));\n    errors.collect(cdk.propertyValidator('sql', cdk.validateString)(properties.sql));\n    errors.collect(cdk.propertyValidator('statementName', cdk.validateString)(properties.statementName));\n    errors.collect(cdk.propertyValidator('withEvent', cdk.validateBoolean)(properties.withEvent));\n    return errors.wrap('supplied properties not correct for \"RedshiftDataParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.RedshiftDataParameters` resource\n *\n * @param properties - the TypeScript properties of a `RedshiftDataParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.RedshiftDataParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleRedshiftDataParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_RedshiftDataParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Database: cdk.stringToCloudFormation(properties.database),\n        DbUser: cdk.stringToCloudFormation(properties.dbUser),\n        SecretManagerArn: cdk.stringToCloudFormation(properties.secretManagerArn),\n        Sql: cdk.stringToCloudFormation(properties.sql),\n        StatementName: cdk.stringToCloudFormation(properties.statementName),\n        WithEvent: cdk.booleanToCloudFormation(properties.withEvent),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleRedshiftDataParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.RedshiftDataParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.RedshiftDataParametersProperty>();\n    ret.addPropertyResult('database', 'Database', cfn_parse.FromCloudFormation.getString(properties.Database));\n    ret.addPropertyResult('dbUser', 'DbUser', properties.DbUser != null ? cfn_parse.FromCloudFormation.getString(properties.DbUser) : undefined);\n    ret.addPropertyResult('secretManagerArn', 'SecretManagerArn', properties.SecretManagerArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretManagerArn) : undefined);\n    ret.addPropertyResult('sql', 'Sql', cfn_parse.FromCloudFormation.getString(properties.Sql));\n    ret.addPropertyResult('statementName', 'StatementName', properties.StatementName != null ? cfn_parse.FromCloudFormation.getString(properties.StatementName) : undefined);\n    ret.addPropertyResult('withEvent', 'WithEvent', properties.WithEvent != null ? cfn_parse.FromCloudFormation.getBoolean(properties.WithEvent) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                       \n    export interface RetryPolicyProperty {\n                                                                                                                                                                                                                                                                                                         \n        readonly maximumEventAgeInSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly maximumRetryAttempts?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RetryPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `RetryPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_RetryPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maximumEventAgeInSeconds', cdk.validateNumber)(properties.maximumEventAgeInSeconds));\n    errors.collect(cdk.propertyValidator('maximumRetryAttempts', cdk.validateNumber)(properties.maximumRetryAttempts));\n    return errors.wrap('supplied properties not correct for \"RetryPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.RetryPolicy` resource\n *\n * @param properties - the TypeScript properties of a `RetryPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.RetryPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleRetryPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_RetryPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        MaximumEventAgeInSeconds: cdk.numberToCloudFormation(properties.maximumEventAgeInSeconds),\n        MaximumRetryAttempts: cdk.numberToCloudFormation(properties.maximumRetryAttempts),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleRetryPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.RetryPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.RetryPolicyProperty>();\n    ret.addPropertyResult('maximumEventAgeInSeconds', 'MaximumEventAgeInSeconds', properties.MaximumEventAgeInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumEventAgeInSeconds) : undefined);\n    ret.addPropertyResult('maximumRetryAttempts', 'MaximumRetryAttempts', properties.MaximumRetryAttempts != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumRetryAttempts) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                 \n    export interface RunCommandParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly runCommandTargets: Array<CfnRule.RunCommandTargetProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RunCommandParametersProperty`\n *\n * @param properties - the TypeScript properties of a `RunCommandParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_RunCommandParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('runCommandTargets', cdk.requiredValidator)(properties.runCommandTargets));\n    errors.collect(cdk.propertyValidator('runCommandTargets', cdk.listValidator(CfnRule_RunCommandTargetPropertyValidator))(properties.runCommandTargets));\n    return errors.wrap('supplied properties not correct for \"RunCommandParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.RunCommandParameters` resource\n *\n * @param properties - the TypeScript properties of a `RunCommandParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.RunCommandParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleRunCommandParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_RunCommandParametersPropertyValidator(properties).assertSuccess();\n    return {\n        RunCommandTargets: cdk.listMapper(cfnRuleRunCommandTargetPropertyToCloudFormation)(properties.runCommandTargets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleRunCommandParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.RunCommandParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.RunCommandParametersProperty>();\n    ret.addPropertyResult('runCommandTargets', 'RunCommandTargets', cfn_parse.FromCloudFormation.getArray(CfnRuleRunCommandTargetPropertyFromCloudFormation)(properties.RunCommandTargets));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface RunCommandTargetProperty {\n                                                                                                                                                                                                                                                                    \n        readonly key: string;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly values: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RunCommandTargetProperty`\n *\n * @param properties - the TypeScript properties of a `RunCommandTargetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_RunCommandTargetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));\n    return errors.wrap('supplied properties not correct for \"RunCommandTargetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.RunCommandTarget` resource\n *\n * @param properties - the TypeScript properties of a `RunCommandTargetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.RunCommandTarget` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleRunCommandTargetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_RunCommandTargetPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleRunCommandTargetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.RunCommandTargetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.RunCommandTargetProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getStringArray(properties.Values));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                     \n    export interface SqsParametersProperty {\n                                                                                                                                                                                                                                                                       \n        readonly messageGroupId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SqsParametersProperty`\n *\n * @param properties - the TypeScript properties of a `SqsParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_SqsParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('messageGroupId', cdk.requiredValidator)(properties.messageGroupId));\n    errors.collect(cdk.propertyValidator('messageGroupId', cdk.validateString)(properties.messageGroupId));\n    return errors.wrap('supplied properties not correct for \"SqsParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.SqsParameters` resource\n *\n * @param properties - the TypeScript properties of a `SqsParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.SqsParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleSqsParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_SqsParametersPropertyValidator(properties).assertSuccess();\n    return {\n        MessageGroupId: cdk.stringToCloudFormation(properties.messageGroupId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleSqsParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.SqsParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.SqsParametersProperty>();\n    ret.addPropertyResult('messageGroupId', 'MessageGroupId', cfn_parse.FromCloudFormation.getString(properties.MessageGroupId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface TagProperty {\n                                                                                                                                                                                                                                                                                                                            \n        readonly key?: string;\n                                                                                                                                                                                                                               \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagProperty`\n *\n * @param properties - the TypeScript properties of a `TagProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_TagPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"TagProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.Tag` resource\n *\n * @param properties - the TypeScript properties of a `TagProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.Tag` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleTagPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_TagPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleTagPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.TagProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.TagProperty>();\n    ret.addPropertyResult('key', 'Key', properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined);\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnRule {\nn    export interface TargetProperty {\n                                                                                                                                                                                                                                            \n        readonly arn: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly batchParameters?: CfnRule.BatchParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                     \n        readonly deadLetterConfig?: CfnRule.DeadLetterConfigProperty | cdk.IResolvable;\nn        readonly ecsParameters?: CfnRule.EcsParametersProperty | cdk.IResolvable;\nn        readonly httpParameters?: CfnRule.HttpParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly id: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly input?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly inputPath?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly inputTransformer?: CfnRule.InputTransformerProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly kinesisParameters?: CfnRule.KinesisParametersProperty | cdk.IResolvable;\nn        readonly redshiftDataParameters?: CfnRule.RedshiftDataParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                              \n        readonly retryPolicy?: CfnRule.RetryPolicyProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly roleArn?: string;\n                                                                                                                                                                                                                                                                                             \n        readonly runCommandParameters?: CfnRule.RunCommandParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly sqsParameters?: CfnRule.SqsParametersProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetProperty`\n *\n * @param properties - the TypeScript properties of a `TargetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_TargetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    errors.collect(cdk.propertyValidator('batchParameters', CfnRule_BatchParametersPropertyValidator)(properties.batchParameters));\n    errors.collect(cdk.propertyValidator('deadLetterConfig', CfnRule_DeadLetterConfigPropertyValidator)(properties.deadLetterConfig));\n    errors.collect(cdk.propertyValidator('ecsParameters', CfnRule_EcsParametersPropertyValidator)(properties.ecsParameters));\n    errors.collect(cdk.propertyValidator('httpParameters', CfnRule_HttpParametersPropertyValidator)(properties.httpParameters));\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('input', cdk.validateString)(properties.input));\n    errors.collect(cdk.propertyValidator('inputPath', cdk.validateString)(properties.inputPath));\n    errors.collect(cdk.propertyValidator('inputTransformer', CfnRule_InputTransformerPropertyValidator)(properties.inputTransformer));\n    errors.collect(cdk.propertyValidator('kinesisParameters', CfnRule_KinesisParametersPropertyValidator)(properties.kinesisParameters));\n    errors.collect(cdk.propertyValidator('redshiftDataParameters', CfnRule_RedshiftDataParametersPropertyValidator)(properties.redshiftDataParameters));\n    errors.collect(cdk.propertyValidator('retryPolicy', CfnRule_RetryPolicyPropertyValidator)(properties.retryPolicy));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('runCommandParameters', CfnRule_RunCommandParametersPropertyValidator)(properties.runCommandParameters));\n    errors.collect(cdk.propertyValidator('sqsParameters', CfnRule_SqsParametersPropertyValidator)(properties.sqsParameters));\n    return errors.wrap('supplied properties not correct for \"TargetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Events::Rule.Target` resource\n *\n * @param properties - the TypeScript properties of a `TargetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Events::Rule.Target` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRuleTargetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_TargetPropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n        BatchParameters: cfnRuleBatchParametersPropertyToCloudFormation(properties.batchParameters),\n        DeadLetterConfig: cfnRuleDeadLetterConfigPropertyToCloudFormation(properties.deadLetterConfig),\n        EcsParameters: cfnRuleEcsParametersPropertyToCloudFormation(properties.ecsParameters),\n        HttpParameters: cfnRuleHttpParametersPropertyToCloudFormation(properties.httpParameters),\n        Id: cdk.stringToCloudFormation(properties.id),\n        Input: cdk.stringToCloudFormation(properties.input),\n        InputPath: cdk.stringToCloudFormation(properties.inputPath),\n        InputTransformer: cfnRuleInputTransformerPropertyToCloudFormation(properties.inputTransformer),\n        KinesisParameters: cfnRuleKinesisParametersPropertyToCloudFormation(properties.kinesisParameters),\n        RedshiftDataParameters: cfnRuleRedshiftDataParametersPropertyToCloudFormation(properties.redshiftDataParameters),\n        RetryPolicy: cfnRuleRetryPolicyPropertyToCloudFormation(properties.retryPolicy),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        RunCommandParameters: cfnRuleRunCommandParametersPropertyToCloudFormation(properties.runCommandParameters),\n        SqsParameters: cfnRuleSqsParametersPropertyToCloudFormation(properties.sqsParameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRuleTargetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.TargetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.TargetProperty>();\n    ret.addPropertyResult('arn', 'Arn', cfn_parse.FromCloudFormation.getString(properties.Arn));\n    ret.addPropertyResult('batchParameters', 'BatchParameters', properties.BatchParameters != null ? CfnRuleBatchParametersPropertyFromCloudFormation(properties.BatchParameters) : undefined);\n    ret.addPropertyResult('deadLetterConfig', 'DeadLetterConfig', properties.DeadLetterConfig != null ? CfnRuleDeadLetterConfigPropertyFromCloudFormation(properties.DeadLetterConfig) : undefined);\n    ret.addPropertyResult('ecsParameters', 'EcsParameters', properties.EcsParameters != null ? CfnRuleEcsParametersPropertyFromCloudFormation(properties.EcsParameters) : undefined);\n    ret.addPropertyResult('httpParameters', 'HttpParameters', properties.HttpParameters != null ? CfnRuleHttpParametersPropertyFromCloudFormation(properties.HttpParameters) : undefined);\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('input', 'Input', properties.Input != null ? cfn_parse.FromCloudFormation.getString(properties.Input) : undefined);\n    ret.addPropertyResult('inputPath', 'InputPath', properties.InputPath != null ? cfn_parse.FromCloudFormation.getString(properties.InputPath) : undefined);\n    ret.addPropertyResult('inputTransformer', 'InputTransformer', properties.InputTransformer != null ? CfnRuleInputTransformerPropertyFromCloudFormation(properties.InputTransformer) : undefined);\n    ret.addPropertyResult('kinesisParameters', 'KinesisParameters', properties.KinesisParameters != null ? CfnRuleKinesisParametersPropertyFromCloudFormation(properties.KinesisParameters) : undefined);\n    ret.addPropertyResult('redshiftDataParameters', 'RedshiftDataParameters', properties.RedshiftDataParameters != null ? CfnRuleRedshiftDataParametersPropertyFromCloudFormation(properties.RedshiftDataParameters) : undefined);\n    ret.addPropertyResult('retryPolicy', 'RetryPolicy', properties.RetryPolicy != null ? CfnRuleRetryPolicyPropertyFromCloudFormation(properties.RetryPolicy) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);\n    ret.addPropertyResult('runCommandParameters', 'RunCommandParameters', properties.RunCommandParameters != null ? CfnRuleRunCommandParametersPropertyFromCloudFormation(properties.RunCommandParameters) : undefined);\n    ret.addPropertyResult('sqsParameters', 'SqsParameters', properties.SqsParameters != null ? CfnRuleSqsParametersPropertyFromCloudFormation(properties.SqsParameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
