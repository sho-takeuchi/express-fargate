{
  "version": 3,
  "sources": ["fms.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:30.992Z\",\"fingerprint\":\"VxF9i1yofYFJyzn8qpf8OiI//k+m3Xk6ytXZnAMPZ2Y=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                      \nexport interface CfnNotificationChannelProps {\n\n                                                                                                                                                                                                                                                                                                         \n    readonly snsRoleName: string;\n\n                                                                                                                                                                                                                                                                                                  \n    readonly snsTopicArn: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNotificationChannelProps`\n *\n * @param properties - the TypeScript properties of a `CfnNotificationChannelProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNotificationChannelPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('snsRoleName', cdk.requiredValidator)(properties.snsRoleName));\n    errors.collect(cdk.propertyValidator('snsRoleName', cdk.validateString)(properties.snsRoleName));\n    errors.collect(cdk.propertyValidator('snsTopicArn', cdk.requiredValidator)(properties.snsTopicArn));\n    errors.collect(cdk.propertyValidator('snsTopicArn', cdk.validateString)(properties.snsTopicArn));\n    return errors.wrap('supplied properties not correct for \"CfnNotificationChannelProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::FMS::NotificationChannel` resource\n *\n * @param properties - the TypeScript properties of a `CfnNotificationChannelProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::FMS::NotificationChannel` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNotificationChannelPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNotificationChannelPropsValidator(properties).assertSuccess();\n    return {\n        SnsRoleName: cdk.stringToCloudFormation(properties.snsRoleName),\n        SnsTopicArn: cdk.stringToCloudFormation(properties.snsTopicArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNotificationChannelPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNotificationChannelProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNotificationChannelProps>();\n    ret.addPropertyResult('snsRoleName', 'SnsRoleName', cfn_parse.FromCloudFormation.getString(properties.SnsRoleName));\n    ret.addPropertyResult('snsTopicArn', 'SnsTopicArn', cfn_parse.FromCloudFormation.getString(properties.SnsTopicArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnNotificationChannel extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::FMS::NotificationChannel\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNotificationChannel {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNotificationChannelPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNotificationChannel(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                         \n    public snsRoleName: string;\n\n                                                                                                                                                                                                                                                                                                  \n    public snsTopicArn: string;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnNotificationChannelProps) {\n        super(scope, id, { type: CfnNotificationChannel.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'snsRoleName', this);\n        cdk.requireProperty(props, 'snsTopicArn', this);\n\n        this.snsRoleName = props.snsRoleName;\n        this.snsTopicArn = props.snsTopicArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNotificationChannel.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            snsRoleName: this.snsRoleName,\n            snsTopicArn: this.snsTopicArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNotificationChannelPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                            \nexport interface CfnPolicyProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly excludeResourceTags: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                            \n    readonly policyName: string;\n\n                                                                                                                                                                                                                                                 \n    readonly remediationEnabled: boolean | cdk.IResolvable;\n\nn    readonly resourceType: string;\n\nn    readonly securityServicePolicyData: any | cdk.IResolvable;\n\nn    readonly deleteAllPolicyResources?: boolean | cdk.IResolvable;\n\nn    readonly excludeMap?: CfnPolicy.IEMapProperty | cdk.IResolvable;\n\nn    readonly includeMap?: CfnPolicy.IEMapProperty | cdk.IResolvable;\n\nn    readonly resourcesCleanUp?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly resourceTags?: Array<CfnPolicy.ResourceTagProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                   \n    readonly resourceTypeList?: string[];\n\nn    readonly tags?: CfnPolicy.PolicyTagProperty[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPolicyProps`\n *\n * @param properties - the TypeScript properties of a `CfnPolicyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPolicyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deleteAllPolicyResources', cdk.validateBoolean)(properties.deleteAllPolicyResources));\n    errors.collect(cdk.propertyValidator('excludeMap', CfnPolicy_IEMapPropertyValidator)(properties.excludeMap));\n    errors.collect(cdk.propertyValidator('excludeResourceTags', cdk.requiredValidator)(properties.excludeResourceTags));\n    errors.collect(cdk.propertyValidator('excludeResourceTags', cdk.validateBoolean)(properties.excludeResourceTags));\n    errors.collect(cdk.propertyValidator('includeMap', CfnPolicy_IEMapPropertyValidator)(properties.includeMap));\n    errors.collect(cdk.propertyValidator('policyName', cdk.requiredValidator)(properties.policyName));\n    errors.collect(cdk.propertyValidator('policyName', cdk.validateString)(properties.policyName));\n    errors.collect(cdk.propertyValidator('remediationEnabled', cdk.requiredValidator)(properties.remediationEnabled));\n    errors.collect(cdk.propertyValidator('remediationEnabled', cdk.validateBoolean)(properties.remediationEnabled));\n    errors.collect(cdk.propertyValidator('resourceTags', cdk.listValidator(CfnPolicy_ResourceTagPropertyValidator))(properties.resourceTags));\n    errors.collect(cdk.propertyValidator('resourceType', cdk.requiredValidator)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('resourceTypeList', cdk.listValidator(cdk.validateString))(properties.resourceTypeList));\n    errors.collect(cdk.propertyValidator('resourcesCleanUp', cdk.validateBoolean)(properties.resourcesCleanUp));\n    errors.collect(cdk.propertyValidator('securityServicePolicyData', cdk.requiredValidator)(properties.securityServicePolicyData));\n    errors.collect(cdk.propertyValidator('securityServicePolicyData', cdk.validateObject)(properties.securityServicePolicyData));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(CfnPolicy_PolicyTagPropertyValidator))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnPolicyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::FMS::Policy` resource\n *\n * @param properties - the TypeScript properties of a `CfnPolicyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::FMS::Policy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPolicyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPolicyPropsValidator(properties).assertSuccess();\n    return {\n        ExcludeResourceTags: cdk.booleanToCloudFormation(properties.excludeResourceTags),\n        PolicyName: cdk.stringToCloudFormation(properties.policyName),\n        RemediationEnabled: cdk.booleanToCloudFormation(properties.remediationEnabled),\n        ResourceType: cdk.stringToCloudFormation(properties.resourceType),\n        SecurityServicePolicyData: cdk.objectToCloudFormation(properties.securityServicePolicyData),\n        DeleteAllPolicyResources: cdk.booleanToCloudFormation(properties.deleteAllPolicyResources),\n        ExcludeMap: cfnPolicyIEMapPropertyToCloudFormation(properties.excludeMap),\n        IncludeMap: cfnPolicyIEMapPropertyToCloudFormation(properties.includeMap),\n        ResourcesCleanUp: cdk.booleanToCloudFormation(properties.resourcesCleanUp),\n        ResourceTags: cdk.listMapper(cfnPolicyResourceTagPropertyToCloudFormation)(properties.resourceTags),\n        ResourceTypeList: cdk.listMapper(cdk.stringToCloudFormation)(properties.resourceTypeList),\n        Tags: cdk.listMapper(cfnPolicyPolicyTagPropertyToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPolicyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPolicyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPolicyProps>();\n    ret.addPropertyResult('excludeResourceTags', 'ExcludeResourceTags', cfn_parse.FromCloudFormation.getBoolean(properties.ExcludeResourceTags));\n    ret.addPropertyResult('policyName', 'PolicyName', cfn_parse.FromCloudFormation.getString(properties.PolicyName));\n    ret.addPropertyResult('remediationEnabled', 'RemediationEnabled', cfn_parse.FromCloudFormation.getBoolean(properties.RemediationEnabled));\n    ret.addPropertyResult('resourceType', 'ResourceType', cfn_parse.FromCloudFormation.getString(properties.ResourceType));\n    ret.addPropertyResult('securityServicePolicyData', 'SecurityServicePolicyData', cfn_parse.FromCloudFormation.getAny(properties.SecurityServicePolicyData));\n    ret.addPropertyResult('deleteAllPolicyResources', 'DeleteAllPolicyResources', properties.DeleteAllPolicyResources != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteAllPolicyResources) : undefined);\n    ret.addPropertyResult('excludeMap', 'ExcludeMap', properties.ExcludeMap != null ? CfnPolicyIEMapPropertyFromCloudFormation(properties.ExcludeMap) : undefined);\n    ret.addPropertyResult('includeMap', 'IncludeMap', properties.IncludeMap != null ? CfnPolicyIEMapPropertyFromCloudFormation(properties.IncludeMap) : undefined);\n    ret.addPropertyResult('resourcesCleanUp', 'ResourcesCleanUp', properties.ResourcesCleanUp != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ResourcesCleanUp) : undefined);\n    ret.addPropertyResult('resourceTags', 'ResourceTags', properties.ResourceTags != null ? cfn_parse.FromCloudFormation.getArray(CfnPolicyResourceTagPropertyFromCloudFormation)(properties.ResourceTags) : undefined);\n    ret.addPropertyResult('resourceTypeList', 'ResourceTypeList', properties.ResourceTypeList != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ResourceTypeList) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(CfnPolicyPolicyTagPropertyFromCloudFormation)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPolicy extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::FMS::Policy\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPolicy {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPolicyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPolicy(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                        \n    public readonly attrArn: string;\n\n                                                                               \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public excludeResourceTags: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                            \n    public policyName: string;\n\n                                                                                                                                                                                                                                                 \n    public remediationEnabled: boolean | cdk.IResolvable;\n\nn    public resourceType: string;\n\nn    public securityServicePolicyData: any | cdk.IResolvable;\n\nn    public deleteAllPolicyResources: boolean | cdk.IResolvable | undefined;\n\nn    public excludeMap: CfnPolicy.IEMapProperty | cdk.IResolvable | undefined;\n\nn    public includeMap: CfnPolicy.IEMapProperty | cdk.IResolvable | undefined;\n\nn    public resourcesCleanUp: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                           \n    public resourceTags: Array<CfnPolicy.ResourceTagProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                   \n    public resourceTypeList: string[] | undefined;\n\nn    public tags: CfnPolicy.PolicyTagProperty[] | undefined;\n\n                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnPolicyProps) {\n        super(scope, id, { type: CfnPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'excludeResourceTags', this);\n        cdk.requireProperty(props, 'policyName', this);\n        cdk.requireProperty(props, 'remediationEnabled', this);\n        cdk.requireProperty(props, 'resourceType', this);\n        cdk.requireProperty(props, 'securityServicePolicyData', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.excludeResourceTags = props.excludeResourceTags;\n        this.policyName = props.policyName;\n        this.remediationEnabled = props.remediationEnabled;\n        this.resourceType = props.resourceType;\n        this.securityServicePolicyData = props.securityServicePolicyData;\n        this.deleteAllPolicyResources = props.deleteAllPolicyResources;\n        this.excludeMap = props.excludeMap;\n        this.includeMap = props.includeMap;\n        this.resourcesCleanUp = props.resourcesCleanUp;\n        this.resourceTags = props.resourceTags;\n        this.resourceTypeList = props.resourceTypeList;\n        this.tags = props.tags;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPolicy.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            excludeResourceTags: this.excludeResourceTags,\n            policyName: this.policyName,\n            remediationEnabled: this.remediationEnabled,\n            resourceType: this.resourceType,\n            securityServicePolicyData: this.securityServicePolicyData,\n            deleteAllPolicyResources: this.deleteAllPolicyResources,\n            excludeMap: this.excludeMap,\n            includeMap: this.includeMap,\n            resourcesCleanUp: this.resourcesCleanUp,\n            resourceTags: this.resourceTags,\n            resourceTypeList: this.resourceTypeList,\n            tags: this.tags,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPolicyPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnPolicy {\nn    export interface IEMapProperty {\n                                                                                                                                                                                                                            \n        readonly account?: string[];\n                                                                                                                                                                                                                                        \n        readonly orgunit?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IEMapProperty`\n *\n * @param properties - the TypeScript properties of a `IEMapProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPolicy_IEMapPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('account', cdk.listValidator(cdk.validateString))(properties.account));\n    errors.collect(cdk.propertyValidator('orgunit', cdk.listValidator(cdk.validateString))(properties.orgunit));\n    return errors.wrap('supplied properties not correct for \"IEMapProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::FMS::Policy.IEMap` resource\n *\n * @param properties - the TypeScript properties of a `IEMapProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::FMS::Policy.IEMap` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPolicyIEMapPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPolicy_IEMapPropertyValidator(properties).assertSuccess();\n    return {\n        ACCOUNT: cdk.listMapper(cdk.stringToCloudFormation)(properties.account),\n        ORGUNIT: cdk.listMapper(cdk.stringToCloudFormation)(properties.orgunit),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPolicyIEMapPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPolicy.IEMapProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPolicy.IEMapProperty>();\n    ret.addPropertyResult('account', 'ACCOUNT', properties.ACCOUNT != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ACCOUNT) : undefined);\n    ret.addPropertyResult('orgunit', 'ORGUNIT', properties.ORGUNIT != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ORGUNIT) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPolicy {\nn    export interface PolicyTagProperty {\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly key: string;\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PolicyTagProperty`\n *\n * @param properties - the TypeScript properties of a `PolicyTagProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPolicy_PolicyTagPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"PolicyTagProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::FMS::Policy.PolicyTag` resource\n *\n * @param properties - the TypeScript properties of a `PolicyTagProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::FMS::Policy.PolicyTag` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPolicyPolicyTagPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPolicy_PolicyTagPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPolicyPolicyTagPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPolicy.PolicyTagProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPolicy.PolicyTagProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPolicy {\nn    export interface ResourceTagProperty {\n                                                                                                                                                                                                                            \n        readonly key: string;\n                                                                                                                                                                                                                                \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourceTagProperty`\n *\n * @param properties - the TypeScript properties of a `ResourceTagProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPolicy_ResourceTagPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"ResourceTagProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::FMS::Policy.ResourceTag` resource\n *\n * @param properties - the TypeScript properties of a `ResourceTagProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::FMS::Policy.ResourceTag` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPolicyResourceTagPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPolicy_ResourceTagPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPolicyResourceTagPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPolicy.ResourceTagProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPolicy.ResourceTagProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
