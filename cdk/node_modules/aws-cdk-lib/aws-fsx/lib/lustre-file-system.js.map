{
  "version": 3,
  "sources": ["lustre-file-system.ts"],
  "sourcesContent": ["import { Connections, ISecurityGroup, ISubnet, Port, SecurityGroup } from '../../aws-ec2';\nimport { Aws, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { FileSystemAttributes, FileSystemBase, FileSystemProps, IFileSystem } from './file-system';\nimport { CfnFileSystem } from './fsx.generated';\nimport { LustreMaintenanceTime } from './maintenance-time';\n\n                                                                         \nexport enum LustreDeploymentType {\n                                                                                                                            \n  SCRATCH_1 = 'SCRATCH_1',\n                                                                                                                                                                           \n  SCRATCH_2 = 'SCRATCH_2',\n                                                                                                  \n  PERSISTENT_1 = 'PERSISTENT_1'\n}\n\n                                                                                                                                                                                                        \nexport interface LustreConfiguration {\n                                                                        \n  readonly deploymentType: LustreDeploymentType;\n\nn  readonly exportPath?: string;\n\n                                                                                                                                                                                                                                                        \n  readonly importedFileChunkSizeMiB?: number;\n\n                                                                                                                                                                                                                                                                                                                       \n  readonly importPath?: string;\n\n                                                                                                                                                                                                                                                                                           \n  readonly perUnitStorageThroughput?: number;\n\n                                                                                                                                                                                                                                                                                                                    \n  readonly weeklyMaintenanceStartTime?: LustreMaintenanceTime;\n}\n\n                                                                            \nexport interface LustreFileSystemProps extends FileSystemProps {\n                                                                     \n  readonly lustreConfiguration: LustreConfiguration;\n\n                                                                         \n  readonly vpcSubnet: ISubnet;\n}\n\n                                                                                                                                                                                                                        \nexport class LustreFileSystem extends FileSystemBase {\n\n                                                                                         \n  public static fromLustreFileSystemAttributes(scope: Construct, id: string, attrs: FileSystemAttributes): IFileSystem {\n    class Import extends FileSystemBase {\n      public readonly dnsName = attrs.dnsName;\n      public readonly fileSystemId = attrs.fileSystemId;\n      public readonly connections = LustreFileSystem.configureConnections(attrs.securityGroup);\n    }\n\n    return new Import(scope, id);\n  }\n\n  /**\n   * The default FSx file system type used by FSx for Lustre.\n   */\n  private static readonly DEFAULT_FILE_SYSTEM_TYPE: string = 'LUSTRE';\n\n  /**\n   * The default ports the file system listens on. Actual port list is: [988, 1021, 1022, 1023]\n   */\n  private static readonly DEFAULT_PORT_RANGE = { startPort: 988, endPort: 1023 };\n\n  /**\n   * Configures a Connections object with all the ports required by FSx for Lustre\n   */\n  private static configureConnections(securityGroup: ISecurityGroup): Connections {\n    const connections = new Connections({\n      securityGroups: [securityGroup],\n      defaultPort: Port.tcpRange(\n        LustreFileSystem.DEFAULT_PORT_RANGE.startPort,\n        LustreFileSystem.DEFAULT_PORT_RANGE.endPort),\n    });\n\n    return connections;\n  }\n\n                                                                                                \n  public readonly connections: Connections;\n\n                                                           \n  public readonly dnsName: string;\n\n                                                            \n  public readonly fileSystemId: string;\n\n                                                                                                         \n  public readonly mountName: string;\n\n  /**\n   * The encapsulated L1 file system.\n   */\n  private readonly fileSystem: CfnFileSystem;\n\n  constructor(scope: Construct, id: string, props: LustreFileSystemProps) {\n    super(scope, id);\n\n    this.validateProps(props);\n\n    const updatedLustureProps = {\n      importedFileChunkSize: props.lustreConfiguration.importedFileChunkSizeMiB,\n      weeklyMaintenanceStartTime: props.lustreConfiguration.weeklyMaintenanceStartTime?.toTimestamp(),\n    };\n    const lustreConfiguration = Object.assign({}, props.lustreConfiguration, updatedLustureProps);\n\n    const securityGroup = (props.securityGroup || new SecurityGroup(this, 'FsxLustreSecurityGroup', {\n      vpc: props.vpc,\n    }));\n    securityGroup.addIngressRule(\n      securityGroup,\n      Port.tcpRange(LustreFileSystem.DEFAULT_PORT_RANGE.startPort, LustreFileSystem.DEFAULT_PORT_RANGE.endPort));\n    this.connections = LustreFileSystem.configureConnections(securityGroup);\n\n    this.fileSystem = new CfnFileSystem(this, 'Resource', {\n      fileSystemType: LustreFileSystem.DEFAULT_FILE_SYSTEM_TYPE,\n      subnetIds: [props.vpcSubnet.subnetId],\n      backupId: props.backupId,\n      kmsKeyId: (props.kmsKey ? props.kmsKey.keyId : undefined),\n      lustreConfiguration,\n      securityGroupIds: [securityGroup.securityGroupId],\n      storageCapacity: props.storageCapacityGiB,\n    });\n    this.fileSystem.applyRemovalPolicy(props.removalPolicy);\n\n    this.fileSystemId = this.fileSystem.ref;\n    this.dnsName = `${this.fileSystemId}.fsx.${this.stack.region}.${Aws.URL_SUFFIX}`;\n    this.mountName = this.fileSystem.attrLustreMountName;\n  }\n\n  /**\n   * Validates the props provided for a new FSx for Lustre file system.\n   */\n  private validateProps(props: LustreFileSystemProps) {\n    const lustreConfiguration = props.lustreConfiguration;\n    const deploymentType = lustreConfiguration.deploymentType;\n\n    // Make sure the import path is valid before validating the export path\n    this.validateImportPath(lustreConfiguration.importPath);\n    this.validateExportPath(lustreConfiguration.exportPath, lustreConfiguration.importPath);\n\n    this.validateImportedFileChunkSize(lustreConfiguration.importedFileChunkSizeMiB);\n    this.validatePerUnitStorageThroughput(deploymentType, lustreConfiguration.perUnitStorageThroughput);\n    this.validateStorageCapacity(deploymentType, props.storageCapacityGiB);\n  }\n\n  /**\n   * Validates the export path is in the correct format and matches the import path.\n   */\n  private validateExportPath(exportPath?: string, importPath?: string): void {\n    if (exportPath === undefined) { return; }\n    if (importPath === undefined) {\n      throw new Error('Cannot define an export path without also defining an import path');\n    }\n\n    if (Token.isUnresolved(exportPath) && Token.isUnresolved(importPath)) { return; }\n\n    if (Token.isUnresolved(importPath) !== Token.isUnresolved(exportPath)) {\n      throw new Error('The importPath and exportPath must each be Tokens or not Tokens, you cannot use a mix');\n    }\n    if (!exportPath.startsWith(importPath)) {\n      throw new Error(`The export path \"${exportPath}\" is invalid. Expecting the format: s3://{IMPORT_PATH}/optional-prefix`);\n    }\n    if (exportPath.length > 900) {\n      throw new Error(`The export path \"${exportPath}\" exceeds the maximum length of 900 characters`);\n    }\n  }\n\n  /**\n   * Validates the importedFileChunkSize is in the correct range.\n   */\n  private validateImportedFileChunkSize(importedFileChunkSize?: number): void {\n    if (importedFileChunkSize === undefined) { return; }\n\n    if (importedFileChunkSize < 1 || importedFileChunkSize > 512000) {\n      throw new Error(`importedFileChunkSize cannot be ${importedFileChunkSize} MiB. It must be a value from 1 to 512,000 MiB`);\n    }\n  }\n\n  /**\n   * Validates the import path is the correct format.\n   */\n  private validateImportPath(importPath?: string): void {\n    if (importPath === undefined || Token.isUnresolved(importPath)) { return; }\n\n    const regexp = /^s3:\\/\\//;\n\n    if (importPath.search(regexp) === -1) {\n      throw new Error(`The import path \"${importPath}\" is invalid. Expecting the format: s3://{BUCKET_NAME}/optional-prefix`);\n    }\n    if (importPath.length > 900) {\n      throw new Error(`The import path \"${importPath}\" exceeds the maximum length of 900 characters`);\n    }\n  }\n\n  /**\n   * Validates the perUnitStorageThroughput is defined correctly for the given deploymentType.\n   */\n  private validatePerUnitStorageThroughput(deploymentType: LustreDeploymentType, perUnitStorageThroughput?: number) {\n    if (perUnitStorageThroughput === undefined) { return; }\n\n    if (deploymentType !== LustreDeploymentType.PERSISTENT_1) {\n      throw new Error('perUnitStorageThroughput can only be set for the PERSISTENT_1 deployment type');\n    }\n\n    if (![50, 100, 200].includes(perUnitStorageThroughput)) {\n      throw new Error('perUnitStorageThroughput must be 50, 100, or 200 MB/s/TiB');\n    }\n  }\n\n  /**\n   * Validates the storage capacity is an acceptable value for the deployment type.\n   */\n  private validateStorageCapacity(deploymentType: LustreDeploymentType, storageCapacity: number): void {\n    if (deploymentType === LustreDeploymentType.SCRATCH_1) {\n      if (![1200, 2400, 3600].includes(storageCapacity) && storageCapacity % 3600 !== 0) {\n        throw new Error('storageCapacity must be 1,200, 2,400, 3,600, or a multiple of 3,600');\n      }\n    } else {\n      if (![1200, 2400].includes(storageCapacity) && storageCapacity % 2400 !== 0) {\n        throw new Error('storageCapacity must be 1,200, 2,400, or a multiple of 2,400');\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
