{
  "version": 3,
  "sources": ["maintenance-time.ts"],
  "sourcesContent": ["                                                         \nexport enum Weekday {\n                       \n  MONDAY = '1',\n                        \n  TUESDAY = '2',\n                          \n  WEDNESDAY = '3',\n                         \n  THURSDAY = '4',\n                       \n  FRIDAY = '5',\n                         \n  SATURDAY = '6',\n                       \n  SUNDAY = '7'\n}\n\n                                                                       \nexport interface LustreMaintenanceTimeProps {\n                                                                     \n  readonly day: Weekday;\n                                                                                 \n  readonly hour: number;\n                                                                                    \n  readonly minute: number;\n}\n\n                                                          \nexport class LustreMaintenanceTime {\n  /**\n   * The day of the week for maintenance to be performed.\n   */\n  private readonly day: Weekday;\n  /**\n   * The hour of the day (from 00-24) for maintenance to be performed.\n   */\n  private readonly hour: string;\n  /**\n   * The minute of the hour (from 00-59) for maintenance to be performed.\n   */\n  private readonly minute: string;\n\n  constructor(props: LustreMaintenanceTimeProps) {\n    this.validate(props.hour, props.minute);\n\n    this.day = props.day;\n    this.hour = this.getTwoDigitString(props.hour);\n    this.minute = this.getTwoDigitString(props.minute);\n  }\n                                                                                                                                \n  public toTimestamp(): string {\n    return `${this.day.valueOf()}:${this.hour}:${this.minute}`;\n  }\n\n  /**\n   * Pad an integer so that it always contains at least 2 digits. Assumes the number is a positive integer.\n   */\n  private getTwoDigitString(n: number): string {\n    const numberString = n.toString();\n    if (numberString.length === 1) {\n      return `0${n}`;\n    }\n    return numberString;\n  }\n\n  /**\n   * Validation needed for the values of the maintenance time.\n   */\n  private validate(hour: number, minute: number) {\n    if (!Number.isInteger(hour) || hour < 0 || hour > 24) {\n      throw new Error('Maintenance time hour must be an integer between 0 and 24');\n    }\n    if (!Number.isInteger(minute) || minute < 0 || minute > 59) {\n      throw new Error('Maintenance time minute must be an integer between 0 and 59');\n    }\n  }\n}"],
  "mappings": "4OACA,GAAY,SAAZ,AAAA,UAAY,SAAO,CAEjB,SAAA,OAAA,IAEA,SAAA,QAAA,IAEA,SAAA,UAAA,IAEA,SAAA,SAAA,IAEA,SAAA,OAAA,IAEA,SAAA,SAAA,IAEA,SAAA,OAAA,MAdU,QAAA,QAAA,SAAA,SAAA,QAAO,KA4BnB,2BAAkC,CAchC,YAAY,MAAiC,+EAC3C,KAAK,SAAS,MAAM,KAAM,MAAM,QAEhC,KAAK,IAAM,MAAM,IACjB,KAAK,KAAO,KAAK,kBAAkB,MAAM,MACzC,KAAK,OAAS,KAAK,kBAAkB,MAAM,QAGtC,aAAW,CAChB,MAAO,GAAG,KAAK,IAAI,aAAa,KAAK,QAAQ,KAAK,SAM5C,kBAAkB,EAAS,CACjC,KAAM,cAAe,EAAE,WACvB,MAAI,cAAa,SAAW,EACnB,IAAI,IAEN,aAMD,SAAS,KAAc,OAAc,CAC3C,GAAI,CAAC,OAAO,UAAU,OAAS,KAAO,GAAK,KAAO,GAChD,KAAM,IAAI,OAAM,6DAElB,GAAI,CAAC,OAAO,UAAU,SAAW,OAAS,GAAK,OAAS,GACtD,KAAM,IAAI,OAAM,gEA7CtB,QAAA,sBAAA",
  "names": []
}
