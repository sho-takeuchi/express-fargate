{
  "version": 3,
  "sources": ["gamelift.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:31.067Z\",\"fingerprint\":\"cQzwvRFdFTCYvL2uiydv1ap1M/jLIldDdMWTNFStjLQ=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                               \nexport interface CfnAliasProps {\n\n                                                                                                                                                                                                                                                             \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                 \n    readonly routingStrategy: CfnAlias.RoutingStrategyProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                   \n    readonly description?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAliasProps`\n *\n * @param properties - the TypeScript properties of a `CfnAliasProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAliasPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('routingStrategy', cdk.requiredValidator)(properties.routingStrategy));\n    errors.collect(cdk.propertyValidator('routingStrategy', CfnAlias_RoutingStrategyPropertyValidator)(properties.routingStrategy));\n    return errors.wrap('supplied properties not correct for \"CfnAliasProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Alias` resource\n *\n * @param properties - the TypeScript properties of a `CfnAliasProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Alias` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAliasPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAliasPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        RoutingStrategy: cfnAliasRoutingStrategyPropertyToCloudFormation(properties.routingStrategy),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAliasPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAliasProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAliasProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('routingStrategy', 'RoutingStrategy', CfnAliasRoutingStrategyPropertyFromCloudFormation(properties.RoutingStrategy));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnAlias extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GameLift::Alias\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAlias {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAliasPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAlias(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                              \n    public readonly attrAliasId: string;\n\n                                                                                                                                                                                                                                                             \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                 \n    public routingStrategy: CfnAlias.RoutingStrategyProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                   \n    public description: string | undefined;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnAliasProps) {\n        super(scope, id, { type: CfnAlias.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'routingStrategy', this);\n        this.attrAliasId = cdk.Token.asString(this.getAtt('AliasId'));\n\n        this.name = props.name;\n        this.routingStrategy = props.routingStrategy;\n        this.description = props.description;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAlias.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            routingStrategy: this.routingStrategy,\n            description: this.description,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAliasPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnAlias {\n                                                                                                                                                                                                                                                         \n    export interface RoutingStrategyProperty {\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly fleetId?: string;\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly message?: string;\nn        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RoutingStrategyProperty`\n *\n * @param properties - the TypeScript properties of a `RoutingStrategyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAlias_RoutingStrategyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('fleetId', cdk.validateString)(properties.fleetId));\n    errors.collect(cdk.propertyValidator('message', cdk.validateString)(properties.message));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"RoutingStrategyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Alias.RoutingStrategy` resource\n *\n * @param properties - the TypeScript properties of a `RoutingStrategyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Alias.RoutingStrategy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAliasRoutingStrategyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAlias_RoutingStrategyPropertyValidator(properties).assertSuccess();\n    return {\n        FleetId: cdk.stringToCloudFormation(properties.fleetId),\n        Message: cdk.stringToCloudFormation(properties.message),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAliasRoutingStrategyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAlias.RoutingStrategyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAlias.RoutingStrategyProperty>();\n    ret.addPropertyResult('fleetId', 'FleetId', properties.FleetId != null ? cfn_parse.FromCloudFormation.getString(properties.FleetId) : undefined);\n    ret.addPropertyResult('message', 'Message', properties.Message != null ? cfn_parse.FromCloudFormation.getString(properties.Message) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                               \nexport interface CfnBuildProps {\n\n                                                                                                                                                                                                                                                            \n    readonly name?: string;\n\nn    readonly operatingSystem?: string;\n\nn    readonly storageLocation?: CfnBuild.S3LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                      \n    readonly version?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnBuildProps`\n *\n * @param properties - the TypeScript properties of a `CfnBuildProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnBuildPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('operatingSystem', cdk.validateString)(properties.operatingSystem));\n    errors.collect(cdk.propertyValidator('storageLocation', CfnBuild_S3LocationPropertyValidator)(properties.storageLocation));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"CfnBuildProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Build` resource\n *\n * @param properties - the TypeScript properties of a `CfnBuildProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Build` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBuildPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBuildPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        OperatingSystem: cdk.stringToCloudFormation(properties.operatingSystem),\n        StorageLocation: cfnBuildS3LocationPropertyToCloudFormation(properties.storageLocation),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBuildPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBuildProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBuildProps>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('operatingSystem', 'OperatingSystem', properties.OperatingSystem != null ? cfn_parse.FromCloudFormation.getString(properties.OperatingSystem) : undefined);\n    ret.addPropertyResult('storageLocation', 'StorageLocation', properties.StorageLocation != null ? CfnBuildS3LocationPropertyFromCloudFormation(properties.StorageLocation) : undefined);\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \nexport class CfnBuild extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GameLift::Build\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnBuild {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnBuildPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnBuild(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                            \n    public name: string | undefined;\n\nn    public operatingSystem: string | undefined;\n\nn    public storageLocation: CfnBuild.S3LocationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                      \n    public version: string | undefined;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnBuildProps = {}) {\n        super(scope, id, { type: CfnBuild.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.name = props.name;\n        this.operatingSystem = props.operatingSystem;\n        this.storageLocation = props.storageLocation;\n        this.version = props.version;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnBuild.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            operatingSystem: this.operatingSystem,\n            storageLocation: this.storageLocation,\n            version: this.version,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnBuildPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnBuild {\n                                                                                                                                                                                                                                                                                                            \n    export interface S3LocationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly bucket: string;\n                                                                                                                                                                                                                                                                                      \n        readonly key: string;\nn        readonly objectVersion?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly roleArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3LocationProperty`\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBuild_S3LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.requiredValidator)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('objectVersion', cdk.validateString)(properties.objectVersion));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    return errors.wrap('supplied properties not correct for \"S3LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Build.S3Location` resource\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Build.S3Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBuildS3LocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBuild_S3LocationPropertyValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        Key: cdk.stringToCloudFormation(properties.key),\n        ObjectVersion: cdk.stringToCloudFormation(properties.objectVersion),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBuildS3LocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBuild.S3LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBuild.S3LocationProperty>();\n    ret.addPropertyResult('bucket', 'Bucket', cfn_parse.FromCloudFormation.getString(properties.Bucket));\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('objectVersion', 'ObjectVersion', properties.ObjectVersion != null ? cfn_parse.FromCloudFormation.getString(properties.ObjectVersion) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                               \nexport interface CfnFleetProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly buildId?: string;\n\nn    readonly certificateConfiguration?: CfnFleet.CertificateConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                   \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly desiredEc2Instances?: number;\n\n                                                                                                                                                                                                                                                                                                                    \n    readonly ec2InboundPermissions?: Array<CfnFleet.IpPermissionProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly ec2InstanceType?: string;\n\nn    readonly fleetType?: string;\n\nn    readonly instanceRoleArn?: string;\n\nn    readonly locations?: Array<CfnFleet.LocationConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                     \n    readonly maxSize?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly metricGroups?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                              \n    readonly minSize?: number;\n\n                                                                                                                                                                                                                                                            \n    readonly name?: string;\n\nn    readonly newGameSessionProtectionPolicy?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly peerVpcAwsAccountId?: string;\n\nn    readonly peerVpcId?: string;\n\n                                                                                                                                                                                                                                                                                                                                          \n    readonly resourceCreationLimitPolicy?: CfnFleet.ResourceCreationLimitPolicyProperty | cdk.IResolvable;\n\nn    readonly runtimeConfiguration?: CfnFleet.RuntimeConfigurationProperty | cdk.IResolvable;\n\nn    readonly scriptId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFleetProps`\n *\n * @param properties - the TypeScript properties of a `CfnFleetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFleetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('buildId', cdk.validateString)(properties.buildId));\n    errors.collect(cdk.propertyValidator('certificateConfiguration', CfnFleet_CertificateConfigurationPropertyValidator)(properties.certificateConfiguration));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('desiredEc2Instances', cdk.validateNumber)(properties.desiredEc2Instances));\n    errors.collect(cdk.propertyValidator('ec2InboundPermissions', cdk.listValidator(CfnFleet_IpPermissionPropertyValidator))(properties.ec2InboundPermissions));\n    errors.collect(cdk.propertyValidator('ec2InstanceType', cdk.validateString)(properties.ec2InstanceType));\n    errors.collect(cdk.propertyValidator('fleetType', cdk.validateString)(properties.fleetType));\n    errors.collect(cdk.propertyValidator('instanceRoleArn', cdk.validateString)(properties.instanceRoleArn));\n    errors.collect(cdk.propertyValidator('locations', cdk.listValidator(CfnFleet_LocationConfigurationPropertyValidator))(properties.locations));\n    errors.collect(cdk.propertyValidator('maxSize', cdk.validateNumber)(properties.maxSize));\n    errors.collect(cdk.propertyValidator('metricGroups', cdk.listValidator(cdk.validateString))(properties.metricGroups));\n    errors.collect(cdk.propertyValidator('minSize', cdk.validateNumber)(properties.minSize));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('newGameSessionProtectionPolicy', cdk.validateString)(properties.newGameSessionProtectionPolicy));\n    errors.collect(cdk.propertyValidator('peerVpcAwsAccountId', cdk.validateString)(properties.peerVpcAwsAccountId));\n    errors.collect(cdk.propertyValidator('peerVpcId', cdk.validateString)(properties.peerVpcId));\n    errors.collect(cdk.propertyValidator('resourceCreationLimitPolicy', CfnFleet_ResourceCreationLimitPolicyPropertyValidator)(properties.resourceCreationLimitPolicy));\n    errors.collect(cdk.propertyValidator('runtimeConfiguration', CfnFleet_RuntimeConfigurationPropertyValidator)(properties.runtimeConfiguration));\n    errors.collect(cdk.propertyValidator('scriptId', cdk.validateString)(properties.scriptId));\n    return errors.wrap('supplied properties not correct for \"CfnFleetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Fleet` resource\n *\n * @param properties - the TypeScript properties of a `CfnFleetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Fleet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFleetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFleetPropsValidator(properties).assertSuccess();\n    return {\n        BuildId: cdk.stringToCloudFormation(properties.buildId),\n        CertificateConfiguration: cfnFleetCertificateConfigurationPropertyToCloudFormation(properties.certificateConfiguration),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DesiredEC2Instances: cdk.numberToCloudFormation(properties.desiredEc2Instances),\n        EC2InboundPermissions: cdk.listMapper(cfnFleetIpPermissionPropertyToCloudFormation)(properties.ec2InboundPermissions),\n        EC2InstanceType: cdk.stringToCloudFormation(properties.ec2InstanceType),\n        FleetType: cdk.stringToCloudFormation(properties.fleetType),\n        InstanceRoleARN: cdk.stringToCloudFormation(properties.instanceRoleArn),\n        Locations: cdk.listMapper(cfnFleetLocationConfigurationPropertyToCloudFormation)(properties.locations),\n        MaxSize: cdk.numberToCloudFormation(properties.maxSize),\n        MetricGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.metricGroups),\n        MinSize: cdk.numberToCloudFormation(properties.minSize),\n        Name: cdk.stringToCloudFormation(properties.name),\n        NewGameSessionProtectionPolicy: cdk.stringToCloudFormation(properties.newGameSessionProtectionPolicy),\n        PeerVpcAwsAccountId: cdk.stringToCloudFormation(properties.peerVpcAwsAccountId),\n        PeerVpcId: cdk.stringToCloudFormation(properties.peerVpcId),\n        ResourceCreationLimitPolicy: cfnFleetResourceCreationLimitPolicyPropertyToCloudFormation(properties.resourceCreationLimitPolicy),\n        RuntimeConfiguration: cfnFleetRuntimeConfigurationPropertyToCloudFormation(properties.runtimeConfiguration),\n        ScriptId: cdk.stringToCloudFormation(properties.scriptId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFleetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFleetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFleetProps>();\n    ret.addPropertyResult('buildId', 'BuildId', properties.BuildId != null ? cfn_parse.FromCloudFormation.getString(properties.BuildId) : undefined);\n    ret.addPropertyResult('certificateConfiguration', 'CertificateConfiguration', properties.CertificateConfiguration != null ? CfnFleetCertificateConfigurationPropertyFromCloudFormation(properties.CertificateConfiguration) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('desiredEc2Instances', 'DesiredEC2Instances', properties.DesiredEC2Instances != null ? cfn_parse.FromCloudFormation.getNumber(properties.DesiredEC2Instances) : undefined);\n    ret.addPropertyResult('ec2InboundPermissions', 'EC2InboundPermissions', properties.EC2InboundPermissions != null ? cfn_parse.FromCloudFormation.getArray(CfnFleetIpPermissionPropertyFromCloudFormation)(properties.EC2InboundPermissions) : undefined);\n    ret.addPropertyResult('ec2InstanceType', 'EC2InstanceType', properties.EC2InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.EC2InstanceType) : undefined);\n    ret.addPropertyResult('fleetType', 'FleetType', properties.FleetType != null ? cfn_parse.FromCloudFormation.getString(properties.FleetType) : undefined);\n    ret.addPropertyResult('instanceRoleArn', 'InstanceRoleARN', properties.InstanceRoleARN != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceRoleARN) : undefined);\n    ret.addPropertyResult('locations', 'Locations', properties.Locations != null ? cfn_parse.FromCloudFormation.getArray(CfnFleetLocationConfigurationPropertyFromCloudFormation)(properties.Locations) : undefined);\n    ret.addPropertyResult('maxSize', 'MaxSize', properties.MaxSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxSize) : undefined);\n    ret.addPropertyResult('metricGroups', 'MetricGroups', properties.MetricGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.MetricGroups) : undefined);\n    ret.addPropertyResult('minSize', 'MinSize', properties.MinSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinSize) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('newGameSessionProtectionPolicy', 'NewGameSessionProtectionPolicy', properties.NewGameSessionProtectionPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.NewGameSessionProtectionPolicy) : undefined);\n    ret.addPropertyResult('peerVpcAwsAccountId', 'PeerVpcAwsAccountId', properties.PeerVpcAwsAccountId != null ? cfn_parse.FromCloudFormation.getString(properties.PeerVpcAwsAccountId) : undefined);\n    ret.addPropertyResult('peerVpcId', 'PeerVpcId', properties.PeerVpcId != null ? cfn_parse.FromCloudFormation.getString(properties.PeerVpcId) : undefined);\n    ret.addPropertyResult('resourceCreationLimitPolicy', 'ResourceCreationLimitPolicy', properties.ResourceCreationLimitPolicy != null ? CfnFleetResourceCreationLimitPolicyPropertyFromCloudFormation(properties.ResourceCreationLimitPolicy) : undefined);\n    ret.addPropertyResult('runtimeConfiguration', 'RuntimeConfiguration', properties.RuntimeConfiguration != null ? CfnFleetRuntimeConfigurationPropertyFromCloudFormation(properties.RuntimeConfiguration) : undefined);\n    ret.addPropertyResult('scriptId', 'ScriptId', properties.ScriptId != null ? cfn_parse.FromCloudFormation.getString(properties.ScriptId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport class CfnFleet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GameLift::Fleet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFleet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFleetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFleet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                              \n    public readonly attrFleetId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public buildId: string | undefined;\n\nn    public certificateConfiguration: CfnFleet.CertificateConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                   \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public desiredEc2Instances: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                    \n    public ec2InboundPermissions: Array<CfnFleet.IpPermissionProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public ec2InstanceType: string | undefined;\n\nn    public fleetType: string | undefined;\n\nn    public instanceRoleArn: string | undefined;\n\nn    public locations: Array<CfnFleet.LocationConfigurationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                     \n    public maxSize: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public metricGroups: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    public minSize: number | undefined;\n\n                                                                                                                                                                                                                                                            \n    public name: string | undefined;\n\nn    public newGameSessionProtectionPolicy: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                  \n    public peerVpcAwsAccountId: string | undefined;\n\nn    public peerVpcId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                          \n    public resourceCreationLimitPolicy: CfnFleet.ResourceCreationLimitPolicyProperty | cdk.IResolvable | undefined;\n\nn    public runtimeConfiguration: CfnFleet.RuntimeConfigurationProperty | cdk.IResolvable | undefined;\n\nn    public scriptId: string | undefined;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnFleetProps = {}) {\n        super(scope, id, { type: CfnFleet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrFleetId = cdk.Token.asString(this.getAtt('FleetId'));\n\n        this.buildId = props.buildId;\n        this.certificateConfiguration = props.certificateConfiguration;\n        this.description = props.description;\n        this.desiredEc2Instances = props.desiredEc2Instances;\n        this.ec2InboundPermissions = props.ec2InboundPermissions;\n        this.ec2InstanceType = props.ec2InstanceType;\n        this.fleetType = props.fleetType;\n        this.instanceRoleArn = props.instanceRoleArn;\n        this.locations = props.locations;\n        this.maxSize = props.maxSize;\n        this.metricGroups = props.metricGroups;\n        this.minSize = props.minSize;\n        this.name = props.name;\n        this.newGameSessionProtectionPolicy = props.newGameSessionProtectionPolicy;\n        this.peerVpcAwsAccountId = props.peerVpcAwsAccountId;\n        this.peerVpcId = props.peerVpcId;\n        this.resourceCreationLimitPolicy = props.resourceCreationLimitPolicy;\n        this.runtimeConfiguration = props.runtimeConfiguration;\n        this.scriptId = props.scriptId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFleet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            buildId: this.buildId,\n            certificateConfiguration: this.certificateConfiguration,\n            description: this.description,\n            desiredEc2Instances: this.desiredEc2Instances,\n            ec2InboundPermissions: this.ec2InboundPermissions,\n            ec2InstanceType: this.ec2InstanceType,\n            fleetType: this.fleetType,\n            instanceRoleArn: this.instanceRoleArn,\n            locations: this.locations,\n            maxSize: this.maxSize,\n            metricGroups: this.metricGroups,\n            minSize: this.minSize,\n            name: this.name,\n            newGameSessionProtectionPolicy: this.newGameSessionProtectionPolicy,\n            peerVpcAwsAccountId: this.peerVpcAwsAccountId,\n            peerVpcId: this.peerVpcId,\n            resourceCreationLimitPolicy: this.resourceCreationLimitPolicy,\n            runtimeConfiguration: this.runtimeConfiguration,\n            scriptId: this.scriptId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFleetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnFleet {\nn    export interface CertificateConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly certificateType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CertificateConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `CertificateConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFleet_CertificateConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificateType', cdk.requiredValidator)(properties.certificateType));\n    errors.collect(cdk.propertyValidator('certificateType', cdk.validateString)(properties.certificateType));\n    return errors.wrap('supplied properties not correct for \"CertificateConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Fleet.CertificateConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CertificateConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Fleet.CertificateConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFleetCertificateConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFleet_CertificateConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        CertificateType: cdk.stringToCloudFormation(properties.certificateType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFleetCertificateConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFleet.CertificateConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFleet.CertificateConfigurationProperty>();\n    ret.addPropertyResult('certificateType', 'CertificateType', cfn_parse.FromCloudFormation.getString(properties.CertificateType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFleet {\nn    export interface IpPermissionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly fromPort: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly ipRange: string;\n                                                                                                                                                                                                                                                                           \n        readonly protocol: string;\nn        readonly toPort: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IpPermissionProperty`\n *\n * @param properties - the TypeScript properties of a `IpPermissionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFleet_IpPermissionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('fromPort', cdk.requiredValidator)(properties.fromPort));\n    errors.collect(cdk.propertyValidator('fromPort', cdk.validateNumber)(properties.fromPort));\n    errors.collect(cdk.propertyValidator('ipRange', cdk.requiredValidator)(properties.ipRange));\n    errors.collect(cdk.propertyValidator('ipRange', cdk.validateString)(properties.ipRange));\n    errors.collect(cdk.propertyValidator('protocol', cdk.requiredValidator)(properties.protocol));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    errors.collect(cdk.propertyValidator('toPort', cdk.requiredValidator)(properties.toPort));\n    errors.collect(cdk.propertyValidator('toPort', cdk.validateNumber)(properties.toPort));\n    return errors.wrap('supplied properties not correct for \"IpPermissionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Fleet.IpPermission` resource\n *\n * @param properties - the TypeScript properties of a `IpPermissionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Fleet.IpPermission` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFleetIpPermissionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFleet_IpPermissionPropertyValidator(properties).assertSuccess();\n    return {\n        FromPort: cdk.numberToCloudFormation(properties.fromPort),\n        IpRange: cdk.stringToCloudFormation(properties.ipRange),\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n        ToPort: cdk.numberToCloudFormation(properties.toPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFleetIpPermissionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFleet.IpPermissionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFleet.IpPermissionProperty>();\n    ret.addPropertyResult('fromPort', 'FromPort', cfn_parse.FromCloudFormation.getNumber(properties.FromPort));\n    ret.addPropertyResult('ipRange', 'IpRange', cfn_parse.FromCloudFormation.getString(properties.IpRange));\n    ret.addPropertyResult('protocol', 'Protocol', cfn_parse.FromCloudFormation.getString(properties.Protocol));\n    ret.addPropertyResult('toPort', 'ToPort', cfn_parse.FromCloudFormation.getNumber(properties.ToPort));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFleet {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface LocationCapacityProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly desiredEc2Instances: number;\n                                                                                                                                                                                                                                                                                                                                                              \n        readonly maxSize: number;\n                                                                                                                                                                                                                                                                                                                                                              \n        readonly minSize: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LocationCapacityProperty`\n *\n * @param properties - the TypeScript properties of a `LocationCapacityProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFleet_LocationCapacityPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('desiredEc2Instances', cdk.requiredValidator)(properties.desiredEc2Instances));\n    errors.collect(cdk.propertyValidator('desiredEc2Instances', cdk.validateNumber)(properties.desiredEc2Instances));\n    errors.collect(cdk.propertyValidator('maxSize', cdk.requiredValidator)(properties.maxSize));\n    errors.collect(cdk.propertyValidator('maxSize', cdk.validateNumber)(properties.maxSize));\n    errors.collect(cdk.propertyValidator('minSize', cdk.requiredValidator)(properties.minSize));\n    errors.collect(cdk.propertyValidator('minSize', cdk.validateNumber)(properties.minSize));\n    return errors.wrap('supplied properties not correct for \"LocationCapacityProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Fleet.LocationCapacity` resource\n *\n * @param properties - the TypeScript properties of a `LocationCapacityProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Fleet.LocationCapacity` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFleetLocationCapacityPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFleet_LocationCapacityPropertyValidator(properties).assertSuccess();\n    return {\n        DesiredEC2Instances: cdk.numberToCloudFormation(properties.desiredEc2Instances),\n        MaxSize: cdk.numberToCloudFormation(properties.maxSize),\n        MinSize: cdk.numberToCloudFormation(properties.minSize),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFleetLocationCapacityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFleet.LocationCapacityProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFleet.LocationCapacityProperty>();\n    ret.addPropertyResult('desiredEc2Instances', 'DesiredEC2Instances', cfn_parse.FromCloudFormation.getNumber(properties.DesiredEC2Instances));\n    ret.addPropertyResult('maxSize', 'MaxSize', cfn_parse.FromCloudFormation.getNumber(properties.MaxSize));\n    ret.addPropertyResult('minSize', 'MinSize', cfn_parse.FromCloudFormation.getNumber(properties.MinSize));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFleet {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface LocationConfigurationProperty {\n                                                                                                                                                                                                                                                                                 \n        readonly location: string;\nn        readonly locationCapacity?: CfnFleet.LocationCapacityProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LocationConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `LocationConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFleet_LocationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('location', cdk.requiredValidator)(properties.location));\n    errors.collect(cdk.propertyValidator('location', cdk.validateString)(properties.location));\n    errors.collect(cdk.propertyValidator('locationCapacity', CfnFleet_LocationCapacityPropertyValidator)(properties.locationCapacity));\n    return errors.wrap('supplied properties not correct for \"LocationConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Fleet.LocationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `LocationConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Fleet.LocationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFleetLocationConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFleet_LocationConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Location: cdk.stringToCloudFormation(properties.location),\n        LocationCapacity: cfnFleetLocationCapacityPropertyToCloudFormation(properties.locationCapacity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFleetLocationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFleet.LocationConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFleet.LocationConfigurationProperty>();\n    ret.addPropertyResult('location', 'Location', cfn_parse.FromCloudFormation.getString(properties.Location));\n    ret.addPropertyResult('locationCapacity', 'LocationCapacity', properties.LocationCapacity != null ? CfnFleetLocationCapacityPropertyFromCloudFormation(properties.LocationCapacity) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFleet {\nn    export interface ResourceCreationLimitPolicyProperty {\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly newGameSessionsPerCreator?: number;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly policyPeriodInMinutes?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourceCreationLimitPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `ResourceCreationLimitPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFleet_ResourceCreationLimitPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('newGameSessionsPerCreator', cdk.validateNumber)(properties.newGameSessionsPerCreator));\n    errors.collect(cdk.propertyValidator('policyPeriodInMinutes', cdk.validateNumber)(properties.policyPeriodInMinutes));\n    return errors.wrap('supplied properties not correct for \"ResourceCreationLimitPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Fleet.ResourceCreationLimitPolicy` resource\n *\n * @param properties - the TypeScript properties of a `ResourceCreationLimitPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Fleet.ResourceCreationLimitPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFleetResourceCreationLimitPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFleet_ResourceCreationLimitPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        NewGameSessionsPerCreator: cdk.numberToCloudFormation(properties.newGameSessionsPerCreator),\n        PolicyPeriodInMinutes: cdk.numberToCloudFormation(properties.policyPeriodInMinutes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFleetResourceCreationLimitPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFleet.ResourceCreationLimitPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFleet.ResourceCreationLimitPolicyProperty>();\n    ret.addPropertyResult('newGameSessionsPerCreator', 'NewGameSessionsPerCreator', properties.NewGameSessionsPerCreator != null ? cfn_parse.FromCloudFormation.getNumber(properties.NewGameSessionsPerCreator) : undefined);\n    ret.addPropertyResult('policyPeriodInMinutes', 'PolicyPeriodInMinutes', properties.PolicyPeriodInMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.PolicyPeriodInMinutes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFleet {\nn    export interface RuntimeConfigurationProperty {\nn        readonly gameSessionActivationTimeoutSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly maxConcurrentGameSessionActivations?: number;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly serverProcesses?: Array<CfnFleet.ServerProcessProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RuntimeConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `RuntimeConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFleet_RuntimeConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('gameSessionActivationTimeoutSeconds', cdk.validateNumber)(properties.gameSessionActivationTimeoutSeconds));\n    errors.collect(cdk.propertyValidator('maxConcurrentGameSessionActivations', cdk.validateNumber)(properties.maxConcurrentGameSessionActivations));\n    errors.collect(cdk.propertyValidator('serverProcesses', cdk.listValidator(CfnFleet_ServerProcessPropertyValidator))(properties.serverProcesses));\n    return errors.wrap('supplied properties not correct for \"RuntimeConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Fleet.RuntimeConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `RuntimeConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Fleet.RuntimeConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFleetRuntimeConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFleet_RuntimeConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        GameSessionActivationTimeoutSeconds: cdk.numberToCloudFormation(properties.gameSessionActivationTimeoutSeconds),\n        MaxConcurrentGameSessionActivations: cdk.numberToCloudFormation(properties.maxConcurrentGameSessionActivations),\n        ServerProcesses: cdk.listMapper(cfnFleetServerProcessPropertyToCloudFormation)(properties.serverProcesses),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFleetRuntimeConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFleet.RuntimeConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFleet.RuntimeConfigurationProperty>();\n    ret.addPropertyResult('gameSessionActivationTimeoutSeconds', 'GameSessionActivationTimeoutSeconds', properties.GameSessionActivationTimeoutSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.GameSessionActivationTimeoutSeconds) : undefined);\n    ret.addPropertyResult('maxConcurrentGameSessionActivations', 'MaxConcurrentGameSessionActivations', properties.MaxConcurrentGameSessionActivations != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxConcurrentGameSessionActivations) : undefined);\n    ret.addPropertyResult('serverProcesses', 'ServerProcesses', properties.ServerProcesses != null ? cfn_parse.FromCloudFormation.getArray(CfnFleetServerProcessPropertyFromCloudFormation)(properties.ServerProcesses) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFleet {\nn    export interface ServerProcessProperty {\n                                                                                                                                                                                                                                                                                                                                   \n        readonly concurrentExecutions: number;\nn        readonly launchPath: string;\n                                                                                                                                                                                                                                                                                                                       \n        readonly parameters?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ServerProcessProperty`\n *\n * @param properties - the TypeScript properties of a `ServerProcessProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFleet_ServerProcessPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('concurrentExecutions', cdk.requiredValidator)(properties.concurrentExecutions));\n    errors.collect(cdk.propertyValidator('concurrentExecutions', cdk.validateNumber)(properties.concurrentExecutions));\n    errors.collect(cdk.propertyValidator('launchPath', cdk.requiredValidator)(properties.launchPath));\n    errors.collect(cdk.propertyValidator('launchPath', cdk.validateString)(properties.launchPath));\n    errors.collect(cdk.propertyValidator('parameters', cdk.validateString)(properties.parameters));\n    return errors.wrap('supplied properties not correct for \"ServerProcessProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Fleet.ServerProcess` resource\n *\n * @param properties - the TypeScript properties of a `ServerProcessProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Fleet.ServerProcess` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFleetServerProcessPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFleet_ServerProcessPropertyValidator(properties).assertSuccess();\n    return {\n        ConcurrentExecutions: cdk.numberToCloudFormation(properties.concurrentExecutions),\n        LaunchPath: cdk.stringToCloudFormation(properties.launchPath),\n        Parameters: cdk.stringToCloudFormation(properties.parameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFleetServerProcessPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFleet.ServerProcessProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFleet.ServerProcessProperty>();\n    ret.addPropertyResult('concurrentExecutions', 'ConcurrentExecutions', cfn_parse.FromCloudFormation.getNumber(properties.ConcurrentExecutions));\n    ret.addPropertyResult('launchPath', 'LaunchPath', cfn_parse.FromCloudFormation.getString(properties.LaunchPath));\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getString(properties.Parameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                   \nexport interface CfnGameServerGroupProps {\n\n                                                                                                                                                                                                                                                                                                                      \n    readonly gameServerGroupName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    readonly instanceDefinitions: Array<CfnGameServerGroup.InstanceDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                               \n    readonly launchTemplate: CfnGameServerGroup.LaunchTemplateProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly roleArn: string;\n\n                                                                                                                                                                                                                                                     \n    readonly autoScalingPolicy?: CfnGameServerGroup.AutoScalingPolicyProperty | cdk.IResolvable;\n\nn    readonly balancingStrategy?: string;\n\n                                                                                                                                                                                                                                           \n    readonly deleteOption?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly gameServerProtectionPolicy?: string;\n\n                                                                                                                                                                                                                                 \n    readonly maxSize?: number;\n\n                                                                                                                                                                                                                                 \n    readonly minSize?: number;\n\n                                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                       \n    readonly vpcSubnets?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnGameServerGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnGameServerGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnGameServerGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoScalingPolicy', CfnGameServerGroup_AutoScalingPolicyPropertyValidator)(properties.autoScalingPolicy));\n    errors.collect(cdk.propertyValidator('balancingStrategy', cdk.validateString)(properties.balancingStrategy));\n    errors.collect(cdk.propertyValidator('deleteOption', cdk.validateString)(properties.deleteOption));\n    errors.collect(cdk.propertyValidator('gameServerGroupName', cdk.requiredValidator)(properties.gameServerGroupName));\n    errors.collect(cdk.propertyValidator('gameServerGroupName', cdk.validateString)(properties.gameServerGroupName));\n    errors.collect(cdk.propertyValidator('gameServerProtectionPolicy', cdk.validateString)(properties.gameServerProtectionPolicy));\n    errors.collect(cdk.propertyValidator('instanceDefinitions', cdk.requiredValidator)(properties.instanceDefinitions));\n    errors.collect(cdk.propertyValidator('instanceDefinitions', cdk.listValidator(CfnGameServerGroup_InstanceDefinitionPropertyValidator))(properties.instanceDefinitions));\n    errors.collect(cdk.propertyValidator('launchTemplate', cdk.requiredValidator)(properties.launchTemplate));\n    errors.collect(cdk.propertyValidator('launchTemplate', CfnGameServerGroup_LaunchTemplatePropertyValidator)(properties.launchTemplate));\n    errors.collect(cdk.propertyValidator('maxSize', cdk.validateNumber)(properties.maxSize));\n    errors.collect(cdk.propertyValidator('minSize', cdk.validateNumber)(properties.minSize));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcSubnets', cdk.listValidator(cdk.validateString))(properties.vpcSubnets));\n    return errors.wrap('supplied properties not correct for \"CfnGameServerGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::GameServerGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnGameServerGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::GameServerGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGameServerGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGameServerGroupPropsValidator(properties).assertSuccess();\n    return {\n        GameServerGroupName: cdk.stringToCloudFormation(properties.gameServerGroupName),\n        InstanceDefinitions: cdk.listMapper(cfnGameServerGroupInstanceDefinitionPropertyToCloudFormation)(properties.instanceDefinitions),\n        LaunchTemplate: cfnGameServerGroupLaunchTemplatePropertyToCloudFormation(properties.launchTemplate),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        AutoScalingPolicy: cfnGameServerGroupAutoScalingPolicyPropertyToCloudFormation(properties.autoScalingPolicy),\n        BalancingStrategy: cdk.stringToCloudFormation(properties.balancingStrategy),\n        DeleteOption: cdk.stringToCloudFormation(properties.deleteOption),\n        GameServerProtectionPolicy: cdk.stringToCloudFormation(properties.gameServerProtectionPolicy),\n        MaxSize: cdk.numberToCloudFormation(properties.maxSize),\n        MinSize: cdk.numberToCloudFormation(properties.minSize),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VpcSubnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.vpcSubnets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGameServerGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGameServerGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGameServerGroupProps>();\n    ret.addPropertyResult('gameServerGroupName', 'GameServerGroupName', cfn_parse.FromCloudFormation.getString(properties.GameServerGroupName));\n    ret.addPropertyResult('instanceDefinitions', 'InstanceDefinitions', cfn_parse.FromCloudFormation.getArray(CfnGameServerGroupInstanceDefinitionPropertyFromCloudFormation)(properties.InstanceDefinitions));\n    ret.addPropertyResult('launchTemplate', 'LaunchTemplate', CfnGameServerGroupLaunchTemplatePropertyFromCloudFormation(properties.LaunchTemplate));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('autoScalingPolicy', 'AutoScalingPolicy', properties.AutoScalingPolicy != null ? CfnGameServerGroupAutoScalingPolicyPropertyFromCloudFormation(properties.AutoScalingPolicy) : undefined);\n    ret.addPropertyResult('balancingStrategy', 'BalancingStrategy', properties.BalancingStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.BalancingStrategy) : undefined);\n    ret.addPropertyResult('deleteOption', 'DeleteOption', properties.DeleteOption != null ? cfn_parse.FromCloudFormation.getString(properties.DeleteOption) : undefined);\n    ret.addPropertyResult('gameServerProtectionPolicy', 'GameServerProtectionPolicy', properties.GameServerProtectionPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.GameServerProtectionPolicy) : undefined);\n    ret.addPropertyResult('maxSize', 'MaxSize', properties.MaxSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxSize) : undefined);\n    ret.addPropertyResult('minSize', 'MinSize', properties.MinSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinSize) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('vpcSubnets', 'VpcSubnets', properties.VpcSubnets != null ? cfn_parse.FromCloudFormation.getStringArray(properties.VpcSubnets) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnGameServerGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GameLift::GameServerGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnGameServerGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnGameServerGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnGameServerGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                          \n    public readonly attrAutoScalingGroupArn: string;\n\n                                                                         \n    public readonly attrGameServerGroupArn: string;\n\n                                                                                                                                                                                                                                                                                                                      \n    public gameServerGroupName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    public instanceDefinitions: Array<CfnGameServerGroup.InstanceDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                               \n    public launchTemplate: CfnGameServerGroup.LaunchTemplateProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                              \n    public roleArn: string;\n\n                                                                                                                                                                                                                                                     \n    public autoScalingPolicy: CfnGameServerGroup.AutoScalingPolicyProperty | cdk.IResolvable | undefined;\n\nn    public balancingStrategy: string | undefined;\n\n                                                                                                                                                                                                                                           \n    public deleteOption: string | undefined;\n\nn    public gameServerProtectionPolicy: string | undefined;\n\n                                                                                                                                                                                                                                 \n    public maxSize: number | undefined;\n\n                                                                                                                                                                                                                                 \n    public minSize: number | undefined;\n\n                                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                       \n    public vpcSubnets: string[] | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnGameServerGroupProps) {\n        super(scope, id, { type: CfnGameServerGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'gameServerGroupName', this);\n        cdk.requireProperty(props, 'instanceDefinitions', this);\n        cdk.requireProperty(props, 'launchTemplate', this);\n        cdk.requireProperty(props, 'roleArn', this);\n        this.attrAutoScalingGroupArn = cdk.Token.asString(this.getAtt('AutoScalingGroupArn'));\n        this.attrGameServerGroupArn = cdk.Token.asString(this.getAtt('GameServerGroupArn'));\n\n        this.gameServerGroupName = props.gameServerGroupName;\n        this.instanceDefinitions = props.instanceDefinitions;\n        this.launchTemplate = props.launchTemplate;\n        this.roleArn = props.roleArn;\n        this.autoScalingPolicy = props.autoScalingPolicy;\n        this.balancingStrategy = props.balancingStrategy;\n        this.deleteOption = props.deleteOption;\n        this.gameServerProtectionPolicy = props.gameServerProtectionPolicy;\n        this.maxSize = props.maxSize;\n        this.minSize = props.minSize;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::GameLift::GameServerGroup\", props.tags, { tagPropertyName: 'tags' });\n        this.vpcSubnets = props.vpcSubnets;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnGameServerGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            gameServerGroupName: this.gameServerGroupName,\n            instanceDefinitions: this.instanceDefinitions,\n            launchTemplate: this.launchTemplate,\n            roleArn: this.roleArn,\n            autoScalingPolicy: this.autoScalingPolicy,\n            balancingStrategy: this.balancingStrategy,\n            deleteOption: this.deleteOption,\n            gameServerProtectionPolicy: this.gameServerProtectionPolicy,\n            maxSize: this.maxSize,\n            minSize: this.minSize,\n            tags: this.tags.renderTags(),\n            vpcSubnets: this.vpcSubnets,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnGameServerGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnGameServerGroup {\n                                                                                                                                                                                                                        \n    export interface AutoScalingPolicyProperty {\n                                                                                                                                                                                                                                                                                                                                         \n        readonly estimatedInstanceWarmup?: number;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly targetTrackingConfiguration: CfnGameServerGroup.TargetTrackingConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AutoScalingPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `AutoScalingPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnGameServerGroup_AutoScalingPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('estimatedInstanceWarmup', cdk.validateNumber)(properties.estimatedInstanceWarmup));\n    errors.collect(cdk.propertyValidator('targetTrackingConfiguration', cdk.requiredValidator)(properties.targetTrackingConfiguration));\n    errors.collect(cdk.propertyValidator('targetTrackingConfiguration', CfnGameServerGroup_TargetTrackingConfigurationPropertyValidator)(properties.targetTrackingConfiguration));\n    return errors.wrap('supplied properties not correct for \"AutoScalingPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::GameServerGroup.AutoScalingPolicy` resource\n *\n * @param properties - the TypeScript properties of a `AutoScalingPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::GameServerGroup.AutoScalingPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGameServerGroupAutoScalingPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGameServerGroup_AutoScalingPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        EstimatedInstanceWarmup: cdk.numberToCloudFormation(properties.estimatedInstanceWarmup),\n        TargetTrackingConfiguration: cfnGameServerGroupTargetTrackingConfigurationPropertyToCloudFormation(properties.targetTrackingConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGameServerGroupAutoScalingPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGameServerGroup.AutoScalingPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGameServerGroup.AutoScalingPolicyProperty>();\n    ret.addPropertyResult('estimatedInstanceWarmup', 'EstimatedInstanceWarmup', properties.EstimatedInstanceWarmup != null ? cfn_parse.FromCloudFormation.getNumber(properties.EstimatedInstanceWarmup) : undefined);\n    ret.addPropertyResult('targetTrackingConfiguration', 'TargetTrackingConfiguration', CfnGameServerGroupTargetTrackingConfigurationPropertyFromCloudFormation(properties.TargetTrackingConfiguration));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnGameServerGroup {\nn    export interface InstanceDefinitionProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly instanceType: string;\nn        readonly weightedCapacity?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceDefinitionProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceDefinitionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnGameServerGroup_InstanceDefinitionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceType', cdk.requiredValidator)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('weightedCapacity', cdk.validateString)(properties.weightedCapacity));\n    return errors.wrap('supplied properties not correct for \"InstanceDefinitionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::GameServerGroup.InstanceDefinition` resource\n *\n * @param properties - the TypeScript properties of a `InstanceDefinitionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::GameServerGroup.InstanceDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGameServerGroupInstanceDefinitionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGameServerGroup_InstanceDefinitionPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        WeightedCapacity: cdk.stringToCloudFormation(properties.weightedCapacity),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGameServerGroupInstanceDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGameServerGroup.InstanceDefinitionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGameServerGroup.InstanceDefinitionProperty>();\n    ret.addPropertyResult('instanceType', 'InstanceType', cfn_parse.FromCloudFormation.getString(properties.InstanceType));\n    ret.addPropertyResult('weightedCapacity', 'WeightedCapacity', properties.WeightedCapacity != null ? cfn_parse.FromCloudFormation.getString(properties.WeightedCapacity) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnGameServerGroup {\n                                                                                                                                                                                                                     \n    export interface LaunchTemplateProperty {\n                                                                                                                                                                                                                                                                                                                  \n        readonly launchTemplateId?: string;\n                                                                                                                                                                                                                                                                                                                      \n        readonly launchTemplateName?: string;\n                                                                                                                                                                                                                                                                                                \n        readonly version?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LaunchTemplateProperty`\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnGameServerGroup_LaunchTemplatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('launchTemplateId', cdk.validateString)(properties.launchTemplateId));\n    errors.collect(cdk.propertyValidator('launchTemplateName', cdk.validateString)(properties.launchTemplateName));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"LaunchTemplateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::GameServerGroup.LaunchTemplate` resource\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::GameServerGroup.LaunchTemplate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGameServerGroupLaunchTemplatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGameServerGroup_LaunchTemplatePropertyValidator(properties).assertSuccess();\n    return {\n        LaunchTemplateId: cdk.stringToCloudFormation(properties.launchTemplateId),\n        LaunchTemplateName: cdk.stringToCloudFormation(properties.launchTemplateName),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGameServerGroupLaunchTemplatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGameServerGroup.LaunchTemplateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGameServerGroup.LaunchTemplateProperty>();\n    ret.addPropertyResult('launchTemplateId', 'LaunchTemplateId', properties.LaunchTemplateId != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateId) : undefined);\n    ret.addPropertyResult('launchTemplateName', 'LaunchTemplateName', properties.LaunchTemplateName != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateName) : undefined);\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnGameServerGroup {\nn    export interface TargetTrackingConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly targetValue: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetTrackingConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `TargetTrackingConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnGameServerGroup_TargetTrackingConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('targetValue', cdk.requiredValidator)(properties.targetValue));\n    errors.collect(cdk.propertyValidator('targetValue', cdk.validateNumber)(properties.targetValue));\n    return errors.wrap('supplied properties not correct for \"TargetTrackingConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::GameServerGroup.TargetTrackingConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `TargetTrackingConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::GameServerGroup.TargetTrackingConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGameServerGroupTargetTrackingConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGameServerGroup_TargetTrackingConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        TargetValue: cdk.numberToCloudFormation(properties.targetValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGameServerGroupTargetTrackingConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGameServerGroup.TargetTrackingConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGameServerGroup.TargetTrackingConfigurationProperty>();\n    ret.addPropertyResult('targetValue', 'TargetValue', cfn_parse.FromCloudFormation.getNumber(properties.TargetValue));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                     \nexport interface CfnGameSessionQueueProps {\n\n                                                                                                                                                                                                                                                                                                      \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                     \n    readonly customEventData?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly destinations?: Array<CfnGameSessionQueue.DestinationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly filterConfiguration?: CfnGameSessionQueue.FilterConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly notificationTarget?: string;\n\nn    readonly playerLatencyPolicies?: Array<CfnGameSessionQueue.PlayerLatencyPolicyProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly priorityConfiguration?: CfnGameSessionQueue.PriorityConfigurationProperty | cdk.IResolvable;\n\nn    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly timeoutInSeconds?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnGameSessionQueueProps`\n *\n * @param properties - the TypeScript properties of a `CfnGameSessionQueueProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnGameSessionQueuePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('customEventData', cdk.validateString)(properties.customEventData));\n    errors.collect(cdk.propertyValidator('destinations', cdk.listValidator(CfnGameSessionQueue_DestinationPropertyValidator))(properties.destinations));\n    errors.collect(cdk.propertyValidator('filterConfiguration', CfnGameSessionQueue_FilterConfigurationPropertyValidator)(properties.filterConfiguration));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('notificationTarget', cdk.validateString)(properties.notificationTarget));\n    errors.collect(cdk.propertyValidator('playerLatencyPolicies', cdk.listValidator(CfnGameSessionQueue_PlayerLatencyPolicyPropertyValidator))(properties.playerLatencyPolicies));\n    errors.collect(cdk.propertyValidator('priorityConfiguration', CfnGameSessionQueue_PriorityConfigurationPropertyValidator)(properties.priorityConfiguration));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('timeoutInSeconds', cdk.validateNumber)(properties.timeoutInSeconds));\n    return errors.wrap('supplied properties not correct for \"CfnGameSessionQueueProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::GameSessionQueue` resource\n *\n * @param properties - the TypeScript properties of a `CfnGameSessionQueueProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::GameSessionQueue` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGameSessionQueuePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGameSessionQueuePropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        CustomEventData: cdk.stringToCloudFormation(properties.customEventData),\n        Destinations: cdk.listMapper(cfnGameSessionQueueDestinationPropertyToCloudFormation)(properties.destinations),\n        FilterConfiguration: cfnGameSessionQueueFilterConfigurationPropertyToCloudFormation(properties.filterConfiguration),\n        NotificationTarget: cdk.stringToCloudFormation(properties.notificationTarget),\n        PlayerLatencyPolicies: cdk.listMapper(cfnGameSessionQueuePlayerLatencyPolicyPropertyToCloudFormation)(properties.playerLatencyPolicies),\n        PriorityConfiguration: cfnGameSessionQueuePriorityConfigurationPropertyToCloudFormation(properties.priorityConfiguration),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TimeoutInSeconds: cdk.numberToCloudFormation(properties.timeoutInSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGameSessionQueuePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGameSessionQueueProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGameSessionQueueProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('customEventData', 'CustomEventData', properties.CustomEventData != null ? cfn_parse.FromCloudFormation.getString(properties.CustomEventData) : undefined);\n    ret.addPropertyResult('destinations', 'Destinations', properties.Destinations != null ? cfn_parse.FromCloudFormation.getArray(CfnGameSessionQueueDestinationPropertyFromCloudFormation)(properties.Destinations) : undefined);\n    ret.addPropertyResult('filterConfiguration', 'FilterConfiguration', properties.FilterConfiguration != null ? CfnGameSessionQueueFilterConfigurationPropertyFromCloudFormation(properties.FilterConfiguration) : undefined);\n    ret.addPropertyResult('notificationTarget', 'NotificationTarget', properties.NotificationTarget != null ? cfn_parse.FromCloudFormation.getString(properties.NotificationTarget) : undefined);\n    ret.addPropertyResult('playerLatencyPolicies', 'PlayerLatencyPolicies', properties.PlayerLatencyPolicies != null ? cfn_parse.FromCloudFormation.getArray(CfnGameSessionQueuePlayerLatencyPolicyPropertyFromCloudFormation)(properties.PlayerLatencyPolicies) : undefined);\n    ret.addPropertyResult('priorityConfiguration', 'PriorityConfiguration', properties.PriorityConfiguration != null ? CfnGameSessionQueuePriorityConfigurationPropertyFromCloudFormation(properties.PriorityConfiguration) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('timeoutInSeconds', 'TimeoutInSeconds', properties.TimeoutInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutInSeconds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \nexport class CfnGameSessionQueue extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GameLift::GameSessionQueue\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnGameSessionQueue {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnGameSessionQueuePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnGameSessionQueue(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                             \n    public readonly attrArn: string;\n\n                                                                                                                                                                  \n    public readonly attrName: string;\n\n                                                                                                                                                                                                                                                                                                      \n    public name: string;\n\n                                                                                                                                                                                                                                                                                     \n    public customEventData: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public destinations: Array<CfnGameSessionQueue.DestinationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public filterConfiguration: CfnGameSessionQueue.FilterConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public notificationTarget: string | undefined;\n\nn    public playerLatencyPolicies: Array<CfnGameSessionQueue.PlayerLatencyPolicyProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public priorityConfiguration: CfnGameSessionQueue.PriorityConfigurationProperty | cdk.IResolvable | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                               \n    public timeoutInSeconds: number | undefined;\n\n                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnGameSessionQueueProps) {\n        super(scope, id, { type: CfnGameSessionQueue.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.name = props.name;\n        this.customEventData = props.customEventData;\n        this.destinations = props.destinations;\n        this.filterConfiguration = props.filterConfiguration;\n        this.notificationTarget = props.notificationTarget;\n        this.playerLatencyPolicies = props.playerLatencyPolicies;\n        this.priorityConfiguration = props.priorityConfiguration;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::GameLift::GameSessionQueue\", props.tags, { tagPropertyName: 'tags' });\n        this.timeoutInSeconds = props.timeoutInSeconds;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnGameSessionQueue.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            customEventData: this.customEventData,\n            destinations: this.destinations,\n            filterConfiguration: this.filterConfiguration,\n            notificationTarget: this.notificationTarget,\n            playerLatencyPolicies: this.playerLatencyPolicies,\n            priorityConfiguration: this.priorityConfiguration,\n            tags: this.tags.renderTags(),\n            timeoutInSeconds: this.timeoutInSeconds,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnGameSessionQueuePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnGameSessionQueue {\n                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface DestinationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly destinationArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DestinationProperty`\n *\n * @param properties - the TypeScript properties of a `DestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnGameSessionQueue_DestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationArn', cdk.validateString)(properties.destinationArn));\n    return errors.wrap('supplied properties not correct for \"DestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::GameSessionQueue.Destination` resource\n *\n * @param properties - the TypeScript properties of a `DestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::GameSessionQueue.Destination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGameSessionQueueDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGameSessionQueue_DestinationPropertyValidator(properties).assertSuccess();\n    return {\n        DestinationArn: cdk.stringToCloudFormation(properties.destinationArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGameSessionQueueDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGameSessionQueue.DestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGameSessionQueue.DestinationProperty>();\n    ret.addPropertyResult('destinationArn', 'DestinationArn', properties.DestinationArn != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnGameSessionQueue {\nn    export interface FilterConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                               \n        readonly allowedLocations?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FilterConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `FilterConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnGameSessionQueue_FilterConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowedLocations', cdk.listValidator(cdk.validateString))(properties.allowedLocations));\n    return errors.wrap('supplied properties not correct for \"FilterConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::GameSessionQueue.FilterConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `FilterConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::GameSessionQueue.FilterConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGameSessionQueueFilterConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGameSessionQueue_FilterConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AllowedLocations: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedLocations),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGameSessionQueueFilterConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGameSessionQueue.FilterConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGameSessionQueue.FilterConfigurationProperty>();\n    ret.addPropertyResult('allowedLocations', 'AllowedLocations', properties.AllowedLocations != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AllowedLocations) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnGameSessionQueue {\nn    export interface PlayerLatencyPolicyProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly maximumIndividualPlayerLatencyMilliseconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly policyDurationSeconds?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PlayerLatencyPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `PlayerLatencyPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnGameSessionQueue_PlayerLatencyPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maximumIndividualPlayerLatencyMilliseconds', cdk.validateNumber)(properties.maximumIndividualPlayerLatencyMilliseconds));\n    errors.collect(cdk.propertyValidator('policyDurationSeconds', cdk.validateNumber)(properties.policyDurationSeconds));\n    return errors.wrap('supplied properties not correct for \"PlayerLatencyPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::GameSessionQueue.PlayerLatencyPolicy` resource\n *\n * @param properties - the TypeScript properties of a `PlayerLatencyPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::GameSessionQueue.PlayerLatencyPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGameSessionQueuePlayerLatencyPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGameSessionQueue_PlayerLatencyPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        MaximumIndividualPlayerLatencyMilliseconds: cdk.numberToCloudFormation(properties.maximumIndividualPlayerLatencyMilliseconds),\n        PolicyDurationSeconds: cdk.numberToCloudFormation(properties.policyDurationSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGameSessionQueuePlayerLatencyPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGameSessionQueue.PlayerLatencyPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGameSessionQueue.PlayerLatencyPolicyProperty>();\n    ret.addPropertyResult('maximumIndividualPlayerLatencyMilliseconds', 'MaximumIndividualPlayerLatencyMilliseconds', properties.MaximumIndividualPlayerLatencyMilliseconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumIndividualPlayerLatencyMilliseconds) : undefined);\n    ret.addPropertyResult('policyDurationSeconds', 'PolicyDurationSeconds', properties.PolicyDurationSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.PolicyDurationSeconds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnGameSessionQueue {\nn    export interface PriorityConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly locationOrder?: string[];\nn        readonly priorityOrder?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PriorityConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `PriorityConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnGameSessionQueue_PriorityConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('locationOrder', cdk.listValidator(cdk.validateString))(properties.locationOrder));\n    errors.collect(cdk.propertyValidator('priorityOrder', cdk.listValidator(cdk.validateString))(properties.priorityOrder));\n    return errors.wrap('supplied properties not correct for \"PriorityConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::GameSessionQueue.PriorityConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `PriorityConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::GameSessionQueue.PriorityConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGameSessionQueuePriorityConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGameSessionQueue_PriorityConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        LocationOrder: cdk.listMapper(cdk.stringToCloudFormation)(properties.locationOrder),\n        PriorityOrder: cdk.listMapper(cdk.stringToCloudFormation)(properties.priorityOrder),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGameSessionQueuePriorityConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGameSessionQueue.PriorityConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGameSessionQueue.PriorityConfigurationProperty>();\n    ret.addPropertyResult('locationOrder', 'LocationOrder', properties.LocationOrder != null ? cfn_parse.FromCloudFormation.getStringArray(properties.LocationOrder) : undefined);\n    ret.addPropertyResult('priorityOrder', 'PriorityOrder', properties.PriorityOrder != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PriorityOrder) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                     \nexport interface CfnMatchmakingConfigurationProps {\n\nn    readonly acceptanceRequired: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                   \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly requestTimeoutSeconds: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly ruleSetName: string;\n\n                                                                                                                                                                                                                                                                                                                                      \n    readonly acceptanceTimeoutSeconds?: number;\n\nn    readonly additionalPlayerCount?: number;\n\nn    readonly backfillMode?: string;\n\n                                                                                                                                                                                                                                                                                                       \n    readonly customEventData?: string;\n\n                                                                                                                                                                                                                                                                                     \n    readonly description?: string;\n\nn    readonly flexMatchMode?: string;\n\nn    readonly gameProperties?: Array<CfnMatchmakingConfiguration.GamePropertyProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly gameSessionData?: string;\n\nn    readonly gameSessionQueueArns?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly notificationTarget?: string;\n\nn    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMatchmakingConfigurationProps`\n *\n * @param properties - the TypeScript properties of a `CfnMatchmakingConfigurationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMatchmakingConfigurationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('acceptanceRequired', cdk.requiredValidator)(properties.acceptanceRequired));\n    errors.collect(cdk.propertyValidator('acceptanceRequired', cdk.validateBoolean)(properties.acceptanceRequired));\n    errors.collect(cdk.propertyValidator('acceptanceTimeoutSeconds', cdk.validateNumber)(properties.acceptanceTimeoutSeconds));\n    errors.collect(cdk.propertyValidator('additionalPlayerCount', cdk.validateNumber)(properties.additionalPlayerCount));\n    errors.collect(cdk.propertyValidator('backfillMode', cdk.validateString)(properties.backfillMode));\n    errors.collect(cdk.propertyValidator('customEventData', cdk.validateString)(properties.customEventData));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('flexMatchMode', cdk.validateString)(properties.flexMatchMode));\n    errors.collect(cdk.propertyValidator('gameProperties', cdk.listValidator(CfnMatchmakingConfiguration_GamePropertyPropertyValidator))(properties.gameProperties));\n    errors.collect(cdk.propertyValidator('gameSessionData', cdk.validateString)(properties.gameSessionData));\n    errors.collect(cdk.propertyValidator('gameSessionQueueArns', cdk.listValidator(cdk.validateString))(properties.gameSessionQueueArns));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('notificationTarget', cdk.validateString)(properties.notificationTarget));\n    errors.collect(cdk.propertyValidator('requestTimeoutSeconds', cdk.requiredValidator)(properties.requestTimeoutSeconds));\n    errors.collect(cdk.propertyValidator('requestTimeoutSeconds', cdk.validateNumber)(properties.requestTimeoutSeconds));\n    errors.collect(cdk.propertyValidator('ruleSetName', cdk.requiredValidator)(properties.ruleSetName));\n    errors.collect(cdk.propertyValidator('ruleSetName', cdk.validateString)(properties.ruleSetName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnMatchmakingConfigurationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::MatchmakingConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CfnMatchmakingConfigurationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::MatchmakingConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMatchmakingConfigurationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMatchmakingConfigurationPropsValidator(properties).assertSuccess();\n    return {\n        AcceptanceRequired: cdk.booleanToCloudFormation(properties.acceptanceRequired),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RequestTimeoutSeconds: cdk.numberToCloudFormation(properties.requestTimeoutSeconds),\n        RuleSetName: cdk.stringToCloudFormation(properties.ruleSetName),\n        AcceptanceTimeoutSeconds: cdk.numberToCloudFormation(properties.acceptanceTimeoutSeconds),\n        AdditionalPlayerCount: cdk.numberToCloudFormation(properties.additionalPlayerCount),\n        BackfillMode: cdk.stringToCloudFormation(properties.backfillMode),\n        CustomEventData: cdk.stringToCloudFormation(properties.customEventData),\n        Description: cdk.stringToCloudFormation(properties.description),\n        FlexMatchMode: cdk.stringToCloudFormation(properties.flexMatchMode),\n        GameProperties: cdk.listMapper(cfnMatchmakingConfigurationGamePropertyPropertyToCloudFormation)(properties.gameProperties),\n        GameSessionData: cdk.stringToCloudFormation(properties.gameSessionData),\n        GameSessionQueueArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.gameSessionQueueArns),\n        NotificationTarget: cdk.stringToCloudFormation(properties.notificationTarget),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMatchmakingConfigurationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMatchmakingConfigurationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMatchmakingConfigurationProps>();\n    ret.addPropertyResult('acceptanceRequired', 'AcceptanceRequired', cfn_parse.FromCloudFormation.getBoolean(properties.AcceptanceRequired));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('requestTimeoutSeconds', 'RequestTimeoutSeconds', cfn_parse.FromCloudFormation.getNumber(properties.RequestTimeoutSeconds));\n    ret.addPropertyResult('ruleSetName', 'RuleSetName', cfn_parse.FromCloudFormation.getString(properties.RuleSetName));\n    ret.addPropertyResult('acceptanceTimeoutSeconds', 'AcceptanceTimeoutSeconds', properties.AcceptanceTimeoutSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.AcceptanceTimeoutSeconds) : undefined);\n    ret.addPropertyResult('additionalPlayerCount', 'AdditionalPlayerCount', properties.AdditionalPlayerCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.AdditionalPlayerCount) : undefined);\n    ret.addPropertyResult('backfillMode', 'BackfillMode', properties.BackfillMode != null ? cfn_parse.FromCloudFormation.getString(properties.BackfillMode) : undefined);\n    ret.addPropertyResult('customEventData', 'CustomEventData', properties.CustomEventData != null ? cfn_parse.FromCloudFormation.getString(properties.CustomEventData) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('flexMatchMode', 'FlexMatchMode', properties.FlexMatchMode != null ? cfn_parse.FromCloudFormation.getString(properties.FlexMatchMode) : undefined);\n    ret.addPropertyResult('gameProperties', 'GameProperties', properties.GameProperties != null ? cfn_parse.FromCloudFormation.getArray(CfnMatchmakingConfigurationGamePropertyPropertyFromCloudFormation)(properties.GameProperties) : undefined);\n    ret.addPropertyResult('gameSessionData', 'GameSessionData', properties.GameSessionData != null ? cfn_parse.FromCloudFormation.getString(properties.GameSessionData) : undefined);\n    ret.addPropertyResult('gameSessionQueueArns', 'GameSessionQueueArns', properties.GameSessionQueueArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.GameSessionQueueArns) : undefined);\n    ret.addPropertyResult('notificationTarget', 'NotificationTarget', properties.NotificationTarget != null ? cfn_parse.FromCloudFormation.getString(properties.NotificationTarget) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnMatchmakingConfiguration extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GameLift::MatchmakingConfiguration\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMatchmakingConfiguration {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMatchmakingConfigurationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMatchmakingConfiguration(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                     \n    public readonly attrArn: string;\n\n                                                                                                                 \n    public readonly attrName: string;\n\nn    public acceptanceRequired: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                   \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                \n    public requestTimeoutSeconds: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public ruleSetName: string;\n\n                                                                                                                                                                                                                                                                                                                                      \n    public acceptanceTimeoutSeconds: number | undefined;\n\nn    public additionalPlayerCount: number | undefined;\n\nn    public backfillMode: string | undefined;\n\n                                                                                                                                                                                                                                                                                                       \n    public customEventData: string | undefined;\n\n                                                                                                                                                                                                                                                                                     \n    public description: string | undefined;\n\nn    public flexMatchMode: string | undefined;\n\nn    public gameProperties: Array<CfnMatchmakingConfiguration.GamePropertyProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public gameSessionData: string | undefined;\n\nn    public gameSessionQueueArns: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public notificationTarget: string | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnMatchmakingConfigurationProps) {\n        super(scope, id, { type: CfnMatchmakingConfiguration.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'acceptanceRequired', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'requestTimeoutSeconds', this);\n        cdk.requireProperty(props, 'ruleSetName', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.acceptanceRequired = props.acceptanceRequired;\n        this.name = props.name;\n        this.requestTimeoutSeconds = props.requestTimeoutSeconds;\n        this.ruleSetName = props.ruleSetName;\n        this.acceptanceTimeoutSeconds = props.acceptanceTimeoutSeconds;\n        this.additionalPlayerCount = props.additionalPlayerCount;\n        this.backfillMode = props.backfillMode;\n        this.customEventData = props.customEventData;\n        this.description = props.description;\n        this.flexMatchMode = props.flexMatchMode;\n        this.gameProperties = props.gameProperties;\n        this.gameSessionData = props.gameSessionData;\n        this.gameSessionQueueArns = props.gameSessionQueueArns;\n        this.notificationTarget = props.notificationTarget;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::GameLift::MatchmakingConfiguration\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMatchmakingConfiguration.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            acceptanceRequired: this.acceptanceRequired,\n            name: this.name,\n            requestTimeoutSeconds: this.requestTimeoutSeconds,\n            ruleSetName: this.ruleSetName,\n            acceptanceTimeoutSeconds: this.acceptanceTimeoutSeconds,\n            additionalPlayerCount: this.additionalPlayerCount,\n            backfillMode: this.backfillMode,\n            customEventData: this.customEventData,\n            description: this.description,\n            flexMatchMode: this.flexMatchMode,\n            gameProperties: this.gameProperties,\n            gameSessionData: this.gameSessionData,\n            gameSessionQueueArns: this.gameSessionQueueArns,\n            notificationTarget: this.notificationTarget,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMatchmakingConfigurationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnMatchmakingConfiguration {\nn    export interface GamePropertyProperty {\n                                                                                                                                                                                                                                                                                    \n        readonly key: string;\n                                                                                                                                                                                                                                                                                 \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GamePropertyProperty`\n *\n * @param properties - the TypeScript properties of a `GamePropertyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMatchmakingConfiguration_GamePropertyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"GamePropertyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::MatchmakingConfiguration.GameProperty` resource\n *\n * @param properties - the TypeScript properties of a `GamePropertyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::MatchmakingConfiguration.GameProperty` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMatchmakingConfigurationGamePropertyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMatchmakingConfiguration_GamePropertyPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMatchmakingConfigurationGamePropertyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMatchmakingConfiguration.GamePropertyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMatchmakingConfiguration.GamePropertyProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                         \nexport interface CfnMatchmakingRuleSetProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                                                                  \n    readonly ruleSetBody: string;\n\nn    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMatchmakingRuleSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnMatchmakingRuleSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMatchmakingRuleSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('ruleSetBody', cdk.requiredValidator)(properties.ruleSetBody));\n    errors.collect(cdk.propertyValidator('ruleSetBody', cdk.validateString)(properties.ruleSetBody));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnMatchmakingRuleSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::MatchmakingRuleSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnMatchmakingRuleSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::MatchmakingRuleSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMatchmakingRuleSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMatchmakingRuleSetPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        RuleSetBody: cdk.stringToCloudFormation(properties.ruleSetBody),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMatchmakingRuleSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMatchmakingRuleSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMatchmakingRuleSetProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('ruleSetBody', 'RuleSetBody', cfn_parse.FromCloudFormation.getString(properties.RuleSetBody));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnMatchmakingRuleSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GameLift::MatchmakingRuleSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMatchmakingRuleSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMatchmakingRuleSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMatchmakingRuleSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                          \n    public readonly attrArn: string;\n\n                                                                                            \n    public readonly attrName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                                                                  \n    public ruleSetBody: string;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnMatchmakingRuleSetProps) {\n        super(scope, id, { type: CfnMatchmakingRuleSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'ruleSetBody', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.name = props.name;\n        this.ruleSetBody = props.ruleSetBody;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::GameLift::MatchmakingRuleSet\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMatchmakingRuleSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            ruleSetBody: this.ruleSetBody,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMatchmakingRuleSetPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                 \nexport interface CfnScriptProps {\n\n                                                                                                                                                                                                                                                                              \n    readonly storageLocation: CfnScript.S3LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                \n    readonly name?: string;\n\n                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                       \n    readonly version?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnScriptProps`\n *\n * @param properties - the TypeScript properties of a `CfnScriptProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnScriptPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('storageLocation', cdk.requiredValidator)(properties.storageLocation));\n    errors.collect(cdk.propertyValidator('storageLocation', CfnScript_S3LocationPropertyValidator)(properties.storageLocation));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"CfnScriptProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Script` resource\n *\n * @param properties - the TypeScript properties of a `CfnScriptProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Script` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScriptPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScriptPropsValidator(properties).assertSuccess();\n    return {\n        StorageLocation: cfnScriptS3LocationPropertyToCloudFormation(properties.storageLocation),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScriptPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScriptProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScriptProps>();\n    ret.addPropertyResult('storageLocation', 'StorageLocation', CfnScriptS3LocationPropertyFromCloudFormation(properties.StorageLocation));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnScript extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GameLift::Script\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnScript {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnScriptPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnScript(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                \n    public readonly attrArn: string;\n\n                                                                                                    \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                              \n    public storageLocation: CfnScript.S3LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                \n    public name: string | undefined;\n\n                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                       \n    public version: string | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnScriptProps) {\n        super(scope, id, { type: CfnScript.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'storageLocation', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.storageLocation = props.storageLocation;\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::GameLift::Script\", props.tags, { tagPropertyName: 'tags' });\n        this.version = props.version;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnScript.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            storageLocation: this.storageLocation,\n            name: this.name,\n            tags: this.tags.renderTags(),\n            version: this.version,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnScriptPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnScript {\n                                                                                                                                                                                                                                                                                                           \n    export interface S3LocationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly bucket: string;\n                                                                                                                                                                                                                                                                                      \n        readonly key: string;\nn        readonly objectVersion?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly roleArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3LocationProperty`\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScript_S3LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.requiredValidator)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('objectVersion', cdk.validateString)(properties.objectVersion));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    return errors.wrap('supplied properties not correct for \"S3LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GameLift::Script.S3Location` resource\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GameLift::Script.S3Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScriptS3LocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScript_S3LocationPropertyValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        Key: cdk.stringToCloudFormation(properties.key),\n        ObjectVersion: cdk.stringToCloudFormation(properties.objectVersion),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScriptS3LocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScript.S3LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScript.S3LocationProperty>();\n    ret.addPropertyResult('bucket', 'Bucket', cfn_parse.FromCloudFormation.getString(properties.Bucket));\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('objectVersion', 'ObjectVersion', properties.ObjectVersion != null ? cfn_parse.FromCloudFormation.getString(properties.ObjectVersion) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
