{
  "version": 3,
  "sources": ["endpoint-group.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { AcceleratorSecurityGroupPeer } from './_accelerator-security-group';\nimport { IEndpoint } from './endpoint';\nimport * as ga from './globalaccelerator.generated';\nimport { IListener } from './listener';\n\n                                             \nexport interface IEndpointGroup extends cdk.IResource {\n                                                  \n  readonly endpointGroupArn: string;\n}\n\n                                                         \nexport interface EndpointGroupOptions {\n                                                                                           \n  readonly endpointGroupName?: string;\n\n                                                                                                                                                                                            \n  readonly region?: string;\n\n                                                                                                                                                    \n  readonly healthCheckInterval?: cdk.Duration;\n\n                                                                                                     \n  readonly healthCheckPath?: string;\n\n                                                                                                \n  readonly healthCheckPort?: number;\n\n                                                                                                      \n  readonly healthCheckProtocol?: HealthCheckProtocol;\n\n                                                                                                                                                                                            \n  readonly healthCheckThreshold?: number;\n\n                                                                                                                                                                                                                                                                                                                      \n  readonly trafficDialPercentage?: number;\n\n                                                                                                                                                                                                                                                                 \n  readonly portOverrides?: PortOverride[]\n\n                                                                                                       \n  readonly endpoints?: IEndpoint[];\n}\n\n                                                                                                                  \nexport interface PortOverride {\n                                                                                                                                                                       \n  readonly listenerPort: number;\n\n                                                                                                                                                                                           \n  readonly endpointPort: number;\n}\n\n                                                                            \nexport enum HealthCheckProtocol {\n                    \n  TCP = 'TCP',\n                     \n  HTTP = 'HTTP',\n                      \n  HTTPS = 'HTTPS',\n}\n\n                                        \nexport interface EndpointGroupProps extends EndpointGroupOptions {\n                                                                \n  readonly listener: IListener;\n}\n\n                                  \nexport class EndpointGroup extends cdk.Resource implements IEndpointGroup {\n                                \n  public static fromEndpointGroupArn(scope: Construct, id: string, endpointGroupArn: string): IEndpointGroup {\n    class Import extends cdk.Resource implements IEndpointGroup {\n      public readonly endpointGroupArn = endpointGroupArn;\n    }\n    return new Import(scope, id);\n  }\n\n  public readonly endpointGroupArn: string;\n                                                                         \n  public readonly endpointGroupName: string;\n                                                                  \n  protected readonly endpoints = new Array<IEndpoint>();\n\n  constructor(scope: Construct, id: string, props: EndpointGroupProps) {\n    super(scope, id);\n\n    const resource = new ga.CfnEndpointGroup(this, 'Resource', {\n      listenerArn: props.listener.listenerArn,\n      endpointGroupRegion: props.region ?? cdk.Lazy.string({ produce: () => this.firstEndpointRegion() }),\n      endpointConfigurations: cdk.Lazy.any({ produce: () => this.renderEndpoints() }, { omitEmptyArray: true }),\n      healthCheckIntervalSeconds: props.healthCheckInterval?.toSeconds({ integral: true }),\n      healthCheckPath: props.healthCheckPath,\n      healthCheckPort: props.healthCheckPort,\n      healthCheckProtocol: props.healthCheckProtocol,\n      thresholdCount: props.healthCheckThreshold,\n      trafficDialPercentage: props.trafficDialPercentage,\n      portOverrides: props.portOverrides?.map(o => ({\n        endpointPort: o.endpointPort,\n        listenerPort: o.listenerPort,\n      })),\n    });\n\n    this.endpointGroupArn = resource.attrEndpointGroupArn;\n    this.endpointGroupName = props.endpointGroupName ?? resource.logicalId;\n\n    for (const endpoint of props.endpoints ?? []) {\n      this.addEndpoint(endpoint);\n    }\n  }\n\n                                \n  public addEndpoint(endpoint: IEndpoint) {\n    this.endpoints.push(endpoint);\n  }\n\nn  public connectionsPeer(id: string, vpc: ec2.IVpc): ec2.IPeer {\n    return AcceleratorSecurityGroupPeer.fromVpc(this, id, vpc, this);\n  }\n\n  private renderEndpoints() {\n    return this.endpoints.map(e => e.renderEndpointConfiguration());\n  }\n\n  /**\n   * Return the first (readable) region of the endpoints in this group\n   */\n  private firstEndpointRegion() {\n    for (const endpoint of this.endpoints) {\n      if (endpoint.region) {\n        return endpoint.region;\n      }\n    }\n    return cdk.Stack.of(this).region;\n  }\n}\n"],
  "mappings": "gPACA,IAAA,QAAA,cAEA,8BAAA,QAAA,iCAEA,GAAA,QAAA,iCAoDA,GAAY,qBAAZ,AAAA,UAAY,qBAAmB,CAE7B,qBAAA,IAAA,MAEA,qBAAA,KAAA,OAEA,qBAAA,MAAA,UANU,oBAAA,QAAA,qBAAA,SAAA,oBAAmB,KAgB/B,2BAAmC,KAAI,QAAQ,CAe7C,YAAY,MAAkB,GAAY,MAAyB,oBACjE,MAAM,MAAO,IAHI,KAAA,UAAY,GAAI,2FAKjC,KAAM,UAAW,GAAI,IAAG,iBAAiB,KAAM,WAAY,CACzD,YAAa,MAAM,SAAS,YAC5B,oBAAmB,IAAE,MAAM,UAAM,MAAA,KAAA,OAAA,GAAI,IAAI,KAAK,OAAO,CAAE,QAAS,IAAM,KAAK,wBAC3E,uBAAwB,IAAI,KAAK,IAAI,CAAE,QAAS,IAAM,KAAK,mBAAqB,CAAE,eAAgB,KAClG,2BAA0B,IAAE,MAAM,uBAAmB,MAAA,KAAA,OAAA,OAAA,GAAE,UAAU,CAAE,SAAU,KAC7E,gBAAiB,MAAM,gBACvB,gBAAiB,MAAM,gBACvB,oBAAqB,MAAM,oBAC3B,eAAgB,MAAM,qBACtB,sBAAuB,MAAM,sBAC7B,cAAa,IAAE,MAAM,iBAAa,MAAA,KAAA,OAAA,OAAA,GAAE,IAAI,GAAM,EAC5C,aAAc,EAAE,aAChB,aAAc,EAAE,kBAIpB,KAAK,iBAAmB,SAAS,qBACjC,KAAK,kBAAiB,IAAG,MAAM,qBAAiB,MAAA,KAAA,OAAA,GAAI,SAAS,UAE7D,SAAW,YAAQ,IAAI,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,GACxC,KAAK,YAAY,gBApCP,sBAAqB,MAAkB,GAAY,iBAAwB,CACvF,oBAAqB,KAAI,QAAQ,CAAjC,aAAA,qBACkB,KAAA,iBAAmB,kBAErC,MAAO,IAAI,QAAO,MAAO,IAqCpB,YAAY,SAAmB,+EACpC,KAAK,UAAU,KAAK,UAIf,gBAAgB,GAAY,IAAa,8DACvC,8BAAA,6BAA6B,QAAQ,KAAM,GAAI,IAAK,MAGrD,iBAAe,CACrB,MAAO,MAAK,UAAU,IAAI,GAAK,EAAE,+BAM3B,qBAAmB,CACzB,SAAW,YAAY,MAAK,UAC1B,GAAI,SAAS,OACX,MAAO,UAAS,OAGpB,MAAO,KAAI,MAAM,GAAG,MAAM,QAjE9B,QAAA,cAAA",
  "names": []
}
