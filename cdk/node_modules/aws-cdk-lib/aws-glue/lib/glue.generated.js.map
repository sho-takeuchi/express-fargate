{
  "version": 3,
  "sources": ["glue.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:31.138Z\",\"fingerprint\":\"W9JGl+/jOCYgNfHcPNQN6GcXpHxQWtgCgmci/t12v4Y=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                     \nexport interface CfnClassifierProps {\n\n                                                                                                                                                                                                                           \n    readonly csvClassifier?: CfnClassifier.CsvClassifierProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                             \n    readonly grokClassifier?: CfnClassifier.GrokClassifierProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                            \n    readonly jsonClassifier?: CfnClassifier.JsonClassifierProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                          \n    readonly xmlClassifier?: CfnClassifier.XMLClassifierProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClassifierProps`\n *\n * @param properties - the TypeScript properties of a `CfnClassifierProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClassifierPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('csvClassifier', CfnClassifier_CsvClassifierPropertyValidator)(properties.csvClassifier));\n    errors.collect(cdk.propertyValidator('grokClassifier', CfnClassifier_GrokClassifierPropertyValidator)(properties.grokClassifier));\n    errors.collect(cdk.propertyValidator('jsonClassifier', CfnClassifier_JsonClassifierPropertyValidator)(properties.jsonClassifier));\n    errors.collect(cdk.propertyValidator('xmlClassifier', CfnClassifier_XMLClassifierPropertyValidator)(properties.xmlClassifier));\n    return errors.wrap('supplied properties not correct for \"CfnClassifierProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Classifier` resource\n *\n * @param properties - the TypeScript properties of a `CfnClassifierProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Classifier` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClassifierPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClassifierPropsValidator(properties).assertSuccess();\n    return {\n        CsvClassifier: cfnClassifierCsvClassifierPropertyToCloudFormation(properties.csvClassifier),\n        GrokClassifier: cfnClassifierGrokClassifierPropertyToCloudFormation(properties.grokClassifier),\n        JsonClassifier: cfnClassifierJsonClassifierPropertyToCloudFormation(properties.jsonClassifier),\n        XMLClassifier: cfnClassifierXMLClassifierPropertyToCloudFormation(properties.xmlClassifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClassifierPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClassifierProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClassifierProps>();\n    ret.addPropertyResult('csvClassifier', 'CsvClassifier', properties.CsvClassifier != null ? CfnClassifierCsvClassifierPropertyFromCloudFormation(properties.CsvClassifier) : undefined);\n    ret.addPropertyResult('grokClassifier', 'GrokClassifier', properties.GrokClassifier != null ? CfnClassifierGrokClassifierPropertyFromCloudFormation(properties.GrokClassifier) : undefined);\n    ret.addPropertyResult('jsonClassifier', 'JsonClassifier', properties.JsonClassifier != null ? CfnClassifierJsonClassifierPropertyFromCloudFormation(properties.JsonClassifier) : undefined);\n    ret.addPropertyResult('xmlClassifier', 'XMLClassifier', properties.XMLClassifier != null ? CfnClassifierXMLClassifierPropertyFromCloudFormation(properties.XMLClassifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnClassifier extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::Classifier\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnClassifier {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClassifierPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnClassifier(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                           \n    public csvClassifier: CfnClassifier.CsvClassifierProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                             \n    public grokClassifier: CfnClassifier.GrokClassifierProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                            \n    public jsonClassifier: CfnClassifier.JsonClassifierProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                          \n    public xmlClassifier: CfnClassifier.XMLClassifierProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnClassifierProps = {}) {\n        super(scope, id, { type: CfnClassifier.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.csvClassifier = props.csvClassifier;\n        this.grokClassifier = props.grokClassifier;\n        this.jsonClassifier = props.jsonClassifier;\n        this.xmlClassifier = props.xmlClassifier;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnClassifier.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            csvClassifier: this.csvClassifier,\n            grokClassifier: this.grokClassifier,\n            jsonClassifier: this.jsonClassifier,\n            xmlClassifier: this.xmlClassifier,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClassifierPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnClassifier {\n                                                                                                                                                                                                                                                  \n    export interface CsvClassifierProperty {\n                                                                                                                                                                                                                                                                                                \n        readonly allowSingleColumn?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                 \n        readonly containsHeader?: string;\n                                                                                                                                                                                                                                                                                                 \n        readonly delimiter?: string;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly disableValueTrimming?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                    \n        readonly header?: string[];\n                                                                                                                                                                                                                                                 \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly quoteSymbol?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CsvClassifierProperty`\n *\n * @param properties - the TypeScript properties of a `CsvClassifierProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClassifier_CsvClassifierPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowSingleColumn', cdk.validateBoolean)(properties.allowSingleColumn));\n    errors.collect(cdk.propertyValidator('containsHeader', cdk.validateString)(properties.containsHeader));\n    errors.collect(cdk.propertyValidator('delimiter', cdk.validateString)(properties.delimiter));\n    errors.collect(cdk.propertyValidator('disableValueTrimming', cdk.validateBoolean)(properties.disableValueTrimming));\n    errors.collect(cdk.propertyValidator('header', cdk.listValidator(cdk.validateString))(properties.header));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('quoteSymbol', cdk.validateString)(properties.quoteSymbol));\n    return errors.wrap('supplied properties not correct for \"CsvClassifierProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Classifier.CsvClassifier` resource\n *\n * @param properties - the TypeScript properties of a `CsvClassifierProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Classifier.CsvClassifier` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClassifierCsvClassifierPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClassifier_CsvClassifierPropertyValidator(properties).assertSuccess();\n    return {\n        AllowSingleColumn: cdk.booleanToCloudFormation(properties.allowSingleColumn),\n        ContainsHeader: cdk.stringToCloudFormation(properties.containsHeader),\n        Delimiter: cdk.stringToCloudFormation(properties.delimiter),\n        DisableValueTrimming: cdk.booleanToCloudFormation(properties.disableValueTrimming),\n        Header: cdk.listMapper(cdk.stringToCloudFormation)(properties.header),\n        Name: cdk.stringToCloudFormation(properties.name),\n        QuoteSymbol: cdk.stringToCloudFormation(properties.quoteSymbol),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClassifierCsvClassifierPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClassifier.CsvClassifierProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClassifier.CsvClassifierProperty>();\n    ret.addPropertyResult('allowSingleColumn', 'AllowSingleColumn', properties.AllowSingleColumn != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowSingleColumn) : undefined);\n    ret.addPropertyResult('containsHeader', 'ContainsHeader', properties.ContainsHeader != null ? cfn_parse.FromCloudFormation.getString(properties.ContainsHeader) : undefined);\n    ret.addPropertyResult('delimiter', 'Delimiter', properties.Delimiter != null ? cfn_parse.FromCloudFormation.getString(properties.Delimiter) : undefined);\n    ret.addPropertyResult('disableValueTrimming', 'DisableValueTrimming', properties.DisableValueTrimming != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableValueTrimming) : undefined);\n    ret.addPropertyResult('header', 'Header', properties.Header != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Header) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('quoteSymbol', 'QuoteSymbol', properties.QuoteSymbol != null ? cfn_parse.FromCloudFormation.getString(properties.QuoteSymbol) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnClassifier {\n                                                                                                                                                                                                                                                    \n    export interface GrokClassifierProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly classification: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly customPatterns?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly grokPattern: string;\n                                                                                                                                                                                                                                                   \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GrokClassifierProperty`\n *\n * @param properties - the TypeScript properties of a `GrokClassifierProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClassifier_GrokClassifierPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('classification', cdk.requiredValidator)(properties.classification));\n    errors.collect(cdk.propertyValidator('classification', cdk.validateString)(properties.classification));\n    errors.collect(cdk.propertyValidator('customPatterns', cdk.validateString)(properties.customPatterns));\n    errors.collect(cdk.propertyValidator('grokPattern', cdk.requiredValidator)(properties.grokPattern));\n    errors.collect(cdk.propertyValidator('grokPattern', cdk.validateString)(properties.grokPattern));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"GrokClassifierProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Classifier.GrokClassifier` resource\n *\n * @param properties - the TypeScript properties of a `GrokClassifierProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Classifier.GrokClassifier` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClassifierGrokClassifierPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClassifier_GrokClassifierPropertyValidator(properties).assertSuccess();\n    return {\n        Classification: cdk.stringToCloudFormation(properties.classification),\n        CustomPatterns: cdk.stringToCloudFormation(properties.customPatterns),\n        GrokPattern: cdk.stringToCloudFormation(properties.grokPattern),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClassifierGrokClassifierPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClassifier.GrokClassifierProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClassifier.GrokClassifierProperty>();\n    ret.addPropertyResult('classification', 'Classification', cfn_parse.FromCloudFormation.getString(properties.Classification));\n    ret.addPropertyResult('customPatterns', 'CustomPatterns', properties.CustomPatterns != null ? cfn_parse.FromCloudFormation.getString(properties.CustomPatterns) : undefined);\n    ret.addPropertyResult('grokPattern', 'GrokPattern', cfn_parse.FromCloudFormation.getString(properties.GrokPattern));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnClassifier {\n                                                                                                                                                                                                                                             \n    export interface JsonClassifierProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly jsonPath: string;\n                                                                                                                                                                                                                                                   \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `JsonClassifierProperty`\n *\n * @param properties - the TypeScript properties of a `JsonClassifierProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClassifier_JsonClassifierPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('jsonPath', cdk.requiredValidator)(properties.jsonPath));\n    errors.collect(cdk.propertyValidator('jsonPath', cdk.validateString)(properties.jsonPath));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"JsonClassifierProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Classifier.JsonClassifier` resource\n *\n * @param properties - the TypeScript properties of a `JsonClassifierProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Classifier.JsonClassifier` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClassifierJsonClassifierPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClassifier_JsonClassifierPropertyValidator(properties).assertSuccess();\n    return {\n        JsonPath: cdk.stringToCloudFormation(properties.jsonPath),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClassifierJsonClassifierPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClassifier.JsonClassifierProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClassifier.JsonClassifierProperty>();\n    ret.addPropertyResult('jsonPath', 'JsonPath', cfn_parse.FromCloudFormation.getString(properties.JsonPath));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnClassifier {\n                                                                                                                                                                                                                                           \n    export interface XMLClassifierProperty {\n                                                                                                                                                                                                                                                                                             \n        readonly classification: string;\n                                                                                                                                                                                                                                                 \n        readonly name?: string;\nn        readonly rowTag: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `XMLClassifierProperty`\n *\n * @param properties - the TypeScript properties of a `XMLClassifierProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClassifier_XMLClassifierPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('classification', cdk.requiredValidator)(properties.classification));\n    errors.collect(cdk.propertyValidator('classification', cdk.validateString)(properties.classification));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('rowTag', cdk.requiredValidator)(properties.rowTag));\n    errors.collect(cdk.propertyValidator('rowTag', cdk.validateString)(properties.rowTag));\n    return errors.wrap('supplied properties not correct for \"XMLClassifierProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Classifier.XMLClassifier` resource\n *\n * @param properties - the TypeScript properties of a `XMLClassifierProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Classifier.XMLClassifier` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClassifierXMLClassifierPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClassifier_XMLClassifierPropertyValidator(properties).assertSuccess();\n    return {\n        Classification: cdk.stringToCloudFormation(properties.classification),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RowTag: cdk.stringToCloudFormation(properties.rowTag),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClassifierXMLClassifierPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClassifier.XMLClassifierProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClassifier.XMLClassifierProperty>();\n    ret.addPropertyResult('classification', 'Classification', cfn_parse.FromCloudFormation.getString(properties.Classification));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('rowTag', 'RowTag', cfn_parse.FromCloudFormation.getString(properties.RowTag));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                     \nexport interface CfnConnectionProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly catalogId: string;\n\n                                                                                                                                                                                                                      \n    readonly connectionInput: CfnConnection.ConnectionInputProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnConnectionProps`\n *\n * @param properties - the TypeScript properties of a `CfnConnectionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnectionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogId', cdk.requiredValidator)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('catalogId', cdk.validateString)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('connectionInput', cdk.requiredValidator)(properties.connectionInput));\n    errors.collect(cdk.propertyValidator('connectionInput', CfnConnection_ConnectionInputPropertyValidator)(properties.connectionInput));\n    return errors.wrap('supplied properties not correct for \"CfnConnectionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Connection` resource\n *\n * @param properties - the TypeScript properties of a `CfnConnectionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Connection` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnectionPropsValidator(properties).assertSuccess();\n    return {\n        CatalogId: cdk.stringToCloudFormation(properties.catalogId),\n        ConnectionInput: cfnConnectionConnectionInputPropertyToCloudFormation(properties.connectionInput),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnectionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnectionProps>();\n    ret.addPropertyResult('catalogId', 'CatalogId', cfn_parse.FromCloudFormation.getString(properties.CatalogId));\n    ret.addPropertyResult('connectionInput', 'ConnectionInput', CfnConnectionConnectionInputPropertyFromCloudFormation(properties.ConnectionInput));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnConnection extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::Connection\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnConnection {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnConnectionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnConnection(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public catalogId: string;\n\n                                                                                                                                                                                                                      \n    public connectionInput: CfnConnection.ConnectionInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnConnectionProps) {\n        super(scope, id, { type: CfnConnection.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'catalogId', this);\n        cdk.requireProperty(props, 'connectionInput', this);\n\n        this.catalogId = props.catalogId;\n        this.connectionInput = props.connectionInput;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnConnection.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            catalogId: this.catalogId,\n            connectionInput: this.connectionInput,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnConnectionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnConnection {\n                                                                                                                                                                                                                                                                                   \n    export interface ConnectionInputProperty {\n                                                                                                                                                                                                                                                                                                     \n        readonly connectionProperties?: any | cdk.IResolvable;\nn        readonly connectionType: string;\n                                                                                                                                                                                                                                                                   \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                    \n        readonly matchCriteria?: string[];\n                                                                                                                                                                                                                                                     \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly physicalConnectionRequirements?: CfnConnection.PhysicalConnectionRequirementsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConnectionInputProperty`\n *\n * @param properties - the TypeScript properties of a `ConnectionInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnection_ConnectionInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectionProperties', cdk.validateObject)(properties.connectionProperties));\n    errors.collect(cdk.propertyValidator('connectionType', cdk.requiredValidator)(properties.connectionType));\n    errors.collect(cdk.propertyValidator('connectionType', cdk.validateString)(properties.connectionType));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('matchCriteria', cdk.listValidator(cdk.validateString))(properties.matchCriteria));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('physicalConnectionRequirements', CfnConnection_PhysicalConnectionRequirementsPropertyValidator)(properties.physicalConnectionRequirements));\n    return errors.wrap('supplied properties not correct for \"ConnectionInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Connection.ConnectionInput` resource\n *\n * @param properties - the TypeScript properties of a `ConnectionInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Connection.ConnectionInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectionConnectionInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnection_ConnectionInputPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectionProperties: cdk.objectToCloudFormation(properties.connectionProperties),\n        ConnectionType: cdk.stringToCloudFormation(properties.connectionType),\n        Description: cdk.stringToCloudFormation(properties.description),\n        MatchCriteria: cdk.listMapper(cdk.stringToCloudFormation)(properties.matchCriteria),\n        Name: cdk.stringToCloudFormation(properties.name),\n        PhysicalConnectionRequirements: cfnConnectionPhysicalConnectionRequirementsPropertyToCloudFormation(properties.physicalConnectionRequirements),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectionConnectionInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnection.ConnectionInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnection.ConnectionInputProperty>();\n    ret.addPropertyResult('connectionProperties', 'ConnectionProperties', properties.ConnectionProperties != null ? cfn_parse.FromCloudFormation.getAny(properties.ConnectionProperties) : undefined);\n    ret.addPropertyResult('connectionType', 'ConnectionType', cfn_parse.FromCloudFormation.getString(properties.ConnectionType));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('matchCriteria', 'MatchCriteria', properties.MatchCriteria != null ? cfn_parse.FromCloudFormation.getStringArray(properties.MatchCriteria) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('physicalConnectionRequirements', 'PhysicalConnectionRequirements', properties.PhysicalConnectionRequirements != null ? CfnConnectionPhysicalConnectionRequirementsPropertyFromCloudFormation(properties.PhysicalConnectionRequirements) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConnection {\n                                                                                                                                                                                                                                                                                  \n    export interface PhysicalConnectionRequirementsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly availabilityZone?: string;\n                                                                                                                                                                                                                                                                                                                         \n        readonly securityGroupIdList?: string[];\n                                                                                                                                                                                                                                                                                                 \n        readonly subnetId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PhysicalConnectionRequirementsProperty`\n *\n * @param properties - the TypeScript properties of a `PhysicalConnectionRequirementsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConnection_PhysicalConnectionRequirementsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('securityGroupIdList', cdk.listValidator(cdk.validateString))(properties.securityGroupIdList));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    return errors.wrap('supplied properties not correct for \"PhysicalConnectionRequirementsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Connection.PhysicalConnectionRequirements` resource\n *\n * @param properties - the TypeScript properties of a `PhysicalConnectionRequirementsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Connection.PhysicalConnectionRequirements` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConnectionPhysicalConnectionRequirementsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConnection_PhysicalConnectionRequirementsPropertyValidator(properties).assertSuccess();\n    return {\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        SecurityGroupIdList: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIdList),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConnectionPhysicalConnectionRequirementsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConnection.PhysicalConnectionRequirementsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConnection.PhysicalConnectionRequirementsProperty>();\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('securityGroupIdList', 'SecurityGroupIdList', properties.SecurityGroupIdList != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIdList) : undefined);\n    ret.addPropertyResult('subnetId', 'SubnetId', properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                               \nexport interface CfnCrawlerProps {\n\n                                                                                                                                                                                                                                                                                                             \n    readonly role: string;\n\n                                                                                                                                                                                                  \n    readonly targets: CfnCrawler.TargetsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                      \n    readonly classifiers?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly configuration?: string;\n\n                                                                                                                                                                                                                                                                   \n    readonly crawlerSecurityConfiguration?: string;\n\n                                                                                                                                                                                                                                       \n    readonly databaseName?: string;\n\n                                                                                                                                                                                                  \n    readonly description?: string;\n\n                                                                                                                                                                                      \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                              \n    readonly recrawlPolicy?: CfnCrawler.RecrawlPolicyProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                             \n    readonly schedule?: CfnCrawler.ScheduleProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                  \n    readonly schemaChangePolicy?: CfnCrawler.SchemaChangePolicyProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                              \n    readonly tablePrefix?: string;\n\n                                                                                                                                                                                                \n    readonly tags?: any;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCrawlerProps`\n *\n * @param properties - the TypeScript properties of a `CfnCrawlerProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCrawlerPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('classifiers', cdk.listValidator(cdk.validateString))(properties.classifiers));\n    errors.collect(cdk.propertyValidator('configuration', cdk.validateString)(properties.configuration));\n    errors.collect(cdk.propertyValidator('crawlerSecurityConfiguration', cdk.validateString)(properties.crawlerSecurityConfiguration));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('recrawlPolicy', CfnCrawler_RecrawlPolicyPropertyValidator)(properties.recrawlPolicy));\n    errors.collect(cdk.propertyValidator('role', cdk.requiredValidator)(properties.role));\n    errors.collect(cdk.propertyValidator('role', cdk.validateString)(properties.role));\n    errors.collect(cdk.propertyValidator('schedule', CfnCrawler_SchedulePropertyValidator)(properties.schedule));\n    errors.collect(cdk.propertyValidator('schemaChangePolicy', CfnCrawler_SchemaChangePolicyPropertyValidator)(properties.schemaChangePolicy));\n    errors.collect(cdk.propertyValidator('tablePrefix', cdk.validateString)(properties.tablePrefix));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    errors.collect(cdk.propertyValidator('targets', cdk.requiredValidator)(properties.targets));\n    errors.collect(cdk.propertyValidator('targets', CfnCrawler_TargetsPropertyValidator)(properties.targets));\n    return errors.wrap('supplied properties not correct for \"CfnCrawlerProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Crawler` resource\n *\n * @param properties - the TypeScript properties of a `CfnCrawlerProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Crawler` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCrawlerPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCrawlerPropsValidator(properties).assertSuccess();\n    return {\n        Role: cdk.stringToCloudFormation(properties.role),\n        Targets: cfnCrawlerTargetsPropertyToCloudFormation(properties.targets),\n        Classifiers: cdk.listMapper(cdk.stringToCloudFormation)(properties.classifiers),\n        Configuration: cdk.stringToCloudFormation(properties.configuration),\n        CrawlerSecurityConfiguration: cdk.stringToCloudFormation(properties.crawlerSecurityConfiguration),\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RecrawlPolicy: cfnCrawlerRecrawlPolicyPropertyToCloudFormation(properties.recrawlPolicy),\n        Schedule: cfnCrawlerSchedulePropertyToCloudFormation(properties.schedule),\n        SchemaChangePolicy: cfnCrawlerSchemaChangePolicyPropertyToCloudFormation(properties.schemaChangePolicy),\n        TablePrefix: cdk.stringToCloudFormation(properties.tablePrefix),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCrawlerPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCrawlerProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCrawlerProps>();\n    ret.addPropertyResult('role', 'Role', cfn_parse.FromCloudFormation.getString(properties.Role));\n    ret.addPropertyResult('targets', 'Targets', CfnCrawlerTargetsPropertyFromCloudFormation(properties.Targets));\n    ret.addPropertyResult('classifiers', 'Classifiers', properties.Classifiers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Classifiers) : undefined);\n    ret.addPropertyResult('configuration', 'Configuration', properties.Configuration != null ? cfn_parse.FromCloudFormation.getString(properties.Configuration) : undefined);\n    ret.addPropertyResult('crawlerSecurityConfiguration', 'CrawlerSecurityConfiguration', properties.CrawlerSecurityConfiguration != null ? cfn_parse.FromCloudFormation.getString(properties.CrawlerSecurityConfiguration) : undefined);\n    ret.addPropertyResult('databaseName', 'DatabaseName', properties.DatabaseName != null ? cfn_parse.FromCloudFormation.getString(properties.DatabaseName) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('recrawlPolicy', 'RecrawlPolicy', properties.RecrawlPolicy != null ? CfnCrawlerRecrawlPolicyPropertyFromCloudFormation(properties.RecrawlPolicy) : undefined);\n    ret.addPropertyResult('schedule', 'Schedule', properties.Schedule != null ? CfnCrawlerSchedulePropertyFromCloudFormation(properties.Schedule) : undefined);\n    ret.addPropertyResult('schemaChangePolicy', 'SchemaChangePolicy', properties.SchemaChangePolicy != null ? CfnCrawlerSchemaChangePolicyPropertyFromCloudFormation(properties.SchemaChangePolicy) : undefined);\n    ret.addPropertyResult('tablePrefix', 'TablePrefix', properties.TablePrefix != null ? cfn_parse.FromCloudFormation.getString(properties.TablePrefix) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCrawler extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::Crawler\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCrawler {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCrawlerPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCrawler(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                             \n    public role: string;\n\n                                                                                                                                                                                                  \n    public targets: CfnCrawler.TargetsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                      \n    public classifiers: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public configuration: string | undefined;\n\n                                                                                                                                                                                                                                                                   \n    public crawlerSecurityConfiguration: string | undefined;\n\n                                                                                                                                                                                                                                       \n    public databaseName: string | undefined;\n\n                                                                                                                                                                                                  \n    public description: string | undefined;\n\n                                                                                                                                                                                      \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                              \n    public recrawlPolicy: CfnCrawler.RecrawlPolicyProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    public schedule: CfnCrawler.ScheduleProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                  \n    public schemaChangePolicy: CfnCrawler.SchemaChangePolicyProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                              \n    public tablePrefix: string | undefined;\n\n                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnCrawlerProps) {\n        super(scope, id, { type: CfnCrawler.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'role', this);\n        cdk.requireProperty(props, 'targets', this);\n\n        this.role = props.role;\n        this.targets = props.targets;\n        this.classifiers = props.classifiers;\n        this.configuration = props.configuration;\n        this.crawlerSecurityConfiguration = props.crawlerSecurityConfiguration;\n        this.databaseName = props.databaseName;\n        this.description = props.description;\n        this.name = props.name;\n        this.recrawlPolicy = props.recrawlPolicy;\n        this.schedule = props.schedule;\n        this.schemaChangePolicy = props.schemaChangePolicy;\n        this.tablePrefix = props.tablePrefix;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::Glue::Crawler\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCrawler.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            role: this.role,\n            targets: this.targets,\n            classifiers: this.classifiers,\n            configuration: this.configuration,\n            crawlerSecurityConfiguration: this.crawlerSecurityConfiguration,\n            databaseName: this.databaseName,\n            description: this.description,\n            name: this.name,\n            recrawlPolicy: this.recrawlPolicy,\n            schedule: this.schedule,\n            schemaChangePolicy: this.schemaChangePolicy,\n            tablePrefix: this.tablePrefix,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCrawlerPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCrawler {\n                                                                                                                                                                                                                                                   \n    export interface CatalogTargetProperty {\n                                                                                                                                                                                                                                                                    \n        readonly databaseName?: string;\n                                                                                                                                                                                                                                                          \n        readonly tables?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CatalogTargetProperty`\n *\n * @param properties - the TypeScript properties of a `CatalogTargetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCrawler_CatalogTargetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('tables', cdk.listValidator(cdk.validateString))(properties.tables));\n    return errors.wrap('supplied properties not correct for \"CatalogTargetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Crawler.CatalogTarget` resource\n *\n * @param properties - the TypeScript properties of a `CatalogTargetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Crawler.CatalogTarget` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCrawlerCatalogTargetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCrawler_CatalogTargetPropertyValidator(properties).assertSuccess();\n    return {\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        Tables: cdk.listMapper(cdk.stringToCloudFormation)(properties.tables),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCrawlerCatalogTargetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCrawler.CatalogTargetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCrawler.CatalogTargetProperty>();\n    ret.addPropertyResult('databaseName', 'DatabaseName', properties.DatabaseName != null ? cfn_parse.FromCloudFormation.getString(properties.DatabaseName) : undefined);\n    ret.addPropertyResult('tables', 'Tables', properties.Tables != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Tables) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCrawler {\n                                                                                                                                                                                                                                                      \n    export interface DynamoDBTargetProperty {\n                                                                                                                                                                                                                                                          \n        readonly path?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DynamoDBTargetProperty`\n *\n * @param properties - the TypeScript properties of a `DynamoDBTargetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCrawler_DynamoDBTargetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    return errors.wrap('supplied properties not correct for \"DynamoDBTargetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Crawler.DynamoDBTarget` resource\n *\n * @param properties - the TypeScript properties of a `DynamoDBTargetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Crawler.DynamoDBTarget` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCrawlerDynamoDBTargetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCrawler_DynamoDBTargetPropertyValidator(properties).assertSuccess();\n    return {\n        Path: cdk.stringToCloudFormation(properties.path),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCrawlerDynamoDBTargetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCrawler.DynamoDBTargetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCrawler.DynamoDBTargetProperty>();\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCrawler {\n                                                                                                                                                                                                                                           \n    export interface JdbcTargetProperty {\n                                                                                                                                                                                                                                                                                    \n        readonly connectionName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly exclusions?: string[];\n                                                                                                                                                                                                                                      \n        readonly path?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `JdbcTargetProperty`\n *\n * @param properties - the TypeScript properties of a `JdbcTargetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCrawler_JdbcTargetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectionName', cdk.validateString)(properties.connectionName));\n    errors.collect(cdk.propertyValidator('exclusions', cdk.listValidator(cdk.validateString))(properties.exclusions));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    return errors.wrap('supplied properties not correct for \"JdbcTargetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Crawler.JdbcTarget` resource\n *\n * @param properties - the TypeScript properties of a `JdbcTargetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Crawler.JdbcTarget` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCrawlerJdbcTargetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCrawler_JdbcTargetPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectionName: cdk.stringToCloudFormation(properties.connectionName),\n        Exclusions: cdk.listMapper(cdk.stringToCloudFormation)(properties.exclusions),\n        Path: cdk.stringToCloudFormation(properties.path),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCrawlerJdbcTargetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCrawler.JdbcTargetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCrawler.JdbcTargetProperty>();\n    ret.addPropertyResult('connectionName', 'ConnectionName', properties.ConnectionName != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectionName) : undefined);\n    ret.addPropertyResult('exclusions', 'Exclusions', properties.Exclusions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Exclusions) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCrawler {\n                                                                                                                                                                                                                                                                       \n    export interface MongoDBTargetProperty {\n                                                                                                                                                                                                                                                                                                                  \n        readonly connectionName?: string;\n                                                                                                                                                                                                                                                                                          \n        readonly path?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MongoDBTargetProperty`\n *\n * @param properties - the TypeScript properties of a `MongoDBTargetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCrawler_MongoDBTargetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectionName', cdk.validateString)(properties.connectionName));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    return errors.wrap('supplied properties not correct for \"MongoDBTargetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Crawler.MongoDBTarget` resource\n *\n * @param properties - the TypeScript properties of a `MongoDBTargetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Crawler.MongoDBTarget` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCrawlerMongoDBTargetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCrawler_MongoDBTargetPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectionName: cdk.stringToCloudFormation(properties.connectionName),\n        Path: cdk.stringToCloudFormation(properties.path),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCrawlerMongoDBTargetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCrawler.MongoDBTargetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCrawler.MongoDBTargetProperty>();\n    ret.addPropertyResult('connectionName', 'ConnectionName', properties.ConnectionName != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectionName) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCrawler {\nn    export interface RecrawlPolicyProperty {\nn        readonly recrawlBehavior?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RecrawlPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `RecrawlPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCrawler_RecrawlPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('recrawlBehavior', cdk.validateString)(properties.recrawlBehavior));\n    return errors.wrap('supplied properties not correct for \"RecrawlPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Crawler.RecrawlPolicy` resource\n *\n * @param properties - the TypeScript properties of a `RecrawlPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Crawler.RecrawlPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCrawlerRecrawlPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCrawler_RecrawlPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        RecrawlBehavior: cdk.stringToCloudFormation(properties.recrawlBehavior),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCrawlerRecrawlPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCrawler.RecrawlPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCrawler.RecrawlPolicyProperty>();\n    ret.addPropertyResult('recrawlBehavior', 'RecrawlBehavior', properties.RecrawlBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.RecrawlBehavior) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCrawler {\n                                                                                                                                                                                                                                                                        \n    export interface S3TargetProperty {\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly connectionName?: string;\n                                                                                                                                                                                                                                                                \n        readonly dlqEventQueueArn?: string;\n                                                                                                                                                                                                                                                          \n        readonly eventQueueArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly exclusions?: string[];\n                                                                                                                                                                                                                                       \n        readonly path?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly sampleSize?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3TargetProperty`\n *\n * @param properties - the TypeScript properties of a `S3TargetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCrawler_S3TargetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectionName', cdk.validateString)(properties.connectionName));\n    errors.collect(cdk.propertyValidator('dlqEventQueueArn', cdk.validateString)(properties.dlqEventQueueArn));\n    errors.collect(cdk.propertyValidator('eventQueueArn', cdk.validateString)(properties.eventQueueArn));\n    errors.collect(cdk.propertyValidator('exclusions', cdk.listValidator(cdk.validateString))(properties.exclusions));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('sampleSize', cdk.validateNumber)(properties.sampleSize));\n    return errors.wrap('supplied properties not correct for \"S3TargetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Crawler.S3Target` resource\n *\n * @param properties - the TypeScript properties of a `S3TargetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Crawler.S3Target` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCrawlerS3TargetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCrawler_S3TargetPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectionName: cdk.stringToCloudFormation(properties.connectionName),\n        DlqEventQueueArn: cdk.stringToCloudFormation(properties.dlqEventQueueArn),\n        EventQueueArn: cdk.stringToCloudFormation(properties.eventQueueArn),\n        Exclusions: cdk.listMapper(cdk.stringToCloudFormation)(properties.exclusions),\n        Path: cdk.stringToCloudFormation(properties.path),\n        SampleSize: cdk.numberToCloudFormation(properties.sampleSize),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCrawlerS3TargetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCrawler.S3TargetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCrawler.S3TargetProperty>();\n    ret.addPropertyResult('connectionName', 'ConnectionName', properties.ConnectionName != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectionName) : undefined);\n    ret.addPropertyResult('dlqEventQueueArn', 'DlqEventQueueArn', properties.DlqEventQueueArn != null ? cfn_parse.FromCloudFormation.getString(properties.DlqEventQueueArn) : undefined);\n    ret.addPropertyResult('eventQueueArn', 'EventQueueArn', properties.EventQueueArn != null ? cfn_parse.FromCloudFormation.getString(properties.EventQueueArn) : undefined);\n    ret.addPropertyResult('exclusions', 'Exclusions', properties.Exclusions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Exclusions) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addPropertyResult('sampleSize', 'SampleSize', properties.SampleSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.SampleSize) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCrawler {\n                                                                                                                                                                                                                                                                      \n    export interface ScheduleProperty {\nn        readonly scheduleExpression?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ScheduleProperty`\n *\n * @param properties - the TypeScript properties of a `ScheduleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCrawler_SchedulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.validateString)(properties.scheduleExpression));\n    return errors.wrap('supplied properties not correct for \"ScheduleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Crawler.Schedule` resource\n *\n * @param properties - the TypeScript properties of a `ScheduleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Crawler.Schedule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCrawlerSchedulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCrawler_SchedulePropertyValidator(properties).assertSuccess();\n    return {\n        ScheduleExpression: cdk.stringToCloudFormation(properties.scheduleExpression),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCrawlerSchedulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCrawler.ScheduleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCrawler.ScheduleProperty>();\n    ret.addPropertyResult('scheduleExpression', 'ScheduleExpression', properties.ScheduleExpression != null ? cfn_parse.FromCloudFormation.getString(properties.ScheduleExpression) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCrawler {\n                                                                                                                                                                                                                                                                                    \n    export interface SchemaChangePolicyProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly deleteBehavior?: string;\n                                                                                                                                                                                                                                                                                                \n        readonly updateBehavior?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SchemaChangePolicyProperty`\n *\n * @param properties - the TypeScript properties of a `SchemaChangePolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCrawler_SchemaChangePolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deleteBehavior', cdk.validateString)(properties.deleteBehavior));\n    errors.collect(cdk.propertyValidator('updateBehavior', cdk.validateString)(properties.updateBehavior));\n    return errors.wrap('supplied properties not correct for \"SchemaChangePolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Crawler.SchemaChangePolicy` resource\n *\n * @param properties - the TypeScript properties of a `SchemaChangePolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Crawler.SchemaChangePolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCrawlerSchemaChangePolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCrawler_SchemaChangePolicyPropertyValidator(properties).assertSuccess();\n    return {\n        DeleteBehavior: cdk.stringToCloudFormation(properties.deleteBehavior),\n        UpdateBehavior: cdk.stringToCloudFormation(properties.updateBehavior),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCrawlerSchemaChangePolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCrawler.SchemaChangePolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCrawler.SchemaChangePolicyProperty>();\n    ret.addPropertyResult('deleteBehavior', 'DeleteBehavior', properties.DeleteBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.DeleteBehavior) : undefined);\n    ret.addPropertyResult('updateBehavior', 'UpdateBehavior', properties.UpdateBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.UpdateBehavior) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCrawler {\n                                                                                                                                                                                                                                  \n    export interface TargetsProperty {\n                                                                                                                                                                                                                                                      \n        readonly catalogTargets?: Array<CfnCrawler.CatalogTargetProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                 \n        readonly dynamoDbTargets?: Array<CfnCrawler.DynamoDBTargetProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                  \n        readonly jdbcTargets?: Array<CfnCrawler.JdbcTargetProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                         \n        readonly mongoDbTargets?: Array<CfnCrawler.MongoDBTargetProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                     \n        readonly s3Targets?: Array<CfnCrawler.S3TargetProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetsProperty`\n *\n * @param properties - the TypeScript properties of a `TargetsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCrawler_TargetsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogTargets', cdk.listValidator(CfnCrawler_CatalogTargetPropertyValidator))(properties.catalogTargets));\n    errors.collect(cdk.propertyValidator('dynamoDbTargets', cdk.listValidator(CfnCrawler_DynamoDBTargetPropertyValidator))(properties.dynamoDbTargets));\n    errors.collect(cdk.propertyValidator('jdbcTargets', cdk.listValidator(CfnCrawler_JdbcTargetPropertyValidator))(properties.jdbcTargets));\n    errors.collect(cdk.propertyValidator('mongoDbTargets', cdk.listValidator(CfnCrawler_MongoDBTargetPropertyValidator))(properties.mongoDbTargets));\n    errors.collect(cdk.propertyValidator('s3Targets', cdk.listValidator(CfnCrawler_S3TargetPropertyValidator))(properties.s3Targets));\n    return errors.wrap('supplied properties not correct for \"TargetsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Crawler.Targets` resource\n *\n * @param properties - the TypeScript properties of a `TargetsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Crawler.Targets` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCrawlerTargetsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCrawler_TargetsPropertyValidator(properties).assertSuccess();\n    return {\n        CatalogTargets: cdk.listMapper(cfnCrawlerCatalogTargetPropertyToCloudFormation)(properties.catalogTargets),\n        DynamoDBTargets: cdk.listMapper(cfnCrawlerDynamoDBTargetPropertyToCloudFormation)(properties.dynamoDbTargets),\n        JdbcTargets: cdk.listMapper(cfnCrawlerJdbcTargetPropertyToCloudFormation)(properties.jdbcTargets),\n        MongoDBTargets: cdk.listMapper(cfnCrawlerMongoDBTargetPropertyToCloudFormation)(properties.mongoDbTargets),\n        S3Targets: cdk.listMapper(cfnCrawlerS3TargetPropertyToCloudFormation)(properties.s3Targets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCrawlerTargetsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCrawler.TargetsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCrawler.TargetsProperty>();\n    ret.addPropertyResult('catalogTargets', 'CatalogTargets', properties.CatalogTargets != null ? cfn_parse.FromCloudFormation.getArray(CfnCrawlerCatalogTargetPropertyFromCloudFormation)(properties.CatalogTargets) : undefined);\n    ret.addPropertyResult('dynamoDbTargets', 'DynamoDBTargets', properties.DynamoDBTargets != null ? cfn_parse.FromCloudFormation.getArray(CfnCrawlerDynamoDBTargetPropertyFromCloudFormation)(properties.DynamoDBTargets) : undefined);\n    ret.addPropertyResult('jdbcTargets', 'JdbcTargets', properties.JdbcTargets != null ? cfn_parse.FromCloudFormation.getArray(CfnCrawlerJdbcTargetPropertyFromCloudFormation)(properties.JdbcTargets) : undefined);\n    ret.addPropertyResult('mongoDbTargets', 'MongoDBTargets', properties.MongoDBTargets != null ? cfn_parse.FromCloudFormation.getArray(CfnCrawlerMongoDBTargetPropertyFromCloudFormation)(properties.MongoDBTargets) : undefined);\n    ret.addPropertyResult('s3Targets', 'S3Targets', properties.S3Targets != null ? cfn_parse.FromCloudFormation.getArray(CfnCrawlerS3TargetPropertyFromCloudFormation)(properties.S3Targets) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                           \nexport interface CfnDataCatalogEncryptionSettingsProps {\n\n                                                                                                                                                                                                                                                                            \n    readonly catalogId: string;\n\n                                                                                                                                                                                                                                                                                                            \n    readonly dataCatalogEncryptionSettings: CfnDataCatalogEncryptionSettings.DataCatalogEncryptionSettingsProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDataCatalogEncryptionSettingsProps`\n *\n * @param properties - the TypeScript properties of a `CfnDataCatalogEncryptionSettingsProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataCatalogEncryptionSettingsPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogId', cdk.requiredValidator)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('catalogId', cdk.validateString)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('dataCatalogEncryptionSettings', cdk.requiredValidator)(properties.dataCatalogEncryptionSettings));\n    errors.collect(cdk.propertyValidator('dataCatalogEncryptionSettings', CfnDataCatalogEncryptionSettings_DataCatalogEncryptionSettingsPropertyValidator)(properties.dataCatalogEncryptionSettings));\n    return errors.wrap('supplied properties not correct for \"CfnDataCatalogEncryptionSettingsProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::DataCatalogEncryptionSettings` resource\n *\n * @param properties - the TypeScript properties of a `CfnDataCatalogEncryptionSettingsProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::DataCatalogEncryptionSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataCatalogEncryptionSettingsPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataCatalogEncryptionSettingsPropsValidator(properties).assertSuccess();\n    return {\n        CatalogId: cdk.stringToCloudFormation(properties.catalogId),\n        DataCatalogEncryptionSettings: cfnDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPropertyToCloudFormation(properties.dataCatalogEncryptionSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataCatalogEncryptionSettingsPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataCatalogEncryptionSettingsProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataCatalogEncryptionSettingsProps>();\n    ret.addPropertyResult('catalogId', 'CatalogId', cfn_parse.FromCloudFormation.getString(properties.CatalogId));\n    ret.addPropertyResult('dataCatalogEncryptionSettings', 'DataCatalogEncryptionSettings', CfnDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPropertyFromCloudFormation(properties.DataCatalogEncryptionSettings));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \nexport class CfnDataCatalogEncryptionSettings extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::DataCatalogEncryptionSettings\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDataCatalogEncryptionSettings {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDataCatalogEncryptionSettingsPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDataCatalogEncryptionSettings(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                            \n    public catalogId: string;\n\n                                                                                                                                                                                                                                                                                                            \n    public dataCatalogEncryptionSettings: CfnDataCatalogEncryptionSettings.DataCatalogEncryptionSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnDataCatalogEncryptionSettingsProps) {\n        super(scope, id, { type: CfnDataCatalogEncryptionSettings.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'catalogId', this);\n        cdk.requireProperty(props, 'dataCatalogEncryptionSettings', this);\n\n        this.catalogId = props.catalogId;\n        this.dataCatalogEncryptionSettings = props.dataCatalogEncryptionSettings;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDataCatalogEncryptionSettings.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            catalogId: this.catalogId,\n            dataCatalogEncryptionSettings: this.dataCatalogEncryptionSettings,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDataCatalogEncryptionSettingsPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDataCatalogEncryptionSettings {\nn    export interface ConnectionPasswordEncryptionProperty {\nn        readonly kmsKeyId?: string;\nn        readonly returnConnectionPasswordEncrypted?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConnectionPasswordEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `ConnectionPasswordEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataCatalogEncryptionSettings_ConnectionPasswordEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('returnConnectionPasswordEncrypted', cdk.validateBoolean)(properties.returnConnectionPasswordEncrypted));\n    return errors.wrap('supplied properties not correct for \"ConnectionPasswordEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::DataCatalogEncryptionSettings.ConnectionPasswordEncryption` resource\n *\n * @param properties - the TypeScript properties of a `ConnectionPasswordEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::DataCatalogEncryptionSettings.ConnectionPasswordEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataCatalogEncryptionSettingsConnectionPasswordEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataCatalogEncryptionSettings_ConnectionPasswordEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        ReturnConnectionPasswordEncrypted: cdk.booleanToCloudFormation(properties.returnConnectionPasswordEncrypted),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataCatalogEncryptionSettingsConnectionPasswordEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataCatalogEncryptionSettings.ConnectionPasswordEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataCatalogEncryptionSettings.ConnectionPasswordEncryptionProperty>();\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('returnConnectionPasswordEncrypted', 'ReturnConnectionPasswordEncrypted', properties.ReturnConnectionPasswordEncrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ReturnConnectionPasswordEncrypted) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataCatalogEncryptionSettings {\n                                                                                                                                                                                                                                                                                                                        \n    export interface DataCatalogEncryptionSettingsProperty {\nn        readonly connectionPasswordEncryption?: CfnDataCatalogEncryptionSettings.ConnectionPasswordEncryptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly encryptionAtRest?: CfnDataCatalogEncryptionSettings.EncryptionAtRestProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataCatalogEncryptionSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `DataCatalogEncryptionSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataCatalogEncryptionSettings_DataCatalogEncryptionSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectionPasswordEncryption', CfnDataCatalogEncryptionSettings_ConnectionPasswordEncryptionPropertyValidator)(properties.connectionPasswordEncryption));\n    errors.collect(cdk.propertyValidator('encryptionAtRest', CfnDataCatalogEncryptionSettings_EncryptionAtRestPropertyValidator)(properties.encryptionAtRest));\n    return errors.wrap('supplied properties not correct for \"DataCatalogEncryptionSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::DataCatalogEncryptionSettings.DataCatalogEncryptionSettings` resource\n *\n * @param properties - the TypeScript properties of a `DataCatalogEncryptionSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::DataCatalogEncryptionSettings.DataCatalogEncryptionSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataCatalogEncryptionSettings_DataCatalogEncryptionSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectionPasswordEncryption: cfnDataCatalogEncryptionSettingsConnectionPasswordEncryptionPropertyToCloudFormation(properties.connectionPasswordEncryption),\n        EncryptionAtRest: cfnDataCatalogEncryptionSettingsEncryptionAtRestPropertyToCloudFormation(properties.encryptionAtRest),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataCatalogEncryptionSettingsDataCatalogEncryptionSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataCatalogEncryptionSettings.DataCatalogEncryptionSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataCatalogEncryptionSettings.DataCatalogEncryptionSettingsProperty>();\n    ret.addPropertyResult('connectionPasswordEncryption', 'ConnectionPasswordEncryption', properties.ConnectionPasswordEncryption != null ? CfnDataCatalogEncryptionSettingsConnectionPasswordEncryptionPropertyFromCloudFormation(properties.ConnectionPasswordEncryption) : undefined);\n    ret.addPropertyResult('encryptionAtRest', 'EncryptionAtRest', properties.EncryptionAtRest != null ? CfnDataCatalogEncryptionSettingsEncryptionAtRestPropertyFromCloudFormation(properties.EncryptionAtRest) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataCatalogEncryptionSettings {\n                                                                                                                                                                                                                                                                                                      \n    export interface EncryptionAtRestProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly catalogEncryptionMode?: string;\n                                                                                                                                                                                                                                                                                                                                    \n        readonly sseAwsKmsKeyId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EncryptionAtRestProperty`\n *\n * @param properties - the TypeScript properties of a `EncryptionAtRestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataCatalogEncryptionSettings_EncryptionAtRestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogEncryptionMode', cdk.validateString)(properties.catalogEncryptionMode));\n    errors.collect(cdk.propertyValidator('sseAwsKmsKeyId', cdk.validateString)(properties.sseAwsKmsKeyId));\n    return errors.wrap('supplied properties not correct for \"EncryptionAtRestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::DataCatalogEncryptionSettings.EncryptionAtRest` resource\n *\n * @param properties - the TypeScript properties of a `EncryptionAtRestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::DataCatalogEncryptionSettings.EncryptionAtRest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataCatalogEncryptionSettingsEncryptionAtRestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataCatalogEncryptionSettings_EncryptionAtRestPropertyValidator(properties).assertSuccess();\n    return {\n        CatalogEncryptionMode: cdk.stringToCloudFormation(properties.catalogEncryptionMode),\n        SseAwsKmsKeyId: cdk.stringToCloudFormation(properties.sseAwsKmsKeyId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataCatalogEncryptionSettingsEncryptionAtRestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataCatalogEncryptionSettings.EncryptionAtRestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataCatalogEncryptionSettings.EncryptionAtRestProperty>();\n    ret.addPropertyResult('catalogEncryptionMode', 'CatalogEncryptionMode', properties.CatalogEncryptionMode != null ? cfn_parse.FromCloudFormation.getString(properties.CatalogEncryptionMode) : undefined);\n    ret.addPropertyResult('sseAwsKmsKeyId', 'SseAwsKmsKeyId', properties.SseAwsKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.SseAwsKmsKeyId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                 \nexport interface CfnDatabaseProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly catalogId: string;\n\n                                                                                                                                                                                                       \n    readonly databaseInput: CfnDatabase.DatabaseInputProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDatabaseProps`\n *\n * @param properties - the TypeScript properties of a `CfnDatabaseProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDatabasePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogId', cdk.requiredValidator)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('catalogId', cdk.validateString)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('databaseInput', cdk.requiredValidator)(properties.databaseInput));\n    errors.collect(cdk.propertyValidator('databaseInput', CfnDatabase_DatabaseInputPropertyValidator)(properties.databaseInput));\n    return errors.wrap('supplied properties not correct for \"CfnDatabaseProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Database` resource\n *\n * @param properties - the TypeScript properties of a `CfnDatabaseProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Database` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDatabasePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDatabasePropsValidator(properties).assertSuccess();\n    return {\n        CatalogId: cdk.stringToCloudFormation(properties.catalogId),\n        DatabaseInput: cfnDatabaseDatabaseInputPropertyToCloudFormation(properties.databaseInput),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDatabasePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDatabaseProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDatabaseProps>();\n    ret.addPropertyResult('catalogId', 'CatalogId', cfn_parse.FromCloudFormation.getString(properties.CatalogId));\n    ret.addPropertyResult('databaseInput', 'DatabaseInput', CfnDatabaseDatabaseInputPropertyFromCloudFormation(properties.DatabaseInput));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDatabase extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::Database\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDatabase {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDatabasePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDatabase(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public catalogId: string;\n\n                                                                                                                                                                                                       \n    public databaseInput: CfnDatabase.DatabaseInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnDatabaseProps) {\n        super(scope, id, { type: CfnDatabase.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'catalogId', this);\n        cdk.requireProperty(props, 'databaseInput', this);\n\n        this.catalogId = props.catalogId;\n        this.databaseInput = props.databaseInput;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDatabase.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            catalogId: this.catalogId,\n            databaseInput: this.databaseInput,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDatabasePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDatabase {\n                                                                                                                                                                                                                                               \n    export interface DataLakePrincipalProperty {\n                                                                                                                                                                                                                                                                                                    \n        readonly dataLakePrincipalIdentifier?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataLakePrincipalProperty`\n *\n * @param properties - the TypeScript properties of a `DataLakePrincipalProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDatabase_DataLakePrincipalPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataLakePrincipalIdentifier', cdk.validateString)(properties.dataLakePrincipalIdentifier));\n    return errors.wrap('supplied properties not correct for \"DataLakePrincipalProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Database.DataLakePrincipal` resource\n *\n * @param properties - the TypeScript properties of a `DataLakePrincipalProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Database.DataLakePrincipal` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDatabaseDataLakePrincipalPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDatabase_DataLakePrincipalPropertyValidator(properties).assertSuccess();\n    return {\n        DataLakePrincipalIdentifier: cdk.stringToCloudFormation(properties.dataLakePrincipalIdentifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDatabaseDataLakePrincipalPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDatabase.DataLakePrincipalProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDatabase.DataLakePrincipalProperty>();\n    ret.addPropertyResult('dataLakePrincipalIdentifier', 'DataLakePrincipalIdentifier', properties.DataLakePrincipalIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.DataLakePrincipalIdentifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDatabase {\n                                                                                                                                                                                                                                                                                 \n    export interface DatabaseIdentifierProperty {\n                                                                                                                                                                                                                                                                                          \n        readonly catalogId?: string;\n                                                                                                                                                                                                                                                                     \n        readonly databaseName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DatabaseIdentifierProperty`\n *\n * @param properties - the TypeScript properties of a `DatabaseIdentifierProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDatabase_DatabaseIdentifierPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogId', cdk.validateString)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    return errors.wrap('supplied properties not correct for \"DatabaseIdentifierProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Database.DatabaseIdentifier` resource\n *\n * @param properties - the TypeScript properties of a `DatabaseIdentifierProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Database.DatabaseIdentifier` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDatabaseDatabaseIdentifierPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDatabase_DatabaseIdentifierPropertyValidator(properties).assertSuccess();\n    return {\n        CatalogId: cdk.stringToCloudFormation(properties.catalogId),\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDatabaseDatabaseIdentifierPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDatabase.DatabaseIdentifierProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDatabase.DatabaseIdentifierProperty>();\n    ret.addPropertyResult('catalogId', 'CatalogId', properties.CatalogId != null ? cfn_parse.FromCloudFormation.getString(properties.CatalogId) : undefined);\n    ret.addPropertyResult('databaseName', 'DatabaseName', properties.DatabaseName != null ? cfn_parse.FromCloudFormation.getString(properties.DatabaseName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDatabase {\n                                                                                                                                                                                                                                                            \n    export interface DatabaseInputProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly createTableDefaultPermissions?: Array<CfnDatabase.PrincipalPrivilegesProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                       \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                  \n        readonly locationUri?: string;\n                                                                                                                                                                                                                                                                                                                  \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                               \n        readonly parameters?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                   \n        readonly targetDatabase?: CfnDatabase.DatabaseIdentifierProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DatabaseInputProperty`\n *\n * @param properties - the TypeScript properties of a `DatabaseInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDatabase_DatabaseInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('createTableDefaultPermissions', cdk.listValidator(CfnDatabase_PrincipalPrivilegesPropertyValidator))(properties.createTableDefaultPermissions));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('locationUri', cdk.validateString)(properties.locationUri));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('parameters', cdk.validateObject)(properties.parameters));\n    errors.collect(cdk.propertyValidator('targetDatabase', CfnDatabase_DatabaseIdentifierPropertyValidator)(properties.targetDatabase));\n    return errors.wrap('supplied properties not correct for \"DatabaseInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Database.DatabaseInput` resource\n *\n * @param properties - the TypeScript properties of a `DatabaseInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Database.DatabaseInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDatabaseDatabaseInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDatabase_DatabaseInputPropertyValidator(properties).assertSuccess();\n    return {\n        CreateTableDefaultPermissions: cdk.listMapper(cfnDatabasePrincipalPrivilegesPropertyToCloudFormation)(properties.createTableDefaultPermissions),\n        Description: cdk.stringToCloudFormation(properties.description),\n        LocationUri: cdk.stringToCloudFormation(properties.locationUri),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Parameters: cdk.objectToCloudFormation(properties.parameters),\n        TargetDatabase: cfnDatabaseDatabaseIdentifierPropertyToCloudFormation(properties.targetDatabase),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDatabaseDatabaseInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDatabase.DatabaseInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDatabase.DatabaseInputProperty>();\n    ret.addPropertyResult('createTableDefaultPermissions', 'CreateTableDefaultPermissions', properties.CreateTableDefaultPermissions != null ? cfn_parse.FromCloudFormation.getArray(CfnDatabasePrincipalPrivilegesPropertyFromCloudFormation)(properties.CreateTableDefaultPermissions) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('locationUri', 'LocationUri', properties.LocationUri != null ? cfn_parse.FromCloudFormation.getString(properties.LocationUri) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : undefined);\n    ret.addPropertyResult('targetDatabase', 'TargetDatabase', properties.TargetDatabase != null ? CfnDatabaseDatabaseIdentifierPropertyFromCloudFormation(properties.TargetDatabase) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDatabase {\n                                                                                                                                                                                                                                                      \n    export interface PrincipalPrivilegesProperty {\n                                                                                                                                                                                                                                                                                       \n        readonly permissions?: string[];\n                                                                                                                                                                                                                                                                            \n        readonly principal?: CfnDatabase.DataLakePrincipalProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PrincipalPrivilegesProperty`\n *\n * @param properties - the TypeScript properties of a `PrincipalPrivilegesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDatabase_PrincipalPrivilegesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('permissions', cdk.listValidator(cdk.validateString))(properties.permissions));\n    errors.collect(cdk.propertyValidator('principal', CfnDatabase_DataLakePrincipalPropertyValidator)(properties.principal));\n    return errors.wrap('supplied properties not correct for \"PrincipalPrivilegesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Database.PrincipalPrivileges` resource\n *\n * @param properties - the TypeScript properties of a `PrincipalPrivilegesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Database.PrincipalPrivileges` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDatabasePrincipalPrivilegesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDatabase_PrincipalPrivilegesPropertyValidator(properties).assertSuccess();\n    return {\n        Permissions: cdk.listMapper(cdk.stringToCloudFormation)(properties.permissions),\n        Principal: cfnDatabaseDataLakePrincipalPropertyToCloudFormation(properties.principal),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDatabasePrincipalPrivilegesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDatabase.PrincipalPrivilegesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDatabase.PrincipalPrivilegesProperty>();\n    ret.addPropertyResult('permissions', 'Permissions', properties.Permissions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Permissions) : undefined);\n    ret.addPropertyResult('principal', 'Principal', properties.Principal != null ? CfnDatabaseDataLakePrincipalPropertyFromCloudFormation(properties.Principal) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                       \nexport interface CfnDevEndpointProps {\n\n                                                                                                                                                                                                                                                    \n    readonly roleArn: string;\n\nn    readonly arguments?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                             \n    readonly endpointName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                          \n    readonly extraJarsS3Path?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly extraPythonLibsS3Path?: string;\n\nn    readonly glueVersion?: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly numberOfNodes?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly numberOfWorkers?: number;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    readonly publicKey?: string;\n\nn    readonly publicKeys?: string[];\n\n                                                                                                                                                                                                                                                                             \n    readonly securityConfiguration?: string;\n\n                                                                                                                                                                                                                                                   \n    readonly securityGroupIds?: string[];\n\n                                                                                                                                                                                                                \n    readonly subnetId?: string;\n\n                                                                                                                                                                                                            \n    readonly tags?: any;\n\nn    readonly workerType?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDevEndpointProps`\n *\n * @param properties - the TypeScript properties of a `CfnDevEndpointProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDevEndpointPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arguments', cdk.validateObject)(properties.arguments));\n    errors.collect(cdk.propertyValidator('endpointName', cdk.validateString)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('extraJarsS3Path', cdk.validateString)(properties.extraJarsS3Path));\n    errors.collect(cdk.propertyValidator('extraPythonLibsS3Path', cdk.validateString)(properties.extraPythonLibsS3Path));\n    errors.collect(cdk.propertyValidator('glueVersion', cdk.validateString)(properties.glueVersion));\n    errors.collect(cdk.propertyValidator('numberOfNodes', cdk.validateNumber)(properties.numberOfNodes));\n    errors.collect(cdk.propertyValidator('numberOfWorkers', cdk.validateNumber)(properties.numberOfWorkers));\n    errors.collect(cdk.propertyValidator('publicKey', cdk.validateString)(properties.publicKey));\n    errors.collect(cdk.propertyValidator('publicKeys', cdk.listValidator(cdk.validateString))(properties.publicKeys));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('securityConfiguration', cdk.validateString)(properties.securityConfiguration));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    errors.collect(cdk.propertyValidator('workerType', cdk.validateString)(properties.workerType));\n    return errors.wrap('supplied properties not correct for \"CfnDevEndpointProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::DevEndpoint` resource\n *\n * @param properties - the TypeScript properties of a `CfnDevEndpointProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::DevEndpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDevEndpointPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDevEndpointPropsValidator(properties).assertSuccess();\n    return {\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        Arguments: cdk.objectToCloudFormation(properties.arguments),\n        EndpointName: cdk.stringToCloudFormation(properties.endpointName),\n        ExtraJarsS3Path: cdk.stringToCloudFormation(properties.extraJarsS3Path),\n        ExtraPythonLibsS3Path: cdk.stringToCloudFormation(properties.extraPythonLibsS3Path),\n        GlueVersion: cdk.stringToCloudFormation(properties.glueVersion),\n        NumberOfNodes: cdk.numberToCloudFormation(properties.numberOfNodes),\n        NumberOfWorkers: cdk.numberToCloudFormation(properties.numberOfWorkers),\n        PublicKey: cdk.stringToCloudFormation(properties.publicKey),\n        PublicKeys: cdk.listMapper(cdk.stringToCloudFormation)(properties.publicKeys),\n        SecurityConfiguration: cdk.stringToCloudFormation(properties.securityConfiguration),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n        WorkerType: cdk.stringToCloudFormation(properties.workerType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDevEndpointPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDevEndpointProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDevEndpointProps>();\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('arguments', 'Arguments', properties.Arguments != null ? cfn_parse.FromCloudFormation.getAny(properties.Arguments) : undefined);\n    ret.addPropertyResult('endpointName', 'EndpointName', properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined);\n    ret.addPropertyResult('extraJarsS3Path', 'ExtraJarsS3Path', properties.ExtraJarsS3Path != null ? cfn_parse.FromCloudFormation.getString(properties.ExtraJarsS3Path) : undefined);\n    ret.addPropertyResult('extraPythonLibsS3Path', 'ExtraPythonLibsS3Path', properties.ExtraPythonLibsS3Path != null ? cfn_parse.FromCloudFormation.getString(properties.ExtraPythonLibsS3Path) : undefined);\n    ret.addPropertyResult('glueVersion', 'GlueVersion', properties.GlueVersion != null ? cfn_parse.FromCloudFormation.getString(properties.GlueVersion) : undefined);\n    ret.addPropertyResult('numberOfNodes', 'NumberOfNodes', properties.NumberOfNodes != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumberOfNodes) : undefined);\n    ret.addPropertyResult('numberOfWorkers', 'NumberOfWorkers', properties.NumberOfWorkers != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumberOfWorkers) : undefined);\n    ret.addPropertyResult('publicKey', 'PublicKey', properties.PublicKey != null ? cfn_parse.FromCloudFormation.getString(properties.PublicKey) : undefined);\n    ret.addPropertyResult('publicKeys', 'PublicKeys', properties.PublicKeys != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PublicKeys) : undefined);\n    ret.addPropertyResult('securityConfiguration', 'SecurityConfiguration', properties.SecurityConfiguration != null ? cfn_parse.FromCloudFormation.getString(properties.SecurityConfiguration) : undefined);\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('subnetId', 'SubnetId', properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addPropertyResult('workerType', 'WorkerType', properties.WorkerType != null ? cfn_parse.FromCloudFormation.getString(properties.WorkerType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDevEndpoint extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::DevEndpoint\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDevEndpoint {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDevEndpointPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDevEndpoint(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                    \n    public roleArn: string;\n\nn    public arguments: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                             \n    public endpointName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                          \n    public extraJarsS3Path: string | undefined;\n\nn    public extraPythonLibsS3Path: string | undefined;\n\nn    public glueVersion: string | undefined;\n\n                                                                                                                                                                                                                                                                    \n    public numberOfNodes: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                     \n    public numberOfWorkers: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    public publicKey: string | undefined;\n\nn    public publicKeys: string[] | undefined;\n\n                                                                                                                                                                                                                                                                             \n    public securityConfiguration: string | undefined;\n\n                                                                                                                                                                                                                                                   \n    public securityGroupIds: string[] | undefined;\n\n                                                                                                                                                                                                                \n    public subnetId: string | undefined;\n\n                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\nn    public workerType: string | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnDevEndpointProps) {\n        super(scope, id, { type: CfnDevEndpoint.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'roleArn', this);\n\n        this.roleArn = props.roleArn;\n        this.arguments = props.arguments;\n        this.endpointName = props.endpointName;\n        this.extraJarsS3Path = props.extraJarsS3Path;\n        this.extraPythonLibsS3Path = props.extraPythonLibsS3Path;\n        this.glueVersion = props.glueVersion;\n        this.numberOfNodes = props.numberOfNodes;\n        this.numberOfWorkers = props.numberOfWorkers;\n        this.publicKey = props.publicKey;\n        this.publicKeys = props.publicKeys;\n        this.securityConfiguration = props.securityConfiguration;\n        this.securityGroupIds = props.securityGroupIds;\n        this.subnetId = props.subnetId;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::Glue::DevEndpoint\", props.tags, { tagPropertyName: 'tags' });\n        this.workerType = props.workerType;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDevEndpoint.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            roleArn: this.roleArn,\n            arguments: this.arguments,\n            endpointName: this.endpointName,\n            extraJarsS3Path: this.extraJarsS3Path,\n            extraPythonLibsS3Path: this.extraPythonLibsS3Path,\n            glueVersion: this.glueVersion,\n            numberOfNodes: this.numberOfNodes,\n            numberOfWorkers: this.numberOfWorkers,\n            publicKey: this.publicKey,\n            publicKeys: this.publicKeys,\n            securityConfiguration: this.securityConfiguration,\n            securityGroupIds: this.securityGroupIds,\n            subnetId: this.subnetId,\n            tags: this.tags.renderTags(),\n            workerType: this.workerType,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDevEndpointPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                       \nexport interface CfnJobProps {\n\n                                                                                                                                                                                      \n    readonly command: CfnJob.JobCommandProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                      \n    readonly role: string;\n\n                                                                                                                                                                                                                               \n    readonly allocatedCapacity?: number;\n\n                                                                                                                                                                                               \n    readonly connections?: CfnJob.ConnectionsListProperty | cdk.IResolvable;\n\nn    readonly defaultArguments?: any | cdk.IResolvable;\n\n                                                                                                                                                                                      \n    readonly description?: string;\n\n                                                                                                                                                                                                                                       \n    readonly executionProperty?: CfnJob.ExecutionPropertyProperty | cdk.IResolvable;\n\nn    readonly glueVersion?: string;\n\n                                                                                                                                                                                              \n    readonly logUri?: string;\n\nn    readonly maxCapacity?: number;\n\n                                                                                                                                                                                                                               \n    readonly maxRetries?: number;\n\n                                                                                                                                                                                                 \n    readonly name?: string;\n\n                                                                                                                                                                                                                           \n    readonly notificationProperty?: CfnJob.NotificationPropertyProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                         \n    readonly numberOfWorkers?: number;\n\n                                                                                                                                                                                                                                                  \n    readonly securityConfiguration?: string;\n\n                                                                                                                                                                                    \n    readonly tags?: any;\n\n                                                                                                                                                                                                                                                                                                                                              \n    readonly timeout?: number;\n\nn    readonly workerType?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnJobProps`\n *\n * @param properties - the TypeScript properties of a `CfnJobProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnJobPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allocatedCapacity', cdk.validateNumber)(properties.allocatedCapacity));\n    errors.collect(cdk.propertyValidator('command', cdk.requiredValidator)(properties.command));\n    errors.collect(cdk.propertyValidator('command', CfnJob_JobCommandPropertyValidator)(properties.command));\n    errors.collect(cdk.propertyValidator('connections', CfnJob_ConnectionsListPropertyValidator)(properties.connections));\n    errors.collect(cdk.propertyValidator('defaultArguments', cdk.validateObject)(properties.defaultArguments));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('executionProperty', CfnJob_ExecutionPropertyPropertyValidator)(properties.executionProperty));\n    errors.collect(cdk.propertyValidator('glueVersion', cdk.validateString)(properties.glueVersion));\n    errors.collect(cdk.propertyValidator('logUri', cdk.validateString)(properties.logUri));\n    errors.collect(cdk.propertyValidator('maxCapacity', cdk.validateNumber)(properties.maxCapacity));\n    errors.collect(cdk.propertyValidator('maxRetries', cdk.validateNumber)(properties.maxRetries));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('notificationProperty', CfnJob_NotificationPropertyPropertyValidator)(properties.notificationProperty));\n    errors.collect(cdk.propertyValidator('numberOfWorkers', cdk.validateNumber)(properties.numberOfWorkers));\n    errors.collect(cdk.propertyValidator('role', cdk.requiredValidator)(properties.role));\n    errors.collect(cdk.propertyValidator('role', cdk.validateString)(properties.role));\n    errors.collect(cdk.propertyValidator('securityConfiguration', cdk.validateString)(properties.securityConfiguration));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    errors.collect(cdk.propertyValidator('timeout', cdk.validateNumber)(properties.timeout));\n    errors.collect(cdk.propertyValidator('workerType', cdk.validateString)(properties.workerType));\n    return errors.wrap('supplied properties not correct for \"CfnJobProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Job` resource\n *\n * @param properties - the TypeScript properties of a `CfnJobProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Job` resource.\n */\n// @ts-ignore TS6133\nfunction cfnJobPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnJobPropsValidator(properties).assertSuccess();\n    return {\n        Command: cfnJobJobCommandPropertyToCloudFormation(properties.command),\n        Role: cdk.stringToCloudFormation(properties.role),\n        AllocatedCapacity: cdk.numberToCloudFormation(properties.allocatedCapacity),\n        Connections: cfnJobConnectionsListPropertyToCloudFormation(properties.connections),\n        DefaultArguments: cdk.objectToCloudFormation(properties.defaultArguments),\n        Description: cdk.stringToCloudFormation(properties.description),\n        ExecutionProperty: cfnJobExecutionPropertyPropertyToCloudFormation(properties.executionProperty),\n        GlueVersion: cdk.stringToCloudFormation(properties.glueVersion),\n        LogUri: cdk.stringToCloudFormation(properties.logUri),\n        MaxCapacity: cdk.numberToCloudFormation(properties.maxCapacity),\n        MaxRetries: cdk.numberToCloudFormation(properties.maxRetries),\n        Name: cdk.stringToCloudFormation(properties.name),\n        NotificationProperty: cfnJobNotificationPropertyPropertyToCloudFormation(properties.notificationProperty),\n        NumberOfWorkers: cdk.numberToCloudFormation(properties.numberOfWorkers),\n        SecurityConfiguration: cdk.stringToCloudFormation(properties.securityConfiguration),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n        Timeout: cdk.numberToCloudFormation(properties.timeout),\n        WorkerType: cdk.stringToCloudFormation(properties.workerType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnJobPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnJobProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnJobProps>();\n    ret.addPropertyResult('command', 'Command', CfnJobJobCommandPropertyFromCloudFormation(properties.Command));\n    ret.addPropertyResult('role', 'Role', cfn_parse.FromCloudFormation.getString(properties.Role));\n    ret.addPropertyResult('allocatedCapacity', 'AllocatedCapacity', properties.AllocatedCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.AllocatedCapacity) : undefined);\n    ret.addPropertyResult('connections', 'Connections', properties.Connections != null ? CfnJobConnectionsListPropertyFromCloudFormation(properties.Connections) : undefined);\n    ret.addPropertyResult('defaultArguments', 'DefaultArguments', properties.DefaultArguments != null ? cfn_parse.FromCloudFormation.getAny(properties.DefaultArguments) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('executionProperty', 'ExecutionProperty', properties.ExecutionProperty != null ? CfnJobExecutionPropertyPropertyFromCloudFormation(properties.ExecutionProperty) : undefined);\n    ret.addPropertyResult('glueVersion', 'GlueVersion', properties.GlueVersion != null ? cfn_parse.FromCloudFormation.getString(properties.GlueVersion) : undefined);\n    ret.addPropertyResult('logUri', 'LogUri', properties.LogUri != null ? cfn_parse.FromCloudFormation.getString(properties.LogUri) : undefined);\n    ret.addPropertyResult('maxCapacity', 'MaxCapacity', properties.MaxCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxCapacity) : undefined);\n    ret.addPropertyResult('maxRetries', 'MaxRetries', properties.MaxRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxRetries) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('notificationProperty', 'NotificationProperty', properties.NotificationProperty != null ? CfnJobNotificationPropertyPropertyFromCloudFormation(properties.NotificationProperty) : undefined);\n    ret.addPropertyResult('numberOfWorkers', 'NumberOfWorkers', properties.NumberOfWorkers != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumberOfWorkers) : undefined);\n    ret.addPropertyResult('securityConfiguration', 'SecurityConfiguration', properties.SecurityConfiguration != null ? cfn_parse.FromCloudFormation.getString(properties.SecurityConfiguration) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addPropertyResult('timeout', 'Timeout', properties.Timeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.Timeout) : undefined);\n    ret.addPropertyResult('workerType', 'WorkerType', properties.WorkerType != null ? cfn_parse.FromCloudFormation.getString(properties.WorkerType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \nexport class CfnJob extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::Job\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnJob {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnJobPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnJob(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                      \n    public command: CfnJob.JobCommandProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                      \n    public role: string;\n\n                                                                                                                                                                                                                               \n    public allocatedCapacity: number | undefined;\n\n                                                                                                                                                                                               \n    public connections: CfnJob.ConnectionsListProperty | cdk.IResolvable | undefined;\n\nn    public defaultArguments: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                      \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                       \n    public executionProperty: CfnJob.ExecutionPropertyProperty | cdk.IResolvable | undefined;\n\nn    public glueVersion: string | undefined;\n\n                                                                                                                                                                                              \n    public logUri: string | undefined;\n\nn    public maxCapacity: number | undefined;\n\n                                                                                                                                                                                                                               \n    public maxRetries: number | undefined;\n\n                                                                                                                                                                                                 \n    public name: string | undefined;\n\n                                                                                                                                                                                                                           \n    public notificationProperty: CfnJob.NotificationPropertyProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                         \n    public numberOfWorkers: number | undefined;\n\n                                                                                                                                                                                                                                                  \n    public securityConfiguration: string | undefined;\n\n                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                              \n    public timeout: number | undefined;\n\nn    public workerType: string | undefined;\n\n                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnJobProps) {\n        super(scope, id, { type: CfnJob.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'command', this);\n        cdk.requireProperty(props, 'role', this);\n\n        this.command = props.command;\n        this.role = props.role;\n        this.allocatedCapacity = props.allocatedCapacity;\n        this.connections = props.connections;\n        this.defaultArguments = props.defaultArguments;\n        this.description = props.description;\n        this.executionProperty = props.executionProperty;\n        this.glueVersion = props.glueVersion;\n        this.logUri = props.logUri;\n        this.maxCapacity = props.maxCapacity;\n        this.maxRetries = props.maxRetries;\n        this.name = props.name;\n        this.notificationProperty = props.notificationProperty;\n        this.numberOfWorkers = props.numberOfWorkers;\n        this.securityConfiguration = props.securityConfiguration;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::Glue::Job\", props.tags, { tagPropertyName: 'tags' });\n        this.timeout = props.timeout;\n        this.workerType = props.workerType;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnJob.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            command: this.command,\n            role: this.role,\n            allocatedCapacity: this.allocatedCapacity,\n            connections: this.connections,\n            defaultArguments: this.defaultArguments,\n            description: this.description,\n            executionProperty: this.executionProperty,\n            glueVersion: this.glueVersion,\n            logUri: this.logUri,\n            maxCapacity: this.maxCapacity,\n            maxRetries: this.maxRetries,\n            name: this.name,\n            notificationProperty: this.notificationProperty,\n            numberOfWorkers: this.numberOfWorkers,\n            securityConfiguration: this.securityConfiguration,\n            tags: this.tags.renderTags(),\n            timeout: this.timeout,\n            workerType: this.workerType,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnJobPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnJob {\n                                                                                                                                                                                                                                               \n    export interface ConnectionsListProperty {\n                                                                                                                                                                                                                                                         \n        readonly connections?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConnectionsListProperty`\n *\n * @param properties - the TypeScript properties of a `ConnectionsListProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnJob_ConnectionsListPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connections', cdk.listValidator(cdk.validateString))(properties.connections));\n    return errors.wrap('supplied properties not correct for \"ConnectionsListProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Job.ConnectionsList` resource\n *\n * @param properties - the TypeScript properties of a `ConnectionsListProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Job.ConnectionsList` resource.\n */\n// @ts-ignore TS6133\nfunction cfnJobConnectionsListPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnJob_ConnectionsListPropertyValidator(properties).assertSuccess();\n    return {\n        Connections: cdk.listMapper(cdk.stringToCloudFormation)(properties.connections),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnJobConnectionsListPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnJob.ConnectionsListProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnJob.ConnectionsListProperty>();\n    ret.addPropertyResult('connections', 'Connections', properties.Connections != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Connections) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnJob {\n                                                                                                                                                                                                                                        \n    export interface ExecutionPropertyProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly maxConcurrentRuns?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ExecutionPropertyProperty`\n *\n * @param properties - the TypeScript properties of a `ExecutionPropertyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnJob_ExecutionPropertyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxConcurrentRuns', cdk.validateNumber)(properties.maxConcurrentRuns));\n    return errors.wrap('supplied properties not correct for \"ExecutionPropertyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Job.ExecutionProperty` resource\n *\n * @param properties - the TypeScript properties of a `ExecutionPropertyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Job.ExecutionProperty` resource.\n */\n// @ts-ignore TS6133\nfunction cfnJobExecutionPropertyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnJob_ExecutionPropertyPropertyValidator(properties).assertSuccess();\n    return {\n        MaxConcurrentRuns: cdk.numberToCloudFormation(properties.maxConcurrentRuns),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnJobExecutionPropertyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnJob.ExecutionPropertyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnJob.ExecutionPropertyProperty>();\n    ret.addPropertyResult('maxConcurrentRuns', 'MaxConcurrentRuns', properties.MaxConcurrentRuns != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxConcurrentRuns) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnJob {\n                                                                                                                                                                                                                                            \n    export interface JobCommandProperty {\n                                                                                                                                                                                                                                                                                                                                       \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                                  \n        readonly pythonVersion?: string;\n                                                                                                                                                                                                                                                                                                                    \n        readonly scriptLocation?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `JobCommandProperty`\n *\n * @param properties - the TypeScript properties of a `JobCommandProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnJob_JobCommandPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('pythonVersion', cdk.validateString)(properties.pythonVersion));\n    errors.collect(cdk.propertyValidator('scriptLocation', cdk.validateString)(properties.scriptLocation));\n    return errors.wrap('supplied properties not correct for \"JobCommandProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Job.JobCommand` resource\n *\n * @param properties - the TypeScript properties of a `JobCommandProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Job.JobCommand` resource.\n */\n// @ts-ignore TS6133\nfunction cfnJobJobCommandPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnJob_JobCommandPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        PythonVersion: cdk.stringToCloudFormation(properties.pythonVersion),\n        ScriptLocation: cdk.stringToCloudFormation(properties.scriptLocation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnJobJobCommandPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnJob.JobCommandProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnJob.JobCommandProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('pythonVersion', 'PythonVersion', properties.PythonVersion != null ? cfn_parse.FromCloudFormation.getString(properties.PythonVersion) : undefined);\n    ret.addPropertyResult('scriptLocation', 'ScriptLocation', properties.ScriptLocation != null ? cfn_parse.FromCloudFormation.getString(properties.ScriptLocation) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnJob {\n                                                                                                                                                                                                                                                                 \n    export interface NotificationPropertyProperty {\n                                                                                                                                                                                                                                                                                                                                    \n        readonly notifyDelayAfter?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NotificationPropertyProperty`\n *\n * @param properties - the TypeScript properties of a `NotificationPropertyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnJob_NotificationPropertyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('notifyDelayAfter', cdk.validateNumber)(properties.notifyDelayAfter));\n    return errors.wrap('supplied properties not correct for \"NotificationPropertyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Job.NotificationProperty` resource\n *\n * @param properties - the TypeScript properties of a `NotificationPropertyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Job.NotificationProperty` resource.\n */\n// @ts-ignore TS6133\nfunction cfnJobNotificationPropertyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnJob_NotificationPropertyPropertyValidator(properties).assertSuccess();\n    return {\n        NotifyDelayAfter: cdk.numberToCloudFormation(properties.notifyDelayAfter),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnJobNotificationPropertyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnJob.NotificationPropertyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnJob.NotificationPropertyProperty>();\n    ret.addPropertyResult('notifyDelayAfter', 'NotifyDelayAfter', properties.NotifyDelayAfter != null ? cfn_parse.FromCloudFormation.getNumber(properties.NotifyDelayAfter) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                       \nexport interface CfnMLTransformProps {\n\n                                                                                                                                                                                                                                              \n    readonly inputRecordTables: CfnMLTransform.InputRecordTablesProperty | cdk.IResolvable;\n\nn    readonly role: string;\n\n                                                                                                                                                                                                                                                                               \n    readonly transformParameters: CfnMLTransform.TransformParametersProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                           \n    readonly description?: string;\n\nn    readonly glueVersion?: string;\n\nn    readonly maxCapacity?: number;\n\n                                                                                                                                                                                                                                                                              \n    readonly maxRetries?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly numberOfWorkers?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly tags?: any;\n\n                                                                                                                                                                                                                                  \n    readonly timeout?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly transformEncryption?: CfnMLTransform.TransformEncryptionProperty | cdk.IResolvable;\n\nn    readonly workerType?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMLTransformProps`\n *\n * @param properties - the TypeScript properties of a `CfnMLTransformProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMLTransformPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('glueVersion', cdk.validateString)(properties.glueVersion));\n    errors.collect(cdk.propertyValidator('inputRecordTables', cdk.requiredValidator)(properties.inputRecordTables));\n    errors.collect(cdk.propertyValidator('inputRecordTables', CfnMLTransform_InputRecordTablesPropertyValidator)(properties.inputRecordTables));\n    errors.collect(cdk.propertyValidator('maxCapacity', cdk.validateNumber)(properties.maxCapacity));\n    errors.collect(cdk.propertyValidator('maxRetries', cdk.validateNumber)(properties.maxRetries));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('numberOfWorkers', cdk.validateNumber)(properties.numberOfWorkers));\n    errors.collect(cdk.propertyValidator('role', cdk.requiredValidator)(properties.role));\n    errors.collect(cdk.propertyValidator('role', cdk.validateString)(properties.role));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    errors.collect(cdk.propertyValidator('timeout', cdk.validateNumber)(properties.timeout));\n    errors.collect(cdk.propertyValidator('transformEncryption', CfnMLTransform_TransformEncryptionPropertyValidator)(properties.transformEncryption));\n    errors.collect(cdk.propertyValidator('transformParameters', cdk.requiredValidator)(properties.transformParameters));\n    errors.collect(cdk.propertyValidator('transformParameters', CfnMLTransform_TransformParametersPropertyValidator)(properties.transformParameters));\n    errors.collect(cdk.propertyValidator('workerType', cdk.validateString)(properties.workerType));\n    return errors.wrap('supplied properties not correct for \"CfnMLTransformProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::MLTransform` resource\n *\n * @param properties - the TypeScript properties of a `CfnMLTransformProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::MLTransform` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMLTransformPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMLTransformPropsValidator(properties).assertSuccess();\n    return {\n        InputRecordTables: cfnMLTransformInputRecordTablesPropertyToCloudFormation(properties.inputRecordTables),\n        Role: cdk.stringToCloudFormation(properties.role),\n        TransformParameters: cfnMLTransformTransformParametersPropertyToCloudFormation(properties.transformParameters),\n        Description: cdk.stringToCloudFormation(properties.description),\n        GlueVersion: cdk.stringToCloudFormation(properties.glueVersion),\n        MaxCapacity: cdk.numberToCloudFormation(properties.maxCapacity),\n        MaxRetries: cdk.numberToCloudFormation(properties.maxRetries),\n        Name: cdk.stringToCloudFormation(properties.name),\n        NumberOfWorkers: cdk.numberToCloudFormation(properties.numberOfWorkers),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n        Timeout: cdk.numberToCloudFormation(properties.timeout),\n        TransformEncryption: cfnMLTransformTransformEncryptionPropertyToCloudFormation(properties.transformEncryption),\n        WorkerType: cdk.stringToCloudFormation(properties.workerType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMLTransformPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMLTransformProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMLTransformProps>();\n    ret.addPropertyResult('inputRecordTables', 'InputRecordTables', CfnMLTransformInputRecordTablesPropertyFromCloudFormation(properties.InputRecordTables));\n    ret.addPropertyResult('role', 'Role', cfn_parse.FromCloudFormation.getString(properties.Role));\n    ret.addPropertyResult('transformParameters', 'TransformParameters', CfnMLTransformTransformParametersPropertyFromCloudFormation(properties.TransformParameters));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('glueVersion', 'GlueVersion', properties.GlueVersion != null ? cfn_parse.FromCloudFormation.getString(properties.GlueVersion) : undefined);\n    ret.addPropertyResult('maxCapacity', 'MaxCapacity', properties.MaxCapacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxCapacity) : undefined);\n    ret.addPropertyResult('maxRetries', 'MaxRetries', properties.MaxRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxRetries) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('numberOfWorkers', 'NumberOfWorkers', properties.NumberOfWorkers != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumberOfWorkers) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addPropertyResult('timeout', 'Timeout', properties.Timeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.Timeout) : undefined);\n    ret.addPropertyResult('transformEncryption', 'TransformEncryption', properties.TransformEncryption != null ? CfnMLTransformTransformEncryptionPropertyFromCloudFormation(properties.TransformEncryption) : undefined);\n    ret.addPropertyResult('workerType', 'WorkerType', properties.WorkerType != null ? cfn_parse.FromCloudFormation.getString(properties.WorkerType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                     \nexport class CfnMLTransform extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::MLTransform\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMLTransform {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMLTransformPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMLTransform(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                              \n    public inputRecordTables: CfnMLTransform.InputRecordTablesProperty | cdk.IResolvable;\n\nn    public role: string;\n\n                                                                                                                                                                                                                                                                               \n    public transformParameters: CfnMLTransform.TransformParametersProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                           \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public glueVersion: string | undefined;\n\nn    public maxCapacity: number | undefined;\n\n                                                                                                                                                                                                                                                                              \n    public maxRetries: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    public numberOfWorkers: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                  \n    public timeout: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public transformEncryption: CfnMLTransform.TransformEncryptionProperty | cdk.IResolvable | undefined;\n\nn    public workerType: string | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnMLTransformProps) {\n        super(scope, id, { type: CfnMLTransform.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'inputRecordTables', this);\n        cdk.requireProperty(props, 'role', this);\n        cdk.requireProperty(props, 'transformParameters', this);\n\n        this.inputRecordTables = props.inputRecordTables;\n        this.role = props.role;\n        this.transformParameters = props.transformParameters;\n        this.description = props.description;\n        this.glueVersion = props.glueVersion;\n        this.maxCapacity = props.maxCapacity;\n        this.maxRetries = props.maxRetries;\n        this.name = props.name;\n        this.numberOfWorkers = props.numberOfWorkers;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::Glue::MLTransform\", props.tags, { tagPropertyName: 'tags' });\n        this.timeout = props.timeout;\n        this.transformEncryption = props.transformEncryption;\n        this.workerType = props.workerType;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMLTransform.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            inputRecordTables: this.inputRecordTables,\n            role: this.role,\n            transformParameters: this.transformParameters,\n            description: this.description,\n            glueVersion: this.glueVersion,\n            maxCapacity: this.maxCapacity,\n            maxRetries: this.maxRetries,\n            name: this.name,\n            numberOfWorkers: this.numberOfWorkers,\n            tags: this.tags.renderTags(),\n            timeout: this.timeout,\n            transformEncryption: this.transformEncryption,\n            workerType: this.workerType,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMLTransformPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnMLTransform {\n                                                                                                                                                                                                                                                                                                \n    export interface FindMatchesParametersProperty {\nn        readonly accuracyCostTradeoff?: number;\nn        readonly enforceProvidedLabels?: boolean | cdk.IResolvable;\nn        readonly precisionRecallTradeoff?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly primaryKeyColumnName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FindMatchesParametersProperty`\n *\n * @param properties - the TypeScript properties of a `FindMatchesParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMLTransform_FindMatchesParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accuracyCostTradeoff', cdk.validateNumber)(properties.accuracyCostTradeoff));\n    errors.collect(cdk.propertyValidator('enforceProvidedLabels', cdk.validateBoolean)(properties.enforceProvidedLabels));\n    errors.collect(cdk.propertyValidator('precisionRecallTradeoff', cdk.validateNumber)(properties.precisionRecallTradeoff));\n    errors.collect(cdk.propertyValidator('primaryKeyColumnName', cdk.requiredValidator)(properties.primaryKeyColumnName));\n    errors.collect(cdk.propertyValidator('primaryKeyColumnName', cdk.validateString)(properties.primaryKeyColumnName));\n    return errors.wrap('supplied properties not correct for \"FindMatchesParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::MLTransform.FindMatchesParameters` resource\n *\n * @param properties - the TypeScript properties of a `FindMatchesParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::MLTransform.FindMatchesParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMLTransformFindMatchesParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMLTransform_FindMatchesParametersPropertyValidator(properties).assertSuccess();\n    return {\n        AccuracyCostTradeoff: cdk.numberToCloudFormation(properties.accuracyCostTradeoff),\n        EnforceProvidedLabels: cdk.booleanToCloudFormation(properties.enforceProvidedLabels),\n        PrecisionRecallTradeoff: cdk.numberToCloudFormation(properties.precisionRecallTradeoff),\n        PrimaryKeyColumnName: cdk.stringToCloudFormation(properties.primaryKeyColumnName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMLTransformFindMatchesParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMLTransform.FindMatchesParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMLTransform.FindMatchesParametersProperty>();\n    ret.addPropertyResult('accuracyCostTradeoff', 'AccuracyCostTradeoff', properties.AccuracyCostTradeoff != null ? cfn_parse.FromCloudFormation.getNumber(properties.AccuracyCostTradeoff) : undefined);\n    ret.addPropertyResult('enforceProvidedLabels', 'EnforceProvidedLabels', properties.EnforceProvidedLabels != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnforceProvidedLabels) : undefined);\n    ret.addPropertyResult('precisionRecallTradeoff', 'PrecisionRecallTradeoff', properties.PrecisionRecallTradeoff != null ? cfn_parse.FromCloudFormation.getNumber(properties.PrecisionRecallTradeoff) : undefined);\n    ret.addPropertyResult('primaryKeyColumnName', 'PrimaryKeyColumnName', cfn_parse.FromCloudFormation.getString(properties.PrimaryKeyColumnName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMLTransform {\n                                                                                                                                                                                                                                                                                                                      \n    export interface GlueTablesProperty {\n                                                                                                                                                                                                                                                                                                              \n        readonly catalogId?: string;\n                                                                                                                                                                                                                                                                                                                         \n        readonly connectionName?: string;\n                                                                                                                                                                                                                                                                                                            \n        readonly databaseName: string;\n                                                                                                                                                                                                                                                                                                      \n        readonly tableName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GlueTablesProperty`\n *\n * @param properties - the TypeScript properties of a `GlueTablesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMLTransform_GlueTablesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogId', cdk.validateString)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('connectionName', cdk.validateString)(properties.connectionName));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.requiredValidator)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('tableName', cdk.requiredValidator)(properties.tableName));\n    errors.collect(cdk.propertyValidator('tableName', cdk.validateString)(properties.tableName));\n    return errors.wrap('supplied properties not correct for \"GlueTablesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::MLTransform.GlueTables` resource\n *\n * @param properties - the TypeScript properties of a `GlueTablesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::MLTransform.GlueTables` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMLTransformGlueTablesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMLTransform_GlueTablesPropertyValidator(properties).assertSuccess();\n    return {\n        CatalogId: cdk.stringToCloudFormation(properties.catalogId),\n        ConnectionName: cdk.stringToCloudFormation(properties.connectionName),\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        TableName: cdk.stringToCloudFormation(properties.tableName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMLTransformGlueTablesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMLTransform.GlueTablesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMLTransform.GlueTablesProperty>();\n    ret.addPropertyResult('catalogId', 'CatalogId', properties.CatalogId != null ? cfn_parse.FromCloudFormation.getString(properties.CatalogId) : undefined);\n    ret.addPropertyResult('connectionName', 'ConnectionName', properties.ConnectionName != null ? cfn_parse.FromCloudFormation.getString(properties.ConnectionName) : undefined);\n    ret.addPropertyResult('databaseName', 'DatabaseName', cfn_parse.FromCloudFormation.getString(properties.DatabaseName));\n    ret.addPropertyResult('tableName', 'TableName', cfn_parse.FromCloudFormation.getString(properties.TableName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMLTransform {\n                                                                                                                                                                                                                                                                            \n    export interface InputRecordTablesProperty {\n                                                                                                                                                                                                                                                                                                                                \n        readonly glueTables?: Array<CfnMLTransform.GlueTablesProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputRecordTablesProperty`\n *\n * @param properties - the TypeScript properties of a `InputRecordTablesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMLTransform_InputRecordTablesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('glueTables', cdk.listValidator(CfnMLTransform_GlueTablesPropertyValidator))(properties.glueTables));\n    return errors.wrap('supplied properties not correct for \"InputRecordTablesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::MLTransform.InputRecordTables` resource\n *\n * @param properties - the TypeScript properties of a `InputRecordTablesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::MLTransform.InputRecordTables` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMLTransformInputRecordTablesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMLTransform_InputRecordTablesPropertyValidator(properties).assertSuccess();\n    return {\n        GlueTables: cdk.listMapper(cfnMLTransformGlueTablesPropertyToCloudFormation)(properties.glueTables),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMLTransformInputRecordTablesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMLTransform.InputRecordTablesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMLTransform.InputRecordTablesProperty>();\n    ret.addPropertyResult('glueTables', 'GlueTables', properties.GlueTables != null ? cfn_parse.FromCloudFormation.getArray(CfnMLTransformGlueTablesPropertyFromCloudFormation)(properties.GlueTables) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMLTransform {\n                                                                                                                                                                                                                                                                                                                           \n    export interface MLUserDataEncryptionProperty {\n                                                                                                                                                                                                                                                                                                                           \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly mlUserDataEncryptionMode: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MLUserDataEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `MLUserDataEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMLTransform_MLUserDataEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('mlUserDataEncryptionMode', cdk.requiredValidator)(properties.mlUserDataEncryptionMode));\n    errors.collect(cdk.propertyValidator('mlUserDataEncryptionMode', cdk.validateString)(properties.mlUserDataEncryptionMode));\n    return errors.wrap('supplied properties not correct for \"MLUserDataEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::MLTransform.MLUserDataEncryption` resource\n *\n * @param properties - the TypeScript properties of a `MLUserDataEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::MLTransform.MLUserDataEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMLTransformMLUserDataEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMLTransform_MLUserDataEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        MLUserDataEncryptionMode: cdk.stringToCloudFormation(properties.mlUserDataEncryptionMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMLTransformMLUserDataEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMLTransform.MLUserDataEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMLTransform.MLUserDataEncryptionProperty>();\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('mlUserDataEncryptionMode', 'MLUserDataEncryptionMode', cfn_parse.FromCloudFormation.getString(properties.MLUserDataEncryptionMode));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMLTransform {\nn    export interface TransformEncryptionProperty {\n                                                                                                                                                                                                                                                                                                                                       \n        readonly mlUserDataEncryption?: CfnMLTransform.MLUserDataEncryptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                       \n        readonly taskRunSecurityConfigurationName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TransformEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `TransformEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMLTransform_TransformEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('mlUserDataEncryption', CfnMLTransform_MLUserDataEncryptionPropertyValidator)(properties.mlUserDataEncryption));\n    errors.collect(cdk.propertyValidator('taskRunSecurityConfigurationName', cdk.validateString)(properties.taskRunSecurityConfigurationName));\n    return errors.wrap('supplied properties not correct for \"TransformEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::MLTransform.TransformEncryption` resource\n *\n * @param properties - the TypeScript properties of a `TransformEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::MLTransform.TransformEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMLTransformTransformEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMLTransform_TransformEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        MLUserDataEncryption: cfnMLTransformMLUserDataEncryptionPropertyToCloudFormation(properties.mlUserDataEncryption),\n        TaskRunSecurityConfigurationName: cdk.stringToCloudFormation(properties.taskRunSecurityConfigurationName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMLTransformTransformEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMLTransform.TransformEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMLTransform.TransformEncryptionProperty>();\n    ret.addPropertyResult('mlUserDataEncryption', 'MLUserDataEncryption', properties.MLUserDataEncryption != null ? CfnMLTransformMLUserDataEncryptionPropertyFromCloudFormation(properties.MLUserDataEncryption) : undefined);\n    ret.addPropertyResult('taskRunSecurityConfigurationName', 'TaskRunSecurityConfigurationName', properties.TaskRunSecurityConfigurationName != null ? cfn_parse.FromCloudFormation.getString(properties.TaskRunSecurityConfigurationName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMLTransform {\n                                                                                                                                                                                                                                                                                                             \n    export interface TransformParametersProperty {\n                                                                                                                                                                                                                                                                                                   \n        readonly findMatchesParameters?: CfnMLTransform.FindMatchesParametersProperty | cdk.IResolvable;\nn        readonly transformType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TransformParametersProperty`\n *\n * @param properties - the TypeScript properties of a `TransformParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMLTransform_TransformParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('findMatchesParameters', CfnMLTransform_FindMatchesParametersPropertyValidator)(properties.findMatchesParameters));\n    errors.collect(cdk.propertyValidator('transformType', cdk.requiredValidator)(properties.transformType));\n    errors.collect(cdk.propertyValidator('transformType', cdk.validateString)(properties.transformType));\n    return errors.wrap('supplied properties not correct for \"TransformParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::MLTransform.TransformParameters` resource\n *\n * @param properties - the TypeScript properties of a `TransformParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::MLTransform.TransformParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMLTransformTransformParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMLTransform_TransformParametersPropertyValidator(properties).assertSuccess();\n    return {\n        FindMatchesParameters: cfnMLTransformFindMatchesParametersPropertyToCloudFormation(properties.findMatchesParameters),\n        TransformType: cdk.stringToCloudFormation(properties.transformType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMLTransformTransformParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMLTransform.TransformParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMLTransform.TransformParametersProperty>();\n    ret.addPropertyResult('findMatchesParameters', 'FindMatchesParameters', properties.FindMatchesParameters != null ? CfnMLTransformFindMatchesParametersPropertyFromCloudFormation(properties.FindMatchesParameters) : undefined);\n    ret.addPropertyResult('transformType', 'TransformType', cfn_parse.FromCloudFormation.getString(properties.TransformType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                   \nexport interface CfnPartitionProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly catalogId: string;\n\n                                                                                                                                                                                                                                            \n    readonly databaseName: string;\n\n                                                                                                                                                                                                                                \n    readonly partitionInput: CfnPartition.PartitionInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                              \n    readonly tableName: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPartitionProps`\n *\n * @param properties - the TypeScript properties of a `CfnPartitionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPartitionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogId', cdk.requiredValidator)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('catalogId', cdk.validateString)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.requiredValidator)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('partitionInput', cdk.requiredValidator)(properties.partitionInput));\n    errors.collect(cdk.propertyValidator('partitionInput', CfnPartition_PartitionInputPropertyValidator)(properties.partitionInput));\n    errors.collect(cdk.propertyValidator('tableName', cdk.requiredValidator)(properties.tableName));\n    errors.collect(cdk.propertyValidator('tableName', cdk.validateString)(properties.tableName));\n    return errors.wrap('supplied properties not correct for \"CfnPartitionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Partition` resource\n *\n * @param properties - the TypeScript properties of a `CfnPartitionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Partition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPartitionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPartitionPropsValidator(properties).assertSuccess();\n    return {\n        CatalogId: cdk.stringToCloudFormation(properties.catalogId),\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        PartitionInput: cfnPartitionPartitionInputPropertyToCloudFormation(properties.partitionInput),\n        TableName: cdk.stringToCloudFormation(properties.tableName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPartitionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPartitionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPartitionProps>();\n    ret.addPropertyResult('catalogId', 'CatalogId', cfn_parse.FromCloudFormation.getString(properties.CatalogId));\n    ret.addPropertyResult('databaseName', 'DatabaseName', cfn_parse.FromCloudFormation.getString(properties.DatabaseName));\n    ret.addPropertyResult('partitionInput', 'PartitionInput', CfnPartitionPartitionInputPropertyFromCloudFormation(properties.PartitionInput));\n    ret.addPropertyResult('tableName', 'TableName', cfn_parse.FromCloudFormation.getString(properties.TableName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPartition extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::Partition\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPartition {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPartitionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPartition(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public catalogId: string;\n\n                                                                                                                                                                                                                                            \n    public databaseName: string;\n\n                                                                                                                                                                                                                                \n    public partitionInput: CfnPartition.PartitionInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                              \n    public tableName: string;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnPartitionProps) {\n        super(scope, id, { type: CfnPartition.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'catalogId', this);\n        cdk.requireProperty(props, 'databaseName', this);\n        cdk.requireProperty(props, 'partitionInput', this);\n        cdk.requireProperty(props, 'tableName', this);\n\n        this.catalogId = props.catalogId;\n        this.databaseName = props.databaseName;\n        this.partitionInput = props.partitionInput;\n        this.tableName = props.tableName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPartition.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            catalogId: this.catalogId,\n            databaseName: this.databaseName,\n            partitionInput: this.partitionInput,\n            tableName: this.tableName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPartitionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnPartition {\n                                                                                                                                                                                                                           \n    export interface ColumnProperty {\n                                                                                                                                                                                                                                  \n        readonly comment?: string;\n                                                                                                                                                                                                                                \n        readonly name: string;\n                                                                                                                                                                                                                                     \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ColumnProperty`\n *\n * @param properties - the TypeScript properties of a `ColumnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPartition_ColumnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('comment', cdk.validateString)(properties.comment));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ColumnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Partition.Column` resource\n *\n * @param properties - the TypeScript properties of a `ColumnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Partition.Column` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPartitionColumnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPartition_ColumnPropertyValidator(properties).assertSuccess();\n    return {\n        Comment: cdk.stringToCloudFormation(properties.comment),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPartitionColumnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPartition.ColumnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPartition.ColumnProperty>();\n    ret.addPropertyResult('comment', 'Comment', properties.Comment != null ? cfn_parse.FromCloudFormation.getString(properties.Comment) : undefined);\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPartition {\n                                                                                                                                                                                                                                               \n    export interface OrderProperty {\n                                                                                                                                                                                                                             \n        readonly column: string;\n                                                                                                                                                                                                                                                                                                             \n        readonly sortOrder?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OrderProperty`\n *\n * @param properties - the TypeScript properties of a `OrderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPartition_OrderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('column', cdk.requiredValidator)(properties.column));\n    errors.collect(cdk.propertyValidator('column', cdk.validateString)(properties.column));\n    errors.collect(cdk.propertyValidator('sortOrder', cdk.validateNumber)(properties.sortOrder));\n    return errors.wrap('supplied properties not correct for \"OrderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Partition.Order` resource\n *\n * @param properties - the TypeScript properties of a `OrderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Partition.Order` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPartitionOrderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPartition_OrderPropertyValidator(properties).assertSuccess();\n    return {\n        Column: cdk.stringToCloudFormation(properties.column),\n        SortOrder: cdk.numberToCloudFormation(properties.sortOrder),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPartitionOrderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPartition.OrderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPartition.OrderProperty>();\n    ret.addPropertyResult('column', 'Column', cfn_parse.FromCloudFormation.getString(properties.Column));\n    ret.addPropertyResult('sortOrder', 'SortOrder', properties.SortOrder != null ? cfn_parse.FromCloudFormation.getNumber(properties.SortOrder) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPartition {\n                                                                                                                                                                                                                                                                \n    export interface PartitionInputProperty {\n                                                                                                                                                                                                                                                                              \n        readonly parameters?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                  \n        readonly storageDescriptor?: CfnPartition.StorageDescriptorProperty | cdk.IResolvable;\nn        readonly values: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PartitionInputProperty`\n *\n * @param properties - the TypeScript properties of a `PartitionInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPartition_PartitionInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('parameters', cdk.validateObject)(properties.parameters));\n    errors.collect(cdk.propertyValidator('storageDescriptor', CfnPartition_StorageDescriptorPropertyValidator)(properties.storageDescriptor));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));\n    return errors.wrap('supplied properties not correct for \"PartitionInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Partition.PartitionInput` resource\n *\n * @param properties - the TypeScript properties of a `PartitionInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Partition.PartitionInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPartitionPartitionInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPartition_PartitionInputPropertyValidator(properties).assertSuccess();\n    return {\n        Parameters: cdk.objectToCloudFormation(properties.parameters),\n        StorageDescriptor: cfnPartitionStorageDescriptorPropertyToCloudFormation(properties.storageDescriptor),\n        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPartitionPartitionInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPartition.PartitionInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPartition.PartitionInputProperty>();\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : undefined);\n    ret.addPropertyResult('storageDescriptor', 'StorageDescriptor', properties.StorageDescriptor != null ? CfnPartitionStorageDescriptorPropertyFromCloudFormation(properties.StorageDescriptor) : undefined);\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getStringArray(properties.Values));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPartition {\n                                                                                                                                                                                                                                                                                                                       \n    export interface SchemaIdProperty {\n                                                                                                                                                                                                                                                                           \n        readonly registryName?: string;\n                                                                                                                                                                                                                                                                                                                              \n        readonly schemaArn?: string;\n                                                                                                                                                                                                                                                                                              \n        readonly schemaName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SchemaIdProperty`\n *\n * @param properties - the TypeScript properties of a `SchemaIdProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPartition_SchemaIdPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('registryName', cdk.validateString)(properties.registryName));\n    errors.collect(cdk.propertyValidator('schemaArn', cdk.validateString)(properties.schemaArn));\n    errors.collect(cdk.propertyValidator('schemaName', cdk.validateString)(properties.schemaName));\n    return errors.wrap('supplied properties not correct for \"SchemaIdProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Partition.SchemaId` resource\n *\n * @param properties - the TypeScript properties of a `SchemaIdProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Partition.SchemaId` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPartitionSchemaIdPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPartition_SchemaIdPropertyValidator(properties).assertSuccess();\n    return {\n        RegistryName: cdk.stringToCloudFormation(properties.registryName),\n        SchemaArn: cdk.stringToCloudFormation(properties.schemaArn),\n        SchemaName: cdk.stringToCloudFormation(properties.schemaName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPartitionSchemaIdPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPartition.SchemaIdProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPartition.SchemaIdProperty>();\n    ret.addPropertyResult('registryName', 'RegistryName', properties.RegistryName != null ? cfn_parse.FromCloudFormation.getString(properties.RegistryName) : undefined);\n    ret.addPropertyResult('schemaArn', 'SchemaArn', properties.SchemaArn != null ? cfn_parse.FromCloudFormation.getString(properties.SchemaArn) : undefined);\n    ret.addPropertyResult('schemaName', 'SchemaName', properties.SchemaName != null ? cfn_parse.FromCloudFormation.getString(properties.SchemaName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPartition {\n                                                                                                                                                                                                                                                                                       \n    export interface SchemaReferenceProperty {\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly schemaId?: CfnPartition.SchemaIdProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly schemaVersionId?: string;\n                                                                                                                                                                                                                                                                        \n        readonly schemaVersionNumber?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SchemaReferenceProperty`\n *\n * @param properties - the TypeScript properties of a `SchemaReferenceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPartition_SchemaReferencePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('schemaId', CfnPartition_SchemaIdPropertyValidator)(properties.schemaId));\n    errors.collect(cdk.propertyValidator('schemaVersionId', cdk.validateString)(properties.schemaVersionId));\n    errors.collect(cdk.propertyValidator('schemaVersionNumber', cdk.validateNumber)(properties.schemaVersionNumber));\n    return errors.wrap('supplied properties not correct for \"SchemaReferenceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Partition.SchemaReference` resource\n *\n * @param properties - the TypeScript properties of a `SchemaReferenceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Partition.SchemaReference` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPartitionSchemaReferencePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPartition_SchemaReferencePropertyValidator(properties).assertSuccess();\n    return {\n        SchemaId: cfnPartitionSchemaIdPropertyToCloudFormation(properties.schemaId),\n        SchemaVersionId: cdk.stringToCloudFormation(properties.schemaVersionId),\n        SchemaVersionNumber: cdk.numberToCloudFormation(properties.schemaVersionNumber),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPartitionSchemaReferencePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPartition.SchemaReferenceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPartition.SchemaReferenceProperty>();\n    ret.addPropertyResult('schemaId', 'SchemaId', properties.SchemaId != null ? CfnPartitionSchemaIdPropertyFromCloudFormation(properties.SchemaId) : undefined);\n    ret.addPropertyResult('schemaVersionId', 'SchemaVersionId', properties.SchemaVersionId != null ? cfn_parse.FromCloudFormation.getString(properties.SchemaVersionId) : undefined);\n    ret.addPropertyResult('schemaVersionNumber', 'SchemaVersionNumber', properties.SchemaVersionNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.SchemaVersionNumber) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPartition {\n                                                                                                                                                                                                                                                                                                                \n    export interface SerdeInfoProperty {\n                                                                                                                                                                                                                              \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                       \n        readonly parameters?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly serializationLibrary?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SerdeInfoProperty`\n *\n * @param properties - the TypeScript properties of a `SerdeInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPartition_SerdeInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('parameters', cdk.validateObject)(properties.parameters));\n    errors.collect(cdk.propertyValidator('serializationLibrary', cdk.validateString)(properties.serializationLibrary));\n    return errors.wrap('supplied properties not correct for \"SerdeInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Partition.SerdeInfo` resource\n *\n * @param properties - the TypeScript properties of a `SerdeInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Partition.SerdeInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPartitionSerdeInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPartition_SerdeInfoPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Parameters: cdk.objectToCloudFormation(properties.parameters),\n        SerializationLibrary: cdk.stringToCloudFormation(properties.serializationLibrary),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPartitionSerdeInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPartition.SerdeInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPartition.SerdeInfoProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : undefined);\n    ret.addPropertyResult('serializationLibrary', 'SerializationLibrary', properties.SerializationLibrary != null ? cfn_parse.FromCloudFormation.getString(properties.SerializationLibrary) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPartition {\n                                                                                                                                                                                                                                                                                                        \n    export interface SkewedInfoProperty {\n                                                                                                                                                                                                                                                                                 \n        readonly skewedColumnNames?: string[];\n                                                                                                                                                                                                                                                                                                   \n        readonly skewedColumnValueLocationMaps?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                  \n        readonly skewedColumnValues?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SkewedInfoProperty`\n *\n * @param properties - the TypeScript properties of a `SkewedInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPartition_SkewedInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('skewedColumnNames', cdk.listValidator(cdk.validateString))(properties.skewedColumnNames));\n    errors.collect(cdk.propertyValidator('skewedColumnValueLocationMaps', cdk.validateObject)(properties.skewedColumnValueLocationMaps));\n    errors.collect(cdk.propertyValidator('skewedColumnValues', cdk.listValidator(cdk.validateString))(properties.skewedColumnValues));\n    return errors.wrap('supplied properties not correct for \"SkewedInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Partition.SkewedInfo` resource\n *\n * @param properties - the TypeScript properties of a `SkewedInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Partition.SkewedInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPartitionSkewedInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPartition_SkewedInfoPropertyValidator(properties).assertSuccess();\n    return {\n        SkewedColumnNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.skewedColumnNames),\n        SkewedColumnValueLocationMaps: cdk.objectToCloudFormation(properties.skewedColumnValueLocationMaps),\n        SkewedColumnValues: cdk.listMapper(cdk.stringToCloudFormation)(properties.skewedColumnValues),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPartitionSkewedInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPartition.SkewedInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPartition.SkewedInfoProperty>();\n    ret.addPropertyResult('skewedColumnNames', 'SkewedColumnNames', properties.SkewedColumnNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SkewedColumnNames) : undefined);\n    ret.addPropertyResult('skewedColumnValueLocationMaps', 'SkewedColumnValueLocationMaps', properties.SkewedColumnValueLocationMaps != null ? cfn_parse.FromCloudFormation.getAny(properties.SkewedColumnValueLocationMaps) : undefined);\n    ret.addPropertyResult('skewedColumnValues', 'SkewedColumnValues', properties.SkewedColumnValues != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SkewedColumnValues) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPartition {\n                                                                                                                                                                                                                                                            \n    export interface StorageDescriptorProperty {\n                                                                                                                                                                                                                                                                                                                                \n        readonly bucketColumns?: string[];\n                                                                                                                                                                                                                                                                    \n        readonly columns?: Array<CfnPartition.ColumnProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                   \n        readonly compressed?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly inputFormat?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly location?: string;\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly numberOfBuckets?: number;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly outputFormat?: string;\n                                                                                                                                                                                                                                                                                 \n        readonly parameters?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly schemaReference?: CfnPartition.SchemaReferenceProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                       \n        readonly serdeInfo?: CfnPartition.SerdeInfoProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                  \n        readonly skewedInfo?: CfnPartition.SkewedInfoProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                \n        readonly sortColumns?: Array<CfnPartition.OrderProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                      \n        readonly storedAsSubDirectories?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StorageDescriptorProperty`\n *\n * @param properties - the TypeScript properties of a `StorageDescriptorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPartition_StorageDescriptorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketColumns', cdk.listValidator(cdk.validateString))(properties.bucketColumns));\n    errors.collect(cdk.propertyValidator('columns', cdk.listValidator(CfnPartition_ColumnPropertyValidator))(properties.columns));\n    errors.collect(cdk.propertyValidator('compressed', cdk.validateBoolean)(properties.compressed));\n    errors.collect(cdk.propertyValidator('inputFormat', cdk.validateString)(properties.inputFormat));\n    errors.collect(cdk.propertyValidator('location', cdk.validateString)(properties.location));\n    errors.collect(cdk.propertyValidator('numberOfBuckets', cdk.validateNumber)(properties.numberOfBuckets));\n    errors.collect(cdk.propertyValidator('outputFormat', cdk.validateString)(properties.outputFormat));\n    errors.collect(cdk.propertyValidator('parameters', cdk.validateObject)(properties.parameters));\n    errors.collect(cdk.propertyValidator('schemaReference', CfnPartition_SchemaReferencePropertyValidator)(properties.schemaReference));\n    errors.collect(cdk.propertyValidator('serdeInfo', CfnPartition_SerdeInfoPropertyValidator)(properties.serdeInfo));\n    errors.collect(cdk.propertyValidator('skewedInfo', CfnPartition_SkewedInfoPropertyValidator)(properties.skewedInfo));\n    errors.collect(cdk.propertyValidator('sortColumns', cdk.listValidator(CfnPartition_OrderPropertyValidator))(properties.sortColumns));\n    errors.collect(cdk.propertyValidator('storedAsSubDirectories', cdk.validateBoolean)(properties.storedAsSubDirectories));\n    return errors.wrap('supplied properties not correct for \"StorageDescriptorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Partition.StorageDescriptor` resource\n *\n * @param properties - the TypeScript properties of a `StorageDescriptorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Partition.StorageDescriptor` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPartitionStorageDescriptorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPartition_StorageDescriptorPropertyValidator(properties).assertSuccess();\n    return {\n        BucketColumns: cdk.listMapper(cdk.stringToCloudFormation)(properties.bucketColumns),\n        Columns: cdk.listMapper(cfnPartitionColumnPropertyToCloudFormation)(properties.columns),\n        Compressed: cdk.booleanToCloudFormation(properties.compressed),\n        InputFormat: cdk.stringToCloudFormation(properties.inputFormat),\n        Location: cdk.stringToCloudFormation(properties.location),\n        NumberOfBuckets: cdk.numberToCloudFormation(properties.numberOfBuckets),\n        OutputFormat: cdk.stringToCloudFormation(properties.outputFormat),\n        Parameters: cdk.objectToCloudFormation(properties.parameters),\n        SchemaReference: cfnPartitionSchemaReferencePropertyToCloudFormation(properties.schemaReference),\n        SerdeInfo: cfnPartitionSerdeInfoPropertyToCloudFormation(properties.serdeInfo),\n        SkewedInfo: cfnPartitionSkewedInfoPropertyToCloudFormation(properties.skewedInfo),\n        SortColumns: cdk.listMapper(cfnPartitionOrderPropertyToCloudFormation)(properties.sortColumns),\n        StoredAsSubDirectories: cdk.booleanToCloudFormation(properties.storedAsSubDirectories),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPartitionStorageDescriptorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPartition.StorageDescriptorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPartition.StorageDescriptorProperty>();\n    ret.addPropertyResult('bucketColumns', 'BucketColumns', properties.BucketColumns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.BucketColumns) : undefined);\n    ret.addPropertyResult('columns', 'Columns', properties.Columns != null ? cfn_parse.FromCloudFormation.getArray(CfnPartitionColumnPropertyFromCloudFormation)(properties.Columns) : undefined);\n    ret.addPropertyResult('compressed', 'Compressed', properties.Compressed != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Compressed) : undefined);\n    ret.addPropertyResult('inputFormat', 'InputFormat', properties.InputFormat != null ? cfn_parse.FromCloudFormation.getString(properties.InputFormat) : undefined);\n    ret.addPropertyResult('location', 'Location', properties.Location != null ? cfn_parse.FromCloudFormation.getString(properties.Location) : undefined);\n    ret.addPropertyResult('numberOfBuckets', 'NumberOfBuckets', properties.NumberOfBuckets != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumberOfBuckets) : undefined);\n    ret.addPropertyResult('outputFormat', 'OutputFormat', properties.OutputFormat != null ? cfn_parse.FromCloudFormation.getString(properties.OutputFormat) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : undefined);\n    ret.addPropertyResult('schemaReference', 'SchemaReference', properties.SchemaReference != null ? CfnPartitionSchemaReferencePropertyFromCloudFormation(properties.SchemaReference) : undefined);\n    ret.addPropertyResult('serdeInfo', 'SerdeInfo', properties.SerdeInfo != null ? CfnPartitionSerdeInfoPropertyFromCloudFormation(properties.SerdeInfo) : undefined);\n    ret.addPropertyResult('skewedInfo', 'SkewedInfo', properties.SkewedInfo != null ? CfnPartitionSkewedInfoPropertyFromCloudFormation(properties.SkewedInfo) : undefined);\n    ret.addPropertyResult('sortColumns', 'SortColumns', properties.SortColumns != null ? cfn_parse.FromCloudFormation.getArray(CfnPartitionOrderPropertyFromCloudFormation)(properties.SortColumns) : undefined);\n    ret.addPropertyResult('storedAsSubDirectories', 'StoredAsSubDirectories', properties.StoredAsSubDirectories != null ? cfn_parse.FromCloudFormation.getBoolean(properties.StoredAsSubDirectories) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                 \nexport interface CfnRegistryProps {\n\n                                                                                                                                                                                         \n    readonly name: string;\n\n                                                                                                                                                                                                     \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRegistryProps`\n *\n * @param properties - the TypeScript properties of a `CfnRegistryProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRegistryPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnRegistryProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Registry` resource\n *\n * @param properties - the TypeScript properties of a `CfnRegistryProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Registry` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRegistryPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRegistryPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRegistryPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRegistryProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRegistryProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                   \nexport class CfnRegistry extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::Registry\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRegistry {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRegistryPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRegistry(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                          \n    public readonly attrArn: string;\n\n                                                                                                                                                                                         \n    public name: string;\n\n                                                                                                                                                                                                     \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnRegistryProps) {\n        super(scope, id, { type: CfnRegistry.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.name = props.name;\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Glue::Registry\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRegistry.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRegistryPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                             \nexport interface CfnSchemaProps {\n\n                                                                                                                                                                                                          \n    readonly compatibility: string;\n\n                                                                                                                                                                                                                                               \n    readonly dataFormat: string;\n\n                                                                                                                                                                                                                                                                                                                       \n    readonly name: string;\n\n                                                                                                                                                                                                                                               \n    readonly schemaDefinition: string;\n\n                                                                                                                                                                                                                                                                                                                  \n    readonly checkpointVersion?: CfnSchema.SchemaVersionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                         \n    readonly description?: string;\n\n                                                                                                                                                                                                      \n    readonly registry?: CfnSchema.RegistryProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSchemaProps`\n *\n * @param properties - the TypeScript properties of a `CfnSchemaProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSchemaPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('checkpointVersion', CfnSchema_SchemaVersionPropertyValidator)(properties.checkpointVersion));\n    errors.collect(cdk.propertyValidator('compatibility', cdk.requiredValidator)(properties.compatibility));\n    errors.collect(cdk.propertyValidator('compatibility', cdk.validateString)(properties.compatibility));\n    errors.collect(cdk.propertyValidator('dataFormat', cdk.requiredValidator)(properties.dataFormat));\n    errors.collect(cdk.propertyValidator('dataFormat', cdk.validateString)(properties.dataFormat));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('registry', CfnSchema_RegistryPropertyValidator)(properties.registry));\n    errors.collect(cdk.propertyValidator('schemaDefinition', cdk.requiredValidator)(properties.schemaDefinition));\n    errors.collect(cdk.propertyValidator('schemaDefinition', cdk.validateString)(properties.schemaDefinition));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnSchemaProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Schema` resource\n *\n * @param properties - the TypeScript properties of a `CfnSchemaProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Schema` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSchemaPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSchemaPropsValidator(properties).assertSuccess();\n    return {\n        Compatibility: cdk.stringToCloudFormation(properties.compatibility),\n        DataFormat: cdk.stringToCloudFormation(properties.dataFormat),\n        Name: cdk.stringToCloudFormation(properties.name),\n        SchemaDefinition: cdk.stringToCloudFormation(properties.schemaDefinition),\n        CheckpointVersion: cfnSchemaSchemaVersionPropertyToCloudFormation(properties.checkpointVersion),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Registry: cfnSchemaRegistryPropertyToCloudFormation(properties.registry),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSchemaPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSchemaProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSchemaProps>();\n    ret.addPropertyResult('compatibility', 'Compatibility', cfn_parse.FromCloudFormation.getString(properties.Compatibility));\n    ret.addPropertyResult('dataFormat', 'DataFormat', cfn_parse.FromCloudFormation.getString(properties.DataFormat));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('schemaDefinition', 'SchemaDefinition', cfn_parse.FromCloudFormation.getString(properties.SchemaDefinition));\n    ret.addPropertyResult('checkpointVersion', 'CheckpointVersion', properties.CheckpointVersion != null ? CfnSchemaSchemaVersionPropertyFromCloudFormation(properties.CheckpointVersion) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('registry', 'Registry', properties.Registry != null ? CfnSchemaRegistryPropertyFromCloudFormation(properties.Registry) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                               \nexport class CfnSchema extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::Schema\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSchema {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSchemaPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSchema(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                        \n    public readonly attrArn: string;\n\n                                                                             \n    public readonly attrInitialSchemaVersionId: string;\n\n                                                                                                                                                                                                          \n    public compatibility: string;\n\n                                                                                                                                                                                                                                               \n    public dataFormat: string;\n\n                                                                                                                                                                                                                                                                                                                       \n    public name: string;\n\n                                                                                                                                                                                                                                               \n    public schemaDefinition: string;\n\n                                                                                                                                                                                                                                                                                                                  \n    public checkpointVersion: CfnSchema.SchemaVersionProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                         \n    public description: string | undefined;\n\n                                                                                                                                                                                                      \n    public registry: CfnSchema.RegistryProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnSchemaProps) {\n        super(scope, id, { type: CfnSchema.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'compatibility', this);\n        cdk.requireProperty(props, 'dataFormat', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'schemaDefinition', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrInitialSchemaVersionId = cdk.Token.asString(this.getAtt('InitialSchemaVersionId'));\n\n        this.compatibility = props.compatibility;\n        this.dataFormat = props.dataFormat;\n        this.name = props.name;\n        this.schemaDefinition = props.schemaDefinition;\n        this.checkpointVersion = props.checkpointVersion;\n        this.description = props.description;\n        this.registry = props.registry;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Glue::Schema\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSchema.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            compatibility: this.compatibility,\n            dataFormat: this.dataFormat,\n            name: this.name,\n            schemaDefinition: this.schemaDefinition,\n            checkpointVersion: this.checkpointVersion,\n            description: this.description,\n            registry: this.registry,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSchemaPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnSchema {\n                                                                                                                                                                                                                                                        \n    export interface RegistryProperty {\n                                                                                                                                                                                                                                                  \n        readonly arn?: string;\n                                                                                                                                                                                                                             \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RegistryProperty`\n *\n * @param properties - the TypeScript properties of a `RegistryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSchema_RegistryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"RegistryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Schema.Registry` resource\n *\n * @param properties - the TypeScript properties of a `RegistryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Schema.Registry` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSchemaRegistryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSchema_RegistryPropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSchemaRegistryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSchema.RegistryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSchema.RegistryProperty>();\n    ret.addPropertyResult('arn', 'Arn', properties.Arn != null ? cfn_parse.FromCloudFormation.getString(properties.Arn) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSchema {\n                                                                                                                                                                                                                                          \n    export interface SchemaVersionProperty {\n                                                                                                                                                                                                                                                                                \n        readonly isLatest?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                        \n        readonly versionNumber?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SchemaVersionProperty`\n *\n * @param properties - the TypeScript properties of a `SchemaVersionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSchema_SchemaVersionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('isLatest', cdk.validateBoolean)(properties.isLatest));\n    errors.collect(cdk.propertyValidator('versionNumber', cdk.validateNumber)(properties.versionNumber));\n    return errors.wrap('supplied properties not correct for \"SchemaVersionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Schema.SchemaVersion` resource\n *\n * @param properties - the TypeScript properties of a `SchemaVersionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Schema.SchemaVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSchemaSchemaVersionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSchema_SchemaVersionPropertyValidator(properties).assertSuccess();\n    return {\n        IsLatest: cdk.booleanToCloudFormation(properties.isLatest),\n        VersionNumber: cdk.numberToCloudFormation(properties.versionNumber),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSchemaSchemaVersionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSchema.SchemaVersionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSchema.SchemaVersionProperty>();\n    ret.addPropertyResult('isLatest', 'IsLatest', properties.IsLatest != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsLatest) : undefined);\n    ret.addPropertyResult('versionNumber', 'VersionNumber', properties.VersionNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.VersionNumber) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                           \nexport interface CfnSchemaVersionProps {\n\n                                                                                                                                                                                                                        \n    readonly schema: CfnSchemaVersion.SchemaProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                   \n    readonly schemaDefinition: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSchemaVersionProps`\n *\n * @param properties - the TypeScript properties of a `CfnSchemaVersionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSchemaVersionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('schema', cdk.requiredValidator)(properties.schema));\n    errors.collect(cdk.propertyValidator('schema', CfnSchemaVersion_SchemaPropertyValidator)(properties.schema));\n    errors.collect(cdk.propertyValidator('schemaDefinition', cdk.requiredValidator)(properties.schemaDefinition));\n    errors.collect(cdk.propertyValidator('schemaDefinition', cdk.validateString)(properties.schemaDefinition));\n    return errors.wrap('supplied properties not correct for \"CfnSchemaVersionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::SchemaVersion` resource\n *\n * @param properties - the TypeScript properties of a `CfnSchemaVersionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::SchemaVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSchemaVersionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSchemaVersionPropsValidator(properties).assertSuccess();\n    return {\n        Schema: cfnSchemaVersionSchemaPropertyToCloudFormation(properties.schema),\n        SchemaDefinition: cdk.stringToCloudFormation(properties.schemaDefinition),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSchemaVersionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSchemaVersionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSchemaVersionProps>();\n    ret.addPropertyResult('schema', 'Schema', CfnSchemaVersionSchemaPropertyFromCloudFormation(properties.Schema));\n    ret.addPropertyResult('schemaDefinition', 'SchemaDefinition', cfn_parse.FromCloudFormation.getString(properties.SchemaDefinition));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                              \nexport class CfnSchemaVersion extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::SchemaVersion\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSchemaVersion {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSchemaVersionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSchemaVersion(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                \n    public readonly attrVersionId: string;\n\n                                                                                                                                                                                                                        \n    public schema: CfnSchemaVersion.SchemaProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                   \n    public schemaDefinition: string;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnSchemaVersionProps) {\n        super(scope, id, { type: CfnSchemaVersion.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'schema', this);\n        cdk.requireProperty(props, 'schemaDefinition', this);\n        this.attrVersionId = cdk.Token.asString(this.getAtt('VersionId'));\n\n        this.schema = props.schema;\n        this.schemaDefinition = props.schemaDefinition;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSchemaVersion.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            schema: this.schema,\n            schemaDefinition: this.schemaDefinition,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSchemaVersionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnSchemaVersion {\n                                                                                                                                                                                                                                                                                                                                          \n    export interface SchemaProperty {\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly registryName?: string;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly schemaArn?: string;\n                                                                                                                                                                                                                                                                                                                       \n        readonly schemaName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SchemaProperty`\n *\n * @param properties - the TypeScript properties of a `SchemaProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSchemaVersion_SchemaPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('registryName', cdk.validateString)(properties.registryName));\n    errors.collect(cdk.propertyValidator('schemaArn', cdk.validateString)(properties.schemaArn));\n    errors.collect(cdk.propertyValidator('schemaName', cdk.validateString)(properties.schemaName));\n    return errors.wrap('supplied properties not correct for \"SchemaProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::SchemaVersion.Schema` resource\n *\n * @param properties - the TypeScript properties of a `SchemaProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::SchemaVersion.Schema` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSchemaVersionSchemaPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSchemaVersion_SchemaPropertyValidator(properties).assertSuccess();\n    return {\n        RegistryName: cdk.stringToCloudFormation(properties.registryName),\n        SchemaArn: cdk.stringToCloudFormation(properties.schemaArn),\n        SchemaName: cdk.stringToCloudFormation(properties.schemaName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSchemaVersionSchemaPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSchemaVersion.SchemaProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSchemaVersion.SchemaProperty>();\n    ret.addPropertyResult('registryName', 'RegistryName', properties.RegistryName != null ? cfn_parse.FromCloudFormation.getString(properties.RegistryName) : undefined);\n    ret.addPropertyResult('schemaArn', 'SchemaArn', properties.SchemaArn != null ? cfn_parse.FromCloudFormation.getString(properties.SchemaArn) : undefined);\n    ret.addPropertyResult('schemaName', 'SchemaName', properties.SchemaName != null ? cfn_parse.FromCloudFormation.getString(properties.SchemaName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                           \nexport interface CfnSchemaVersionMetadataProps {\n\n                                                                                                                                                                                                                                         \n    readonly key: string;\n\n                                                                                                                                                                                                                                      \n    readonly schemaVersionId: string;\n\n                                                                                                                                                                                                                                \n    readonly value: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSchemaVersionMetadataProps`\n *\n * @param properties - the TypeScript properties of a `CfnSchemaVersionMetadataProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSchemaVersionMetadataPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('schemaVersionId', cdk.requiredValidator)(properties.schemaVersionId));\n    errors.collect(cdk.propertyValidator('schemaVersionId', cdk.validateString)(properties.schemaVersionId));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"CfnSchemaVersionMetadataProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::SchemaVersionMetadata` resource\n *\n * @param properties - the TypeScript properties of a `CfnSchemaVersionMetadataProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::SchemaVersionMetadata` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSchemaVersionMetadataPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSchemaVersionMetadataPropsValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        SchemaVersionId: cdk.stringToCloudFormation(properties.schemaVersionId),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSchemaVersionMetadataPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSchemaVersionMetadataProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSchemaVersionMetadataProps>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('schemaVersionId', 'SchemaVersionId', cfn_parse.FromCloudFormation.getString(properties.SchemaVersionId));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnSchemaVersionMetadata extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::SchemaVersionMetadata\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSchemaVersionMetadata {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSchemaVersionMetadataPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSchemaVersionMetadata(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                         \n    public key: string;\n\n                                                                                                                                                                                                                                      \n    public schemaVersionId: string;\n\n                                                                                                                                                                                                                                \n    public value: string;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnSchemaVersionMetadataProps) {\n        super(scope, id, { type: CfnSchemaVersionMetadata.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'key', this);\n        cdk.requireProperty(props, 'schemaVersionId', this);\n        cdk.requireProperty(props, 'value', this);\n\n        this.key = props.key;\n        this.schemaVersionId = props.schemaVersionId;\n        this.value = props.value;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSchemaVersionMetadata.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            key: this.key,\n            schemaVersionId: this.schemaVersionId,\n            value: this.value,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSchemaVersionMetadataPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                           \nexport interface CfnSecurityConfigurationProps {\n\n                                                                                                                                                                                                                                                                                      \n    readonly encryptionConfiguration: CfnSecurityConfiguration.EncryptionConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                 \n    readonly name: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSecurityConfigurationProps`\n *\n * @param properties - the TypeScript properties of a `CfnSecurityConfigurationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSecurityConfigurationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encryptionConfiguration', cdk.requiredValidator)(properties.encryptionConfiguration));\n    errors.collect(cdk.propertyValidator('encryptionConfiguration', CfnSecurityConfiguration_EncryptionConfigurationPropertyValidator)(properties.encryptionConfiguration));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CfnSecurityConfigurationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::SecurityConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CfnSecurityConfigurationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::SecurityConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSecurityConfigurationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSecurityConfigurationPropsValidator(properties).assertSuccess();\n    return {\n        EncryptionConfiguration: cfnSecurityConfigurationEncryptionConfigurationPropertyToCloudFormation(properties.encryptionConfiguration),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSecurityConfigurationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSecurityConfigurationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSecurityConfigurationProps>();\n    ret.addPropertyResult('encryptionConfiguration', 'EncryptionConfiguration', CfnSecurityConfigurationEncryptionConfigurationPropertyFromCloudFormation(properties.EncryptionConfiguration));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSecurityConfiguration extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::SecurityConfiguration\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSecurityConfiguration {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSecurityConfigurationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSecurityConfiguration(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                      \n    public encryptionConfiguration: CfnSecurityConfiguration.EncryptionConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                 \n    public name: string;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnSecurityConfigurationProps) {\n        super(scope, id, { type: CfnSecurityConfiguration.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'encryptionConfiguration', this);\n        cdk.requireProperty(props, 'name', this);\n\n        this.encryptionConfiguration = props.encryptionConfiguration;\n        this.name = props.name;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSecurityConfiguration.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            encryptionConfiguration: this.encryptionConfiguration,\n            name: this.name,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSecurityConfigurationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnSecurityConfiguration {\n                                                                                                                                                                                                                                                                                       \n    export interface CloudWatchEncryptionProperty {\n                                                                                                                                                                                                                                                                                                                             \n        readonly cloudWatchEncryptionMode?: string;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly kmsKeyArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CloudWatchEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `CloudWatchEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSecurityConfiguration_CloudWatchEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchEncryptionMode', cdk.validateString)(properties.cloudWatchEncryptionMode));\n    errors.collect(cdk.propertyValidator('kmsKeyArn', cdk.validateString)(properties.kmsKeyArn));\n    return errors.wrap('supplied properties not correct for \"CloudWatchEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::SecurityConfiguration.CloudWatchEncryption` resource\n *\n * @param properties - the TypeScript properties of a `CloudWatchEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::SecurityConfiguration.CloudWatchEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSecurityConfigurationCloudWatchEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSecurityConfiguration_CloudWatchEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        CloudWatchEncryptionMode: cdk.stringToCloudFormation(properties.cloudWatchEncryptionMode),\n        KmsKeyArn: cdk.stringToCloudFormation(properties.kmsKeyArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSecurityConfigurationCloudWatchEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSecurityConfiguration.CloudWatchEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSecurityConfiguration.CloudWatchEncryptionProperty>();\n    ret.addPropertyResult('cloudWatchEncryptionMode', 'CloudWatchEncryptionMode', properties.CloudWatchEncryptionMode != null ? cfn_parse.FromCloudFormation.getString(properties.CloudWatchEncryptionMode) : undefined);\n    ret.addPropertyResult('kmsKeyArn', 'KmsKeyArn', properties.KmsKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSecurityConfiguration {\n                                                                                                                                                                                                                                                                       \n    export interface EncryptionConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                   \n        readonly cloudWatchEncryption?: CfnSecurityConfiguration.CloudWatchEncryptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly jobBookmarksEncryption?: CfnSecurityConfiguration.JobBookmarksEncryptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly s3Encryptions?: Array<CfnSecurityConfiguration.S3EncryptionProperty | cdk.IResolvable> | cdk.IResolvable | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EncryptionConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `EncryptionConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSecurityConfiguration_EncryptionConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchEncryption', CfnSecurityConfiguration_CloudWatchEncryptionPropertyValidator)(properties.cloudWatchEncryption));\n    errors.collect(cdk.propertyValidator('jobBookmarksEncryption', CfnSecurityConfiguration_JobBookmarksEncryptionPropertyValidator)(properties.jobBookmarksEncryption));\n    errors.collect(cdk.propertyValidator('s3Encryptions', cdk.listValidator(CfnSecurityConfiguration_S3EncryptionPropertyValidator))(properties.s3Encryptions));\n    return errors.wrap('supplied properties not correct for \"EncryptionConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::SecurityConfiguration.EncryptionConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `EncryptionConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::SecurityConfiguration.EncryptionConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSecurityConfigurationEncryptionConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSecurityConfiguration_EncryptionConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        CloudWatchEncryption: cfnSecurityConfigurationCloudWatchEncryptionPropertyToCloudFormation(properties.cloudWatchEncryption),\n        JobBookmarksEncryption: cfnSecurityConfigurationJobBookmarksEncryptionPropertyToCloudFormation(properties.jobBookmarksEncryption),\n        S3Encryptions: cdk.listMapper(cfnSecurityConfigurationS3EncryptionPropertyToCloudFormation)(properties.s3Encryptions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSecurityConfigurationEncryptionConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSecurityConfiguration.EncryptionConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSecurityConfiguration.EncryptionConfigurationProperty>();\n    ret.addPropertyResult('cloudWatchEncryption', 'CloudWatchEncryption', properties.CloudWatchEncryption != null ? CfnSecurityConfigurationCloudWatchEncryptionPropertyFromCloudFormation(properties.CloudWatchEncryption) : undefined);\n    ret.addPropertyResult('jobBookmarksEncryption', 'JobBookmarksEncryption', properties.JobBookmarksEncryption != null ? CfnSecurityConfigurationJobBookmarksEncryptionPropertyFromCloudFormation(properties.JobBookmarksEncryption) : undefined);\n    ret.addPropertyResult('s3Encryptions', 'S3Encryptions', properties.S3Encryptions != null ? cfn_parse.FromCloudFormation.getArray(CfnSecurityConfigurationS3EncryptionPropertyFromCloudFormation)(properties.S3Encryptions) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSecurityConfiguration {\n                                                                                                                                                                                                                                                                                    \n    export interface JobBookmarksEncryptionProperty {\n                                                                                                                                                                                                                                                                                                                                      \n        readonly jobBookmarksEncryptionMode?: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly kmsKeyArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `JobBookmarksEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `JobBookmarksEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSecurityConfiguration_JobBookmarksEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('jobBookmarksEncryptionMode', cdk.validateString)(properties.jobBookmarksEncryptionMode));\n    errors.collect(cdk.propertyValidator('kmsKeyArn', cdk.validateString)(properties.kmsKeyArn));\n    return errors.wrap('supplied properties not correct for \"JobBookmarksEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::SecurityConfiguration.JobBookmarksEncryption` resource\n *\n * @param properties - the TypeScript properties of a `JobBookmarksEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::SecurityConfiguration.JobBookmarksEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSecurityConfigurationJobBookmarksEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSecurityConfiguration_JobBookmarksEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        JobBookmarksEncryptionMode: cdk.stringToCloudFormation(properties.jobBookmarksEncryptionMode),\n        KmsKeyArn: cdk.stringToCloudFormation(properties.kmsKeyArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSecurityConfigurationJobBookmarksEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSecurityConfiguration.JobBookmarksEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSecurityConfiguration.JobBookmarksEncryptionProperty>();\n    ret.addPropertyResult('jobBookmarksEncryptionMode', 'JobBookmarksEncryptionMode', properties.JobBookmarksEncryptionMode != null ? cfn_parse.FromCloudFormation.getString(properties.JobBookmarksEncryptionMode) : undefined);\n    ret.addPropertyResult('kmsKeyArn', 'KmsKeyArn', properties.KmsKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSecurityConfiguration {\n                                                                                                                                                                                                                                                                                                       \n    export interface S3EncryptionProperty {\n                                                                                                                                                                                                                                                                                                                            \n        readonly kmsKeyArn?: string;\n                                                                                                                                                                                                                                                                                                    \n        readonly s3EncryptionMode?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3EncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `S3EncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSecurityConfiguration_S3EncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyArn', cdk.validateString)(properties.kmsKeyArn));\n    errors.collect(cdk.propertyValidator('s3EncryptionMode', cdk.validateString)(properties.s3EncryptionMode));\n    return errors.wrap('supplied properties not correct for \"S3EncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::SecurityConfiguration.S3Encryption` resource\n *\n * @param properties - the TypeScript properties of a `S3EncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::SecurityConfiguration.S3Encryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSecurityConfigurationS3EncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSecurityConfiguration_S3EncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyArn: cdk.stringToCloudFormation(properties.kmsKeyArn),\n        S3EncryptionMode: cdk.stringToCloudFormation(properties.s3EncryptionMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSecurityConfigurationS3EncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSecurityConfiguration.S3EncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSecurityConfiguration.S3EncryptionProperty>();\n    ret.addPropertyResult('kmsKeyArn', 'KmsKeyArn', properties.KmsKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyArn) : undefined);\n    ret.addPropertyResult('s3EncryptionMode', 'S3EncryptionMode', properties.S3EncryptionMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3EncryptionMode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                           \nexport interface CfnTableProps {\n\n                                                                                                                                                                                                                                                                                      \n    readonly catalogId: string;\n\n                                                                                                                                                                                                                                                                                \n    readonly databaseName: string;\n\n                                                                                                                                                                                                   \n    readonly tableInput: CfnTable.TableInputProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTableProps`\n *\n * @param properties - the TypeScript properties of a `CfnTableProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTablePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogId', cdk.requiredValidator)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('catalogId', cdk.validateString)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.requiredValidator)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('tableInput', cdk.requiredValidator)(properties.tableInput));\n    errors.collect(cdk.propertyValidator('tableInput', CfnTable_TableInputPropertyValidator)(properties.tableInput));\n    return errors.wrap('supplied properties not correct for \"CfnTableProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Table` resource\n *\n * @param properties - the TypeScript properties of a `CfnTableProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Table` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTablePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTablePropsValidator(properties).assertSuccess();\n    return {\n        CatalogId: cdk.stringToCloudFormation(properties.catalogId),\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        TableInput: cfnTableTableInputPropertyToCloudFormation(properties.tableInput),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTablePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTableProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTableProps>();\n    ret.addPropertyResult('catalogId', 'CatalogId', cfn_parse.FromCloudFormation.getString(properties.CatalogId));\n    ret.addPropertyResult('databaseName', 'DatabaseName', cfn_parse.FromCloudFormation.getString(properties.DatabaseName));\n    ret.addPropertyResult('tableInput', 'TableInput', CfnTableTableInputPropertyFromCloudFormation(properties.TableInput));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTable extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::Table\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTable {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTablePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTable(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                      \n    public catalogId: string;\n\n                                                                                                                                                                                                                                                                                \n    public databaseName: string;\n\n                                                                                                                                                                                                   \n    public tableInput: CfnTable.TableInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnTableProps) {\n        super(scope, id, { type: CfnTable.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'catalogId', this);\n        cdk.requireProperty(props, 'databaseName', this);\n        cdk.requireProperty(props, 'tableInput', this);\n\n        this.catalogId = props.catalogId;\n        this.databaseName = props.databaseName;\n        this.tableInput = props.tableInput;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTable.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            catalogId: this.catalogId,\n            databaseName: this.databaseName,\n            tableInput: this.tableInput,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTablePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnTable {\n                                                                                                                                                                                                                       \n    export interface ColumnProperty {\n                                                                                                                                                                                                                          \n        readonly comment?: string;\n                                                                                                                                                                                                                        \n        readonly name: string;\n                                                                                                                                                                                                                             \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ColumnProperty`\n *\n * @param properties - the TypeScript properties of a `ColumnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTable_ColumnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('comment', cdk.validateString)(properties.comment));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"ColumnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Table.Column` resource\n *\n * @param properties - the TypeScript properties of a `ColumnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Table.Column` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTableColumnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTable_ColumnPropertyValidator(properties).assertSuccess();\n    return {\n        Comment: cdk.stringToCloudFormation(properties.comment),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTableColumnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTable.ColumnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTable.ColumnProperty>();\n    ret.addPropertyResult('comment', 'Comment', properties.Comment != null ? cfn_parse.FromCloudFormation.getString(properties.Comment) : undefined);\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTable {\n                                                                                                                                                                                                                                           \n    export interface OrderProperty {\n                                                                                                                                                                                                                     \n        readonly column: string;\n                                                                                                                                                                                                                                                                                                     \n        readonly sortOrder: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OrderProperty`\n *\n * @param properties - the TypeScript properties of a `OrderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTable_OrderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('column', cdk.requiredValidator)(properties.column));\n    errors.collect(cdk.propertyValidator('column', cdk.validateString)(properties.column));\n    errors.collect(cdk.propertyValidator('sortOrder', cdk.requiredValidator)(properties.sortOrder));\n    errors.collect(cdk.propertyValidator('sortOrder', cdk.validateNumber)(properties.sortOrder));\n    return errors.wrap('supplied properties not correct for \"OrderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Table.Order` resource\n *\n * @param properties - the TypeScript properties of a `OrderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Table.Order` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTableOrderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTable_OrderPropertyValidator(properties).assertSuccess();\n    return {\n        Column: cdk.stringToCloudFormation(properties.column),\n        SortOrder: cdk.numberToCloudFormation(properties.sortOrder),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTableOrderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTable.OrderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTable.OrderProperty>();\n    ret.addPropertyResult('column', 'Column', cfn_parse.FromCloudFormation.getString(properties.Column));\n    ret.addPropertyResult('sortOrder', 'SortOrder', cfn_parse.FromCloudFormation.getNumber(properties.SortOrder));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTable {\n                                                                                                                                                                                                                                                                                                                   \n    export interface SchemaIdProperty {\n                                                                                                                                                                                                                                                                   \n        readonly registryName?: string;\n                                                                                                                                                                                                                                                                                                                      \n        readonly schemaArn?: string;\n                                                                                                                                                                                                                                                                                      \n        readonly schemaName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SchemaIdProperty`\n *\n * @param properties - the TypeScript properties of a `SchemaIdProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTable_SchemaIdPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('registryName', cdk.validateString)(properties.registryName));\n    errors.collect(cdk.propertyValidator('schemaArn', cdk.validateString)(properties.schemaArn));\n    errors.collect(cdk.propertyValidator('schemaName', cdk.validateString)(properties.schemaName));\n    return errors.wrap('supplied properties not correct for \"SchemaIdProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Table.SchemaId` resource\n *\n * @param properties - the TypeScript properties of a `SchemaIdProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Table.SchemaId` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTableSchemaIdPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTable_SchemaIdPropertyValidator(properties).assertSuccess();\n    return {\n        RegistryName: cdk.stringToCloudFormation(properties.registryName),\n        SchemaArn: cdk.stringToCloudFormation(properties.schemaArn),\n        SchemaName: cdk.stringToCloudFormation(properties.schemaName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTableSchemaIdPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTable.SchemaIdProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTable.SchemaIdProperty>();\n    ret.addPropertyResult('registryName', 'RegistryName', properties.RegistryName != null ? cfn_parse.FromCloudFormation.getString(properties.RegistryName) : undefined);\n    ret.addPropertyResult('schemaArn', 'SchemaArn', properties.SchemaArn != null ? cfn_parse.FromCloudFormation.getString(properties.SchemaArn) : undefined);\n    ret.addPropertyResult('schemaName', 'SchemaName', properties.SchemaName != null ? cfn_parse.FromCloudFormation.getString(properties.SchemaName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTable {\n                                                                                                                                                                                                                                                                                   \n    export interface SchemaReferenceProperty {\n                                                                                                                                                                                                                                                                                                                                         \n        readonly schemaId?: CfnTable.SchemaIdProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                               \n        readonly schemaVersionId?: string;\n                                                                                                                                                                                                                                                                \n        readonly schemaVersionNumber?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SchemaReferenceProperty`\n *\n * @param properties - the TypeScript properties of a `SchemaReferenceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTable_SchemaReferencePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('schemaId', CfnTable_SchemaIdPropertyValidator)(properties.schemaId));\n    errors.collect(cdk.propertyValidator('schemaVersionId', cdk.validateString)(properties.schemaVersionId));\n    errors.collect(cdk.propertyValidator('schemaVersionNumber', cdk.validateNumber)(properties.schemaVersionNumber));\n    return errors.wrap('supplied properties not correct for \"SchemaReferenceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Table.SchemaReference` resource\n *\n * @param properties - the TypeScript properties of a `SchemaReferenceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Table.SchemaReference` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTableSchemaReferencePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTable_SchemaReferencePropertyValidator(properties).assertSuccess();\n    return {\n        SchemaId: cfnTableSchemaIdPropertyToCloudFormation(properties.schemaId),\n        SchemaVersionId: cdk.stringToCloudFormation(properties.schemaVersionId),\n        SchemaVersionNumber: cdk.numberToCloudFormation(properties.schemaVersionNumber),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTableSchemaReferencePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTable.SchemaReferenceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTable.SchemaReferenceProperty>();\n    ret.addPropertyResult('schemaId', 'SchemaId', properties.SchemaId != null ? CfnTableSchemaIdPropertyFromCloudFormation(properties.SchemaId) : undefined);\n    ret.addPropertyResult('schemaVersionId', 'SchemaVersionId', properties.SchemaVersionId != null ? cfn_parse.FromCloudFormation.getString(properties.SchemaVersionId) : undefined);\n    ret.addPropertyResult('schemaVersionNumber', 'SchemaVersionNumber', properties.SchemaVersionNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.SchemaVersionNumber) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTable {\n                                                                                                                                                                                                                                                                                                            \n    export interface SerdeInfoProperty {\n                                                                                                                                                                                                                      \n        readonly name?: string;\n                                                                                                                                                                                                                                                                               \n        readonly parameters?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly serializationLibrary?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SerdeInfoProperty`\n *\n * @param properties - the TypeScript properties of a `SerdeInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTable_SerdeInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('parameters', cdk.validateObject)(properties.parameters));\n    errors.collect(cdk.propertyValidator('serializationLibrary', cdk.validateString)(properties.serializationLibrary));\n    return errors.wrap('supplied properties not correct for \"SerdeInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Table.SerdeInfo` resource\n *\n * @param properties - the TypeScript properties of a `SerdeInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Table.SerdeInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTableSerdeInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTable_SerdeInfoPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Parameters: cdk.objectToCloudFormation(properties.parameters),\n        SerializationLibrary: cdk.stringToCloudFormation(properties.serializationLibrary),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTableSerdeInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTable.SerdeInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTable.SerdeInfoProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : undefined);\n    ret.addPropertyResult('serializationLibrary', 'SerializationLibrary', properties.SerializationLibrary != null ? cfn_parse.FromCloudFormation.getString(properties.SerializationLibrary) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTable {\n                                                                                                                                                                                                                                                                                                    \n    export interface SkewedInfoProperty {\n                                                                                                                                                                                                                                                                         \n        readonly skewedColumnNames?: string[];\n                                                                                                                                                                                                                                                                                           \n        readonly skewedColumnValueLocationMaps?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                          \n        readonly skewedColumnValues?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SkewedInfoProperty`\n *\n * @param properties - the TypeScript properties of a `SkewedInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTable_SkewedInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('skewedColumnNames', cdk.listValidator(cdk.validateString))(properties.skewedColumnNames));\n    errors.collect(cdk.propertyValidator('skewedColumnValueLocationMaps', cdk.validateObject)(properties.skewedColumnValueLocationMaps));\n    errors.collect(cdk.propertyValidator('skewedColumnValues', cdk.listValidator(cdk.validateString))(properties.skewedColumnValues));\n    return errors.wrap('supplied properties not correct for \"SkewedInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Table.SkewedInfo` resource\n *\n * @param properties - the TypeScript properties of a `SkewedInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Table.SkewedInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTableSkewedInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTable_SkewedInfoPropertyValidator(properties).assertSuccess();\n    return {\n        SkewedColumnNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.skewedColumnNames),\n        SkewedColumnValueLocationMaps: cdk.objectToCloudFormation(properties.skewedColumnValueLocationMaps),\n        SkewedColumnValues: cdk.listMapper(cdk.stringToCloudFormation)(properties.skewedColumnValues),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTableSkewedInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTable.SkewedInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTable.SkewedInfoProperty>();\n    ret.addPropertyResult('skewedColumnNames', 'SkewedColumnNames', properties.SkewedColumnNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SkewedColumnNames) : undefined);\n    ret.addPropertyResult('skewedColumnValueLocationMaps', 'SkewedColumnValueLocationMaps', properties.SkewedColumnValueLocationMaps != null ? cfn_parse.FromCloudFormation.getAny(properties.SkewedColumnValueLocationMaps) : undefined);\n    ret.addPropertyResult('skewedColumnValues', 'SkewedColumnValues', properties.SkewedColumnValues != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SkewedColumnValues) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTable {\n                                                                                                                                                                                                                                                        \n    export interface StorageDescriptorProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly bucketColumns?: string[];\n                                                                                                                                                                                                                                                            \n        readonly columns?: Array<CfnTable.ColumnProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                           \n        readonly compressed?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                           \n        readonly inputFormat?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly location?: string;\n                                                                                                                                                                                                                                                                                             \n        readonly numberOfBuckets?: number;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly outputFormat?: string;\n                                                                                                                                                                                                                                                                         \n        readonly parameters?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                         \n        readonly schemaReference?: CfnTable.SchemaReferenceProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                               \n        readonly serdeInfo?: CfnTable.SerdeInfoProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                          \n        readonly skewedInfo?: CfnTable.SkewedInfoProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                        \n        readonly sortColumns?: Array<CfnTable.OrderProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                              \n        readonly storedAsSubDirectories?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StorageDescriptorProperty`\n *\n * @param properties - the TypeScript properties of a `StorageDescriptorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTable_StorageDescriptorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketColumns', cdk.listValidator(cdk.validateString))(properties.bucketColumns));\n    errors.collect(cdk.propertyValidator('columns', cdk.listValidator(CfnTable_ColumnPropertyValidator))(properties.columns));\n    errors.collect(cdk.propertyValidator('compressed', cdk.validateBoolean)(properties.compressed));\n    errors.collect(cdk.propertyValidator('inputFormat', cdk.validateString)(properties.inputFormat));\n    errors.collect(cdk.propertyValidator('location', cdk.validateString)(properties.location));\n    errors.collect(cdk.propertyValidator('numberOfBuckets', cdk.validateNumber)(properties.numberOfBuckets));\n    errors.collect(cdk.propertyValidator('outputFormat', cdk.validateString)(properties.outputFormat));\n    errors.collect(cdk.propertyValidator('parameters', cdk.validateObject)(properties.parameters));\n    errors.collect(cdk.propertyValidator('schemaReference', CfnTable_SchemaReferencePropertyValidator)(properties.schemaReference));\n    errors.collect(cdk.propertyValidator('serdeInfo', CfnTable_SerdeInfoPropertyValidator)(properties.serdeInfo));\n    errors.collect(cdk.propertyValidator('skewedInfo', CfnTable_SkewedInfoPropertyValidator)(properties.skewedInfo));\n    errors.collect(cdk.propertyValidator('sortColumns', cdk.listValidator(CfnTable_OrderPropertyValidator))(properties.sortColumns));\n    errors.collect(cdk.propertyValidator('storedAsSubDirectories', cdk.validateBoolean)(properties.storedAsSubDirectories));\n    return errors.wrap('supplied properties not correct for \"StorageDescriptorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Table.StorageDescriptor` resource\n *\n * @param properties - the TypeScript properties of a `StorageDescriptorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Table.StorageDescriptor` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTableStorageDescriptorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTable_StorageDescriptorPropertyValidator(properties).assertSuccess();\n    return {\n        BucketColumns: cdk.listMapper(cdk.stringToCloudFormation)(properties.bucketColumns),\n        Columns: cdk.listMapper(cfnTableColumnPropertyToCloudFormation)(properties.columns),\n        Compressed: cdk.booleanToCloudFormation(properties.compressed),\n        InputFormat: cdk.stringToCloudFormation(properties.inputFormat),\n        Location: cdk.stringToCloudFormation(properties.location),\n        NumberOfBuckets: cdk.numberToCloudFormation(properties.numberOfBuckets),\n        OutputFormat: cdk.stringToCloudFormation(properties.outputFormat),\n        Parameters: cdk.objectToCloudFormation(properties.parameters),\n        SchemaReference: cfnTableSchemaReferencePropertyToCloudFormation(properties.schemaReference),\n        SerdeInfo: cfnTableSerdeInfoPropertyToCloudFormation(properties.serdeInfo),\n        SkewedInfo: cfnTableSkewedInfoPropertyToCloudFormation(properties.skewedInfo),\n        SortColumns: cdk.listMapper(cfnTableOrderPropertyToCloudFormation)(properties.sortColumns),\n        StoredAsSubDirectories: cdk.booleanToCloudFormation(properties.storedAsSubDirectories),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTableStorageDescriptorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTable.StorageDescriptorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTable.StorageDescriptorProperty>();\n    ret.addPropertyResult('bucketColumns', 'BucketColumns', properties.BucketColumns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.BucketColumns) : undefined);\n    ret.addPropertyResult('columns', 'Columns', properties.Columns != null ? cfn_parse.FromCloudFormation.getArray(CfnTableColumnPropertyFromCloudFormation)(properties.Columns) : undefined);\n    ret.addPropertyResult('compressed', 'Compressed', properties.Compressed != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Compressed) : undefined);\n    ret.addPropertyResult('inputFormat', 'InputFormat', properties.InputFormat != null ? cfn_parse.FromCloudFormation.getString(properties.InputFormat) : undefined);\n    ret.addPropertyResult('location', 'Location', properties.Location != null ? cfn_parse.FromCloudFormation.getString(properties.Location) : undefined);\n    ret.addPropertyResult('numberOfBuckets', 'NumberOfBuckets', properties.NumberOfBuckets != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumberOfBuckets) : undefined);\n    ret.addPropertyResult('outputFormat', 'OutputFormat', properties.OutputFormat != null ? cfn_parse.FromCloudFormation.getString(properties.OutputFormat) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : undefined);\n    ret.addPropertyResult('schemaReference', 'SchemaReference', properties.SchemaReference != null ? CfnTableSchemaReferencePropertyFromCloudFormation(properties.SchemaReference) : undefined);\n    ret.addPropertyResult('serdeInfo', 'SerdeInfo', properties.SerdeInfo != null ? CfnTableSerdeInfoPropertyFromCloudFormation(properties.SerdeInfo) : undefined);\n    ret.addPropertyResult('skewedInfo', 'SkewedInfo', properties.SkewedInfo != null ? CfnTableSkewedInfoPropertyFromCloudFormation(properties.SkewedInfo) : undefined);\n    ret.addPropertyResult('sortColumns', 'SortColumns', properties.SortColumns != null ? cfn_parse.FromCloudFormation.getArray(CfnTableOrderPropertyFromCloudFormation)(properties.SortColumns) : undefined);\n    ret.addPropertyResult('storedAsSubDirectories', 'StoredAsSubDirectories', properties.StoredAsSubDirectories != null ? cfn_parse.FromCloudFormation.getBoolean(properties.StoredAsSubDirectories) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTable {\n                                                                                                                                                                                                                                                                        \n    export interface TableIdentifierProperty {\n                                                                                                                                                                                                                                                                           \n        readonly catalogId?: string;\n                                                                                                                                                                                                                                                                                        \n        readonly databaseName?: string;\n                                                                                                                                                                                                                                             \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TableIdentifierProperty`\n *\n * @param properties - the TypeScript properties of a `TableIdentifierProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTable_TableIdentifierPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogId', cdk.validateString)(properties.catalogId));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"TableIdentifierProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Table.TableIdentifier` resource\n *\n * @param properties - the TypeScript properties of a `TableIdentifierProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Table.TableIdentifier` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTableTableIdentifierPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTable_TableIdentifierPropertyValidator(properties).assertSuccess();\n    return {\n        CatalogId: cdk.stringToCloudFormation(properties.catalogId),\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTableTableIdentifierPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTable.TableIdentifierProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTable.TableIdentifierProperty>();\n    ret.addPropertyResult('catalogId', 'CatalogId', properties.CatalogId != null ? cfn_parse.FromCloudFormation.getString(properties.CatalogId) : undefined);\n    ret.addPropertyResult('databaseName', 'DatabaseName', properties.DatabaseName != null ? cfn_parse.FromCloudFormation.getString(properties.DatabaseName) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTable {\n                                                                                                                                                                                                                                       \n    export interface TableInputProperty {\n                                                                                                                                                                                                                                        \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                            \n        readonly name?: string;\n                                                                                                                                                                                                                       \n        readonly owner?: string;\n                                                                                                                                                                                                                                                                              \n        readonly parameters?: any | cdk.IResolvable;\nn        readonly partitionKeys?: Array<CfnTable.ColumnProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                             \n        readonly retention?: number;\n                                                                                                                                                                                                                                                                                                        \n        readonly storageDescriptor?: CfnTable.StorageDescriptorProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                              \n        readonly tableType?: string;\n                                                                                                                                                                                                                                                                                              \n        readonly targetTable?: CfnTable.TableIdentifierProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                           \n        readonly viewExpandedText?: string;\n                                                                                                                                                                                                                                                                                           \n        readonly viewOriginalText?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TableInputProperty`\n *\n * @param properties - the TypeScript properties of a `TableInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTable_TableInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('owner', cdk.validateString)(properties.owner));\n    errors.collect(cdk.propertyValidator('parameters', cdk.validateObject)(properties.parameters));\n    errors.collect(cdk.propertyValidator('partitionKeys', cdk.listValidator(CfnTable_ColumnPropertyValidator))(properties.partitionKeys));\n    errors.collect(cdk.propertyValidator('retention', cdk.validateNumber)(properties.retention));\n    errors.collect(cdk.propertyValidator('storageDescriptor', CfnTable_StorageDescriptorPropertyValidator)(properties.storageDescriptor));\n    errors.collect(cdk.propertyValidator('tableType', cdk.validateString)(properties.tableType));\n    errors.collect(cdk.propertyValidator('targetTable', CfnTable_TableIdentifierPropertyValidator)(properties.targetTable));\n    errors.collect(cdk.propertyValidator('viewExpandedText', cdk.validateString)(properties.viewExpandedText));\n    errors.collect(cdk.propertyValidator('viewOriginalText', cdk.validateString)(properties.viewOriginalText));\n    return errors.wrap('supplied properties not correct for \"TableInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Table.TableInput` resource\n *\n * @param properties - the TypeScript properties of a `TableInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Table.TableInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTableTableInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTable_TableInputPropertyValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Owner: cdk.stringToCloudFormation(properties.owner),\n        Parameters: cdk.objectToCloudFormation(properties.parameters),\n        PartitionKeys: cdk.listMapper(cfnTableColumnPropertyToCloudFormation)(properties.partitionKeys),\n        Retention: cdk.numberToCloudFormation(properties.retention),\n        StorageDescriptor: cfnTableStorageDescriptorPropertyToCloudFormation(properties.storageDescriptor),\n        TableType: cdk.stringToCloudFormation(properties.tableType),\n        TargetTable: cfnTableTableIdentifierPropertyToCloudFormation(properties.targetTable),\n        ViewExpandedText: cdk.stringToCloudFormation(properties.viewExpandedText),\n        ViewOriginalText: cdk.stringToCloudFormation(properties.viewOriginalText),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTableTableInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTable.TableInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTable.TableInputProperty>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('owner', 'Owner', properties.Owner != null ? cfn_parse.FromCloudFormation.getString(properties.Owner) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : undefined);\n    ret.addPropertyResult('partitionKeys', 'PartitionKeys', properties.PartitionKeys != null ? cfn_parse.FromCloudFormation.getArray(CfnTableColumnPropertyFromCloudFormation)(properties.PartitionKeys) : undefined);\n    ret.addPropertyResult('retention', 'Retention', properties.Retention != null ? cfn_parse.FromCloudFormation.getNumber(properties.Retention) : undefined);\n    ret.addPropertyResult('storageDescriptor', 'StorageDescriptor', properties.StorageDescriptor != null ? CfnTableStorageDescriptorPropertyFromCloudFormation(properties.StorageDescriptor) : undefined);\n    ret.addPropertyResult('tableType', 'TableType', properties.TableType != null ? cfn_parse.FromCloudFormation.getString(properties.TableType) : undefined);\n    ret.addPropertyResult('targetTable', 'TargetTable', properties.TargetTable != null ? CfnTableTableIdentifierPropertyFromCloudFormation(properties.TargetTable) : undefined);\n    ret.addPropertyResult('viewExpandedText', 'ViewExpandedText', properties.ViewExpandedText != null ? cfn_parse.FromCloudFormation.getString(properties.ViewExpandedText) : undefined);\n    ret.addPropertyResult('viewOriginalText', 'ViewOriginalText', properties.ViewOriginalText != null ? cfn_parse.FromCloudFormation.getString(properties.ViewOriginalText) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                               \nexport interface CfnTriggerProps {\n\n                                                                                                                                                                                                       \n    readonly actions: Array<CfnTrigger.ActionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                               \n    readonly type: string;\n\n                                                                                                                                                                                                   \n    readonly description?: string;\n\n                                                                                                                                                                                      \n    readonly name?: string;\n\n                                                                                                                                                                                                                                  \n    readonly predicate?: CfnTrigger.PredicateProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly schedule?: string;\n\n                                                                                                                                                                                                                                                                                                  \n    readonly startOnCreation?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                \n    readonly tags?: any;\n\n                                                                                                                                                                                                                           \n    readonly workflowName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTriggerProps`\n *\n * @param properties - the TypeScript properties of a `CfnTriggerProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTriggerPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.requiredValidator)(properties.actions));\n    errors.collect(cdk.propertyValidator('actions', cdk.listValidator(CfnTrigger_ActionPropertyValidator))(properties.actions));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('predicate', CfnTrigger_PredicatePropertyValidator)(properties.predicate));\n    errors.collect(cdk.propertyValidator('schedule', cdk.validateString)(properties.schedule));\n    errors.collect(cdk.propertyValidator('startOnCreation', cdk.validateBoolean)(properties.startOnCreation));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('workflowName', cdk.validateString)(properties.workflowName));\n    return errors.wrap('supplied properties not correct for \"CfnTriggerProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Trigger` resource\n *\n * @param properties - the TypeScript properties of a `CfnTriggerProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Trigger` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTriggerPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTriggerPropsValidator(properties).assertSuccess();\n    return {\n        Actions: cdk.listMapper(cfnTriggerActionPropertyToCloudFormation)(properties.actions),\n        Type: cdk.stringToCloudFormation(properties.type),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Predicate: cfnTriggerPredicatePropertyToCloudFormation(properties.predicate),\n        Schedule: cdk.stringToCloudFormation(properties.schedule),\n        StartOnCreation: cdk.booleanToCloudFormation(properties.startOnCreation),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n        WorkflowName: cdk.stringToCloudFormation(properties.workflowName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTriggerPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTriggerProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTriggerProps>();\n    ret.addPropertyResult('actions', 'Actions', cfn_parse.FromCloudFormation.getArray(CfnTriggerActionPropertyFromCloudFormation)(properties.Actions));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('predicate', 'Predicate', properties.Predicate != null ? CfnTriggerPredicatePropertyFromCloudFormation(properties.Predicate) : undefined);\n    ret.addPropertyResult('schedule', 'Schedule', properties.Schedule != null ? cfn_parse.FromCloudFormation.getString(properties.Schedule) : undefined);\n    ret.addPropertyResult('startOnCreation', 'StartOnCreation', properties.StartOnCreation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.StartOnCreation) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addPropertyResult('workflowName', 'WorkflowName', properties.WorkflowName != null ? cfn_parse.FromCloudFormation.getString(properties.WorkflowName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTrigger extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::Trigger\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTrigger {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTriggerPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTrigger(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                       \n    public actions: Array<CfnTrigger.ActionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                               \n    public type: string;\n\n                                                                                                                                                                                                   \n    public description: string | undefined;\n\n                                                                                                                                                                                      \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                  \n    public predicate: CfnTrigger.PredicateProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public schedule: string | undefined;\n\n                                                                                                                                                                                                                                                                                                  \n    public startOnCreation: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                           \n    public workflowName: string | undefined;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnTriggerProps) {\n        super(scope, id, { type: CfnTrigger.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'actions', this);\n        cdk.requireProperty(props, 'type', this);\n\n        this.actions = props.actions;\n        this.type = props.type;\n        this.description = props.description;\n        this.name = props.name;\n        this.predicate = props.predicate;\n        this.schedule = props.schedule;\n        this.startOnCreation = props.startOnCreation;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::Glue::Trigger\", props.tags, { tagPropertyName: 'tags' });\n        this.workflowName = props.workflowName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTrigger.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            actions: this.actions,\n            type: this.type,\n            description: this.description,\n            name: this.name,\n            predicate: this.predicate,\n            schedule: this.schedule,\n            startOnCreation: this.startOnCreation,\n            tags: this.tags.renderTags(),\n            workflowName: this.workflowName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTriggerPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnTrigger {\n                                                                                                                                                                                                                                                 \n    export interface ActionProperty {\nn        readonly arguments?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                             \n        readonly crawlerName?: string;\n                                                                                                                                                                                                                                      \n        readonly jobName?: string;\n                                                                                                                                                                                                                                                                               \n        readonly notificationProperty?: CfnTrigger.NotificationPropertyProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                 \n        readonly securityConfiguration?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly timeout?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ActionProperty`\n *\n * @param properties - the TypeScript properties of a `ActionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTrigger_ActionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arguments', cdk.validateObject)(properties.arguments));\n    errors.collect(cdk.propertyValidator('crawlerName', cdk.validateString)(properties.crawlerName));\n    errors.collect(cdk.propertyValidator('jobName', cdk.validateString)(properties.jobName));\n    errors.collect(cdk.propertyValidator('notificationProperty', CfnTrigger_NotificationPropertyPropertyValidator)(properties.notificationProperty));\n    errors.collect(cdk.propertyValidator('securityConfiguration', cdk.validateString)(properties.securityConfiguration));\n    errors.collect(cdk.propertyValidator('timeout', cdk.validateNumber)(properties.timeout));\n    return errors.wrap('supplied properties not correct for \"ActionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Trigger.Action` resource\n *\n * @param properties - the TypeScript properties of a `ActionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Trigger.Action` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTriggerActionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTrigger_ActionPropertyValidator(properties).assertSuccess();\n    return {\n        Arguments: cdk.objectToCloudFormation(properties.arguments),\n        CrawlerName: cdk.stringToCloudFormation(properties.crawlerName),\n        JobName: cdk.stringToCloudFormation(properties.jobName),\n        NotificationProperty: cfnTriggerNotificationPropertyPropertyToCloudFormation(properties.notificationProperty),\n        SecurityConfiguration: cdk.stringToCloudFormation(properties.securityConfiguration),\n        Timeout: cdk.numberToCloudFormation(properties.timeout),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTriggerActionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTrigger.ActionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTrigger.ActionProperty>();\n    ret.addPropertyResult('arguments', 'Arguments', properties.Arguments != null ? cfn_parse.FromCloudFormation.getAny(properties.Arguments) : undefined);\n    ret.addPropertyResult('crawlerName', 'CrawlerName', properties.CrawlerName != null ? cfn_parse.FromCloudFormation.getString(properties.CrawlerName) : undefined);\n    ret.addPropertyResult('jobName', 'JobName', properties.JobName != null ? cfn_parse.FromCloudFormation.getString(properties.JobName) : undefined);\n    ret.addPropertyResult('notificationProperty', 'NotificationProperty', properties.NotificationProperty != null ? CfnTriggerNotificationPropertyPropertyFromCloudFormation(properties.NotificationProperty) : undefined);\n    ret.addPropertyResult('securityConfiguration', 'SecurityConfiguration', properties.SecurityConfiguration != null ? cfn_parse.FromCloudFormation.getString(properties.SecurityConfiguration) : undefined);\n    ret.addPropertyResult('timeout', 'Timeout', properties.Timeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.Timeout) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTrigger {\n                                                                                                                                                                                                                                                     \n    export interface ConditionProperty {\n                                                                                                                                                                                                                                                                       \n        readonly crawlState?: string;\n                                                                                                                                                                                                                                                                       \n        readonly crawlerName?: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly jobName?: string;\n                                                                                                                                                                                                                                      \n        readonly logicalOperator?: string;\n                                                                                                                                                                                                                                                                                                                      \n        readonly state?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConditionProperty`\n *\n * @param properties - the TypeScript properties of a `ConditionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTrigger_ConditionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('crawlState', cdk.validateString)(properties.crawlState));\n    errors.collect(cdk.propertyValidator('crawlerName', cdk.validateString)(properties.crawlerName));\n    errors.collect(cdk.propertyValidator('jobName', cdk.validateString)(properties.jobName));\n    errors.collect(cdk.propertyValidator('logicalOperator', cdk.validateString)(properties.logicalOperator));\n    errors.collect(cdk.propertyValidator('state', cdk.validateString)(properties.state));\n    return errors.wrap('supplied properties not correct for \"ConditionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Trigger.Condition` resource\n *\n * @param properties - the TypeScript properties of a `ConditionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Trigger.Condition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTriggerConditionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTrigger_ConditionPropertyValidator(properties).assertSuccess();\n    return {\n        CrawlState: cdk.stringToCloudFormation(properties.crawlState),\n        CrawlerName: cdk.stringToCloudFormation(properties.crawlerName),\n        JobName: cdk.stringToCloudFormation(properties.jobName),\n        LogicalOperator: cdk.stringToCloudFormation(properties.logicalOperator),\n        State: cdk.stringToCloudFormation(properties.state),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTriggerConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTrigger.ConditionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTrigger.ConditionProperty>();\n    ret.addPropertyResult('crawlState', 'CrawlState', properties.CrawlState != null ? cfn_parse.FromCloudFormation.getString(properties.CrawlState) : undefined);\n    ret.addPropertyResult('crawlerName', 'CrawlerName', properties.CrawlerName != null ? cfn_parse.FromCloudFormation.getString(properties.CrawlerName) : undefined);\n    ret.addPropertyResult('jobName', 'JobName', properties.JobName != null ? cfn_parse.FromCloudFormation.getString(properties.JobName) : undefined);\n    ret.addPropertyResult('logicalOperator', 'LogicalOperator', properties.LogicalOperator != null ? cfn_parse.FromCloudFormation.getString(properties.LogicalOperator) : undefined);\n    ret.addPropertyResult('state', 'State', properties.State != null ? cfn_parse.FromCloudFormation.getString(properties.State) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTrigger {\n                                                                                                                                                                                                                                                                             \n    export interface NotificationPropertyProperty {\n                                                                                                                                                                                                                                                                                                                                           \n        readonly notifyDelayAfter?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NotificationPropertyProperty`\n *\n * @param properties - the TypeScript properties of a `NotificationPropertyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTrigger_NotificationPropertyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('notifyDelayAfter', cdk.validateNumber)(properties.notifyDelayAfter));\n    return errors.wrap('supplied properties not correct for \"NotificationPropertyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Trigger.NotificationProperty` resource\n *\n * @param properties - the TypeScript properties of a `NotificationPropertyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Trigger.NotificationProperty` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTriggerNotificationPropertyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTrigger_NotificationPropertyPropertyValidator(properties).assertSuccess();\n    return {\n        NotifyDelayAfter: cdk.numberToCloudFormation(properties.notifyDelayAfter),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTriggerNotificationPropertyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTrigger.NotificationPropertyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTrigger.NotificationPropertyProperty>();\n    ret.addPropertyResult('notifyDelayAfter', 'NotifyDelayAfter', properties.NotifyDelayAfter != null ? cfn_parse.FromCloudFormation.getNumber(properties.NotifyDelayAfter) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTrigger {\n                                                                                                                                                                                                                                                                          \n    export interface PredicateProperty {\n                                                                                                                                                                                                                                                                                 \n        readonly conditions?: Array<CfnTrigger.ConditionProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                             \n        readonly logical?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PredicateProperty`\n *\n * @param properties - the TypeScript properties of a `PredicateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTrigger_PredicatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('conditions', cdk.listValidator(CfnTrigger_ConditionPropertyValidator))(properties.conditions));\n    errors.collect(cdk.propertyValidator('logical', cdk.validateString)(properties.logical));\n    return errors.wrap('supplied properties not correct for \"PredicateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Trigger.Predicate` resource\n *\n * @param properties - the TypeScript properties of a `PredicateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Trigger.Predicate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTriggerPredicatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTrigger_PredicatePropertyValidator(properties).assertSuccess();\n    return {\n        Conditions: cdk.listMapper(cfnTriggerConditionPropertyToCloudFormation)(properties.conditions),\n        Logical: cdk.stringToCloudFormation(properties.logical),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTriggerPredicatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTrigger.PredicateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTrigger.PredicateProperty>();\n    ret.addPropertyResult('conditions', 'Conditions', properties.Conditions != null ? cfn_parse.FromCloudFormation.getArray(CfnTriggerConditionPropertyFromCloudFormation)(properties.Conditions) : undefined);\n    ret.addPropertyResult('logical', 'Logical', properties.Logical != null ? cfn_parse.FromCloudFormation.getString(properties.Logical) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                 \nexport interface CfnWorkflowProps {\n\n                                                                                                                                                                                                                                                               \n    readonly defaultRunProperties?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                    \n    readonly description?: string;\n\n                                                                                                                                                                                                              \n    readonly name?: string;\n\n                                                                                                                                                                                                   \n    readonly tags?: any;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnWorkflowProps`\n *\n * @param properties - the TypeScript properties of a `CfnWorkflowProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnWorkflowPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultRunProperties', cdk.validateObject)(properties.defaultRunProperties));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnWorkflowProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Glue::Workflow` resource\n *\n * @param properties - the TypeScript properties of a `CfnWorkflowProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Glue::Workflow` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWorkflowPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWorkflowPropsValidator(properties).assertSuccess();\n    return {\n        DefaultRunProperties: cdk.objectToCloudFormation(properties.defaultRunProperties),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWorkflowPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWorkflowProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWorkflowProps>();\n    ret.addPropertyResult('defaultRunProperties', 'DefaultRunProperties', properties.DefaultRunProperties != null ? cfn_parse.FromCloudFormation.getAny(properties.DefaultRunProperties) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \nexport class CfnWorkflow extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Glue::Workflow\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnWorkflow {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnWorkflowPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnWorkflow(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                               \n    public defaultRunProperties: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                    \n    public description: string | undefined;\n\n                                                                                                                                                                                                              \n    public name: string | undefined;\n\n                                                                                                                                                                                                   \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnWorkflowProps = {}) {\n        super(scope, id, { type: CfnWorkflow.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.defaultRunProperties = props.defaultRunProperties;\n        this.description = props.description;\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::Glue::Workflow\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnWorkflow.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            defaultRunProperties: this.defaultRunProperties,\n            description: this.description,\n            name: this.name,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnWorkflowPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
