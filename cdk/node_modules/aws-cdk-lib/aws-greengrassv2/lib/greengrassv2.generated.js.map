{
  "version": 3,
  "sources": ["greengrassv2.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:31.310Z\",\"fingerprint\":\"1vrD7cNq2Gqag5GDcHMOzgGNixYVlGqA40Ee4sa+S+s=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                         \nexport interface CfnComponentVersionProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly inlineRecipe?: string;\n\n                                                                                                                                                                                                                                                                                                                                                 \n    readonly lambdaFunction?: CfnComponentVersion.LambdaFunctionRecipeSourceProperty | cdk.IResolvable;\n\nn    readonly tags?: { [key: string]: (string) };\n}\n\n/**\n * Determine whether the given properties match those of a `CfnComponentVersionProps`\n *\n * @param properties - the TypeScript properties of a `CfnComponentVersionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponentVersionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('inlineRecipe', cdk.validateString)(properties.inlineRecipe));\n    errors.collect(cdk.propertyValidator('lambdaFunction', CfnComponentVersion_LambdaFunctionRecipeSourcePropertyValidator)(properties.lambdaFunction));\n    errors.collect(cdk.propertyValidator('tags', cdk.hashValidator(cdk.validateString))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnComponentVersionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion` resource\n *\n * @param properties - the TypeScript properties of a `CfnComponentVersionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentVersionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponentVersionPropsValidator(properties).assertSuccess();\n    return {\n        InlineRecipe: cdk.stringToCloudFormation(properties.inlineRecipe),\n        LambdaFunction: cfnComponentVersionLambdaFunctionRecipeSourcePropertyToCloudFormation(properties.lambdaFunction),\n        Tags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentVersionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponentVersionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponentVersionProps>();\n    ret.addPropertyResult('inlineRecipe', 'InlineRecipe', properties.InlineRecipe != null ? cfn_parse.FromCloudFormation.getString(properties.InlineRecipe) : undefined);\n    ret.addPropertyResult('lambdaFunction', 'LambdaFunction', properties.LambdaFunction != null ? CfnComponentVersionLambdaFunctionRecipeSourcePropertyFromCloudFormation(properties.LambdaFunction) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnComponentVersion extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GreengrassV2::ComponentVersion\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnComponentVersion {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnComponentVersionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnComponentVersion(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                            \n    public readonly attrArn: string;\n\n                                                                                               \n    public readonly attrComponentName: string;\n\n                                                                                                     \n    public readonly attrComponentVersion: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public inlineRecipe: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                 \n    public lambdaFunction: CfnComponentVersion.LambdaFunctionRecipeSourceProperty | cdk.IResolvable | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnComponentVersionProps = {}) {\n        super(scope, id, { type: CfnComponentVersion.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrComponentName = cdk.Token.asString(this.getAtt('ComponentName'));\n        this.attrComponentVersion = cdk.Token.asString(this.getAtt('ComponentVersion'));\n\n        this.inlineRecipe = props.inlineRecipe;\n        this.lambdaFunction = props.lambdaFunction;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::GreengrassV2::ComponentVersion\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnComponentVersion.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            inlineRecipe: this.inlineRecipe,\n            lambdaFunction: this.lambdaFunction,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnComponentVersionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnComponentVersion {\n                                                                                                                                                                                                                                                                                                                             \n    export interface ComponentDependencyRequirementProperty {\nn        readonly dependencyType?: string;\nn        readonly versionRequirement?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentDependencyRequirementProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentDependencyRequirementProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponentVersion_ComponentDependencyRequirementPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dependencyType', cdk.validateString)(properties.dependencyType));\n    errors.collect(cdk.propertyValidator('versionRequirement', cdk.validateString)(properties.versionRequirement));\n    return errors.wrap('supplied properties not correct for \"ComponentDependencyRequirementProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.ComponentDependencyRequirement` resource\n *\n * @param properties - the TypeScript properties of a `ComponentDependencyRequirementProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.ComponentDependencyRequirement` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentVersionComponentDependencyRequirementPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponentVersion_ComponentDependencyRequirementPropertyValidator(properties).assertSuccess();\n    return {\n        DependencyType: cdk.stringToCloudFormation(properties.dependencyType),\n        VersionRequirement: cdk.stringToCloudFormation(properties.versionRequirement),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentVersionComponentDependencyRequirementPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponentVersion.ComponentDependencyRequirementProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponentVersion.ComponentDependencyRequirementProperty>();\n    ret.addPropertyResult('dependencyType', 'DependencyType', properties.DependencyType != null ? cfn_parse.FromCloudFormation.getString(properties.DependencyType) : undefined);\n    ret.addPropertyResult('versionRequirement', 'VersionRequirement', properties.VersionRequirement != null ? cfn_parse.FromCloudFormation.getString(properties.VersionRequirement) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponentVersion {\n                                                                                                                                                                                                                                                                                              \n    export interface ComponentPlatformProperty {\nn        readonly attributes?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentPlatformProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentPlatformProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponentVersion_ComponentPlatformPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attributes', cdk.hashValidator(cdk.validateString))(properties.attributes));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"ComponentPlatformProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.ComponentPlatform` resource\n *\n * @param properties - the TypeScript properties of a `ComponentPlatformProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.ComponentPlatform` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentVersionComponentPlatformPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponentVersion_ComponentPlatformPropertyValidator(properties).assertSuccess();\n    return {\n        Attributes: cdk.hashMapper(cdk.stringToCloudFormation)(properties.attributes),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentVersionComponentPlatformPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponentVersion.ComponentPlatformProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponentVersion.ComponentPlatformProperty>();\n    ret.addPropertyResult('attributes', 'Attributes', properties.Attributes != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Attributes) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponentVersion {\n                                                                                                                                                                                                                                                                                                                                      \n    export interface LambdaContainerParamsProperty {\n                                                                                                                                                                                                                                                                                                                              \n        readonly devices?: Array<CfnComponentVersion.LambdaDeviceMountProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly memorySizeInKb?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly mountRoSysfs?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                       \n        readonly volumes?: Array<CfnComponentVersion.LambdaVolumeMountProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaContainerParamsProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaContainerParamsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponentVersion_LambdaContainerParamsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('devices', cdk.listValidator(CfnComponentVersion_LambdaDeviceMountPropertyValidator))(properties.devices));\n    errors.collect(cdk.propertyValidator('memorySizeInKb', cdk.validateNumber)(properties.memorySizeInKb));\n    errors.collect(cdk.propertyValidator('mountRoSysfs', cdk.validateBoolean)(properties.mountRoSysfs));\n    errors.collect(cdk.propertyValidator('volumes', cdk.listValidator(CfnComponentVersion_LambdaVolumeMountPropertyValidator))(properties.volumes));\n    return errors.wrap('supplied properties not correct for \"LambdaContainerParamsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaContainerParams` resource\n *\n * @param properties - the TypeScript properties of a `LambdaContainerParamsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaContainerParams` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentVersionLambdaContainerParamsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponentVersion_LambdaContainerParamsPropertyValidator(properties).assertSuccess();\n    return {\n        Devices: cdk.listMapper(cfnComponentVersionLambdaDeviceMountPropertyToCloudFormation)(properties.devices),\n        MemorySizeInKB: cdk.numberToCloudFormation(properties.memorySizeInKb),\n        MountROSysfs: cdk.booleanToCloudFormation(properties.mountRoSysfs),\n        Volumes: cdk.listMapper(cfnComponentVersionLambdaVolumeMountPropertyToCloudFormation)(properties.volumes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentVersionLambdaContainerParamsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponentVersion.LambdaContainerParamsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponentVersion.LambdaContainerParamsProperty>();\n    ret.addPropertyResult('devices', 'Devices', properties.Devices != null ? cfn_parse.FromCloudFormation.getArray(CfnComponentVersionLambdaDeviceMountPropertyFromCloudFormation)(properties.Devices) : undefined);\n    ret.addPropertyResult('memorySizeInKb', 'MemorySizeInKB', properties.MemorySizeInKB != null ? cfn_parse.FromCloudFormation.getNumber(properties.MemorySizeInKB) : undefined);\n    ret.addPropertyResult('mountRoSysfs', 'MountROSysfs', properties.MountROSysfs != null ? cfn_parse.FromCloudFormation.getBoolean(properties.MountROSysfs) : undefined);\n    ret.addPropertyResult('volumes', 'Volumes', properties.Volumes != null ? cfn_parse.FromCloudFormation.getArray(CfnComponentVersionLambdaVolumeMountPropertyFromCloudFormation)(properties.Volumes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponentVersion {\n                                                                                                                                                                                                                                                                                                                 \n    export interface LambdaDeviceMountProperty {\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly addGroupOwner?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                           \n        readonly path?: string;\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly permission?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaDeviceMountProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaDeviceMountProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponentVersion_LambdaDeviceMountPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addGroupOwner', cdk.validateBoolean)(properties.addGroupOwner));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('permission', cdk.validateString)(properties.permission));\n    return errors.wrap('supplied properties not correct for \"LambdaDeviceMountProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaDeviceMount` resource\n *\n * @param properties - the TypeScript properties of a `LambdaDeviceMountProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaDeviceMount` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentVersionLambdaDeviceMountPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponentVersion_LambdaDeviceMountPropertyValidator(properties).assertSuccess();\n    return {\n        AddGroupOwner: cdk.booleanToCloudFormation(properties.addGroupOwner),\n        Path: cdk.stringToCloudFormation(properties.path),\n        Permission: cdk.stringToCloudFormation(properties.permission),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentVersionLambdaDeviceMountPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponentVersion.LambdaDeviceMountProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponentVersion.LambdaDeviceMountProperty>();\n    ret.addPropertyResult('addGroupOwner', 'AddGroupOwner', properties.AddGroupOwner != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AddGroupOwner) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addPropertyResult('permission', 'Permission', properties.Permission != null ? cfn_parse.FromCloudFormation.getString(properties.Permission) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponentVersion {\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface LambdaEventSourceProperty {\n                                                                                                                                                                                                                                                                                                                     \n        readonly topic?: string;\nn        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaEventSourceProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaEventSourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponentVersion_LambdaEventSourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('topic', cdk.validateString)(properties.topic));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"LambdaEventSourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaEventSource` resource\n *\n * @param properties - the TypeScript properties of a `LambdaEventSourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaEventSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentVersionLambdaEventSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponentVersion_LambdaEventSourcePropertyValidator(properties).assertSuccess();\n    return {\n        Topic: cdk.stringToCloudFormation(properties.topic),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentVersionLambdaEventSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponentVersion.LambdaEventSourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponentVersion.LambdaEventSourceProperty>();\n    ret.addPropertyResult('topic', 'Topic', properties.Topic != null ? cfn_parse.FromCloudFormation.getString(properties.Topic) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponentVersion {\n                                                                                                                                                                                                                                                                                                                 \n    export interface LambdaExecutionParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly environmentVariables?: { [key: string]: (string) } | cdk.IResolvable;\nn        readonly eventSources?: Array<CfnComponentVersion.LambdaEventSourceProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly execArgs?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly inputPayloadEncodingType?: string;\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly linuxProcessParams?: CfnComponentVersion.LambdaLinuxProcessParamsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly maxIdleTimeInSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly maxInstancesCount?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly maxQueueSize?: number;\nn        readonly pinned?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly statusTimeoutInSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                             \n        readonly timeoutInSeconds?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaExecutionParametersProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaExecutionParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponentVersion_LambdaExecutionParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('environmentVariables', cdk.hashValidator(cdk.validateString))(properties.environmentVariables));\n    errors.collect(cdk.propertyValidator('eventSources', cdk.listValidator(CfnComponentVersion_LambdaEventSourcePropertyValidator))(properties.eventSources));\n    errors.collect(cdk.propertyValidator('execArgs', cdk.listValidator(cdk.validateString))(properties.execArgs));\n    errors.collect(cdk.propertyValidator('inputPayloadEncodingType', cdk.validateString)(properties.inputPayloadEncodingType));\n    errors.collect(cdk.propertyValidator('linuxProcessParams', CfnComponentVersion_LambdaLinuxProcessParamsPropertyValidator)(properties.linuxProcessParams));\n    errors.collect(cdk.propertyValidator('maxIdleTimeInSeconds', cdk.validateNumber)(properties.maxIdleTimeInSeconds));\n    errors.collect(cdk.propertyValidator('maxInstancesCount', cdk.validateNumber)(properties.maxInstancesCount));\n    errors.collect(cdk.propertyValidator('maxQueueSize', cdk.validateNumber)(properties.maxQueueSize));\n    errors.collect(cdk.propertyValidator('pinned', cdk.validateBoolean)(properties.pinned));\n    errors.collect(cdk.propertyValidator('statusTimeoutInSeconds', cdk.validateNumber)(properties.statusTimeoutInSeconds));\n    errors.collect(cdk.propertyValidator('timeoutInSeconds', cdk.validateNumber)(properties.timeoutInSeconds));\n    return errors.wrap('supplied properties not correct for \"LambdaExecutionParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaExecutionParameters` resource\n *\n * @param properties - the TypeScript properties of a `LambdaExecutionParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaExecutionParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentVersionLambdaExecutionParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponentVersion_LambdaExecutionParametersPropertyValidator(properties).assertSuccess();\n    return {\n        EnvironmentVariables: cdk.hashMapper(cdk.stringToCloudFormation)(properties.environmentVariables),\n        EventSources: cdk.listMapper(cfnComponentVersionLambdaEventSourcePropertyToCloudFormation)(properties.eventSources),\n        ExecArgs: cdk.listMapper(cdk.stringToCloudFormation)(properties.execArgs),\n        InputPayloadEncodingType: cdk.stringToCloudFormation(properties.inputPayloadEncodingType),\n        LinuxProcessParams: cfnComponentVersionLambdaLinuxProcessParamsPropertyToCloudFormation(properties.linuxProcessParams),\n        MaxIdleTimeInSeconds: cdk.numberToCloudFormation(properties.maxIdleTimeInSeconds),\n        MaxInstancesCount: cdk.numberToCloudFormation(properties.maxInstancesCount),\n        MaxQueueSize: cdk.numberToCloudFormation(properties.maxQueueSize),\n        Pinned: cdk.booleanToCloudFormation(properties.pinned),\n        StatusTimeoutInSeconds: cdk.numberToCloudFormation(properties.statusTimeoutInSeconds),\n        TimeoutInSeconds: cdk.numberToCloudFormation(properties.timeoutInSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentVersionLambdaExecutionParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponentVersion.LambdaExecutionParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponentVersion.LambdaExecutionParametersProperty>();\n    ret.addPropertyResult('environmentVariables', 'EnvironmentVariables', properties.EnvironmentVariables != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.EnvironmentVariables) : undefined);\n    ret.addPropertyResult('eventSources', 'EventSources', properties.EventSources != null ? cfn_parse.FromCloudFormation.getArray(CfnComponentVersionLambdaEventSourcePropertyFromCloudFormation)(properties.EventSources) : undefined);\n    ret.addPropertyResult('execArgs', 'ExecArgs', properties.ExecArgs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExecArgs) : undefined);\n    ret.addPropertyResult('inputPayloadEncodingType', 'InputPayloadEncodingType', properties.InputPayloadEncodingType != null ? cfn_parse.FromCloudFormation.getString(properties.InputPayloadEncodingType) : undefined);\n    ret.addPropertyResult('linuxProcessParams', 'LinuxProcessParams', properties.LinuxProcessParams != null ? CfnComponentVersionLambdaLinuxProcessParamsPropertyFromCloudFormation(properties.LinuxProcessParams) : undefined);\n    ret.addPropertyResult('maxIdleTimeInSeconds', 'MaxIdleTimeInSeconds', properties.MaxIdleTimeInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxIdleTimeInSeconds) : undefined);\n    ret.addPropertyResult('maxInstancesCount', 'MaxInstancesCount', properties.MaxInstancesCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxInstancesCount) : undefined);\n    ret.addPropertyResult('maxQueueSize', 'MaxQueueSize', properties.MaxQueueSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxQueueSize) : undefined);\n    ret.addPropertyResult('pinned', 'Pinned', properties.Pinned != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Pinned) : undefined);\n    ret.addPropertyResult('statusTimeoutInSeconds', 'StatusTimeoutInSeconds', properties.StatusTimeoutInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.StatusTimeoutInSeconds) : undefined);\n    ret.addPropertyResult('timeoutInSeconds', 'TimeoutInSeconds', properties.TimeoutInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutInSeconds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponentVersion {\n                                                                                                                                                                                                                                                                                                                         \n    export interface LambdaFunctionRecipeSourceProperty {\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly componentDependencies?: { [key: string]: (CfnComponentVersion.ComponentDependencyRequirementProperty | cdk.IResolvable) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly componentLambdaParameters?: CfnComponentVersion.LambdaExecutionParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly componentName?: string;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly componentPlatforms?: Array<CfnComponentVersion.ComponentPlatformProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly componentVersion?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly lambdaArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaFunctionRecipeSourceProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaFunctionRecipeSourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponentVersion_LambdaFunctionRecipeSourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('componentDependencies', cdk.hashValidator(CfnComponentVersion_ComponentDependencyRequirementPropertyValidator))(properties.componentDependencies));\n    errors.collect(cdk.propertyValidator('componentLambdaParameters', CfnComponentVersion_LambdaExecutionParametersPropertyValidator)(properties.componentLambdaParameters));\n    errors.collect(cdk.propertyValidator('componentName', cdk.validateString)(properties.componentName));\n    errors.collect(cdk.propertyValidator('componentPlatforms', cdk.listValidator(CfnComponentVersion_ComponentPlatformPropertyValidator))(properties.componentPlatforms));\n    errors.collect(cdk.propertyValidator('componentVersion', cdk.validateString)(properties.componentVersion));\n    errors.collect(cdk.propertyValidator('lambdaArn', cdk.validateString)(properties.lambdaArn));\n    return errors.wrap('supplied properties not correct for \"LambdaFunctionRecipeSourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaFunctionRecipeSource` resource\n *\n * @param properties - the TypeScript properties of a `LambdaFunctionRecipeSourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaFunctionRecipeSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentVersionLambdaFunctionRecipeSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponentVersion_LambdaFunctionRecipeSourcePropertyValidator(properties).assertSuccess();\n    return {\n        ComponentDependencies: cdk.hashMapper(cfnComponentVersionComponentDependencyRequirementPropertyToCloudFormation)(properties.componentDependencies),\n        ComponentLambdaParameters: cfnComponentVersionLambdaExecutionParametersPropertyToCloudFormation(properties.componentLambdaParameters),\n        ComponentName: cdk.stringToCloudFormation(properties.componentName),\n        ComponentPlatforms: cdk.listMapper(cfnComponentVersionComponentPlatformPropertyToCloudFormation)(properties.componentPlatforms),\n        ComponentVersion: cdk.stringToCloudFormation(properties.componentVersion),\n        LambdaArn: cdk.stringToCloudFormation(properties.lambdaArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentVersionLambdaFunctionRecipeSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponentVersion.LambdaFunctionRecipeSourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponentVersion.LambdaFunctionRecipeSourceProperty>();\n    ret.addPropertyResult('componentDependencies', 'ComponentDependencies', properties.ComponentDependencies != null ? cfn_parse.FromCloudFormation.getMap(CfnComponentVersionComponentDependencyRequirementPropertyFromCloudFormation)(properties.ComponentDependencies) : undefined);\n    ret.addPropertyResult('componentLambdaParameters', 'ComponentLambdaParameters', properties.ComponentLambdaParameters != null ? CfnComponentVersionLambdaExecutionParametersPropertyFromCloudFormation(properties.ComponentLambdaParameters) : undefined);\n    ret.addPropertyResult('componentName', 'ComponentName', properties.ComponentName != null ? cfn_parse.FromCloudFormation.getString(properties.ComponentName) : undefined);\n    ret.addPropertyResult('componentPlatforms', 'ComponentPlatforms', properties.ComponentPlatforms != null ? cfn_parse.FromCloudFormation.getArray(CfnComponentVersionComponentPlatformPropertyFromCloudFormation)(properties.ComponentPlatforms) : undefined);\n    ret.addPropertyResult('componentVersion', 'ComponentVersion', properties.ComponentVersion != null ? cfn_parse.FromCloudFormation.getString(properties.ComponentVersion) : undefined);\n    ret.addPropertyResult('lambdaArn', 'LambdaArn', properties.LambdaArn != null ? cfn_parse.FromCloudFormation.getString(properties.LambdaArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponentVersion {\n                                                                                                                                                                                                                                                                                                                  \n    export interface LambdaLinuxProcessParamsProperty {\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly containerParams?: CfnComponentVersion.LambdaContainerParamsProperty | cdk.IResolvable;\nn        readonly isolationMode?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaLinuxProcessParamsProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaLinuxProcessParamsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponentVersion_LambdaLinuxProcessParamsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerParams', CfnComponentVersion_LambdaContainerParamsPropertyValidator)(properties.containerParams));\n    errors.collect(cdk.propertyValidator('isolationMode', cdk.validateString)(properties.isolationMode));\n    return errors.wrap('supplied properties not correct for \"LambdaLinuxProcessParamsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaLinuxProcessParams` resource\n *\n * @param properties - the TypeScript properties of a `LambdaLinuxProcessParamsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaLinuxProcessParams` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentVersionLambdaLinuxProcessParamsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponentVersion_LambdaLinuxProcessParamsPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerParams: cfnComponentVersionLambdaContainerParamsPropertyToCloudFormation(properties.containerParams),\n        IsolationMode: cdk.stringToCloudFormation(properties.isolationMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentVersionLambdaLinuxProcessParamsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponentVersion.LambdaLinuxProcessParamsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponentVersion.LambdaLinuxProcessParamsProperty>();\n    ret.addPropertyResult('containerParams', 'ContainerParams', properties.ContainerParams != null ? CfnComponentVersionLambdaContainerParamsPropertyFromCloudFormation(properties.ContainerParams) : undefined);\n    ret.addPropertyResult('isolationMode', 'IsolationMode', properties.IsolationMode != null ? cfn_parse.FromCloudFormation.getString(properties.IsolationMode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnComponentVersion {\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface LambdaVolumeMountProperty {\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly addGroupOwner?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                       \n        readonly destinationPath?: string;\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly permission?: string;\n                                                                                                                                                                                                                                                                                                                   \n        readonly sourcePath?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaVolumeMountProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaVolumeMountProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponentVersion_LambdaVolumeMountPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addGroupOwner', cdk.validateBoolean)(properties.addGroupOwner));\n    errors.collect(cdk.propertyValidator('destinationPath', cdk.validateString)(properties.destinationPath));\n    errors.collect(cdk.propertyValidator('permission', cdk.validateString)(properties.permission));\n    errors.collect(cdk.propertyValidator('sourcePath', cdk.validateString)(properties.sourcePath));\n    return errors.wrap('supplied properties not correct for \"LambdaVolumeMountProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaVolumeMount` resource\n *\n * @param properties - the TypeScript properties of a `LambdaVolumeMountProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GreengrassV2::ComponentVersion.LambdaVolumeMount` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentVersionLambdaVolumeMountPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponentVersion_LambdaVolumeMountPropertyValidator(properties).assertSuccess();\n    return {\n        AddGroupOwner: cdk.booleanToCloudFormation(properties.addGroupOwner),\n        DestinationPath: cdk.stringToCloudFormation(properties.destinationPath),\n        Permission: cdk.stringToCloudFormation(properties.permission),\n        SourcePath: cdk.stringToCloudFormation(properties.sourcePath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentVersionLambdaVolumeMountPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponentVersion.LambdaVolumeMountProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponentVersion.LambdaVolumeMountProperty>();\n    ret.addPropertyResult('addGroupOwner', 'AddGroupOwner', properties.AddGroupOwner != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AddGroupOwner) : undefined);\n    ret.addPropertyResult('destinationPath', 'DestinationPath', properties.DestinationPath != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationPath) : undefined);\n    ret.addPropertyResult('permission', 'Permission', properties.Permission != null ? cfn_parse.FromCloudFormation.getString(properties.Permission) : undefined);\n    ret.addPropertyResult('sourcePath', 'SourcePath', properties.SourcePath != null ? cfn_parse.FromCloudFormation.getString(properties.SourcePath) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
