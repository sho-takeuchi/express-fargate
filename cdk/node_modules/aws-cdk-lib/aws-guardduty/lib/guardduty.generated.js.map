{
  "version": 3,
  "sources": ["guardduty.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:31.346Z\",\"fingerprint\":\"djKL5YWml4YRYxP+K66hRxecM3j4ta23qBNN+cODC8U=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                      \nexport interface CfnDetectorProps {\n\n                                                                                                                                                                                                                                        \n    readonly enable: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                               \n    readonly dataSources?: CfnDetector.CFNDataSourceConfigurationsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                       \n    readonly findingPublishingFrequency?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDetectorProps`\n *\n * @param properties - the TypeScript properties of a `CfnDetectorProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataSources', CfnDetector_CFNDataSourceConfigurationsPropertyValidator)(properties.dataSources));\n    errors.collect(cdk.propertyValidator('enable', cdk.requiredValidator)(properties.enable));\n    errors.collect(cdk.propertyValidator('enable', cdk.validateBoolean)(properties.enable));\n    errors.collect(cdk.propertyValidator('findingPublishingFrequency', cdk.validateString)(properties.findingPublishingFrequency));\n    return errors.wrap('supplied properties not correct for \"CfnDetectorProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GuardDuty::Detector` resource\n *\n * @param properties - the TypeScript properties of a `CfnDetectorProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GuardDuty::Detector` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorPropsValidator(properties).assertSuccess();\n    return {\n        Enable: cdk.booleanToCloudFormation(properties.enable),\n        DataSources: cfnDetectorCFNDataSourceConfigurationsPropertyToCloudFormation(properties.dataSources),\n        FindingPublishingFrequency: cdk.stringToCloudFormation(properties.findingPublishingFrequency),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorProps>();\n    ret.addPropertyResult('enable', 'Enable', cfn_parse.FromCloudFormation.getBoolean(properties.Enable));\n    ret.addPropertyResult('dataSources', 'DataSources', properties.DataSources != null ? CfnDetectorCFNDataSourceConfigurationsPropertyFromCloudFormation(properties.DataSources) : undefined);\n    ret.addPropertyResult('findingPublishingFrequency', 'FindingPublishingFrequency', properties.FindingPublishingFrequency != null ? cfn_parse.FromCloudFormation.getString(properties.FindingPublishingFrequency) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport class CfnDetector extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GuardDuty::Detector\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDetector {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDetectorPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDetector(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                        \n    public enable: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                               \n    public dataSources: CfnDetector.CFNDataSourceConfigurationsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                       \n    public findingPublishingFrequency: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnDetectorProps) {\n        super(scope, id, { type: CfnDetector.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'enable', this);\n\n        this.enable = props.enable;\n        this.dataSources = props.dataSources;\n        this.findingPublishingFrequency = props.findingPublishingFrequency;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDetector.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            enable: this.enable,\n            dataSources: this.dataSources,\n            findingPublishingFrequency: this.findingPublishingFrequency,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDetectorPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDetector {\n                                                                                                                                                                                                                                                                                                                                \n    export interface CFNDataSourceConfigurationsProperty {\n                                                                                                                                                                                                                                                                                                                            \n        readonly s3Logs?: CfnDetector.CFNS3LogsConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CFNDataSourceConfigurationsProperty`\n *\n * @param properties - the TypeScript properties of a `CFNDataSourceConfigurationsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetector_CFNDataSourceConfigurationsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Logs', CfnDetector_CFNS3LogsConfigurationPropertyValidator)(properties.s3Logs));\n    return errors.wrap('supplied properties not correct for \"CFNDataSourceConfigurationsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GuardDuty::Detector.CFNDataSourceConfigurations` resource\n *\n * @param properties - the TypeScript properties of a `CFNDataSourceConfigurationsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GuardDuty::Detector.CFNDataSourceConfigurations` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorCFNDataSourceConfigurationsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetector_CFNDataSourceConfigurationsPropertyValidator(properties).assertSuccess();\n    return {\n        S3Logs: cfnDetectorCFNS3LogsConfigurationPropertyToCloudFormation(properties.s3Logs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorCFNDataSourceConfigurationsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetector.CFNDataSourceConfigurationsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetector.CFNDataSourceConfigurationsProperty>();\n    ret.addPropertyResult('s3Logs', 'S3Logs', properties.S3Logs != null ? CfnDetectorCFNS3LogsConfigurationPropertyFromCloudFormation(properties.S3Logs) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetector {\n                                                                                                                                                                                                                                                                                                                           \n    export interface CFNS3LogsConfigurationProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly enable?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CFNS3LogsConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `CFNS3LogsConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetector_CFNS3LogsConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enable', cdk.validateBoolean)(properties.enable));\n    return errors.wrap('supplied properties not correct for \"CFNS3LogsConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GuardDuty::Detector.CFNS3LogsConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CFNS3LogsConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GuardDuty::Detector.CFNS3LogsConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorCFNS3LogsConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetector_CFNS3LogsConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Enable: cdk.booleanToCloudFormation(properties.enable),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorCFNS3LogsConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetector.CFNS3LogsConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetector.CFNS3LogsConfigurationProperty>();\n    ret.addPropertyResult('enable', 'Enable', properties.Enable != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enable) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                  \nexport interface CfnFilterProps {\n\n                                                                                                                                                                                                                                                         \n    readonly action: string;\n\n                                                                                                                                                                                                           \n    readonly description: string;\n\n                                                                                                                                                                                                                                                                           \n    readonly detectorId: string;\n\n                                                                                                                                                                                                                                                        \n    readonly findingCriteria: CfnFilter.FindingCriteriaProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                         \n    readonly name: string;\n\nn    readonly rank: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFilterProps`\n *\n * @param properties - the TypeScript properties of a `CfnFilterProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFilterPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('action', cdk.requiredValidator)(properties.action));\n    errors.collect(cdk.propertyValidator('action', cdk.validateString)(properties.action));\n    errors.collect(cdk.propertyValidator('description', cdk.requiredValidator)(properties.description));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('detectorId', cdk.requiredValidator)(properties.detectorId));\n    errors.collect(cdk.propertyValidator('detectorId', cdk.validateString)(properties.detectorId));\n    errors.collect(cdk.propertyValidator('findingCriteria', cdk.requiredValidator)(properties.findingCriteria));\n    errors.collect(cdk.propertyValidator('findingCriteria', CfnFilter_FindingCriteriaPropertyValidator)(properties.findingCriteria));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('rank', cdk.requiredValidator)(properties.rank));\n    errors.collect(cdk.propertyValidator('rank', cdk.validateNumber)(properties.rank));\n    return errors.wrap('supplied properties not correct for \"CfnFilterProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GuardDuty::Filter` resource\n *\n * @param properties - the TypeScript properties of a `CfnFilterProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GuardDuty::Filter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFilterPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFilterPropsValidator(properties).assertSuccess();\n    return {\n        Action: cdk.stringToCloudFormation(properties.action),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DetectorId: cdk.stringToCloudFormation(properties.detectorId),\n        FindingCriteria: cfnFilterFindingCriteriaPropertyToCloudFormation(properties.findingCriteria),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Rank: cdk.numberToCloudFormation(properties.rank),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFilterPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFilterProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFilterProps>();\n    ret.addPropertyResult('action', 'Action', cfn_parse.FromCloudFormation.getString(properties.Action));\n    ret.addPropertyResult('description', 'Description', cfn_parse.FromCloudFormation.getString(properties.Description));\n    ret.addPropertyResult('detectorId', 'DetectorId', cfn_parse.FromCloudFormation.getString(properties.DetectorId));\n    ret.addPropertyResult('findingCriteria', 'FindingCriteria', CfnFilterFindingCriteriaPropertyFromCloudFormation(properties.FindingCriteria));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('rank', 'Rank', cfn_parse.FromCloudFormation.getNumber(properties.Rank));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                            \nexport class CfnFilter extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GuardDuty::Filter\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFilter {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFilterPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFilter(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                         \n    public action: string;\n\n                                                                                                                                                                                                           \n    public description: string;\n\n                                                                                                                                                                                                                                                                           \n    public detectorId: string;\n\n                                                                                                                                                                                                                                                        \n    public findingCriteria: CfnFilter.FindingCriteriaProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                         \n    public name: string;\n\nn    public rank: number;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnFilterProps) {\n        super(scope, id, { type: CfnFilter.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'action', this);\n        cdk.requireProperty(props, 'description', this);\n        cdk.requireProperty(props, 'detectorId', this);\n        cdk.requireProperty(props, 'findingCriteria', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'rank', this);\n\n        this.action = props.action;\n        this.description = props.description;\n        this.detectorId = props.detectorId;\n        this.findingCriteria = props.findingCriteria;\n        this.name = props.name;\n        this.rank = props.rank;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFilter.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            action: this.action,\n            description: this.description,\n            detectorId: this.detectorId,\n            findingCriteria: this.findingCriteria,\n            name: this.name,\n            rank: this.rank,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFilterPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnFilter {\n                                                                                                                                                                                                                                                                                             \n    export interface ConditionProperty {\n                                                                                                                                                                                                                                                                                                   \n        readonly eq?: string[];\n                                                                                                                                                                                                                                                                                                                    \n        readonly gte?: number;\n                                                                                                                                                                                                                                                                                                       \n        readonly lt?: number;\n                                                                                                                                                                                                                                                                                                                 \n        readonly lte?: number;\n                                                                                                                                                                                                                                                                                                        \n        readonly neq?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConditionProperty`\n *\n * @param properties - the TypeScript properties of a `ConditionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFilter_ConditionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('eq', cdk.listValidator(cdk.validateString))(properties.eq));\n    errors.collect(cdk.propertyValidator('gte', cdk.validateNumber)(properties.gte));\n    errors.collect(cdk.propertyValidator('lt', cdk.validateNumber)(properties.lt));\n    errors.collect(cdk.propertyValidator('lte', cdk.validateNumber)(properties.lte));\n    errors.collect(cdk.propertyValidator('neq', cdk.listValidator(cdk.validateString))(properties.neq));\n    return errors.wrap('supplied properties not correct for \"ConditionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GuardDuty::Filter.Condition` resource\n *\n * @param properties - the TypeScript properties of a `ConditionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GuardDuty::Filter.Condition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFilterConditionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFilter_ConditionPropertyValidator(properties).assertSuccess();\n    return {\n        Eq: cdk.listMapper(cdk.stringToCloudFormation)(properties.eq),\n        Gte: cdk.numberToCloudFormation(properties.gte),\n        Lt: cdk.numberToCloudFormation(properties.lt),\n        Lte: cdk.numberToCloudFormation(properties.lte),\n        Neq: cdk.listMapper(cdk.stringToCloudFormation)(properties.neq),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFilterConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFilter.ConditionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFilter.ConditionProperty>();\n    ret.addPropertyResult('eq', 'Eq', properties.Eq != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Eq) : undefined);\n    ret.addPropertyResult('gte', 'Gte', properties.Gte != null ? cfn_parse.FromCloudFormation.getNumber(properties.Gte) : undefined);\n    ret.addPropertyResult('lt', 'Lt', properties.Lt != null ? cfn_parse.FromCloudFormation.getNumber(properties.Lt) : undefined);\n    ret.addPropertyResult('lte', 'Lte', properties.Lte != null ? cfn_parse.FromCloudFormation.getNumber(properties.Lte) : undefined);\n    ret.addPropertyResult('neq', 'Neq', properties.Neq != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Neq) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFilter {\n                                                                                                                                                                                                                                                                                                                        \n    export interface FindingCriteriaProperty {\nn        readonly criterion?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                        \n        readonly itemType?: CfnFilter.ConditionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FindingCriteriaProperty`\n *\n * @param properties - the TypeScript properties of a `FindingCriteriaProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFilter_FindingCriteriaPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('criterion', cdk.validateObject)(properties.criterion));\n    errors.collect(cdk.propertyValidator('itemType', CfnFilter_ConditionPropertyValidator)(properties.itemType));\n    return errors.wrap('supplied properties not correct for \"FindingCriteriaProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GuardDuty::Filter.FindingCriteria` resource\n *\n * @param properties - the TypeScript properties of a `FindingCriteriaProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GuardDuty::Filter.FindingCriteria` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFilterFindingCriteriaPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFilter_FindingCriteriaPropertyValidator(properties).assertSuccess();\n    return {\n        Criterion: cdk.objectToCloudFormation(properties.criterion),\n        ItemType: cfnFilterConditionPropertyToCloudFormation(properties.itemType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFilterFindingCriteriaPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFilter.FindingCriteriaProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFilter.FindingCriteriaProperty>();\n    ret.addPropertyResult('criterion', 'Criterion', properties.Criterion != null ? cfn_parse.FromCloudFormation.getAny(properties.Criterion) : undefined);\n    ret.addPropertyResult('itemType', 'ItemType', properties.ItemType != null ? CfnFilterConditionPropertyFromCloudFormation(properties.ItemType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                \nexport interface CfnIPSetProps {\n\n                                                                                                                                                                                                                    \n    readonly activate: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                      \n    readonly detectorId: string;\n\n                                                                                                                                                                                                                     \n    readonly format: string;\n\n                                                                                                                                                                                                                    \n    readonly location: string;\n\n                                                                                                                                                                                                                                                                                                               \n    readonly name?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnIPSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnIPSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnIPSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('activate', cdk.requiredValidator)(properties.activate));\n    errors.collect(cdk.propertyValidator('activate', cdk.validateBoolean)(properties.activate));\n    errors.collect(cdk.propertyValidator('detectorId', cdk.requiredValidator)(properties.detectorId));\n    errors.collect(cdk.propertyValidator('detectorId', cdk.validateString)(properties.detectorId));\n    errors.collect(cdk.propertyValidator('format', cdk.requiredValidator)(properties.format));\n    errors.collect(cdk.propertyValidator('format', cdk.validateString)(properties.format));\n    errors.collect(cdk.propertyValidator('location', cdk.requiredValidator)(properties.location));\n    errors.collect(cdk.propertyValidator('location', cdk.validateString)(properties.location));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CfnIPSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GuardDuty::IPSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnIPSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GuardDuty::IPSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIPSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIPSetPropsValidator(properties).assertSuccess();\n    return {\n        Activate: cdk.booleanToCloudFormation(properties.activate),\n        DetectorId: cdk.stringToCloudFormation(properties.detectorId),\n        Format: cdk.stringToCloudFormation(properties.format),\n        Location: cdk.stringToCloudFormation(properties.location),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIPSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIPSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIPSetProps>();\n    ret.addPropertyResult('activate', 'Activate', cfn_parse.FromCloudFormation.getBoolean(properties.Activate));\n    ret.addPropertyResult('detectorId', 'DetectorId', cfn_parse.FromCloudFormation.getString(properties.DetectorId));\n    ret.addPropertyResult('format', 'Format', cfn_parse.FromCloudFormation.getString(properties.Format));\n    ret.addPropertyResult('location', 'Location', cfn_parse.FromCloudFormation.getString(properties.Location));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnIPSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GuardDuty::IPSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnIPSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnIPSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnIPSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                    \n    public activate: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                      \n    public detectorId: string;\n\n                                                                                                                                                                                                                     \n    public format: string;\n\n                                                                                                                                                                                                                    \n    public location: string;\n\n                                                                                                                                                                                                                                                                                                               \n    public name: string | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnIPSetProps) {\n        super(scope, id, { type: CfnIPSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'activate', this);\n        cdk.requireProperty(props, 'detectorId', this);\n        cdk.requireProperty(props, 'format', this);\n        cdk.requireProperty(props, 'location', this);\n\n        this.activate = props.activate;\n        this.detectorId = props.detectorId;\n        this.format = props.format;\n        this.location = props.location;\n        this.name = props.name;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnIPSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            activate: this.activate,\n            detectorId: this.detectorId,\n            format: this.format,\n            location: this.location,\n            name: this.name,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnIPSetPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                  \nexport interface CfnMasterProps {\n\n                                                                                                                                                                                                                                          \n    readonly detectorId: string;\n\n                                                                                                                                                                                                                                                     \n    readonly masterId: string;\n\n                                                                                                                                                                                                                                                                                                                                                 \n    readonly invitationId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMasterProps`\n *\n * @param properties - the TypeScript properties of a `CfnMasterProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMasterPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('detectorId', cdk.requiredValidator)(properties.detectorId));\n    errors.collect(cdk.propertyValidator('detectorId', cdk.validateString)(properties.detectorId));\n    errors.collect(cdk.propertyValidator('invitationId', cdk.validateString)(properties.invitationId));\n    errors.collect(cdk.propertyValidator('masterId', cdk.requiredValidator)(properties.masterId));\n    errors.collect(cdk.propertyValidator('masterId', cdk.validateString)(properties.masterId));\n    return errors.wrap('supplied properties not correct for \"CfnMasterProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GuardDuty::Master` resource\n *\n * @param properties - the TypeScript properties of a `CfnMasterProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GuardDuty::Master` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMasterPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMasterPropsValidator(properties).assertSuccess();\n    return {\n        DetectorId: cdk.stringToCloudFormation(properties.detectorId),\n        MasterId: cdk.stringToCloudFormation(properties.masterId),\n        InvitationId: cdk.stringToCloudFormation(properties.invitationId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMasterPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMasterProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMasterProps>();\n    ret.addPropertyResult('detectorId', 'DetectorId', cfn_parse.FromCloudFormation.getString(properties.DetectorId));\n    ret.addPropertyResult('masterId', 'MasterId', cfn_parse.FromCloudFormation.getString(properties.MasterId));\n    ret.addPropertyResult('invitationId', 'InvitationId', properties.InvitationId != null ? cfn_parse.FromCloudFormation.getString(properties.InvitationId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnMaster extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GuardDuty::Master\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMaster {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMasterPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMaster(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                          \n    public detectorId: string;\n\n                                                                                                                                                                                                                                                     \n    public masterId: string;\n\n                                                                                                                                                                                                                                                                                                                                                 \n    public invitationId: string | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnMasterProps) {\n        super(scope, id, { type: CfnMaster.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'detectorId', this);\n        cdk.requireProperty(props, 'masterId', this);\n\n        this.detectorId = props.detectorId;\n        this.masterId = props.masterId;\n        this.invitationId = props.invitationId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMaster.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            detectorId: this.detectorId,\n            masterId: this.masterId,\n            invitationId: this.invitationId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMasterPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                  \nexport interface CfnMemberProps {\n\n                                                                                                                                                                                                                                                     \n    readonly detectorId: string;\n\n                                                                                                                                                                                                                            \n    readonly email: string;\n\n                                                                                                                                                                                                                                     \n    readonly memberId: string;\n\n                                                                                                                                                                                                                                                                                        \n    readonly disableEmailNotification?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                   \n    readonly message?: string;\n\nn    readonly status?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMemberProps`\n *\n * @param properties - the TypeScript properties of a `CfnMemberProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMemberPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('detectorId', cdk.requiredValidator)(properties.detectorId));\n    errors.collect(cdk.propertyValidator('detectorId', cdk.validateString)(properties.detectorId));\n    errors.collect(cdk.propertyValidator('disableEmailNotification', cdk.validateBoolean)(properties.disableEmailNotification));\n    errors.collect(cdk.propertyValidator('email', cdk.requiredValidator)(properties.email));\n    errors.collect(cdk.propertyValidator('email', cdk.validateString)(properties.email));\n    errors.collect(cdk.propertyValidator('memberId', cdk.requiredValidator)(properties.memberId));\n    errors.collect(cdk.propertyValidator('memberId', cdk.validateString)(properties.memberId));\n    errors.collect(cdk.propertyValidator('message', cdk.validateString)(properties.message));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"CfnMemberProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GuardDuty::Member` resource\n *\n * @param properties - the TypeScript properties of a `CfnMemberProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GuardDuty::Member` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMemberPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMemberPropsValidator(properties).assertSuccess();\n    return {\n        DetectorId: cdk.stringToCloudFormation(properties.detectorId),\n        Email: cdk.stringToCloudFormation(properties.email),\n        MemberId: cdk.stringToCloudFormation(properties.memberId),\n        DisableEmailNotification: cdk.booleanToCloudFormation(properties.disableEmailNotification),\n        Message: cdk.stringToCloudFormation(properties.message),\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMemberPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMemberProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMemberProps>();\n    ret.addPropertyResult('detectorId', 'DetectorId', cfn_parse.FromCloudFormation.getString(properties.DetectorId));\n    ret.addPropertyResult('email', 'Email', cfn_parse.FromCloudFormation.getString(properties.Email));\n    ret.addPropertyResult('memberId', 'MemberId', cfn_parse.FromCloudFormation.getString(properties.MemberId));\n    ret.addPropertyResult('disableEmailNotification', 'DisableEmailNotification', properties.DisableEmailNotification != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableEmailNotification) : undefined);\n    ret.addPropertyResult('message', 'Message', properties.Message != null ? cfn_parse.FromCloudFormation.getString(properties.Message) : undefined);\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnMember extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GuardDuty::Member\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMember {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMemberPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMember(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                     \n    public detectorId: string;\n\n                                                                                                                                                                                                                            \n    public email: string;\n\n                                                                                                                                                                                                                                     \n    public memberId: string;\n\n                                                                                                                                                                                                                                                                                        \n    public disableEmailNotification: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                   \n    public message: string | undefined;\n\nn    public status: string | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnMemberProps) {\n        super(scope, id, { type: CfnMember.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'detectorId', this);\n        cdk.requireProperty(props, 'email', this);\n        cdk.requireProperty(props, 'memberId', this);\n\n        this.detectorId = props.detectorId;\n        this.email = props.email;\n        this.memberId = props.memberId;\n        this.disableEmailNotification = props.disableEmailNotification;\n        this.message = props.message;\n        this.status = props.status;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMember.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            detectorId: this.detectorId,\n            email: this.email,\n            memberId: this.memberId,\n            disableEmailNotification: this.disableEmailNotification,\n            message: this.message,\n            status: this.status,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMemberPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                  \nexport interface CfnThreatIntelSetProps {\n\n                                                                                                                                                                                                                                                                                         \n    readonly activate: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                \n    readonly detectorId: string;\n\n                                                                                                                                                                                                                                                \n    readonly format: string;\n\n                                                                                                                                                                                                                                               \n    readonly location: string;\n\n                                                                                                                                                                                                                                                                                                                                              \n    readonly name?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnThreatIntelSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnThreatIntelSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnThreatIntelSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('activate', cdk.requiredValidator)(properties.activate));\n    errors.collect(cdk.propertyValidator('activate', cdk.validateBoolean)(properties.activate));\n    errors.collect(cdk.propertyValidator('detectorId', cdk.requiredValidator)(properties.detectorId));\n    errors.collect(cdk.propertyValidator('detectorId', cdk.validateString)(properties.detectorId));\n    errors.collect(cdk.propertyValidator('format', cdk.requiredValidator)(properties.format));\n    errors.collect(cdk.propertyValidator('format', cdk.validateString)(properties.format));\n    errors.collect(cdk.propertyValidator('location', cdk.requiredValidator)(properties.location));\n    errors.collect(cdk.propertyValidator('location', cdk.validateString)(properties.location));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CfnThreatIntelSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::GuardDuty::ThreatIntelSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnThreatIntelSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::GuardDuty::ThreatIntelSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThreatIntelSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnThreatIntelSetPropsValidator(properties).assertSuccess();\n    return {\n        Activate: cdk.booleanToCloudFormation(properties.activate),\n        DetectorId: cdk.stringToCloudFormation(properties.detectorId),\n        Format: cdk.stringToCloudFormation(properties.format),\n        Location: cdk.stringToCloudFormation(properties.location),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThreatIntelSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnThreatIntelSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnThreatIntelSetProps>();\n    ret.addPropertyResult('activate', 'Activate', cfn_parse.FromCloudFormation.getBoolean(properties.Activate));\n    ret.addPropertyResult('detectorId', 'DetectorId', cfn_parse.FromCloudFormation.getString(properties.DetectorId));\n    ret.addPropertyResult('format', 'Format', cfn_parse.FromCloudFormation.getString(properties.Format));\n    ret.addPropertyResult('location', 'Location', cfn_parse.FromCloudFormation.getString(properties.Location));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnThreatIntelSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::GuardDuty::ThreatIntelSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnThreatIntelSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnThreatIntelSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnThreatIntelSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                         \n    public activate: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                \n    public detectorId: string;\n\n                                                                                                                                                                                                                                                \n    public format: string;\n\n                                                                                                                                                                                                                                               \n    public location: string;\n\n                                                                                                                                                                                                                                                                                                                                              \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnThreatIntelSetProps) {\n        super(scope, id, { type: CfnThreatIntelSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'activate', this);\n        cdk.requireProperty(props, 'detectorId', this);\n        cdk.requireProperty(props, 'format', this);\n        cdk.requireProperty(props, 'location', this);\n\n        this.activate = props.activate;\n        this.detectorId = props.detectorId;\n        this.format = props.format;\n        this.location = props.location;\n        this.name = props.name;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnThreatIntelSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            activate: this.activate,\n            detectorId: this.detectorId,\n            format: this.format,\n            location: this.location,\n            name: this.name,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnThreatIntelSetPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
