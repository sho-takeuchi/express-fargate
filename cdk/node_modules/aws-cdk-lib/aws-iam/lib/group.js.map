{
  "version": 3,
  "sources": ["group.ts"],
  "sourcesContent": ["import { ArnFormat, Lazy, Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnGroup } from './iam.generated';\nimport { IIdentity } from './identity-base';\nimport { IManagedPolicy } from './managed-policy';\nimport { Policy } from './policy';\nimport { PolicyStatement } from './policy-statement';\nimport { AddToPrincipalPolicyResult, ArnPrincipal, IPrincipal, PrincipalPolicyFragment } from './principals';\nimport { IUser } from './user';\nimport { AttachedPolicies } from './util';\n\n                                                                                                              \nexport interface IGroup extends IIdentity {\n                                                                \n  readonly groupName: string;\n\n                                                               \n  readonly groupArn: string;\n}\n\n                                               \nexport interface GroupProps {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n  readonly groupName?: string;\n\n                                                                                                                                                                                                                                                \n  readonly managedPolicies?: IManagedPolicy[];\n\n                                                                                                                                                                                                                                        \n  readonly path?: string;\n}\n\nabstract class GroupBase extends Resource implements IGroup {\n  public abstract readonly groupName: string;\n  public abstract readonly groupArn: string;\n\n  public readonly grantPrincipal: IPrincipal = this;\n  public readonly principalAccount: string | undefined = this.env.account;\n  public readonly assumeRoleAction: string = 'sts:AssumeRole';\n\n  private readonly attachedPolicies = new AttachedPolicies();\n  private defaultPolicy?: Policy;\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new ArnPrincipal(this.groupArn).policyFragment;\n  }\n\n                                                                                          \n  public attachInlinePolicy(policy: Policy) {\n    this.attachedPolicies.attach(policy);\n    policy.attachToGroup(this);\n  }\n\n  public addManagedPolicy(_policy: IManagedPolicy) {\n    // drop\n  }\n\n                                           \n  public addUser(user: IUser) {\n    user.addToGroup(this);\n  }\n\n                                                             \n  public addToPrincipalPolicy(statement: PolicyStatement): AddToPrincipalPolicyResult {\n    if (!this.defaultPolicy) {\n      this.defaultPolicy = new Policy(this, 'DefaultPolicy');\n      this.defaultPolicy.attachToGroup(this);\n    }\n\n    this.defaultPolicy.addStatements(statement);\n    return { statementAdded: true, policyDependable: this.defaultPolicy };\n  }\n\n  public addToPolicy(statement: PolicyStatement): boolean {\n    return this.addToPrincipalPolicy(statement).statementAdded;\n  }\n}\n\n                                                                                                                                                                                                                                                \nexport class Group extends GroupBase {\nn  public static fromGroupArn(scope: Construct, id: string, groupArn: string): IGroup {\n    const arnComponents = Stack.of(scope).splitArn(groupArn, ArnFormat.SLASH_RESOURCE_NAME);\n    const groupName = arnComponents.resourceName!;\n    class Import extends GroupBase {\n      public groupName = groupName;\n      public groupArn = groupArn;\n      public principalAccount = arnComponents.account;\n    }\n\n    return new Import(scope, id);\n  }\n\n                                                                                                                                                                                                                                                                               \n  static fromGroupName(scope: Construct, id: string, groupName: string) {\n    const groupArn = Stack.of(scope).formatArn({\n      service: 'iam',\n      region: '',\n      resource: 'group',\n      resourceName: groupName,\n    });\n    return Group.fromGroupArn(scope, id, groupArn);\n  }\n\n  public readonly groupName: string;\n  public readonly groupArn: string;\n\n  private readonly managedPolicies: IManagedPolicy[] = [];\n\n  constructor(scope: Construct, id: string, props: GroupProps = {}) {\n    super(scope, id, {\n      physicalName: props.groupName,\n    });\n\n    this.managedPolicies.push(...props.managedPolicies || []);\n\n    const group = new CfnGroup(this, 'Resource', {\n      groupName: this.physicalName,\n      managedPolicyArns: Lazy.list({ produce: () => this.managedPolicies.map(p => p.managedPolicyArn) }, { omitEmpty: true }),\n      path: props.path,\n    });\n\n    this.groupName = this.getResourceNameAttribute(group.ref);\n    this.groupArn = this.getResourceArnAttribute(group.attrArn, {\n      region: '', // IAM is global in each partition\n      service: 'iam',\n      resource: 'group',\n      resourceName: this.physicalName,\n    });\n  }\n\n                                                                                                          \n  public addManagedPolicy(policy: IManagedPolicy) {\n    if (this.managedPolicies.find(mp => mp === policy)) { return; }\n    this.managedPolicies.push(policy);\n  }\n}\n"],
  "mappings": "4MAAA,OAAA,QAAA,cAEA,gBAAA,QAAA,mBAGA,SAAA,QAAA,YAEA,aAAA,QAAA,gBAEA,OAAA,QAAA,UAuBA,uBAAiC,QAAA,QAAQ,CAAzC,aAAA,qBAIkB,KAAA,eAA6B,KAC7B,KAAA,iBAAuC,KAAK,IAAI,QAChD,KAAA,iBAA2B,iBAE1B,KAAA,iBAAmB,GAAI,QAAA,oBAG7B,iBAAc,CACvB,MAAO,IAAI,cAAA,aAAa,KAAK,UAAU,eAIlC,mBAAmB,OAAc,CACtC,KAAK,iBAAiB,OAAO,QAC7B,OAAO,cAAc,MAGhB,iBAAiB,QAAuB,EAKxC,QAAQ,KAAW,CACxB,KAAK,WAAW,MAIX,qBAAqB,UAA0B,CACpD,MAAK,MAAK,eACR,MAAK,cAAgB,GAAI,UAAA,OAAO,KAAM,iBACtC,KAAK,cAAc,cAAc,OAGnC,KAAK,cAAc,cAAc,WAC1B,CAAE,eAAgB,GAAM,iBAAkB,KAAK,eAGjD,YAAY,UAA0B,CAC3C,MAAO,MAAK,qBAAqB,WAAW,gBAKhD,mBAA2B,UAAS,CA8BlC,YAAY,MAAkB,GAAY,MAAoB,GAAE,CAC9D,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,YAJP,KAAA,gBAAoC,iEAOnD,KAAK,gBAAgB,KAAK,GAAG,MAAM,iBAAmB,IAEtD,KAAM,OAAQ,GAAI,iBAAA,SAAS,KAAM,WAAY,CAC3C,UAAW,KAAK,aAChB,kBAAmB,OAAA,KAAK,KAAK,CAAE,QAAS,IAAM,KAAK,gBAAgB,IAAI,GAAK,EAAE,mBAAqB,CAAE,UAAW,KAChH,KAAM,MAAM,OAGd,KAAK,UAAY,KAAK,yBAAyB,MAAM,KACrD,KAAK,SAAW,KAAK,wBAAwB,MAAM,QAAS,CAC1D,OAAQ,GACR,QAAS,MACT,SAAU,QACV,aAAc,KAAK,qBA9CT,cAAa,MAAkB,GAAY,SAAgB,CACvE,KAAM,eAAgB,OAAA,MAAM,GAAG,OAAO,SAAS,SAAU,OAAA,UAAU,qBAC7D,UAAY,cAAc,aAChC,oBAAqB,UAAS,CAA9B,aAAA,qBACS,KAAA,UAAY,UACZ,KAAA,SAAW,SACX,KAAA,iBAAmB,cAAc,SAG1C,MAAO,IAAI,QAAO,MAAO,UAIpB,eAAc,MAAkB,GAAY,UAAiB,CAClE,KAAM,UAAW,OAAA,MAAM,GAAG,OAAO,UAAU,CACzC,QAAS,MACT,OAAQ,GACR,SAAU,QACV,aAAc,YAEhB,MAAO,OAAM,aAAa,MAAO,GAAI,UA+BhC,iBAAiB,OAAsB,CAC5C,mEAAI,MAAK,gBAAgB,KAAK,IAAM,KAAO,SAC3C,KAAK,gBAAgB,KAAK,SAvD9B,QAAA,MAAA",
  "names": []
}
