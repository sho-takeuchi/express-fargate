{
  "version": 3,
  "sources": ["iam.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:53:01.880Z\",\"fingerprint\":\"sEo1bX3Jvxi8Emqayd2bX2MHfavGVd4GzE1jYUAfCyo=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                    \nexport interface CfnAccessKeyProps {\n\nn    readonly userName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly serial?: number;\n\n                                                                                                                                                                                                                                                                                       \n    readonly status?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAccessKeyProps`\n *\n * @param properties - the TypeScript properties of a `CfnAccessKeyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAccessKeyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('serial', cdk.validateNumber)(properties.serial));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    errors.collect(cdk.propertyValidator('userName', cdk.requiredValidator)(properties.userName));\n    errors.collect(cdk.propertyValidator('userName', cdk.validateString)(properties.userName));\n    return errors.wrap('supplied properties not correct for \"CfnAccessKeyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::AccessKey` resource\n *\n * @param properties - the TypeScript properties of a `CfnAccessKeyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::AccessKey` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAccessKeyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAccessKeyPropsValidator(properties).assertSuccess();\n    return {\n        UserName: cdk.stringToCloudFormation(properties.userName),\n        Serial: cdk.numberToCloudFormation(properties.serial),\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAccessKeyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAccessKeyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAccessKeyProps>();\n    ret.addPropertyResult('userName', 'UserName', cfn_parse.FromCloudFormation.getString(properties.UserName));\n    ret.addPropertyResult('serial', 'Serial', properties.Serial != null ? cfn_parse.FromCloudFormation.getNumber(properties.Serial) : undefined);\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnAccessKey extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IAM::AccessKey\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAccessKey {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAccessKeyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAccessKey(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                            \n    public readonly attrSecretAccessKey: string;\n\nn    public userName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public serial: number | undefined;\n\n                                                                                                                                                                                                                                                                                       \n    public status: string | undefined;\n\n                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnAccessKeyProps) {\n        super(scope, id, { type: CfnAccessKey.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'userName', this);\n        this.attrSecretAccessKey = cdk.Token.asString(this.getAtt('SecretAccessKey'));\n\n        this.userName = props.userName;\n        this.serial = props.serial;\n        this.status = props.status;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAccessKey.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            userName: this.userName,\n            serial: this.serial,\n            status: this.status,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAccessKeyPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                            \nexport interface CfnGroupProps {\n\nn    readonly groupName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly managedPolicyArns?: string[];\n\nn    readonly path?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly policies?: Array<CfnGroup.PolicyProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));\n    errors.collect(cdk.propertyValidator('managedPolicyArns', cdk.listValidator(cdk.validateString))(properties.managedPolicyArns));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('policies', cdk.listValidator(CfnGroup_PolicyPropertyValidator))(properties.policies));\n    return errors.wrap('supplied properties not correct for \"CfnGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::Group` resource\n *\n * @param properties - the TypeScript properties of a `CfnGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::Group` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGroupPropsValidator(properties).assertSuccess();\n    return {\n        GroupName: cdk.stringToCloudFormation(properties.groupName),\n        ManagedPolicyArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.managedPolicyArns),\n        Path: cdk.stringToCloudFormation(properties.path),\n        Policies: cdk.listMapper(cfnGroupPolicyPropertyToCloudFormation)(properties.policies),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGroupProps>();\n    ret.addPropertyResult('groupName', 'GroupName', properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : undefined);\n    ret.addPropertyResult('managedPolicyArns', 'ManagedPolicyArns', properties.ManagedPolicyArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ManagedPolicyArns) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addPropertyResult('policies', 'Policies', properties.Policies != null ? cfn_parse.FromCloudFormation.getArray(CfnGroupPolicyPropertyFromCloudFormation)(properties.Policies) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \nexport class CfnGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IAM::Group\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                              \n    public readonly attrArn: string;\n\nn    public groupName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public managedPolicyArns: string[] | undefined;\n\nn    public path: string | undefined;\n\nn    public policies: Array<CfnGroup.PolicyProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnGroupProps = {}) {\n        super(scope, id, { type: CfnGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.groupName = props.groupName;\n        this.managedPolicyArns = props.managedPolicyArns;\n        this.path = props.path;\n        this.policies = props.policies;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            groupName: this.groupName,\n            managedPolicyArns: this.managedPolicyArns,\n            path: this.path,\n            policies: this.policies,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnGroup {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface PolicyProperty {\n                                                                                                                                                                                                                \n        readonly policyDocument: any | cdk.IResolvable;\n                                                                                                                                                                                                                                           \n        readonly policyName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PolicyProperty`\n *\n * @param properties - the TypeScript properties of a `PolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnGroup_PolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('policyDocument', cdk.requiredValidator)(properties.policyDocument));\n    errors.collect(cdk.propertyValidator('policyDocument', cdk.validateObject)(properties.policyDocument));\n    errors.collect(cdk.propertyValidator('policyName', cdk.requiredValidator)(properties.policyName));\n    errors.collect(cdk.propertyValidator('policyName', cdk.validateString)(properties.policyName));\n    return errors.wrap('supplied properties not correct for \"PolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::Group.Policy` resource\n *\n * @param properties - the TypeScript properties of a `PolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::Group.Policy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGroupPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGroup_PolicyPropertyValidator(properties).assertSuccess();\n    return {\n        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),\n        PolicyName: cdk.stringToCloudFormation(properties.policyName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGroupPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGroup.PolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGroup.PolicyProperty>();\n    ret.addPropertyResult('policyDocument', 'PolicyDocument', cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument));\n    ret.addPropertyResult('policyName', 'PolicyName', cfn_parse.FromCloudFormation.getString(properties.PolicyName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                              \nexport interface CfnInstanceProfileProps {\n\n                                                                                                                                                                                                                                                                                                                                                                               \n    readonly roles: string[];\n\nn    readonly instanceProfileName?: string;\n\nn    readonly path?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnInstanceProfileProps`\n *\n * @param properties - the TypeScript properties of a `CfnInstanceProfileProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstanceProfilePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceProfileName', cdk.validateString)(properties.instanceProfileName));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('roles', cdk.requiredValidator)(properties.roles));\n    errors.collect(cdk.propertyValidator('roles', cdk.listValidator(cdk.validateString))(properties.roles));\n    return errors.wrap('supplied properties not correct for \"CfnInstanceProfileProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::InstanceProfile` resource\n *\n * @param properties - the TypeScript properties of a `CfnInstanceProfileProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::InstanceProfile` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceProfilePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstanceProfilePropsValidator(properties).assertSuccess();\n    return {\n        Roles: cdk.listMapper(cdk.stringToCloudFormation)(properties.roles),\n        InstanceProfileName: cdk.stringToCloudFormation(properties.instanceProfileName),\n        Path: cdk.stringToCloudFormation(properties.path),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceProfilePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstanceProfileProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstanceProfileProps>();\n    ret.addPropertyResult('roles', 'Roles', cfn_parse.FromCloudFormation.getStringArray(properties.Roles));\n    ret.addPropertyResult('instanceProfileName', 'InstanceProfileName', properties.InstanceProfileName != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceProfileName) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnInstanceProfile extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IAM::InstanceProfile\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnInstanceProfile {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnInstanceProfilePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnInstanceProfile(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                           \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n    public roles: string[];\n\nn    public instanceProfileName: string | undefined;\n\nn    public path: string | undefined;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnInstanceProfileProps) {\n        super(scope, id, { type: CfnInstanceProfile.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'roles', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.roles = props.roles;\n        this.instanceProfileName = props.instanceProfileName;\n        this.path = props.path;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnInstanceProfile.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            roles: this.roles,\n            instanceProfileName: this.instanceProfileName,\n            path: this.path,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnInstanceProfilePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                          \nexport interface CfnManagedPolicyProps {\n\nn    readonly policyDocument: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly description?: string;\n\nn    readonly groups?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly managedPolicyName?: string;\n\nn    readonly path?: string;\n\nn    readonly roles?: string[];\n\nn    readonly users?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnManagedPolicyProps`\n *\n * @param properties - the TypeScript properties of a `CfnManagedPolicyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnManagedPolicyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('groups', cdk.listValidator(cdk.validateString))(properties.groups));\n    errors.collect(cdk.propertyValidator('managedPolicyName', cdk.validateString)(properties.managedPolicyName));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('policyDocument', cdk.requiredValidator)(properties.policyDocument));\n    errors.collect(cdk.propertyValidator('policyDocument', cdk.validateObject)(properties.policyDocument));\n    errors.collect(cdk.propertyValidator('roles', cdk.listValidator(cdk.validateString))(properties.roles));\n    errors.collect(cdk.propertyValidator('users', cdk.listValidator(cdk.validateString))(properties.users));\n    return errors.wrap('supplied properties not correct for \"CfnManagedPolicyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::ManagedPolicy` resource\n *\n * @param properties - the TypeScript properties of a `CfnManagedPolicyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::ManagedPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnManagedPolicyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnManagedPolicyPropsValidator(properties).assertSuccess();\n    return {\n        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Groups: cdk.listMapper(cdk.stringToCloudFormation)(properties.groups),\n        ManagedPolicyName: cdk.stringToCloudFormation(properties.managedPolicyName),\n        Path: cdk.stringToCloudFormation(properties.path),\n        Roles: cdk.listMapper(cdk.stringToCloudFormation)(properties.roles),\n        Users: cdk.listMapper(cdk.stringToCloudFormation)(properties.users),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnManagedPolicyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnManagedPolicyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnManagedPolicyProps>();\n    ret.addPropertyResult('policyDocument', 'PolicyDocument', cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('groups', 'Groups', properties.Groups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Groups) : undefined);\n    ret.addPropertyResult('managedPolicyName', 'ManagedPolicyName', properties.ManagedPolicyName != null ? cfn_parse.FromCloudFormation.getString(properties.ManagedPolicyName) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addPropertyResult('roles', 'Roles', properties.Roles != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Roles) : undefined);\n    ret.addPropertyResult('users', 'Users', properties.Users != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Users) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnManagedPolicy extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IAM::ManagedPolicy\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnManagedPolicy {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnManagedPolicyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnManagedPolicy(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\nn    public policyDocument: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public description: string | undefined;\n\nn    public groups: string[] | undefined;\n\nn    public managedPolicyName: string | undefined;\n\nn    public path: string | undefined;\n\nn    public roles: string[] | undefined;\n\nn    public users: string[] | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnManagedPolicyProps) {\n        super(scope, id, { type: CfnManagedPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'policyDocument', this);\n\n        this.policyDocument = props.policyDocument;\n        this.description = props.description;\n        this.groups = props.groups;\n        this.managedPolicyName = props.managedPolicyName;\n        this.path = props.path;\n        this.roles = props.roles;\n        this.users = props.users;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnManagedPolicy.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            policyDocument: this.policyDocument,\n            description: this.description,\n            groups: this.groups,\n            managedPolicyName: this.managedPolicyName,\n            path: this.path,\n            roles: this.roles,\n            users: this.users,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnManagedPolicyPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                        \nexport interface CfnOIDCProviderProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly thumbprintList: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly clientIdList?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly url?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnOIDCProviderProps`\n *\n * @param properties - the TypeScript properties of a `CfnOIDCProviderProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnOIDCProviderPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clientIdList', cdk.listValidator(cdk.validateString))(properties.clientIdList));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('thumbprintList', cdk.requiredValidator)(properties.thumbprintList));\n    errors.collect(cdk.propertyValidator('thumbprintList', cdk.listValidator(cdk.validateString))(properties.thumbprintList));\n    errors.collect(cdk.propertyValidator('url', cdk.validateString)(properties.url));\n    return errors.wrap('supplied properties not correct for \"CfnOIDCProviderProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::OIDCProvider` resource\n *\n * @param properties - the TypeScript properties of a `CfnOIDCProviderProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::OIDCProvider` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOIDCProviderPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOIDCProviderPropsValidator(properties).assertSuccess();\n    return {\n        ThumbprintList: cdk.listMapper(cdk.stringToCloudFormation)(properties.thumbprintList),\n        ClientIdList: cdk.listMapper(cdk.stringToCloudFormation)(properties.clientIdList),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Url: cdk.stringToCloudFormation(properties.url),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOIDCProviderPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOIDCProviderProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOIDCProviderProps>();\n    ret.addPropertyResult('thumbprintList', 'ThumbprintList', cfn_parse.FromCloudFormation.getStringArray(properties.ThumbprintList));\n    ret.addPropertyResult('clientIdList', 'ClientIdList', properties.ClientIdList != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ClientIdList) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('url', 'Url', properties.Url != null ? cfn_parse.FromCloudFormation.getString(properties.Url) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnOIDCProvider extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IAM::OIDCProvider\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnOIDCProvider {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnOIDCProviderPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnOIDCProvider(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                      \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public thumbprintList: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public clientIdList: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                               \n    public url: string | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnOIDCProviderProps) {\n        super(scope, id, { type: CfnOIDCProvider.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'thumbprintList', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.thumbprintList = props.thumbprintList;\n        this.clientIdList = props.clientIdList;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::IAM::OIDCProvider\", props.tags, { tagPropertyName: 'tags' });\n        this.url = props.url;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnOIDCProvider.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            thumbprintList: this.thumbprintList,\n            clientIdList: this.clientIdList,\n            tags: this.tags.renderTags(),\n            url: this.url,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnOIDCProviderPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                            \nexport interface CfnPolicyProps {\n\nn    readonly policyDocument: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly policyName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly groups?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly roles?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly users?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPolicyProps`\n *\n * @param properties - the TypeScript properties of a `CfnPolicyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPolicyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('groups', cdk.listValidator(cdk.validateString))(properties.groups));\n    errors.collect(cdk.propertyValidator('policyDocument', cdk.requiredValidator)(properties.policyDocument));\n    errors.collect(cdk.propertyValidator('policyDocument', cdk.validateObject)(properties.policyDocument));\n    errors.collect(cdk.propertyValidator('policyName', cdk.requiredValidator)(properties.policyName));\n    errors.collect(cdk.propertyValidator('policyName', cdk.validateString)(properties.policyName));\n    errors.collect(cdk.propertyValidator('roles', cdk.listValidator(cdk.validateString))(properties.roles));\n    errors.collect(cdk.propertyValidator('users', cdk.listValidator(cdk.validateString))(properties.users));\n    return errors.wrap('supplied properties not correct for \"CfnPolicyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::Policy` resource\n *\n * @param properties - the TypeScript properties of a `CfnPolicyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::Policy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPolicyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPolicyPropsValidator(properties).assertSuccess();\n    return {\n        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),\n        PolicyName: cdk.stringToCloudFormation(properties.policyName),\n        Groups: cdk.listMapper(cdk.stringToCloudFormation)(properties.groups),\n        Roles: cdk.listMapper(cdk.stringToCloudFormation)(properties.roles),\n        Users: cdk.listMapper(cdk.stringToCloudFormation)(properties.users),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPolicyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPolicyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPolicyProps>();\n    ret.addPropertyResult('policyDocument', 'PolicyDocument', cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument));\n    ret.addPropertyResult('policyName', 'PolicyName', cfn_parse.FromCloudFormation.getString(properties.PolicyName));\n    ret.addPropertyResult('groups', 'Groups', properties.Groups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Groups) : undefined);\n    ret.addPropertyResult('roles', 'Roles', properties.Roles != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Roles) : undefined);\n    ret.addPropertyResult('users', 'Users', properties.Users != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Users) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPolicy extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IAM::Policy\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPolicy {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPolicyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPolicy(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\nn    public policyDocument: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public policyName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public groups: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public roles: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public users: string[] | undefined;\n\n                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnPolicyProps) {\n        super(scope, id, { type: CfnPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'policyDocument', this);\n        cdk.requireProperty(props, 'policyName', this);\n\n        this.policyDocument = props.policyDocument;\n        this.policyName = props.policyName;\n        this.groups = props.groups;\n        this.roles = props.roles;\n        this.users = props.users;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPolicy.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            policyDocument: this.policyDocument,\n            policyName: this.policyName,\n            groups: this.groups,\n            roles: this.roles,\n            users: this.users,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPolicyPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                        \nexport interface CfnRoleProps {\n\nn    readonly assumeRolePolicyDocument: any | cdk.IResolvable;\n\n                                                                                                                                                                                                        \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly managedPolicyArns?: string[];\n\nn    readonly maxSessionDuration?: number;\n\nn    readonly path?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly permissionsBoundary?: string;\n\nn    readonly policies?: Array<CfnRole.PolicyProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly roleName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRoleProps`\n *\n * @param properties - the TypeScript properties of a `CfnRoleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRolePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('assumeRolePolicyDocument', cdk.requiredValidator)(properties.assumeRolePolicyDocument));\n    errors.collect(cdk.propertyValidator('assumeRolePolicyDocument', cdk.validateObject)(properties.assumeRolePolicyDocument));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('managedPolicyArns', cdk.listValidator(cdk.validateString))(properties.managedPolicyArns));\n    errors.collect(cdk.propertyValidator('maxSessionDuration', cdk.validateNumber)(properties.maxSessionDuration));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('permissionsBoundary', cdk.validateString)(properties.permissionsBoundary));\n    errors.collect(cdk.propertyValidator('policies', cdk.listValidator(CfnRole_PolicyPropertyValidator))(properties.policies));\n    errors.collect(cdk.propertyValidator('roleName', cdk.validateString)(properties.roleName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnRoleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::Role` resource\n *\n * @param properties - the TypeScript properties of a `CfnRoleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::Role` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRolePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRolePropsValidator(properties).assertSuccess();\n    return {\n        AssumeRolePolicyDocument: cdk.objectToCloudFormation(properties.assumeRolePolicyDocument),\n        Description: cdk.stringToCloudFormation(properties.description),\n        ManagedPolicyArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.managedPolicyArns),\n        MaxSessionDuration: cdk.numberToCloudFormation(properties.maxSessionDuration),\n        Path: cdk.stringToCloudFormation(properties.path),\n        PermissionsBoundary: cdk.stringToCloudFormation(properties.permissionsBoundary),\n        Policies: cdk.listMapper(cfnRolePolicyPropertyToCloudFormation)(properties.policies),\n        RoleName: cdk.stringToCloudFormation(properties.roleName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRolePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRoleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRoleProps>();\n    ret.addPropertyResult('assumeRolePolicyDocument', 'AssumeRolePolicyDocument', cfn_parse.FromCloudFormation.getAny(properties.AssumeRolePolicyDocument));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('managedPolicyArns', 'ManagedPolicyArns', properties.ManagedPolicyArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ManagedPolicyArns) : undefined);\n    ret.addPropertyResult('maxSessionDuration', 'MaxSessionDuration', properties.MaxSessionDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxSessionDuration) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addPropertyResult('permissionsBoundary', 'PermissionsBoundary', properties.PermissionsBoundary != null ? cfn_parse.FromCloudFormation.getString(properties.PermissionsBoundary) : undefined);\n    ret.addPropertyResult('policies', 'Policies', properties.Policies != null ? cfn_parse.FromCloudFormation.getArray(CfnRolePolicyPropertyFromCloudFormation)(properties.Policies) : undefined);\n    ret.addPropertyResult('roleName', 'RoleName', properties.RoleName != null ? cfn_parse.FromCloudFormation.getString(properties.RoleName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnRole extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IAM::Role\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRole {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRolePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRole(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                  \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                                          \n    public readonly attrRoleId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public assumeRolePolicyDocument: any | cdk.IResolvable;\n\n                                                                                                                                                                                                        \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public managedPolicyArns: string[] | undefined;\n\nn    public maxSessionDuration: number | undefined;\n\nn    public path: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public permissionsBoundary: string | undefined;\n\nn    public policies: Array<CfnRole.PolicyProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public roleName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnRoleProps) {\n        super(scope, id, { type: CfnRole.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'assumeRolePolicyDocument', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrRoleId = cdk.Token.asString(this.getAtt('RoleId'));\n\n        this.assumeRolePolicyDocument = props.assumeRolePolicyDocument;\n        this.description = props.description;\n        this.managedPolicyArns = props.managedPolicyArns;\n        this.maxSessionDuration = props.maxSessionDuration;\n        this.path = props.path;\n        this.permissionsBoundary = props.permissionsBoundary;\n        this.policies = props.policies;\n        this.roleName = props.roleName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::IAM::Role\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRole.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            assumeRolePolicyDocument: this.assumeRolePolicyDocument,\n            description: this.description,\n            managedPolicyArns: this.managedPolicyArns,\n            maxSessionDuration: this.maxSessionDuration,\n            path: this.path,\n            permissionsBoundary: this.permissionsBoundary,\n            policies: this.policies,\n            roleName: this.roleName,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRolePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnRole {\nn    export interface PolicyProperty {\n                                                                                                                                                                                                                \n        readonly policyDocument: any | cdk.IResolvable;\n                                                                                                                                                                                                                                           \n        readonly policyName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PolicyProperty`\n *\n * @param properties - the TypeScript properties of a `PolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRole_PolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('policyDocument', cdk.requiredValidator)(properties.policyDocument));\n    errors.collect(cdk.propertyValidator('policyDocument', cdk.validateObject)(properties.policyDocument));\n    errors.collect(cdk.propertyValidator('policyName', cdk.requiredValidator)(properties.policyName));\n    errors.collect(cdk.propertyValidator('policyName', cdk.validateString)(properties.policyName));\n    return errors.wrap('supplied properties not correct for \"PolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::Role.Policy` resource\n *\n * @param properties - the TypeScript properties of a `PolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::Role.Policy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRolePolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRole_PolicyPropertyValidator(properties).assertSuccess();\n    return {\n        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),\n        PolicyName: cdk.stringToCloudFormation(properties.policyName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRolePolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRole.PolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRole.PolicyProperty>();\n    ret.addPropertyResult('policyDocument', 'PolicyDocument', cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument));\n    ret.addPropertyResult('policyName', 'PolicyName', cfn_parse.FromCloudFormation.getString(properties.PolicyName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                        \nexport interface CfnSAMLProviderProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly samlMetadataDocument: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly name?: string;\n\nn    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSAMLProviderProps`\n *\n * @param properties - the TypeScript properties of a `CfnSAMLProviderProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSAMLProviderPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('samlMetadataDocument', cdk.requiredValidator)(properties.samlMetadataDocument));\n    errors.collect(cdk.propertyValidator('samlMetadataDocument', cdk.validateString)(properties.samlMetadataDocument));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnSAMLProviderProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::SAMLProvider` resource\n *\n * @param properties - the TypeScript properties of a `CfnSAMLProviderProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::SAMLProvider` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSAMLProviderPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSAMLProviderPropsValidator(properties).assertSuccess();\n    return {\n        SamlMetadataDocument: cdk.stringToCloudFormation(properties.samlMetadataDocument),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSAMLProviderPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSAMLProviderProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSAMLProviderProps>();\n    ret.addPropertyResult('samlMetadataDocument', 'SamlMetadataDocument', cfn_parse.FromCloudFormation.getString(properties.SamlMetadataDocument));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSAMLProvider extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IAM::SAMLProvider\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSAMLProvider {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSAMLProviderPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSAMLProvider(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                      \n    public readonly attrArn: string;\n\nn    public samlMetadataDocument: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public name: string | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnSAMLProviderProps) {\n        super(scope, id, { type: CfnSAMLProvider.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'samlMetadataDocument', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.samlMetadataDocument = props.samlMetadataDocument;\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::IAM::SAMLProvider\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSAMLProvider.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            samlMetadataDocument: this.samlMetadataDocument,\n            name: this.name,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSAMLProviderPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                  \nexport interface CfnServerCertificateProps {\n\n                                                                                                                                                                                                                                      \n    readonly certificateBody?: string;\n\n                                                                                                                                                                                                                                             \n    readonly certificateChain?: string;\n\nn    readonly path?: string;\n\nn    readonly privateKey?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly serverCertificateName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnServerCertificateProps`\n *\n * @param properties - the TypeScript properties of a `CfnServerCertificateProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnServerCertificatePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificateBody', cdk.validateString)(properties.certificateBody));\n    errors.collect(cdk.propertyValidator('certificateChain', cdk.validateString)(properties.certificateChain));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('privateKey', cdk.validateString)(properties.privateKey));\n    errors.collect(cdk.propertyValidator('serverCertificateName', cdk.validateString)(properties.serverCertificateName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnServerCertificateProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::ServerCertificate` resource\n *\n * @param properties - the TypeScript properties of a `CfnServerCertificateProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::ServerCertificate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServerCertificatePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnServerCertificatePropsValidator(properties).assertSuccess();\n    return {\n        CertificateBody: cdk.stringToCloudFormation(properties.certificateBody),\n        CertificateChain: cdk.stringToCloudFormation(properties.certificateChain),\n        Path: cdk.stringToCloudFormation(properties.path),\n        PrivateKey: cdk.stringToCloudFormation(properties.privateKey),\n        ServerCertificateName: cdk.stringToCloudFormation(properties.serverCertificateName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServerCertificatePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnServerCertificateProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnServerCertificateProps>();\n    ret.addPropertyResult('certificateBody', 'CertificateBody', properties.CertificateBody != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateBody) : undefined);\n    ret.addPropertyResult('certificateChain', 'CertificateChain', properties.CertificateChain != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateChain) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addPropertyResult('privateKey', 'PrivateKey', properties.PrivateKey != null ? cfn_parse.FromCloudFormation.getString(properties.PrivateKey) : undefined);\n    ret.addPropertyResult('serverCertificateName', 'ServerCertificateName', properties.ServerCertificateName != null ? cfn_parse.FromCloudFormation.getString(properties.ServerCertificateName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnServerCertificate extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IAM::ServerCertificate\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnServerCertificate {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnServerCertificatePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnServerCertificate(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                           \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                      \n    public certificateBody: string | undefined;\n\n                                                                                                                                                                                                                                             \n    public certificateChain: string | undefined;\n\nn    public path: string | undefined;\n\nn    public privateKey: string | undefined;\n\nn    public serverCertificateName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnServerCertificateProps = {}) {\n        super(scope, id, { type: CfnServerCertificate.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.certificateBody = props.certificateBody;\n        this.certificateChain = props.certificateChain;\n        this.path = props.path;\n        this.privateKey = props.privateKey;\n        this.serverCertificateName = props.serverCertificateName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::IAM::ServerCertificate\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnServerCertificate.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            certificateBody: this.certificateBody,\n            certificateChain: this.certificateChain,\n            path: this.path,\n            privateKey: this.privateKey,\n            serverCertificateName: this.serverCertificateName,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnServerCertificatePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                  \nexport interface CfnServiceLinkedRoleProps {\n\nn    readonly awsServiceName: string;\n\nn    readonly customSuffix?: string;\n\n                                                                                                                                                                                                                   \n    readonly description?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnServiceLinkedRoleProps`\n *\n * @param properties - the TypeScript properties of a `CfnServiceLinkedRoleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnServiceLinkedRolePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('awsServiceName', cdk.requiredValidator)(properties.awsServiceName));\n    errors.collect(cdk.propertyValidator('awsServiceName', cdk.validateString)(properties.awsServiceName));\n    errors.collect(cdk.propertyValidator('customSuffix', cdk.validateString)(properties.customSuffix));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    return errors.wrap('supplied properties not correct for \"CfnServiceLinkedRoleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::ServiceLinkedRole` resource\n *\n * @param properties - the TypeScript properties of a `CfnServiceLinkedRoleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::ServiceLinkedRole` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceLinkedRolePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnServiceLinkedRolePropsValidator(properties).assertSuccess();\n    return {\n        AWSServiceName: cdk.stringToCloudFormation(properties.awsServiceName),\n        CustomSuffix: cdk.stringToCloudFormation(properties.customSuffix),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceLinkedRolePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnServiceLinkedRoleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnServiceLinkedRoleProps>();\n    ret.addPropertyResult('awsServiceName', 'AWSServiceName', cfn_parse.FromCloudFormation.getString(properties.AWSServiceName));\n    ret.addPropertyResult('customSuffix', 'CustomSuffix', properties.CustomSuffix != null ? cfn_parse.FromCloudFormation.getString(properties.CustomSuffix) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnServiceLinkedRole extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IAM::ServiceLinkedRole\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnServiceLinkedRole {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnServiceLinkedRolePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnServiceLinkedRole(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\nn    public awsServiceName: string;\n\nn    public customSuffix: string | undefined;\n\n                                                                                                                                                                                                                   \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnServiceLinkedRoleProps) {\n        super(scope, id, { type: CfnServiceLinkedRole.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'awsServiceName', this);\n\n        this.awsServiceName = props.awsServiceName;\n        this.customSuffix = props.customSuffix;\n        this.description = props.description;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnServiceLinkedRole.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            awsServiceName: this.awsServiceName,\n            customSuffix: this.customSuffix,\n            description: this.description,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnServiceLinkedRolePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                          \nexport interface CfnUserProps {\n\n                                                                                                                                                                                                                  \n    readonly groups?: string[];\n\nn    readonly loginProfile?: CfnUser.LoginProfileProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly managedPolicyArns?: string[];\n\nn    readonly path?: string;\n\n                                                                                                                                                                                                                                                       \n    readonly permissionsBoundary?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly policies?: Array<CfnUser.PolicyProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly tags?: cdk.CfnTag[];\n\nn    readonly userName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('groups', cdk.listValidator(cdk.validateString))(properties.groups));\n    errors.collect(cdk.propertyValidator('loginProfile', CfnUser_LoginProfilePropertyValidator)(properties.loginProfile));\n    errors.collect(cdk.propertyValidator('managedPolicyArns', cdk.listValidator(cdk.validateString))(properties.managedPolicyArns));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('permissionsBoundary', cdk.validateString)(properties.permissionsBoundary));\n    errors.collect(cdk.propertyValidator('policies', cdk.listValidator(CfnUser_PolicyPropertyValidator))(properties.policies));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('userName', cdk.validateString)(properties.userName));\n    return errors.wrap('supplied properties not correct for \"CfnUserProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::User` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::User` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPropsValidator(properties).assertSuccess();\n    return {\n        Groups: cdk.listMapper(cdk.stringToCloudFormation)(properties.groups),\n        LoginProfile: cfnUserLoginProfilePropertyToCloudFormation(properties.loginProfile),\n        ManagedPolicyArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.managedPolicyArns),\n        Path: cdk.stringToCloudFormation(properties.path),\n        PermissionsBoundary: cdk.stringToCloudFormation(properties.permissionsBoundary),\n        Policies: cdk.listMapper(cfnUserPolicyPropertyToCloudFormation)(properties.policies),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        UserName: cdk.stringToCloudFormation(properties.userName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProps>();\n    ret.addPropertyResult('groups', 'Groups', properties.Groups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Groups) : undefined);\n    ret.addPropertyResult('loginProfile', 'LoginProfile', properties.LoginProfile != null ? CfnUserLoginProfilePropertyFromCloudFormation(properties.LoginProfile) : undefined);\n    ret.addPropertyResult('managedPolicyArns', 'ManagedPolicyArns', properties.ManagedPolicyArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ManagedPolicyArns) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addPropertyResult('permissionsBoundary', 'PermissionsBoundary', properties.PermissionsBoundary != null ? cfn_parse.FromCloudFormation.getString(properties.PermissionsBoundary) : undefined);\n    ret.addPropertyResult('policies', 'Policies', properties.Policies != null ? cfn_parse.FromCloudFormation.getArray(CfnUserPolicyPropertyFromCloudFormation)(properties.Policies) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('userName', 'UserName', properties.UserName != null ? cfn_parse.FromCloudFormation.getString(properties.UserName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \nexport class CfnUser extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IAM::User\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUser {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUser(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                           \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                  \n    public groups: string[] | undefined;\n\nn    public loginProfile: CfnUser.LoginProfileProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public managedPolicyArns: string[] | undefined;\n\nn    public path: string | undefined;\n\n                                                                                                                                                                                                                                                       \n    public permissionsBoundary: string | undefined;\n\nn    public policies: Array<CfnUser.PolicyProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\nn    public userName: string | undefined;\n\n                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnUserProps = {}) {\n        super(scope, id, { type: CfnUser.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.groups = props.groups;\n        this.loginProfile = props.loginProfile;\n        this.managedPolicyArns = props.managedPolicyArns;\n        this.path = props.path;\n        this.permissionsBoundary = props.permissionsBoundary;\n        this.policies = props.policies;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::IAM::User\", props.tags, { tagPropertyName: 'tags' });\n        this.userName = props.userName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUser.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            groups: this.groups,\n            loginProfile: this.loginProfile,\n            managedPolicyArns: this.managedPolicyArns,\n            path: this.path,\n            permissionsBoundary: this.permissionsBoundary,\n            policies: this.policies,\n            tags: this.tags.renderTags(),\n            userName: this.userName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnUser {\nn    export interface LoginProfileProperty {\n                                                                                                                                                                                                                              \n        readonly password: string;\n                                                                                                                                                                                                                                                                                                    \n        readonly passwordResetRequired?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoginProfileProperty`\n *\n * @param properties - the TypeScript properties of a `LoginProfileProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUser_LoginProfilePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('password', cdk.requiredValidator)(properties.password));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('passwordResetRequired', cdk.validateBoolean)(properties.passwordResetRequired));\n    return errors.wrap('supplied properties not correct for \"LoginProfileProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::User.LoginProfile` resource\n *\n * @param properties - the TypeScript properties of a `LoginProfileProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::User.LoginProfile` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserLoginProfilePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUser_LoginProfilePropertyValidator(properties).assertSuccess();\n    return {\n        Password: cdk.stringToCloudFormation(properties.password),\n        PasswordResetRequired: cdk.booleanToCloudFormation(properties.passwordResetRequired),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserLoginProfilePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUser.LoginProfileProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUser.LoginProfileProperty>();\n    ret.addPropertyResult('password', 'Password', cfn_parse.FromCloudFormation.getString(properties.Password));\n    ret.addPropertyResult('passwordResetRequired', 'PasswordResetRequired', properties.PasswordResetRequired != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PasswordResetRequired) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUser {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface PolicyProperty {\n                                                                                                                                                                                                                \n        readonly policyDocument: any | cdk.IResolvable;\n                                                                                                                                                                                                                                           \n        readonly policyName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PolicyProperty`\n *\n * @param properties - the TypeScript properties of a `PolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUser_PolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('policyDocument', cdk.requiredValidator)(properties.policyDocument));\n    errors.collect(cdk.propertyValidator('policyDocument', cdk.validateObject)(properties.policyDocument));\n    errors.collect(cdk.propertyValidator('policyName', cdk.requiredValidator)(properties.policyName));\n    errors.collect(cdk.propertyValidator('policyName', cdk.validateString)(properties.policyName));\n    return errors.wrap('supplied properties not correct for \"PolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::User.Policy` resource\n *\n * @param properties - the TypeScript properties of a `PolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::User.Policy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUser_PolicyPropertyValidator(properties).assertSuccess();\n    return {\n        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),\n        PolicyName: cdk.stringToCloudFormation(properties.policyName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUser.PolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUser.PolicyProperty>();\n    ret.addPropertyResult('policyDocument', 'PolicyDocument', cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument));\n    ret.addPropertyResult('policyName', 'PolicyName', cfn_parse.FromCloudFormation.getString(properties.PolicyName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                   \nexport interface CfnUserToGroupAdditionProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly groupName: string;\n\n                                                                                                                                                                                                                                                \n    readonly users: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserToGroupAdditionProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserToGroupAdditionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserToGroupAdditionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('groupName', cdk.requiredValidator)(properties.groupName));\n    errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));\n    errors.collect(cdk.propertyValidator('users', cdk.requiredValidator)(properties.users));\n    errors.collect(cdk.propertyValidator('users', cdk.listValidator(cdk.validateString))(properties.users));\n    return errors.wrap('supplied properties not correct for \"CfnUserToGroupAdditionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::UserToGroupAddition` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserToGroupAdditionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::UserToGroupAddition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserToGroupAdditionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserToGroupAdditionPropsValidator(properties).assertSuccess();\n    return {\n        GroupName: cdk.stringToCloudFormation(properties.groupName),\n        Users: cdk.listMapper(cdk.stringToCloudFormation)(properties.users),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserToGroupAdditionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserToGroupAdditionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserToGroupAdditionProps>();\n    ret.addPropertyResult('groupName', 'GroupName', cfn_parse.FromCloudFormation.getString(properties.GroupName));\n    ret.addPropertyResult('users', 'Users', cfn_parse.FromCloudFormation.getStringArray(properties.Users));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                     \nexport class CfnUserToGroupAddition extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IAM::UserToGroupAddition\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserToGroupAddition {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserToGroupAdditionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserToGroupAddition(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public groupName: string;\n\n                                                                                                                                                                                                                                                \n    public users: string[];\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnUserToGroupAdditionProps) {\n        super(scope, id, { type: CfnUserToGroupAddition.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'groupName', this);\n        cdk.requireProperty(props, 'users', this);\n\n        this.groupName = props.groupName;\n        this.users = props.users;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserToGroupAddition.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            groupName: this.groupName,\n            users: this.users,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserToGroupAdditionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                \nexport interface CfnVirtualMFADeviceProps {\n\n                                                                                                                                                                                                                                    \n    readonly users: string[];\n\nn    readonly path?: string;\n\nn    readonly tags?: cdk.CfnTag[];\n\nn    readonly virtualMfaDeviceName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVirtualMFADeviceProps`\n *\n * @param properties - the TypeScript properties of a `CfnVirtualMFADeviceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVirtualMFADevicePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('users', cdk.requiredValidator)(properties.users));\n    errors.collect(cdk.propertyValidator('users', cdk.listValidator(cdk.validateString))(properties.users));\n    errors.collect(cdk.propertyValidator('virtualMfaDeviceName', cdk.validateString)(properties.virtualMfaDeviceName));\n    return errors.wrap('supplied properties not correct for \"CfnVirtualMFADeviceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IAM::VirtualMFADevice` resource\n *\n * @param properties - the TypeScript properties of a `CfnVirtualMFADeviceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IAM::VirtualMFADevice` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVirtualMFADevicePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVirtualMFADevicePropsValidator(properties).assertSuccess();\n    return {\n        Users: cdk.listMapper(cdk.stringToCloudFormation)(properties.users),\n        Path: cdk.stringToCloudFormation(properties.path),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VirtualMfaDeviceName: cdk.stringToCloudFormation(properties.virtualMfaDeviceName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVirtualMFADevicePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVirtualMFADeviceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVirtualMFADeviceProps>();\n    ret.addPropertyResult('users', 'Users', cfn_parse.FromCloudFormation.getStringArray(properties.Users));\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('virtualMfaDeviceName', 'VirtualMfaDeviceName', properties.VirtualMfaDeviceName != null ? cfn_parse.FromCloudFormation.getString(properties.VirtualMfaDeviceName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVirtualMFADevice extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IAM::VirtualMFADevice\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVirtualMFADevice {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVirtualMFADevicePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVirtualMFADevice(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                      \n    public readonly attrSerialNumber: string;\n\n                                                                                                                                                                                                                                    \n    public users: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public path: string | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\nn    public virtualMfaDeviceName: string | undefined;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnVirtualMFADeviceProps) {\n        super(scope, id, { type: CfnVirtualMFADevice.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'users', this);\n        this.attrSerialNumber = cdk.Token.asString(this.getAtt('SerialNumber'));\n\n        this.users = props.users;\n        this.path = props.path;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::IAM::VirtualMFADevice\", props.tags, { tagPropertyName: 'tags' });\n        this.virtualMfaDeviceName = props.virtualMfaDeviceName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVirtualMFADevice.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            users: this.users,\n            path: this.path,\n            tags: this.tags.renderTags(),\n            virtualMfaDeviceName: this.virtualMfaDeviceName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVirtualMFADevicePropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
