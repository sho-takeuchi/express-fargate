{
  "version": 3,
  "sources": ["lazy-role.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { Grant } from './grant';\nimport { IManagedPolicy } from './managed-policy';\nimport { Policy } from './policy';\nimport { PolicyStatement } from './policy-statement';\nimport { AddToPrincipalPolicyResult, IPrincipal, PrincipalPolicyFragment } from './principals';\nimport { IRole, Role, RoleProps } from './role';\n\n                                             \nexport interface LazyRoleProps extends RoleProps {\n\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \nexport class LazyRole extends cdk.Resource implements IRole {\n  public readonly grantPrincipal: IPrincipal = this;\n  public readonly principalAccount: string | undefined = this.env.account;\n  public readonly assumeRoleAction: string = 'sts:AssumeRole';\n\n  private role?: Role;\n  private readonly statements = new Array<PolicyStatement>();\n  private readonly policies = new Array<Policy>();\n  private readonly managedPolicies = new Array<IManagedPolicy>();\n\n  constructor(scope: Construct, id: string, private readonly props: LazyRoleProps) {\n    super(scope, id);\n  }\n\n                                                                                                                                                                                                                                    \n  public addToPrincipalPolicy(statement: PolicyStatement): AddToPrincipalPolicyResult {\n    if (this.role) {\n      return this.role.addToPrincipalPolicy(statement);\n    } else {\n      this.statements.push(statement);\n      return { statementAdded: true, policyDependable: this };\n    }\n  }\n\n  public addToPolicy(statement: PolicyStatement): boolean {\n    return this.addToPrincipalPolicy(statement).statementAdded;\n  }\n\n                                                                                        \n  public attachInlinePolicy(policy: Policy): void {\n    if (this.role) {\n      this.role.attachInlinePolicy(policy);\n    } else {\n      this.policies.push(policy);\n    }\n  }\n\n                                                                                                         \n  public addManagedPolicy(policy: IManagedPolicy): void {\n    if (this.role) {\n      this.role.addManagedPolicy(policy);\n    } else {\n      this.managedPolicies.push(policy);\n    }\n  }\n\n                                              \n  public get roleArn(): string {\n    return this.instantiate().roleArn;\n  }\n\n                                                                                                                            \n  public get roleId(): string {\n    return this.instantiate().roleId;\n  }\n\n  public get roleName(): string {\n    return this.instantiate().roleName;\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return this.instantiate().policyFragment;\n  }\n\n                                                                                                 \n  public grant(identity: IPrincipal, ...actions: string[]): Grant {\n    return this.instantiate().grant(identity, ...actions);\n  }\n\n                                                                            \n  public grantPassRole(identity: IPrincipal): Grant {\n    return this.instantiate().grantPassRole(identity);\n  }\n\n  private instantiate(): Role {\n    if (!this.role) {\n      const role = new Role(this, 'Default', this.props);\n      this.statements.forEach(role.addToPolicy.bind(role));\n      this.policies.forEach(role.attachInlinePolicy.bind(role));\n      this.managedPolicies.forEach(role.addManagedPolicy.bind(role));\n      this.role = role;\n    }\n    return this.role;\n  }\n}\n"],
  "mappings": "+MAAA,IAAA,QAAA,cAOA,OAAA,QAAA,UAQA,sBAA8B,KAAI,QAAQ,CAUxC,YAAY,MAAkB,GAA6B,MAAoB,CAC7E,MAAM,MAAO,IAD4C,KAAA,MAAA,MAT3C,KAAA,eAA6B,KAC7B,KAAA,iBAAuC,KAAK,IAAI,QAChD,KAAA,iBAA2B,iBAG1B,KAAA,WAAa,GAAI,OACjB,KAAA,SAAW,GAAI,OACf,KAAA,gBAAkB,GAAI,wEAOhC,qBAAqB,UAA0B,CACpD,8EAAI,KAAK,KACA,KAAK,KAAK,qBAAqB,WAEtC,MAAK,WAAW,KAAK,WACd,CAAE,eAAgB,GAAM,iBAAkB,OAI9C,YAAY,UAA0B,+EACpC,KAAK,qBAAqB,WAAW,eAIvC,mBAAmB,OAAc,4DACtC,AAAI,KAAK,KACP,KAAK,KAAK,mBAAmB,QAE7B,KAAK,SAAS,KAAK,QAKhB,iBAAiB,OAAsB,oEAC5C,AAAI,KAAK,KACP,KAAK,KAAK,iBAAiB,QAE3B,KAAK,gBAAgB,KAAK,WAKnB,UAAO,CAChB,MAAO,MAAK,cAAc,WAIjB,SAAM,CACf,MAAO,MAAK,cAAc,UAGjB,WAAQ,CACjB,MAAO,MAAK,cAAc,YAGjB,iBAAc,CACvB,MAAO,MAAK,cAAc,eAIrB,MAAM,YAAyB,QAAiB,yEAC9C,KAAK,cAAc,MAAM,SAAU,GAAG,SAIxC,cAAc,SAAoB,yEAChC,KAAK,cAAc,cAAc,UAGlC,aAAW,CACjB,GAAI,CAAC,KAAK,KAAM,CACd,KAAM,MAAO,GAAI,QAAA,KAAK,KAAM,UAAW,KAAK,OAC5C,KAAK,WAAW,QAAQ,KAAK,YAAY,KAAK,OAC9C,KAAK,SAAS,QAAQ,KAAK,mBAAmB,KAAK,OACnD,KAAK,gBAAgB,QAAQ,KAAK,iBAAiB,KAAK,OACxD,KAAK,KAAO,KAEd,MAAO,MAAK,MAlFhB,QAAA,SAAA",
  "names": []
}
