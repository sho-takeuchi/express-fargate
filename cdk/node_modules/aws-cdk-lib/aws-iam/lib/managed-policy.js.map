{
  "version": 3,
  "sources": ["managed-policy.ts"],
  "sourcesContent": ["import { ArnFormat, Resource, Stack, Arn, Aws } from '../../core';\nimport { Construct } from 'constructs';\nimport { IGroup } from './group';\nimport { CfnManagedPolicy } from './iam.generated';\nimport { PolicyDocument } from './policy-document';\nimport { PolicyStatement } from './policy-statement';\nimport { IRole } from './role';\nimport { IUser } from './user';\nimport { undefinedIfEmpty } from './util';\n\n                           \nexport interface IManagedPolicy {\n                                                              \n  readonly managedPolicyArn: string;\n}\n\n                                                        \nexport interface ManagedPolicyProps {\n                                                                                                                                                                                                                                                                                             \n  readonly managedPolicyName?: string;\n\n                                                                                                                                                                                                                                                                                                                             \n  readonly description?: string;\n\nn  readonly path?: string;\n\n                                                                                                                                                           \n  readonly users?: IUser[];\n\n                                                                                                                                                           \n  readonly roles?: IRole[];\n\n                                                                                                                                                                \n  readonly groups?: IGroup[];\n\n                                                                                                                                                                                          \n  readonly statements?: PolicyStatement[];\n\n                                                                                                                                                                                                                                                         \n  readonly document?: PolicyDocument;\n}\n\n                            \nexport class ManagedPolicy extends Resource implements IManagedPolicy {\n                                                                                                                                                                          \n  public static fromManagedPolicyName(scope: Construct, id: string, managedPolicyName: string): IManagedPolicy {\n    class Import extends Resource implements IManagedPolicy {\n      public readonly managedPolicyArn = Stack.of(scope).formatArn({\n        service: 'iam',\n        region: '', // no region for managed policy\n        account: Stack.of(scope).account, // Can this be something the user specifies?\n        resource: 'policy',\n        resourceName: managedPolicyName,\n      });\n    }\n    return new Import(scope, id);\n  }\n\nn  public static fromManagedPolicyArn(scope: Construct, id: string, managedPolicyArn: string): IManagedPolicy {\n    class Import extends Resource implements IManagedPolicy {\n      public readonly managedPolicyArn = managedPolicyArn;\n    }\n    return new Import(scope, id);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                            \n  public static fromAwsManagedPolicyName(managedPolicyName: string): IManagedPolicy {\n    class AwsManagedPolicy implements IManagedPolicy {\n      public readonly managedPolicyArn = Arn.format({\n        partition: Aws.PARTITION,\n        service: 'iam',\n        region: '', // no region for managed policy\n        account: 'aws', // the account for a managed policy is 'aws'\n        resource: 'policy',\n        resourceName: managedPolicyName,\n      });\n    }\n    return new AwsManagedPolicy();\n  }\n\n                                                                             \n  public readonly managedPolicyArn: string;\n\n                                     \n  public readonly document = new PolicyDocument();\n\n                                                              \n  public readonly managedPolicyName: string;\n\n                                                                     \n  public readonly description: string;\n\n                                                              \n  public readonly path: string;\n\n  private readonly roles = new Array<IRole>();\n  private readonly users = new Array<IUser>();\n  private readonly groups = new Array<IGroup>();\n\n  constructor(scope: Construct, id: string, props: ManagedPolicyProps = {}) {\n    super(scope, id, {\n      physicalName: props.managedPolicyName,\n    });\n\n    this.description = props.description || '';\n    this.path = props.path || '/';\n\n    if (props.document) {\n      this.document = props.document;\n    }\n\n    const resource = new CfnManagedPolicy(this, 'Resource', {\n      policyDocument: this.document,\n      managedPolicyName: this.physicalName,\n      description: this.description,\n      path: this.path,\n      roles: undefinedIfEmpty(() => this.roles.map(r => r.roleName)),\n      users: undefinedIfEmpty(() => this.users.map(u => u.userName)),\n      groups: undefinedIfEmpty(() => this.groups.map(g => g.groupName)),\n    });\n\n    if (props.users) {\n      props.users.forEach(u => this.attachToUser(u));\n    }\n\n    if (props.groups) {\n      props.groups.forEach(g => this.attachToGroup(g));\n    }\n\n    if (props.roles) {\n      props.roles.forEach(r => this.attachToRole(r));\n    }\n\n    if (props.statements) {\n      props.statements.forEach(p => this.addStatements(p));\n    }\n\n    // arn:aws:iam::123456789012:policy/teststack-CreateTestDBPolicy-16M23YE3CS700\n    this.managedPolicyName = this.getResourceNameAttribute(Stack.of(this).splitArn(resource.ref, ArnFormat.SLASH_RESOURCE_NAME).resourceName!);\n    this.managedPolicyArn = this.getResourceArnAttribute(resource.ref, {\n      region: '', // IAM is global in each partition\n      service: 'iam',\n      resource: 'policy',\n      resourceName: this.physicalName,\n    });\n\n    this.node.addValidation({ validate: () => this.validateManagedPolicy() });\n  }\n\n                                                         \n  public addStatements(...statement: PolicyStatement[]) {\n    this.document.addStatements(...statement);\n  }\n\n                                                \n  public attachToUser(user: IUser) {\n    if (this.users.find(u => u === user)) { return; }\n    this.users.push(user);\n  }\n\n                                                \n  public attachToRole(role: IRole) {\n    if (this.roles.find(r => r === role)) { return; }\n    this.roles.push(role);\n  }\n\n                                                 \n  public attachToGroup(group: IGroup) {\n    if (this.groups.find(g => g === group)) { return; }\n    this.groups.push(group);\n  }\n\n  private validateManagedPolicy(): string[] {\n    const result = new Array<string>();\n\n    // validate that the policy document is not empty\n    if (this.document.isEmpty) {\n      result.push('Managed Policy is empty. You must add statements to the policy');\n    }\n\n    result.push(...this.document.validateForIdentityPolicy());\n\n    return result;\n  }\n}\n"],
  "mappings": "oNAAA,OAAA,QAAA,cAGA,gBAAA,QAAA,mBACA,kBAAA,QAAA,qBAIA,OAAA,QAAA,UAoCA,2BAAmC,QAAA,QAAQ,CAyDzC,YAAY,MAAkB,GAAY,MAA4B,GAAE,CACtE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,oBAjBR,KAAA,SAAW,GAAI,mBAAA,eAWd,KAAA,MAAQ,GAAI,OACZ,KAAA,MAAQ,GAAI,OACZ,KAAA,OAAS,GAAI,6EAO5B,KAAK,YAAc,MAAM,aAAe,GACxC,KAAK,KAAO,MAAM,MAAQ,IAEtB,MAAM,UACR,MAAK,SAAW,MAAM,UAGxB,KAAM,UAAW,GAAI,iBAAA,iBAAiB,KAAM,WAAY,CACtD,eAAgB,KAAK,SACrB,kBAAmB,KAAK,aACxB,YAAa,KAAK,YAClB,KAAM,KAAK,KACX,MAAO,OAAA,iBAAiB,IAAM,KAAK,MAAM,IAAI,GAAK,EAAE,WACpD,MAAO,OAAA,iBAAiB,IAAM,KAAK,MAAM,IAAI,GAAK,EAAE,WACpD,OAAQ,OAAA,iBAAiB,IAAM,KAAK,OAAO,IAAI,GAAK,EAAE,cAGxD,AAAI,MAAM,OACR,MAAM,MAAM,QAAQ,GAAK,KAAK,aAAa,IAGzC,MAAM,QACR,MAAM,OAAO,QAAQ,GAAK,KAAK,cAAc,IAG3C,MAAM,OACR,MAAM,MAAM,QAAQ,GAAK,KAAK,aAAa,IAGzC,MAAM,YACR,MAAM,WAAW,QAAQ,GAAK,KAAK,cAAc,IAInD,KAAK,kBAAoB,KAAK,yBAAyB,OAAA,MAAM,GAAG,MAAM,SAAS,SAAS,IAAK,OAAA,UAAU,qBAAqB,cAC5H,KAAK,iBAAmB,KAAK,wBAAwB,SAAS,IAAK,CACjE,OAAQ,GACR,QAAS,MACT,SAAU,SACV,aAAc,KAAK,eAGrB,KAAK,KAAK,cAAc,CAAE,SAAU,IAAM,KAAK,gCAtGnC,uBAAsB,MAAkB,GAAY,kBAAyB,CACzF,oBAAqB,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,iBAAmB,OAAA,MAAM,GAAG,OAAO,UAAU,CAC3D,QAAS,MACT,OAAQ,GACR,QAAS,OAAA,MAAM,GAAG,OAAO,QACzB,SAAU,SACV,aAAc,qBAGlB,MAAO,IAAI,QAAO,MAAO,UAIb,sBAAqB,MAAkB,GAAY,iBAAwB,CACvF,oBAAqB,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,iBAAmB,kBAErC,MAAO,IAAI,QAAO,MAAO,UAIb,0BAAyB,kBAAyB,CAC9D,sBAAsB,CAAtB,aAAA,CACkB,KAAA,iBAAmB,OAAA,IAAI,OAAO,CAC5C,UAAW,OAAA,IAAI,UACf,QAAS,MACT,OAAQ,GACR,QAAS,MACT,SAAU,SACV,aAAc,qBAGlB,MAAO,IAAI,kBAyEN,iBAAiB,UAA4B,wEAClD,KAAK,SAAS,cAAc,GAAG,WAI1B,aAAa,KAAW,CAC7B,wDAAI,MAAK,MAAM,KAAK,GAAK,IAAM,OAC/B,KAAK,MAAM,KAAK,MAIX,aAAa,KAAW,CAC7B,wDAAI,MAAK,MAAM,KAAK,GAAK,IAAM,OAC/B,KAAK,MAAM,KAAK,MAIX,cAAc,MAAa,CAChC,0DAAI,MAAK,OAAO,KAAK,GAAK,IAAM,QAChC,KAAK,OAAO,KAAK,OAGX,uBAAqB,CAC3B,KAAM,QAAS,GAAI,OAGnB,MAAI,MAAK,SAAS,SAChB,OAAO,KAAK,kEAGd,OAAO,KAAK,GAAG,KAAK,SAAS,6BAEtB,QA5IX,QAAA,cAAA",
  "names": []
}
