{
  "version": 3,
  "sources": ["policy-document.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { PolicyStatement } from './policy-statement';\n\n                                              \nexport interface PolicyDocumentProps {\n                                                                                              \n  readonly assignSids?: boolean;\n\n                                                                                                    \n  readonly statements?: PolicyStatement[];\n}\n\n                                                         \nexport class PolicyDocument implements cdk.IResolvable {\n\n                                                                                                                                                                                                \n  public static fromJson(obj: any): PolicyDocument {\n    const newPolicyDocument = new PolicyDocument();\n    const statement = obj.Statement ?? [];\n    if (statement && !Array.isArray(statement)) {\n      throw new Error('Statement must be an array');\n    }\n    newPolicyDocument.addStatements(...obj.Statement.map((s: any) => PolicyStatement.fromJson(s)));\n    return newPolicyDocument;\n  }\n\n  public readonly creationStack: string[];\n  private readonly statements = new Array<PolicyStatement>();\n  private readonly autoAssignSids: boolean;\n\n  constructor(props: PolicyDocumentProps = {}) {\n    this.creationStack = cdk.captureStackTrace();\n    this.autoAssignSids = !!props.assignSids;\n\n    this.addStatements(...props.statements || []);\n  }\n\n  public resolve(context: cdk.IResolveContext): any {\n    context.registerPostProcessor(new RemoveDuplicateStatements(this.autoAssignSids));\n    return this.render();\n  }\n\n                                                                     \n  public get isEmpty(): boolean {\n    return this.statements.length === 0;\n  }\n\n                                                                                                                                                   \n  public get statementCount(): number {\n    return this.statements.length;\n  }\n\n                                                                                                          \n  public addStatements(...statement: PolicyStatement[]) {\n    this.statements.push(...statement);\n  }\n\n                                                       \n  public toString() {\n    return cdk.Token.asString(this, {\n      displayHint: 'PolicyDocument',\n    });\n  }\n\n                                                                                     \n  public toJSON() {\n    return this.render();\n  }\n\n                                                                                                                                                                                                                                     \n  public validateForAnyPolicy(): string[] {\n    const errors = new Array<string>();\n    for (const statement of this.statements) {\n      errors.push(...statement.validateForAnyPolicy());\n    }\n    return errors;\n  }\n\n                                                                                                                                                                                                                                                  \n  public validateForResourcePolicy(): string[] {\n    const errors = new Array<string>();\n    for (const statement of this.statements) {\n      errors.push(...statement.validateForResourcePolicy());\n    }\n    return errors;\n  }\n\n                                                                                                                                                                                                                                                   \n  public validateForIdentityPolicy(): string[] {\n    const errors = new Array<string>();\n    for (const statement of this.statements) {\n      errors.push(...statement.validateForIdentityPolicy());\n    }\n    return errors;\n  }\n\n  private render(): any {\n    if (this.isEmpty) {\n      return undefined;\n    }\n\n    const doc = {\n      Statement: this.statements.map(s => s.toStatementJson()),\n      Version: '2012-10-17',\n    };\n\n    return doc;\n  }\n}\n\n/**\n * Removes duplicate statements and assign Sids if necessary\n */\nclass RemoveDuplicateStatements implements cdk.IPostProcessor {\n  constructor(private readonly autoAssignSids: boolean) {\n  }\n\n  public postProcess(input: any, _context: cdk.IResolveContext): any {\n    if (!input || !input.Statement) {\n      return input;\n    }\n\n    const jsonStatements = new Set<string>();\n    const uniqueStatements: any[] = [];\n\n    for (const statement of input.Statement) {\n      const jsonStatement = JSON.stringify(statement);\n      if (!jsonStatements.has(jsonStatement)) {\n        uniqueStatements.push(statement);\n        jsonStatements.add(jsonStatement);\n      }\n    }\n\n    // assign unique SIDs (the statement index) if `autoAssignSids` is enabled\n    const statements = uniqueStatements.map((s, i) => {\n      if (this.autoAssignSids && !s.Sid) {\n        s.Sid = i.toString();\n      }\n\n      return s;\n    });\n\n    return {\n      ...input,\n      Statement: statements,\n    };\n  }\n}\n"],
  "mappings": "qNAAA,IAAA,QAAA,cACA,mBAAA,QAAA,sBAYA,oBAA2B,CAiBzB,YAAY,MAA6B,GAAE,CAH1B,KAAA,WAAa,GAAI,8EAIhC,KAAK,cAAgB,IAAI,oBACzB,KAAK,eAAiB,CAAC,CAAC,MAAM,WAE9B,KAAK,cAAc,GAAG,MAAM,YAAc,UAlB9B,UAAS,IAAQ,QAC7B,KAAM,mBAAoB,GAAI,gBACxB,UAAS,IAAG,IAAI,aAAS,MAAA,KAAA,OAAA,GAAI,GACnC,GAAI,WAAa,CAAC,MAAM,QAAQ,WAC9B,KAAM,IAAI,OAAM,8BAElB,yBAAkB,cAAc,GAAG,IAAI,UAAU,IAAI,AAAC,GAAW,mBAAA,gBAAgB,SAAS,KACnF,kBAcF,QAAQ,QAA4B,qEACzC,QAAQ,sBAAsB,GAAI,2BAA0B,KAAK,iBAC1D,KAAK,YAIH,UAAO,CAChB,MAAO,MAAK,WAAW,SAAW,KAIzB,iBAAc,CACvB,MAAO,MAAK,WAAW,OAIlB,iBAAiB,UAA4B,wEAClD,KAAK,WAAW,KAAK,GAAG,WAInB,UAAQ,CACb,MAAO,KAAI,MAAM,SAAS,KAAM,CAC9B,YAAa,mBAKV,QAAM,CACX,MAAO,MAAK,SAIP,sBAAoB,CACzB,KAAM,QAAS,GAAI,OACnB,SAAW,aAAa,MAAK,WAC3B,OAAO,KAAK,GAAG,UAAU,wBAE3B,MAAO,QAIF,2BAAyB,CAC9B,KAAM,QAAS,GAAI,OACnB,SAAW,aAAa,MAAK,WAC3B,OAAO,KAAK,GAAG,UAAU,6BAE3B,MAAO,QAIF,2BAAyB,CAC9B,KAAM,QAAS,GAAI,OACnB,SAAW,aAAa,MAAK,WAC3B,OAAO,KAAK,GAAG,UAAU,6BAE3B,MAAO,QAGD,QAAM,CACZ,MAAI,MAAK,QACP,OAGU,CACV,UAAW,KAAK,WAAW,IAAI,GAAK,EAAE,mBACtC,QAAS,eA1Ff,QAAA,eAAA,oHAoGA,+BAA+B,CAC7B,YAA6B,eAAuB,CAAvB,KAAA,eAAA,eAGtB,YAAY,MAAY,SAA6B,CAC1D,GAAI,CAAC,OAAS,CAAC,MAAM,UACnB,MAAO,OAGT,KAAM,gBAAiB,GAAI,KACrB,iBAA0B,GAEhC,SAAW,aAAa,OAAM,UAAW,CACvC,KAAM,eAAgB,KAAK,UAAU,WACrC,AAAK,eAAe,IAAI,gBACtB,kBAAiB,KAAK,WACtB,eAAe,IAAI,gBAKvB,KAAM,YAAa,iBAAiB,IAAI,CAAC,EAAG,IACtC,MAAK,gBAAkB,CAAC,EAAE,KAC5B,GAAE,IAAM,EAAE,YAGL,IAGT,MAAO,IACF,MACH,UAAW",
  "names": []
}
