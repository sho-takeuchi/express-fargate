{
  "version": 3,
  "sources": ["principals.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { Default, FactName, RegionInfo } from '../../region-info';\nimport { IDependable } from 'constructs';\nimport { IOpenIdConnectProvider } from './oidc-provider';\nimport { PolicyDocument } from './policy-document';\nimport { Condition, Conditions, PolicyStatement } from './policy-statement';\nimport { defaultAddPrincipalToAssumeRole } from './private/assume-role-policy';\nimport { ISamlProvider } from './saml-provider';\nimport { LITERAL_STRING_KEY, mergePrincipal } from './util';\n\n                                                                                          \nexport interface IGrantable {\n                                                      \n  readonly grantPrincipal: IPrincipal;\n}\n\nnexport interface IPrincipal extends IGrantable {\n                                                                                        \n  readonly assumeRoleAction: string;\n\n                                                                                       \n  readonly policyFragment: PrincipalPolicyFragment;\n\n                                                                                                                                                                                                                                  \n  readonly principalAccount?: string;\n\n                                                                                                                                                                                                                                                                    \n  addToPolicy(statement: PolicyStatement): boolean;\n\n                                                     \n  addToPrincipalPolicy(statement: PolicyStatement): AddToPrincipalPolicyResult;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \nexport interface IAssumeRolePrincipal extends IPrincipal {\n                                                                                                                                                                                                           \n  addToAssumeRolePolicy(document: PolicyDocument): void;\n}\n\n                                                   \nexport interface AddToPrincipalPolicyResult {\n                                                                                 \n  readonly statementAdded: boolean;\n\n                                                                                                                                                \n  readonly policyDependable?: IDependable;\n}\n\n                                           \nexport abstract class PrincipalBase implements IAssumeRolePrincipal {\n  public readonly grantPrincipal: IPrincipal = this;\n  public readonly principalAccount: string | undefined = undefined;\n\n                                                                                       \n  public abstract readonly policyFragment: PrincipalPolicyFragment;\n\n                                                                                        \n  public readonly assumeRoleAction: string = 'sts:AssumeRole';\n\n  public addToPolicy(statement: PolicyStatement): boolean {\n    return this.addToPrincipalPolicy(statement).statementAdded;\n  }\n\n  public addToPrincipalPolicy(_statement: PolicyStatement): AddToPrincipalPolicyResult {\n    // This base class is used for non-identity principals. None of them\n    // have a PolicyDocument to add to.\n    return { statementAdded: false };\n  }\n\n  public addToAssumeRolePolicy(document: PolicyDocument): void {\n    // Default implementation of this protocol, compatible with the legacy behavior\n    document.addStatements(new PolicyStatement({\n      actions: [this.assumeRoleAction],\n      principals: [this],\n    }));\n  }\n\n  public toString() {\n    // This is a first pass to make the object readable. Descendant principals\n    // should return something nicer.\n    return JSON.stringify(this.policyFragment.principalJson);\n  }\n\n                                                                                      \n  public toJSON() {\n    // Have to implement toJSON() because the default will lead to infinite recursion.\n    return this.policyFragment.principalJson;\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                     \n  public withConditions(conditions: Conditions): PrincipalBase {\n    return new PrincipalWithConditions(this, conditions);\n  }\n\n                                                                                                                                                           \n  public withSessionTags(): PrincipalBase {\n    return new SessionTagsPrincipal(this);\n  }\n}\n\n/**\n * Base class for Principals that wrap other principals\n */\nclass PrincipalAdapter extends PrincipalBase {\n  public readonly assumeRoleAction = this.wrapped.assumeRoleAction;\n  public readonly principalAccount = this.wrapped.principalAccount;\n\n  constructor(protected readonly wrapped: IPrincipal) {\n    super();\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment { return this.wrapped.policyFragment; }\n\n  addToPolicy(statement: PolicyStatement): boolean {\n    return this.wrapped.addToPolicy(statement);\n  }\n  addToPrincipalPolicy(statement: PolicyStatement): AddToPrincipalPolicyResult {\n    return this.wrapped.addToPrincipalPolicy(statement);\n  }\n}\n\n                                                                                                                                                                                                                                                \nexport class PrincipalWithConditions extends PrincipalAdapter {\n  private additionalConditions: Conditions;\n\n  constructor(principal: IPrincipal, conditions: Conditions) {\n    super(principal);\n    this.additionalConditions = conditions;\n  }\n\n                                                 \n  public addCondition(key: string, value: Condition) {\n    const existingValue = this.additionalConditions[key];\n    this.additionalConditions[key] = existingValue ? { ...existingValue, ...value } : value;\n  }\n\n                                                                                                                                                                             \n  public addConditions(conditions: Conditions) {\n    Object.entries(conditions).forEach(([key, value]) => {\n      this.addCondition(key, value);\n    });\n  }\n\n                                                                                                                                                                                                   \n  public get conditions() {\n    return this.mergeConditions(this.wrapped.policyFragment.conditions, this.additionalConditions);\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment(this.wrapped.policyFragment.principalJson, this.conditions);\n  }\n\n  public toString() {\n    return this.wrapped.toString();\n  }\n\n                                                                                      \n  public toJSON() {\n    // Have to implement toJSON() because the default will lead to infinite recursion.\n    return this.policyFragment.principalJson;\n  }\n\n  private mergeConditions(principalConditions: Conditions, additionalConditions: Conditions): Conditions {\n    const mergedConditions: Conditions = {};\n    Object.entries(principalConditions).forEach(([operator, condition]) => {\n      mergedConditions[operator] = condition;\n    });\n\n    Object.entries(additionalConditions).forEach(([operator, condition]) => {\n      // merge the conditions if one of the additional conditions uses an\n      // operator that's already used by the principal's conditions merge the\n      // inner structure.\n      const existing = mergedConditions[operator];\n      if (!existing) {\n        mergedConditions[operator] = condition;\n        return; // continue\n      }\n\n      // if either the existing condition or the new one contain unresolved\n      // tokens, fail the merge. this is as far as we go at this point.\n      if (cdk.Token.isUnresolved(condition) || cdk.Token.isUnresolved(existing)) {\n        throw new Error(`multiple \"${operator}\" conditions cannot be merged if one of them contains an unresolved token`);\n      }\n\n      mergedConditions[operator] = { ...existing, ...condition };\n    });\n    return mergedConditions;\n  }\n}\n\n                                                                                                                                                                                              \nexport class SessionTagsPrincipal extends PrincipalAdapter {\n  constructor(principal: IPrincipal) {\n    super(principal);\n  }\n\n  public addToAssumeRolePolicy(doc: PolicyDocument) {\n    // Lazy import to avoid circular import dependencies during startup\n\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const adapter: typeof import('./private/policydoc-adapter') = require('./private/policydoc-adapter');\n\n    defaultAddPrincipalToAssumeRole(this.wrapped, new adapter.MutatingPolicyDocumentAdapter(doc, (statement) => {\n      statement.addActions('sts:TagSession');\n      return statement;\n    }));\n  }\n}\n\nnexport class PrincipalPolicyFragment {\n                                                                                                                                                                         \n  constructor(\n    public readonly principalJson: { [key: string]: string[] },\n    /**\n     * The conditions under which the policy is in effect.\n     * See [the IAM documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html).\n     */\n    public readonly conditions: Conditions = {}) {\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                             \nexport class ArnPrincipal extends PrincipalBase {\n                                                                                                                                   \n  constructor(public readonly arn: string) {\n    super();\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment({ AWS: [this.arn] });\n  }\n\n  public toString() {\n    return `ArnPrincipal(${this.arn})`;\n  }\n}\n\n                                                                                                           \nexport class AccountPrincipal extends ArnPrincipal {\n  public readonly principalAccount: string | undefined;\n\n                                                                         \n  constructor(public readonly accountId: any) {\n    super(new StackDependentToken(stack => `arn:${stack.partition}:iam::${accountId}:root`).toString());\n    this.principalAccount = accountId;\n  }\n\n  public toString() {\n    return `AccountPrincipal(${this.accountId})`;\n  }\n}\n\n                                           \nexport interface ServicePrincipalOpts {\n                                                                                                                                                                                                     \n  readonly region?: string;\n\n                                                                                                         \n  readonly conditions?: { [key: string]: any };\n}\n\n                                                                                    \nexport class ServicePrincipal extends PrincipalBase {\n                                                                         \n  constructor(public readonly service: string, private readonly opts: ServicePrincipalOpts = {}) {\n    super();\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment({\n      Service: [\n        new ServicePrincipalToken(this.service, this.opts).toString(),\n      ],\n    }, this.opts.conditions);\n  }\n\n  public toString() {\n    return `ServicePrincipal(${this.service})`;\n  }\n}\n\n                                                          \nexport class OrganizationPrincipal extends PrincipalBase {\n                                                                                                             \n  constructor(public readonly organizationId: string) {\n    super();\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment(\n      { AWS: ['*'] },\n      { StringEquals: { 'aws:PrincipalOrgID': this.organizationId } },\n    );\n  }\n\n  public toString() {\n    return `OrganizationPrincipal(${this.organizationId})`;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                  \nexport class CanonicalUserPrincipal extends PrincipalBase {\n                                                                                                                                                                                                                                                   \n  constructor(public readonly canonicalUserId: string) {\n    super();\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment({ CanonicalUser: [this.canonicalUserId] });\n  }\n\n  public toString() {\n    return `CanonicalUserPrincipal(${this.canonicalUserId})`;\n  }\n}\n\nnexport class FederatedPrincipal extends PrincipalBase {\n  public readonly assumeRoleAction: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n  constructor(\n    public readonly federated: string,\n    public readonly conditions: Conditions,\n    assumeRoleAction: string = 'sts:AssumeRole') {\n    super();\n\n    this.assumeRoleAction = assumeRoleAction;\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment({ Federated: [this.federated] }, this.conditions);\n  }\n\n  public toString() {\n    return `FederatedPrincipal(${this.federated})`;\n  }\n}\n\n                                                                                                                                       \nexport class WebIdentityPrincipal extends FederatedPrincipal {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n  constructor(identityProvider: string, conditions: Conditions = {}) {\n    super(identityProvider, conditions ?? {}, 'sts:AssumeRoleWithWebIdentity');\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment({ Federated: [this.federated] }, this.conditions);\n  }\n\n  public toString() {\n    return `WebIdentityPrincipal(${this.federated})`;\n  }\n}\n\n                                                                                                       \nexport class OpenIdConnectPrincipal extends WebIdentityPrincipal {\n\n                                                                                                                                                                                                                                                                                      \n  constructor(openIdConnectProvider: IOpenIdConnectProvider, conditions: Conditions = {}) {\n    super(openIdConnectProvider.openIdConnectProviderArn, conditions ?? {});\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    return new PrincipalPolicyFragment({ Federated: [this.federated] }, this.conditions);\n  }\n\n  public toString() {\n    return `OpenIdConnectPrincipal(${this.federated})`;\n  }\n}\n\n                                                                              \nexport class SamlPrincipal extends FederatedPrincipal {\n  constructor(samlProvider: ISamlProvider, conditions: Conditions) {\n    super(samlProvider.samlProviderArn, conditions, 'sts:AssumeRoleWithSAML');\n  }\n\n  public toString() {\n    return `SamlPrincipal(${this.federated})`;\n  }\n}\n\n                                                                                                                                     \nexport class SamlConsolePrincipal extends SamlPrincipal {\n  constructor(samlProvider: ISamlProvider, conditions: Conditions = {}) {\n    super(samlProvider, {\n      ...conditions,\n      StringEquals: {\n        'SAML:aud': 'https://signin.aws.amazon.com/saml',\n      },\n    });\n  }\n\n  public toString() {\n    return `SamlConsolePrincipal(${this.federated})`;\n  }\n}\n\n                                                                                                 \nexport class AccountRootPrincipal extends AccountPrincipal {\n  constructor() {\n    super(new StackDependentToken(stack => stack.account).toString());\n  }\n\n  public toString() {\n    return 'AccountRootPrincipal()';\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                          \nexport class AnyPrincipal extends ArnPrincipal {\n  constructor() {\n    super('*');\n  }\n\n  public toString() {\n    return 'AnyPrincipal()';\n  }\n}\n\n                                                                                                    \nexport class Anyone extends AnyPrincipal { }\n\n                                                                                                                                                                                                                                                                                                                       \nexport class StarPrincipal extends PrincipalBase {\n  public readonly policyFragment: PrincipalPolicyFragment = {\n    principalJson: { [LITERAL_STRING_KEY]: ['*'] },\n    conditions: {},\n  };\n\n  public toString() {\n    return 'StarPrincipal()';\n  }\n}\n\n                                                                                                                                                                                         \nexport class CompositePrincipal extends PrincipalBase {\n  public readonly assumeRoleAction: string;\n  private readonly principals = new Array<IPrincipal>();\n\n  constructor(...principals: IPrincipal[]) {\n    super();\n    if (principals.length === 0) {\n      throw new Error('CompositePrincipals must be constructed with at least 1 Principal but none were passed.');\n    }\n    this.assumeRoleAction = principals[0].assumeRoleAction;\n    this.addPrincipals(...principals);\n  }\n\n                                                                                                                                                                                                           \n  public addPrincipals(...principals: IPrincipal[]): this {\n    this.principals.push(...principals);\n    return this;\n  }\n\n  public addToAssumeRolePolicy(doc: PolicyDocument) {\n    for (const p of this.principals) {\n      defaultAddPrincipalToAssumeRole(p, doc);\n    }\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    // We only have a problem with conditions if we are trying to render composite\n    // princpals into a single statement (which is when `policyFragment` would get called)\n    for (const p of this.principals) {\n      const fragment = p.policyFragment;\n      if (fragment.conditions && Object.keys(fragment.conditions).length > 0) {\n        throw new Error(\n          'Components of a CompositePrincipal must not have conditions. ' +\n          `Tried to add the following fragment: ${JSON.stringify(fragment)}`);\n      }\n    }\n\n    const principalJson: { [key: string]: string[] } = {};\n\n    for (const p of this.principals) {\n      mergePrincipal(principalJson, p.policyFragment.principalJson);\n    }\n\n    return new PrincipalPolicyFragment(principalJson);\n  }\n\n  public toString() {\n    return `CompositePrincipal(${this.principals})`;\n  }\n}\n\n/**\n * A lazy token that requires an instance of Stack to evaluate\n */\nclass StackDependentToken implements cdk.IResolvable {\n  public readonly creationStack: string[];\n  constructor(private readonly fn: (stack: cdk.Stack) => any) {\n    this.creationStack = cdk.captureStackTrace();\n  }\n\n  public resolve(context: cdk.IResolveContext) {\n    return this.fn(cdk.Stack.of(context.scope));\n  }\n\n  public toString() {\n    return cdk.Token.asString(this);\n  }\n\n  /**\n   * JSON-ify the token\n   *\n   * Used when JSON.stringify() is called\n   */\n  public toJSON() {\n    return '<unresolved-token>';\n  }\n}\n\nclass ServicePrincipalToken implements cdk.IResolvable {\n  public readonly creationStack: string[];\n  constructor(\n    private readonly service: string,\n    private readonly opts: ServicePrincipalOpts) {\n    this.creationStack = cdk.captureStackTrace();\n  }\n\n  public resolve(ctx: cdk.IResolveContext) {\n    if (this.opts.region) {\n      // Special case, handle it separately to not break legacy behavior.\n      return (\n        RegionInfo.get(this.opts.region).servicePrincipal(this.service) ??\n        Default.servicePrincipal(\n          this.service,\n          this.opts.region,\n          cdk.Aws.URL_SUFFIX,\n        )\n      );\n    }\n\n    const stack = cdk.Stack.of(ctx.scope);\n    return stack.regionalFact(\n      FactName.servicePrincipal(this.service),\n      Default.servicePrincipal(this.service, stack.region, cdk.Aws.URL_SUFFIX),\n    );\n  }\n\n  public toString() {\n    return cdk.Token.asString(this, {\n      displayHint: this.service,\n    });\n  }\n\n  /**\n   * JSON-ify the token\n   *\n   * Used when JSON.stringify() is called\n   */\n  public toJSON() {\n    return `<${this.service}>`;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
