{
  "version": 3,
  "sources": ["saml-provider.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport { IResource, Resource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnSAMLProvider } from './iam.generated';\n\n                          \nexport interface ISamlProvider extends IResource {\n                                                                                    \n  readonly samlProviderArn: string;\n}\n\n                                         \nexport interface SamlProviderProps {\n                                                                                                                                                                                                                                                                                                                                                                         \n  readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n  readonly metadataDocument: SamlMetadataDocument;\n}\n\n                                   \nexport abstract class SamlMetadataDocument {\n                                                                  \n  public static fromXml(xml: string): SamlMetadataDocument {\n    return { xml };\n  }\n\n                                                                \n  public static fromFile(path: string): SamlMetadataDocument {\n    return { xml: fs.readFileSync(path, 'utf-8') };\n  }\n\n                                                         \n  public abstract readonly xml: string;\n}\n\n                          \nexport class SamlProvider extends Resource implements ISamlProvider {\n                                            \n  public static fromSamlProviderArn(scope: Construct, id: string, samlProviderArn: string): ISamlProvider {\n    class Import extends Resource implements ISamlProvider {\n      public readonly samlProviderArn = samlProviderArn;\n    }\n    return new Import(scope, id);\n  }\n\n  public readonly samlProviderArn: string;\n\n  constructor(scope: Construct, id: string, props: SamlProviderProps) {\n    super(scope, id);\n\n    if (props.name && !Token.isUnresolved(props.name) && !/^[\\w+=,.@-]{1,128}$/.test(props.name)) {\n      throw new Error('Invalid SAML provider name. The name must be a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-. Length must be between 1 and 128 characters.');\n    }\n\n    const samlProvider = new CfnSAMLProvider(this, 'Resource', {\n      name: props.name,\n      samlMetadataDocument: props.metadataDocument.xml,\n    });\n\n    this.samlProviderArn = samlProvider.ref;\n  }\n}\n"],
  "mappings": "mPAAA,GAAA,QAAA,MACA,OAAA,QAAA,cAEA,gBAAA,QAAA,mBAkBA,0BAA0C,OAE1B,SAAQ,IAAW,CAC/B,MAAO,CAAE,WAIG,UAAS,KAAY,CACjC,MAAO,CAAE,IAAK,GAAG,aAAa,KAAM,WARxC,QAAA,qBAAA,sIAgBA,0BAAkC,QAAA,QAAQ,CAWxC,YAAY,MAAkB,GAAY,MAAwB,CAChE,MAAM,MAAO,IAEb,wEAAI,MAAM,MAAQ,CAAC,OAAA,MAAM,aAAa,MAAM,OAAS,CAAC,sBAAsB,KAAK,MAAM,MACrF,KAAM,IAAI,OAAM,6PAGlB,KAAM,cAAe,GAAI,iBAAA,gBAAgB,KAAM,WAAY,CACzD,KAAM,MAAM,KACZ,qBAAsB,MAAM,iBAAiB,MAG/C,KAAK,gBAAkB,aAAa,UArBxB,qBAAoB,MAAkB,GAAY,gBAAuB,CACrF,oBAAqB,QAAA,QAAQ,CAA7B,aAAA,qBACkB,KAAA,gBAAkB,iBAEpC,MAAO,IAAI,QAAO,MAAO,KAN7B,QAAA,aAAA",
  "names": []
}
