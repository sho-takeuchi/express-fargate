{
  "version": 3,
  "sources": ["unknown-principal.ts"],
  "sourcesContent": ["import { Annotations, Stack } from '../../core';\nimport { DependencyGroup, IConstruct, Node } from 'constructs';\nimport { PolicyStatement } from './policy-statement';\nimport { AddToPrincipalPolicyResult, IPrincipal, PrincipalPolicyFragment } from './principals';\n\n                                             \nexport interface UnknownPrincipalProps {\n                                                   \n  readonly resource: IConstruct;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \nexport class UnknownPrincipal implements IPrincipal {\n  public readonly assumeRoleAction: string = 'sts:AssumeRole';\n  public readonly grantPrincipal: IPrincipal;\n  private readonly resource: IConstruct;\n\n  constructor(props: UnknownPrincipalProps) {\n    this.resource = props.resource;\n    this.grantPrincipal = this;\n  }\n\n  public get policyFragment(): PrincipalPolicyFragment {\n    throw new Error(`Cannot get policy fragment of ${Node.of(this.resource).path}, resource imported without a role`);\n  }\n\n  public addToPrincipalPolicy(statement: PolicyStatement): AddToPrincipalPolicyResult {\n    const stack = Stack.of(this.resource);\n    const repr = JSON.stringify(stack.resolve(statement));\n    Annotations.of(this.resource).addWarning(`Add statement to this resource's role: ${repr}`);\n    // Pretend we did the work. The human will do it for us, eventually.\n    return { statementAdded: true, policyDependable: new DependencyGroup() };\n  }\n\n  public addToPolicy(statement: PolicyStatement): boolean {\n    return this.addToPrincipalPolicy(statement).statementAdded;\n  }\n}"],
  "mappings": "uNAAA,OAAA,QAAA,cACA,aAAA,QAAA,cAWA,sBAA6B,CAK3B,YAAY,MAA4B,CAJxB,KAAA,iBAA2B,0FAKzC,KAAK,SAAW,MAAM,SACtB,KAAK,eAAiB,QAGb,iBAAc,CACvB,KAAM,IAAI,OAAM,iCAAiC,aAAA,KAAK,GAAG,KAAK,UAAU,0CAGnE,qBAAqB,UAA0B,wEACpD,KAAM,OAAQ,OAAA,MAAM,GAAG,KAAK,UACtB,KAAO,KAAK,UAAU,MAAM,QAAQ,YAC1C,cAAA,YAAY,GAAG,KAAK,UAAU,WAAW,0CAA0C,QAE5E,CAAE,eAAgB,GAAM,iBAAkB,GAAI,cAAA,iBAGhD,YAAY,UAA0B,+EACpC,KAAK,qBAAqB,WAAW,gBAvBhD,QAAA,iBAAA",
  "names": []
}
