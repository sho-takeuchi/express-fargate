{
  "version": 3,
  "sources": ["user.ts"],
  "sourcesContent": ["import { Arn, Aws, Lazy, Resource, SecretValue, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { IGroup } from './group';\nimport { CfnUser, CfnUserToGroupAddition } from './iam.generated';\nimport { IIdentity } from './identity-base';\nimport { IManagedPolicy } from './managed-policy';\nimport { Policy } from './policy';\nimport { PolicyStatement } from './policy-statement';\nimport { AddToPrincipalPolicyResult, ArnPrincipal, IPrincipal, PrincipalPolicyFragment } from './principals';\nimport { AttachedPolicies, undefinedIfEmpty } from './util';\n\n                                                                                                           \nexport interface IUser extends IIdentity {\n                                                \n  readonly userName: string;\n\n                                               \n  readonly userArn: string;\n\n                                           \n  addToGroup(group: IGroup): void;\n}\n\n                                              \nexport interface UserProps {\n                                                                                                                                            \n  readonly groups?: IGroup[];\n\n                                                                                                                                                                                                                                                \n  readonly managedPolicies?: IManagedPolicy[];\n\n                                                                                                                                                   \n  readonly path?: string;\n\nn  readonly permissionsBoundary?: IManagedPolicy;\n\nn  readonly userName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                           \n  readonly password?: SecretValue;\n\n                                                                                                                                                                                                                                                      \n  readonly passwordResetRequired?: boolean;\n}\n\n                                                           \nexport interface UserAttributes {\n                                                                                                                    \n  readonly userArn: string;\n}\n\n                                \nexport class User extends Resource implements IIdentity, IUser {\n                                                                                                                                                                                              \n  public static fromUserName(scope: Construct, id: string, userName: string): IUser {\n    const userArn = Stack.of(scope).formatArn({\n      service: 'iam',\n      region: '',\n      resource: 'user',\n      resourceName: userName,\n    });\n\n    return User.fromUserAttributes(scope, id, { userArn });\n  }\n\n                                                                                                                                                                                                                                                                                                                          \n  public static fromUserArn(scope: Construct, id: string, userArn: string): IUser {\n    return User.fromUserAttributes(scope, id, { userArn });\n  }\n\n                                                                                                                                                                                                                                                                                                                            \n  public static fromUserAttributes(scope: Construct, id: string, attrs: UserAttributes): IUser {\n    class Import extends Resource implements IUser {\n      public readonly grantPrincipal: IPrincipal = this;\n      public readonly principalAccount = Aws.ACCOUNT_ID;\n      // Resource name with path can have multiple elements separated by slash.\n      // Therefore, use element after last slash as userName. Happens to work for Tokens since\n      // they don't have a '/' in them.\n      public readonly userName: string = Arn.extractResourceName(attrs.userArn, 'user').split('/').pop()!;\n      public readonly userArn: string = attrs.userArn;\n      public readonly assumeRoleAction: string = 'sts:AssumeRole';\n      public readonly policyFragment: PrincipalPolicyFragment = new ArnPrincipal(attrs.userArn).policyFragment;\n      private readonly attachedPolicies = new AttachedPolicies();\n      private defaultPolicy?: Policy;\n      private groupId = 0;\n\n      public addToPolicy(statement: PolicyStatement): boolean {\n        return this.addToPrincipalPolicy(statement).statementAdded;\n      }\n\n      public addToPrincipalPolicy(statement: PolicyStatement): AddToPrincipalPolicyResult {\n        if (!this.defaultPolicy) {\n          this.defaultPolicy = new Policy(this, 'Policy');\n          this.defaultPolicy.attachToUser(this);\n        }\n        this.defaultPolicy.addStatements(statement);\n        return { statementAdded: true, policyDependable: this.defaultPolicy };\n      }\n\n      public addToGroup(group: IGroup): void {\n        new CfnUserToGroupAddition(Stack.of(group), `${this.userName}Group${this.groupId}`, {\n          groupName: group.groupName,\n          users: [this.userName],\n        });\n        this.groupId += 1;\n      }\n\n      public attachInlinePolicy(policy: Policy): void {\n        this.attachedPolicies.attach(policy);\n        policy.attachToUser(this);\n      }\n\n      public addManagedPolicy(_policy: IManagedPolicy): void {\n        throw new Error('Cannot add managed policy to imported User');\n      }\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly grantPrincipal: IPrincipal = this;\n  public readonly principalAccount: string | undefined = this.env.account;\n  public readonly assumeRoleAction: string = 'sts:AssumeRole';\n\n                                                                            \n  public readonly userName: string;\n\n                                                                             \n  public readonly userArn: string;\n\n                                                                        \n  public readonly permissionsBoundary?: IManagedPolicy;\n\n  public readonly policyFragment: PrincipalPolicyFragment;\n\n  private readonly groups = new Array<any>();\n  private readonly managedPolicies = new Array<IManagedPolicy>();\n  private readonly attachedPolicies = new AttachedPolicies();\n  private defaultPolicy?: Policy;\n\n  constructor(scope: Construct, id: string, props: UserProps = {}) {\n    super(scope, id, {\n      physicalName: props.userName,\n    });\n\n    this.managedPolicies.push(...props.managedPolicies || []);\n    this.permissionsBoundary = props.permissionsBoundary;\n\n    const user = new CfnUser(this, 'Resource', {\n      userName: this.physicalName,\n      groups: undefinedIfEmpty(() => this.groups),\n      managedPolicyArns: Lazy.list({ produce: () => this.managedPolicies.map(p => p.managedPolicyArn) }, { omitEmpty: true }),\n      path: props.path,\n      permissionsBoundary: this.permissionsBoundary ? this.permissionsBoundary.managedPolicyArn : undefined,\n      loginProfile: this.parseLoginProfile(props),\n    });\n\n    this.userName = this.getResourceNameAttribute(user.ref);\n    this.userArn = this.getResourceArnAttribute(user.attrArn, {\n      region: '', // IAM is global in each partition\n      service: 'iam',\n      resource: 'user',\n      resourceName: this.physicalName,\n    });\n\n    this.policyFragment = new ArnPrincipal(this.userArn).policyFragment;\n\n    if (props.groups) {\n      props.groups.forEach(g => this.addToGroup(g));\n    }\n  }\n\n                                           \n  public addToGroup(group: IGroup) {\n    this.groups.push(group.groupName);\n  }\n\n                                                                                                        \n  public addManagedPolicy(policy: IManagedPolicy) {\n    if (this.managedPolicies.find(mp => mp === policy)) { return; }\n    this.managedPolicies.push(policy);\n  }\n\n                                                \n  public attachInlinePolicy(policy: Policy) {\n    this.attachedPolicies.attach(policy);\n    policy.attachToUser(this);\n  }\n\n                                                                                     \n  public addToPrincipalPolicy(statement: PolicyStatement): AddToPrincipalPolicyResult {\n    if (!this.defaultPolicy) {\n      this.defaultPolicy = new Policy(this, 'DefaultPolicy');\n      this.defaultPolicy.attachToUser(this);\n    }\n\n    this.defaultPolicy.addStatements(statement);\n    return { statementAdded: true, policyDependable: this.defaultPolicy };\n  }\n\n  public addToPolicy(statement: PolicyStatement): boolean {\n    return this.addToPrincipalPolicy(statement).statementAdded;\n  }\n\n  private parseLoginProfile(props: UserProps): CfnUser.LoginProfileProperty | undefined {\n    if (props.password) {\n      return {\n        password: props.password.toString(),\n        passwordResetRequired: props.passwordResetRequired,\n      };\n    }\n\n    if (props.passwordResetRequired) {\n      throw new Error('Cannot set \"passwordResetRequired\" without specifying \"initialPassword\"');\n    }\n\n    return undefined; // no console access\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
