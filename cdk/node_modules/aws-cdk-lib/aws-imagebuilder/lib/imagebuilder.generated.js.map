{
  "version": 3,
  "sources": ["imagebuilder.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:31.446Z\",\"fingerprint\":\"vXsf8yQhtvvnASIMpn7lYHzEB5g47U98EbKAk1YQP/A=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                           \nexport interface CfnComponentProps {\n\n                                                                                                                                                                                                            \n    readonly name: string;\n\n                                                                                                                                                                                                                                             \n    readonly platform: string;\n\n                                                                                                                                                                                                                                  \n    readonly version: string;\n\n                                                                                                                                                                                                                                                                     \n    readonly changeDescription?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly data?: string;\n\n                                                                                                                                                                                                                          \n    readonly description?: string;\n\n                                                                                                                                                                                                                                           \n    readonly kmsKeyId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly supportedOsVersions?: string[];\n\n                                                                                                                                                                                                                         \n    readonly tags?: { [key: string]: (string) };\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly uri?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnComponentProps`\n *\n * @param properties - the TypeScript properties of a `CfnComponentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnComponentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('changeDescription', cdk.validateString)(properties.changeDescription));\n    errors.collect(cdk.propertyValidator('data', cdk.validateString)(properties.data));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('platform', cdk.requiredValidator)(properties.platform));\n    errors.collect(cdk.propertyValidator('platform', cdk.validateString)(properties.platform));\n    errors.collect(cdk.propertyValidator('supportedOsVersions', cdk.listValidator(cdk.validateString))(properties.supportedOsVersions));\n    errors.collect(cdk.propertyValidator('tags', cdk.hashValidator(cdk.validateString))(properties.tags));\n    errors.collect(cdk.propertyValidator('uri', cdk.validateString)(properties.uri));\n    errors.collect(cdk.propertyValidator('version', cdk.requiredValidator)(properties.version));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"CfnComponentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::Component` resource\n *\n * @param properties - the TypeScript properties of a `CfnComponentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::Component` resource.\n */\n// @ts-ignore TS6133\nfunction cfnComponentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnComponentPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Platform: cdk.stringToCloudFormation(properties.platform),\n        Version: cdk.stringToCloudFormation(properties.version),\n        ChangeDescription: cdk.stringToCloudFormation(properties.changeDescription),\n        Data: cdk.stringToCloudFormation(properties.data),\n        Description: cdk.stringToCloudFormation(properties.description),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        SupportedOsVersions: cdk.listMapper(cdk.stringToCloudFormation)(properties.supportedOsVersions),\n        Tags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.tags),\n        Uri: cdk.stringToCloudFormation(properties.uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnComponentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnComponentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnComponentProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('platform', 'Platform', cfn_parse.FromCloudFormation.getString(properties.Platform));\n    ret.addPropertyResult('version', 'Version', cfn_parse.FromCloudFormation.getString(properties.Version));\n    ret.addPropertyResult('changeDescription', 'ChangeDescription', properties.ChangeDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ChangeDescription) : undefined);\n    ret.addPropertyResult('data', 'Data', properties.Data != null ? cfn_parse.FromCloudFormation.getString(properties.Data) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('supportedOsVersions', 'SupportedOsVersions', properties.SupportedOsVersions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SupportedOsVersions) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('uri', 'Uri', properties.Uri != null ? cfn_parse.FromCloudFormation.getString(properties.Uri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnComponent extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ImageBuilder::Component\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnComponent {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnComponentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnComponent(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                \n    public readonly attrArn: string;\n\n                                                                                                                                                \n    public readonly attrEncrypted: cdk.IResolvable;\n\n                                                                                              \n    public readonly attrName: string;\n\n                                                                                                                        \n    public readonly attrType: string;\n\n                                                                                                                                                                                                            \n    public name: string;\n\n                                                                                                                                                                                                                                             \n    public platform: string;\n\n                                                                                                                                                                                                                                  \n    public version: string;\n\n                                                                                                                                                                                                                                                                     \n    public changeDescription: string | undefined;\n\nn    public data: string | undefined;\n\n                                                                                                                                                                                                                          \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                           \n    public kmsKeyId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                              \n    public supportedOsVersions: string[] | undefined;\n\n                                                                                                                                                                                                                         \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public uri: string | undefined;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnComponentProps) {\n        super(scope, id, { type: CfnComponent.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'platform', this);\n        cdk.requireProperty(props, 'version', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrEncrypted = this.getAtt('Encrypted');\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n        this.attrType = cdk.Token.asString(this.getAtt('Type'));\n\n        this.name = props.name;\n        this.platform = props.platform;\n        this.version = props.version;\n        this.changeDescription = props.changeDescription;\n        this.data = props.data;\n        this.description = props.description;\n        this.kmsKeyId = props.kmsKeyId;\n        this.supportedOsVersions = props.supportedOsVersions;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::ImageBuilder::Component\", props.tags, { tagPropertyName: 'tags' });\n        this.uri = props.uri;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnComponent.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            platform: this.platform,\n            version: this.version,\n            changeDescription: this.changeDescription,\n            data: this.data,\n            description: this.description,\n            kmsKeyId: this.kmsKeyId,\n            supportedOsVersions: this.supportedOsVersions,\n            tags: this.tags.renderTags(),\n            uri: this.uri,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnComponentPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                       \nexport interface CfnContainerRecipeProps {\n\n                                                                                                                                                                                                                                                                            \n    readonly components: Array<CfnContainerRecipe.ComponentConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                       \n    readonly containerType: string;\n\n                                                                                                                                                                                                                               \n    readonly name: string;\n\n                                                                                                                                                                                                                                             \n    readonly parentImage: string;\n\n                                                                                                                                                                                                                                                             \n    readonly targetRepository: CfnContainerRecipe.TargetContainerRepositoryProperty | cdk.IResolvable;\n\nn    readonly version: string;\n\n                                                                                                                                                                                                                                             \n    readonly description?: string;\n\nn    readonly dockerfileTemplateData?: string;\n\n                                                                                                                                                                                                                                                                                             \n    readonly dockerfileTemplateUri?: string;\n\n                                                                                                                                                                                                                                                                            \n    readonly imageOsVersionOverride?: string;\n\n                                                                                                                                                                                                                                                                                                                      \n    readonly instanceConfiguration?: CfnContainerRecipe.InstanceConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                        \n    readonly kmsKeyId?: string;\n\n                                                                                                                                                                                                                                                                                     \n    readonly platformOverride?: string;\n\n                                                                                                                                                                                                                                             \n    readonly tags?: { [key: string]: (string) };\n\n                                                                                                                                                                                                                                                                        \n    readonly workingDirectory?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnContainerRecipeProps`\n *\n * @param properties - the TypeScript properties of a `CfnContainerRecipeProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainerRecipePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('components', cdk.requiredValidator)(properties.components));\n    errors.collect(cdk.propertyValidator('components', cdk.listValidator(CfnContainerRecipe_ComponentConfigurationPropertyValidator))(properties.components));\n    errors.collect(cdk.propertyValidator('containerType', cdk.requiredValidator)(properties.containerType));\n    errors.collect(cdk.propertyValidator('containerType', cdk.validateString)(properties.containerType));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('dockerfileTemplateData', cdk.validateString)(properties.dockerfileTemplateData));\n    errors.collect(cdk.propertyValidator('dockerfileTemplateUri', cdk.validateString)(properties.dockerfileTemplateUri));\n    errors.collect(cdk.propertyValidator('imageOsVersionOverride', cdk.validateString)(properties.imageOsVersionOverride));\n    errors.collect(cdk.propertyValidator('instanceConfiguration', CfnContainerRecipe_InstanceConfigurationPropertyValidator)(properties.instanceConfiguration));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('parentImage', cdk.requiredValidator)(properties.parentImage));\n    errors.collect(cdk.propertyValidator('parentImage', cdk.validateString)(properties.parentImage));\n    errors.collect(cdk.propertyValidator('platformOverride', cdk.validateString)(properties.platformOverride));\n    errors.collect(cdk.propertyValidator('tags', cdk.hashValidator(cdk.validateString))(properties.tags));\n    errors.collect(cdk.propertyValidator('targetRepository', cdk.requiredValidator)(properties.targetRepository));\n    errors.collect(cdk.propertyValidator('targetRepository', CfnContainerRecipe_TargetContainerRepositoryPropertyValidator)(properties.targetRepository));\n    errors.collect(cdk.propertyValidator('version', cdk.requiredValidator)(properties.version));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    errors.collect(cdk.propertyValidator('workingDirectory', cdk.validateString)(properties.workingDirectory));\n    return errors.wrap('supplied properties not correct for \"CfnContainerRecipeProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ContainerRecipe` resource\n *\n * @param properties - the TypeScript properties of a `CfnContainerRecipeProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ContainerRecipe` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerRecipePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainerRecipePropsValidator(properties).assertSuccess();\n    return {\n        Components: cdk.listMapper(cfnContainerRecipeComponentConfigurationPropertyToCloudFormation)(properties.components),\n        ContainerType: cdk.stringToCloudFormation(properties.containerType),\n        Name: cdk.stringToCloudFormation(properties.name),\n        ParentImage: cdk.stringToCloudFormation(properties.parentImage),\n        TargetRepository: cfnContainerRecipeTargetContainerRepositoryPropertyToCloudFormation(properties.targetRepository),\n        Version: cdk.stringToCloudFormation(properties.version),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DockerfileTemplateData: cdk.stringToCloudFormation(properties.dockerfileTemplateData),\n        DockerfileTemplateUri: cdk.stringToCloudFormation(properties.dockerfileTemplateUri),\n        ImageOsVersionOverride: cdk.stringToCloudFormation(properties.imageOsVersionOverride),\n        InstanceConfiguration: cfnContainerRecipeInstanceConfigurationPropertyToCloudFormation(properties.instanceConfiguration),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        PlatformOverride: cdk.stringToCloudFormation(properties.platformOverride),\n        Tags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.tags),\n        WorkingDirectory: cdk.stringToCloudFormation(properties.workingDirectory),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerRecipePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainerRecipeProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainerRecipeProps>();\n    ret.addPropertyResult('components', 'Components', cfn_parse.FromCloudFormation.getArray(CfnContainerRecipeComponentConfigurationPropertyFromCloudFormation)(properties.Components));\n    ret.addPropertyResult('containerType', 'ContainerType', cfn_parse.FromCloudFormation.getString(properties.ContainerType));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('parentImage', 'ParentImage', cfn_parse.FromCloudFormation.getString(properties.ParentImage));\n    ret.addPropertyResult('targetRepository', 'TargetRepository', CfnContainerRecipeTargetContainerRepositoryPropertyFromCloudFormation(properties.TargetRepository));\n    ret.addPropertyResult('version', 'Version', cfn_parse.FromCloudFormation.getString(properties.Version));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('dockerfileTemplateData', 'DockerfileTemplateData', properties.DockerfileTemplateData != null ? cfn_parse.FromCloudFormation.getString(properties.DockerfileTemplateData) : undefined);\n    ret.addPropertyResult('dockerfileTemplateUri', 'DockerfileTemplateUri', properties.DockerfileTemplateUri != null ? cfn_parse.FromCloudFormation.getString(properties.DockerfileTemplateUri) : undefined);\n    ret.addPropertyResult('imageOsVersionOverride', 'ImageOsVersionOverride', properties.ImageOsVersionOverride != null ? cfn_parse.FromCloudFormation.getString(properties.ImageOsVersionOverride) : undefined);\n    ret.addPropertyResult('instanceConfiguration', 'InstanceConfiguration', properties.InstanceConfiguration != null ? CfnContainerRecipeInstanceConfigurationPropertyFromCloudFormation(properties.InstanceConfiguration) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('platformOverride', 'PlatformOverride', properties.PlatformOverride != null ? cfn_parse.FromCloudFormation.getString(properties.PlatformOverride) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('workingDirectory', 'WorkingDirectory', properties.WorkingDirectory != null ? cfn_parse.FromCloudFormation.getString(properties.WorkingDirectory) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnContainerRecipe extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ImageBuilder::ContainerRecipe\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnContainerRecipe {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnContainerRecipePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnContainerRecipe(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                 \n    public readonly attrArn: string;\n\n                                                                                                     \n    public readonly attrName: string;\n\n                                                                                                                                                                                                                                                                            \n    public components: Array<CfnContainerRecipe.ComponentConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                       \n    public containerType: string;\n\n                                                                                                                                                                                                                               \n    public name: string;\n\n                                                                                                                                                                                                                                             \n    public parentImage: string;\n\n                                                                                                                                                                                                                                                             \n    public targetRepository: CfnContainerRecipe.TargetContainerRepositoryProperty | cdk.IResolvable;\n\nn    public version: string;\n\n                                                                                                                                                                                                                                             \n    public description: string | undefined;\n\nn    public dockerfileTemplateData: string | undefined;\n\n                                                                                                                                                                                                                                                                                             \n    public dockerfileTemplateUri: string | undefined;\n\n                                                                                                                                                                                                                                                                            \n    public imageOsVersionOverride: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                      \n    public instanceConfiguration: CfnContainerRecipe.InstanceConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                        \n    public kmsKeyId: string | undefined;\n\n                                                                                                                                                                                                                                                                                     \n    public platformOverride: string | undefined;\n\n                                                                                                                                                                                                                                             \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                        \n    public workingDirectory: string | undefined;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnContainerRecipeProps) {\n        super(scope, id, { type: CfnContainerRecipe.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'components', this);\n        cdk.requireProperty(props, 'containerType', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'parentImage', this);\n        cdk.requireProperty(props, 'targetRepository', this);\n        cdk.requireProperty(props, 'version', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.components = props.components;\n        this.containerType = props.containerType;\n        this.name = props.name;\n        this.parentImage = props.parentImage;\n        this.targetRepository = props.targetRepository;\n        this.version = props.version;\n        this.description = props.description;\n        this.dockerfileTemplateData = props.dockerfileTemplateData;\n        this.dockerfileTemplateUri = props.dockerfileTemplateUri;\n        this.imageOsVersionOverride = props.imageOsVersionOverride;\n        this.instanceConfiguration = props.instanceConfiguration;\n        this.kmsKeyId = props.kmsKeyId;\n        this.platformOverride = props.platformOverride;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::ImageBuilder::ContainerRecipe\", props.tags, { tagPropertyName: 'tags' });\n        this.workingDirectory = props.workingDirectory;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnContainerRecipe.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            components: this.components,\n            containerType: this.containerType,\n            name: this.name,\n            parentImage: this.parentImage,\n            targetRepository: this.targetRepository,\n            version: this.version,\n            description: this.description,\n            dockerfileTemplateData: this.dockerfileTemplateData,\n            dockerfileTemplateUri: this.dockerfileTemplateUri,\n            imageOsVersionOverride: this.imageOsVersionOverride,\n            instanceConfiguration: this.instanceConfiguration,\n            kmsKeyId: this.kmsKeyId,\n            platformOverride: this.platformOverride,\n            tags: this.tags.renderTags(),\n            workingDirectory: this.workingDirectory,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnContainerRecipePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnContainerRecipe {\n                                                                                                                                                                                                                                                                         \n    export interface ComponentConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                          \n        readonly componentArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainerRecipe_ComponentConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('componentArn', cdk.validateString)(properties.componentArn));\n    return errors.wrap('supplied properties not correct for \"ComponentConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ContainerRecipe.ComponentConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ComponentConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ContainerRecipe.ComponentConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerRecipeComponentConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainerRecipe_ComponentConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ComponentArn: cdk.stringToCloudFormation(properties.componentArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerRecipeComponentConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainerRecipe.ComponentConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainerRecipe.ComponentConfigurationProperty>();\n    ret.addPropertyResult('componentArn', 'ComponentArn', properties.ComponentArn != null ? cfn_parse.FromCloudFormation.getString(properties.ComponentArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnContainerRecipe {\n                                                                                                                                                                                                                                                                                                       \n    export interface EbsInstanceBlockDeviceSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly deleteOnTermination?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                    \n        readonly encrypted?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                         \n        readonly iops?: number;\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly snapshotId?: string;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly throughput?: number;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly volumeSize?: number;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly volumeType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EbsInstanceBlockDeviceSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `EbsInstanceBlockDeviceSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainerRecipe_EbsInstanceBlockDeviceSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));\n    errors.collect(cdk.propertyValidator('encrypted', cdk.validateBoolean)(properties.encrypted));\n    errors.collect(cdk.propertyValidator('iops', cdk.validateNumber)(properties.iops));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('snapshotId', cdk.validateString)(properties.snapshotId));\n    errors.collect(cdk.propertyValidator('throughput', cdk.validateNumber)(properties.throughput));\n    errors.collect(cdk.propertyValidator('volumeSize', cdk.validateNumber)(properties.volumeSize));\n    errors.collect(cdk.propertyValidator('volumeType', cdk.validateString)(properties.volumeType));\n    return errors.wrap('supplied properties not correct for \"EbsInstanceBlockDeviceSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ContainerRecipe.EbsInstanceBlockDeviceSpecification` resource\n *\n * @param properties - the TypeScript properties of a `EbsInstanceBlockDeviceSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ContainerRecipe.EbsInstanceBlockDeviceSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerRecipeEbsInstanceBlockDeviceSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainerRecipe_EbsInstanceBlockDeviceSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),\n        Encrypted: cdk.booleanToCloudFormation(properties.encrypted),\n        Iops: cdk.numberToCloudFormation(properties.iops),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),\n        Throughput: cdk.numberToCloudFormation(properties.throughput),\n        VolumeSize: cdk.numberToCloudFormation(properties.volumeSize),\n        VolumeType: cdk.stringToCloudFormation(properties.volumeType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerRecipeEbsInstanceBlockDeviceSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainerRecipe.EbsInstanceBlockDeviceSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainerRecipe.EbsInstanceBlockDeviceSpecificationProperty>();\n    ret.addPropertyResult('deleteOnTermination', 'DeleteOnTermination', properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : undefined);\n    ret.addPropertyResult('encrypted', 'Encrypted', properties.Encrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Encrypted) : undefined);\n    ret.addPropertyResult('iops', 'Iops', properties.Iops != null ? cfn_parse.FromCloudFormation.getNumber(properties.Iops) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('snapshotId', 'SnapshotId', properties.SnapshotId != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotId) : undefined);\n    ret.addPropertyResult('throughput', 'Throughput', properties.Throughput != null ? cfn_parse.FromCloudFormation.getNumber(properties.Throughput) : undefined);\n    ret.addPropertyResult('volumeSize', 'VolumeSize', properties.VolumeSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSize) : undefined);\n    ret.addPropertyResult('volumeType', 'VolumeType', properties.VolumeType != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnContainerRecipe {\n                                                                                                                                                                                                                                                                                                                  \n    export interface InstanceBlockDeviceMappingProperty {\n                                                                                                                                                                                                                                                                                                                         \n        readonly deviceName?: string;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly ebs?: CfnContainerRecipe.EbsInstanceBlockDeviceSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                          \n        readonly noDevice?: string;\n                                                                                                                                                                                                                                                                                                                          \n        readonly virtualName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceBlockDeviceMappingProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceBlockDeviceMappingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainerRecipe_InstanceBlockDeviceMappingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deviceName', cdk.validateString)(properties.deviceName));\n    errors.collect(cdk.propertyValidator('ebs', CfnContainerRecipe_EbsInstanceBlockDeviceSpecificationPropertyValidator)(properties.ebs));\n    errors.collect(cdk.propertyValidator('noDevice', cdk.validateString)(properties.noDevice));\n    errors.collect(cdk.propertyValidator('virtualName', cdk.validateString)(properties.virtualName));\n    return errors.wrap('supplied properties not correct for \"InstanceBlockDeviceMappingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ContainerRecipe.InstanceBlockDeviceMapping` resource\n *\n * @param properties - the TypeScript properties of a `InstanceBlockDeviceMappingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ContainerRecipe.InstanceBlockDeviceMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerRecipeInstanceBlockDeviceMappingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainerRecipe_InstanceBlockDeviceMappingPropertyValidator(properties).assertSuccess();\n    return {\n        DeviceName: cdk.stringToCloudFormation(properties.deviceName),\n        Ebs: cfnContainerRecipeEbsInstanceBlockDeviceSpecificationPropertyToCloudFormation(properties.ebs),\n        NoDevice: cdk.stringToCloudFormation(properties.noDevice),\n        VirtualName: cdk.stringToCloudFormation(properties.virtualName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerRecipeInstanceBlockDeviceMappingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainerRecipe.InstanceBlockDeviceMappingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainerRecipe.InstanceBlockDeviceMappingProperty>();\n    ret.addPropertyResult('deviceName', 'DeviceName', properties.DeviceName != null ? cfn_parse.FromCloudFormation.getString(properties.DeviceName) : undefined);\n    ret.addPropertyResult('ebs', 'Ebs', properties.Ebs != null ? CfnContainerRecipeEbsInstanceBlockDeviceSpecificationPropertyFromCloudFormation(properties.Ebs) : undefined);\n    ret.addPropertyResult('noDevice', 'NoDevice', properties.NoDevice != null ? cfn_parse.FromCloudFormation.getString(properties.NoDevice) : undefined);\n    ret.addPropertyResult('virtualName', 'VirtualName', properties.VirtualName != null ? cfn_parse.FromCloudFormation.getString(properties.VirtualName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnContainerRecipe {\n                                                                                                                                                                                                                                                                                                                                                                   \n    export interface InstanceConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly blockDeviceMappings?: Array<CfnContainerRecipe.InstanceBlockDeviceMappingProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly image?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainerRecipe_InstanceConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('blockDeviceMappings', cdk.listValidator(CfnContainerRecipe_InstanceBlockDeviceMappingPropertyValidator))(properties.blockDeviceMappings));\n    errors.collect(cdk.propertyValidator('image', cdk.validateString)(properties.image));\n    return errors.wrap('supplied properties not correct for \"InstanceConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ContainerRecipe.InstanceConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `InstanceConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ContainerRecipe.InstanceConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerRecipeInstanceConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainerRecipe_InstanceConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        BlockDeviceMappings: cdk.listMapper(cfnContainerRecipeInstanceBlockDeviceMappingPropertyToCloudFormation)(properties.blockDeviceMappings),\n        Image: cdk.stringToCloudFormation(properties.image),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerRecipeInstanceConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainerRecipe.InstanceConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainerRecipe.InstanceConfigurationProperty>();\n    ret.addPropertyResult('blockDeviceMappings', 'BlockDeviceMappings', properties.BlockDeviceMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnContainerRecipeInstanceBlockDeviceMappingPropertyFromCloudFormation)(properties.BlockDeviceMappings) : undefined);\n    ret.addPropertyResult('image', 'Image', properties.Image != null ? cfn_parse.FromCloudFormation.getString(properties.Image) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnContainerRecipe {\n                                                                                                                                                                                                                                                                                                         \n    export interface TargetContainerRepositoryProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly repositoryName?: string;\n                                                                                                                                                                                                                                                                                                                                    \n        readonly service?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetContainerRepositoryProperty`\n *\n * @param properties - the TypeScript properties of a `TargetContainerRepositoryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainerRecipe_TargetContainerRepositoryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('repositoryName', cdk.validateString)(properties.repositoryName));\n    errors.collect(cdk.propertyValidator('service', cdk.validateString)(properties.service));\n    return errors.wrap('supplied properties not correct for \"TargetContainerRepositoryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ContainerRecipe.TargetContainerRepository` resource\n *\n * @param properties - the TypeScript properties of a `TargetContainerRepositoryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ContainerRecipe.TargetContainerRepository` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerRecipeTargetContainerRepositoryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainerRecipe_TargetContainerRepositoryPropertyValidator(properties).assertSuccess();\n    return {\n        RepositoryName: cdk.stringToCloudFormation(properties.repositoryName),\n        Service: cdk.stringToCloudFormation(properties.service),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerRecipeTargetContainerRepositoryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainerRecipe.TargetContainerRepositoryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainerRecipe.TargetContainerRepositoryProperty>();\n    ret.addPropertyResult('repositoryName', 'RepositoryName', properties.RepositoryName != null ? cfn_parse.FromCloudFormation.getString(properties.RepositoryName) : undefined);\n    ret.addPropertyResult('service', 'Service', properties.Service != null ? cfn_parse.FromCloudFormation.getString(properties.Service) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                           \nexport interface CfnDistributionConfigurationProps {\n\n                                                                                                                                                                                                                                                                                                                              \n    readonly distributions: Array<CfnDistributionConfiguration.DistributionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                              \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                            \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                              \n    readonly tags?: { [key: string]: (string) };\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDistributionConfigurationProps`\n *\n * @param properties - the TypeScript properties of a `CfnDistributionConfigurationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistributionConfigurationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('distributions', cdk.requiredValidator)(properties.distributions));\n    errors.collect(cdk.propertyValidator('distributions', cdk.listValidator(CfnDistributionConfiguration_DistributionPropertyValidator))(properties.distributions));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.hashValidator(cdk.validateString))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDistributionConfigurationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::DistributionConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CfnDistributionConfigurationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::DistributionConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionConfigurationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistributionConfigurationPropsValidator(properties).assertSuccess();\n    return {\n        Distributions: cdk.listMapper(cfnDistributionConfigurationDistributionPropertyToCloudFormation)(properties.distributions),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionConfigurationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistributionConfigurationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistributionConfigurationProps>();\n    ret.addPropertyResult('distributions', 'Distributions', cfn_parse.FromCloudFormation.getArray(CfnDistributionConfigurationDistributionPropertyFromCloudFormation)(properties.Distributions));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDistributionConfiguration extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ImageBuilder::DistributionConfiguration\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDistributionConfiguration {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDistributionConfigurationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDistributionConfiguration(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    public readonly attrArn: string;\n\n                                                                                                               \n    public readonly attrName: string;\n\n                                                                                                                                                                                                                                                                                                                              \n    public distributions: Array<CfnDistributionConfiguration.DistributionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                              \n    public name: string;\n\n                                                                                                                                                                                                                                                                            \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnDistributionConfigurationProps) {\n        super(scope, id, { type: CfnDistributionConfiguration.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'distributions', this);\n        cdk.requireProperty(props, 'name', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.distributions = props.distributions;\n        this.name = props.name;\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::ImageBuilder::DistributionConfiguration\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDistributionConfiguration.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            distributions: this.distributions,\n            name: this.name,\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDistributionConfigurationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDistributionConfiguration {\nn    export interface DistributionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly amiDistributionConfiguration?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly containerDistributionConfiguration?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly launchTemplateConfigurations?: Array<CfnDistributionConfiguration.LaunchTemplateConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly licenseConfigurationArns?: string[];\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly region: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DistributionProperty`\n *\n * @param properties - the TypeScript properties of a `DistributionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistributionConfiguration_DistributionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('amiDistributionConfiguration', cdk.validateObject)(properties.amiDistributionConfiguration));\n    errors.collect(cdk.propertyValidator('containerDistributionConfiguration', cdk.validateObject)(properties.containerDistributionConfiguration));\n    errors.collect(cdk.propertyValidator('launchTemplateConfigurations', cdk.listValidator(CfnDistributionConfiguration_LaunchTemplateConfigurationPropertyValidator))(properties.launchTemplateConfigurations));\n    errors.collect(cdk.propertyValidator('licenseConfigurationArns', cdk.listValidator(cdk.validateString))(properties.licenseConfigurationArns));\n    errors.collect(cdk.propertyValidator('region', cdk.requiredValidator)(properties.region));\n    errors.collect(cdk.propertyValidator('region', cdk.validateString)(properties.region));\n    return errors.wrap('supplied properties not correct for \"DistributionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::DistributionConfiguration.Distribution` resource\n *\n * @param properties - the TypeScript properties of a `DistributionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::DistributionConfiguration.Distribution` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionConfigurationDistributionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistributionConfiguration_DistributionPropertyValidator(properties).assertSuccess();\n    return {\n        AmiDistributionConfiguration: cdk.objectToCloudFormation(properties.amiDistributionConfiguration),\n        ContainerDistributionConfiguration: cdk.objectToCloudFormation(properties.containerDistributionConfiguration),\n        LaunchTemplateConfigurations: cdk.listMapper(cfnDistributionConfigurationLaunchTemplateConfigurationPropertyToCloudFormation)(properties.launchTemplateConfigurations),\n        LicenseConfigurationArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.licenseConfigurationArns),\n        Region: cdk.stringToCloudFormation(properties.region),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionConfigurationDistributionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistributionConfiguration.DistributionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistributionConfiguration.DistributionProperty>();\n    ret.addPropertyResult('amiDistributionConfiguration', 'AmiDistributionConfiguration', properties.AmiDistributionConfiguration != null ? cfn_parse.FromCloudFormation.getAny(properties.AmiDistributionConfiguration) : undefined);\n    ret.addPropertyResult('containerDistributionConfiguration', 'ContainerDistributionConfiguration', properties.ContainerDistributionConfiguration != null ? cfn_parse.FromCloudFormation.getAny(properties.ContainerDistributionConfiguration) : undefined);\n    ret.addPropertyResult('launchTemplateConfigurations', 'LaunchTemplateConfigurations', properties.LaunchTemplateConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnDistributionConfigurationLaunchTemplateConfigurationPropertyFromCloudFormation)(properties.LaunchTemplateConfigurations) : undefined);\n    ret.addPropertyResult('licenseConfigurationArns', 'LicenseConfigurationArns', properties.LicenseConfigurationArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.LicenseConfigurationArns) : undefined);\n    ret.addPropertyResult('region', 'Region', cfn_parse.FromCloudFormation.getString(properties.Region));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistributionConfiguration {\n                                                                                                                                                                                                                                                                                                                        \n    export interface LaunchTemplateConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly accountId?: string;\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly launchTemplateId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly setDefaultVersion?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LaunchTemplateConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistributionConfiguration_LaunchTemplateConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accountId', cdk.validateString)(properties.accountId));\n    errors.collect(cdk.propertyValidator('launchTemplateId', cdk.validateString)(properties.launchTemplateId));\n    errors.collect(cdk.propertyValidator('setDefaultVersion', cdk.validateBoolean)(properties.setDefaultVersion));\n    return errors.wrap('supplied properties not correct for \"LaunchTemplateConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::DistributionConfiguration.LaunchTemplateConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `LaunchTemplateConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::DistributionConfiguration.LaunchTemplateConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionConfigurationLaunchTemplateConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistributionConfiguration_LaunchTemplateConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AccountId: cdk.stringToCloudFormation(properties.accountId),\n        LaunchTemplateId: cdk.stringToCloudFormation(properties.launchTemplateId),\n        SetDefaultVersion: cdk.booleanToCloudFormation(properties.setDefaultVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionConfigurationLaunchTemplateConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistributionConfiguration.LaunchTemplateConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistributionConfiguration.LaunchTemplateConfigurationProperty>();\n    ret.addPropertyResult('accountId', 'AccountId', properties.AccountId != null ? cfn_parse.FromCloudFormation.getString(properties.AccountId) : undefined);\n    ret.addPropertyResult('launchTemplateId', 'LaunchTemplateId', properties.LaunchTemplateId != null ? cfn_parse.FromCloudFormation.getString(properties.LaunchTemplateId) : undefined);\n    ret.addPropertyResult('setDefaultVersion', 'SetDefaultVersion', properties.SetDefaultVersion != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SetDefaultVersion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                   \nexport interface CfnImageProps {\n\n                                                                                                                                                                                                                                                                                                           \n    readonly infrastructureConfigurationArn: string;\n\n                                                                                                                                                                                                                                                                              \n    readonly containerRecipeArn?: string;\n\n                                                                                                                                                                                                                                                                   \n    readonly distributionConfigurationArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly enhancedImageMetadataEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                       \n    readonly imageRecipeArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                         \n    readonly imageTestsConfiguration?: CfnImage.ImageTestsConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                \n    readonly tags?: { [key: string]: (string) };\n}\n\n/**\n * Determine whether the given properties match those of a `CfnImageProps`\n *\n * @param properties - the TypeScript properties of a `CfnImageProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnImagePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerRecipeArn', cdk.validateString)(properties.containerRecipeArn));\n    errors.collect(cdk.propertyValidator('distributionConfigurationArn', cdk.validateString)(properties.distributionConfigurationArn));\n    errors.collect(cdk.propertyValidator('enhancedImageMetadataEnabled', cdk.validateBoolean)(properties.enhancedImageMetadataEnabled));\n    errors.collect(cdk.propertyValidator('imageRecipeArn', cdk.validateString)(properties.imageRecipeArn));\n    errors.collect(cdk.propertyValidator('imageTestsConfiguration', CfnImage_ImageTestsConfigurationPropertyValidator)(properties.imageTestsConfiguration));\n    errors.collect(cdk.propertyValidator('infrastructureConfigurationArn', cdk.requiredValidator)(properties.infrastructureConfigurationArn));\n    errors.collect(cdk.propertyValidator('infrastructureConfigurationArn', cdk.validateString)(properties.infrastructureConfigurationArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.hashValidator(cdk.validateString))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnImageProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::Image` resource\n *\n * @param properties - the TypeScript properties of a `CfnImageProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::Image` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImagePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImagePropsValidator(properties).assertSuccess();\n    return {\n        InfrastructureConfigurationArn: cdk.stringToCloudFormation(properties.infrastructureConfigurationArn),\n        ContainerRecipeArn: cdk.stringToCloudFormation(properties.containerRecipeArn),\n        DistributionConfigurationArn: cdk.stringToCloudFormation(properties.distributionConfigurationArn),\n        EnhancedImageMetadataEnabled: cdk.booleanToCloudFormation(properties.enhancedImageMetadataEnabled),\n        ImageRecipeArn: cdk.stringToCloudFormation(properties.imageRecipeArn),\n        ImageTestsConfiguration: cfnImageImageTestsConfigurationPropertyToCloudFormation(properties.imageTestsConfiguration),\n        Tags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImagePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageProps>();\n    ret.addPropertyResult('infrastructureConfigurationArn', 'InfrastructureConfigurationArn', cfn_parse.FromCloudFormation.getString(properties.InfrastructureConfigurationArn));\n    ret.addPropertyResult('containerRecipeArn', 'ContainerRecipeArn', properties.ContainerRecipeArn != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerRecipeArn) : undefined);\n    ret.addPropertyResult('distributionConfigurationArn', 'DistributionConfigurationArn', properties.DistributionConfigurationArn != null ? cfn_parse.FromCloudFormation.getString(properties.DistributionConfigurationArn) : undefined);\n    ret.addPropertyResult('enhancedImageMetadataEnabled', 'EnhancedImageMetadataEnabled', properties.EnhancedImageMetadataEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnhancedImageMetadataEnabled) : undefined);\n    ret.addPropertyResult('imageRecipeArn', 'ImageRecipeArn', properties.ImageRecipeArn != null ? cfn_parse.FromCloudFormation.getString(properties.ImageRecipeArn) : undefined);\n    ret.addPropertyResult('imageTestsConfiguration', 'ImageTestsConfiguration', properties.ImageTestsConfiguration != null ? CfnImageImageTestsConfigurationPropertyFromCloudFormation(properties.ImageTestsConfiguration) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \nexport class CfnImage extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ImageBuilder::Image\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnImage {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnImagePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnImage(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                             \n    public readonly attrArn: string;\n\n                                                                                                                                                           \n    public readonly attrImageId: string;\n\n                                                                                          \n    public readonly attrName: string;\n\n                                                                                                                                                                                                                                                                                                           \n    public infrastructureConfigurationArn: string;\n\n                                                                                                                                                                                                                                                                              \n    public containerRecipeArn: string | undefined;\n\n                                                                                                                                                                                                                                                                   \n    public distributionConfigurationArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public enhancedImageMetadataEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                       \n    public imageRecipeArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                         \n    public imageTestsConfiguration: CfnImage.ImageTestsConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnImageProps) {\n        super(scope, id, { type: CfnImage.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'infrastructureConfigurationArn', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrImageId = cdk.Token.asString(this.getAtt('ImageId'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.infrastructureConfigurationArn = props.infrastructureConfigurationArn;\n        this.containerRecipeArn = props.containerRecipeArn;\n        this.distributionConfigurationArn = props.distributionConfigurationArn;\n        this.enhancedImageMetadataEnabled = props.enhancedImageMetadataEnabled;\n        this.imageRecipeArn = props.imageRecipeArn;\n        this.imageTestsConfiguration = props.imageTestsConfiguration;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::ImageBuilder::Image\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnImage.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            infrastructureConfigurationArn: this.infrastructureConfigurationArn,\n            containerRecipeArn: this.containerRecipeArn,\n            distributionConfigurationArn: this.distributionConfigurationArn,\n            enhancedImageMetadataEnabled: this.enhancedImageMetadataEnabled,\n            imageRecipeArn: this.imageRecipeArn,\n            imageTestsConfiguration: this.imageTestsConfiguration,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnImagePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnImage {\nn    export interface ImageTestsConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly imageTestsEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                      \n        readonly timeoutMinutes?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ImageTestsConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ImageTestsConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnImage_ImageTestsConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('imageTestsEnabled', cdk.validateBoolean)(properties.imageTestsEnabled));\n    errors.collect(cdk.propertyValidator('timeoutMinutes', cdk.validateNumber)(properties.timeoutMinutes));\n    return errors.wrap('supplied properties not correct for \"ImageTestsConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::Image.ImageTestsConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ImageTestsConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::Image.ImageTestsConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImageImageTestsConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImage_ImageTestsConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ImageTestsEnabled: cdk.booleanToCloudFormation(properties.imageTestsEnabled),\n        TimeoutMinutes: cdk.numberToCloudFormation(properties.timeoutMinutes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImageImageTestsConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImage.ImageTestsConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImage.ImageTestsConfigurationProperty>();\n    ret.addPropertyResult('imageTestsEnabled', 'ImageTestsEnabled', properties.ImageTestsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ImageTestsEnabled) : undefined);\n    ret.addPropertyResult('timeoutMinutes', 'TimeoutMinutes', properties.TimeoutMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutMinutes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                   \nexport interface CfnImagePipelineProps {\n\n                                                                                                                                                                                                                                                                                                                           \n    readonly infrastructureConfigurationArn: string;\n\n                                                                                                                                                                                                                         \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                              \n    readonly containerRecipeArn?: string;\n\n                                                                                                                                                                                                                                        \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                       \n    readonly distributionConfigurationArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly enhancedImageMetadataEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                           \n    readonly imageRecipeArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                    \n    readonly imageTestsConfiguration?: CfnImagePipeline.ImageTestsConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                        \n    readonly schedule?: CfnImagePipeline.ScheduleProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                             \n    readonly status?: string;\n\n                                                                                                                                                                                                                          \n    readonly tags?: { [key: string]: (string) };\n}\n\n/**\n * Determine whether the given properties match those of a `CfnImagePipelineProps`\n *\n * @param properties - the TypeScript properties of a `CfnImagePipelineProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnImagePipelinePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerRecipeArn', cdk.validateString)(properties.containerRecipeArn));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('distributionConfigurationArn', cdk.validateString)(properties.distributionConfigurationArn));\n    errors.collect(cdk.propertyValidator('enhancedImageMetadataEnabled', cdk.validateBoolean)(properties.enhancedImageMetadataEnabled));\n    errors.collect(cdk.propertyValidator('imageRecipeArn', cdk.validateString)(properties.imageRecipeArn));\n    errors.collect(cdk.propertyValidator('imageTestsConfiguration', CfnImagePipeline_ImageTestsConfigurationPropertyValidator)(properties.imageTestsConfiguration));\n    errors.collect(cdk.propertyValidator('infrastructureConfigurationArn', cdk.requiredValidator)(properties.infrastructureConfigurationArn));\n    errors.collect(cdk.propertyValidator('infrastructureConfigurationArn', cdk.validateString)(properties.infrastructureConfigurationArn));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('schedule', CfnImagePipeline_SchedulePropertyValidator)(properties.schedule));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    errors.collect(cdk.propertyValidator('tags', cdk.hashValidator(cdk.validateString))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnImagePipelineProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ImagePipeline` resource\n *\n * @param properties - the TypeScript properties of a `CfnImagePipelineProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ImagePipeline` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImagePipelinePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImagePipelinePropsValidator(properties).assertSuccess();\n    return {\n        InfrastructureConfigurationArn: cdk.stringToCloudFormation(properties.infrastructureConfigurationArn),\n        Name: cdk.stringToCloudFormation(properties.name),\n        ContainerRecipeArn: cdk.stringToCloudFormation(properties.containerRecipeArn),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DistributionConfigurationArn: cdk.stringToCloudFormation(properties.distributionConfigurationArn),\n        EnhancedImageMetadataEnabled: cdk.booleanToCloudFormation(properties.enhancedImageMetadataEnabled),\n        ImageRecipeArn: cdk.stringToCloudFormation(properties.imageRecipeArn),\n        ImageTestsConfiguration: cfnImagePipelineImageTestsConfigurationPropertyToCloudFormation(properties.imageTestsConfiguration),\n        Schedule: cfnImagePipelineSchedulePropertyToCloudFormation(properties.schedule),\n        Status: cdk.stringToCloudFormation(properties.status),\n        Tags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImagePipelinePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImagePipelineProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImagePipelineProps>();\n    ret.addPropertyResult('infrastructureConfigurationArn', 'InfrastructureConfigurationArn', cfn_parse.FromCloudFormation.getString(properties.InfrastructureConfigurationArn));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('containerRecipeArn', 'ContainerRecipeArn', properties.ContainerRecipeArn != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerRecipeArn) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('distributionConfigurationArn', 'DistributionConfigurationArn', properties.DistributionConfigurationArn != null ? cfn_parse.FromCloudFormation.getString(properties.DistributionConfigurationArn) : undefined);\n    ret.addPropertyResult('enhancedImageMetadataEnabled', 'EnhancedImageMetadataEnabled', properties.EnhancedImageMetadataEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnhancedImageMetadataEnabled) : undefined);\n    ret.addPropertyResult('imageRecipeArn', 'ImageRecipeArn', properties.ImageRecipeArn != null ? cfn_parse.FromCloudFormation.getString(properties.ImageRecipeArn) : undefined);\n    ret.addPropertyResult('imageTestsConfiguration', 'ImageTestsConfiguration', properties.ImageTestsConfiguration != null ? CfnImagePipelineImageTestsConfigurationPropertyFromCloudFormation(properties.ImageTestsConfiguration) : undefined);\n    ret.addPropertyResult('schedule', 'Schedule', properties.Schedule != null ? CfnImagePipelineSchedulePropertyFromCloudFormation(properties.Schedule) : undefined);\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnImagePipeline extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ImageBuilder::ImagePipeline\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnImagePipeline {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnImagePipelinePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnImagePipeline(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                          \n    public readonly attrArn: string;\n\n                                                                                                   \n    public readonly attrName: string;\n\n                                                                                                                                                                                                                                                                                                                           \n    public infrastructureConfigurationArn: string;\n\n                                                                                                                                                                                                                         \n    public name: string;\n\n                                                                                                                                                                                                                                                                                              \n    public containerRecipeArn: string | undefined;\n\n                                                                                                                                                                                                                                        \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                       \n    public distributionConfigurationArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public enhancedImageMetadataEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                           \n    public imageRecipeArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                    \n    public imageTestsConfiguration: CfnImagePipeline.ImageTestsConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                        \n    public schedule: CfnImagePipeline.ScheduleProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    public status: string | undefined;\n\n                                                                                                                                                                                                                          \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnImagePipelineProps) {\n        super(scope, id, { type: CfnImagePipeline.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'infrastructureConfigurationArn', this);\n        cdk.requireProperty(props, 'name', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.infrastructureConfigurationArn = props.infrastructureConfigurationArn;\n        this.name = props.name;\n        this.containerRecipeArn = props.containerRecipeArn;\n        this.description = props.description;\n        this.distributionConfigurationArn = props.distributionConfigurationArn;\n        this.enhancedImageMetadataEnabled = props.enhancedImageMetadataEnabled;\n        this.imageRecipeArn = props.imageRecipeArn;\n        this.imageTestsConfiguration = props.imageTestsConfiguration;\n        this.schedule = props.schedule;\n        this.status = props.status;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::ImageBuilder::ImagePipeline\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnImagePipeline.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            infrastructureConfigurationArn: this.infrastructureConfigurationArn,\n            name: this.name,\n            containerRecipeArn: this.containerRecipeArn,\n            description: this.description,\n            distributionConfigurationArn: this.distributionConfigurationArn,\n            enhancedImageMetadataEnabled: this.enhancedImageMetadataEnabled,\n            imageRecipeArn: this.imageRecipeArn,\n            imageTestsConfiguration: this.imageTestsConfiguration,\n            schedule: this.schedule,\n            status: this.status,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnImagePipelinePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnImagePipeline {\nn    export interface ImageTestsConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly imageTestsEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly timeoutMinutes?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ImageTestsConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ImageTestsConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnImagePipeline_ImageTestsConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('imageTestsEnabled', cdk.validateBoolean)(properties.imageTestsEnabled));\n    errors.collect(cdk.propertyValidator('timeoutMinutes', cdk.validateNumber)(properties.timeoutMinutes));\n    return errors.wrap('supplied properties not correct for \"ImageTestsConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ImagePipeline.ImageTestsConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ImageTestsConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ImagePipeline.ImageTestsConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImagePipelineImageTestsConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImagePipeline_ImageTestsConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ImageTestsEnabled: cdk.booleanToCloudFormation(properties.imageTestsEnabled),\n        TimeoutMinutes: cdk.numberToCloudFormation(properties.timeoutMinutes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImagePipelineImageTestsConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImagePipeline.ImageTestsConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImagePipeline.ImageTestsConfigurationProperty>();\n    ret.addPropertyResult('imageTestsEnabled', 'ImageTestsEnabled', properties.ImageTestsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ImageTestsEnabled) : undefined);\n    ret.addPropertyResult('timeoutMinutes', 'TimeoutMinutes', properties.TimeoutMinutes != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutMinutes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnImagePipeline {\n                                                                                                                                                                                                                                                                                                            \n    export interface ScheduleProperty {\nn        readonly pipelineExecutionStartCondition?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly scheduleExpression?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ScheduleProperty`\n *\n * @param properties - the TypeScript properties of a `ScheduleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnImagePipeline_SchedulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('pipelineExecutionStartCondition', cdk.validateString)(properties.pipelineExecutionStartCondition));\n    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.validateString)(properties.scheduleExpression));\n    return errors.wrap('supplied properties not correct for \"ScheduleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ImagePipeline.Schedule` resource\n *\n * @param properties - the TypeScript properties of a `ScheduleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ImagePipeline.Schedule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImagePipelineSchedulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImagePipeline_SchedulePropertyValidator(properties).assertSuccess();\n    return {\n        PipelineExecutionStartCondition: cdk.stringToCloudFormation(properties.pipelineExecutionStartCondition),\n        ScheduleExpression: cdk.stringToCloudFormation(properties.scheduleExpression),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImagePipelineSchedulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImagePipeline.ScheduleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImagePipeline.ScheduleProperty>();\n    ret.addPropertyResult('pipelineExecutionStartCondition', 'PipelineExecutionStartCondition', properties.PipelineExecutionStartCondition != null ? cfn_parse.FromCloudFormation.getString(properties.PipelineExecutionStartCondition) : undefined);\n    ret.addPropertyResult('scheduleExpression', 'ScheduleExpression', properties.ScheduleExpression != null ? cfn_parse.FromCloudFormation.getString(properties.ScheduleExpression) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                               \nexport interface CfnImageRecipeProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly components: Array<CfnImageRecipe.ComponentConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                   \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                       \n    readonly parentImage: string;\n\n                                                                                                                                                                                                                                  \n    readonly version: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly additionalInstanceConfiguration?: CfnImageRecipe.AdditionalInstanceConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                              \n    readonly blockDeviceMappings?: Array<CfnImageRecipe.InstanceBlockDeviceMappingProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                 \n    readonly description?: string;\n\n                                                                                                                                                                                                                   \n    readonly tags?: { [key: string]: (string) };\n\n                                                                                                                                                                                                                                                                   \n    readonly workingDirectory?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnImageRecipeProps`\n *\n * @param properties - the TypeScript properties of a `CfnImageRecipeProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnImageRecipePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('additionalInstanceConfiguration', CfnImageRecipe_AdditionalInstanceConfigurationPropertyValidator)(properties.additionalInstanceConfiguration));\n    errors.collect(cdk.propertyValidator('blockDeviceMappings', cdk.listValidator(CfnImageRecipe_InstanceBlockDeviceMappingPropertyValidator))(properties.blockDeviceMappings));\n    errors.collect(cdk.propertyValidator('components', cdk.requiredValidator)(properties.components));\n    errors.collect(cdk.propertyValidator('components', cdk.listValidator(CfnImageRecipe_ComponentConfigurationPropertyValidator))(properties.components));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('parentImage', cdk.requiredValidator)(properties.parentImage));\n    errors.collect(cdk.propertyValidator('parentImage', cdk.validateString)(properties.parentImage));\n    errors.collect(cdk.propertyValidator('tags', cdk.hashValidator(cdk.validateString))(properties.tags));\n    errors.collect(cdk.propertyValidator('version', cdk.requiredValidator)(properties.version));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    errors.collect(cdk.propertyValidator('workingDirectory', cdk.validateString)(properties.workingDirectory));\n    return errors.wrap('supplied properties not correct for \"CfnImageRecipeProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe` resource\n *\n * @param properties - the TypeScript properties of a `CfnImageRecipeProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImageRecipePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImageRecipePropsValidator(properties).assertSuccess();\n    return {\n        Components: cdk.listMapper(cfnImageRecipeComponentConfigurationPropertyToCloudFormation)(properties.components),\n        Name: cdk.stringToCloudFormation(properties.name),\n        ParentImage: cdk.stringToCloudFormation(properties.parentImage),\n        Version: cdk.stringToCloudFormation(properties.version),\n        AdditionalInstanceConfiguration: cfnImageRecipeAdditionalInstanceConfigurationPropertyToCloudFormation(properties.additionalInstanceConfiguration),\n        BlockDeviceMappings: cdk.listMapper(cfnImageRecipeInstanceBlockDeviceMappingPropertyToCloudFormation)(properties.blockDeviceMappings),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.tags),\n        WorkingDirectory: cdk.stringToCloudFormation(properties.workingDirectory),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImageRecipePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageRecipeProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageRecipeProps>();\n    ret.addPropertyResult('components', 'Components', cfn_parse.FromCloudFormation.getArray(CfnImageRecipeComponentConfigurationPropertyFromCloudFormation)(properties.Components));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('parentImage', 'ParentImage', cfn_parse.FromCloudFormation.getString(properties.ParentImage));\n    ret.addPropertyResult('version', 'Version', cfn_parse.FromCloudFormation.getString(properties.Version));\n    ret.addPropertyResult('additionalInstanceConfiguration', 'AdditionalInstanceConfiguration', properties.AdditionalInstanceConfiguration != null ? CfnImageRecipeAdditionalInstanceConfigurationPropertyFromCloudFormation(properties.AdditionalInstanceConfiguration) : undefined);\n    ret.addPropertyResult('blockDeviceMappings', 'BlockDeviceMappings', properties.BlockDeviceMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnImageRecipeInstanceBlockDeviceMappingPropertyFromCloudFormation)(properties.BlockDeviceMappings) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('workingDirectory', 'WorkingDirectory', properties.WorkingDirectory != null ? cfn_parse.FromCloudFormation.getString(properties.WorkingDirectory) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnImageRecipe extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ImageBuilder::ImageRecipe\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnImageRecipe {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnImageRecipePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnImageRecipe(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                         \n    public readonly attrArn: string;\n\n                                                                                         \n    public readonly attrName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public components: Array<CfnImageRecipe.ComponentConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                   \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                       \n    public parentImage: string;\n\n                                                                                                                                                                                                                                  \n    public version: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public additionalInstanceConfiguration: CfnImageRecipe.AdditionalInstanceConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                              \n    public blockDeviceMappings: Array<CfnImageRecipe.InstanceBlockDeviceMappingProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                 \n    public description: string | undefined;\n\n                                                                                                                                                                                                                   \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                   \n    public workingDirectory: string | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnImageRecipeProps) {\n        super(scope, id, { type: CfnImageRecipe.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'components', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'parentImage', this);\n        cdk.requireProperty(props, 'version', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.components = props.components;\n        this.name = props.name;\n        this.parentImage = props.parentImage;\n        this.version = props.version;\n        this.additionalInstanceConfiguration = props.additionalInstanceConfiguration;\n        this.blockDeviceMappings = props.blockDeviceMappings;\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::ImageBuilder::ImageRecipe\", props.tags, { tagPropertyName: 'tags' });\n        this.workingDirectory = props.workingDirectory;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnImageRecipe.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            components: this.components,\n            name: this.name,\n            parentImage: this.parentImage,\n            version: this.version,\n            additionalInstanceConfiguration: this.additionalInstanceConfiguration,\n            blockDeviceMappings: this.blockDeviceMappings,\n            description: this.description,\n            tags: this.tags.renderTags(),\n            workingDirectory: this.workingDirectory,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnImageRecipePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnImageRecipe {\nn    export interface AdditionalInstanceConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly systemsManagerAgent?: CfnImageRecipe.SystemsManagerAgentProperty | cdk.IResolvable;\nn        readonly userDataOverride?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AdditionalInstanceConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `AdditionalInstanceConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnImageRecipe_AdditionalInstanceConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('systemsManagerAgent', CfnImageRecipe_SystemsManagerAgentPropertyValidator)(properties.systemsManagerAgent));\n    errors.collect(cdk.propertyValidator('userDataOverride', cdk.validateString)(properties.userDataOverride));\n    return errors.wrap('supplied properties not correct for \"AdditionalInstanceConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe.AdditionalInstanceConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `AdditionalInstanceConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe.AdditionalInstanceConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImageRecipeAdditionalInstanceConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImageRecipe_AdditionalInstanceConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        SystemsManagerAgent: cfnImageRecipeSystemsManagerAgentPropertyToCloudFormation(properties.systemsManagerAgent),\n        UserDataOverride: cdk.stringToCloudFormation(properties.userDataOverride),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImageRecipeAdditionalInstanceConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageRecipe.AdditionalInstanceConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageRecipe.AdditionalInstanceConfigurationProperty>();\n    ret.addPropertyResult('systemsManagerAgent', 'SystemsManagerAgent', properties.SystemsManagerAgent != null ? CfnImageRecipeSystemsManagerAgentPropertyFromCloudFormation(properties.SystemsManagerAgent) : undefined);\n    ret.addPropertyResult('userDataOverride', 'UserDataOverride', properties.UserDataOverride != null ? cfn_parse.FromCloudFormation.getString(properties.UserDataOverride) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnImageRecipe {\n                                                                                                                                                                                                                                                                     \n    export interface ComponentConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                  \n        readonly componentArn?: string;\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly parameters?: Array<CfnImageRecipe.ComponentParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnImageRecipe_ComponentConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('componentArn', cdk.validateString)(properties.componentArn));\n    errors.collect(cdk.propertyValidator('parameters', cdk.listValidator(CfnImageRecipe_ComponentParameterPropertyValidator))(properties.parameters));\n    return errors.wrap('supplied properties not correct for \"ComponentConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe.ComponentConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ComponentConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe.ComponentConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImageRecipeComponentConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImageRecipe_ComponentConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ComponentArn: cdk.stringToCloudFormation(properties.componentArn),\n        Parameters: cdk.listMapper(cfnImageRecipeComponentParameterPropertyToCloudFormation)(properties.parameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImageRecipeComponentConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageRecipe.ComponentConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageRecipe.ComponentConfigurationProperty>();\n    ret.addPropertyResult('componentArn', 'ComponentArn', properties.ComponentArn != null ? cfn_parse.FromCloudFormation.getString(properties.ComponentArn) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getArray(CfnImageRecipeComponentParameterPropertyFromCloudFormation)(properties.Parameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnImageRecipe {\n                                                                                                                                                                                                                                                                                            \n    export interface ComponentParameterProperty {\n                                                                                                                                                                                                                                                                                             \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                    \n        readonly value: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ComponentParameterProperty`\n *\n * @param properties - the TypeScript properties of a `ComponentParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnImageRecipe_ComponentParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.listValidator(cdk.validateString))(properties.value));\n    return errors.wrap('supplied properties not correct for \"ComponentParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe.ComponentParameter` resource\n *\n * @param properties - the TypeScript properties of a `ComponentParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe.ComponentParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImageRecipeComponentParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImageRecipe_ComponentParameterPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Value: cdk.listMapper(cdk.stringToCloudFormation)(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImageRecipeComponentParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageRecipe.ComponentParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageRecipe.ComponentParameterProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getStringArray(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnImageRecipe {\n                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface EbsInstanceBlockDeviceSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly deleteOnTermination?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                            \n        readonly encrypted?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly iops?: number;\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly snapshotId?: string;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly throughput?: number;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly volumeSize?: number;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly volumeType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EbsInstanceBlockDeviceSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `EbsInstanceBlockDeviceSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnImageRecipe_EbsInstanceBlockDeviceSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deleteOnTermination', cdk.validateBoolean)(properties.deleteOnTermination));\n    errors.collect(cdk.propertyValidator('encrypted', cdk.validateBoolean)(properties.encrypted));\n    errors.collect(cdk.propertyValidator('iops', cdk.validateNumber)(properties.iops));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('snapshotId', cdk.validateString)(properties.snapshotId));\n    errors.collect(cdk.propertyValidator('throughput', cdk.validateNumber)(properties.throughput));\n    errors.collect(cdk.propertyValidator('volumeSize', cdk.validateNumber)(properties.volumeSize));\n    errors.collect(cdk.propertyValidator('volumeType', cdk.validateString)(properties.volumeType));\n    return errors.wrap('supplied properties not correct for \"EbsInstanceBlockDeviceSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe.EbsInstanceBlockDeviceSpecification` resource\n *\n * @param properties - the TypeScript properties of a `EbsInstanceBlockDeviceSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe.EbsInstanceBlockDeviceSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImageRecipeEbsInstanceBlockDeviceSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImageRecipe_EbsInstanceBlockDeviceSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        DeleteOnTermination: cdk.booleanToCloudFormation(properties.deleteOnTermination),\n        Encrypted: cdk.booleanToCloudFormation(properties.encrypted),\n        Iops: cdk.numberToCloudFormation(properties.iops),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        SnapshotId: cdk.stringToCloudFormation(properties.snapshotId),\n        Throughput: cdk.numberToCloudFormation(properties.throughput),\n        VolumeSize: cdk.numberToCloudFormation(properties.volumeSize),\n        VolumeType: cdk.stringToCloudFormation(properties.volumeType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImageRecipeEbsInstanceBlockDeviceSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageRecipe.EbsInstanceBlockDeviceSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageRecipe.EbsInstanceBlockDeviceSpecificationProperty>();\n    ret.addPropertyResult('deleteOnTermination', 'DeleteOnTermination', properties.DeleteOnTermination != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeleteOnTermination) : undefined);\n    ret.addPropertyResult('encrypted', 'Encrypted', properties.Encrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Encrypted) : undefined);\n    ret.addPropertyResult('iops', 'Iops', properties.Iops != null ? cfn_parse.FromCloudFormation.getNumber(properties.Iops) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('snapshotId', 'SnapshotId', properties.SnapshotId != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotId) : undefined);\n    ret.addPropertyResult('throughput', 'Throughput', properties.Throughput != null ? cfn_parse.FromCloudFormation.getNumber(properties.Throughput) : undefined);\n    ret.addPropertyResult('volumeSize', 'VolumeSize', properties.VolumeSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSize) : undefined);\n    ret.addPropertyResult('volumeType', 'VolumeType', properties.VolumeType != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnImageRecipe {\n                                                                                                                                                                                                                                                                                                              \n    export interface InstanceBlockDeviceMappingProperty {\n                                                                                                                                                                                                                                                                                                                 \n        readonly deviceName?: string;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly ebs?: CfnImageRecipe.EbsInstanceBlockDeviceSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly noDevice?: string;\n                                                                                                                                                                                                                                                                                                                \n        readonly virtualName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceBlockDeviceMappingProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceBlockDeviceMappingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnImageRecipe_InstanceBlockDeviceMappingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deviceName', cdk.validateString)(properties.deviceName));\n    errors.collect(cdk.propertyValidator('ebs', CfnImageRecipe_EbsInstanceBlockDeviceSpecificationPropertyValidator)(properties.ebs));\n    errors.collect(cdk.propertyValidator('noDevice', cdk.validateString)(properties.noDevice));\n    errors.collect(cdk.propertyValidator('virtualName', cdk.validateString)(properties.virtualName));\n    return errors.wrap('supplied properties not correct for \"InstanceBlockDeviceMappingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe.InstanceBlockDeviceMapping` resource\n *\n * @param properties - the TypeScript properties of a `InstanceBlockDeviceMappingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe.InstanceBlockDeviceMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImageRecipeInstanceBlockDeviceMappingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImageRecipe_InstanceBlockDeviceMappingPropertyValidator(properties).assertSuccess();\n    return {\n        DeviceName: cdk.stringToCloudFormation(properties.deviceName),\n        Ebs: cfnImageRecipeEbsInstanceBlockDeviceSpecificationPropertyToCloudFormation(properties.ebs),\n        NoDevice: cdk.stringToCloudFormation(properties.noDevice),\n        VirtualName: cdk.stringToCloudFormation(properties.virtualName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImageRecipeInstanceBlockDeviceMappingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageRecipe.InstanceBlockDeviceMappingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageRecipe.InstanceBlockDeviceMappingProperty>();\n    ret.addPropertyResult('deviceName', 'DeviceName', properties.DeviceName != null ? cfn_parse.FromCloudFormation.getString(properties.DeviceName) : undefined);\n    ret.addPropertyResult('ebs', 'Ebs', properties.Ebs != null ? CfnImageRecipeEbsInstanceBlockDeviceSpecificationPropertyFromCloudFormation(properties.Ebs) : undefined);\n    ret.addPropertyResult('noDevice', 'NoDevice', properties.NoDevice != null ? cfn_parse.FromCloudFormation.getString(properties.NoDevice) : undefined);\n    ret.addPropertyResult('virtualName', 'VirtualName', properties.VirtualName != null ? cfn_parse.FromCloudFormation.getString(properties.VirtualName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnImageRecipe {\n                                                                                                                                                                                                                                                                                                  \n    export interface SystemsManagerAgentProperty {\nn        readonly uninstallAfterBuild?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SystemsManagerAgentProperty`\n *\n * @param properties - the TypeScript properties of a `SystemsManagerAgentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnImageRecipe_SystemsManagerAgentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('uninstallAfterBuild', cdk.validateBoolean)(properties.uninstallAfterBuild));\n    return errors.wrap('supplied properties not correct for \"SystemsManagerAgentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe.SystemsManagerAgent` resource\n *\n * @param properties - the TypeScript properties of a `SystemsManagerAgentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::ImageRecipe.SystemsManagerAgent` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImageRecipeSystemsManagerAgentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImageRecipe_SystemsManagerAgentPropertyValidator(properties).assertSuccess();\n    return {\n        UninstallAfterBuild: cdk.booleanToCloudFormation(properties.uninstallAfterBuild),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImageRecipeSystemsManagerAgentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageRecipe.SystemsManagerAgentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageRecipe.SystemsManagerAgentProperty>();\n    ret.addPropertyResult('uninstallAfterBuild', 'UninstallAfterBuild', properties.UninstallAfterBuild != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UninstallAfterBuild) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                               \nexport interface CfnInfrastructureConfigurationProps {\n\n                                                                                                                                                                                                                                                                                              \n    readonly instanceProfileName: string;\n\n                                                                                                                                                                                                                                                                   \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                 \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                    \n    readonly instanceMetadataOptions?: CfnInfrastructureConfiguration.InstanceMetadataOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                      \n    readonly instanceTypes?: string[];\n\n                                                                                                                                                                                                                                                                                     \n    readonly keyPair?: string;\n\n                                                                                                                                                                                                                                                                                                 \n    readonly logging?: CfnInfrastructureConfiguration.LoggingProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                         \n    readonly resourceTags?: { [key: string]: (string) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                             \n    readonly securityGroupIds?: string[];\n\n                                                                                                                                                                                                                                                                                                                  \n    readonly snsTopicArn?: string;\n\n                                                                                                                                                                                                                                                                            \n    readonly subnetId?: string;\n\n                                                                                                                                                                                                                                                                   \n    readonly tags?: { [key: string]: (string) };\n\n                                                                                                                                                                                                                                                                                                                                \n    readonly terminateInstanceOnFailure?: boolean | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnInfrastructureConfigurationProps`\n *\n * @param properties - the TypeScript properties of a `CfnInfrastructureConfigurationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnInfrastructureConfigurationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('instanceMetadataOptions', CfnInfrastructureConfiguration_InstanceMetadataOptionsPropertyValidator)(properties.instanceMetadataOptions));\n    errors.collect(cdk.propertyValidator('instanceProfileName', cdk.requiredValidator)(properties.instanceProfileName));\n    errors.collect(cdk.propertyValidator('instanceProfileName', cdk.validateString)(properties.instanceProfileName));\n    errors.collect(cdk.propertyValidator('instanceTypes', cdk.listValidator(cdk.validateString))(properties.instanceTypes));\n    errors.collect(cdk.propertyValidator('keyPair', cdk.validateString)(properties.keyPair));\n    errors.collect(cdk.propertyValidator('logging', CfnInfrastructureConfiguration_LoggingPropertyValidator)(properties.logging));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('resourceTags', cdk.hashValidator(cdk.validateString))(properties.resourceTags));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('snsTopicArn', cdk.validateString)(properties.snsTopicArn));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('tags', cdk.hashValidator(cdk.validateString))(properties.tags));\n    errors.collect(cdk.propertyValidator('terminateInstanceOnFailure', cdk.validateBoolean)(properties.terminateInstanceOnFailure));\n    return errors.wrap('supplied properties not correct for \"CfnInfrastructureConfigurationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::InfrastructureConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CfnInfrastructureConfigurationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::InfrastructureConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInfrastructureConfigurationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInfrastructureConfigurationPropsValidator(properties).assertSuccess();\n    return {\n        InstanceProfileName: cdk.stringToCloudFormation(properties.instanceProfileName),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Description: cdk.stringToCloudFormation(properties.description),\n        InstanceMetadataOptions: cfnInfrastructureConfigurationInstanceMetadataOptionsPropertyToCloudFormation(properties.instanceMetadataOptions),\n        InstanceTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.instanceTypes),\n        KeyPair: cdk.stringToCloudFormation(properties.keyPair),\n        Logging: cfnInfrastructureConfigurationLoggingPropertyToCloudFormation(properties.logging),\n        ResourceTags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.resourceTags),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SnsTopicArn: cdk.stringToCloudFormation(properties.snsTopicArn),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n        Tags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.tags),\n        TerminateInstanceOnFailure: cdk.booleanToCloudFormation(properties.terminateInstanceOnFailure),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInfrastructureConfigurationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInfrastructureConfigurationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInfrastructureConfigurationProps>();\n    ret.addPropertyResult('instanceProfileName', 'InstanceProfileName', cfn_parse.FromCloudFormation.getString(properties.InstanceProfileName));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('instanceMetadataOptions', 'InstanceMetadataOptions', properties.InstanceMetadataOptions != null ? CfnInfrastructureConfigurationInstanceMetadataOptionsPropertyFromCloudFormation(properties.InstanceMetadataOptions) : undefined);\n    ret.addPropertyResult('instanceTypes', 'InstanceTypes', properties.InstanceTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.InstanceTypes) : undefined);\n    ret.addPropertyResult('keyPair', 'KeyPair', properties.KeyPair != null ? cfn_parse.FromCloudFormation.getString(properties.KeyPair) : undefined);\n    ret.addPropertyResult('logging', 'Logging', properties.Logging != null ? CfnInfrastructureConfigurationLoggingPropertyFromCloudFormation(properties.Logging) : undefined);\n    ret.addPropertyResult('resourceTags', 'ResourceTags', properties.ResourceTags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.ResourceTags) : undefined);\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('snsTopicArn', 'SnsTopicArn', properties.SnsTopicArn != null ? cfn_parse.FromCloudFormation.getString(properties.SnsTopicArn) : undefined);\n    ret.addPropertyResult('subnetId', 'SubnetId', properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('terminateInstanceOnFailure', 'TerminateInstanceOnFailure', properties.TerminateInstanceOnFailure != null ? cfn_parse.FromCloudFormation.getBoolean(properties.TerminateInstanceOnFailure) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnInfrastructureConfiguration extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ImageBuilder::InfrastructureConfiguration\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnInfrastructureConfiguration {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnInfrastructureConfigurationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnInfrastructureConfiguration(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                   \n    public readonly attrArn: string;\n\n                                                                                                         \n    public readonly attrName: string;\n\n                                                                                                                                                                                                                                                                                              \n    public instanceProfileName: string;\n\n                                                                                                                                                                                                                                                                   \n    public name: string;\n\n                                                                                                                                                                                                                                                                                 \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                    \n    public instanceMetadataOptions: CfnInfrastructureConfiguration.InstanceMetadataOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                      \n    public instanceTypes: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                     \n    public keyPair: string | undefined;\n\n                                                                                                                                                                                                                                                                                                 \n    public logging: CfnInfrastructureConfiguration.LoggingProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                         \n    public resourceTags: { [key: string]: (string) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                             \n    public securityGroupIds: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                  \n    public snsTopicArn: string | undefined;\n\n                                                                                                                                                                                                                                                                            \n    public subnetId: string | undefined;\n\n                                                                                                                                                                                                                                                                   \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                \n    public terminateInstanceOnFailure: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnInfrastructureConfigurationProps) {\n        super(scope, id, { type: CfnInfrastructureConfiguration.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'instanceProfileName', this);\n        cdk.requireProperty(props, 'name', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.instanceProfileName = props.instanceProfileName;\n        this.name = props.name;\n        this.description = props.description;\n        this.instanceMetadataOptions = props.instanceMetadataOptions;\n        this.instanceTypes = props.instanceTypes;\n        this.keyPair = props.keyPair;\n        this.logging = props.logging;\n        this.resourceTags = props.resourceTags;\n        this.securityGroupIds = props.securityGroupIds;\n        this.snsTopicArn = props.snsTopicArn;\n        this.subnetId = props.subnetId;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::ImageBuilder::InfrastructureConfiguration\", props.tags, { tagPropertyName: 'tags' });\n        this.terminateInstanceOnFailure = props.terminateInstanceOnFailure;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnInfrastructureConfiguration.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            instanceProfileName: this.instanceProfileName,\n            name: this.name,\n            description: this.description,\n            instanceMetadataOptions: this.instanceMetadataOptions,\n            instanceTypes: this.instanceTypes,\n            keyPair: this.keyPair,\n            logging: this.logging,\n            resourceTags: this.resourceTags,\n            securityGroupIds: this.securityGroupIds,\n            snsTopicArn: this.snsTopicArn,\n            subnetId: this.subnetId,\n            tags: this.tags.renderTags(),\n            terminateInstanceOnFailure: this.terminateInstanceOnFailure,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnInfrastructureConfigurationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnInfrastructureConfiguration {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface InstanceMetadataOptionsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly httpPutResponseHopLimit?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly httpTokens?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceMetadataOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceMetadataOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInfrastructureConfiguration_InstanceMetadataOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('httpPutResponseHopLimit', cdk.validateNumber)(properties.httpPutResponseHopLimit));\n    errors.collect(cdk.propertyValidator('httpTokens', cdk.validateString)(properties.httpTokens));\n    return errors.wrap('supplied properties not correct for \"InstanceMetadataOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::InfrastructureConfiguration.InstanceMetadataOptions` resource\n *\n * @param properties - the TypeScript properties of a `InstanceMetadataOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::InfrastructureConfiguration.InstanceMetadataOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInfrastructureConfigurationInstanceMetadataOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInfrastructureConfiguration_InstanceMetadataOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        HttpPutResponseHopLimit: cdk.numberToCloudFormation(properties.httpPutResponseHopLimit),\n        HttpTokens: cdk.stringToCloudFormation(properties.httpTokens),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInfrastructureConfigurationInstanceMetadataOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInfrastructureConfiguration.InstanceMetadataOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInfrastructureConfiguration.InstanceMetadataOptionsProperty>();\n    ret.addPropertyResult('httpPutResponseHopLimit', 'HttpPutResponseHopLimit', properties.HttpPutResponseHopLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.HttpPutResponseHopLimit) : undefined);\n    ret.addPropertyResult('httpTokens', 'HttpTokens', properties.HttpTokens != null ? cfn_parse.FromCloudFormation.getString(properties.HttpTokens) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInfrastructureConfiguration {\n                                                                                                                                                                                                                                                                                                   \n    export interface LoggingProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly s3Logs?: CfnInfrastructureConfiguration.S3LogsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoggingProperty`\n *\n * @param properties - the TypeScript properties of a `LoggingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInfrastructureConfiguration_LoggingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Logs', CfnInfrastructureConfiguration_S3LogsPropertyValidator)(properties.s3Logs));\n    return errors.wrap('supplied properties not correct for \"LoggingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::InfrastructureConfiguration.Logging` resource\n *\n * @param properties - the TypeScript properties of a `LoggingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::InfrastructureConfiguration.Logging` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInfrastructureConfigurationLoggingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInfrastructureConfiguration_LoggingPropertyValidator(properties).assertSuccess();\n    return {\n        S3Logs: cfnInfrastructureConfigurationS3LogsPropertyToCloudFormation(properties.s3Logs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInfrastructureConfigurationLoggingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInfrastructureConfiguration.LoggingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInfrastructureConfiguration.LoggingProperty>();\n    ret.addPropertyResult('s3Logs', 'S3Logs', properties.S3Logs != null ? CfnInfrastructureConfigurationS3LogsPropertyFromCloudFormation(properties.S3Logs) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInfrastructureConfiguration {\n                                                                                                                                                                                                                                                              \n    export interface S3LogsProperty {\n                                                                                                                                                                                                                                                                                                           \n        readonly s3BucketName?: string;\n                                                                                                                                                                                                                                                                                                                            \n        readonly s3KeyPrefix?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3LogsProperty`\n *\n * @param properties - the TypeScript properties of a `S3LogsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInfrastructureConfiguration_S3LogsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3BucketName', cdk.validateString)(properties.s3BucketName));\n    errors.collect(cdk.propertyValidator('s3KeyPrefix', cdk.validateString)(properties.s3KeyPrefix));\n    return errors.wrap('supplied properties not correct for \"S3LogsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ImageBuilder::InfrastructureConfiguration.S3Logs` resource\n *\n * @param properties - the TypeScript properties of a `S3LogsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ImageBuilder::InfrastructureConfiguration.S3Logs` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInfrastructureConfigurationS3LogsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInfrastructureConfiguration_S3LogsPropertyValidator(properties).assertSuccess();\n    return {\n        S3BucketName: cdk.stringToCloudFormation(properties.s3BucketName),\n        S3KeyPrefix: cdk.stringToCloudFormation(properties.s3KeyPrefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInfrastructureConfigurationS3LogsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInfrastructureConfiguration.S3LogsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInfrastructureConfiguration.S3LogsProperty>();\n    ret.addPropertyResult('s3BucketName', 'S3BucketName', properties.S3BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.S3BucketName) : undefined);\n    ret.addPropertyResult('s3KeyPrefix', 'S3KeyPrefix', properties.S3KeyPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.S3KeyPrefix) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
