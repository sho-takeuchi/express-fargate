{
  "version": 3,
  "sources": ["iot1click.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:31.623Z\",\"fingerprint\":\"+gscerNWc47hRPiex9mCFzpKsu4oojwdLGlBO4ReaMI=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                  \nexport interface CfnDeviceProps {\n\n                                                                                                                                                                                                                            \n    readonly deviceId: string;\n\n                                                                                                                                                                                                                                                                \n    readonly enabled: boolean | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDeviceProps`\n *\n * @param properties - the TypeScript properties of a `CfnDeviceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDevicePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deviceId', cdk.requiredValidator)(properties.deviceId));\n    errors.collect(cdk.propertyValidator('deviceId', cdk.validateString)(properties.deviceId));\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"CfnDeviceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoT1Click::Device` resource\n *\n * @param properties - the TypeScript properties of a `CfnDeviceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoT1Click::Device` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDevicePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDevicePropsValidator(properties).assertSuccess();\n    return {\n        DeviceId: cdk.stringToCloudFormation(properties.deviceId),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDevicePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeviceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeviceProps>();\n    ret.addPropertyResult('deviceId', 'DeviceId', cfn_parse.FromCloudFormation.getString(properties.DeviceId));\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDevice extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IoT1Click::Device\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDevice {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDevicePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDevice(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                               \n    public readonly attrArn: string;\n\n                                                                                                    \n    public readonly attrDeviceId: string;\n\n                                                                                                                                                      \n    public readonly attrEnabled: cdk.IResolvable;\n\n                                                                                                                                                                                                                            \n    public deviceId: string;\n\n                                                                                                                                                                                                                                                                \n    public enabled: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnDeviceProps) {\n        super(scope, id, { type: CfnDevice.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'deviceId', this);\n        cdk.requireProperty(props, 'enabled', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrDeviceId = cdk.Token.asString(this.getAtt('DeviceId'));\n        this.attrEnabled = this.getAtt('Enabled');\n\n        this.deviceId = props.deviceId;\n        this.enabled = props.enabled;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDevice.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            deviceId: this.deviceId,\n            enabled: this.enabled,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDevicePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                        \nexport interface CfnPlacementProps {\n\n                                                                                                                                                                                                                                    \n    readonly projectName: string;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    readonly associatedDevices?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                            \n    readonly attributes?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                               \n    readonly placementName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPlacementProps`\n *\n * @param properties - the TypeScript properties of a `CfnPlacementProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPlacementPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('associatedDevices', cdk.validateObject)(properties.associatedDevices));\n    errors.collect(cdk.propertyValidator('attributes', cdk.validateObject)(properties.attributes));\n    errors.collect(cdk.propertyValidator('placementName', cdk.validateString)(properties.placementName));\n    errors.collect(cdk.propertyValidator('projectName', cdk.requiredValidator)(properties.projectName));\n    errors.collect(cdk.propertyValidator('projectName', cdk.validateString)(properties.projectName));\n    return errors.wrap('supplied properties not correct for \"CfnPlacementProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoT1Click::Placement` resource\n *\n * @param properties - the TypeScript properties of a `CfnPlacementProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoT1Click::Placement` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPlacementPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPlacementPropsValidator(properties).assertSuccess();\n    return {\n        ProjectName: cdk.stringToCloudFormation(properties.projectName),\n        AssociatedDevices: cdk.objectToCloudFormation(properties.associatedDevices),\n        Attributes: cdk.objectToCloudFormation(properties.attributes),\n        PlacementName: cdk.stringToCloudFormation(properties.placementName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPlacementPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPlacementProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPlacementProps>();\n    ret.addPropertyResult('projectName', 'ProjectName', cfn_parse.FromCloudFormation.getString(properties.ProjectName));\n    ret.addPropertyResult('associatedDevices', 'AssociatedDevices', properties.AssociatedDevices != null ? cfn_parse.FromCloudFormation.getAny(properties.AssociatedDevices) : undefined);\n    ret.addPropertyResult('attributes', 'Attributes', properties.Attributes != null ? cfn_parse.FromCloudFormation.getAny(properties.Attributes) : undefined);\n    ret.addPropertyResult('placementName', 'PlacementName', properties.PlacementName != null ? cfn_parse.FromCloudFormation.getString(properties.PlacementName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPlacement extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IoT1Click::Placement\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPlacement {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPlacementPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPlacement(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                   \n    public readonly attrPlacementName: string;\n\n                                                                                                                                                 \n    public readonly attrProjectName: string;\n\n                                                                                                                                                                                                                                    \n    public projectName: string;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    public associatedDevices: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                            \n    public attributes: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                               \n    public placementName: string | undefined;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnPlacementProps) {\n        super(scope, id, { type: CfnPlacement.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'projectName', this);\n        this.attrPlacementName = cdk.Token.asString(this.getAtt('PlacementName'));\n        this.attrProjectName = cdk.Token.asString(this.getAtt('ProjectName'));\n\n        this.projectName = props.projectName;\n        this.associatedDevices = props.associatedDevices;\n        this.attributes = props.attributes;\n        this.placementName = props.placementName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPlacement.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            projectName: this.projectName,\n            associatedDevices: this.associatedDevices,\n            attributes: this.attributes,\n            placementName: this.placementName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPlacementPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                    \nexport interface CfnProjectProps {\n\n                                                                                                                                                                                                                                                 \n    readonly placementTemplate: CfnProject.PlacementTemplateProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                              \n    readonly description?: string;\n\n                                                                                                                                                                                                                                        \n    readonly projectName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnProjectProps`\n *\n * @param properties - the TypeScript properties of a `CfnProjectProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnProjectPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('placementTemplate', cdk.requiredValidator)(properties.placementTemplate));\n    errors.collect(cdk.propertyValidator('placementTemplate', CfnProject_PlacementTemplatePropertyValidator)(properties.placementTemplate));\n    errors.collect(cdk.propertyValidator('projectName', cdk.validateString)(properties.projectName));\n    return errors.wrap('supplied properties not correct for \"CfnProjectProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoT1Click::Project` resource\n *\n * @param properties - the TypeScript properties of a `CfnProjectProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoT1Click::Project` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProjectPropsValidator(properties).assertSuccess();\n    return {\n        PlacementTemplate: cfnProjectPlacementTemplatePropertyToCloudFormation(properties.placementTemplate),\n        Description: cdk.stringToCloudFormation(properties.description),\n        ProjectName: cdk.stringToCloudFormation(properties.projectName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProjectProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProjectProps>();\n    ret.addPropertyResult('placementTemplate', 'PlacementTemplate', CfnProjectPlacementTemplatePropertyFromCloudFormation(properties.PlacementTemplate));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('projectName', 'ProjectName', properties.ProjectName != null ? cfn_parse.FromCloudFormation.getString(properties.ProjectName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnProject extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IoT1Click::Project\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnProject {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnProjectPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnProject(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                      \n    public readonly attrArn: string;\n\n                                                                                                                      \n    public readonly attrProjectName: string;\n\n                                                                                                                                                                                                                                                 \n    public placementTemplate: CfnProject.PlacementTemplateProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                              \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                        \n    public projectName: string | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnProjectProps) {\n        super(scope, id, { type: CfnProject.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'placementTemplate', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrProjectName = cdk.Token.asString(this.getAtt('ProjectName'));\n\n        this.placementTemplate = props.placementTemplate;\n        this.description = props.description;\n        this.projectName = props.projectName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnProject.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            placementTemplate: this.placementTemplate,\n            description: this.description,\n            projectName: this.projectName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnProjectPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface DeviceTemplateProperty {\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly callbackOverrides?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                       \n        readonly deviceType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeviceTemplateProperty`\n *\n * @param properties - the TypeScript properties of a `DeviceTemplateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_DeviceTemplatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('callbackOverrides', cdk.validateObject)(properties.callbackOverrides));\n    errors.collect(cdk.propertyValidator('deviceType', cdk.validateString)(properties.deviceType));\n    return errors.wrap('supplied properties not correct for \"DeviceTemplateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoT1Click::Project.DeviceTemplate` resource\n *\n * @param properties - the TypeScript properties of a `DeviceTemplateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoT1Click::Project.DeviceTemplate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectDeviceTemplatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_DeviceTemplatePropertyValidator(properties).assertSuccess();\n    return {\n        CallbackOverrides: cdk.objectToCloudFormation(properties.callbackOverrides),\n        DeviceType: cdk.stringToCloudFormation(properties.deviceType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectDeviceTemplatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.DeviceTemplateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.DeviceTemplateProperty>();\n    ret.addPropertyResult('callbackOverrides', 'CallbackOverrides', properties.CallbackOverrides != null ? cfn_parse.FromCloudFormation.getAny(properties.CallbackOverrides) : undefined);\n    ret.addPropertyResult('deviceType', 'DeviceType', properties.DeviceType != null ? cfn_parse.FromCloudFormation.getString(properties.DeviceType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnProject {\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface PlacementTemplateProperty {\n                                                                                                                                                                                                                                                                                                                                            \n        readonly defaultAttributes?: any | cdk.IResolvable;\nn        readonly deviceTemplates?: { [key: string]: (CfnProject.DeviceTemplateProperty | cdk.IResolvable) } | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PlacementTemplateProperty`\n *\n * @param properties - the TypeScript properties of a `PlacementTemplateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnProject_PlacementTemplatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultAttributes', cdk.validateObject)(properties.defaultAttributes));\n    errors.collect(cdk.propertyValidator('deviceTemplates', cdk.hashValidator(CfnProject_DeviceTemplatePropertyValidator))(properties.deviceTemplates));\n    return errors.wrap('supplied properties not correct for \"PlacementTemplateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoT1Click::Project.PlacementTemplate` resource\n *\n * @param properties - the TypeScript properties of a `PlacementTemplateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoT1Click::Project.PlacementTemplate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectPlacementTemplatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProject_PlacementTemplatePropertyValidator(properties).assertSuccess();\n    return {\n        DefaultAttributes: cdk.objectToCloudFormation(properties.defaultAttributes),\n        DeviceTemplates: cdk.hashMapper(cfnProjectDeviceTemplatePropertyToCloudFormation)(properties.deviceTemplates),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectPlacementTemplatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProject.PlacementTemplateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.PlacementTemplateProperty>();\n    ret.addPropertyResult('defaultAttributes', 'DefaultAttributes', properties.DefaultAttributes != null ? cfn_parse.FromCloudFormation.getAny(properties.DefaultAttributes) : undefined);\n    ret.addPropertyResult('deviceTemplates', 'DeviceTemplates', properties.DeviceTemplates != null ? cfn_parse.FromCloudFormation.getMap(CfnProjectDeviceTemplatePropertyFromCloudFormation)(properties.DeviceTemplates) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
