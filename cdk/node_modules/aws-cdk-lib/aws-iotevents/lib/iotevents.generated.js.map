{
  "version": 3,
  "sources": ["iotevents.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:31.682Z\",\"fingerprint\":\"ceVY4nllAG9QXgpmdQrBLXeamEzKNGmJlJR8fVvM4Eg=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                \nexport interface CfnDetectorModelProps {\n\n                                                                                                                                                                                                                                                        \n    readonly detectorModelDefinition: CfnDetectorModel.DetectorModelDefinitionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                              \n    readonly roleArn: string;\n\n                                                                                                                                                                                                                                                  \n    readonly detectorModelDescription?: string;\n\n                                                                                                                                                                                                                                \n    readonly detectorModelName?: string;\n\n                                                                                                                                                                                                                                                                                       \n    readonly evaluationMethod?: string;\n\nn    readonly key?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDetectorModelProps`\n *\n * @param properties - the TypeScript properties of a `CfnDetectorModelProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModelPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('detectorModelDefinition', cdk.requiredValidator)(properties.detectorModelDefinition));\n    errors.collect(cdk.propertyValidator('detectorModelDefinition', CfnDetectorModel_DetectorModelDefinitionPropertyValidator)(properties.detectorModelDefinition));\n    errors.collect(cdk.propertyValidator('detectorModelDescription', cdk.validateString)(properties.detectorModelDescription));\n    errors.collect(cdk.propertyValidator('detectorModelName', cdk.validateString)(properties.detectorModelName));\n    errors.collect(cdk.propertyValidator('evaluationMethod', cdk.validateString)(properties.evaluationMethod));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDetectorModelProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel` resource\n *\n * @param properties - the TypeScript properties of a `CfnDetectorModelProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModelPropsValidator(properties).assertSuccess();\n    return {\n        DetectorModelDefinition: cfnDetectorModelDetectorModelDefinitionPropertyToCloudFormation(properties.detectorModelDefinition),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        DetectorModelDescription: cdk.stringToCloudFormation(properties.detectorModelDescription),\n        DetectorModelName: cdk.stringToCloudFormation(properties.detectorModelName),\n        EvaluationMethod: cdk.stringToCloudFormation(properties.evaluationMethod),\n        Key: cdk.stringToCloudFormation(properties.key),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModelProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModelProps>();\n    ret.addPropertyResult('detectorModelDefinition', 'DetectorModelDefinition', CfnDetectorModelDetectorModelDefinitionPropertyFromCloudFormation(properties.DetectorModelDefinition));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('detectorModelDescription', 'DetectorModelDescription', properties.DetectorModelDescription != null ? cfn_parse.FromCloudFormation.getString(properties.DetectorModelDescription) : undefined);\n    ret.addPropertyResult('detectorModelName', 'DetectorModelName', properties.DetectorModelName != null ? cfn_parse.FromCloudFormation.getString(properties.DetectorModelName) : undefined);\n    ret.addPropertyResult('evaluationMethod', 'EvaluationMethod', properties.EvaluationMethod != null ? cfn_parse.FromCloudFormation.getString(properties.EvaluationMethod) : undefined);\n    ret.addPropertyResult('key', 'Key', properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDetectorModel extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IoTEvents::DetectorModel\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDetectorModel {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDetectorModelPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDetectorModel(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                        \n    public detectorModelDefinition: CfnDetectorModel.DetectorModelDefinitionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                              \n    public roleArn: string;\n\n                                                                                                                                                                                                                                                  \n    public detectorModelDescription: string | undefined;\n\n                                                                                                                                                                                                                                \n    public detectorModelName: string | undefined;\n\n                                                                                                                                                                                                                                                                                       \n    public evaluationMethod: string | undefined;\n\nn    public key: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnDetectorModelProps) {\n        super(scope, id, { type: CfnDetectorModel.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'detectorModelDefinition', this);\n        cdk.requireProperty(props, 'roleArn', this);\n\n        this.detectorModelDefinition = props.detectorModelDefinition;\n        this.roleArn = props.roleArn;\n        this.detectorModelDescription = props.detectorModelDescription;\n        this.detectorModelName = props.detectorModelName;\n        this.evaluationMethod = props.evaluationMethod;\n        this.key = props.key;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::IoTEvents::DetectorModel\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDetectorModel.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            detectorModelDefinition: this.detectorModelDefinition,\n            roleArn: this.roleArn,\n            detectorModelDescription: this.detectorModelDescription,\n            detectorModelName: this.detectorModelName,\n            evaluationMethod: this.evaluationMethod,\n            key: this.key,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDetectorModelPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                    \n    export interface ActionProperty {\n                                                                                                                                                                                                                                                                    \n        readonly clearTimer?: CfnDetectorModel.ClearTimerProperty | cdk.IResolvable;\nn        readonly dynamoDb?: CfnDetectorModel.DynamoDBProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly dynamoDBv2?: CfnDetectorModel.DynamoDBv2Property | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly firehose?: CfnDetectorModel.FirehoseProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                            \n        readonly iotEvents?: CfnDetectorModel.IotEventsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly iotSiteWise?: CfnDetectorModel.IotSiteWiseProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                \n        readonly iotTopicPublish?: CfnDetectorModel.IotTopicPublishProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly lambda?: CfnDetectorModel.LambdaProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                    \n        readonly resetTimer?: CfnDetectorModel.ResetTimerProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                \n        readonly setTimer?: CfnDetectorModel.SetTimerProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                    \n        readonly setVariable?: CfnDetectorModel.SetVariableProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                   \n        readonly sns?: CfnDetectorModel.SnsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                   \n        readonly sqs?: CfnDetectorModel.SqsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ActionProperty`\n *\n * @param properties - the TypeScript properties of a `ActionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_ActionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clearTimer', CfnDetectorModel_ClearTimerPropertyValidator)(properties.clearTimer));\n    errors.collect(cdk.propertyValidator('dynamoDb', CfnDetectorModel_DynamoDBPropertyValidator)(properties.dynamoDb));\n    errors.collect(cdk.propertyValidator('dynamoDBv2', CfnDetectorModel_DynamoDBv2PropertyValidator)(properties.dynamoDBv2));\n    errors.collect(cdk.propertyValidator('firehose', CfnDetectorModel_FirehosePropertyValidator)(properties.firehose));\n    errors.collect(cdk.propertyValidator('iotEvents', CfnDetectorModel_IotEventsPropertyValidator)(properties.iotEvents));\n    errors.collect(cdk.propertyValidator('iotSiteWise', CfnDetectorModel_IotSiteWisePropertyValidator)(properties.iotSiteWise));\n    errors.collect(cdk.propertyValidator('iotTopicPublish', CfnDetectorModel_IotTopicPublishPropertyValidator)(properties.iotTopicPublish));\n    errors.collect(cdk.propertyValidator('lambda', CfnDetectorModel_LambdaPropertyValidator)(properties.lambda));\n    errors.collect(cdk.propertyValidator('resetTimer', CfnDetectorModel_ResetTimerPropertyValidator)(properties.resetTimer));\n    errors.collect(cdk.propertyValidator('setTimer', CfnDetectorModel_SetTimerPropertyValidator)(properties.setTimer));\n    errors.collect(cdk.propertyValidator('setVariable', CfnDetectorModel_SetVariablePropertyValidator)(properties.setVariable));\n    errors.collect(cdk.propertyValidator('sns', CfnDetectorModel_SnsPropertyValidator)(properties.sns));\n    errors.collect(cdk.propertyValidator('sqs', CfnDetectorModel_SqsPropertyValidator)(properties.sqs));\n    return errors.wrap('supplied properties not correct for \"ActionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Action` resource\n *\n * @param properties - the TypeScript properties of a `ActionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Action` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelActionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_ActionPropertyValidator(properties).assertSuccess();\n    return {\n        ClearTimer: cfnDetectorModelClearTimerPropertyToCloudFormation(properties.clearTimer),\n        DynamoDB: cfnDetectorModelDynamoDBPropertyToCloudFormation(properties.dynamoDb),\n        DynamoDBv2: cfnDetectorModelDynamoDBv2PropertyToCloudFormation(properties.dynamoDBv2),\n        Firehose: cfnDetectorModelFirehosePropertyToCloudFormation(properties.firehose),\n        IotEvents: cfnDetectorModelIotEventsPropertyToCloudFormation(properties.iotEvents),\n        IotSiteWise: cfnDetectorModelIotSiteWisePropertyToCloudFormation(properties.iotSiteWise),\n        IotTopicPublish: cfnDetectorModelIotTopicPublishPropertyToCloudFormation(properties.iotTopicPublish),\n        Lambda: cfnDetectorModelLambdaPropertyToCloudFormation(properties.lambda),\n        ResetTimer: cfnDetectorModelResetTimerPropertyToCloudFormation(properties.resetTimer),\n        SetTimer: cfnDetectorModelSetTimerPropertyToCloudFormation(properties.setTimer),\n        SetVariable: cfnDetectorModelSetVariablePropertyToCloudFormation(properties.setVariable),\n        Sns: cfnDetectorModelSnsPropertyToCloudFormation(properties.sns),\n        Sqs: cfnDetectorModelSqsPropertyToCloudFormation(properties.sqs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelActionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.ActionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.ActionProperty>();\n    ret.addPropertyResult('clearTimer', 'ClearTimer', properties.ClearTimer != null ? CfnDetectorModelClearTimerPropertyFromCloudFormation(properties.ClearTimer) : undefined);\n    ret.addPropertyResult('dynamoDb', 'DynamoDB', properties.DynamoDB != null ? CfnDetectorModelDynamoDBPropertyFromCloudFormation(properties.DynamoDB) : undefined);\n    ret.addPropertyResult('dynamoDBv2', 'DynamoDBv2', properties.DynamoDBv2 != null ? CfnDetectorModelDynamoDBv2PropertyFromCloudFormation(properties.DynamoDBv2) : undefined);\n    ret.addPropertyResult('firehose', 'Firehose', properties.Firehose != null ? CfnDetectorModelFirehosePropertyFromCloudFormation(properties.Firehose) : undefined);\n    ret.addPropertyResult('iotEvents', 'IotEvents', properties.IotEvents != null ? CfnDetectorModelIotEventsPropertyFromCloudFormation(properties.IotEvents) : undefined);\n    ret.addPropertyResult('iotSiteWise', 'IotSiteWise', properties.IotSiteWise != null ? CfnDetectorModelIotSiteWisePropertyFromCloudFormation(properties.IotSiteWise) : undefined);\n    ret.addPropertyResult('iotTopicPublish', 'IotTopicPublish', properties.IotTopicPublish != null ? CfnDetectorModelIotTopicPublishPropertyFromCloudFormation(properties.IotTopicPublish) : undefined);\n    ret.addPropertyResult('lambda', 'Lambda', properties.Lambda != null ? CfnDetectorModelLambdaPropertyFromCloudFormation(properties.Lambda) : undefined);\n    ret.addPropertyResult('resetTimer', 'ResetTimer', properties.ResetTimer != null ? CfnDetectorModelResetTimerPropertyFromCloudFormation(properties.ResetTimer) : undefined);\n    ret.addPropertyResult('setTimer', 'SetTimer', properties.SetTimer != null ? CfnDetectorModelSetTimerPropertyFromCloudFormation(properties.SetTimer) : undefined);\n    ret.addPropertyResult('setVariable', 'SetVariable', properties.SetVariable != null ? CfnDetectorModelSetVariablePropertyFromCloudFormation(properties.SetVariable) : undefined);\n    ret.addPropertyResult('sns', 'Sns', properties.Sns != null ? CfnDetectorModelSnsPropertyFromCloudFormation(properties.Sns) : undefined);\n    ret.addPropertyResult('sqs', 'Sqs', properties.Sqs != null ? CfnDetectorModelSqsPropertyFromCloudFormation(properties.Sqs) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface AssetPropertyTimestampProperty {\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly offsetInNanos?: string;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly timeInSeconds: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AssetPropertyTimestampProperty`\n *\n * @param properties - the TypeScript properties of a `AssetPropertyTimestampProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_AssetPropertyTimestampPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('offsetInNanos', cdk.validateString)(properties.offsetInNanos));\n    errors.collect(cdk.propertyValidator('timeInSeconds', cdk.requiredValidator)(properties.timeInSeconds));\n    errors.collect(cdk.propertyValidator('timeInSeconds', cdk.validateString)(properties.timeInSeconds));\n    return errors.wrap('supplied properties not correct for \"AssetPropertyTimestampProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.AssetPropertyTimestamp` resource\n *\n * @param properties - the TypeScript properties of a `AssetPropertyTimestampProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.AssetPropertyTimestamp` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelAssetPropertyTimestampPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_AssetPropertyTimestampPropertyValidator(properties).assertSuccess();\n    return {\n        OffsetInNanos: cdk.stringToCloudFormation(properties.offsetInNanos),\n        TimeInSeconds: cdk.stringToCloudFormation(properties.timeInSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelAssetPropertyTimestampPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.AssetPropertyTimestampProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.AssetPropertyTimestampProperty>();\n    ret.addPropertyResult('offsetInNanos', 'OffsetInNanos', properties.OffsetInNanos != null ? cfn_parse.FromCloudFormation.getString(properties.OffsetInNanos) : undefined);\n    ret.addPropertyResult('timeInSeconds', 'TimeInSeconds', cfn_parse.FromCloudFormation.getString(properties.TimeInSeconds));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\nn    export interface AssetPropertyValueProperty {\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly quality?: string;\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly timestamp?: CfnDetectorModel.AssetPropertyTimestampProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                        \n        readonly value: CfnDetectorModel.AssetPropertyVariantProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AssetPropertyValueProperty`\n *\n * @param properties - the TypeScript properties of a `AssetPropertyValueProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_AssetPropertyValuePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('quality', cdk.validateString)(properties.quality));\n    errors.collect(cdk.propertyValidator('timestamp', CfnDetectorModel_AssetPropertyTimestampPropertyValidator)(properties.timestamp));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', CfnDetectorModel_AssetPropertyVariantPropertyValidator)(properties.value));\n    return errors.wrap('supplied properties not correct for \"AssetPropertyValueProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.AssetPropertyValue` resource\n *\n * @param properties - the TypeScript properties of a `AssetPropertyValueProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.AssetPropertyValue` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelAssetPropertyValuePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_AssetPropertyValuePropertyValidator(properties).assertSuccess();\n    return {\n        Quality: cdk.stringToCloudFormation(properties.quality),\n        Timestamp: cfnDetectorModelAssetPropertyTimestampPropertyToCloudFormation(properties.timestamp),\n        Value: cfnDetectorModelAssetPropertyVariantPropertyToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelAssetPropertyValuePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.AssetPropertyValueProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.AssetPropertyValueProperty>();\n    ret.addPropertyResult('quality', 'Quality', properties.Quality != null ? cfn_parse.FromCloudFormation.getString(properties.Quality) : undefined);\n    ret.addPropertyResult('timestamp', 'Timestamp', properties.Timestamp != null ? CfnDetectorModelAssetPropertyTimestampPropertyFromCloudFormation(properties.Timestamp) : undefined);\n    ret.addPropertyResult('value', 'Value', CfnDetectorModelAssetPropertyVariantPropertyFromCloudFormation(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\nn    export interface AssetPropertyVariantProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly booleanValue?: string;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly doubleValue?: string;\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly integerValue?: string;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly stringValue?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AssetPropertyVariantProperty`\n *\n * @param properties - the TypeScript properties of a `AssetPropertyVariantProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_AssetPropertyVariantPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('booleanValue', cdk.validateString)(properties.booleanValue));\n    errors.collect(cdk.propertyValidator('doubleValue', cdk.validateString)(properties.doubleValue));\n    errors.collect(cdk.propertyValidator('integerValue', cdk.validateString)(properties.integerValue));\n    errors.collect(cdk.propertyValidator('stringValue', cdk.validateString)(properties.stringValue));\n    return errors.wrap('supplied properties not correct for \"AssetPropertyVariantProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.AssetPropertyVariant` resource\n *\n * @param properties - the TypeScript properties of a `AssetPropertyVariantProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.AssetPropertyVariant` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelAssetPropertyVariantPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_AssetPropertyVariantPropertyValidator(properties).assertSuccess();\n    return {\n        BooleanValue: cdk.stringToCloudFormation(properties.booleanValue),\n        DoubleValue: cdk.stringToCloudFormation(properties.doubleValue),\n        IntegerValue: cdk.stringToCloudFormation(properties.integerValue),\n        StringValue: cdk.stringToCloudFormation(properties.stringValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelAssetPropertyVariantPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.AssetPropertyVariantProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.AssetPropertyVariantProperty>();\n    ret.addPropertyResult('booleanValue', 'BooleanValue', properties.BooleanValue != null ? cfn_parse.FromCloudFormation.getString(properties.BooleanValue) : undefined);\n    ret.addPropertyResult('doubleValue', 'DoubleValue', properties.DoubleValue != null ? cfn_parse.FromCloudFormation.getString(properties.DoubleValue) : undefined);\n    ret.addPropertyResult('integerValue', 'IntegerValue', properties.IntegerValue != null ? cfn_parse.FromCloudFormation.getString(properties.IntegerValue) : undefined);\n    ret.addPropertyResult('stringValue', 'StringValue', properties.StringValue != null ? cfn_parse.FromCloudFormation.getString(properties.StringValue) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                       \n    export interface ClearTimerProperty {\n                                                                                                                                                                                                                                                                    \n        readonly timerName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClearTimerProperty`\n *\n * @param properties - the TypeScript properties of a `ClearTimerProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_ClearTimerPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('timerName', cdk.requiredValidator)(properties.timerName));\n    errors.collect(cdk.propertyValidator('timerName', cdk.validateString)(properties.timerName));\n    return errors.wrap('supplied properties not correct for \"ClearTimerProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.ClearTimer` resource\n *\n * @param properties - the TypeScript properties of a `ClearTimerProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.ClearTimer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelClearTimerPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_ClearTimerPropertyValidator(properties).assertSuccess();\n    return {\n        TimerName: cdk.stringToCloudFormation(properties.timerName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelClearTimerPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.ClearTimerProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.ClearTimerProperty>();\n    ret.addPropertyResult('timerName', 'TimerName', cfn_parse.FromCloudFormation.getString(properties.TimerName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                               \n    export interface DetectorModelDefinitionProperty {\n                                                                                                                                                                                                                                                                                                                                            \n        readonly initialStateName: string;\n                                                                                                                                                                                                                                                                                                         \n        readonly states: Array<CfnDetectorModel.StateProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DetectorModelDefinitionProperty`\n *\n * @param properties - the TypeScript properties of a `DetectorModelDefinitionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_DetectorModelDefinitionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('initialStateName', cdk.requiredValidator)(properties.initialStateName));\n    errors.collect(cdk.propertyValidator('initialStateName', cdk.validateString)(properties.initialStateName));\n    errors.collect(cdk.propertyValidator('states', cdk.requiredValidator)(properties.states));\n    errors.collect(cdk.propertyValidator('states', cdk.listValidator(CfnDetectorModel_StatePropertyValidator))(properties.states));\n    return errors.wrap('supplied properties not correct for \"DetectorModelDefinitionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.DetectorModelDefinition` resource\n *\n * @param properties - the TypeScript properties of a `DetectorModelDefinitionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.DetectorModelDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelDetectorModelDefinitionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_DetectorModelDefinitionPropertyValidator(properties).assertSuccess();\n    return {\n        InitialStateName: cdk.stringToCloudFormation(properties.initialStateName),\n        States: cdk.listMapper(cfnDetectorModelStatePropertyToCloudFormation)(properties.states),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelDetectorModelDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.DetectorModelDefinitionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.DetectorModelDefinitionProperty>();\n    ret.addPropertyResult('initialStateName', 'InitialStateName', cfn_parse.FromCloudFormation.getString(properties.InitialStateName));\n    ret.addPropertyResult('states', 'States', cfn_parse.FromCloudFormation.getArray(CfnDetectorModelStatePropertyFromCloudFormation)(properties.States));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\nn    export interface DynamoDBProperty {\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly hashKeyField: string;\nn        readonly hashKeyType?: string;\n                                                                                                                                                                                                                                                                                              \n        readonly hashKeyValue: string;\nn        readonly operation?: string;\nn        readonly payload?: CfnDetectorModel.PayloadProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly payloadField?: string;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly rangeKeyField?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly rangeKeyType?: string;\n                                                                                                                                                                                                                                                                                           \n        readonly rangeKeyValue?: string;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly tableName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DynamoDBProperty`\n *\n * @param properties - the TypeScript properties of a `DynamoDBProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_DynamoDBPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('hashKeyField', cdk.requiredValidator)(properties.hashKeyField));\n    errors.collect(cdk.propertyValidator('hashKeyField', cdk.validateString)(properties.hashKeyField));\n    errors.collect(cdk.propertyValidator('hashKeyType', cdk.validateString)(properties.hashKeyType));\n    errors.collect(cdk.propertyValidator('hashKeyValue', cdk.requiredValidator)(properties.hashKeyValue));\n    errors.collect(cdk.propertyValidator('hashKeyValue', cdk.validateString)(properties.hashKeyValue));\n    errors.collect(cdk.propertyValidator('operation', cdk.validateString)(properties.operation));\n    errors.collect(cdk.propertyValidator('payload', CfnDetectorModel_PayloadPropertyValidator)(properties.payload));\n    errors.collect(cdk.propertyValidator('payloadField', cdk.validateString)(properties.payloadField));\n    errors.collect(cdk.propertyValidator('rangeKeyField', cdk.validateString)(properties.rangeKeyField));\n    errors.collect(cdk.propertyValidator('rangeKeyType', cdk.validateString)(properties.rangeKeyType));\n    errors.collect(cdk.propertyValidator('rangeKeyValue', cdk.validateString)(properties.rangeKeyValue));\n    errors.collect(cdk.propertyValidator('tableName', cdk.requiredValidator)(properties.tableName));\n    errors.collect(cdk.propertyValidator('tableName', cdk.validateString)(properties.tableName));\n    return errors.wrap('supplied properties not correct for \"DynamoDBProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.DynamoDB` resource\n *\n * @param properties - the TypeScript properties of a `DynamoDBProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.DynamoDB` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelDynamoDBPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_DynamoDBPropertyValidator(properties).assertSuccess();\n    return {\n        HashKeyField: cdk.stringToCloudFormation(properties.hashKeyField),\n        HashKeyType: cdk.stringToCloudFormation(properties.hashKeyType),\n        HashKeyValue: cdk.stringToCloudFormation(properties.hashKeyValue),\n        Operation: cdk.stringToCloudFormation(properties.operation),\n        Payload: cfnDetectorModelPayloadPropertyToCloudFormation(properties.payload),\n        PayloadField: cdk.stringToCloudFormation(properties.payloadField),\n        RangeKeyField: cdk.stringToCloudFormation(properties.rangeKeyField),\n        RangeKeyType: cdk.stringToCloudFormation(properties.rangeKeyType),\n        RangeKeyValue: cdk.stringToCloudFormation(properties.rangeKeyValue),\n        TableName: cdk.stringToCloudFormation(properties.tableName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelDynamoDBPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.DynamoDBProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.DynamoDBProperty>();\n    ret.addPropertyResult('hashKeyField', 'HashKeyField', cfn_parse.FromCloudFormation.getString(properties.HashKeyField));\n    ret.addPropertyResult('hashKeyType', 'HashKeyType', properties.HashKeyType != null ? cfn_parse.FromCloudFormation.getString(properties.HashKeyType) : undefined);\n    ret.addPropertyResult('hashKeyValue', 'HashKeyValue', cfn_parse.FromCloudFormation.getString(properties.HashKeyValue));\n    ret.addPropertyResult('operation', 'Operation', properties.Operation != null ? cfn_parse.FromCloudFormation.getString(properties.Operation) : undefined);\n    ret.addPropertyResult('payload', 'Payload', properties.Payload != null ? CfnDetectorModelPayloadPropertyFromCloudFormation(properties.Payload) : undefined);\n    ret.addPropertyResult('payloadField', 'PayloadField', properties.PayloadField != null ? cfn_parse.FromCloudFormation.getString(properties.PayloadField) : undefined);\n    ret.addPropertyResult('rangeKeyField', 'RangeKeyField', properties.RangeKeyField != null ? cfn_parse.FromCloudFormation.getString(properties.RangeKeyField) : undefined);\n    ret.addPropertyResult('rangeKeyType', 'RangeKeyType', properties.RangeKeyType != null ? cfn_parse.FromCloudFormation.getString(properties.RangeKeyType) : undefined);\n    ret.addPropertyResult('rangeKeyValue', 'RangeKeyValue', properties.RangeKeyValue != null ? cfn_parse.FromCloudFormation.getString(properties.RangeKeyValue) : undefined);\n    ret.addPropertyResult('tableName', 'TableName', cfn_parse.FromCloudFormation.getString(properties.TableName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\nn    export interface DynamoDBv2Property {\nn        readonly payload?: CfnDetectorModel.PayloadProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                    \n        readonly tableName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DynamoDBv2Property`\n *\n * @param properties - the TypeScript properties of a `DynamoDBv2Property`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_DynamoDBv2PropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('payload', CfnDetectorModel_PayloadPropertyValidator)(properties.payload));\n    errors.collect(cdk.propertyValidator('tableName', cdk.requiredValidator)(properties.tableName));\n    errors.collect(cdk.propertyValidator('tableName', cdk.validateString)(properties.tableName));\n    return errors.wrap('supplied properties not correct for \"DynamoDBv2Property\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.DynamoDBv2` resource\n *\n * @param properties - the TypeScript properties of a `DynamoDBv2Property`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.DynamoDBv2` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelDynamoDBv2PropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_DynamoDBv2PropertyValidator(properties).assertSuccess();\n    return {\n        Payload: cfnDetectorModelPayloadPropertyToCloudFormation(properties.payload),\n        TableName: cdk.stringToCloudFormation(properties.tableName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelDynamoDBv2PropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.DynamoDBv2Property | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.DynamoDBv2Property>();\n    ret.addPropertyResult('payload', 'Payload', properties.Payload != null ? CfnDetectorModelPayloadPropertyFromCloudFormation(properties.Payload) : undefined);\n    ret.addPropertyResult('tableName', 'TableName', cfn_parse.FromCloudFormation.getString(properties.TableName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                                           \n    export interface EventProperty {\n                                                                                                                                                                                                                                                     \n        readonly actions?: Array<CfnDetectorModel.ActionProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly condition?: string;\n                                                                                                                                                                                                                                                 \n        readonly eventName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EventProperty`\n *\n * @param properties - the TypeScript properties of a `EventProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_EventPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.listValidator(CfnDetectorModel_ActionPropertyValidator))(properties.actions));\n    errors.collect(cdk.propertyValidator('condition', cdk.validateString)(properties.condition));\n    errors.collect(cdk.propertyValidator('eventName', cdk.requiredValidator)(properties.eventName));\n    errors.collect(cdk.propertyValidator('eventName', cdk.validateString)(properties.eventName));\n    return errors.wrap('supplied properties not correct for \"EventProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Event` resource\n *\n * @param properties - the TypeScript properties of a `EventProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Event` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelEventPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_EventPropertyValidator(properties).assertSuccess();\n    return {\n        Actions: cdk.listMapper(cfnDetectorModelActionPropertyToCloudFormation)(properties.actions),\n        Condition: cdk.stringToCloudFormation(properties.condition),\n        EventName: cdk.stringToCloudFormation(properties.eventName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelEventPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.EventProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.EventProperty>();\n    ret.addPropertyResult('actions', 'Actions', properties.Actions != null ? cfn_parse.FromCloudFormation.getArray(CfnDetectorModelActionPropertyFromCloudFormation)(properties.Actions) : undefined);\n    ret.addPropertyResult('condition', 'Condition', properties.Condition != null ? cfn_parse.FromCloudFormation.getString(properties.Condition) : undefined);\n    ret.addPropertyResult('eventName', 'EventName', cfn_parse.FromCloudFormation.getString(properties.EventName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                                                                                                              \n    export interface FirehoseProperty {\n                                                                                                                                                                                                                                                                                                                          \n        readonly deliveryStreamName: string;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly payload?: CfnDetectorModel.PayloadProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly separator?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FirehoseProperty`\n *\n * @param properties - the TypeScript properties of a `FirehoseProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_FirehosePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deliveryStreamName', cdk.requiredValidator)(properties.deliveryStreamName));\n    errors.collect(cdk.propertyValidator('deliveryStreamName', cdk.validateString)(properties.deliveryStreamName));\n    errors.collect(cdk.propertyValidator('payload', CfnDetectorModel_PayloadPropertyValidator)(properties.payload));\n    errors.collect(cdk.propertyValidator('separator', cdk.validateString)(properties.separator));\n    return errors.wrap('supplied properties not correct for \"FirehoseProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Firehose` resource\n *\n * @param properties - the TypeScript properties of a `FirehoseProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Firehose` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelFirehosePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_FirehosePropertyValidator(properties).assertSuccess();\n    return {\n        DeliveryStreamName: cdk.stringToCloudFormation(properties.deliveryStreamName),\n        Payload: cfnDetectorModelPayloadPropertyToCloudFormation(properties.payload),\n        Separator: cdk.stringToCloudFormation(properties.separator),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelFirehosePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.FirehoseProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.FirehoseProperty>();\n    ret.addPropertyResult('deliveryStreamName', 'DeliveryStreamName', cfn_parse.FromCloudFormation.getString(properties.DeliveryStreamName));\n    ret.addPropertyResult('payload', 'Payload', properties.Payload != null ? CfnDetectorModelPayloadPropertyFromCloudFormation(properties.Payload) : undefined);\n    ret.addPropertyResult('separator', 'Separator', properties.Separator != null ? cfn_parse.FromCloudFormation.getString(properties.Separator) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                                                                                                \n    export interface IotEventsProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly inputName: string;\n                                                                                                                                                                                                                                                                                                                         \n        readonly payload?: CfnDetectorModel.PayloadProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IotEventsProperty`\n *\n * @param properties - the TypeScript properties of a `IotEventsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_IotEventsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('inputName', cdk.requiredValidator)(properties.inputName));\n    errors.collect(cdk.propertyValidator('inputName', cdk.validateString)(properties.inputName));\n    errors.collect(cdk.propertyValidator('payload', CfnDetectorModel_PayloadPropertyValidator)(properties.payload));\n    return errors.wrap('supplied properties not correct for \"IotEventsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.IotEvents` resource\n *\n * @param properties - the TypeScript properties of a `IotEventsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.IotEvents` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelIotEventsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_IotEventsPropertyValidator(properties).assertSuccess();\n    return {\n        InputName: cdk.stringToCloudFormation(properties.inputName),\n        Payload: cfnDetectorModelPayloadPropertyToCloudFormation(properties.payload),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelIotEventsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.IotEventsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.IotEventsProperty>();\n    ret.addPropertyResult('inputName', 'InputName', cfn_parse.FromCloudFormation.getString(properties.InputName));\n    ret.addPropertyResult('payload', 'Payload', properties.Payload != null ? CfnDetectorModelPayloadPropertyFromCloudFormation(properties.Payload) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\nn    export interface IotSiteWiseProperty {\n                                                                                                                                                                                                                                                                                         \n        readonly assetId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly entryId?: string;\n                                                                                                                                                                                                                                                                           \n        readonly propertyAlias?: string;\n                                                                                                                                                                                                                                                                     \n        readonly propertyId?: string;\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly propertyValue: CfnDetectorModel.AssetPropertyValueProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IotSiteWiseProperty`\n *\n * @param properties - the TypeScript properties of a `IotSiteWiseProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_IotSiteWisePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('assetId', cdk.validateString)(properties.assetId));\n    errors.collect(cdk.propertyValidator('entryId', cdk.validateString)(properties.entryId));\n    errors.collect(cdk.propertyValidator('propertyAlias', cdk.validateString)(properties.propertyAlias));\n    errors.collect(cdk.propertyValidator('propertyId', cdk.validateString)(properties.propertyId));\n    errors.collect(cdk.propertyValidator('propertyValue', cdk.requiredValidator)(properties.propertyValue));\n    errors.collect(cdk.propertyValidator('propertyValue', CfnDetectorModel_AssetPropertyValuePropertyValidator)(properties.propertyValue));\n    return errors.wrap('supplied properties not correct for \"IotSiteWiseProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.IotSiteWise` resource\n *\n * @param properties - the TypeScript properties of a `IotSiteWiseProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.IotSiteWise` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelIotSiteWisePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_IotSiteWisePropertyValidator(properties).assertSuccess();\n    return {\n        AssetId: cdk.stringToCloudFormation(properties.assetId),\n        EntryId: cdk.stringToCloudFormation(properties.entryId),\n        PropertyAlias: cdk.stringToCloudFormation(properties.propertyAlias),\n        PropertyId: cdk.stringToCloudFormation(properties.propertyId),\n        PropertyValue: cfnDetectorModelAssetPropertyValuePropertyToCloudFormation(properties.propertyValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelIotSiteWisePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.IotSiteWiseProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.IotSiteWiseProperty>();\n    ret.addPropertyResult('assetId', 'AssetId', properties.AssetId != null ? cfn_parse.FromCloudFormation.getString(properties.AssetId) : undefined);\n    ret.addPropertyResult('entryId', 'EntryId', properties.EntryId != null ? cfn_parse.FromCloudFormation.getString(properties.EntryId) : undefined);\n    ret.addPropertyResult('propertyAlias', 'PropertyAlias', properties.PropertyAlias != null ? cfn_parse.FromCloudFormation.getString(properties.PropertyAlias) : undefined);\n    ret.addPropertyResult('propertyId', 'PropertyId', properties.PropertyId != null ? cfn_parse.FromCloudFormation.getString(properties.PropertyId) : undefined);\n    ret.addPropertyResult('propertyValue', 'PropertyValue', CfnDetectorModelAssetPropertyValuePropertyFromCloudFormation(properties.PropertyValue));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                                                          \n    export interface IotTopicPublishProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly mqttTopic: string;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly payload?: CfnDetectorModel.PayloadProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IotTopicPublishProperty`\n *\n * @param properties - the TypeScript properties of a `IotTopicPublishProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_IotTopicPublishPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('mqttTopic', cdk.requiredValidator)(properties.mqttTopic));\n    errors.collect(cdk.propertyValidator('mqttTopic', cdk.validateString)(properties.mqttTopic));\n    errors.collect(cdk.propertyValidator('payload', CfnDetectorModel_PayloadPropertyValidator)(properties.payload));\n    return errors.wrap('supplied properties not correct for \"IotTopicPublishProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.IotTopicPublish` resource\n *\n * @param properties - the TypeScript properties of a `IotTopicPublishProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.IotTopicPublish` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelIotTopicPublishPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_IotTopicPublishPropertyValidator(properties).assertSuccess();\n    return {\n        MqttTopic: cdk.stringToCloudFormation(properties.mqttTopic),\n        Payload: cfnDetectorModelPayloadPropertyToCloudFormation(properties.payload),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelIotTopicPublishPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.IotTopicPublishProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.IotTopicPublishProperty>();\n    ret.addPropertyResult('mqttTopic', 'MqttTopic', cfn_parse.FromCloudFormation.getString(properties.MqttTopic));\n    ret.addPropertyResult('payload', 'Payload', properties.Payload != null ? CfnDetectorModelPayloadPropertyFromCloudFormation(properties.Payload) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                                                                                       \n    export interface LambdaProperty {\n                                                                                                                                                                                                                                                                               \n        readonly functionArn: string;\n                                                                                                                                                                                                                                                                                                             \n        readonly payload?: CfnDetectorModel.PayloadProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_LambdaPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('functionArn', cdk.requiredValidator)(properties.functionArn));\n    errors.collect(cdk.propertyValidator('functionArn', cdk.validateString)(properties.functionArn));\n    errors.collect(cdk.propertyValidator('payload', CfnDetectorModel_PayloadPropertyValidator)(properties.payload));\n    return errors.wrap('supplied properties not correct for \"LambdaProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Lambda` resource\n *\n * @param properties - the TypeScript properties of a `LambdaProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Lambda` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelLambdaPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_LambdaPropertyValidator(properties).assertSuccess();\n    return {\n        FunctionArn: cdk.stringToCloudFormation(properties.functionArn),\n        Payload: cfnDetectorModelPayloadPropertyToCloudFormation(properties.payload),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelLambdaPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.LambdaProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.LambdaProperty>();\n    ret.addPropertyResult('functionArn', 'FunctionArn', cfn_parse.FromCloudFormation.getString(properties.FunctionArn));\n    ret.addPropertyResult('payload', 'Payload', properties.Payload != null ? CfnDetectorModelPayloadPropertyFromCloudFormation(properties.Payload) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                                           \n    export interface OnEnterProperty {\n                                                                                                                                                                                                                                                                                                                              \n        readonly events?: Array<CfnDetectorModel.EventProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OnEnterProperty`\n *\n * @param properties - the TypeScript properties of a `OnEnterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_OnEnterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('events', cdk.listValidator(CfnDetectorModel_EventPropertyValidator))(properties.events));\n    return errors.wrap('supplied properties not correct for \"OnEnterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.OnEnter` resource\n *\n * @param properties - the TypeScript properties of a `OnEnterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.OnEnter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelOnEnterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_OnEnterPropertyValidator(properties).assertSuccess();\n    return {\n        Events: cdk.listMapper(cfnDetectorModelEventPropertyToCloudFormation)(properties.events),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelOnEnterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.OnEnterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.OnEnterProperty>();\n    ret.addPropertyResult('events', 'Events', properties.Events != null ? cfn_parse.FromCloudFormation.getArray(CfnDetectorModelEventPropertyFromCloudFormation)(properties.Events) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                                                      \n    export interface OnExitProperty {\n                                                                                                                                                                                                                                                                                                                             \n        readonly events?: Array<CfnDetectorModel.EventProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OnExitProperty`\n *\n * @param properties - the TypeScript properties of a `OnExitProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_OnExitPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('events', cdk.listValidator(CfnDetectorModel_EventPropertyValidator))(properties.events));\n    return errors.wrap('supplied properties not correct for \"OnExitProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.OnExit` resource\n *\n * @param properties - the TypeScript properties of a `OnExitProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.OnExit` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelOnExitPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_OnExitPropertyValidator(properties).assertSuccess();\n    return {\n        Events: cdk.listMapper(cfnDetectorModelEventPropertyToCloudFormation)(properties.events),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelOnExitPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.OnExitProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.OnExitProperty>();\n    ret.addPropertyResult('events', 'Events', properties.Events != null ? cfn_parse.FromCloudFormation.getArray(CfnDetectorModelEventPropertyFromCloudFormation)(properties.Events) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                                     \n    export interface OnInputProperty {\n                                                                                                                                                                                                                                                                                                   \n        readonly events?: Array<CfnDetectorModel.EventProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly transitionEvents?: Array<CfnDetectorModel.TransitionEventProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OnInputProperty`\n *\n * @param properties - the TypeScript properties of a `OnInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_OnInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('events', cdk.listValidator(CfnDetectorModel_EventPropertyValidator))(properties.events));\n    errors.collect(cdk.propertyValidator('transitionEvents', cdk.listValidator(CfnDetectorModel_TransitionEventPropertyValidator))(properties.transitionEvents));\n    return errors.wrap('supplied properties not correct for \"OnInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.OnInput` resource\n *\n * @param properties - the TypeScript properties of a `OnInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.OnInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelOnInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_OnInputPropertyValidator(properties).assertSuccess();\n    return {\n        Events: cdk.listMapper(cfnDetectorModelEventPropertyToCloudFormation)(properties.events),\n        TransitionEvents: cdk.listMapper(cfnDetectorModelTransitionEventPropertyToCloudFormation)(properties.transitionEvents),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelOnInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.OnInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.OnInputProperty>();\n    ret.addPropertyResult('events', 'Events', properties.Events != null ? cfn_parse.FromCloudFormation.getArray(CfnDetectorModelEventPropertyFromCloudFormation)(properties.Events) : undefined);\n    ret.addPropertyResult('transitionEvents', 'TransitionEvents', properties.TransitionEvents != null ? cfn_parse.FromCloudFormation.getArray(CfnDetectorModelTransitionEventPropertyFromCloudFormation)(properties.TransitionEvents) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\nn    export interface PayloadProperty {\nn        readonly contentExpression: string;\n                                                                                                                                                                                                                                                                                          \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PayloadProperty`\n *\n * @param properties - the TypeScript properties of a `PayloadProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_PayloadPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('contentExpression', cdk.requiredValidator)(properties.contentExpression));\n    errors.collect(cdk.propertyValidator('contentExpression', cdk.validateString)(properties.contentExpression));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"PayloadProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Payload` resource\n *\n * @param properties - the TypeScript properties of a `PayloadProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Payload` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelPayloadPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_PayloadPropertyValidator(properties).assertSuccess();\n    return {\n        ContentExpression: cdk.stringToCloudFormation(properties.contentExpression),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelPayloadPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.PayloadProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.PayloadProperty>();\n    ret.addPropertyResult('contentExpression', 'ContentExpression', cfn_parse.FromCloudFormation.getString(properties.ContentExpression));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface ResetTimerProperty {\n                                                                                                                                                                                                                                                                    \n        readonly timerName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResetTimerProperty`\n *\n * @param properties - the TypeScript properties of a `ResetTimerProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_ResetTimerPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('timerName', cdk.requiredValidator)(properties.timerName));\n    errors.collect(cdk.propertyValidator('timerName', cdk.validateString)(properties.timerName));\n    return errors.wrap('supplied properties not correct for \"ResetTimerProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.ResetTimer` resource\n *\n * @param properties - the TypeScript properties of a `ResetTimerProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.ResetTimer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelResetTimerPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_ResetTimerPropertyValidator(properties).assertSuccess();\n    return {\n        TimerName: cdk.stringToCloudFormation(properties.timerName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelResetTimerPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.ResetTimerProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.ResetTimerProperty>();\n    ret.addPropertyResult('timerName', 'TimerName', cfn_parse.FromCloudFormation.getString(properties.TimerName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                   \n    export interface SetTimerProperty {\nn        readonly durationExpression?: string;\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly seconds?: number;\n                                                                                                                                                                                                                                                       \n        readonly timerName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SetTimerProperty`\n *\n * @param properties - the TypeScript properties of a `SetTimerProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_SetTimerPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('durationExpression', cdk.validateString)(properties.durationExpression));\n    errors.collect(cdk.propertyValidator('seconds', cdk.validateNumber)(properties.seconds));\n    errors.collect(cdk.propertyValidator('timerName', cdk.requiredValidator)(properties.timerName));\n    errors.collect(cdk.propertyValidator('timerName', cdk.validateString)(properties.timerName));\n    return errors.wrap('supplied properties not correct for \"SetTimerProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.SetTimer` resource\n *\n * @param properties - the TypeScript properties of a `SetTimerProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.SetTimer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelSetTimerPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_SetTimerPropertyValidator(properties).assertSuccess();\n    return {\n        DurationExpression: cdk.stringToCloudFormation(properties.durationExpression),\n        Seconds: cdk.numberToCloudFormation(properties.seconds),\n        TimerName: cdk.stringToCloudFormation(properties.timerName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelSetTimerPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.SetTimerProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.SetTimerProperty>();\n    ret.addPropertyResult('durationExpression', 'DurationExpression', properties.DurationExpression != null ? cfn_parse.FromCloudFormation.getString(properties.DurationExpression) : undefined);\n    ret.addPropertyResult('seconds', 'Seconds', properties.Seconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.Seconds) : undefined);\n    ret.addPropertyResult('timerName', 'TimerName', cfn_parse.FromCloudFormation.getString(properties.TimerName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                   \n    export interface SetVariableProperty {\n                                                                                                                                                                                                                                                                 \n        readonly value: string;\n                                                                                                                                                                                                                                                                   \n        readonly variableName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SetVariableProperty`\n *\n * @param properties - the TypeScript properties of a `SetVariableProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_SetVariablePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    errors.collect(cdk.propertyValidator('variableName', cdk.requiredValidator)(properties.variableName));\n    errors.collect(cdk.propertyValidator('variableName', cdk.validateString)(properties.variableName));\n    return errors.wrap('supplied properties not correct for \"SetVariableProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.SetVariable` resource\n *\n * @param properties - the TypeScript properties of a `SetVariableProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.SetVariable` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelSetVariablePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_SetVariablePropertyValidator(properties).assertSuccess();\n    return {\n        Value: cdk.stringToCloudFormation(properties.value),\n        VariableName: cdk.stringToCloudFormation(properties.variableName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelSetVariablePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.SetVariableProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.SetVariableProperty>();\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addPropertyResult('variableName', 'VariableName', cfn_parse.FromCloudFormation.getString(properties.VariableName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                 \n    export interface SnsProperty {\n                                                                                                                                                                                                                                                                                                                     \n        readonly payload?: CfnDetectorModel.PayloadProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                  \n        readonly targetArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SnsProperty`\n *\n * @param properties - the TypeScript properties of a `SnsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_SnsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('payload', CfnDetectorModel_PayloadPropertyValidator)(properties.payload));\n    errors.collect(cdk.propertyValidator('targetArn', cdk.requiredValidator)(properties.targetArn));\n    errors.collect(cdk.propertyValidator('targetArn', cdk.validateString)(properties.targetArn));\n    return errors.wrap('supplied properties not correct for \"SnsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Sns` resource\n *\n * @param properties - the TypeScript properties of a `SnsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Sns` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelSnsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_SnsPropertyValidator(properties).assertSuccess();\n    return {\n        Payload: cfnDetectorModelPayloadPropertyToCloudFormation(properties.payload),\n        TargetArn: cdk.stringToCloudFormation(properties.targetArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelSnsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.SnsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.SnsProperty>();\n    ret.addPropertyResult('payload', 'Payload', properties.Payload != null ? CfnDetectorModelPayloadPropertyFromCloudFormation(properties.Payload) : undefined);\n    ret.addPropertyResult('targetArn', 'TargetArn', cfn_parse.FromCloudFormation.getString(properties.TargetArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                                                                             \n    export interface SqsProperty {\n                                                                                                                                                                                                                                                                                                         \n        readonly payload?: CfnDetectorModel.PayloadProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                         \n        readonly queueUrl: string;\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly useBase64?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SqsProperty`\n *\n * @param properties - the TypeScript properties of a `SqsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_SqsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('payload', CfnDetectorModel_PayloadPropertyValidator)(properties.payload));\n    errors.collect(cdk.propertyValidator('queueUrl', cdk.requiredValidator)(properties.queueUrl));\n    errors.collect(cdk.propertyValidator('queueUrl', cdk.validateString)(properties.queueUrl));\n    errors.collect(cdk.propertyValidator('useBase64', cdk.validateBoolean)(properties.useBase64));\n    return errors.wrap('supplied properties not correct for \"SqsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Sqs` resource\n *\n * @param properties - the TypeScript properties of a `SqsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.Sqs` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelSqsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_SqsPropertyValidator(properties).assertSuccess();\n    return {\n        Payload: cfnDetectorModelPayloadPropertyToCloudFormation(properties.payload),\n        QueueUrl: cdk.stringToCloudFormation(properties.queueUrl),\n        UseBase64: cdk.booleanToCloudFormation(properties.useBase64),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelSqsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.SqsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.SqsProperty>();\n    ret.addPropertyResult('payload', 'Payload', properties.Payload != null ? CfnDetectorModelPayloadPropertyFromCloudFormation(properties.Payload) : undefined);\n    ret.addPropertyResult('queueUrl', 'QueueUrl', cfn_parse.FromCloudFormation.getString(properties.QueueUrl));\n    ret.addPropertyResult('useBase64', 'UseBase64', properties.UseBase64 != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UseBase64) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                           \n    export interface StateProperty {\n                                                                                                                                                                                                                                                                                                      \n        readonly onEnter?: CfnDetectorModel.OnEnterProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly onExit?: CfnDetectorModel.OnExitProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly onInput?: CfnDetectorModel.OnInputProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                 \n        readonly stateName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StateProperty`\n *\n * @param properties - the TypeScript properties of a `StateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_StatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('onEnter', CfnDetectorModel_OnEnterPropertyValidator)(properties.onEnter));\n    errors.collect(cdk.propertyValidator('onExit', CfnDetectorModel_OnExitPropertyValidator)(properties.onExit));\n    errors.collect(cdk.propertyValidator('onInput', CfnDetectorModel_OnInputPropertyValidator)(properties.onInput));\n    errors.collect(cdk.propertyValidator('stateName', cdk.requiredValidator)(properties.stateName));\n    errors.collect(cdk.propertyValidator('stateName', cdk.validateString)(properties.stateName));\n    return errors.wrap('supplied properties not correct for \"StateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.State` resource\n *\n * @param properties - the TypeScript properties of a `StateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.State` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelStatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_StatePropertyValidator(properties).assertSuccess();\n    return {\n        OnEnter: cfnDetectorModelOnEnterPropertyToCloudFormation(properties.onEnter),\n        OnExit: cfnDetectorModelOnExitPropertyToCloudFormation(properties.onExit),\n        OnInput: cfnDetectorModelOnInputPropertyToCloudFormation(properties.onInput),\n        StateName: cdk.stringToCloudFormation(properties.stateName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelStatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.StateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.StateProperty>();\n    ret.addPropertyResult('onEnter', 'OnEnter', properties.OnEnter != null ? CfnDetectorModelOnEnterPropertyFromCloudFormation(properties.OnEnter) : undefined);\n    ret.addPropertyResult('onExit', 'OnExit', properties.OnExit != null ? CfnDetectorModelOnExitPropertyFromCloudFormation(properties.OnExit) : undefined);\n    ret.addPropertyResult('onInput', 'OnInput', properties.OnInput != null ? CfnDetectorModelOnInputPropertyFromCloudFormation(properties.OnInput) : undefined);\n    ret.addPropertyResult('stateName', 'StateName', cfn_parse.FromCloudFormation.getString(properties.StateName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDetectorModel {\n                                                                                                                                                                                                                                                                                                                      \n    export interface TransitionEventProperty {\n                                                                                                                                                                                                                                                                         \n        readonly actions?: Array<CfnDetectorModel.ActionProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly condition: string;\n                                                                                                                                                                                                                                                                                \n        readonly eventName: string;\n                                                                                                                                                                                                                                                                       \n        readonly nextState: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TransitionEventProperty`\n *\n * @param properties - the TypeScript properties of a `TransitionEventProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDetectorModel_TransitionEventPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.listValidator(CfnDetectorModel_ActionPropertyValidator))(properties.actions));\n    errors.collect(cdk.propertyValidator('condition', cdk.requiredValidator)(properties.condition));\n    errors.collect(cdk.propertyValidator('condition', cdk.validateString)(properties.condition));\n    errors.collect(cdk.propertyValidator('eventName', cdk.requiredValidator)(properties.eventName));\n    errors.collect(cdk.propertyValidator('eventName', cdk.validateString)(properties.eventName));\n    errors.collect(cdk.propertyValidator('nextState', cdk.requiredValidator)(properties.nextState));\n    errors.collect(cdk.propertyValidator('nextState', cdk.validateString)(properties.nextState));\n    return errors.wrap('supplied properties not correct for \"TransitionEventProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.TransitionEvent` resource\n *\n * @param properties - the TypeScript properties of a `TransitionEventProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::DetectorModel.TransitionEvent` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDetectorModelTransitionEventPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDetectorModel_TransitionEventPropertyValidator(properties).assertSuccess();\n    return {\n        Actions: cdk.listMapper(cfnDetectorModelActionPropertyToCloudFormation)(properties.actions),\n        Condition: cdk.stringToCloudFormation(properties.condition),\n        EventName: cdk.stringToCloudFormation(properties.eventName),\n        NextState: cdk.stringToCloudFormation(properties.nextState),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDetectorModelTransitionEventPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDetectorModel.TransitionEventProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDetectorModel.TransitionEventProperty>();\n    ret.addPropertyResult('actions', 'Actions', properties.Actions != null ? cfn_parse.FromCloudFormation.getArray(CfnDetectorModelActionPropertyFromCloudFormation)(properties.Actions) : undefined);\n    ret.addPropertyResult('condition', 'Condition', cfn_parse.FromCloudFormation.getString(properties.Condition));\n    ret.addPropertyResult('eventName', 'EventName', cfn_parse.FromCloudFormation.getString(properties.EventName));\n    ret.addPropertyResult('nextState', 'NextState', cfn_parse.FromCloudFormation.getString(properties.NextState));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                \nexport interface CfnInputProps {\n\n                                                                                                                                                                                                           \n    readonly inputDefinition: CfnInput.InputDefinitionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                 \n    readonly inputDescription?: string;\n\n                                                                                                                                                                                               \n    readonly inputName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnInputProps`\n *\n * @param properties - the TypeScript properties of a `CfnInputProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnInputPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('inputDefinition', cdk.requiredValidator)(properties.inputDefinition));\n    errors.collect(cdk.propertyValidator('inputDefinition', CfnInput_InputDefinitionPropertyValidator)(properties.inputDefinition));\n    errors.collect(cdk.propertyValidator('inputDescription', cdk.validateString)(properties.inputDescription));\n    errors.collect(cdk.propertyValidator('inputName', cdk.validateString)(properties.inputName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnInputProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::Input` resource\n *\n * @param properties - the TypeScript properties of a `CfnInputProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::Input` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInputPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInputPropsValidator(properties).assertSuccess();\n    return {\n        InputDefinition: cfnInputInputDefinitionPropertyToCloudFormation(properties.inputDefinition),\n        InputDescription: cdk.stringToCloudFormation(properties.inputDescription),\n        InputName: cdk.stringToCloudFormation(properties.inputName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInputPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInputProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInputProps>();\n    ret.addPropertyResult('inputDefinition', 'InputDefinition', CfnInputInputDefinitionPropertyFromCloudFormation(properties.InputDefinition));\n    ret.addPropertyResult('inputDescription', 'InputDescription', properties.InputDescription != null ? cfn_parse.FromCloudFormation.getString(properties.InputDescription) : undefined);\n    ret.addPropertyResult('inputName', 'InputName', properties.InputName != null ? cfn_parse.FromCloudFormation.getString(properties.InputName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnInput extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IoTEvents::Input\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnInput {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnInputPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnInput(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                           \n    public inputDefinition: CfnInput.InputDefinitionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                 \n    public inputDescription: string | undefined;\n\n                                                                                                                                                                                               \n    public inputName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnInputProps) {\n        super(scope, id, { type: CfnInput.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'inputDefinition', this);\n\n        this.inputDefinition = props.inputDefinition;\n        this.inputDescription = props.inputDescription;\n        this.inputName = props.inputName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::IoTEvents::Input\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnInput.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            inputDefinition: this.inputDefinition,\n            inputDescription: this.inputDescription,\n            inputName: this.inputName,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnInputPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnInput {\nn    export interface AttributeProperty {\nn        readonly jsonPath: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AttributeProperty`\n *\n * @param properties - the TypeScript properties of a `AttributeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInput_AttributePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('jsonPath', cdk.requiredValidator)(properties.jsonPath));\n    errors.collect(cdk.propertyValidator('jsonPath', cdk.validateString)(properties.jsonPath));\n    return errors.wrap('supplied properties not correct for \"AttributeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::Input.Attribute` resource\n *\n * @param properties - the TypeScript properties of a `AttributeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::Input.Attribute` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInputAttributePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInput_AttributePropertyValidator(properties).assertSuccess();\n    return {\n        JsonPath: cdk.stringToCloudFormation(properties.jsonPath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInputAttributePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInput.AttributeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInput.AttributeProperty>();\n    ret.addPropertyResult('jsonPath', 'JsonPath', cfn_parse.FromCloudFormation.getString(properties.JsonPath));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInput {\n                                                                                                                                                                                                                                          \n    export interface InputDefinitionProperty {\nn        readonly attributes: Array<CfnInput.AttributeProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputDefinitionProperty`\n *\n * @param properties - the TypeScript properties of a `InputDefinitionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInput_InputDefinitionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attributes', cdk.requiredValidator)(properties.attributes));\n    errors.collect(cdk.propertyValidator('attributes', cdk.listValidator(CfnInput_AttributePropertyValidator))(properties.attributes));\n    return errors.wrap('supplied properties not correct for \"InputDefinitionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTEvents::Input.InputDefinition` resource\n *\n * @param properties - the TypeScript properties of a `InputDefinitionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTEvents::Input.InputDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInputInputDefinitionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInput_InputDefinitionPropertyValidator(properties).assertSuccess();\n    return {\n        Attributes: cdk.listMapper(cfnInputAttributePropertyToCloudFormation)(properties.attributes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInputInputDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInput.InputDefinitionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInput.InputDefinitionProperty>();\n    ret.addPropertyResult('attributes', 'Attributes', cfn_parse.FromCloudFormation.getArray(CfnInputAttributePropertyFromCloudFormation)(properties.Attributes));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
