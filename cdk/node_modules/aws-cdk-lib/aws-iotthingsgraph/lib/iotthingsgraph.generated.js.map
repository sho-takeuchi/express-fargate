{
  "version": 3,
  "sources": ["iotthingsgraph.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:31.751Z\",\"fingerprint\":\"P7+FwAZePIufMd9yoOemklxDnCUci1kLCGC1BPveJi4=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                   \nexport interface CfnFlowTemplateProps {\n\n                                                                                                                                                                                                                                   \n    readonly definition: CfnFlowTemplate.DefinitionDocumentProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                       \n    readonly compatibleNamespaceVersion?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFlowTemplateProps`\n *\n * @param properties - the TypeScript properties of a `CfnFlowTemplateProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlowTemplatePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('compatibleNamespaceVersion', cdk.validateNumber)(properties.compatibleNamespaceVersion));\n    errors.collect(cdk.propertyValidator('definition', cdk.requiredValidator)(properties.definition));\n    errors.collect(cdk.propertyValidator('definition', CfnFlowTemplate_DefinitionDocumentPropertyValidator)(properties.definition));\n    return errors.wrap('supplied properties not correct for \"CfnFlowTemplateProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTThingsGraph::FlowTemplate` resource\n *\n * @param properties - the TypeScript properties of a `CfnFlowTemplateProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTThingsGraph::FlowTemplate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowTemplatePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlowTemplatePropsValidator(properties).assertSuccess();\n    return {\n        Definition: cfnFlowTemplateDefinitionDocumentPropertyToCloudFormation(properties.definition),\n        CompatibleNamespaceVersion: cdk.numberToCloudFormation(properties.compatibleNamespaceVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowTemplatePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlowTemplateProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlowTemplateProps>();\n    ret.addPropertyResult('definition', 'Definition', CfnFlowTemplateDefinitionDocumentPropertyFromCloudFormation(properties.Definition));\n    ret.addPropertyResult('compatibleNamespaceVersion', 'CompatibleNamespaceVersion', properties.CompatibleNamespaceVersion != null ? cfn_parse.FromCloudFormation.getNumber(properties.CompatibleNamespaceVersion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnFlowTemplate extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::IoTThingsGraph::FlowTemplate\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFlowTemplate {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFlowTemplatePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFlowTemplate(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                   \n    public definition: CfnFlowTemplate.DefinitionDocumentProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                       \n    public compatibleNamespaceVersion: number | undefined;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnFlowTemplateProps) {\n        super(scope, id, { type: CfnFlowTemplate.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'definition', this);\n\n        this.definition = props.definition;\n        this.compatibleNamespaceVersion = props.compatibleNamespaceVersion;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFlowTemplate.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            definition: this.definition,\n            compatibleNamespaceVersion: this.compatibleNamespaceVersion,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFlowTemplatePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnFlowTemplate {\n                                                                                                                                                                                                                                                               \n    export interface DefinitionDocumentProperty {\n                                                                                                                                                                                                                                                                                                                                      \n        readonly language: string;\n                                                                                                                                                                                                                                                                                                 \n        readonly text: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DefinitionDocumentProperty`\n *\n * @param properties - the TypeScript properties of a `DefinitionDocumentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFlowTemplate_DefinitionDocumentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('language', cdk.requiredValidator)(properties.language));\n    errors.collect(cdk.propertyValidator('language', cdk.validateString)(properties.language));\n    errors.collect(cdk.propertyValidator('text', cdk.requiredValidator)(properties.text));\n    errors.collect(cdk.propertyValidator('text', cdk.validateString)(properties.text));\n    return errors.wrap('supplied properties not correct for \"DefinitionDocumentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::IoTThingsGraph::FlowTemplate.DefinitionDocument` resource\n *\n * @param properties - the TypeScript properties of a `DefinitionDocumentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::IoTThingsGraph::FlowTemplate.DefinitionDocument` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFlowTemplateDefinitionDocumentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFlowTemplate_DefinitionDocumentPropertyValidator(properties).assertSuccess();\n    return {\n        Language: cdk.stringToCloudFormation(properties.language),\n        Text: cdk.stringToCloudFormation(properties.text),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFlowTemplateDefinitionDocumentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFlowTemplate.DefinitionDocumentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFlowTemplate.DefinitionDocumentProperty>();\n    ret.addPropertyResult('language', 'Language', cfn_parse.FromCloudFormation.getString(properties.Language));\n    ret.addPropertyResult('text', 'Text', cfn_parse.FromCloudFormation.getString(properties.Text));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
