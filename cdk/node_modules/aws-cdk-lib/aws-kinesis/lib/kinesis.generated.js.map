{
  "version": 3,
  "sources": ["kinesis.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:55:53.081Z\",\"fingerprint\":\"A3w89305suaEq6VKOZQbBiXIy1TY8lFSYotMhwEXfWw=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                \nexport interface CfnStreamProps {\n\nn    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly retentionPeriodHours?: number;\n\n                                                                                                                                                                                                                                                                                     \n    readonly shardCount?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly streamEncryption?: CfnStream.StreamEncryptionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly streamModeDetails?: CfnStream.StreamModeDetailsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStreamProps`\n *\n * @param properties - the TypeScript properties of a `CfnStreamProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStreamPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('retentionPeriodHours', cdk.validateNumber)(properties.retentionPeriodHours));\n    errors.collect(cdk.propertyValidator('shardCount', cdk.validateNumber)(properties.shardCount));\n    errors.collect(cdk.propertyValidator('streamEncryption', CfnStream_StreamEncryptionPropertyValidator)(properties.streamEncryption));\n    errors.collect(cdk.propertyValidator('streamModeDetails', CfnStream_StreamModeDetailsPropertyValidator)(properties.streamModeDetails));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnStreamProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Kinesis::Stream` resource\n *\n * @param properties - the TypeScript properties of a `CfnStreamProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Kinesis::Stream` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStreamPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStreamPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        RetentionPeriodHours: cdk.numberToCloudFormation(properties.retentionPeriodHours),\n        ShardCount: cdk.numberToCloudFormation(properties.shardCount),\n        StreamEncryption: cfnStreamStreamEncryptionPropertyToCloudFormation(properties.streamEncryption),\n        StreamModeDetails: cfnStreamStreamModeDetailsPropertyToCloudFormation(properties.streamModeDetails),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStreamPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStreamProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStreamProps>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('retentionPeriodHours', 'RetentionPeriodHours', properties.RetentionPeriodHours != null ? cfn_parse.FromCloudFormation.getNumber(properties.RetentionPeriodHours) : undefined);\n    ret.addPropertyResult('shardCount', 'ShardCount', properties.ShardCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.ShardCount) : undefined);\n    ret.addPropertyResult('streamEncryption', 'StreamEncryption', properties.StreamEncryption != null ? CfnStreamStreamEncryptionPropertyFromCloudFormation(properties.StreamEncryption) : undefined);\n    ret.addPropertyResult('streamModeDetails', 'StreamModeDetails', properties.StreamModeDetails != null ? CfnStreamStreamModeDetailsPropertyFromCloudFormation(properties.StreamModeDetails) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnStream extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Kinesis::Stream\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStream {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStreamPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStream(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                   \n    public readonly attrArn: string;\n\nn    public name: string | undefined;\n\nn    public retentionPeriodHours: number | undefined;\n\n                                                                                                                                                                                                                                                                                     \n    public shardCount: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    public streamEncryption: CfnStream.StreamEncryptionProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                      \n    public streamModeDetails: CfnStream.StreamModeDetailsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnStreamProps = {}) {\n        super(scope, id, { type: CfnStream.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.name = props.name;\n        this.retentionPeriodHours = props.retentionPeriodHours;\n        this.shardCount = props.shardCount;\n        this.streamEncryption = props.streamEncryption;\n        this.streamModeDetails = props.streamModeDetails;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Kinesis::Stream\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStream.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            retentionPeriodHours: this.retentionPeriodHours,\n            shardCount: this.shardCount,\n            streamEncryption: this.streamEncryption,\n            streamModeDetails: this.streamModeDetails,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStreamPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnStream {\nn    export interface StreamEncryptionProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly encryptionType: string;\nn        readonly keyId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StreamEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `StreamEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStream_StreamEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encryptionType', cdk.requiredValidator)(properties.encryptionType));\n    errors.collect(cdk.propertyValidator('encryptionType', cdk.validateString)(properties.encryptionType));\n    errors.collect(cdk.propertyValidator('keyId', cdk.requiredValidator)(properties.keyId));\n    errors.collect(cdk.propertyValidator('keyId', cdk.validateString)(properties.keyId));\n    return errors.wrap('supplied properties not correct for \"StreamEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Kinesis::Stream.StreamEncryption` resource\n *\n * @param properties - the TypeScript properties of a `StreamEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Kinesis::Stream.StreamEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStreamStreamEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStream_StreamEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        EncryptionType: cdk.stringToCloudFormation(properties.encryptionType),\n        KeyId: cdk.stringToCloudFormation(properties.keyId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStreamStreamEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStream.StreamEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStream.StreamEncryptionProperty>();\n    ret.addPropertyResult('encryptionType', 'EncryptionType', cfn_parse.FromCloudFormation.getString(properties.EncryptionType));\n    ret.addPropertyResult('keyId', 'KeyId', cfn_parse.FromCloudFormation.getString(properties.KeyId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStream {\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface StreamModeDetailsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly streamMode: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StreamModeDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `StreamModeDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStream_StreamModeDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('streamMode', cdk.requiredValidator)(properties.streamMode));\n    errors.collect(cdk.propertyValidator('streamMode', cdk.validateString)(properties.streamMode));\n    return errors.wrap('supplied properties not correct for \"StreamModeDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Kinesis::Stream.StreamModeDetails` resource\n *\n * @param properties - the TypeScript properties of a `StreamModeDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Kinesis::Stream.StreamModeDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStreamStreamModeDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStream_StreamModeDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        StreamMode: cdk.stringToCloudFormation(properties.streamMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStreamStreamModeDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStream.StreamModeDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStream.StreamModeDetailsProperty>();\n    ret.addPropertyResult('streamMode', 'StreamMode', cfn_parse.FromCloudFormation.getString(properties.StreamMode));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                \nexport interface CfnStreamConsumerProps {\n\n                                                                                                                                                                                                                                                                          \n    readonly consumerName: string;\n\n                                                                                                                                                                                                                                                    \n    readonly streamArn: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStreamConsumerProps`\n *\n * @param properties - the TypeScript properties of a `CfnStreamConsumerProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStreamConsumerPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('consumerName', cdk.requiredValidator)(properties.consumerName));\n    errors.collect(cdk.propertyValidator('consumerName', cdk.validateString)(properties.consumerName));\n    errors.collect(cdk.propertyValidator('streamArn', cdk.requiredValidator)(properties.streamArn));\n    errors.collect(cdk.propertyValidator('streamArn', cdk.validateString)(properties.streamArn));\n    return errors.wrap('supplied properties not correct for \"CfnStreamConsumerProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Kinesis::StreamConsumer` resource\n *\n * @param properties - the TypeScript properties of a `CfnStreamConsumerProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Kinesis::StreamConsumer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStreamConsumerPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStreamConsumerPropsValidator(properties).assertSuccess();\n    return {\n        ConsumerName: cdk.stringToCloudFormation(properties.consumerName),\n        StreamARN: cdk.stringToCloudFormation(properties.streamArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStreamConsumerPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStreamConsumerProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStreamConsumerProps>();\n    ret.addPropertyResult('consumerName', 'ConsumerName', cfn_parse.FromCloudFormation.getString(properties.ConsumerName));\n    ret.addPropertyResult('streamArn', 'StreamARN', cfn_parse.FromCloudFormation.getString(properties.StreamARN));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnStreamConsumer extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Kinesis::StreamConsumer\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStreamConsumer {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStreamConsumerPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStreamConsumer(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\nn    public readonly attrConsumerArn: string;\n\n                                                                                                                            \n    public readonly attrConsumerCreationTimestamp: string;\n\n                                                                                                                          \n    public readonly attrConsumerName: string;\n\n                                                                                                                                              \n    public readonly attrConsumerStatus: string;\n\n                                                                                                                                  \n    public readonly attrStreamArn: string;\n\n                                                                                                                                                                                                                                                                          \n    public consumerName: string;\n\n                                                                                                                                                                                                                                                    \n    public streamArn: string;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnStreamConsumerProps) {\n        super(scope, id, { type: CfnStreamConsumer.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'consumerName', this);\n        cdk.requireProperty(props, 'streamArn', this);\n        this.attrConsumerArn = cdk.Token.asString(this.getAtt('ConsumerARN'));\n        this.attrConsumerCreationTimestamp = cdk.Token.asString(this.getAtt('ConsumerCreationTimestamp'));\n        this.attrConsumerName = cdk.Token.asString(this.getAtt('ConsumerName'));\n        this.attrConsumerStatus = cdk.Token.asString(this.getAtt('ConsumerStatus'));\n        this.attrStreamArn = cdk.Token.asString(this.getAtt('StreamARN'));\n\n        this.consumerName = props.consumerName;\n        this.streamArn = props.streamArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStreamConsumer.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            consumerName: this.consumerName,\n            streamArn: this.streamArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStreamConsumerPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
