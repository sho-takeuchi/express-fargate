{
  "version": 3,
  "sources": ["kinesisanalyticsv2.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:31.893Z\",\"fingerprint\":\"6UUqdNUO1O6+5u934lV9L8wsN5wuKSytza5Cay8Q1/o=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                       \nexport interface CfnApplicationV2Props {\n\n                                                                                                                                                                                                                                                            \n    readonly runtimeEnvironment: string;\n\n                                                                                                                                                                                                                                                                                                \n    readonly serviceExecutionRole: string;\n\n                                                                                                                                                                                                                                                                      \n    readonly applicationConfiguration?: CfnApplicationV2.ApplicationConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                       \n    readonly applicationDescription?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly applicationMode?: string;\n\n                                                                                                                                                                                                                                         \n    readonly applicationName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApplicationV2Props`\n *\n * @param properties - the TypeScript properties of a `CfnApplicationV2Props`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2PropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applicationConfiguration', CfnApplicationV2_ApplicationConfigurationPropertyValidator)(properties.applicationConfiguration));\n    errors.collect(cdk.propertyValidator('applicationDescription', cdk.validateString)(properties.applicationDescription));\n    errors.collect(cdk.propertyValidator('applicationMode', cdk.validateString)(properties.applicationMode));\n    errors.collect(cdk.propertyValidator('applicationName', cdk.validateString)(properties.applicationName));\n    errors.collect(cdk.propertyValidator('runtimeEnvironment', cdk.requiredValidator)(properties.runtimeEnvironment));\n    errors.collect(cdk.propertyValidator('runtimeEnvironment', cdk.validateString)(properties.runtimeEnvironment));\n    errors.collect(cdk.propertyValidator('serviceExecutionRole', cdk.requiredValidator)(properties.serviceExecutionRole));\n    errors.collect(cdk.propertyValidator('serviceExecutionRole', cdk.validateString)(properties.serviceExecutionRole));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnApplicationV2Props\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application` resource\n *\n * @param properties - the TypeScript properties of a `CfnApplicationV2Props`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2PropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2PropsValidator(properties).assertSuccess();\n    return {\n        RuntimeEnvironment: cdk.stringToCloudFormation(properties.runtimeEnvironment),\n        ServiceExecutionRole: cdk.stringToCloudFormation(properties.serviceExecutionRole),\n        ApplicationConfiguration: cfnApplicationV2ApplicationConfigurationPropertyToCloudFormation(properties.applicationConfiguration),\n        ApplicationDescription: cdk.stringToCloudFormation(properties.applicationDescription),\n        ApplicationMode: cdk.stringToCloudFormation(properties.applicationMode),\n        ApplicationName: cdk.stringToCloudFormation(properties.applicationName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2PropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2Props> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2Props>();\n    ret.addPropertyResult('runtimeEnvironment', 'RuntimeEnvironment', cfn_parse.FromCloudFormation.getString(properties.RuntimeEnvironment));\n    ret.addPropertyResult('serviceExecutionRole', 'ServiceExecutionRole', cfn_parse.FromCloudFormation.getString(properties.ServiceExecutionRole));\n    ret.addPropertyResult('applicationConfiguration', 'ApplicationConfiguration', properties.ApplicationConfiguration != null ? CfnApplicationV2ApplicationConfigurationPropertyFromCloudFormation(properties.ApplicationConfiguration) : undefined);\n    ret.addPropertyResult('applicationDescription', 'ApplicationDescription', properties.ApplicationDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ApplicationDescription) : undefined);\n    ret.addPropertyResult('applicationMode', 'ApplicationMode', properties.ApplicationMode != null ? cfn_parse.FromCloudFormation.getString(properties.ApplicationMode) : undefined);\n    ret.addPropertyResult('applicationName', 'ApplicationName', properties.ApplicationName != null ? cfn_parse.FromCloudFormation.getString(properties.ApplicationName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnApplicationV2 extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::KinesisAnalyticsV2::Application\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApplicationV2 {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApplicationV2PropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApplicationV2(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                            \n    public runtimeEnvironment: string;\n\n                                                                                                                                                                                                                                                                                                \n    public serviceExecutionRole: string;\n\n                                                                                                                                                                                                                                                                      \n    public applicationConfiguration: CfnApplicationV2.ApplicationConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                       \n    public applicationDescription: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                   \n    public applicationMode: string | undefined;\n\n                                                                                                                                                                                                                                         \n    public applicationName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnApplicationV2Props) {\n        super(scope, id, { type: CfnApplicationV2.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'runtimeEnvironment', this);\n        cdk.requireProperty(props, 'serviceExecutionRole', this);\n\n        this.runtimeEnvironment = props.runtimeEnvironment;\n        this.serviceExecutionRole = props.serviceExecutionRole;\n        this.applicationConfiguration = props.applicationConfiguration;\n        this.applicationDescription = props.applicationDescription;\n        this.applicationMode = props.applicationMode;\n        this.applicationName = props.applicationName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::KinesisAnalyticsV2::Application\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApplicationV2.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            runtimeEnvironment: this.runtimeEnvironment,\n            serviceExecutionRole: this.serviceExecutionRole,\n            applicationConfiguration: this.applicationConfiguration,\n            applicationDescription: this.applicationDescription,\n            applicationMode: this.applicationMode,\n            applicationName: this.applicationName,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApplicationV2PropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                          \n    export interface ApplicationCodeConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                       \n        readonly codeContent: CfnApplicationV2.CodeContentProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly codeContentType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ApplicationCodeConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ApplicationCodeConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_ApplicationCodeConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('codeContent', cdk.requiredValidator)(properties.codeContent));\n    errors.collect(cdk.propertyValidator('codeContent', CfnApplicationV2_CodeContentPropertyValidator)(properties.codeContent));\n    errors.collect(cdk.propertyValidator('codeContentType', cdk.requiredValidator)(properties.codeContentType));\n    errors.collect(cdk.propertyValidator('codeContentType', cdk.validateString)(properties.codeContentType));\n    return errors.wrap('supplied properties not correct for \"ApplicationCodeConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.ApplicationCodeConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ApplicationCodeConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.ApplicationCodeConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2ApplicationCodeConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_ApplicationCodeConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        CodeContent: cfnApplicationV2CodeContentPropertyToCloudFormation(properties.codeContent),\n        CodeContentType: cdk.stringToCloudFormation(properties.codeContentType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2ApplicationCodeConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.ApplicationCodeConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.ApplicationCodeConfigurationProperty>();\n    ret.addPropertyResult('codeContent', 'CodeContent', CfnApplicationV2CodeContentPropertyFromCloudFormation(properties.CodeContent));\n    ret.addPropertyResult('codeContentType', 'CodeContentType', cfn_parse.FromCloudFormation.getString(properties.CodeContentType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                 \n    export interface ApplicationConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly applicationCodeConfiguration?: CfnApplicationV2.ApplicationCodeConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly applicationSnapshotConfiguration?: CfnApplicationV2.ApplicationSnapshotConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                               \n        readonly environmentProperties?: CfnApplicationV2.EnvironmentPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly flinkApplicationConfiguration?: CfnApplicationV2.FlinkApplicationConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly sqlApplicationConfiguration?: CfnApplicationV2.SqlApplicationConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly zeppelinApplicationConfiguration?: CfnApplicationV2.ZeppelinApplicationConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ApplicationConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ApplicationConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_ApplicationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applicationCodeConfiguration', CfnApplicationV2_ApplicationCodeConfigurationPropertyValidator)(properties.applicationCodeConfiguration));\n    errors.collect(cdk.propertyValidator('applicationSnapshotConfiguration', CfnApplicationV2_ApplicationSnapshotConfigurationPropertyValidator)(properties.applicationSnapshotConfiguration));\n    errors.collect(cdk.propertyValidator('environmentProperties', CfnApplicationV2_EnvironmentPropertiesPropertyValidator)(properties.environmentProperties));\n    errors.collect(cdk.propertyValidator('flinkApplicationConfiguration', CfnApplicationV2_FlinkApplicationConfigurationPropertyValidator)(properties.flinkApplicationConfiguration));\n    errors.collect(cdk.propertyValidator('sqlApplicationConfiguration', CfnApplicationV2_SqlApplicationConfigurationPropertyValidator)(properties.sqlApplicationConfiguration));\n    errors.collect(cdk.propertyValidator('zeppelinApplicationConfiguration', CfnApplicationV2_ZeppelinApplicationConfigurationPropertyValidator)(properties.zeppelinApplicationConfiguration));\n    return errors.wrap('supplied properties not correct for \"ApplicationConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.ApplicationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ApplicationConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.ApplicationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2ApplicationConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_ApplicationConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ApplicationCodeConfiguration: cfnApplicationV2ApplicationCodeConfigurationPropertyToCloudFormation(properties.applicationCodeConfiguration),\n        ApplicationSnapshotConfiguration: cfnApplicationV2ApplicationSnapshotConfigurationPropertyToCloudFormation(properties.applicationSnapshotConfiguration),\n        EnvironmentProperties: cfnApplicationV2EnvironmentPropertiesPropertyToCloudFormation(properties.environmentProperties),\n        FlinkApplicationConfiguration: cfnApplicationV2FlinkApplicationConfigurationPropertyToCloudFormation(properties.flinkApplicationConfiguration),\n        SqlApplicationConfiguration: cfnApplicationV2SqlApplicationConfigurationPropertyToCloudFormation(properties.sqlApplicationConfiguration),\n        ZeppelinApplicationConfiguration: cfnApplicationV2ZeppelinApplicationConfigurationPropertyToCloudFormation(properties.zeppelinApplicationConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2ApplicationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.ApplicationConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.ApplicationConfigurationProperty>();\n    ret.addPropertyResult('applicationCodeConfiguration', 'ApplicationCodeConfiguration', properties.ApplicationCodeConfiguration != null ? CfnApplicationV2ApplicationCodeConfigurationPropertyFromCloudFormation(properties.ApplicationCodeConfiguration) : undefined);\n    ret.addPropertyResult('applicationSnapshotConfiguration', 'ApplicationSnapshotConfiguration', properties.ApplicationSnapshotConfiguration != null ? CfnApplicationV2ApplicationSnapshotConfigurationPropertyFromCloudFormation(properties.ApplicationSnapshotConfiguration) : undefined);\n    ret.addPropertyResult('environmentProperties', 'EnvironmentProperties', properties.EnvironmentProperties != null ? CfnApplicationV2EnvironmentPropertiesPropertyFromCloudFormation(properties.EnvironmentProperties) : undefined);\n    ret.addPropertyResult('flinkApplicationConfiguration', 'FlinkApplicationConfiguration', properties.FlinkApplicationConfiguration != null ? CfnApplicationV2FlinkApplicationConfigurationPropertyFromCloudFormation(properties.FlinkApplicationConfiguration) : undefined);\n    ret.addPropertyResult('sqlApplicationConfiguration', 'SqlApplicationConfiguration', properties.SqlApplicationConfiguration != null ? CfnApplicationV2SqlApplicationConfigurationPropertyFromCloudFormation(properties.SqlApplicationConfiguration) : undefined);\n    ret.addPropertyResult('zeppelinApplicationConfiguration', 'ZeppelinApplicationConfiguration', properties.ZeppelinApplicationConfiguration != null ? CfnApplicationV2ZeppelinApplicationConfigurationPropertyFromCloudFormation(properties.ZeppelinApplicationConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                           \n    export interface ApplicationSnapshotConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly snapshotsEnabled: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ApplicationSnapshotConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ApplicationSnapshotConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_ApplicationSnapshotConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('snapshotsEnabled', cdk.requiredValidator)(properties.snapshotsEnabled));\n    errors.collect(cdk.propertyValidator('snapshotsEnabled', cdk.validateBoolean)(properties.snapshotsEnabled));\n    return errors.wrap('supplied properties not correct for \"ApplicationSnapshotConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.ApplicationSnapshotConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ApplicationSnapshotConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.ApplicationSnapshotConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2ApplicationSnapshotConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_ApplicationSnapshotConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        SnapshotsEnabled: cdk.booleanToCloudFormation(properties.snapshotsEnabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2ApplicationSnapshotConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.ApplicationSnapshotConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.ApplicationSnapshotConfigurationProperty>();\n    ret.addPropertyResult('snapshotsEnabled', 'SnapshotsEnabled', cfn_parse.FromCloudFormation.getBoolean(properties.SnapshotsEnabled));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\nn    export interface CSVMappingParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly recordColumnDelimiter: string;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly recordRowDelimiter: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CSVMappingParametersProperty`\n *\n * @param properties - the TypeScript properties of a `CSVMappingParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_CSVMappingParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('recordColumnDelimiter', cdk.requiredValidator)(properties.recordColumnDelimiter));\n    errors.collect(cdk.propertyValidator('recordColumnDelimiter', cdk.validateString)(properties.recordColumnDelimiter));\n    errors.collect(cdk.propertyValidator('recordRowDelimiter', cdk.requiredValidator)(properties.recordRowDelimiter));\n    errors.collect(cdk.propertyValidator('recordRowDelimiter', cdk.validateString)(properties.recordRowDelimiter));\n    return errors.wrap('supplied properties not correct for \"CSVMappingParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.CSVMappingParameters` resource\n *\n * @param properties - the TypeScript properties of a `CSVMappingParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.CSVMappingParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2CSVMappingParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_CSVMappingParametersPropertyValidator(properties).assertSuccess();\n    return {\n        RecordColumnDelimiter: cdk.stringToCloudFormation(properties.recordColumnDelimiter),\n        RecordRowDelimiter: cdk.stringToCloudFormation(properties.recordRowDelimiter),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2CSVMappingParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.CSVMappingParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.CSVMappingParametersProperty>();\n    ret.addPropertyResult('recordColumnDelimiter', 'RecordColumnDelimiter', cfn_parse.FromCloudFormation.getString(properties.RecordColumnDelimiter));\n    ret.addPropertyResult('recordRowDelimiter', 'RecordRowDelimiter', cfn_parse.FromCloudFormation.getString(properties.RecordRowDelimiter));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface CatalogConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly glueDataCatalogConfiguration?: CfnApplicationV2.GlueDataCatalogConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CatalogConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `CatalogConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_CatalogConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('glueDataCatalogConfiguration', CfnApplicationV2_GlueDataCatalogConfigurationPropertyValidator)(properties.glueDataCatalogConfiguration));\n    return errors.wrap('supplied properties not correct for \"CatalogConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.CatalogConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CatalogConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.CatalogConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2CatalogConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_CatalogConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        GlueDataCatalogConfiguration: cfnApplicationV2GlueDataCatalogConfigurationPropertyToCloudFormation(properties.glueDataCatalogConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2CatalogConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.CatalogConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.CatalogConfigurationProperty>();\n    ret.addPropertyResult('glueDataCatalogConfiguration', 'GlueDataCatalogConfiguration', properties.GlueDataCatalogConfiguration != null ? CfnApplicationV2GlueDataCatalogConfigurationPropertyFromCloudFormation(properties.GlueDataCatalogConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\nn    export interface CheckpointConfigurationProperty {\nn        readonly checkpointInterval?: number;\nn        readonly checkpointingEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly configurationType: string;\nn        readonly minPauseBetweenCheckpoints?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CheckpointConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `CheckpointConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_CheckpointConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('checkpointInterval', cdk.validateNumber)(properties.checkpointInterval));\n    errors.collect(cdk.propertyValidator('checkpointingEnabled', cdk.validateBoolean)(properties.checkpointingEnabled));\n    errors.collect(cdk.propertyValidator('configurationType', cdk.requiredValidator)(properties.configurationType));\n    errors.collect(cdk.propertyValidator('configurationType', cdk.validateString)(properties.configurationType));\n    errors.collect(cdk.propertyValidator('minPauseBetweenCheckpoints', cdk.validateNumber)(properties.minPauseBetweenCheckpoints));\n    return errors.wrap('supplied properties not correct for \"CheckpointConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.CheckpointConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CheckpointConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.CheckpointConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2CheckpointConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_CheckpointConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        CheckpointInterval: cdk.numberToCloudFormation(properties.checkpointInterval),\n        CheckpointingEnabled: cdk.booleanToCloudFormation(properties.checkpointingEnabled),\n        ConfigurationType: cdk.stringToCloudFormation(properties.configurationType),\n        MinPauseBetweenCheckpoints: cdk.numberToCloudFormation(properties.minPauseBetweenCheckpoints),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2CheckpointConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.CheckpointConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.CheckpointConfigurationProperty>();\n    ret.addPropertyResult('checkpointInterval', 'CheckpointInterval', properties.CheckpointInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.CheckpointInterval) : undefined);\n    ret.addPropertyResult('checkpointingEnabled', 'CheckpointingEnabled', properties.CheckpointingEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CheckpointingEnabled) : undefined);\n    ret.addPropertyResult('configurationType', 'ConfigurationType', cfn_parse.FromCloudFormation.getString(properties.ConfigurationType));\n    ret.addPropertyResult('minPauseBetweenCheckpoints', 'MinPauseBetweenCheckpoints', properties.MinPauseBetweenCheckpoints != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinPauseBetweenCheckpoints) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                              \n    export interface CodeContentProperty {\n                                                                                                                                                                                                                                                                                                                                       \n        readonly s3ContentLocation?: CfnApplicationV2.S3ContentLocationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly textContent?: string;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly zipFileContent?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CodeContentProperty`\n *\n * @param properties - the TypeScript properties of a `CodeContentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_CodeContentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3ContentLocation', CfnApplicationV2_S3ContentLocationPropertyValidator)(properties.s3ContentLocation));\n    errors.collect(cdk.propertyValidator('textContent', cdk.validateString)(properties.textContent));\n    errors.collect(cdk.propertyValidator('zipFileContent', cdk.validateString)(properties.zipFileContent));\n    return errors.wrap('supplied properties not correct for \"CodeContentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.CodeContent` resource\n *\n * @param properties - the TypeScript properties of a `CodeContentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.CodeContent` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2CodeContentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_CodeContentPropertyValidator(properties).assertSuccess();\n    return {\n        S3ContentLocation: cfnApplicationV2S3ContentLocationPropertyToCloudFormation(properties.s3ContentLocation),\n        TextContent: cdk.stringToCloudFormation(properties.textContent),\n        ZipFileContent: cdk.stringToCloudFormation(properties.zipFileContent),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2CodeContentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.CodeContentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.CodeContentProperty>();\n    ret.addPropertyResult('s3ContentLocation', 'S3ContentLocation', properties.S3ContentLocation != null ? CfnApplicationV2S3ContentLocationPropertyFromCloudFormation(properties.S3ContentLocation) : undefined);\n    ret.addPropertyResult('textContent', 'TextContent', properties.TextContent != null ? cfn_parse.FromCloudFormation.getString(properties.TextContent) : undefined);\n    ret.addPropertyResult('zipFileContent', 'ZipFileContent', properties.ZipFileContent != null ? cfn_parse.FromCloudFormation.getString(properties.ZipFileContent) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                    \n    export interface CustomArtifactConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly artifactType: string;\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly mavenReference?: CfnApplicationV2.MavenReferenceProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly s3ContentLocation?: CfnApplicationV2.S3ContentLocationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomArtifactConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `CustomArtifactConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_CustomArtifactConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('artifactType', cdk.requiredValidator)(properties.artifactType));\n    errors.collect(cdk.propertyValidator('artifactType', cdk.validateString)(properties.artifactType));\n    errors.collect(cdk.propertyValidator('mavenReference', CfnApplicationV2_MavenReferencePropertyValidator)(properties.mavenReference));\n    errors.collect(cdk.propertyValidator('s3ContentLocation', CfnApplicationV2_S3ContentLocationPropertyValidator)(properties.s3ContentLocation));\n    return errors.wrap('supplied properties not correct for \"CustomArtifactConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.CustomArtifactConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CustomArtifactConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.CustomArtifactConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2CustomArtifactConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_CustomArtifactConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ArtifactType: cdk.stringToCloudFormation(properties.artifactType),\n        MavenReference: cfnApplicationV2MavenReferencePropertyToCloudFormation(properties.mavenReference),\n        S3ContentLocation: cfnApplicationV2S3ContentLocationPropertyToCloudFormation(properties.s3ContentLocation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2CustomArtifactConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.CustomArtifactConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.CustomArtifactConfigurationProperty>();\n    ret.addPropertyResult('artifactType', 'ArtifactType', cfn_parse.FromCloudFormation.getString(properties.ArtifactType));\n    ret.addPropertyResult('mavenReference', 'MavenReference', properties.MavenReference != null ? CfnApplicationV2MavenReferencePropertyFromCloudFormation(properties.MavenReference) : undefined);\n    ret.addPropertyResult('s3ContentLocation', 'S3ContentLocation', properties.S3ContentLocation != null ? CfnApplicationV2S3ContentLocationPropertyFromCloudFormation(properties.S3ContentLocation) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                               \n    export interface DeployAsApplicationConfigurationProperty {\nn        readonly s3ContentLocation: CfnApplicationV2.S3ContentBaseLocationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeployAsApplicationConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `DeployAsApplicationConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_DeployAsApplicationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3ContentLocation', cdk.requiredValidator)(properties.s3ContentLocation));\n    errors.collect(cdk.propertyValidator('s3ContentLocation', CfnApplicationV2_S3ContentBaseLocationPropertyValidator)(properties.s3ContentLocation));\n    return errors.wrap('supplied properties not correct for \"DeployAsApplicationConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.DeployAsApplicationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `DeployAsApplicationConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.DeployAsApplicationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2DeployAsApplicationConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_DeployAsApplicationConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        S3ContentLocation: cfnApplicationV2S3ContentBaseLocationPropertyToCloudFormation(properties.s3ContentLocation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2DeployAsApplicationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.DeployAsApplicationConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.DeployAsApplicationConfigurationProperty>();\n    ret.addPropertyResult('s3ContentLocation', 'S3ContentLocation', CfnApplicationV2S3ContentBaseLocationPropertyFromCloudFormation(properties.S3ContentLocation));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                       \n    export interface EnvironmentPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                      \n        readonly propertyGroups?: Array<CfnApplicationV2.PropertyGroupProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EnvironmentPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `EnvironmentPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_EnvironmentPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('propertyGroups', cdk.listValidator(CfnApplicationV2_PropertyGroupPropertyValidator))(properties.propertyGroups));\n    return errors.wrap('supplied properties not correct for \"EnvironmentPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.EnvironmentProperties` resource\n *\n * @param properties - the TypeScript properties of a `EnvironmentPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.EnvironmentProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2EnvironmentPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_EnvironmentPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        PropertyGroups: cdk.listMapper(cfnApplicationV2PropertyGroupPropertyToCloudFormation)(properties.propertyGroups),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2EnvironmentPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.EnvironmentPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.EnvironmentPropertiesProperty>();\n    ret.addPropertyResult('propertyGroups', 'PropertyGroups', properties.PropertyGroups != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationV2PropertyGroupPropertyFromCloudFormation)(properties.PropertyGroups) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                        \n    export interface FlinkApplicationConfigurationProperty {\nn        readonly checkpointConfiguration?: CfnApplicationV2.CheckpointConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly monitoringConfiguration?: CfnApplicationV2.MonitoringConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly parallelismConfiguration?: CfnApplicationV2.ParallelismConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FlinkApplicationConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `FlinkApplicationConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_FlinkApplicationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('checkpointConfiguration', CfnApplicationV2_CheckpointConfigurationPropertyValidator)(properties.checkpointConfiguration));\n    errors.collect(cdk.propertyValidator('monitoringConfiguration', CfnApplicationV2_MonitoringConfigurationPropertyValidator)(properties.monitoringConfiguration));\n    errors.collect(cdk.propertyValidator('parallelismConfiguration', CfnApplicationV2_ParallelismConfigurationPropertyValidator)(properties.parallelismConfiguration));\n    return errors.wrap('supplied properties not correct for \"FlinkApplicationConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.FlinkApplicationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `FlinkApplicationConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.FlinkApplicationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2FlinkApplicationConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_FlinkApplicationConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        CheckpointConfiguration: cfnApplicationV2CheckpointConfigurationPropertyToCloudFormation(properties.checkpointConfiguration),\n        MonitoringConfiguration: cfnApplicationV2MonitoringConfigurationPropertyToCloudFormation(properties.monitoringConfiguration),\n        ParallelismConfiguration: cfnApplicationV2ParallelismConfigurationPropertyToCloudFormation(properties.parallelismConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2FlinkApplicationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.FlinkApplicationConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.FlinkApplicationConfigurationProperty>();\n    ret.addPropertyResult('checkpointConfiguration', 'CheckpointConfiguration', properties.CheckpointConfiguration != null ? CfnApplicationV2CheckpointConfigurationPropertyFromCloudFormation(properties.CheckpointConfiguration) : undefined);\n    ret.addPropertyResult('monitoringConfiguration', 'MonitoringConfiguration', properties.MonitoringConfiguration != null ? CfnApplicationV2MonitoringConfigurationPropertyFromCloudFormation(properties.MonitoringConfiguration) : undefined);\n    ret.addPropertyResult('parallelismConfiguration', 'ParallelismConfiguration', properties.ParallelismConfiguration != null ? CfnApplicationV2ParallelismConfigurationPropertyFromCloudFormation(properties.ParallelismConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface GlueDataCatalogConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                        \n        readonly databaseArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GlueDataCatalogConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `GlueDataCatalogConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_GlueDataCatalogConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('databaseArn', cdk.validateString)(properties.databaseArn));\n    return errors.wrap('supplied properties not correct for \"GlueDataCatalogConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.GlueDataCatalogConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `GlueDataCatalogConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.GlueDataCatalogConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2GlueDataCatalogConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_GlueDataCatalogConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        DatabaseARN: cdk.stringToCloudFormation(properties.databaseArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2GlueDataCatalogConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.GlueDataCatalogConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.GlueDataCatalogConfigurationProperty>();\n    ret.addPropertyResult('databaseArn', 'DatabaseARN', properties.DatabaseARN != null ? cfn_parse.FromCloudFormation.getString(properties.DatabaseARN) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface InputProperty {\n                                                                                                                                                                                                                                                                                                         \n        readonly inputParallelism?: CfnApplicationV2.InputParallelismProperty | cdk.IResolvable;\nn        readonly inputProcessingConfiguration?: CfnApplicationV2.InputProcessingConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly inputSchema: CfnApplicationV2.InputSchemaProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly kinesisFirehoseInput?: CfnApplicationV2.KinesisFirehoseInputProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly kinesisStreamsInput?: CfnApplicationV2.KinesisStreamsInputProperty | cdk.IResolvable;\nn        readonly namePrefix: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputProperty`\n *\n * @param properties - the TypeScript properties of a `InputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_InputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('inputParallelism', CfnApplicationV2_InputParallelismPropertyValidator)(properties.inputParallelism));\n    errors.collect(cdk.propertyValidator('inputProcessingConfiguration', CfnApplicationV2_InputProcessingConfigurationPropertyValidator)(properties.inputProcessingConfiguration));\n    errors.collect(cdk.propertyValidator('inputSchema', cdk.requiredValidator)(properties.inputSchema));\n    errors.collect(cdk.propertyValidator('inputSchema', CfnApplicationV2_InputSchemaPropertyValidator)(properties.inputSchema));\n    errors.collect(cdk.propertyValidator('kinesisFirehoseInput', CfnApplicationV2_KinesisFirehoseInputPropertyValidator)(properties.kinesisFirehoseInput));\n    errors.collect(cdk.propertyValidator('kinesisStreamsInput', CfnApplicationV2_KinesisStreamsInputPropertyValidator)(properties.kinesisStreamsInput));\n    errors.collect(cdk.propertyValidator('namePrefix', cdk.requiredValidator)(properties.namePrefix));\n    errors.collect(cdk.propertyValidator('namePrefix', cdk.validateString)(properties.namePrefix));\n    return errors.wrap('supplied properties not correct for \"InputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.Input` resource\n *\n * @param properties - the TypeScript properties of a `InputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.Input` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2InputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_InputPropertyValidator(properties).assertSuccess();\n    return {\n        InputParallelism: cfnApplicationV2InputParallelismPropertyToCloudFormation(properties.inputParallelism),\n        InputProcessingConfiguration: cfnApplicationV2InputProcessingConfigurationPropertyToCloudFormation(properties.inputProcessingConfiguration),\n        InputSchema: cfnApplicationV2InputSchemaPropertyToCloudFormation(properties.inputSchema),\n        KinesisFirehoseInput: cfnApplicationV2KinesisFirehoseInputPropertyToCloudFormation(properties.kinesisFirehoseInput),\n        KinesisStreamsInput: cfnApplicationV2KinesisStreamsInputPropertyToCloudFormation(properties.kinesisStreamsInput),\n        NamePrefix: cdk.stringToCloudFormation(properties.namePrefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2InputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.InputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.InputProperty>();\n    ret.addPropertyResult('inputParallelism', 'InputParallelism', properties.InputParallelism != null ? CfnApplicationV2InputParallelismPropertyFromCloudFormation(properties.InputParallelism) : undefined);\n    ret.addPropertyResult('inputProcessingConfiguration', 'InputProcessingConfiguration', properties.InputProcessingConfiguration != null ? CfnApplicationV2InputProcessingConfigurationPropertyFromCloudFormation(properties.InputProcessingConfiguration) : undefined);\n    ret.addPropertyResult('inputSchema', 'InputSchema', CfnApplicationV2InputSchemaPropertyFromCloudFormation(properties.InputSchema));\n    ret.addPropertyResult('kinesisFirehoseInput', 'KinesisFirehoseInput', properties.KinesisFirehoseInput != null ? CfnApplicationV2KinesisFirehoseInputPropertyFromCloudFormation(properties.KinesisFirehoseInput) : undefined);\n    ret.addPropertyResult('kinesisStreamsInput', 'KinesisStreamsInput', properties.KinesisStreamsInput != null ? CfnApplicationV2KinesisStreamsInputPropertyFromCloudFormation(properties.KinesisStreamsInput) : undefined);\n    ret.addPropertyResult('namePrefix', 'NamePrefix', cfn_parse.FromCloudFormation.getString(properties.NamePrefix));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface InputLambdaProcessorProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly resourceArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputLambdaProcessorProperty`\n *\n * @param properties - the TypeScript properties of a `InputLambdaProcessorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_InputLambdaProcessorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.requiredValidator)(properties.resourceArn));\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.validateString)(properties.resourceArn));\n    return errors.wrap('supplied properties not correct for \"InputLambdaProcessorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.InputLambdaProcessor` resource\n *\n * @param properties - the TypeScript properties of a `InputLambdaProcessorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.InputLambdaProcessor` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2InputLambdaProcessorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_InputLambdaProcessorPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceARN: cdk.stringToCloudFormation(properties.resourceArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2InputLambdaProcessorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.InputLambdaProcessorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.InputLambdaProcessorProperty>();\n    ret.addPropertyResult('resourceArn', 'ResourceARN', cfn_parse.FromCloudFormation.getString(properties.ResourceARN));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                                        \n    export interface InputParallelismProperty {\n                                                                                                                                                                                                                                                                                                          \n        readonly count?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputParallelismProperty`\n *\n * @param properties - the TypeScript properties of a `InputParallelismProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_InputParallelismPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('count', cdk.validateNumber)(properties.count));\n    return errors.wrap('supplied properties not correct for \"InputParallelismProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.InputParallelism` resource\n *\n * @param properties - the TypeScript properties of a `InputParallelismProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.InputParallelism` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2InputParallelismPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_InputParallelismPropertyValidator(properties).assertSuccess();\n    return {\n        Count: cdk.numberToCloudFormation(properties.count),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2InputParallelismPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.InputParallelismProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.InputParallelismProperty>();\n    ret.addPropertyResult('count', 'Count', properties.Count != null ? cfn_parse.FromCloudFormation.getNumber(properties.Count) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\nn    export interface InputProcessingConfigurationProperty {\nn        readonly inputLambdaProcessor?: CfnApplicationV2.InputLambdaProcessorProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputProcessingConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `InputProcessingConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_InputProcessingConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('inputLambdaProcessor', CfnApplicationV2_InputLambdaProcessorPropertyValidator)(properties.inputLambdaProcessor));\n    return errors.wrap('supplied properties not correct for \"InputProcessingConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.InputProcessingConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `InputProcessingConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.InputProcessingConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2InputProcessingConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_InputProcessingConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        InputLambdaProcessor: cfnApplicationV2InputLambdaProcessorPropertyToCloudFormation(properties.inputLambdaProcessor),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2InputProcessingConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.InputProcessingConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.InputProcessingConfigurationProperty>();\n    ret.addPropertyResult('inputLambdaProcessor', 'InputLambdaProcessor', properties.InputLambdaProcessor != null ? CfnApplicationV2InputLambdaProcessorPropertyFromCloudFormation(properties.InputLambdaProcessor) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface InputSchemaProperty {\n                                                                                                                                                                                                                                                                                          \n        readonly recordColumns: Array<CfnApplicationV2.RecordColumnProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly recordEncoding?: string;\n                                                                                                                                                                                                                                                                                                                    \n        readonly recordFormat: CfnApplicationV2.RecordFormatProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputSchemaProperty`\n *\n * @param properties - the TypeScript properties of a `InputSchemaProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_InputSchemaPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('recordColumns', cdk.requiredValidator)(properties.recordColumns));\n    errors.collect(cdk.propertyValidator('recordColumns', cdk.listValidator(CfnApplicationV2_RecordColumnPropertyValidator))(properties.recordColumns));\n    errors.collect(cdk.propertyValidator('recordEncoding', cdk.validateString)(properties.recordEncoding));\n    errors.collect(cdk.propertyValidator('recordFormat', cdk.requiredValidator)(properties.recordFormat));\n    errors.collect(cdk.propertyValidator('recordFormat', CfnApplicationV2_RecordFormatPropertyValidator)(properties.recordFormat));\n    return errors.wrap('supplied properties not correct for \"InputSchemaProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.InputSchema` resource\n *\n * @param properties - the TypeScript properties of a `InputSchemaProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.InputSchema` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2InputSchemaPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_InputSchemaPropertyValidator(properties).assertSuccess();\n    return {\n        RecordColumns: cdk.listMapper(cfnApplicationV2RecordColumnPropertyToCloudFormation)(properties.recordColumns),\n        RecordEncoding: cdk.stringToCloudFormation(properties.recordEncoding),\n        RecordFormat: cfnApplicationV2RecordFormatPropertyToCloudFormation(properties.recordFormat),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2InputSchemaPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.InputSchemaProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.InputSchemaProperty>();\n    ret.addPropertyResult('recordColumns', 'RecordColumns', cfn_parse.FromCloudFormation.getArray(CfnApplicationV2RecordColumnPropertyFromCloudFormation)(properties.RecordColumns));\n    ret.addPropertyResult('recordEncoding', 'RecordEncoding', properties.RecordEncoding != null ? cfn_parse.FromCloudFormation.getString(properties.RecordEncoding) : undefined);\n    ret.addPropertyResult('recordFormat', 'RecordFormat', CfnApplicationV2RecordFormatPropertyFromCloudFormation(properties.RecordFormat));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface JSONMappingParametersProperty {\n                                                                                                                                                                                                                                                                                                                                        \n        readonly recordRowPath: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `JSONMappingParametersProperty`\n *\n * @param properties - the TypeScript properties of a `JSONMappingParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_JSONMappingParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('recordRowPath', cdk.requiredValidator)(properties.recordRowPath));\n    errors.collect(cdk.propertyValidator('recordRowPath', cdk.validateString)(properties.recordRowPath));\n    return errors.wrap('supplied properties not correct for \"JSONMappingParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.JSONMappingParameters` resource\n *\n * @param properties - the TypeScript properties of a `JSONMappingParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.JSONMappingParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2JSONMappingParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_JSONMappingParametersPropertyValidator(properties).assertSuccess();\n    return {\n        RecordRowPath: cdk.stringToCloudFormation(properties.recordRowPath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2JSONMappingParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.JSONMappingParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.JSONMappingParametersProperty>();\n    ret.addPropertyResult('recordRowPath', 'RecordRowPath', cfn_parse.FromCloudFormation.getString(properties.RecordRowPath));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface KinesisFirehoseInputProperty {\n                                                                                                                                                                                                                                                                                                                               \n        readonly resourceArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KinesisFirehoseInputProperty`\n *\n * @param properties - the TypeScript properties of a `KinesisFirehoseInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_KinesisFirehoseInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.requiredValidator)(properties.resourceArn));\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.validateString)(properties.resourceArn));\n    return errors.wrap('supplied properties not correct for \"KinesisFirehoseInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.KinesisFirehoseInput` resource\n *\n * @param properties - the TypeScript properties of a `KinesisFirehoseInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.KinesisFirehoseInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2KinesisFirehoseInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_KinesisFirehoseInputPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceARN: cdk.stringToCloudFormation(properties.resourceArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2KinesisFirehoseInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.KinesisFirehoseInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.KinesisFirehoseInputProperty>();\n    ret.addPropertyResult('resourceArn', 'ResourceARN', cfn_parse.FromCloudFormation.getString(properties.ResourceARN));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                               \n    export interface KinesisStreamsInputProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly resourceArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KinesisStreamsInputProperty`\n *\n * @param properties - the TypeScript properties of a `KinesisStreamsInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_KinesisStreamsInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.requiredValidator)(properties.resourceArn));\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.validateString)(properties.resourceArn));\n    return errors.wrap('supplied properties not correct for \"KinesisStreamsInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.KinesisStreamsInput` resource\n *\n * @param properties - the TypeScript properties of a `KinesisStreamsInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.KinesisStreamsInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2KinesisStreamsInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_KinesisStreamsInputPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceARN: cdk.stringToCloudFormation(properties.resourceArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2KinesisStreamsInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.KinesisStreamsInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.KinesisStreamsInputProperty>();\n    ret.addPropertyResult('resourceArn', 'ResourceARN', cfn_parse.FromCloudFormation.getString(properties.ResourceARN));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\nn    export interface MappingParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly csvMappingParameters?: CfnApplicationV2.CSVMappingParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly jsonMappingParameters?: CfnApplicationV2.JSONMappingParametersProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MappingParametersProperty`\n *\n * @param properties - the TypeScript properties of a `MappingParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_MappingParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('csvMappingParameters', CfnApplicationV2_CSVMappingParametersPropertyValidator)(properties.csvMappingParameters));\n    errors.collect(cdk.propertyValidator('jsonMappingParameters', CfnApplicationV2_JSONMappingParametersPropertyValidator)(properties.jsonMappingParameters));\n    return errors.wrap('supplied properties not correct for \"MappingParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.MappingParameters` resource\n *\n * @param properties - the TypeScript properties of a `MappingParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.MappingParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2MappingParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_MappingParametersPropertyValidator(properties).assertSuccess();\n    return {\n        CSVMappingParameters: cfnApplicationV2CSVMappingParametersPropertyToCloudFormation(properties.csvMappingParameters),\n        JSONMappingParameters: cfnApplicationV2JSONMappingParametersPropertyToCloudFormation(properties.jsonMappingParameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2MappingParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.MappingParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.MappingParametersProperty>();\n    ret.addPropertyResult('csvMappingParameters', 'CSVMappingParameters', properties.CSVMappingParameters != null ? CfnApplicationV2CSVMappingParametersPropertyFromCloudFormation(properties.CSVMappingParameters) : undefined);\n    ret.addPropertyResult('jsonMappingParameters', 'JSONMappingParameters', properties.JSONMappingParameters != null ? CfnApplicationV2JSONMappingParametersPropertyFromCloudFormation(properties.JSONMappingParameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                \n    export interface MavenReferenceProperty {\n                                                                                                                                                                                                                                                                                                   \n        readonly artifactId: string;\n                                                                                                                                                                                                                                                                                             \n        readonly groupId: string;\n                                                                                                                                                                                                                                                                                            \n        readonly version: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MavenReferenceProperty`\n *\n * @param properties - the TypeScript properties of a `MavenReferenceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_MavenReferencePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('artifactId', cdk.requiredValidator)(properties.artifactId));\n    errors.collect(cdk.propertyValidator('artifactId', cdk.validateString)(properties.artifactId));\n    errors.collect(cdk.propertyValidator('groupId', cdk.requiredValidator)(properties.groupId));\n    errors.collect(cdk.propertyValidator('groupId', cdk.validateString)(properties.groupId));\n    errors.collect(cdk.propertyValidator('version', cdk.requiredValidator)(properties.version));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"MavenReferenceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.MavenReference` resource\n *\n * @param properties - the TypeScript properties of a `MavenReferenceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.MavenReference` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2MavenReferencePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_MavenReferencePropertyValidator(properties).assertSuccess();\n    return {\n        ArtifactId: cdk.stringToCloudFormation(properties.artifactId),\n        GroupId: cdk.stringToCloudFormation(properties.groupId),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2MavenReferencePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.MavenReferenceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.MavenReferenceProperty>();\n    ret.addPropertyResult('artifactId', 'ArtifactId', cfn_parse.FromCloudFormation.getString(properties.ArtifactId));\n    ret.addPropertyResult('groupId', 'GroupId', cfn_parse.FromCloudFormation.getString(properties.GroupId));\n    ret.addPropertyResult('version', 'Version', cfn_parse.FromCloudFormation.getString(properties.Version));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface MonitoringConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly configurationType: string;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly logLevel?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly metricsLevel?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_MonitoringConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('configurationType', cdk.requiredValidator)(properties.configurationType));\n    errors.collect(cdk.propertyValidator('configurationType', cdk.validateString)(properties.configurationType));\n    errors.collect(cdk.propertyValidator('logLevel', cdk.validateString)(properties.logLevel));\n    errors.collect(cdk.propertyValidator('metricsLevel', cdk.validateString)(properties.metricsLevel));\n    return errors.wrap('supplied properties not correct for \"MonitoringConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.MonitoringConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.MonitoringConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2MonitoringConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_MonitoringConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ConfigurationType: cdk.stringToCloudFormation(properties.configurationType),\n        LogLevel: cdk.stringToCloudFormation(properties.logLevel),\n        MetricsLevel: cdk.stringToCloudFormation(properties.metricsLevel),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2MonitoringConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.MonitoringConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.MonitoringConfigurationProperty>();\n    ret.addPropertyResult('configurationType', 'ConfigurationType', cfn_parse.FromCloudFormation.getString(properties.ConfigurationType));\n    ret.addPropertyResult('logLevel', 'LogLevel', properties.LogLevel != null ? cfn_parse.FromCloudFormation.getString(properties.LogLevel) : undefined);\n    ret.addPropertyResult('metricsLevel', 'MetricsLevel', properties.MetricsLevel != null ? cfn_parse.FromCloudFormation.getString(properties.MetricsLevel) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\nn    export interface ParallelismConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly autoScalingEnabled?: boolean | cdk.IResolvable;\nn        readonly configurationType: string;\nn        readonly parallelism?: number;\nn        readonly parallelismPerKpu?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ParallelismConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ParallelismConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_ParallelismConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoScalingEnabled', cdk.validateBoolean)(properties.autoScalingEnabled));\n    errors.collect(cdk.propertyValidator('configurationType', cdk.requiredValidator)(properties.configurationType));\n    errors.collect(cdk.propertyValidator('configurationType', cdk.validateString)(properties.configurationType));\n    errors.collect(cdk.propertyValidator('parallelism', cdk.validateNumber)(properties.parallelism));\n    errors.collect(cdk.propertyValidator('parallelismPerKpu', cdk.validateNumber)(properties.parallelismPerKpu));\n    return errors.wrap('supplied properties not correct for \"ParallelismConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.ParallelismConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ParallelismConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.ParallelismConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2ParallelismConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_ParallelismConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AutoScalingEnabled: cdk.booleanToCloudFormation(properties.autoScalingEnabled),\n        ConfigurationType: cdk.stringToCloudFormation(properties.configurationType),\n        Parallelism: cdk.numberToCloudFormation(properties.parallelism),\n        ParallelismPerKPU: cdk.numberToCloudFormation(properties.parallelismPerKpu),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2ParallelismConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.ParallelismConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.ParallelismConfigurationProperty>();\n    ret.addPropertyResult('autoScalingEnabled', 'AutoScalingEnabled', properties.AutoScalingEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoScalingEnabled) : undefined);\n    ret.addPropertyResult('configurationType', 'ConfigurationType', cfn_parse.FromCloudFormation.getString(properties.ConfigurationType));\n    ret.addPropertyResult('parallelism', 'Parallelism', properties.Parallelism != null ? cfn_parse.FromCloudFormation.getNumber(properties.Parallelism) : undefined);\n    ret.addPropertyResult('parallelismPerKpu', 'ParallelismPerKPU', properties.ParallelismPerKPU != null ? cfn_parse.FromCloudFormation.getNumber(properties.ParallelismPerKPU) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                               \n    export interface PropertyGroupProperty {\n                                                                                                                                                                                                                                                                                                                                     \n        readonly propertyGroupId?: string;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly propertyMap?: any | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PropertyGroupProperty`\n *\n * @param properties - the TypeScript properties of a `PropertyGroupProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_PropertyGroupPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('propertyGroupId', cdk.validateString)(properties.propertyGroupId));\n    errors.collect(cdk.propertyValidator('propertyMap', cdk.validateObject)(properties.propertyMap));\n    return errors.wrap('supplied properties not correct for \"PropertyGroupProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.PropertyGroup` resource\n *\n * @param properties - the TypeScript properties of a `PropertyGroupProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.PropertyGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2PropertyGroupPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_PropertyGroupPropertyValidator(properties).assertSuccess();\n    return {\n        PropertyGroupId: cdk.stringToCloudFormation(properties.propertyGroupId),\n        PropertyMap: cdk.objectToCloudFormation(properties.propertyMap),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2PropertyGroupPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.PropertyGroupProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.PropertyGroupProperty>();\n    ret.addPropertyResult('propertyGroupId', 'PropertyGroupId', properties.PropertyGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.PropertyGroupId) : undefined);\n    ret.addPropertyResult('propertyMap', 'PropertyMap', properties.PropertyMap != null ? cfn_parse.FromCloudFormation.getAny(properties.PropertyMap) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface RecordColumnProperty {\n                                                                                                                                                                                                                                                                                                                                         \n        readonly mapping?: string;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly sqlType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RecordColumnProperty`\n *\n * @param properties - the TypeScript properties of a `RecordColumnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_RecordColumnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('mapping', cdk.validateString)(properties.mapping));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('sqlType', cdk.requiredValidator)(properties.sqlType));\n    errors.collect(cdk.propertyValidator('sqlType', cdk.validateString)(properties.sqlType));\n    return errors.wrap('supplied properties not correct for \"RecordColumnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.RecordColumn` resource\n *\n * @param properties - the TypeScript properties of a `RecordColumnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.RecordColumn` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2RecordColumnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_RecordColumnPropertyValidator(properties).assertSuccess();\n    return {\n        Mapping: cdk.stringToCloudFormation(properties.mapping),\n        Name: cdk.stringToCloudFormation(properties.name),\n        SqlType: cdk.stringToCloudFormation(properties.sqlType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2RecordColumnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.RecordColumnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.RecordColumnProperty>();\n    ret.addPropertyResult('mapping', 'Mapping', properties.Mapping != null ? cfn_parse.FromCloudFormation.getString(properties.Mapping) : undefined);\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('sqlType', 'SqlType', cfn_parse.FromCloudFormation.getString(properties.SqlType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface RecordFormatProperty {\nn        readonly mappingParameters?: CfnApplicationV2.MappingParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                        \n        readonly recordFormatType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RecordFormatProperty`\n *\n * @param properties - the TypeScript properties of a `RecordFormatProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_RecordFormatPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('mappingParameters', CfnApplicationV2_MappingParametersPropertyValidator)(properties.mappingParameters));\n    errors.collect(cdk.propertyValidator('recordFormatType', cdk.requiredValidator)(properties.recordFormatType));\n    errors.collect(cdk.propertyValidator('recordFormatType', cdk.validateString)(properties.recordFormatType));\n    return errors.wrap('supplied properties not correct for \"RecordFormatProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.RecordFormat` resource\n *\n * @param properties - the TypeScript properties of a `RecordFormatProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.RecordFormat` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2RecordFormatPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_RecordFormatPropertyValidator(properties).assertSuccess();\n    return {\n        MappingParameters: cfnApplicationV2MappingParametersPropertyToCloudFormation(properties.mappingParameters),\n        RecordFormatType: cdk.stringToCloudFormation(properties.recordFormatType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2RecordFormatPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.RecordFormatProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.RecordFormatProperty>();\n    ret.addPropertyResult('mappingParameters', 'MappingParameters', properties.MappingParameters != null ? CfnApplicationV2MappingParametersPropertyFromCloudFormation(properties.MappingParameters) : undefined);\n    ret.addPropertyResult('recordFormatType', 'RecordFormatType', cfn_parse.FromCloudFormation.getString(properties.RecordFormatType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                              \n    export interface S3ContentBaseLocationProperty {\n                                                                                                                                                                                                                                                                                                        \n        readonly basePath: string;\n                                                                                                                                                                                                                                                                                                                         \n        readonly bucketArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3ContentBaseLocationProperty`\n *\n * @param properties - the TypeScript properties of a `S3ContentBaseLocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_S3ContentBaseLocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('basePath', cdk.requiredValidator)(properties.basePath));\n    errors.collect(cdk.propertyValidator('basePath', cdk.validateString)(properties.basePath));\n    errors.collect(cdk.propertyValidator('bucketArn', cdk.requiredValidator)(properties.bucketArn));\n    errors.collect(cdk.propertyValidator('bucketArn', cdk.validateString)(properties.bucketArn));\n    return errors.wrap('supplied properties not correct for \"S3ContentBaseLocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.S3ContentBaseLocation` resource\n *\n * @param properties - the TypeScript properties of a `S3ContentBaseLocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.S3ContentBaseLocation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2S3ContentBaseLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_S3ContentBaseLocationPropertyValidator(properties).assertSuccess();\n    return {\n        BasePath: cdk.stringToCloudFormation(properties.basePath),\n        BucketARN: cdk.stringToCloudFormation(properties.bucketArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2S3ContentBaseLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.S3ContentBaseLocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.S3ContentBaseLocationProperty>();\n    ret.addPropertyResult('basePath', 'BasePath', cfn_parse.FromCloudFormation.getString(properties.BasePath));\n    ret.addPropertyResult('bucketArn', 'BucketARN', cfn_parse.FromCloudFormation.getString(properties.BucketARN));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                   \n    export interface S3ContentLocationProperty {\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly bucketArn?: string;\n                                                                                                                                                                                                                                                                                                                           \n        readonly fileKey?: string;\n                                                                                                                                                                                                                                                                                                                               \n        readonly objectVersion?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3ContentLocationProperty`\n *\n * @param properties - the TypeScript properties of a `S3ContentLocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_S3ContentLocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketArn', cdk.validateString)(properties.bucketArn));\n    errors.collect(cdk.propertyValidator('fileKey', cdk.validateString)(properties.fileKey));\n    errors.collect(cdk.propertyValidator('objectVersion', cdk.validateString)(properties.objectVersion));\n    return errors.wrap('supplied properties not correct for \"S3ContentLocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.S3ContentLocation` resource\n *\n * @param properties - the TypeScript properties of a `S3ContentLocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.S3ContentLocation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2S3ContentLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_S3ContentLocationPropertyValidator(properties).assertSuccess();\n    return {\n        BucketARN: cdk.stringToCloudFormation(properties.bucketArn),\n        FileKey: cdk.stringToCloudFormation(properties.fileKey),\n        ObjectVersion: cdk.stringToCloudFormation(properties.objectVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2S3ContentLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.S3ContentLocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.S3ContentLocationProperty>();\n    ret.addPropertyResult('bucketArn', 'BucketARN', properties.BucketARN != null ? cfn_parse.FromCloudFormation.getString(properties.BucketARN) : undefined);\n    ret.addPropertyResult('fileKey', 'FileKey', properties.FileKey != null ? cfn_parse.FromCloudFormation.getString(properties.FileKey) : undefined);\n    ret.addPropertyResult('objectVersion', 'ObjectVersion', properties.ObjectVersion != null ? cfn_parse.FromCloudFormation.getString(properties.ObjectVersion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                      \n    export interface SqlApplicationConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly inputs?: Array<CfnApplicationV2.InputProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SqlApplicationConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `SqlApplicationConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_SqlApplicationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('inputs', cdk.listValidator(CfnApplicationV2_InputPropertyValidator))(properties.inputs));\n    return errors.wrap('supplied properties not correct for \"SqlApplicationConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.SqlApplicationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `SqlApplicationConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.SqlApplicationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2SqlApplicationConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_SqlApplicationConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Inputs: cdk.listMapper(cfnApplicationV2InputPropertyToCloudFormation)(properties.inputs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2SqlApplicationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.SqlApplicationConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.SqlApplicationConfigurationProperty>();\n    ret.addPropertyResult('inputs', 'Inputs', properties.Inputs != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationV2InputPropertyFromCloudFormation)(properties.Inputs) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                            \n    export interface ZeppelinApplicationConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly catalogConfiguration?: CfnApplicationV2.CatalogConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly customArtifactsConfiguration?: Array<CfnApplicationV2.CustomArtifactConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly deployAsApplicationConfiguration?: CfnApplicationV2.DeployAsApplicationConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly monitoringConfiguration?: CfnApplicationV2.ZeppelinMonitoringConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ZeppelinApplicationConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ZeppelinApplicationConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_ZeppelinApplicationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalogConfiguration', CfnApplicationV2_CatalogConfigurationPropertyValidator)(properties.catalogConfiguration));\n    errors.collect(cdk.propertyValidator('customArtifactsConfiguration', cdk.listValidator(CfnApplicationV2_CustomArtifactConfigurationPropertyValidator))(properties.customArtifactsConfiguration));\n    errors.collect(cdk.propertyValidator('deployAsApplicationConfiguration', CfnApplicationV2_DeployAsApplicationConfigurationPropertyValidator)(properties.deployAsApplicationConfiguration));\n    errors.collect(cdk.propertyValidator('monitoringConfiguration', CfnApplicationV2_ZeppelinMonitoringConfigurationPropertyValidator)(properties.monitoringConfiguration));\n    return errors.wrap('supplied properties not correct for \"ZeppelinApplicationConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.ZeppelinApplicationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ZeppelinApplicationConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.ZeppelinApplicationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2ZeppelinApplicationConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_ZeppelinApplicationConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        CatalogConfiguration: cfnApplicationV2CatalogConfigurationPropertyToCloudFormation(properties.catalogConfiguration),\n        CustomArtifactsConfiguration: cdk.listMapper(cfnApplicationV2CustomArtifactConfigurationPropertyToCloudFormation)(properties.customArtifactsConfiguration),\n        DeployAsApplicationConfiguration: cfnApplicationV2DeployAsApplicationConfigurationPropertyToCloudFormation(properties.deployAsApplicationConfiguration),\n        MonitoringConfiguration: cfnApplicationV2ZeppelinMonitoringConfigurationPropertyToCloudFormation(properties.monitoringConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2ZeppelinApplicationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.ZeppelinApplicationConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.ZeppelinApplicationConfigurationProperty>();\n    ret.addPropertyResult('catalogConfiguration', 'CatalogConfiguration', properties.CatalogConfiguration != null ? CfnApplicationV2CatalogConfigurationPropertyFromCloudFormation(properties.CatalogConfiguration) : undefined);\n    ret.addPropertyResult('customArtifactsConfiguration', 'CustomArtifactsConfiguration', properties.CustomArtifactsConfiguration != null ? cfn_parse.FromCloudFormation.getArray(CfnApplicationV2CustomArtifactConfigurationPropertyFromCloudFormation)(properties.CustomArtifactsConfiguration) : undefined);\n    ret.addPropertyResult('deployAsApplicationConfiguration', 'DeployAsApplicationConfiguration', properties.DeployAsApplicationConfiguration != null ? CfnApplicationV2DeployAsApplicationConfigurationPropertyFromCloudFormation(properties.DeployAsApplicationConfiguration) : undefined);\n    ret.addPropertyResult('monitoringConfiguration', 'MonitoringConfiguration', properties.MonitoringConfiguration != null ? CfnApplicationV2ZeppelinMonitoringConfigurationPropertyFromCloudFormation(properties.MonitoringConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface ZeppelinMonitoringConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly logLevel?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ZeppelinMonitoringConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ZeppelinMonitoringConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationV2_ZeppelinMonitoringConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('logLevel', cdk.validateString)(properties.logLevel));\n    return errors.wrap('supplied properties not correct for \"ZeppelinMonitoringConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.ZeppelinMonitoringConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ZeppelinMonitoringConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::Application.ZeppelinMonitoringConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationV2ZeppelinMonitoringConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationV2_ZeppelinMonitoringConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        LogLevel: cdk.stringToCloudFormation(properties.logLevel),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationV2ZeppelinMonitoringConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationV2.ZeppelinMonitoringConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationV2.ZeppelinMonitoringConfigurationProperty>();\n    ret.addPropertyResult('logLevel', 'LogLevel', properties.LogLevel != null ? cfn_parse.FromCloudFormation.getString(properties.LogLevel) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                     \nexport interface CfnApplicationCloudWatchLoggingOptionV2Props {\n\n                                                                                                                                                                                                                                                                                       \n    readonly applicationName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly cloudWatchLoggingOption: CfnApplicationCloudWatchLoggingOptionV2.CloudWatchLoggingOptionProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApplicationCloudWatchLoggingOptionV2Props`\n *\n * @param properties - the TypeScript properties of a `CfnApplicationCloudWatchLoggingOptionV2Props`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationCloudWatchLoggingOptionV2PropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applicationName', cdk.requiredValidator)(properties.applicationName));\n    errors.collect(cdk.propertyValidator('applicationName', cdk.validateString)(properties.applicationName));\n    errors.collect(cdk.propertyValidator('cloudWatchLoggingOption', cdk.requiredValidator)(properties.cloudWatchLoggingOption));\n    errors.collect(cdk.propertyValidator('cloudWatchLoggingOption', CfnApplicationCloudWatchLoggingOptionV2_CloudWatchLoggingOptionPropertyValidator)(properties.cloudWatchLoggingOption));\n    return errors.wrap('supplied properties not correct for \"CfnApplicationCloudWatchLoggingOptionV2Props\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption` resource\n *\n * @param properties - the TypeScript properties of a `CfnApplicationCloudWatchLoggingOptionV2Props`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationCloudWatchLoggingOptionV2PropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationCloudWatchLoggingOptionV2PropsValidator(properties).assertSuccess();\n    return {\n        ApplicationName: cdk.stringToCloudFormation(properties.applicationName),\n        CloudWatchLoggingOption: cfnApplicationCloudWatchLoggingOptionV2CloudWatchLoggingOptionPropertyToCloudFormation(properties.cloudWatchLoggingOption),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationCloudWatchLoggingOptionV2PropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationCloudWatchLoggingOptionV2Props> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationCloudWatchLoggingOptionV2Props>();\n    ret.addPropertyResult('applicationName', 'ApplicationName', cfn_parse.FromCloudFormation.getString(properties.ApplicationName));\n    ret.addPropertyResult('cloudWatchLoggingOption', 'CloudWatchLoggingOption', CfnApplicationCloudWatchLoggingOptionV2CloudWatchLoggingOptionPropertyFromCloudFormation(properties.CloudWatchLoggingOption));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \nexport class CfnApplicationCloudWatchLoggingOptionV2 extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApplicationCloudWatchLoggingOptionV2 {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApplicationCloudWatchLoggingOptionV2PropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApplicationCloudWatchLoggingOptionV2(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                       \n    public applicationName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n    public cloudWatchLoggingOption: CfnApplicationCloudWatchLoggingOptionV2.CloudWatchLoggingOptionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnApplicationCloudWatchLoggingOptionV2Props) {\n        super(scope, id, { type: CfnApplicationCloudWatchLoggingOptionV2.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'applicationName', this);\n        cdk.requireProperty(props, 'cloudWatchLoggingOption', this);\n\n        this.applicationName = props.applicationName;\n        this.cloudWatchLoggingOption = props.cloudWatchLoggingOption;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApplicationCloudWatchLoggingOptionV2.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            applicationName: this.applicationName,\n            cloudWatchLoggingOption: this.cloudWatchLoggingOption,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApplicationCloudWatchLoggingOptionV2PropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnApplicationCloudWatchLoggingOptionV2 {\n                                                                                                                                                                                                                                                                                                                                                                             \n    export interface CloudWatchLoggingOptionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly logStreamArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CloudWatchLoggingOptionProperty`\n *\n * @param properties - the TypeScript properties of a `CloudWatchLoggingOptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationCloudWatchLoggingOptionV2_CloudWatchLoggingOptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('logStreamArn', cdk.requiredValidator)(properties.logStreamArn));\n    errors.collect(cdk.propertyValidator('logStreamArn', cdk.validateString)(properties.logStreamArn));\n    return errors.wrap('supplied properties not correct for \"CloudWatchLoggingOptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption.CloudWatchLoggingOption` resource\n *\n * @param properties - the TypeScript properties of a `CloudWatchLoggingOptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption.CloudWatchLoggingOption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationCloudWatchLoggingOptionV2CloudWatchLoggingOptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationCloudWatchLoggingOptionV2_CloudWatchLoggingOptionPropertyValidator(properties).assertSuccess();\n    return {\n        LogStreamARN: cdk.stringToCloudFormation(properties.logStreamArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationCloudWatchLoggingOptionV2CloudWatchLoggingOptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationCloudWatchLoggingOptionV2.CloudWatchLoggingOptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationCloudWatchLoggingOptionV2.CloudWatchLoggingOptionProperty>();\n    ret.addPropertyResult('logStreamArn', 'LogStreamARN', cfn_parse.FromCloudFormation.getString(properties.LogStreamARN));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                   \nexport interface CfnApplicationOutputV2Props {\n\n                                                                                                                                                                                                                                                     \n    readonly applicationName: string;\n\nn    readonly output: CfnApplicationOutputV2.OutputProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApplicationOutputV2Props`\n *\n * @param properties - the TypeScript properties of a `CfnApplicationOutputV2Props`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationOutputV2PropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applicationName', cdk.requiredValidator)(properties.applicationName));\n    errors.collect(cdk.propertyValidator('applicationName', cdk.validateString)(properties.applicationName));\n    errors.collect(cdk.propertyValidator('output', cdk.requiredValidator)(properties.output));\n    errors.collect(cdk.propertyValidator('output', CfnApplicationOutputV2_OutputPropertyValidator)(properties.output));\n    return errors.wrap('supplied properties not correct for \"CfnApplicationOutputV2Props\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationOutput` resource\n *\n * @param properties - the TypeScript properties of a `CfnApplicationOutputV2Props`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationOutput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationOutputV2PropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationOutputV2PropsValidator(properties).assertSuccess();\n    return {\n        ApplicationName: cdk.stringToCloudFormation(properties.applicationName),\n        Output: cfnApplicationOutputV2OutputPropertyToCloudFormation(properties.output),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationOutputV2PropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationOutputV2Props> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationOutputV2Props>();\n    ret.addPropertyResult('applicationName', 'ApplicationName', cfn_parse.FromCloudFormation.getString(properties.ApplicationName));\n    ret.addPropertyResult('output', 'Output', CfnApplicationOutputV2OutputPropertyFromCloudFormation(properties.Output));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnApplicationOutputV2 extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::KinesisAnalyticsV2::ApplicationOutput\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApplicationOutputV2 {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApplicationOutputV2PropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApplicationOutputV2(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                     \n    public applicationName: string;\n\nn    public output: CfnApplicationOutputV2.OutputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnApplicationOutputV2Props) {\n        super(scope, id, { type: CfnApplicationOutputV2.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'applicationName', this);\n        cdk.requireProperty(props, 'output', this);\n\n        this.applicationName = props.applicationName;\n        this.output = props.output;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApplicationOutputV2.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            applicationName: this.applicationName,\n            output: this.output,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApplicationOutputV2PropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnApplicationOutputV2 {\n                                                                                                                                                                                                                                                                                                                                                             \n    export interface DestinationSchemaProperty {\n                                                                                                                                                                                                                                                                                                                                             \n        readonly recordFormatType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DestinationSchemaProperty`\n *\n * @param properties - the TypeScript properties of a `DestinationSchemaProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationOutputV2_DestinationSchemaPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('recordFormatType', cdk.validateString)(properties.recordFormatType));\n    return errors.wrap('supplied properties not correct for \"DestinationSchemaProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationOutput.DestinationSchema` resource\n *\n * @param properties - the TypeScript properties of a `DestinationSchemaProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationOutput.DestinationSchema` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationOutputV2DestinationSchemaPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationOutputV2_DestinationSchemaPropertyValidator(properties).assertSuccess();\n    return {\n        RecordFormatType: cdk.stringToCloudFormation(properties.recordFormatType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationOutputV2DestinationSchemaPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationOutputV2.DestinationSchemaProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationOutputV2.DestinationSchemaProperty>();\n    ret.addPropertyResult('recordFormatType', 'RecordFormatType', properties.RecordFormatType != null ? cfn_parse.FromCloudFormation.getString(properties.RecordFormatType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationOutputV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface KinesisFirehoseOutputProperty {\n                                                                                                                                                                                                                                                                                                                                              \n        readonly resourceArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KinesisFirehoseOutputProperty`\n *\n * @param properties - the TypeScript properties of a `KinesisFirehoseOutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationOutputV2_KinesisFirehoseOutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.requiredValidator)(properties.resourceArn));\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.validateString)(properties.resourceArn));\n    return errors.wrap('supplied properties not correct for \"KinesisFirehoseOutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationOutput.KinesisFirehoseOutput` resource\n *\n * @param properties - the TypeScript properties of a `KinesisFirehoseOutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationOutput.KinesisFirehoseOutput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationOutputV2KinesisFirehoseOutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationOutputV2_KinesisFirehoseOutputPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceARN: cdk.stringToCloudFormation(properties.resourceArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationOutputV2KinesisFirehoseOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationOutputV2.KinesisFirehoseOutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationOutputV2.KinesisFirehoseOutputProperty>();\n    ret.addPropertyResult('resourceArn', 'ResourceARN', cfn_parse.FromCloudFormation.getString(properties.ResourceARN));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationOutputV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface KinesisStreamsOutputProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly resourceArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KinesisStreamsOutputProperty`\n *\n * @param properties - the TypeScript properties of a `KinesisStreamsOutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationOutputV2_KinesisStreamsOutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.requiredValidator)(properties.resourceArn));\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.validateString)(properties.resourceArn));\n    return errors.wrap('supplied properties not correct for \"KinesisStreamsOutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationOutput.KinesisStreamsOutput` resource\n *\n * @param properties - the TypeScript properties of a `KinesisStreamsOutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationOutput.KinesisStreamsOutput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationOutputV2KinesisStreamsOutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationOutputV2_KinesisStreamsOutputPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceARN: cdk.stringToCloudFormation(properties.resourceArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationOutputV2KinesisStreamsOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationOutputV2.KinesisStreamsOutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationOutputV2.KinesisStreamsOutputProperty>();\n    ret.addPropertyResult('resourceArn', 'ResourceARN', cfn_parse.FromCloudFormation.getString(properties.ResourceARN));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationOutputV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface LambdaOutputProperty {\nn        readonly resourceArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaOutputProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaOutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationOutputV2_LambdaOutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.requiredValidator)(properties.resourceArn));\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.validateString)(properties.resourceArn));\n    return errors.wrap('supplied properties not correct for \"LambdaOutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationOutput.LambdaOutput` resource\n *\n * @param properties - the TypeScript properties of a `LambdaOutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationOutput.LambdaOutput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationOutputV2LambdaOutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationOutputV2_LambdaOutputPropertyValidator(properties).assertSuccess();\n    return {\n        ResourceARN: cdk.stringToCloudFormation(properties.resourceArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationOutputV2LambdaOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationOutputV2.LambdaOutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationOutputV2.LambdaOutputProperty>();\n    ret.addPropertyResult('resourceArn', 'ResourceARN', cfn_parse.FromCloudFormation.getString(properties.ResourceARN));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationOutputV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface OutputProperty {\n                                                                                                                                                                                                                                                                                                                                     \n        readonly destinationSchema: CfnApplicationOutputV2.DestinationSchemaProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                         \n        readonly kinesisFirehoseOutput?: CfnApplicationOutputV2.KinesisFirehoseOutputProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                      \n        readonly kinesisStreamsOutput?: CfnApplicationOutputV2.KinesisStreamsOutputProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                  \n        readonly lambdaOutput?: CfnApplicationOutputV2.LambdaOutputProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                        \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OutputProperty`\n *\n * @param properties - the TypeScript properties of a `OutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationOutputV2_OutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationSchema', cdk.requiredValidator)(properties.destinationSchema));\n    errors.collect(cdk.propertyValidator('destinationSchema', CfnApplicationOutputV2_DestinationSchemaPropertyValidator)(properties.destinationSchema));\n    errors.collect(cdk.propertyValidator('kinesisFirehoseOutput', CfnApplicationOutputV2_KinesisFirehoseOutputPropertyValidator)(properties.kinesisFirehoseOutput));\n    errors.collect(cdk.propertyValidator('kinesisStreamsOutput', CfnApplicationOutputV2_KinesisStreamsOutputPropertyValidator)(properties.kinesisStreamsOutput));\n    errors.collect(cdk.propertyValidator('lambdaOutput', CfnApplicationOutputV2_LambdaOutputPropertyValidator)(properties.lambdaOutput));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"OutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationOutput.Output` resource\n *\n * @param properties - the TypeScript properties of a `OutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationOutput.Output` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationOutputV2OutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationOutputV2_OutputPropertyValidator(properties).assertSuccess();\n    return {\n        DestinationSchema: cfnApplicationOutputV2DestinationSchemaPropertyToCloudFormation(properties.destinationSchema),\n        KinesisFirehoseOutput: cfnApplicationOutputV2KinesisFirehoseOutputPropertyToCloudFormation(properties.kinesisFirehoseOutput),\n        KinesisStreamsOutput: cfnApplicationOutputV2KinesisStreamsOutputPropertyToCloudFormation(properties.kinesisStreamsOutput),\n        LambdaOutput: cfnApplicationOutputV2LambdaOutputPropertyToCloudFormation(properties.lambdaOutput),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationOutputV2OutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationOutputV2.OutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationOutputV2.OutputProperty>();\n    ret.addPropertyResult('destinationSchema', 'DestinationSchema', CfnApplicationOutputV2DestinationSchemaPropertyFromCloudFormation(properties.DestinationSchema));\n    ret.addPropertyResult('kinesisFirehoseOutput', 'KinesisFirehoseOutput', properties.KinesisFirehoseOutput != null ? CfnApplicationOutputV2KinesisFirehoseOutputPropertyFromCloudFormation(properties.KinesisFirehoseOutput) : undefined);\n    ret.addPropertyResult('kinesisStreamsOutput', 'KinesisStreamsOutput', properties.KinesisStreamsOutput != null ? CfnApplicationOutputV2KinesisStreamsOutputPropertyFromCloudFormation(properties.KinesisStreamsOutput) : undefined);\n    ret.addPropertyResult('lambdaOutput', 'LambdaOutput', properties.LambdaOutput != null ? CfnApplicationOutputV2LambdaOutputPropertyFromCloudFormation(properties.LambdaOutput) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                             \nexport interface CfnApplicationReferenceDataSourceV2Props {\n\n                                                                                                                                                                                                                                                                               \n    readonly applicationName: string;\n\nn    readonly referenceDataSource: CfnApplicationReferenceDataSourceV2.ReferenceDataSourceProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApplicationReferenceDataSourceV2Props`\n *\n * @param properties - the TypeScript properties of a `CfnApplicationReferenceDataSourceV2Props`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationReferenceDataSourceV2PropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applicationName', cdk.requiredValidator)(properties.applicationName));\n    errors.collect(cdk.propertyValidator('applicationName', cdk.validateString)(properties.applicationName));\n    errors.collect(cdk.propertyValidator('referenceDataSource', cdk.requiredValidator)(properties.referenceDataSource));\n    errors.collect(cdk.propertyValidator('referenceDataSource', CfnApplicationReferenceDataSourceV2_ReferenceDataSourcePropertyValidator)(properties.referenceDataSource));\n    return errors.wrap('supplied properties not correct for \"CfnApplicationReferenceDataSourceV2Props\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource` resource\n *\n * @param properties - the TypeScript properties of a `CfnApplicationReferenceDataSourceV2Props`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationReferenceDataSourceV2PropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationReferenceDataSourceV2PropsValidator(properties).assertSuccess();\n    return {\n        ApplicationName: cdk.stringToCloudFormation(properties.applicationName),\n        ReferenceDataSource: cfnApplicationReferenceDataSourceV2ReferenceDataSourcePropertyToCloudFormation(properties.referenceDataSource),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationReferenceDataSourceV2PropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationReferenceDataSourceV2Props> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationReferenceDataSourceV2Props>();\n    ret.addPropertyResult('applicationName', 'ApplicationName', cfn_parse.FromCloudFormation.getString(properties.ApplicationName));\n    ret.addPropertyResult('referenceDataSource', 'ReferenceDataSource', CfnApplicationReferenceDataSourceV2ReferenceDataSourcePropertyFromCloudFormation(properties.ReferenceDataSource));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \nexport class CfnApplicationReferenceDataSourceV2 extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApplicationReferenceDataSourceV2 {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApplicationReferenceDataSourceV2PropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApplicationReferenceDataSourceV2(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                               \n    public applicationName: string;\n\nn    public referenceDataSource: CfnApplicationReferenceDataSourceV2.ReferenceDataSourceProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnApplicationReferenceDataSourceV2Props) {\n        super(scope, id, { type: CfnApplicationReferenceDataSourceV2.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'applicationName', this);\n        cdk.requireProperty(props, 'referenceDataSource', this);\n\n        this.applicationName = props.applicationName;\n        this.referenceDataSource = props.referenceDataSource;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApplicationReferenceDataSourceV2.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            applicationName: this.applicationName,\n            referenceDataSource: this.referenceDataSource,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApplicationReferenceDataSourceV2PropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnApplicationReferenceDataSourceV2 {\nn    export interface CSVMappingParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly recordColumnDelimiter: string;\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly recordRowDelimiter: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CSVMappingParametersProperty`\n *\n * @param properties - the TypeScript properties of a `CSVMappingParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationReferenceDataSourceV2_CSVMappingParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('recordColumnDelimiter', cdk.requiredValidator)(properties.recordColumnDelimiter));\n    errors.collect(cdk.propertyValidator('recordColumnDelimiter', cdk.validateString)(properties.recordColumnDelimiter));\n    errors.collect(cdk.propertyValidator('recordRowDelimiter', cdk.requiredValidator)(properties.recordRowDelimiter));\n    errors.collect(cdk.propertyValidator('recordRowDelimiter', cdk.validateString)(properties.recordRowDelimiter));\n    return errors.wrap('supplied properties not correct for \"CSVMappingParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.CSVMappingParameters` resource\n *\n * @param properties - the TypeScript properties of a `CSVMappingParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.CSVMappingParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationReferenceDataSourceV2CSVMappingParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationReferenceDataSourceV2_CSVMappingParametersPropertyValidator(properties).assertSuccess();\n    return {\n        RecordColumnDelimiter: cdk.stringToCloudFormation(properties.recordColumnDelimiter),\n        RecordRowDelimiter: cdk.stringToCloudFormation(properties.recordRowDelimiter),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationReferenceDataSourceV2CSVMappingParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationReferenceDataSourceV2.CSVMappingParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationReferenceDataSourceV2.CSVMappingParametersProperty>();\n    ret.addPropertyResult('recordColumnDelimiter', 'RecordColumnDelimiter', cfn_parse.FromCloudFormation.getString(properties.RecordColumnDelimiter));\n    ret.addPropertyResult('recordRowDelimiter', 'RecordRowDelimiter', cfn_parse.FromCloudFormation.getString(properties.RecordRowDelimiter));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationReferenceDataSourceV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface JSONMappingParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly recordRowPath: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `JSONMappingParametersProperty`\n *\n * @param properties - the TypeScript properties of a `JSONMappingParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationReferenceDataSourceV2_JSONMappingParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('recordRowPath', cdk.requiredValidator)(properties.recordRowPath));\n    errors.collect(cdk.propertyValidator('recordRowPath', cdk.validateString)(properties.recordRowPath));\n    return errors.wrap('supplied properties not correct for \"JSONMappingParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.JSONMappingParameters` resource\n *\n * @param properties - the TypeScript properties of a `JSONMappingParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.JSONMappingParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationReferenceDataSourceV2JSONMappingParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationReferenceDataSourceV2_JSONMappingParametersPropertyValidator(properties).assertSuccess();\n    return {\n        RecordRowPath: cdk.stringToCloudFormation(properties.recordRowPath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationReferenceDataSourceV2JSONMappingParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationReferenceDataSourceV2.JSONMappingParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationReferenceDataSourceV2.JSONMappingParametersProperty>();\n    ret.addPropertyResult('recordRowPath', 'RecordRowPath', cfn_parse.FromCloudFormation.getString(properties.RecordRowPath));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationReferenceDataSourceV2 {\nn    export interface MappingParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly csvMappingParameters?: CfnApplicationReferenceDataSourceV2.CSVMappingParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly jsonMappingParameters?: CfnApplicationReferenceDataSourceV2.JSONMappingParametersProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MappingParametersProperty`\n *\n * @param properties - the TypeScript properties of a `MappingParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationReferenceDataSourceV2_MappingParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('csvMappingParameters', CfnApplicationReferenceDataSourceV2_CSVMappingParametersPropertyValidator)(properties.csvMappingParameters));\n    errors.collect(cdk.propertyValidator('jsonMappingParameters', CfnApplicationReferenceDataSourceV2_JSONMappingParametersPropertyValidator)(properties.jsonMappingParameters));\n    return errors.wrap('supplied properties not correct for \"MappingParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.MappingParameters` resource\n *\n * @param properties - the TypeScript properties of a `MappingParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.MappingParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationReferenceDataSourceV2MappingParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationReferenceDataSourceV2_MappingParametersPropertyValidator(properties).assertSuccess();\n    return {\n        CSVMappingParameters: cfnApplicationReferenceDataSourceV2CSVMappingParametersPropertyToCloudFormation(properties.csvMappingParameters),\n        JSONMappingParameters: cfnApplicationReferenceDataSourceV2JSONMappingParametersPropertyToCloudFormation(properties.jsonMappingParameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationReferenceDataSourceV2MappingParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationReferenceDataSourceV2.MappingParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationReferenceDataSourceV2.MappingParametersProperty>();\n    ret.addPropertyResult('csvMappingParameters', 'CSVMappingParameters', properties.CSVMappingParameters != null ? CfnApplicationReferenceDataSourceV2CSVMappingParametersPropertyFromCloudFormation(properties.CSVMappingParameters) : undefined);\n    ret.addPropertyResult('jsonMappingParameters', 'JSONMappingParameters', properties.JSONMappingParameters != null ? CfnApplicationReferenceDataSourceV2JSONMappingParametersPropertyFromCloudFormation(properties.JSONMappingParameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationReferenceDataSourceV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface RecordColumnProperty {\n                                                                                                                                                                                                                                                                                                                                                                               \n        readonly mapping?: string;\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly sqlType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RecordColumnProperty`\n *\n * @param properties - the TypeScript properties of a `RecordColumnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationReferenceDataSourceV2_RecordColumnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('mapping', cdk.validateString)(properties.mapping));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('sqlType', cdk.requiredValidator)(properties.sqlType));\n    errors.collect(cdk.propertyValidator('sqlType', cdk.validateString)(properties.sqlType));\n    return errors.wrap('supplied properties not correct for \"RecordColumnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.RecordColumn` resource\n *\n * @param properties - the TypeScript properties of a `RecordColumnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.RecordColumn` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationReferenceDataSourceV2RecordColumnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationReferenceDataSourceV2_RecordColumnPropertyValidator(properties).assertSuccess();\n    return {\n        Mapping: cdk.stringToCloudFormation(properties.mapping),\n        Name: cdk.stringToCloudFormation(properties.name),\n        SqlType: cdk.stringToCloudFormation(properties.sqlType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationReferenceDataSourceV2RecordColumnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationReferenceDataSourceV2.RecordColumnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationReferenceDataSourceV2.RecordColumnProperty>();\n    ret.addPropertyResult('mapping', 'Mapping', properties.Mapping != null ? cfn_parse.FromCloudFormation.getString(properties.Mapping) : undefined);\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('sqlType', 'SqlType', cfn_parse.FromCloudFormation.getString(properties.SqlType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationReferenceDataSourceV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface RecordFormatProperty {\nn        readonly mappingParameters?: CfnApplicationReferenceDataSourceV2.MappingParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                              \n        readonly recordFormatType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RecordFormatProperty`\n *\n * @param properties - the TypeScript properties of a `RecordFormatProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationReferenceDataSourceV2_RecordFormatPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('mappingParameters', CfnApplicationReferenceDataSourceV2_MappingParametersPropertyValidator)(properties.mappingParameters));\n    errors.collect(cdk.propertyValidator('recordFormatType', cdk.requiredValidator)(properties.recordFormatType));\n    errors.collect(cdk.propertyValidator('recordFormatType', cdk.validateString)(properties.recordFormatType));\n    return errors.wrap('supplied properties not correct for \"RecordFormatProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.RecordFormat` resource\n *\n * @param properties - the TypeScript properties of a `RecordFormatProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.RecordFormat` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationReferenceDataSourceV2RecordFormatPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationReferenceDataSourceV2_RecordFormatPropertyValidator(properties).assertSuccess();\n    return {\n        MappingParameters: cfnApplicationReferenceDataSourceV2MappingParametersPropertyToCloudFormation(properties.mappingParameters),\n        RecordFormatType: cdk.stringToCloudFormation(properties.recordFormatType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationReferenceDataSourceV2RecordFormatPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationReferenceDataSourceV2.RecordFormatProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationReferenceDataSourceV2.RecordFormatProperty>();\n    ret.addPropertyResult('mappingParameters', 'MappingParameters', properties.MappingParameters != null ? CfnApplicationReferenceDataSourceV2MappingParametersPropertyFromCloudFormation(properties.MappingParameters) : undefined);\n    ret.addPropertyResult('recordFormatType', 'RecordFormatType', cfn_parse.FromCloudFormation.getString(properties.RecordFormatType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationReferenceDataSourceV2 {\nn    export interface ReferenceDataSourceProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly referenceSchema: CfnApplicationReferenceDataSourceV2.ReferenceSchemaProperty | cdk.IResolvable;\nn        readonly s3ReferenceDataSource?: CfnApplicationReferenceDataSourceV2.S3ReferenceDataSourceProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly tableName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReferenceDataSourceProperty`\n *\n * @param properties - the TypeScript properties of a `ReferenceDataSourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationReferenceDataSourceV2_ReferenceDataSourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('referenceSchema', cdk.requiredValidator)(properties.referenceSchema));\n    errors.collect(cdk.propertyValidator('referenceSchema', CfnApplicationReferenceDataSourceV2_ReferenceSchemaPropertyValidator)(properties.referenceSchema));\n    errors.collect(cdk.propertyValidator('s3ReferenceDataSource', CfnApplicationReferenceDataSourceV2_S3ReferenceDataSourcePropertyValidator)(properties.s3ReferenceDataSource));\n    errors.collect(cdk.propertyValidator('tableName', cdk.validateString)(properties.tableName));\n    return errors.wrap('supplied properties not correct for \"ReferenceDataSourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.ReferenceDataSource` resource\n *\n * @param properties - the TypeScript properties of a `ReferenceDataSourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.ReferenceDataSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationReferenceDataSourceV2ReferenceDataSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationReferenceDataSourceV2_ReferenceDataSourcePropertyValidator(properties).assertSuccess();\n    return {\n        ReferenceSchema: cfnApplicationReferenceDataSourceV2ReferenceSchemaPropertyToCloudFormation(properties.referenceSchema),\n        S3ReferenceDataSource: cfnApplicationReferenceDataSourceV2S3ReferenceDataSourcePropertyToCloudFormation(properties.s3ReferenceDataSource),\n        TableName: cdk.stringToCloudFormation(properties.tableName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationReferenceDataSourceV2ReferenceDataSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationReferenceDataSourceV2.ReferenceDataSourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationReferenceDataSourceV2.ReferenceDataSourceProperty>();\n    ret.addPropertyResult('referenceSchema', 'ReferenceSchema', CfnApplicationReferenceDataSourceV2ReferenceSchemaPropertyFromCloudFormation(properties.ReferenceSchema));\n    ret.addPropertyResult('s3ReferenceDataSource', 'S3ReferenceDataSource', properties.S3ReferenceDataSource != null ? CfnApplicationReferenceDataSourceV2S3ReferenceDataSourcePropertyFromCloudFormation(properties.S3ReferenceDataSource) : undefined);\n    ret.addPropertyResult('tableName', 'TableName', properties.TableName != null ? cfn_parse.FromCloudFormation.getString(properties.TableName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationReferenceDataSourceV2 {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface ReferenceSchemaProperty {\n                                                                                                                                                                                                                                                                                                                                        \n        readonly recordColumns: Array<CfnApplicationReferenceDataSourceV2.RecordColumnProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly recordEncoding?: string;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly recordFormat: CfnApplicationReferenceDataSourceV2.RecordFormatProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReferenceSchemaProperty`\n *\n * @param properties - the TypeScript properties of a `ReferenceSchemaProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationReferenceDataSourceV2_ReferenceSchemaPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('recordColumns', cdk.requiredValidator)(properties.recordColumns));\n    errors.collect(cdk.propertyValidator('recordColumns', cdk.listValidator(CfnApplicationReferenceDataSourceV2_RecordColumnPropertyValidator))(properties.recordColumns));\n    errors.collect(cdk.propertyValidator('recordEncoding', cdk.validateString)(properties.recordEncoding));\n    errors.collect(cdk.propertyValidator('recordFormat', cdk.requiredValidator)(properties.recordFormat));\n    errors.collect(cdk.propertyValidator('recordFormat', CfnApplicationReferenceDataSourceV2_RecordFormatPropertyValidator)(properties.recordFormat));\n    return errors.wrap('supplied properties not correct for \"ReferenceSchemaProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.ReferenceSchema` resource\n *\n * @param properties - the TypeScript properties of a `ReferenceSchemaProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.ReferenceSchema` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationReferenceDataSourceV2ReferenceSchemaPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationReferenceDataSourceV2_ReferenceSchemaPropertyValidator(properties).assertSuccess();\n    return {\n        RecordColumns: cdk.listMapper(cfnApplicationReferenceDataSourceV2RecordColumnPropertyToCloudFormation)(properties.recordColumns),\n        RecordEncoding: cdk.stringToCloudFormation(properties.recordEncoding),\n        RecordFormat: cfnApplicationReferenceDataSourceV2RecordFormatPropertyToCloudFormation(properties.recordFormat),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationReferenceDataSourceV2ReferenceSchemaPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationReferenceDataSourceV2.ReferenceSchemaProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationReferenceDataSourceV2.ReferenceSchemaProperty>();\n    ret.addPropertyResult('recordColumns', 'RecordColumns', cfn_parse.FromCloudFormation.getArray(CfnApplicationReferenceDataSourceV2RecordColumnPropertyFromCloudFormation)(properties.RecordColumns));\n    ret.addPropertyResult('recordEncoding', 'RecordEncoding', properties.RecordEncoding != null ? cfn_parse.FromCloudFormation.getString(properties.RecordEncoding) : undefined);\n    ret.addPropertyResult('recordFormat', 'RecordFormat', CfnApplicationReferenceDataSourceV2RecordFormatPropertyFromCloudFormation(properties.RecordFormat));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnApplicationReferenceDataSourceV2 {\nn    export interface S3ReferenceDataSourceProperty {\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly bucketArn: string;\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly fileKey: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3ReferenceDataSourceProperty`\n *\n * @param properties - the TypeScript properties of a `S3ReferenceDataSourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationReferenceDataSourceV2_S3ReferenceDataSourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketArn', cdk.requiredValidator)(properties.bucketArn));\n    errors.collect(cdk.propertyValidator('bucketArn', cdk.validateString)(properties.bucketArn));\n    errors.collect(cdk.propertyValidator('fileKey', cdk.requiredValidator)(properties.fileKey));\n    errors.collect(cdk.propertyValidator('fileKey', cdk.validateString)(properties.fileKey));\n    return errors.wrap('supplied properties not correct for \"S3ReferenceDataSourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.S3ReferenceDataSource` resource\n *\n * @param properties - the TypeScript properties of a `S3ReferenceDataSourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource.S3ReferenceDataSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationReferenceDataSourceV2S3ReferenceDataSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationReferenceDataSourceV2_S3ReferenceDataSourcePropertyValidator(properties).assertSuccess();\n    return {\n        BucketARN: cdk.stringToCloudFormation(properties.bucketArn),\n        FileKey: cdk.stringToCloudFormation(properties.fileKey),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationReferenceDataSourceV2S3ReferenceDataSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationReferenceDataSourceV2.S3ReferenceDataSourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationReferenceDataSourceV2.S3ReferenceDataSourceProperty>();\n    ret.addPropertyResult('bucketArn', 'BucketARN', cfn_parse.FromCloudFormation.getString(properties.BucketARN));\n    ret.addPropertyResult('fileKey', 'FileKey', cfn_parse.FromCloudFormation.getString(properties.FileKey));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
