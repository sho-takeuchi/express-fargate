{
  "version": 3,
  "sources": ["code.ts"],
  "sourcesContent": ["import * as ecr from '../../aws-ecr';\nimport * as ecr_assets from '../../aws-ecr-assets';\nimport * as iam from '../../aws-iam';\nimport * as s3 from '../../aws-s3';\nimport * as s3_assets from '../../aws-s3-assets';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\n\n                                              \nexport abstract class Code {\n                                                                                                                                                                          \n  public static fromBucket(bucket: s3.IBucket, key: string, objectVersion?: string): S3Code {\n    return new S3Code(bucket, key, objectVersion);\n  }\n\n                                                             \n  public static bucket(bucket: s3.IBucket, key: string, objectVersion?: string): S3Code {\n    return this.fromBucket(bucket, key, objectVersion);\n  }\n\n                                                                                                                                                             \n  public static fromInline(code: string): InlineCode {\n    return new InlineCode(code);\n  }\n\n                                                             \n  public static inline(code: string): InlineCode {\n    return this.fromInline(code);\n  }\n\n                                                                                                                                                    \n  public static fromAsset(path: string, options?: s3_assets.AssetOptions): AssetCode {\n    return new AssetCode(path, options);\n  }\n\n                                                                                                                                                                                                                                                                                              \n  public static fromDockerBuild(path: string, options: DockerBuildAssetOptions = {}): AssetCode {\n    let imagePath = options.imagePath ?? '/asset/.';\n\n    // ensure imagePath ends with /. to copy the **content** at this path\n    if (imagePath.endsWith('/')) {\n      imagePath = `${imagePath}.`;\n    } else if (!imagePath.endsWith('/.')) {\n      imagePath = `${imagePath}/.`;\n    }\n\n    const assetPath = cdk.DockerImage\n      .fromBuild(path, options)\n      .cp(imagePath, options.outputPath);\n\n    return new AssetCode(assetPath);\n  }\n\n                                                            \n  public static asset(path: string): AssetCode {\n    return this.fromAsset(path);\n  }\n\n                                                                                                                                                                                                                              \n  public static fromCfnParameters(props?: CfnParametersCodeProps): CfnParametersCode {\n    return new CfnParametersCode(props);\n  }\n\n                                                                    \n  public static cfnParameters(props?: CfnParametersCodeProps): CfnParametersCode {\n    return this.fromCfnParameters(props);\n  }\n\n                                                                                                                                                                                                  \n  public static fromEcrImage(repository: ecr.IRepository, props?: EcrImageCodeProps) {\n    return new EcrImageCode(repository, props);\n  }\n\n                                                                                                                                                                                                                                           \n  public static fromAssetImage(directory: string, props: AssetImageCodeProps = {}) {\n    return new AssetImageCode(directory, props);\n  }\n\n                                                                                                                                                                                                                                \n  public abstract readonly isInline: boolean;\n\n                                                                                                                                                                                                                                                                                                         \n  public abstract bind(scope: Construct): CodeConfig;\n\n                                                                                                                                                                                                                                               \n  public bindToResource(_resource: cdk.CfnResource, _options?: ResourceBindOptions) {\n    return;\n  }\n}\n\n                                                      \nexport interface CodeConfig {\n                                                                                                                                              \n  readonly s3Location?: s3.Location;\n\n                                                                                                                        \n  readonly inlineCode?: string;\n\n                                                                                                                                                       \n  readonly image?: CodeImageConfig;\n}\n\n                                                        \nexport interface CodeImageConfig {\n                                         \n  readonly imageUri: string;\n\n                                                                                                                                                                                                                                                                                                                          \n  readonly cmd?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n  readonly entrypoint?: string[];\n\n                                                                                                                                                                                                                                                                                                                         \n  readonly workingDirectory?: string;\n}\n\n                                          \nexport class S3Code extends Code {\n  public readonly isInline = false;\n  private bucketName: string;\n\n  constructor(bucket: s3.IBucket, private key: string, private objectVersion?: string) {\n    super();\n\n    if (!bucket.bucketName) {\n      throw new Error('bucketName is undefined for the provided bucket');\n    }\n\n    this.bucketName = bucket.bucketName;\n  }\n\n  public bind(_scope: Construct): CodeConfig {\n    return {\n      s3Location: {\n        bucketName: this.bucketName,\n        objectKey: this.key,\n        objectVersion: this.objectVersion,\n      },\n    };\n  }\n}\n\n                                                               \nexport class InlineCode extends Code {\n  public readonly isInline = true;\n\n  constructor(private code: string) {\n    super();\n\n    if (code.length === 0) {\n      throw new Error('Lambda inline code cannot be empty');\n    }\n\n    if (code.length > 4096) {\n      throw new Error('Lambda source is too large, must be <= 4096 but is ' + code.length);\n    }\n  }\n\n  public bind(_scope: Construct): CodeConfig {\n    return {\n      inlineCode: this.code,\n    };\n  }\n}\n\n                                              \nexport class AssetCode extends Code {\n  public readonly isInline = false;\n  private asset?: s3_assets.Asset;\n\n                                                                     \n  constructor(public readonly path: string, private readonly options: s3_assets.AssetOptions = { }) {\n    super();\n  }\n\n  public bind(scope: Construct): CodeConfig {\n    // If the same AssetCode is used multiple times, retain only the first instantiation.\n    if (!this.asset) {\n      this.asset = new s3_assets.Asset(scope, 'Code', {\n        path: this.path,\n        ...this.options,\n      });\n    } else if (cdk.Stack.of(this.asset) !== cdk.Stack.of(scope)) {\n      throw new Error(`Asset is already associated with another stack '${cdk.Stack.of(this.asset).stackName}'. ` +\n        'Create a new Code instance for every stack.');\n    }\n\n    if (!this.asset.isZipArchive) {\n      throw new Error(`Asset must be a .zip file or a directory (${this.path})`);\n    }\n\n    return {\n      s3Location: {\n        bucketName: this.asset.s3BucketName,\n        objectKey: this.asset.s3ObjectKey,\n      },\n    };\n  }\n\n  public bindToResource(resource: cdk.CfnResource, options: ResourceBindOptions = { }) {\n    if (!this.asset) {\n      throw new Error('bindToResource() must be called after bind()');\n    }\n\n    const resourceProperty = options.resourceProperty || 'Code';\n\n    // https://github.com/aws/aws-cdk/issues/1432\n    this.asset.addResourceMetadata(resource, resourceProperty);\n  }\n}\n\nexport interface ResourceBindOptions {\n                                                                                                                                                                 \n  readonly resourceProperty?: string;\n}\n\n                                                                 \nexport interface CfnParametersCodeProps {\n                                                                                                                                                                                                                        \n  readonly bucketNameParam?: cdk.CfnParameter;\n\n                                                                                                                                                                                                                            \n  readonly objectKeyParam?: cdk.CfnParameter;\n}\n\n                                                                                                                                                                                                                                                                                                                                      \nexport class CfnParametersCode extends Code {\n  public readonly isInline = false;\n  private _bucketNameParam?: cdk.CfnParameter;\n  private _objectKeyParam?: cdk.CfnParameter;\n\n  constructor(props: CfnParametersCodeProps = {}) {\n    super();\n\n    this._bucketNameParam = props.bucketNameParam;\n    this._objectKeyParam = props.objectKeyParam;\n  }\n\n  public bind(scope: Construct): CodeConfig {\n    if (!this._bucketNameParam) {\n      this._bucketNameParam = new cdk.CfnParameter(scope, 'LambdaSourceBucketNameParameter', {\n        type: 'String',\n      });\n    }\n\n    if (!this._objectKeyParam) {\n      this._objectKeyParam = new cdk.CfnParameter(scope, 'LambdaSourceObjectKeyParameter', {\n        type: 'String',\n      });\n    }\n\n    return {\n      s3Location: {\n        bucketName: this._bucketNameParam.valueAsString,\n        objectKey: this._objectKeyParam.valueAsString,\n      },\n    };\n  }\n\nn  public assign(location: s3.Location): { [name: string]: any } {\n    const ret: { [name: string]: any } = {};\n    ret[this.bucketNameParam] = location.bucketName;\n    ret[this.objectKeyParam] = location.objectKey;\n    return ret;\n  }\n\n  public get bucketNameParam(): string {\n    if (this._bucketNameParam) {\n      return this._bucketNameParam.logicalId;\n    } else {\n      throw new Error('Pass CfnParametersCode to a Lambda Function before accessing the bucketNameParam property');\n    }\n  }\n\n  public get objectKeyParam(): string {\n    if (this._objectKeyParam) {\n      return this._objectKeyParam.logicalId;\n    } else {\n      throw new Error('Pass CfnParametersCode to a Lambda Function before accessing the objectKeyParam property');\n    }\n  }\n}\n\n                                                      \nexport interface EcrImageCodeProps {\n                                                                                                                                                                                                                                                                                                                          \n  readonly cmd?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n  readonly entrypoint?: string[];\n\n                                                                                                                                                                                                                                                                                                                         \n  readonly workingDirectory?: string;\n\n                                                                                             \n  readonly tag?: string;\n}\n\n                                                                             \nexport class EcrImageCode extends Code {\n  public readonly isInline: boolean = false;\n\n  constructor(private readonly repository: ecr.IRepository, private readonly props: EcrImageCodeProps = {}) {\n    super();\n  }\n\n  public bind(_: Construct): CodeConfig {\n    this.repository.grantPull(new iam.ServicePrincipal('lambda.amazonaws.com'));\n\n    return {\n      image: {\n        imageUri: this.repository.repositoryUriForTag(this.props?.tag ?? 'latest'),\n        cmd: this.props.cmd,\n        entrypoint: this.props.entrypoint,\n        workingDirectory: this.props.workingDirectory,\n      },\n    };\n  }\n}\n\n                                                    \nexport interface AssetImageCodeProps extends ecr_assets.DockerImageAssetOptions {\n                                                                                                                                                                                                                                                                                                                          \n  readonly cmd?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n  readonly entrypoint?: string[];\n\n                                                                                                                                                                                                                                                                                                                         \n  readonly workingDirectory?: string;\n}\n\n                                                                                                                     \nexport class AssetImageCode extends Code {\n  public readonly isInline: boolean = false;\n  private asset?: ecr_assets.DockerImageAsset;\n\n  constructor(private readonly directory: string, private readonly props: AssetImageCodeProps) {\n    super();\n  }\n\n  public bind(scope: Construct): CodeConfig {\n    // If the same AssetImageCode is used multiple times, retain only the first instantiation.\n    if (!this.asset) {\n      this.asset = new ecr_assets.DockerImageAsset(scope, 'AssetImage', {\n        directory: this.directory,\n        ...this.props,\n      });\n      this.asset.repository.grantPull(new iam.ServicePrincipal('lambda.amazonaws.com'));\n    } else if (cdk.Stack.of(this.asset) !== cdk.Stack.of(scope)) {\n      throw new Error(`Asset is already associated with another stack '${cdk.Stack.of(this.asset).stackName}'. ` +\n        'Create a new Code instance for every stack.');\n    }\n\n    return {\n      image: {\n        imageUri: this.asset.imageUri,\n        entrypoint: this.props.entrypoint,\n        cmd: this.props.cmd,\n        workingDirectory: this.props.workingDirectory,\n      },\n    };\n  }\n\n  public bindToResource(resource: cdk.CfnResource, options: ResourceBindOptions = { }) {\n    if (!this.asset) {\n      throw new Error('bindToResource() must be called after bind()');\n    }\n\n    const resourceProperty = options.resourceProperty || 'Code.ImageUri';\n\n    // https://github.com/aws/aws-cdk/issues/14593\n    this.asset.addResourceMetadata(resource, resourceProperty);\n  }\n}\n\n                                                              \nexport interface DockerBuildAssetOptions extends cdk.DockerBuildOptions {\n                                                                                                                                  \n  readonly imagePath?: string;\n\n                                                                                                                                                                                       \n  readonly outputPath?: string;\n}\n"],
  "mappings": "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",
  "names": []
}
