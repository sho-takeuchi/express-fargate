{
  "version": 3,
  "sources": ["event-source-mapping.ts"],
  "sourcesContent": ["import * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { IEventSourceDlq } from './dlq';\nimport { IFunction } from './function-base';\nimport { CfnEventSourceMapping } from './lambda.generated';\n\n                                                                                                                                                                                                                                                      \nexport class SourceAccessConfigurationType {\n\n                                                                                     \n  public static readonly BASIC_AUTH = new SourceAccessConfigurationType('BASIC_AUTH');\n\n                                                                                                                                                  \n  public static readonly VPC_SUBNET = new SourceAccessConfigurationType('VPC_SUBNET');\n\n                                                                                                        \n  public static readonly VPC_SECURITY_GROUP = new SourceAccessConfigurationType('VPC_SECURITY_GROUP');\n\n                                                                                                                                             \n  public static readonly SASL_SCRAM_256_AUTH = new SourceAccessConfigurationType('SASL_SCRAM_256_AUTH');\n\n                                                                                                                                             \n  public static readonly SASL_SCRAM_512_AUTH = new SourceAccessConfigurationType('SASL_SCRAM_512_AUTH');\n\n                                                                                                                                                                                                                                                 \n  public static readonly CLIENT_CERTIFICATE_TLS_AUTH = new SourceAccessConfigurationType('CLIENT_CERTIFICATE_TLS_AUTH');\n\n                                                      \n  public static of(name: string): SourceAccessConfigurationType {\n    return new SourceAccessConfigurationType(name);\n  }\n\n                                                                                                                                                                                                                                                                                                                    \n  public readonly type: string;\n\n  private constructor(type: string) {\n    this.type = type;\n  }\n}\n\n                                                                                                                          \nexport interface SourceAccessConfiguration {\n                                                                                                                                     \n  readonly type: SourceAccessConfigurationType,\n                                                                                                                                                                                                                                                       \n  readonly uri: string\n}\n\nexport interface EventSourceMappingOptions {\n                                                                                                                                                                                                                                       \n  readonly eventSourceArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n  readonly batchSize?: number;\n\n                                                                                                             \n  readonly bisectBatchOnError?: boolean;\n\n                                                                                                                                            \n  readonly onFailure?: IEventSourceDlq;\n\n                                                                                                \n  readonly enabled?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                       \n  readonly startingPosition?: StartingPosition;\n\n                                                                                                                                                                                                                                       \n  readonly reportBatchItemFailures?: boolean;\n\n                                                                                                                                                                      \n  readonly maxBatchingWindow?: cdk.Duration;\n\n                                                                                                                                                                                                                                           \n  readonly maxRecordAge?: cdk.Duration;\n\n                                                                                                                                                                                                                                                                                                                                            \n  readonly retryAttempts?: number;\n\n                                                                                                                                                                           \n  readonly parallelizationFactor?: number;\n\n                                                                           \n  readonly kafkaTopic?: string;\n\n                                                                                                                                                                                                                                                             \n  readonly tumblingWindow?: cdk.Duration;\n\n                                                                                                                                                                                                                                                                                        \n  readonly kafkaBootstrapServers?: string[]\n\n                                                                                                                                                                                                                                                                                                           \n  readonly sourceAccessConfigurations?: SourceAccessConfiguration[]\n}\n\n                                                               \nexport interface EventSourceMappingProps extends EventSourceMappingOptions {\n                                                \n  readonly target: IFunction;\n}\n\n                                                                                                                                                            \nexport interface IEventSourceMapping extends cdk.IResource {\n                                                                           \n  readonly eventSourceMappingId: string;\n}\n\nnexport class EventSourceMapping extends cdk.Resource implements IEventSourceMapping {\n\n                                                                                 \n  public static fromEventSourceMappingId(scope: Construct, id: string, eventSourceMappingId: string): IEventSourceMapping {\n    class Import extends cdk.Resource implements IEventSourceMapping {\n      public readonly eventSourceMappingId = eventSourceMappingId;\n    }\n    return new Import(scope, id);\n  }\n\n  public readonly eventSourceMappingId: string;\n\n  constructor(scope: Construct, id: string, props: EventSourceMappingProps) {\n    super(scope, id);\n\n    if (props.eventSourceArn == undefined && props.kafkaBootstrapServers == undefined) {\n      throw new Error('Either eventSourceArn or kafkaBootstrapServers must be set');\n    }\n\n    if (props.eventSourceArn !== undefined && props.kafkaBootstrapServers !== undefined) {\n      throw new Error('eventSourceArn and kafkaBootstrapServers are mutually exclusive');\n    }\n\n    if (props.kafkaBootstrapServers && (props.kafkaBootstrapServers?.length < 1)) {\n      throw new Error('kafkaBootStrapServers must not be empty if set');\n    }\n\n    if (props.maxBatchingWindow && props.maxBatchingWindow.toSeconds() > 300) {\n      throw new Error(`maxBatchingWindow cannot be over 300 seconds, got ${props.maxBatchingWindow.toSeconds()}`);\n    }\n\n    if (props.maxRecordAge && (props.maxRecordAge.toSeconds() < 60 || props.maxRecordAge.toDays({ integral: false }) > 7)) {\n      throw new Error('maxRecordAge must be between 60 seconds and 7 days inclusive');\n    }\n\n    props.retryAttempts !== undefined && cdk.withResolved(props.retryAttempts, (attempts) => {\n      if (attempts < 0 || attempts > 10000) {\n        throw new Error(`retryAttempts must be between 0 and 10000 inclusive, got ${attempts}`);\n      }\n    });\n\n    props.parallelizationFactor !== undefined && cdk.withResolved(props.parallelizationFactor, (factor) => {\n      if (factor < 1 || factor > 10) {\n        throw new Error(`parallelizationFactor must be between 1 and 10 inclusive, got ${factor}`);\n      }\n    });\n\n    if (props.tumblingWindow && !cdk.Token.isUnresolved(props.tumblingWindow) && props.tumblingWindow.toSeconds() > 900) {\n      throw new Error(`tumblingWindow cannot be over 900 seconds, got ${props.tumblingWindow.toSeconds()}`);\n    }\n\n\n    let destinationConfig;\n\n    if (props.onFailure) {\n      destinationConfig = {\n        onFailure: props.onFailure.bind(this, props.target),\n      };\n    }\n\n    let selfManagedEventSource;\n    if (props.kafkaBootstrapServers) {\n      selfManagedEventSource = { endpoints: { kafkaBootstrapServers: props.kafkaBootstrapServers } };\n    }\n\n    const cfnEventSourceMapping = new CfnEventSourceMapping(this, 'Resource', {\n      batchSize: props.batchSize,\n      bisectBatchOnFunctionError: props.bisectBatchOnError,\n      destinationConfig,\n      enabled: props.enabled,\n      eventSourceArn: props.eventSourceArn,\n      functionName: props.target.functionName,\n      startingPosition: props.startingPosition,\n      functionResponseTypes: props.reportBatchItemFailures ? ['ReportBatchItemFailures'] : undefined,\n      maximumBatchingWindowInSeconds: props.maxBatchingWindow?.toSeconds(),\n      maximumRecordAgeInSeconds: props.maxRecordAge?.toSeconds(),\n      maximumRetryAttempts: props.retryAttempts,\n      parallelizationFactor: props.parallelizationFactor,\n      topics: props.kafkaTopic !== undefined ? [props.kafkaTopic] : undefined,\n      tumblingWindowInSeconds: props.tumblingWindow?.toSeconds(),\n      sourceAccessConfigurations: props.sourceAccessConfigurations?.map((o) => {return { type: o.type.type, uri: o.uri };}),\n      selfManagedEventSource,\n    });\n    this.eventSourceMappingId = cfnEventSourceMapping.ref;\n  }\n}\n\n                                                                                                        \nexport enum StartingPosition {\n                                                                                                                                          \n  TRIM_HORIZON = 'TRIM_HORIZON',\n\n                                                                                                                                             \n  LATEST = 'LATEST',\n}\n"],
  "mappings": "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",
  "names": []
}
