{
  "version": 3,
  "sources": ["filesystem.ts"],
  "sourcesContent": ["import { Connections } from '../../aws-ec2';\nimport * as efs from '../../aws-efs';\nimport * as iam from '../../aws-iam';\nimport { Stack } from '../../core';\nimport { IDependable } from 'constructs';\n\n                                                            \nexport interface FileSystemConfig {\n                                                             \n  readonly localMountPath: string;\n\n                                        \n  readonly arn: string;\n\n                                                                                                        \n  readonly dependency?: IDependable[]\n\n                                                                                                                                                                                  \n  readonly connections?: Connections;\n\n                                                                                                                              \n  readonly policies?: iam.PolicyStatement[];\n}\n\n                                                            \nexport class FileSystem {\n                                                                                                                                                                        \n  public static fromEfsAccessPoint(ap: efs.IAccessPoint, mountPath: string): FileSystem {\n    return new FileSystem({\n      localMountPath: mountPath,\n      arn: ap.accessPointArn,\n      dependency: [ap.fileSystem.mountTargetsAvailable],\n      connections: ap.fileSystem.connections,\n      policies: [\n        new iam.PolicyStatement({\n          actions: ['elasticfilesystem:ClientMount'],\n          resources: ['*'],\n          conditions: {\n            StringEquals: {\n              'elasticfilesystem:AccessPointArn': ap.accessPointArn,\n            },\n          },\n        }),\n        new iam.PolicyStatement({\n          actions: ['elasticfilesystem:ClientWrite'],\n          resources: [Stack.of(ap).formatArn({\n            service: 'elasticfilesystem',\n            resource: 'file-system',\n            resourceName: ap.fileSystem.fileSystemId,\n          })],\n        }),\n      ],\n    });\n  }\n\n                                                                                    \n  protected constructor(public readonly config: FileSystemConfig) { }\n}\n"],
  "mappings": "iNAEA,IAAA,QAAA,iBACA,OAAA,QAAA,cAsBA,gBAAuB,CA+BrB,YAAsC,OAAwB,CAAxB,KAAA,OAAA,qFA7BxB,oBAAmB,GAAsB,UAAiB,qEAC/D,GAAI,YAAW,CACpB,eAAgB,UAChB,IAAK,GAAG,eACR,WAAY,CAAC,GAAG,WAAW,uBAC3B,YAAa,GAAG,WAAW,YAC3B,SAAU,CACR,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAAC,iCACV,UAAW,CAAC,KACZ,WAAY,CACV,aAAc,CACZ,mCAAoC,GAAG,mBAI7C,GAAI,KAAI,gBAAgB,CACtB,QAAS,CAAC,iCACV,UAAW,CAAC,OAAA,MAAM,GAAG,IAAI,UAAU,CACjC,QAAS,oBACT,SAAU,cACV,aAAc,GAAG,WAAW,sBAvBxC,QAAA,WAAA",
  "names": []
}
