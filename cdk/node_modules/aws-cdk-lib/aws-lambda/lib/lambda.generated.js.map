{
  "version": 3,
  "sources": ["lambda.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:58:10.810Z\",\"fingerprint\":\"+exF4Tp+mnFt4/uZtyFdtR8wQlEhbD3ps8EAgt7X4dA=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                             \nexport interface CfnAliasProps {\n\nn    readonly functionName: string;\n\n                                                                                                                                                                                                                     \n    readonly functionVersion: string;\n\n                                                                                                                                                                                    \n    readonly name: string;\n\n                                                                                                                                                                                                \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                              \n    readonly provisionedConcurrencyConfig?: CfnAlias.ProvisionedConcurrencyConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                         \n    readonly routingConfig?: CfnAlias.AliasRoutingConfigurationProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAliasProps`\n *\n * @param properties - the TypeScript properties of a `CfnAliasProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAliasPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('functionName', cdk.requiredValidator)(properties.functionName));\n    errors.collect(cdk.propertyValidator('functionName', cdk.validateString)(properties.functionName));\n    errors.collect(cdk.propertyValidator('functionVersion', cdk.requiredValidator)(properties.functionVersion));\n    errors.collect(cdk.propertyValidator('functionVersion', cdk.validateString)(properties.functionVersion));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('provisionedConcurrencyConfig', CfnAlias_ProvisionedConcurrencyConfigurationPropertyValidator)(properties.provisionedConcurrencyConfig));\n    errors.collect(cdk.propertyValidator('routingConfig', CfnAlias_AliasRoutingConfigurationPropertyValidator)(properties.routingConfig));\n    return errors.wrap('supplied properties not correct for \"CfnAliasProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Alias` resource\n *\n * @param properties - the TypeScript properties of a `CfnAliasProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Alias` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAliasPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAliasPropsValidator(properties).assertSuccess();\n    return {\n        FunctionName: cdk.stringToCloudFormation(properties.functionName),\n        FunctionVersion: cdk.stringToCloudFormation(properties.functionVersion),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Description: cdk.stringToCloudFormation(properties.description),\n        ProvisionedConcurrencyConfig: cfnAliasProvisionedConcurrencyConfigurationPropertyToCloudFormation(properties.provisionedConcurrencyConfig),\n        RoutingConfig: cfnAliasAliasRoutingConfigurationPropertyToCloudFormation(properties.routingConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAliasPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAliasProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAliasProps>();\n    ret.addPropertyResult('functionName', 'FunctionName', cfn_parse.FromCloudFormation.getString(properties.FunctionName));\n    ret.addPropertyResult('functionVersion', 'FunctionVersion', cfn_parse.FromCloudFormation.getString(properties.FunctionVersion));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('provisionedConcurrencyConfig', 'ProvisionedConcurrencyConfig', properties.ProvisionedConcurrencyConfig != null ? CfnAliasProvisionedConcurrencyConfigurationPropertyFromCloudFormation(properties.ProvisionedConcurrencyConfig) : undefined);\n    ret.addPropertyResult('routingConfig', 'RoutingConfig', properties.RoutingConfig != null ? CfnAliasAliasRoutingConfigurationPropertyFromCloudFormation(properties.RoutingConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnAlias extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lambda::Alias\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAlias {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAliasPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAlias(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\nn    public functionName: string;\n\n                                                                                                                                                                                                                     \n    public functionVersion: string;\n\n                                                                                                                                                                                    \n    public name: string;\n\n                                                                                                                                                                                                \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                              \n    public provisionedConcurrencyConfig: CfnAlias.ProvisionedConcurrencyConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                         \n    public routingConfig: CfnAlias.AliasRoutingConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnAliasProps) {\n        super(scope, id, { type: CfnAlias.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'functionName', this);\n        cdk.requireProperty(props, 'functionVersion', this);\n        cdk.requireProperty(props, 'name', this);\n\n        this.functionName = props.functionName;\n        this.functionVersion = props.functionVersion;\n        this.name = props.name;\n        this.description = props.description;\n        this.provisionedConcurrencyConfig = props.provisionedConcurrencyConfig;\n        this.routingConfig = props.routingConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAlias.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            functionName: this.functionName,\n            functionVersion: this.functionVersion,\n            name: this.name,\n            description: this.description,\n            provisionedConcurrencyConfig: this.provisionedConcurrencyConfig,\n            routingConfig: this.routingConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAliasPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnAlias {\n                                                                                                                                                                                                                                                                                                                                                                              \n    export interface AliasRoutingConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                  \n        readonly additionalVersionWeights: Array<CfnAlias.VersionWeightProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AliasRoutingConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `AliasRoutingConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAlias_AliasRoutingConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('additionalVersionWeights', cdk.requiredValidator)(properties.additionalVersionWeights));\n    errors.collect(cdk.propertyValidator('additionalVersionWeights', cdk.listValidator(CfnAlias_VersionWeightPropertyValidator))(properties.additionalVersionWeights));\n    return errors.wrap('supplied properties not correct for \"AliasRoutingConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Alias.AliasRoutingConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `AliasRoutingConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Alias.AliasRoutingConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAliasAliasRoutingConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAlias_AliasRoutingConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AdditionalVersionWeights: cdk.listMapper(cfnAliasVersionWeightPropertyToCloudFormation)(properties.additionalVersionWeights),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAliasAliasRoutingConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAlias.AliasRoutingConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAlias.AliasRoutingConfigurationProperty>();\n    ret.addPropertyResult('additionalVersionWeights', 'AdditionalVersionWeights', cfn_parse.FromCloudFormation.getArray(CfnAliasVersionWeightPropertyFromCloudFormation)(properties.AdditionalVersionWeights));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAlias {\n                                                                                                                                                                                                                                                                                              \n    export interface ProvisionedConcurrencyConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly provisionedConcurrentExecutions: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ProvisionedConcurrencyConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ProvisionedConcurrencyConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAlias_ProvisionedConcurrencyConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('provisionedConcurrentExecutions', cdk.requiredValidator)(properties.provisionedConcurrentExecutions));\n    errors.collect(cdk.propertyValidator('provisionedConcurrentExecutions', cdk.validateNumber)(properties.provisionedConcurrentExecutions));\n    return errors.wrap('supplied properties not correct for \"ProvisionedConcurrencyConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Alias.ProvisionedConcurrencyConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ProvisionedConcurrencyConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Alias.ProvisionedConcurrencyConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAliasProvisionedConcurrencyConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAlias_ProvisionedConcurrencyConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ProvisionedConcurrentExecutions: cdk.numberToCloudFormation(properties.provisionedConcurrentExecutions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAliasProvisionedConcurrencyConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAlias.ProvisionedConcurrencyConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAlias.ProvisionedConcurrencyConfigurationProperty>();\n    ret.addPropertyResult('provisionedConcurrentExecutions', 'ProvisionedConcurrentExecutions', cfn_parse.FromCloudFormation.getNumber(properties.ProvisionedConcurrentExecutions));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAlias {\n                                                                                                                                                                                                                                                                                                                                                                  \n    export interface VersionWeightProperty {\n                                                                                                                                                                                                                                                               \n        readonly functionVersion: string;\n                                                                                                                                                                                                                                                                                                \n        readonly functionWeight: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VersionWeightProperty`\n *\n * @param properties - the TypeScript properties of a `VersionWeightProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAlias_VersionWeightPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('functionVersion', cdk.requiredValidator)(properties.functionVersion));\n    errors.collect(cdk.propertyValidator('functionVersion', cdk.validateString)(properties.functionVersion));\n    errors.collect(cdk.propertyValidator('functionWeight', cdk.requiredValidator)(properties.functionWeight));\n    errors.collect(cdk.propertyValidator('functionWeight', cdk.validateNumber)(properties.functionWeight));\n    return errors.wrap('supplied properties not correct for \"VersionWeightProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Alias.VersionWeight` resource\n *\n * @param properties - the TypeScript properties of a `VersionWeightProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Alias.VersionWeight` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAliasVersionWeightPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAlias_VersionWeightPropertyValidator(properties).assertSuccess();\n    return {\n        FunctionVersion: cdk.stringToCloudFormation(properties.functionVersion),\n        FunctionWeight: cdk.numberToCloudFormation(properties.functionWeight),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAliasVersionWeightPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAlias.VersionWeightProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAlias.VersionWeightProperty>();\n    ret.addPropertyResult('functionVersion', 'FunctionVersion', cfn_parse.FromCloudFormation.getString(properties.FunctionVersion));\n    ret.addPropertyResult('functionWeight', 'FunctionWeight', cfn_parse.FromCloudFormation.getNumber(properties.FunctionWeight));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                     \nexport interface CfnCodeSigningConfigProps {\n\n                                                                                                                                                                                                                              \n    readonly allowedPublishers: CfnCodeSigningConfig.AllowedPublishersProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                     \n    readonly codeSigningPolicies?: CfnCodeSigningConfig.CodeSigningPoliciesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                    \n    readonly description?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCodeSigningConfigProps`\n *\n * @param properties - the TypeScript properties of a `CfnCodeSigningConfigProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCodeSigningConfigPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowedPublishers', cdk.requiredValidator)(properties.allowedPublishers));\n    errors.collect(cdk.propertyValidator('allowedPublishers', CfnCodeSigningConfig_AllowedPublishersPropertyValidator)(properties.allowedPublishers));\n    errors.collect(cdk.propertyValidator('codeSigningPolicies', CfnCodeSigningConfig_CodeSigningPoliciesPropertyValidator)(properties.codeSigningPolicies));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    return errors.wrap('supplied properties not correct for \"CfnCodeSigningConfigProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::CodeSigningConfig` resource\n *\n * @param properties - the TypeScript properties of a `CfnCodeSigningConfigProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::CodeSigningConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCodeSigningConfigPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCodeSigningConfigPropsValidator(properties).assertSuccess();\n    return {\n        AllowedPublishers: cfnCodeSigningConfigAllowedPublishersPropertyToCloudFormation(properties.allowedPublishers),\n        CodeSigningPolicies: cfnCodeSigningConfigCodeSigningPoliciesPropertyToCloudFormation(properties.codeSigningPolicies),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCodeSigningConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCodeSigningConfigProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCodeSigningConfigProps>();\n    ret.addPropertyResult('allowedPublishers', 'AllowedPublishers', CfnCodeSigningConfigAllowedPublishersPropertyFromCloudFormation(properties.AllowedPublishers));\n    ret.addPropertyResult('codeSigningPolicies', 'CodeSigningPolicies', properties.CodeSigningPolicies != null ? CfnCodeSigningConfigCodeSigningPoliciesPropertyFromCloudFormation(properties.CodeSigningPolicies) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \nexport class CfnCodeSigningConfig extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lambda::CodeSigningConfig\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCodeSigningConfig {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCodeSigningConfigPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCodeSigningConfig(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                             \n    public readonly attrCodeSigningConfigArn: string;\n\n                                                                                                             \n    public readonly attrCodeSigningConfigId: string;\n\n                                                                                                                                                                                                                              \n    public allowedPublishers: CfnCodeSigningConfig.AllowedPublishersProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                     \n    public codeSigningPolicies: CfnCodeSigningConfig.CodeSigningPoliciesProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                    \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnCodeSigningConfigProps) {\n        super(scope, id, { type: CfnCodeSigningConfig.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'allowedPublishers', this);\n        this.attrCodeSigningConfigArn = cdk.Token.asString(this.getAtt('CodeSigningConfigArn'));\n        this.attrCodeSigningConfigId = cdk.Token.asString(this.getAtt('CodeSigningConfigId'));\n\n        this.allowedPublishers = props.allowedPublishers;\n        this.codeSigningPolicies = props.codeSigningPolicies;\n        this.description = props.description;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCodeSigningConfig.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            allowedPublishers: this.allowedPublishers,\n            codeSigningPolicies: this.codeSigningPolicies,\n            description: this.description,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCodeSigningConfigPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCodeSigningConfig {\n                                                                                                                                                                                                                                                                               \n    export interface AllowedPublishersProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly signingProfileVersionArns: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AllowedPublishersProperty`\n *\n * @param properties - the TypeScript properties of a `AllowedPublishersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCodeSigningConfig_AllowedPublishersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('signingProfileVersionArns', cdk.requiredValidator)(properties.signingProfileVersionArns));\n    errors.collect(cdk.propertyValidator('signingProfileVersionArns', cdk.listValidator(cdk.validateString))(properties.signingProfileVersionArns));\n    return errors.wrap('supplied properties not correct for \"AllowedPublishersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::CodeSigningConfig.AllowedPublishers` resource\n *\n * @param properties - the TypeScript properties of a `AllowedPublishersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::CodeSigningConfig.AllowedPublishers` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCodeSigningConfigAllowedPublishersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCodeSigningConfig_AllowedPublishersPropertyValidator(properties).assertSuccess();\n    return {\n        SigningProfileVersionArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.signingProfileVersionArns),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCodeSigningConfigAllowedPublishersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCodeSigningConfig.AllowedPublishersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCodeSigningConfig.AllowedPublishersProperty>();\n    ret.addPropertyResult('signingProfileVersionArns', 'SigningProfileVersionArns', cfn_parse.FromCloudFormation.getStringArray(properties.SigningProfileVersionArns));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCodeSigningConfig {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface CodeSigningPoliciesProperty {\nn        readonly untrustedArtifactOnDeployment: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CodeSigningPoliciesProperty`\n *\n * @param properties - the TypeScript properties of a `CodeSigningPoliciesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCodeSigningConfig_CodeSigningPoliciesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('untrustedArtifactOnDeployment', cdk.requiredValidator)(properties.untrustedArtifactOnDeployment));\n    errors.collect(cdk.propertyValidator('untrustedArtifactOnDeployment', cdk.validateString)(properties.untrustedArtifactOnDeployment));\n    return errors.wrap('supplied properties not correct for \"CodeSigningPoliciesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::CodeSigningConfig.CodeSigningPolicies` resource\n *\n * @param properties - the TypeScript properties of a `CodeSigningPoliciesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::CodeSigningConfig.CodeSigningPolicies` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCodeSigningConfigCodeSigningPoliciesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCodeSigningConfig_CodeSigningPoliciesPropertyValidator(properties).assertSuccess();\n    return {\n        UntrustedArtifactOnDeployment: cdk.stringToCloudFormation(properties.untrustedArtifactOnDeployment),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCodeSigningConfigCodeSigningPoliciesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCodeSigningConfig.CodeSigningPoliciesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCodeSigningConfig.CodeSigningPoliciesProperty>();\n    ret.addPropertyResult('untrustedArtifactOnDeployment', 'UntrustedArtifactOnDeployment', cfn_parse.FromCloudFormation.getString(properties.UntrustedArtifactOnDeployment));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                     \nexport interface CfnEventInvokeConfigProps {\n\n                                                                                                                                                                                                                                                                                                                                        \n    readonly functionName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly qualifier: string;\n\nn    readonly destinationConfig?: CfnEventInvokeConfig.DestinationConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                      \n    readonly maximumEventAgeInSeconds?: number;\n\n                                                                                                                                                                                                                                                                              \n    readonly maximumRetryAttempts?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEventInvokeConfigProps`\n *\n * @param properties - the TypeScript properties of a `CfnEventInvokeConfigProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventInvokeConfigPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationConfig', CfnEventInvokeConfig_DestinationConfigPropertyValidator)(properties.destinationConfig));\n    errors.collect(cdk.propertyValidator('functionName', cdk.requiredValidator)(properties.functionName));\n    errors.collect(cdk.propertyValidator('functionName', cdk.validateString)(properties.functionName));\n    errors.collect(cdk.propertyValidator('maximumEventAgeInSeconds', cdk.validateNumber)(properties.maximumEventAgeInSeconds));\n    errors.collect(cdk.propertyValidator('maximumRetryAttempts', cdk.validateNumber)(properties.maximumRetryAttempts));\n    errors.collect(cdk.propertyValidator('qualifier', cdk.requiredValidator)(properties.qualifier));\n    errors.collect(cdk.propertyValidator('qualifier', cdk.validateString)(properties.qualifier));\n    return errors.wrap('supplied properties not correct for \"CfnEventInvokeConfigProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::EventInvokeConfig` resource\n *\n * @param properties - the TypeScript properties of a `CfnEventInvokeConfigProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::EventInvokeConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventInvokeConfigPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventInvokeConfigPropsValidator(properties).assertSuccess();\n    return {\n        FunctionName: cdk.stringToCloudFormation(properties.functionName),\n        Qualifier: cdk.stringToCloudFormation(properties.qualifier),\n        DestinationConfig: cfnEventInvokeConfigDestinationConfigPropertyToCloudFormation(properties.destinationConfig),\n        MaximumEventAgeInSeconds: cdk.numberToCloudFormation(properties.maximumEventAgeInSeconds),\n        MaximumRetryAttempts: cdk.numberToCloudFormation(properties.maximumRetryAttempts),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventInvokeConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventInvokeConfigProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventInvokeConfigProps>();\n    ret.addPropertyResult('functionName', 'FunctionName', cfn_parse.FromCloudFormation.getString(properties.FunctionName));\n    ret.addPropertyResult('qualifier', 'Qualifier', cfn_parse.FromCloudFormation.getString(properties.Qualifier));\n    ret.addPropertyResult('destinationConfig', 'DestinationConfig', properties.DestinationConfig != null ? CfnEventInvokeConfigDestinationConfigPropertyFromCloudFormation(properties.DestinationConfig) : undefined);\n    ret.addPropertyResult('maximumEventAgeInSeconds', 'MaximumEventAgeInSeconds', properties.MaximumEventAgeInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumEventAgeInSeconds) : undefined);\n    ret.addPropertyResult('maximumRetryAttempts', 'MaximumRetryAttempts', properties.MaximumRetryAttempts != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumRetryAttempts) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnEventInvokeConfig extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lambda::EventInvokeConfig\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEventInvokeConfig {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEventInvokeConfigPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEventInvokeConfig(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                        \n    public functionName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                        \n    public qualifier: string;\n\nn    public destinationConfig: CfnEventInvokeConfig.DestinationConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                      \n    public maximumEventAgeInSeconds: number | undefined;\n\n                                                                                                                                                                                                                                                                              \n    public maximumRetryAttempts: number | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnEventInvokeConfigProps) {\n        super(scope, id, { type: CfnEventInvokeConfig.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'functionName', this);\n        cdk.requireProperty(props, 'qualifier', this);\n\n        this.functionName = props.functionName;\n        this.qualifier = props.qualifier;\n        this.destinationConfig = props.destinationConfig;\n        this.maximumEventAgeInSeconds = props.maximumEventAgeInSeconds;\n        this.maximumRetryAttempts = props.maximumRetryAttempts;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEventInvokeConfig.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            functionName: this.functionName,\n            qualifier: this.qualifier,\n            destinationConfig: this.destinationConfig,\n            maximumEventAgeInSeconds: this.maximumEventAgeInSeconds,\n            maximumRetryAttempts: this.maximumRetryAttempts,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEventInvokeConfigPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnEventInvokeConfig {\n                                                                                                                                                                                                                                                                                                                     \n    export interface DestinationConfigProperty {\n                                                                                                                                                                                                                                                                                                          \n        readonly onFailure?: CfnEventInvokeConfig.OnFailureProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                              \n        readonly onSuccess?: CfnEventInvokeConfig.OnSuccessProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DestinationConfigProperty`\n *\n * @param properties - the TypeScript properties of a `DestinationConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventInvokeConfig_DestinationConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('onFailure', CfnEventInvokeConfig_OnFailurePropertyValidator)(properties.onFailure));\n    errors.collect(cdk.propertyValidator('onSuccess', CfnEventInvokeConfig_OnSuccessPropertyValidator)(properties.onSuccess));\n    return errors.wrap('supplied properties not correct for \"DestinationConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::EventInvokeConfig.DestinationConfig` resource\n *\n * @param properties - the TypeScript properties of a `DestinationConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::EventInvokeConfig.DestinationConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventInvokeConfigDestinationConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventInvokeConfig_DestinationConfigPropertyValidator(properties).assertSuccess();\n    return {\n        OnFailure: cfnEventInvokeConfigOnFailurePropertyToCloudFormation(properties.onFailure),\n        OnSuccess: cfnEventInvokeConfigOnSuccessPropertyToCloudFormation(properties.onSuccess),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventInvokeConfigDestinationConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventInvokeConfig.DestinationConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventInvokeConfig.DestinationConfigProperty>();\n    ret.addPropertyResult('onFailure', 'OnFailure', properties.OnFailure != null ? CfnEventInvokeConfigOnFailurePropertyFromCloudFormation(properties.OnFailure) : undefined);\n    ret.addPropertyResult('onSuccess', 'OnSuccess', properties.OnSuccess != null ? CfnEventInvokeConfigOnSuccessPropertyFromCloudFormation(properties.OnSuccess) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEventInvokeConfig {\n                                                                                                                                                                                                                                                                                   \n    export interface OnFailureProperty {\n                                                                                                                                                                                                                                                                                                                                      \n        readonly destination: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OnFailureProperty`\n *\n * @param properties - the TypeScript properties of a `OnFailureProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventInvokeConfig_OnFailurePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destination', cdk.requiredValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('destination', cdk.validateString)(properties.destination));\n    return errors.wrap('supplied properties not correct for \"OnFailureProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::EventInvokeConfig.OnFailure` resource\n *\n * @param properties - the TypeScript properties of a `OnFailureProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::EventInvokeConfig.OnFailure` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventInvokeConfigOnFailurePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventInvokeConfig_OnFailurePropertyValidator(properties).assertSuccess();\n    return {\n        Destination: cdk.stringToCloudFormation(properties.destination),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventInvokeConfigOnFailurePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventInvokeConfig.OnFailureProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventInvokeConfig.OnFailureProperty>();\n    ret.addPropertyResult('destination', 'Destination', cfn_parse.FromCloudFormation.getString(properties.Destination));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEventInvokeConfig {\n                                                                                                                                                                                                                                                                                             \n    export interface OnSuccessProperty {\n                                                                                                                                                                                                                                                                                                                                      \n        readonly destination: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OnSuccessProperty`\n *\n * @param properties - the TypeScript properties of a `OnSuccessProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventInvokeConfig_OnSuccessPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destination', cdk.requiredValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('destination', cdk.validateString)(properties.destination));\n    return errors.wrap('supplied properties not correct for \"OnSuccessProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::EventInvokeConfig.OnSuccess` resource\n *\n * @param properties - the TypeScript properties of a `OnSuccessProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::EventInvokeConfig.OnSuccess` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventInvokeConfigOnSuccessPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventInvokeConfig_OnSuccessPropertyValidator(properties).assertSuccess();\n    return {\n        Destination: cdk.stringToCloudFormation(properties.destination),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventInvokeConfigOnSuccessPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventInvokeConfig.OnSuccessProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventInvokeConfig.OnSuccessProperty>();\n    ret.addPropertyResult('destination', 'Destination', cfn_parse.FromCloudFormation.getString(properties.Destination));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                       \nexport interface CfnEventSourceMappingProps {\n\nn    readonly functionName: string;\n\nn    readonly batchSize?: number;\n\n                                                                                                                                                                                                                                                                                                                            \n    readonly bisectBatchOnFunctionError?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                              \n    readonly destinationConfig?: CfnEventSourceMapping.DestinationConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                       \n    readonly enabled?: boolean | cdk.IResolvable;\n\nn    readonly eventSourceArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly filterCriteria?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    readonly functionResponseTypes?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly maximumBatchingWindowInSeconds?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly maximumRecordAgeInSeconds?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly maximumRetryAttempts?: number;\n\n                                                                                                                                                                                                                                                                                                              \n    readonly parallelizationFactor?: number;\n\n                                                                                                                                                                                                                                                                    \n    readonly queues?: string[];\n\n                                                                                                                                                                                                                                                                      \n    readonly selfManagedEventSource?: CfnEventSourceMapping.SelfManagedEventSourceProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                              \n    readonly sourceAccessConfigurations?: Array<CfnEventSourceMapping.SourceAccessConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly startingPosition?: string;\n\n                                                                                                                                                                                                                                                                                                                        \n    readonly startingPositionTimestamp?: number;\n\n                                                                                                                                                                                                                      \n    readonly topics?: string[];\n\n                                                                                                                                                                                                                                                                                                                          \n    readonly tumblingWindowInSeconds?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEventSourceMappingProps`\n *\n * @param properties - the TypeScript properties of a `CfnEventSourceMappingProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventSourceMappingPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('batchSize', cdk.validateNumber)(properties.batchSize));\n    errors.collect(cdk.propertyValidator('bisectBatchOnFunctionError', cdk.validateBoolean)(properties.bisectBatchOnFunctionError));\n    errors.collect(cdk.propertyValidator('destinationConfig', CfnEventSourceMapping_DestinationConfigPropertyValidator)(properties.destinationConfig));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('eventSourceArn', cdk.validateString)(properties.eventSourceArn));\n    errors.collect(cdk.propertyValidator('filterCriteria', cdk.validateObject)(properties.filterCriteria));\n    errors.collect(cdk.propertyValidator('functionName', cdk.requiredValidator)(properties.functionName));\n    errors.collect(cdk.propertyValidator('functionName', cdk.validateString)(properties.functionName));\n    errors.collect(cdk.propertyValidator('functionResponseTypes', cdk.listValidator(cdk.validateString))(properties.functionResponseTypes));\n    errors.collect(cdk.propertyValidator('maximumBatchingWindowInSeconds', cdk.validateNumber)(properties.maximumBatchingWindowInSeconds));\n    errors.collect(cdk.propertyValidator('maximumRecordAgeInSeconds', cdk.validateNumber)(properties.maximumRecordAgeInSeconds));\n    errors.collect(cdk.propertyValidator('maximumRetryAttempts', cdk.validateNumber)(properties.maximumRetryAttempts));\n    errors.collect(cdk.propertyValidator('parallelizationFactor', cdk.validateNumber)(properties.parallelizationFactor));\n    errors.collect(cdk.propertyValidator('queues', cdk.listValidator(cdk.validateString))(properties.queues));\n    errors.collect(cdk.propertyValidator('selfManagedEventSource', CfnEventSourceMapping_SelfManagedEventSourcePropertyValidator)(properties.selfManagedEventSource));\n    errors.collect(cdk.propertyValidator('sourceAccessConfigurations', cdk.listValidator(CfnEventSourceMapping_SourceAccessConfigurationPropertyValidator))(properties.sourceAccessConfigurations));\n    errors.collect(cdk.propertyValidator('startingPosition', cdk.validateString)(properties.startingPosition));\n    errors.collect(cdk.propertyValidator('startingPositionTimestamp', cdk.validateNumber)(properties.startingPositionTimestamp));\n    errors.collect(cdk.propertyValidator('topics', cdk.listValidator(cdk.validateString))(properties.topics));\n    errors.collect(cdk.propertyValidator('tumblingWindowInSeconds', cdk.validateNumber)(properties.tumblingWindowInSeconds));\n    return errors.wrap('supplied properties not correct for \"CfnEventSourceMappingProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::EventSourceMapping` resource\n *\n * @param properties - the TypeScript properties of a `CfnEventSourceMappingProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::EventSourceMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventSourceMappingPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventSourceMappingPropsValidator(properties).assertSuccess();\n    return {\n        FunctionName: cdk.stringToCloudFormation(properties.functionName),\n        BatchSize: cdk.numberToCloudFormation(properties.batchSize),\n        BisectBatchOnFunctionError: cdk.booleanToCloudFormation(properties.bisectBatchOnFunctionError),\n        DestinationConfig: cfnEventSourceMappingDestinationConfigPropertyToCloudFormation(properties.destinationConfig),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        EventSourceArn: cdk.stringToCloudFormation(properties.eventSourceArn),\n        FilterCriteria: cdk.objectToCloudFormation(properties.filterCriteria),\n        FunctionResponseTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.functionResponseTypes),\n        MaximumBatchingWindowInSeconds: cdk.numberToCloudFormation(properties.maximumBatchingWindowInSeconds),\n        MaximumRecordAgeInSeconds: cdk.numberToCloudFormation(properties.maximumRecordAgeInSeconds),\n        MaximumRetryAttempts: cdk.numberToCloudFormation(properties.maximumRetryAttempts),\n        ParallelizationFactor: cdk.numberToCloudFormation(properties.parallelizationFactor),\n        Queues: cdk.listMapper(cdk.stringToCloudFormation)(properties.queues),\n        SelfManagedEventSource: cfnEventSourceMappingSelfManagedEventSourcePropertyToCloudFormation(properties.selfManagedEventSource),\n        SourceAccessConfigurations: cdk.listMapper(cfnEventSourceMappingSourceAccessConfigurationPropertyToCloudFormation)(properties.sourceAccessConfigurations),\n        StartingPosition: cdk.stringToCloudFormation(properties.startingPosition),\n        StartingPositionTimestamp: cdk.numberToCloudFormation(properties.startingPositionTimestamp),\n        Topics: cdk.listMapper(cdk.stringToCloudFormation)(properties.topics),\n        TumblingWindowInSeconds: cdk.numberToCloudFormation(properties.tumblingWindowInSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventSourceMappingPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventSourceMappingProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventSourceMappingProps>();\n    ret.addPropertyResult('functionName', 'FunctionName', cfn_parse.FromCloudFormation.getString(properties.FunctionName));\n    ret.addPropertyResult('batchSize', 'BatchSize', properties.BatchSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.BatchSize) : undefined);\n    ret.addPropertyResult('bisectBatchOnFunctionError', 'BisectBatchOnFunctionError', properties.BisectBatchOnFunctionError != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BisectBatchOnFunctionError) : undefined);\n    ret.addPropertyResult('destinationConfig', 'DestinationConfig', properties.DestinationConfig != null ? CfnEventSourceMappingDestinationConfigPropertyFromCloudFormation(properties.DestinationConfig) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('eventSourceArn', 'EventSourceArn', properties.EventSourceArn != null ? cfn_parse.FromCloudFormation.getString(properties.EventSourceArn) : undefined);\n    ret.addPropertyResult('filterCriteria', 'FilterCriteria', properties.FilterCriteria != null ? cfn_parse.FromCloudFormation.getAny(properties.FilterCriteria) : undefined);\n    ret.addPropertyResult('functionResponseTypes', 'FunctionResponseTypes', properties.FunctionResponseTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.FunctionResponseTypes) : undefined);\n    ret.addPropertyResult('maximumBatchingWindowInSeconds', 'MaximumBatchingWindowInSeconds', properties.MaximumBatchingWindowInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumBatchingWindowInSeconds) : undefined);\n    ret.addPropertyResult('maximumRecordAgeInSeconds', 'MaximumRecordAgeInSeconds', properties.MaximumRecordAgeInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumRecordAgeInSeconds) : undefined);\n    ret.addPropertyResult('maximumRetryAttempts', 'MaximumRetryAttempts', properties.MaximumRetryAttempts != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumRetryAttempts) : undefined);\n    ret.addPropertyResult('parallelizationFactor', 'ParallelizationFactor', properties.ParallelizationFactor != null ? cfn_parse.FromCloudFormation.getNumber(properties.ParallelizationFactor) : undefined);\n    ret.addPropertyResult('queues', 'Queues', properties.Queues != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Queues) : undefined);\n    ret.addPropertyResult('selfManagedEventSource', 'SelfManagedEventSource', properties.SelfManagedEventSource != null ? CfnEventSourceMappingSelfManagedEventSourcePropertyFromCloudFormation(properties.SelfManagedEventSource) : undefined);\n    ret.addPropertyResult('sourceAccessConfigurations', 'SourceAccessConfigurations', properties.SourceAccessConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnEventSourceMappingSourceAccessConfigurationPropertyFromCloudFormation)(properties.SourceAccessConfigurations) : undefined);\n    ret.addPropertyResult('startingPosition', 'StartingPosition', properties.StartingPosition != null ? cfn_parse.FromCloudFormation.getString(properties.StartingPosition) : undefined);\n    ret.addPropertyResult('startingPositionTimestamp', 'StartingPositionTimestamp', properties.StartingPositionTimestamp != null ? cfn_parse.FromCloudFormation.getNumber(properties.StartingPositionTimestamp) : undefined);\n    ret.addPropertyResult('topics', 'Topics', properties.Topics != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Topics) : undefined);\n    ret.addPropertyResult('tumblingWindowInSeconds', 'TumblingWindowInSeconds', properties.TumblingWindowInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.TumblingWindowInSeconds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnEventSourceMapping extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lambda::EventSourceMapping\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEventSourceMapping {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEventSourceMappingPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEventSourceMapping(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                         \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public functionName: string;\n\nn    public batchSize: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                            \n    public bisectBatchOnFunctionError: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                              \n    public destinationConfig: CfnEventSourceMapping.DestinationConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                       \n    public enabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public eventSourceArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public filterCriteria: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    public functionResponseTypes: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public maximumBatchingWindowInSeconds: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public maximumRecordAgeInSeconds: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public maximumRetryAttempts: number | undefined;\n\n                                                                                                                                                                                                                                                                                                              \n    public parallelizationFactor: number | undefined;\n\n                                                                                                                                                                                                                                                                    \n    public queues: string[] | undefined;\n\n                                                                                                                                                                                                                                                                      \n    public selfManagedEventSource: CfnEventSourceMapping.SelfManagedEventSourceProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                              \n    public sourceAccessConfigurations: Array<CfnEventSourceMapping.SourceAccessConfigurationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public startingPosition: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                        \n    public startingPositionTimestamp: number | undefined;\n\n                                                                                                                                                                                                                      \n    public topics: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                          \n    public tumblingWindowInSeconds: number | undefined;\n\n                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnEventSourceMappingProps) {\n        super(scope, id, { type: CfnEventSourceMapping.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'functionName', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.functionName = props.functionName;\n        this.batchSize = props.batchSize;\n        this.bisectBatchOnFunctionError = props.bisectBatchOnFunctionError;\n        this.destinationConfig = props.destinationConfig;\n        this.enabled = props.enabled;\n        this.eventSourceArn = props.eventSourceArn;\n        this.filterCriteria = props.filterCriteria;\n        this.functionResponseTypes = props.functionResponseTypes;\n        this.maximumBatchingWindowInSeconds = props.maximumBatchingWindowInSeconds;\n        this.maximumRecordAgeInSeconds = props.maximumRecordAgeInSeconds;\n        this.maximumRetryAttempts = props.maximumRetryAttempts;\n        this.parallelizationFactor = props.parallelizationFactor;\n        this.queues = props.queues;\n        this.selfManagedEventSource = props.selfManagedEventSource;\n        this.sourceAccessConfigurations = props.sourceAccessConfigurations;\n        this.startingPosition = props.startingPosition;\n        this.startingPositionTimestamp = props.startingPositionTimestamp;\n        this.topics = props.topics;\n        this.tumblingWindowInSeconds = props.tumblingWindowInSeconds;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEventSourceMapping.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            functionName: this.functionName,\n            batchSize: this.batchSize,\n            bisectBatchOnFunctionError: this.bisectBatchOnFunctionError,\n            destinationConfig: this.destinationConfig,\n            enabled: this.enabled,\n            eventSourceArn: this.eventSourceArn,\n            filterCriteria: this.filterCriteria,\n            functionResponseTypes: this.functionResponseTypes,\n            maximumBatchingWindowInSeconds: this.maximumBatchingWindowInSeconds,\n            maximumRecordAgeInSeconds: this.maximumRecordAgeInSeconds,\n            maximumRetryAttempts: this.maximumRetryAttempts,\n            parallelizationFactor: this.parallelizationFactor,\n            queues: this.queues,\n            selfManagedEventSource: this.selfManagedEventSource,\n            sourceAccessConfigurations: this.sourceAccessConfigurations,\n            startingPosition: this.startingPosition,\n            startingPositionTimestamp: this.startingPositionTimestamp,\n            topics: this.topics,\n            tumblingWindowInSeconds: this.tumblingWindowInSeconds,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEventSourceMappingPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnEventSourceMapping {\n                                                                                                                                                                                                                                                                                                                      \n    export interface DestinationConfigProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly onFailure?: CfnEventSourceMapping.OnFailureProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DestinationConfigProperty`\n *\n * @param properties - the TypeScript properties of a `DestinationConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventSourceMapping_DestinationConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('onFailure', CfnEventSourceMapping_OnFailurePropertyValidator)(properties.onFailure));\n    return errors.wrap('supplied properties not correct for \"DestinationConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::EventSourceMapping.DestinationConfig` resource\n *\n * @param properties - the TypeScript properties of a `DestinationConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::EventSourceMapping.DestinationConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventSourceMappingDestinationConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventSourceMapping_DestinationConfigPropertyValidator(properties).assertSuccess();\n    return {\n        OnFailure: cfnEventSourceMappingOnFailurePropertyToCloudFormation(properties.onFailure),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventSourceMappingDestinationConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventSourceMapping.DestinationConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventSourceMapping.DestinationConfigProperty>();\n    ret.addPropertyResult('onFailure', 'OnFailure', properties.OnFailure != null ? CfnEventSourceMappingOnFailurePropertyFromCloudFormation(properties.OnFailure) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEventSourceMapping {\n                                                                                                                                                                                                                                                                                                                                                                     \n    export interface EndpointsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly kafkaBootstrapServers?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EndpointsProperty`\n *\n * @param properties - the TypeScript properties of a `EndpointsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventSourceMapping_EndpointsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kafkaBootstrapServers', cdk.listValidator(cdk.validateString))(properties.kafkaBootstrapServers));\n    return errors.wrap('supplied properties not correct for \"EndpointsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::EventSourceMapping.Endpoints` resource\n *\n * @param properties - the TypeScript properties of a `EndpointsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::EventSourceMapping.Endpoints` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventSourceMappingEndpointsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventSourceMapping_EndpointsPropertyValidator(properties).assertSuccess();\n    return {\n        KafkaBootstrapServers: cdk.listMapper(cdk.stringToCloudFormation)(properties.kafkaBootstrapServers),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventSourceMappingEndpointsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventSourceMapping.EndpointsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventSourceMapping.EndpointsProperty>();\n    ret.addPropertyResult('kafkaBootstrapServers', 'KafkaBootstrapServers', properties.KafkaBootstrapServers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.KafkaBootstrapServers) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEventSourceMapping {\n                                                                                                                                                                                                                                                                  \n    export interface OnFailureProperty {\n                                                                                                                                                                                                                                                                                                    \n        readonly destination?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OnFailureProperty`\n *\n * @param properties - the TypeScript properties of a `OnFailureProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventSourceMapping_OnFailurePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destination', cdk.validateString)(properties.destination));\n    return errors.wrap('supplied properties not correct for \"OnFailureProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::EventSourceMapping.OnFailure` resource\n *\n * @param properties - the TypeScript properties of a `OnFailureProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::EventSourceMapping.OnFailure` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventSourceMappingOnFailurePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventSourceMapping_OnFailurePropertyValidator(properties).assertSuccess();\n    return {\n        Destination: cdk.stringToCloudFormation(properties.destination),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventSourceMappingOnFailurePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventSourceMapping.OnFailureProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventSourceMapping.OnFailureProperty>();\n    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? cfn_parse.FromCloudFormation.getString(properties.Destination) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEventSourceMapping {\n                                                                                                                                                                                                                                                                                           \n    export interface SelfManagedEventSourceProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly endpoints?: CfnEventSourceMapping.EndpointsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SelfManagedEventSourceProperty`\n *\n * @param properties - the TypeScript properties of a `SelfManagedEventSourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventSourceMapping_SelfManagedEventSourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpoints', CfnEventSourceMapping_EndpointsPropertyValidator)(properties.endpoints));\n    return errors.wrap('supplied properties not correct for \"SelfManagedEventSourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::EventSourceMapping.SelfManagedEventSource` resource\n *\n * @param properties - the TypeScript properties of a `SelfManagedEventSourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::EventSourceMapping.SelfManagedEventSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventSourceMappingSelfManagedEventSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventSourceMapping_SelfManagedEventSourcePropertyValidator(properties).assertSuccess();\n    return {\n        Endpoints: cfnEventSourceMappingEndpointsPropertyToCloudFormation(properties.endpoints),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventSourceMappingSelfManagedEventSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventSourceMapping.SelfManagedEventSourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventSourceMapping.SelfManagedEventSourceProperty>();\n    ret.addPropertyResult('endpoints', 'Endpoints', properties.Endpoints != null ? CfnEventSourceMappingEndpointsPropertyFromCloudFormation(properties.Endpoints) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEventSourceMapping {\n                                                                                                                                                                                                                                                                                                                                                  \n    export interface SourceAccessConfigurationProperty {\nn        readonly type?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly uri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SourceAccessConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `SourceAccessConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventSourceMapping_SourceAccessConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('uri', cdk.validateString)(properties.uri));\n    return errors.wrap('supplied properties not correct for \"SourceAccessConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::EventSourceMapping.SourceAccessConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `SourceAccessConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::EventSourceMapping.SourceAccessConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventSourceMappingSourceAccessConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventSourceMapping_SourceAccessConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n        URI: cdk.stringToCloudFormation(properties.uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventSourceMappingSourceAccessConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventSourceMapping.SourceAccessConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventSourceMapping.SourceAccessConfigurationProperty>();\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('uri', 'URI', properties.URI != null ? cfn_parse.FromCloudFormation.getString(properties.URI) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                   \nexport interface CfnFunctionProps {\n\n                                                                                                                                                                                              \n    readonly code: CfnFunction.CodeProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                    \n    readonly role: string;\n\n                                                                                                                                                                                                                                                                                                                                              \n    readonly architectures?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly codeSigningConfigArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly deadLetterConfig?: CfnFunction.DeadLetterConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                         \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                         \n    readonly environment?: CfnFunction.EnvironmentProperty | cdk.IResolvable;\n\nn    readonly fileSystemConfigs?: Array<CfnFunction.FileSystemConfigProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly functionName?: string;\n\nn    readonly handler?: string;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    readonly imageConfig?: CfnFunction.ImageConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    readonly kmsKeyArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n    readonly layers?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly memorySize?: number;\n\n                                                                                                                                                                                                                                                                                  \n    readonly packageType?: string;\n\n                                                                                                                                                                                                                                                              \n    readonly reservedConcurrentExecutions?: number;\n\n                                                                                                                                                                                                                                                                                                                                                            \n    readonly runtime?: string;\n\n                                                                                                                                                                                                                                                                         \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly timeout?: number;\n\n                                                                                                                                                                                                                                                                                                                                     \n    readonly tracingConfig?: CfnFunction.TracingConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                  \n    readonly vpcConfig?: CfnFunction.VpcConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFunctionProps`\n *\n * @param properties - the TypeScript properties of a `CfnFunctionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFunctionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('architectures', cdk.listValidator(cdk.validateString))(properties.architectures));\n    errors.collect(cdk.propertyValidator('code', cdk.requiredValidator)(properties.code));\n    errors.collect(cdk.propertyValidator('code', CfnFunction_CodePropertyValidator)(properties.code));\n    errors.collect(cdk.propertyValidator('codeSigningConfigArn', cdk.validateString)(properties.codeSigningConfigArn));\n    errors.collect(cdk.propertyValidator('deadLetterConfig', CfnFunction_DeadLetterConfigPropertyValidator)(properties.deadLetterConfig));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('environment', CfnFunction_EnvironmentPropertyValidator)(properties.environment));\n    errors.collect(cdk.propertyValidator('fileSystemConfigs', cdk.listValidator(CfnFunction_FileSystemConfigPropertyValidator))(properties.fileSystemConfigs));\n    errors.collect(cdk.propertyValidator('functionName', cdk.validateString)(properties.functionName));\n    errors.collect(cdk.propertyValidator('handler', cdk.validateString)(properties.handler));\n    errors.collect(cdk.propertyValidator('imageConfig', CfnFunction_ImageConfigPropertyValidator)(properties.imageConfig));\n    errors.collect(cdk.propertyValidator('kmsKeyArn', cdk.validateString)(properties.kmsKeyArn));\n    errors.collect(cdk.propertyValidator('layers', cdk.listValidator(cdk.validateString))(properties.layers));\n    errors.collect(cdk.propertyValidator('memorySize', cdk.validateNumber)(properties.memorySize));\n    errors.collect(cdk.propertyValidator('packageType', cdk.validateString)(properties.packageType));\n    errors.collect(cdk.propertyValidator('reservedConcurrentExecutions', cdk.validateNumber)(properties.reservedConcurrentExecutions));\n    errors.collect(cdk.propertyValidator('role', cdk.requiredValidator)(properties.role));\n    errors.collect(cdk.propertyValidator('role', cdk.validateString)(properties.role));\n    errors.collect(cdk.propertyValidator('runtime', cdk.validateString)(properties.runtime));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('timeout', cdk.validateNumber)(properties.timeout));\n    errors.collect(cdk.propertyValidator('tracingConfig', CfnFunction_TracingConfigPropertyValidator)(properties.tracingConfig));\n    errors.collect(cdk.propertyValidator('vpcConfig', CfnFunction_VpcConfigPropertyValidator)(properties.vpcConfig));\n    return errors.wrap('supplied properties not correct for \"CfnFunctionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Function` resource\n *\n * @param properties - the TypeScript properties of a `CfnFunctionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Function` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFunctionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFunctionPropsValidator(properties).assertSuccess();\n    return {\n        Code: cfnFunctionCodePropertyToCloudFormation(properties.code),\n        Role: cdk.stringToCloudFormation(properties.role),\n        Architectures: cdk.listMapper(cdk.stringToCloudFormation)(properties.architectures),\n        CodeSigningConfigArn: cdk.stringToCloudFormation(properties.codeSigningConfigArn),\n        DeadLetterConfig: cfnFunctionDeadLetterConfigPropertyToCloudFormation(properties.deadLetterConfig),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Environment: cfnFunctionEnvironmentPropertyToCloudFormation(properties.environment),\n        FileSystemConfigs: cdk.listMapper(cfnFunctionFileSystemConfigPropertyToCloudFormation)(properties.fileSystemConfigs),\n        FunctionName: cdk.stringToCloudFormation(properties.functionName),\n        Handler: cdk.stringToCloudFormation(properties.handler),\n        ImageConfig: cfnFunctionImageConfigPropertyToCloudFormation(properties.imageConfig),\n        KmsKeyArn: cdk.stringToCloudFormation(properties.kmsKeyArn),\n        Layers: cdk.listMapper(cdk.stringToCloudFormation)(properties.layers),\n        MemorySize: cdk.numberToCloudFormation(properties.memorySize),\n        PackageType: cdk.stringToCloudFormation(properties.packageType),\n        ReservedConcurrentExecutions: cdk.numberToCloudFormation(properties.reservedConcurrentExecutions),\n        Runtime: cdk.stringToCloudFormation(properties.runtime),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Timeout: cdk.numberToCloudFormation(properties.timeout),\n        TracingConfig: cfnFunctionTracingConfigPropertyToCloudFormation(properties.tracingConfig),\n        VpcConfig: cfnFunctionVpcConfigPropertyToCloudFormation(properties.vpcConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFunctionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFunctionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFunctionProps>();\n    ret.addPropertyResult('code', 'Code', CfnFunctionCodePropertyFromCloudFormation(properties.Code));\n    ret.addPropertyResult('role', 'Role', cfn_parse.FromCloudFormation.getString(properties.Role));\n    ret.addPropertyResult('architectures', 'Architectures', properties.Architectures != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Architectures) : undefined);\n    ret.addPropertyResult('codeSigningConfigArn', 'CodeSigningConfigArn', properties.CodeSigningConfigArn != null ? cfn_parse.FromCloudFormation.getString(properties.CodeSigningConfigArn) : undefined);\n    ret.addPropertyResult('deadLetterConfig', 'DeadLetterConfig', properties.DeadLetterConfig != null ? CfnFunctionDeadLetterConfigPropertyFromCloudFormation(properties.DeadLetterConfig) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('environment', 'Environment', properties.Environment != null ? CfnFunctionEnvironmentPropertyFromCloudFormation(properties.Environment) : undefined);\n    ret.addPropertyResult('fileSystemConfigs', 'FileSystemConfigs', properties.FileSystemConfigs != null ? cfn_parse.FromCloudFormation.getArray(CfnFunctionFileSystemConfigPropertyFromCloudFormation)(properties.FileSystemConfigs) : undefined);\n    ret.addPropertyResult('functionName', 'FunctionName', properties.FunctionName != null ? cfn_parse.FromCloudFormation.getString(properties.FunctionName) : undefined);\n    ret.addPropertyResult('handler', 'Handler', properties.Handler != null ? cfn_parse.FromCloudFormation.getString(properties.Handler) : undefined);\n    ret.addPropertyResult('imageConfig', 'ImageConfig', properties.ImageConfig != null ? CfnFunctionImageConfigPropertyFromCloudFormation(properties.ImageConfig) : undefined);\n    ret.addPropertyResult('kmsKeyArn', 'KmsKeyArn', properties.KmsKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyArn) : undefined);\n    ret.addPropertyResult('layers', 'Layers', properties.Layers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Layers) : undefined);\n    ret.addPropertyResult('memorySize', 'MemorySize', properties.MemorySize != null ? cfn_parse.FromCloudFormation.getNumber(properties.MemorySize) : undefined);\n    ret.addPropertyResult('packageType', 'PackageType', properties.PackageType != null ? cfn_parse.FromCloudFormation.getString(properties.PackageType) : undefined);\n    ret.addPropertyResult('reservedConcurrentExecutions', 'ReservedConcurrentExecutions', properties.ReservedConcurrentExecutions != null ? cfn_parse.FromCloudFormation.getNumber(properties.ReservedConcurrentExecutions) : undefined);\n    ret.addPropertyResult('runtime', 'Runtime', properties.Runtime != null ? cfn_parse.FromCloudFormation.getString(properties.Runtime) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('timeout', 'Timeout', properties.Timeout != null ? cfn_parse.FromCloudFormation.getNumber(properties.Timeout) : undefined);\n    ret.addPropertyResult('tracingConfig', 'TracingConfig', properties.TracingConfig != null ? CfnFunctionTracingConfigPropertyFromCloudFormation(properties.TracingConfig) : undefined);\n    ret.addPropertyResult('vpcConfig', 'VpcConfig', properties.VpcConfig != null ? CfnFunctionVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnFunction extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lambda::Function\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFunction {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFunctionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFunction(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                          \n    public readonly attrArn: string;\n\n                                                                                                                                                                                              \n    public code: CfnFunction.CodeProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                    \n    public role: string;\n\n                                                                                                                                                                                                                                                                                                                                              \n    public architectures: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \n    public codeSigningConfigArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public deadLetterConfig: CfnFunction.DeadLetterConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                         \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                         \n    public environment: CfnFunction.EnvironmentProperty | cdk.IResolvable | undefined;\n\nn    public fileSystemConfigs: Array<CfnFunction.FileSystemConfigProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public functionName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public handler: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    public imageConfig: CfnFunction.ImageConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    public kmsKeyArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n    public layers: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public memorySize: number | undefined;\n\n                                                                                                                                                                                                                                                                                  \n    public packageType: string | undefined;\n\n                                                                                                                                                                                                                                                              \n    public reservedConcurrentExecutions: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                            \n    public runtime: string | undefined;\n\n                                                                                                                                                                                                                                                                         \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public timeout: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                     \n    public tracingConfig: CfnFunction.TracingConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                  \n    public vpcConfig: CfnFunction.VpcConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnFunctionProps) {\n        super(scope, id, { type: CfnFunction.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'code', this);\n        cdk.requireProperty(props, 'role', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.code = props.code;\n        this.role = props.role;\n        this.architectures = props.architectures;\n        this.codeSigningConfigArn = props.codeSigningConfigArn;\n        this.deadLetterConfig = props.deadLetterConfig;\n        this.description = props.description;\n        this.environment = props.environment;\n        this.fileSystemConfigs = props.fileSystemConfigs;\n        this.functionName = props.functionName;\n        this.handler = props.handler;\n        this.imageConfig = props.imageConfig;\n        this.kmsKeyArn = props.kmsKeyArn;\n        this.layers = props.layers;\n        this.memorySize = props.memorySize;\n        this.packageType = props.packageType;\n        this.reservedConcurrentExecutions = props.reservedConcurrentExecutions;\n        this.runtime = props.runtime;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Lambda::Function\", props.tags, { tagPropertyName: 'tags' });\n        this.timeout = props.timeout;\n        this.tracingConfig = props.tracingConfig;\n        this.vpcConfig = props.vpcConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFunction.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            code: this.code,\n            role: this.role,\n            architectures: this.architectures,\n            codeSigningConfigArn: this.codeSigningConfigArn,\n            deadLetterConfig: this.deadLetterConfig,\n            description: this.description,\n            environment: this.environment,\n            fileSystemConfigs: this.fileSystemConfigs,\n            functionName: this.functionName,\n            handler: this.handler,\n            imageConfig: this.imageConfig,\n            kmsKeyArn: this.kmsKeyArn,\n            layers: this.layers,\n            memorySize: this.memorySize,\n            packageType: this.packageType,\n            reservedConcurrentExecutions: this.reservedConcurrentExecutions,\n            runtime: this.runtime,\n            tags: this.tags.renderTags(),\n            timeout: this.timeout,\n            tracingConfig: this.tracingConfig,\n            vpcConfig: this.vpcConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFunctionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnFunction {\nn    export interface CodeProperty {\n                                                                                                                                                                                                                                                                                                                               \n        readonly imageUri?: string;\n                                                                                                                                                                                                                                                                                                                  \n        readonly s3Bucket?: string;\n                                                                                                                                                                                                                                                 \n        readonly s3Key?: string;\n                                                                                                                                                                                                                                                                                          \n        readonly s3ObjectVersion?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly zipFile?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CodeProperty`\n *\n * @param properties - the TypeScript properties of a `CodeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFunction_CodePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('imageUri', cdk.validateString)(properties.imageUri));\n    errors.collect(cdk.propertyValidator('s3Bucket', cdk.validateString)(properties.s3Bucket));\n    errors.collect(cdk.propertyValidator('s3Key', cdk.validateString)(properties.s3Key));\n    errors.collect(cdk.propertyValidator('s3ObjectVersion', cdk.validateString)(properties.s3ObjectVersion));\n    errors.collect(cdk.propertyValidator('zipFile', cdk.validateString)(properties.zipFile));\n    return errors.wrap('supplied properties not correct for \"CodeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Function.Code` resource\n *\n * @param properties - the TypeScript properties of a `CodeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Function.Code` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFunctionCodePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFunction_CodePropertyValidator(properties).assertSuccess();\n    return {\n        ImageUri: cdk.stringToCloudFormation(properties.imageUri),\n        S3Bucket: cdk.stringToCloudFormation(properties.s3Bucket),\n        S3Key: cdk.stringToCloudFormation(properties.s3Key),\n        S3ObjectVersion: cdk.stringToCloudFormation(properties.s3ObjectVersion),\n        ZipFile: cdk.stringToCloudFormation(properties.zipFile),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFunctionCodePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFunction.CodeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFunction.CodeProperty>();\n    ret.addPropertyResult('imageUri', 'ImageUri', properties.ImageUri != null ? cfn_parse.FromCloudFormation.getString(properties.ImageUri) : undefined);\n    ret.addPropertyResult('s3Bucket', 'S3Bucket', properties.S3Bucket != null ? cfn_parse.FromCloudFormation.getString(properties.S3Bucket) : undefined);\n    ret.addPropertyResult('s3Key', 'S3Key', properties.S3Key != null ? cfn_parse.FromCloudFormation.getString(properties.S3Key) : undefined);\n    ret.addPropertyResult('s3ObjectVersion', 'S3ObjectVersion', properties.S3ObjectVersion != null ? cfn_parse.FromCloudFormation.getString(properties.S3ObjectVersion) : undefined);\n    ret.addPropertyResult('zipFile', 'ZipFile', properties.ZipFile != null ? cfn_parse.FromCloudFormation.getString(properties.ZipFile) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFunction {\n                                                                                                                                                                                                                                                                                                                                                   \n    export interface DeadLetterConfigProperty {\n                                                                                                                                                                                                                                                                                                           \n        readonly targetArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeadLetterConfigProperty`\n *\n * @param properties - the TypeScript properties of a `DeadLetterConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFunction_DeadLetterConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('targetArn', cdk.validateString)(properties.targetArn));\n    return errors.wrap('supplied properties not correct for \"DeadLetterConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Function.DeadLetterConfig` resource\n *\n * @param properties - the TypeScript properties of a `DeadLetterConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Function.DeadLetterConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFunctionDeadLetterConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFunction_DeadLetterConfigPropertyValidator(properties).assertSuccess();\n    return {\n        TargetArn: cdk.stringToCloudFormation(properties.targetArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFunctionDeadLetterConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFunction.DeadLetterConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFunction.DeadLetterConfigProperty>();\n    ret.addPropertyResult('targetArn', 'TargetArn', properties.TargetArn != null ? cfn_parse.FromCloudFormation.getString(properties.TargetArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFunction {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface EnvironmentProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly variables?: { [key: string]: (string) } | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EnvironmentProperty`\n *\n * @param properties - the TypeScript properties of a `EnvironmentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFunction_EnvironmentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('variables', cdk.hashValidator(cdk.validateString))(properties.variables));\n    return errors.wrap('supplied properties not correct for \"EnvironmentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Function.Environment` resource\n *\n * @param properties - the TypeScript properties of a `EnvironmentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Function.Environment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFunctionEnvironmentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFunction_EnvironmentPropertyValidator(properties).assertSuccess();\n    return {\n        Variables: cdk.hashMapper(cdk.stringToCloudFormation)(properties.variables),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFunctionEnvironmentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFunction.EnvironmentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFunction.EnvironmentProperty>();\n    ret.addPropertyResult('variables', 'Variables', properties.Variables != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Variables) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFunction {\n                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface FileSystemConfigProperty {\n                                                                                                                                                                                                                                                                                                                                 \n        readonly arn: string;\n                                                                                                                                                                                                                                                                                                                     \n        readonly localMountPath: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FileSystemConfigProperty`\n *\n * @param properties - the TypeScript properties of a `FileSystemConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFunction_FileSystemConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    errors.collect(cdk.propertyValidator('localMountPath', cdk.requiredValidator)(properties.localMountPath));\n    errors.collect(cdk.propertyValidator('localMountPath', cdk.validateString)(properties.localMountPath));\n    return errors.wrap('supplied properties not correct for \"FileSystemConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Function.FileSystemConfig` resource\n *\n * @param properties - the TypeScript properties of a `FileSystemConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Function.FileSystemConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFunctionFileSystemConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFunction_FileSystemConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n        LocalMountPath: cdk.stringToCloudFormation(properties.localMountPath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFunctionFileSystemConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFunction.FileSystemConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFunction.FileSystemConfigProperty>();\n    ret.addPropertyResult('arn', 'Arn', cfn_parse.FromCloudFormation.getString(properties.Arn));\n    ret.addPropertyResult('localMountPath', 'LocalMountPath', cfn_parse.FromCloudFormation.getString(properties.LocalMountPath));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFunction {\n                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface ImageConfigProperty {\n                                                                                                                                                                                                                                                                                   \n        readonly command?: string[];\n                                                                                                                                                                                                                                                                                                                                  \n        readonly entryPoint?: string[];\n                                                                                                                                                                                                                                                              \n        readonly workingDirectory?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ImageConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ImageConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFunction_ImageConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('command', cdk.listValidator(cdk.validateString))(properties.command));\n    errors.collect(cdk.propertyValidator('entryPoint', cdk.listValidator(cdk.validateString))(properties.entryPoint));\n    errors.collect(cdk.propertyValidator('workingDirectory', cdk.validateString)(properties.workingDirectory));\n    return errors.wrap('supplied properties not correct for \"ImageConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Function.ImageConfig` resource\n *\n * @param properties - the TypeScript properties of a `ImageConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Function.ImageConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFunctionImageConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFunction_ImageConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Command: cdk.listMapper(cdk.stringToCloudFormation)(properties.command),\n        EntryPoint: cdk.listMapper(cdk.stringToCloudFormation)(properties.entryPoint),\n        WorkingDirectory: cdk.stringToCloudFormation(properties.workingDirectory),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFunctionImageConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFunction.ImageConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFunction.ImageConfigProperty>();\n    ret.addPropertyResult('command', 'Command', properties.Command != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Command) : undefined);\n    ret.addPropertyResult('entryPoint', 'EntryPoint', properties.EntryPoint != null ? cfn_parse.FromCloudFormation.getStringArray(properties.EntryPoint) : undefined);\n    ret.addPropertyResult('workingDirectory', 'WorkingDirectory', properties.WorkingDirectory != null ? cfn_parse.FromCloudFormation.getString(properties.WorkingDirectory) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFunction {\n                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface TracingConfigProperty {\n                                                                                                                                                                                                                                       \n        readonly mode?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TracingConfigProperty`\n *\n * @param properties - the TypeScript properties of a `TracingConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFunction_TracingConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('mode', cdk.validateString)(properties.mode));\n    return errors.wrap('supplied properties not correct for \"TracingConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Function.TracingConfig` resource\n *\n * @param properties - the TypeScript properties of a `TracingConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Function.TracingConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFunctionTracingConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFunction_TracingConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Mode: cdk.stringToCloudFormation(properties.mode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFunctionTracingConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFunction.TracingConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFunction.TracingConfigProperty>();\n    ret.addPropertyResult('mode', 'Mode', properties.Mode != null ? cfn_parse.FromCloudFormation.getString(properties.Mode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnFunction {\nn    export interface VpcConfigProperty {\n                                                                                                                                                                                                                                                            \n        readonly securityGroupIds?: string[];\n                                                                                                                                                                                                                                            \n        readonly subnetIds?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcConfigProperty`\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFunction_VpcConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    return errors.wrap('supplied properties not correct for \"VpcConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Function.VpcConfig` resource\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Function.VpcConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFunctionVpcConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFunction_VpcConfigPropertyValidator(properties).assertSuccess();\n    return {\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFunctionVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFunction.VpcConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFunction.VpcConfigProperty>();\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('subnetIds', 'SubnetIds', properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                           \nexport interface CfnLayerVersionProps {\n\n                                                                                                                                                                                                          \n    readonly content: CfnLayerVersion.ContentProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                        \n    readonly compatibleArchitectures?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly compatibleRuntimes?: string[];\n\n                                                                                                                                                                                                                  \n    readonly description?: string;\n\n                                                                                                                                                                                                                                     \n    readonly layerName?: string;\n\nn    readonly licenseInfo?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLayerVersionProps`\n *\n * @param properties - the TypeScript properties of a `CfnLayerVersionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLayerVersionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('compatibleArchitectures', cdk.listValidator(cdk.validateString))(properties.compatibleArchitectures));\n    errors.collect(cdk.propertyValidator('compatibleRuntimes', cdk.listValidator(cdk.validateString))(properties.compatibleRuntimes));\n    errors.collect(cdk.propertyValidator('content', cdk.requiredValidator)(properties.content));\n    errors.collect(cdk.propertyValidator('content', CfnLayerVersion_ContentPropertyValidator)(properties.content));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('layerName', cdk.validateString)(properties.layerName));\n    errors.collect(cdk.propertyValidator('licenseInfo', cdk.validateString)(properties.licenseInfo));\n    return errors.wrap('supplied properties not correct for \"CfnLayerVersionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::LayerVersion` resource\n *\n * @param properties - the TypeScript properties of a `CfnLayerVersionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::LayerVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLayerVersionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLayerVersionPropsValidator(properties).assertSuccess();\n    return {\n        Content: cfnLayerVersionContentPropertyToCloudFormation(properties.content),\n        CompatibleArchitectures: cdk.listMapper(cdk.stringToCloudFormation)(properties.compatibleArchitectures),\n        CompatibleRuntimes: cdk.listMapper(cdk.stringToCloudFormation)(properties.compatibleRuntimes),\n        Description: cdk.stringToCloudFormation(properties.description),\n        LayerName: cdk.stringToCloudFormation(properties.layerName),\n        LicenseInfo: cdk.stringToCloudFormation(properties.licenseInfo),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLayerVersionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLayerVersionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLayerVersionProps>();\n    ret.addPropertyResult('content', 'Content', CfnLayerVersionContentPropertyFromCloudFormation(properties.Content));\n    ret.addPropertyResult('compatibleArchitectures', 'CompatibleArchitectures', properties.CompatibleArchitectures != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CompatibleArchitectures) : undefined);\n    ret.addPropertyResult('compatibleRuntimes', 'CompatibleRuntimes', properties.CompatibleRuntimes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CompatibleRuntimes) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('layerName', 'LayerName', properties.LayerName != null ? cfn_parse.FromCloudFormation.getString(properties.LayerName) : undefined);\n    ret.addPropertyResult('licenseInfo', 'LicenseInfo', properties.LicenseInfo != null ? cfn_parse.FromCloudFormation.getString(properties.LicenseInfo) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                          \nexport class CfnLayerVersion extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lambda::LayerVersion\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLayerVersion {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLayerVersionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLayerVersion(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                          \n    public content: CfnLayerVersion.ContentProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                        \n    public compatibleArchitectures: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public compatibleRuntimes: string[] | undefined;\n\n                                                                                                                                                                                                                  \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                     \n    public layerName: string | undefined;\n\nn    public licenseInfo: string | undefined;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnLayerVersionProps) {\n        super(scope, id, { type: CfnLayerVersion.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'content', this);\n\n        this.content = props.content;\n        this.compatibleArchitectures = props.compatibleArchitectures;\n        this.compatibleRuntimes = props.compatibleRuntimes;\n        this.description = props.description;\n        this.layerName = props.layerName;\n        this.licenseInfo = props.licenseInfo;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLayerVersion.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            content: this.content,\n            compatibleArchitectures: this.compatibleArchitectures,\n            compatibleRuntimes: this.compatibleRuntimes,\n            description: this.description,\n            layerName: this.layerName,\n            licenseInfo: this.licenseInfo,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLayerVersionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnLayerVersion {\n                                                                                                                                                                                                                                                                                                                                                 \n    export interface ContentProperty {\n                                                                                                                                                                                                                                                                \n        readonly s3Bucket: string;\n                                                                                                                                                                                                                                                          \n        readonly s3Key: string;\n                                                                                                                                                                                                                                                                                                   \n        readonly s3ObjectVersion?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ContentProperty`\n *\n * @param properties - the TypeScript properties of a `ContentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLayerVersion_ContentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Bucket', cdk.requiredValidator)(properties.s3Bucket));\n    errors.collect(cdk.propertyValidator('s3Bucket', cdk.validateString)(properties.s3Bucket));\n    errors.collect(cdk.propertyValidator('s3Key', cdk.requiredValidator)(properties.s3Key));\n    errors.collect(cdk.propertyValidator('s3Key', cdk.validateString)(properties.s3Key));\n    errors.collect(cdk.propertyValidator('s3ObjectVersion', cdk.validateString)(properties.s3ObjectVersion));\n    return errors.wrap('supplied properties not correct for \"ContentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::LayerVersion.Content` resource\n *\n * @param properties - the TypeScript properties of a `ContentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::LayerVersion.Content` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLayerVersionContentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLayerVersion_ContentPropertyValidator(properties).assertSuccess();\n    return {\n        S3Bucket: cdk.stringToCloudFormation(properties.s3Bucket),\n        S3Key: cdk.stringToCloudFormation(properties.s3Key),\n        S3ObjectVersion: cdk.stringToCloudFormation(properties.s3ObjectVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLayerVersionContentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLayerVersion.ContentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLayerVersion.ContentProperty>();\n    ret.addPropertyResult('s3Bucket', 'S3Bucket', cfn_parse.FromCloudFormation.getString(properties.S3Bucket));\n    ret.addPropertyResult('s3Key', 'S3Key', cfn_parse.FromCloudFormation.getString(properties.S3Key));\n    ret.addPropertyResult('s3ObjectVersion', 'S3ObjectVersion', properties.S3ObjectVersion != null ? cfn_parse.FromCloudFormation.getString(properties.S3ObjectVersion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                               \nexport interface CfnLayerVersionPermissionProps {\n\n                                                                                                                                                                                                                                                                                         \n    readonly action: string;\n\n                                                                                                                                                                                                                                                               \n    readonly layerVersionArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly principal: string;\n\n                                                                                                                                                                                                                                                                                                         \n    readonly organizationId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLayerVersionPermissionProps`\n *\n * @param properties - the TypeScript properties of a `CfnLayerVersionPermissionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLayerVersionPermissionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('action', cdk.requiredValidator)(properties.action));\n    errors.collect(cdk.propertyValidator('action', cdk.validateString)(properties.action));\n    errors.collect(cdk.propertyValidator('layerVersionArn', cdk.requiredValidator)(properties.layerVersionArn));\n    errors.collect(cdk.propertyValidator('layerVersionArn', cdk.validateString)(properties.layerVersionArn));\n    errors.collect(cdk.propertyValidator('organizationId', cdk.validateString)(properties.organizationId));\n    errors.collect(cdk.propertyValidator('principal', cdk.requiredValidator)(properties.principal));\n    errors.collect(cdk.propertyValidator('principal', cdk.validateString)(properties.principal));\n    return errors.wrap('supplied properties not correct for \"CfnLayerVersionPermissionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::LayerVersionPermission` resource\n *\n * @param properties - the TypeScript properties of a `CfnLayerVersionPermissionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::LayerVersionPermission` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLayerVersionPermissionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLayerVersionPermissionPropsValidator(properties).assertSuccess();\n    return {\n        Action: cdk.stringToCloudFormation(properties.action),\n        LayerVersionArn: cdk.stringToCloudFormation(properties.layerVersionArn),\n        Principal: cdk.stringToCloudFormation(properties.principal),\n        OrganizationId: cdk.stringToCloudFormation(properties.organizationId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLayerVersionPermissionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLayerVersionPermissionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLayerVersionPermissionProps>();\n    ret.addPropertyResult('action', 'Action', cfn_parse.FromCloudFormation.getString(properties.Action));\n    ret.addPropertyResult('layerVersionArn', 'LayerVersionArn', cfn_parse.FromCloudFormation.getString(properties.LayerVersionArn));\n    ret.addPropertyResult('principal', 'Principal', cfn_parse.FromCloudFormation.getString(properties.Principal));\n    ret.addPropertyResult('organizationId', 'OrganizationId', properties.OrganizationId != null ? cfn_parse.FromCloudFormation.getString(properties.OrganizationId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnLayerVersionPermission extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lambda::LayerVersionPermission\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLayerVersionPermission {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLayerVersionPermissionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLayerVersionPermission(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                         \n    public action: string;\n\n                                                                                                                                                                                                                                                               \n    public layerVersionArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public principal: string;\n\n                                                                                                                                                                                                                                                                                                         \n    public organizationId: string | undefined;\n\n                                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnLayerVersionPermissionProps) {\n        super(scope, id, { type: CfnLayerVersionPermission.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'action', this);\n        cdk.requireProperty(props, 'layerVersionArn', this);\n        cdk.requireProperty(props, 'principal', this);\n\n        this.action = props.action;\n        this.layerVersionArn = props.layerVersionArn;\n        this.principal = props.principal;\n        this.organizationId = props.organizationId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLayerVersionPermission.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            action: this.action,\n            layerVersionArn: this.layerVersionArn,\n            principal: this.principal,\n            organizationId: this.organizationId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLayerVersionPermissionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                       \nexport interface CfnPermissionProps {\n\n                                                                                                                                                                                                                                                                                               \n    readonly action: string;\n\nn    readonly functionName: string;\n\n                                                                                                                                                                                                                                                                                                                                                          \n    readonly principal: string;\n\n                                                                                                                                                                                                                                                                 \n    readonly eventSourceToken?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly sourceAccount?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly sourceArn?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPermissionProps`\n *\n * @param properties - the TypeScript properties of a `CfnPermissionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPermissionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('action', cdk.requiredValidator)(properties.action));\n    errors.collect(cdk.propertyValidator('action', cdk.validateString)(properties.action));\n    errors.collect(cdk.propertyValidator('eventSourceToken', cdk.validateString)(properties.eventSourceToken));\n    errors.collect(cdk.propertyValidator('functionName', cdk.requiredValidator)(properties.functionName));\n    errors.collect(cdk.propertyValidator('functionName', cdk.validateString)(properties.functionName));\n    errors.collect(cdk.propertyValidator('principal', cdk.requiredValidator)(properties.principal));\n    errors.collect(cdk.propertyValidator('principal', cdk.validateString)(properties.principal));\n    errors.collect(cdk.propertyValidator('sourceAccount', cdk.validateString)(properties.sourceAccount));\n    errors.collect(cdk.propertyValidator('sourceArn', cdk.validateString)(properties.sourceArn));\n    return errors.wrap('supplied properties not correct for \"CfnPermissionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Permission` resource\n *\n * @param properties - the TypeScript properties of a `CfnPermissionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Permission` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPermissionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPermissionPropsValidator(properties).assertSuccess();\n    return {\n        Action: cdk.stringToCloudFormation(properties.action),\n        FunctionName: cdk.stringToCloudFormation(properties.functionName),\n        Principal: cdk.stringToCloudFormation(properties.principal),\n        EventSourceToken: cdk.stringToCloudFormation(properties.eventSourceToken),\n        SourceAccount: cdk.stringToCloudFormation(properties.sourceAccount),\n        SourceArn: cdk.stringToCloudFormation(properties.sourceArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPermissionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPermissionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPermissionProps>();\n    ret.addPropertyResult('action', 'Action', cfn_parse.FromCloudFormation.getString(properties.Action));\n    ret.addPropertyResult('functionName', 'FunctionName', cfn_parse.FromCloudFormation.getString(properties.FunctionName));\n    ret.addPropertyResult('principal', 'Principal', cfn_parse.FromCloudFormation.getString(properties.Principal));\n    ret.addPropertyResult('eventSourceToken', 'EventSourceToken', properties.EventSourceToken != null ? cfn_parse.FromCloudFormation.getString(properties.EventSourceToken) : undefined);\n    ret.addPropertyResult('sourceAccount', 'SourceAccount', properties.SourceAccount != null ? cfn_parse.FromCloudFormation.getString(properties.SourceAccount) : undefined);\n    ret.addPropertyResult('sourceArn', 'SourceArn', properties.SourceArn != null ? cfn_parse.FromCloudFormation.getString(properties.SourceArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPermission extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lambda::Permission\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPermission {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPermissionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPermission(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                               \n    public action: string;\n\nn    public functionName: string;\n\n                                                                                                                                                                                                                                                                                                                                                          \n    public principal: string;\n\n                                                                                                                                                                                                                                                                 \n    public eventSourceToken: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public sourceAccount: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                     \n    public sourceArn: string | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnPermissionProps) {\n        super(scope, id, { type: CfnPermission.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'action', this);\n        cdk.requireProperty(props, 'functionName', this);\n        cdk.requireProperty(props, 'principal', this);\n\n        this.action = props.action;\n        this.functionName = props.functionName;\n        this.principal = props.principal;\n        this.eventSourceToken = props.eventSourceToken;\n        this.sourceAccount = props.sourceAccount;\n        this.sourceArn = props.sourceArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPermission.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            action: this.action,\n            functionName: this.functionName,\n            principal: this.principal,\n            eventSourceToken: this.eventSourceToken,\n            sourceAccount: this.sourceAccount,\n            sourceArn: this.sourceArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPermissionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                 \nexport interface CfnVersionProps {\n\nn    readonly functionName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly codeSha256?: string;\n\n                                                                                                                                                                                                                                                                                                              \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                  \n    readonly provisionedConcurrencyConfig?: CfnVersion.ProvisionedConcurrencyConfigurationProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnVersionProps`\n *\n * @param properties - the TypeScript properties of a `CfnVersionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnVersionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('codeSha256', cdk.validateString)(properties.codeSha256));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('functionName', cdk.requiredValidator)(properties.functionName));\n    errors.collect(cdk.propertyValidator('functionName', cdk.validateString)(properties.functionName));\n    errors.collect(cdk.propertyValidator('provisionedConcurrencyConfig', CfnVersion_ProvisionedConcurrencyConfigurationPropertyValidator)(properties.provisionedConcurrencyConfig));\n    return errors.wrap('supplied properties not correct for \"CfnVersionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Version` resource\n *\n * @param properties - the TypeScript properties of a `CfnVersionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Version` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVersionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVersionPropsValidator(properties).assertSuccess();\n    return {\n        FunctionName: cdk.stringToCloudFormation(properties.functionName),\n        CodeSha256: cdk.stringToCloudFormation(properties.codeSha256),\n        Description: cdk.stringToCloudFormation(properties.description),\n        ProvisionedConcurrencyConfig: cfnVersionProvisionedConcurrencyConfigurationPropertyToCloudFormation(properties.provisionedConcurrencyConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVersionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVersionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVersionProps>();\n    ret.addPropertyResult('functionName', 'FunctionName', cfn_parse.FromCloudFormation.getString(properties.FunctionName));\n    ret.addPropertyResult('codeSha256', 'CodeSha256', properties.CodeSha256 != null ? cfn_parse.FromCloudFormation.getString(properties.CodeSha256) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('provisionedConcurrencyConfig', 'ProvisionedConcurrencyConfig', properties.ProvisionedConcurrencyConfig != null ? CfnVersionProvisionedConcurrencyConfigurationPropertyFromCloudFormation(properties.ProvisionedConcurrencyConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnVersion extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lambda::Version\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnVersion {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnVersionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnVersion(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                  \n    public readonly attrVersion: string;\n\nn    public functionName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                           \n    public codeSha256: string | undefined;\n\n                                                                                                                                                                                                                                                                                                              \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                  \n    public provisionedConcurrencyConfig: CfnVersion.ProvisionedConcurrencyConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnVersionProps) {\n        super(scope, id, { type: CfnVersion.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'functionName', this);\n        this.attrVersion = cdk.Token.asString(this.getAtt('Version'));\n\n        this.functionName = props.functionName;\n        this.codeSha256 = props.codeSha256;\n        this.description = props.description;\n        this.provisionedConcurrencyConfig = props.provisionedConcurrencyConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnVersion.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            functionName: this.functionName,\n            codeSha256: this.codeSha256,\n            description: this.description,\n            provisionedConcurrencyConfig: this.provisionedConcurrencyConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnVersionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnVersion {\n                                                                                                                                                                                                                                                                                                                                                                                 \n    export interface ProvisionedConcurrencyConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly provisionedConcurrentExecutions: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ProvisionedConcurrencyConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ProvisionedConcurrencyConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnVersion_ProvisionedConcurrencyConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('provisionedConcurrentExecutions', cdk.requiredValidator)(properties.provisionedConcurrentExecutions));\n    errors.collect(cdk.propertyValidator('provisionedConcurrentExecutions', cdk.validateNumber)(properties.provisionedConcurrentExecutions));\n    return errors.wrap('supplied properties not correct for \"ProvisionedConcurrencyConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lambda::Version.ProvisionedConcurrencyConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ProvisionedConcurrencyConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lambda::Version.ProvisionedConcurrencyConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnVersionProvisionedConcurrencyConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnVersion_ProvisionedConcurrencyConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ProvisionedConcurrentExecutions: cdk.numberToCloudFormation(properties.provisionedConcurrentExecutions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnVersionProvisionedConcurrencyConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnVersion.ProvisionedConcurrencyConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnVersion.ProvisionedConcurrencyConfigurationProperty>();\n    ret.addPropertyResult('provisionedConcurrentExecutions', 'ProvisionedConcurrentExecutions', cfn_parse.FromCloudFormation.getNumber(properties.ProvisionedConcurrentExecutions));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
