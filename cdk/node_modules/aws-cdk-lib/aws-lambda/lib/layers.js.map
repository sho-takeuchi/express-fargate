{
  "version": 3,
  "sources": ["layers.ts"],
  "sourcesContent": ["import { IResource, RemovalPolicy, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { Architecture } from './architecture';\nimport { Code } from './code';\nimport { CfnLayerVersion, CfnLayerVersionPermission } from './lambda.generated';\nimport { Runtime } from './runtime';\n\n                              \nexport interface LayerVersionOptions {\n                                                                                            \n  readonly description?: string;\n\n                                                                                                                                                     \n  readonly license?: string;\n\n                                                                                      \n  readonly layerVersionName?: string;\n\n                                                                                                                                                                    \n  readonly removalPolicy?: RemovalPolicy;\n}\n\nexport interface LayerVersionProps extends LayerVersionOptions {\n                                                                                                          \n  readonly compatibleRuntimes?: Runtime[];\n\n                                                                                                         \n  readonly compatibleArchitectures?: Architecture[];\n\n                                                                                               \n  readonly code: Code;\n}\n\nexport interface ILayerVersion extends IResource {\n                                                                                             \n  readonly layerVersionArn: string;\n\n                                                                                        \n  readonly compatibleRuntimes?: Runtime[];\n\nn  addPermission(id: string, permission: LayerVersionPermission): void;\n}\n\n/**\n * A reference to a Lambda Layer version.\n */\nabstract class LayerVersionBase extends Resource implements ILayerVersion {\n  public abstract readonly layerVersionArn: string;\n  public abstract readonly compatibleRuntimes?: Runtime[];\n\n  public addPermission(id: string, permission: LayerVersionPermission) {\n    if (permission.organizationId != null && permission.accountId !== '*') {\n      throw new Error(`OrganizationId can only be specified if AwsAccountId is '*', but it is ${permission.accountId}`);\n    }\n\n    new CfnLayerVersionPermission(this, id, {\n      action: 'lambda:GetLayerVersion',\n      layerVersionArn: this.layerVersionArn,\n      principal: permission.accountId,\n      organizationId: permission.organizationId,\n    });\n  }\n}\n\n                                                                                                           \nexport interface LayerVersionPermission {\n                                                                                                                                                                                                                                                      \n  readonly accountId: string;\n\n                                                                                                                                             \n  readonly organizationId?: string;\n}\n\n                                                         \nexport interface LayerVersionAttributes {\n                                             \n  readonly layerVersionArn: string;\n\n                                                                 \n  readonly compatibleRuntimes?: Runtime[];\n}\n\n                                              \nexport class LayerVersion extends LayerVersionBase {\n\n                                                                                                   \n  public static fromLayerVersionArn(scope: Construct, id: string, layerVersionArn: string): ILayerVersion {\n    return LayerVersion.fromLayerVersionAttributes(scope, id, {\n      layerVersionArn,\n      compatibleRuntimes: Runtime.ALL,\n    });\n  }\n\n                                                                                                                                                                                                                                                                              \n  public static fromLayerVersionAttributes(scope: Construct, id: string, attrs: LayerVersionAttributes): ILayerVersion {\n    if (attrs.compatibleRuntimes && attrs.compatibleRuntimes.length === 0) {\n      throw new Error('Attempted to import a Lambda layer that supports no runtime!');\n    }\n\n    class Import extends LayerVersionBase {\n      public readonly layerVersionArn = attrs.layerVersionArn;\n      public readonly compatibleRuntimes = attrs.compatibleRuntimes;\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly layerVersionArn: string;\n  public readonly compatibleRuntimes?: Runtime[];\n\n  constructor(scope: Construct, id: string, props: LayerVersionProps) {\n    super(scope, id, {\n      physicalName: props.layerVersionName,\n    });\n\n    if (props.compatibleRuntimes && props.compatibleRuntimes.length === 0) {\n      throw new Error('Attempted to define a Lambda layer that supports no runtime!');\n    }\n    if (props.code.isInline) {\n      throw new Error('Lambda layers cannot be created from inline code');\n    }\n    // Allow usage of the code in this context...\n    const code = props.code.bind(this);\n    if (code.inlineCode) {\n      throw new Error('Inline code is not supported for AWS Lambda layers');\n    }\n    if (!code.s3Location) {\n      throw new Error('Code must define an S3 location');\n    }\n\n    const resource: CfnLayerVersion = new CfnLayerVersion(this, 'Resource', {\n      compatibleRuntimes: props.compatibleRuntimes && props.compatibleRuntimes.map(r => r.name),\n      compatibleArchitectures: props.compatibleArchitectures?.map(a => a.name),\n      content: {\n        s3Bucket: code.s3Location.bucketName,\n        s3Key: code.s3Location.objectKey,\n        s3ObjectVersion: code.s3Location.objectVersion,\n      },\n      description: props.description,\n      layerName: this.physicalName,\n      licenseInfo: props.license,\n    });\n\n    if (props.removalPolicy) {\n      resource.applyRemovalPolicy(props.removalPolicy);\n    }\n\n    props.code.bindToResource(resource, {\n      resourceProperty: 'Content',\n    });\n\n    this.layerVersionArn = resource.ref;\n    this.compatibleRuntimes = props.compatibleRuntimes;\n  }\n}\n"],
  "mappings": "mNAAA,OAAA,QAAA,cAIA,mBAAA,QAAA,sBACA,UAAA,QAAA,aA0CA,8BAAwC,QAAA,QAAQ,CAIvC,cAAc,GAAY,WAAkC,CACjE,GAAI,WAAW,gBAAkB,MAAQ,WAAW,YAAc,IAChE,KAAM,IAAI,OAAM,0EAA0E,WAAW,aAGvG,GAAI,oBAAA,0BAA0B,KAAM,GAAI,CACtC,OAAQ,yBACR,gBAAiB,KAAK,gBACtB,UAAW,WAAW,UACtB,eAAgB,WAAW,kBAwBjC,0BAAkC,iBAAgB,CA2BhD,YAAY,MAAkB,GAAY,MAAwB,QAChE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,mBAGtB,2EAAI,MAAM,oBAAsB,MAAM,mBAAmB,SAAW,EAClE,KAAM,IAAI,OAAM,gEAElB,GAAI,MAAM,KAAK,SACb,KAAM,IAAI,OAAM,oDAGlB,KAAM,MAAO,MAAM,KAAK,KAAK,MAC7B,GAAI,KAAK,WACP,KAAM,IAAI,OAAM,sDAElB,GAAI,CAAC,KAAK,WACR,KAAM,IAAI,OAAM,mCAGlB,KAAM,UAA4B,GAAI,oBAAA,gBAAgB,KAAM,WAAY,CACtE,mBAAoB,MAAM,oBAAsB,MAAM,mBAAmB,IAAI,GAAK,EAAE,MACpF,wBAAuB,IAAE,MAAM,2BAAuB,MAAA,KAAA,OAAA,OAAA,GAAE,IAAI,GAAK,EAAE,MACnE,QAAS,CACP,SAAU,KAAK,WAAW,WAC1B,MAAO,KAAK,WAAW,UACvB,gBAAiB,KAAK,WAAW,eAEnC,YAAa,MAAM,YACnB,UAAW,KAAK,aAChB,YAAa,MAAM,UAGrB,AAAI,MAAM,eACR,SAAS,mBAAmB,MAAM,eAGpC,MAAM,KAAK,eAAe,SAAU,CAClC,iBAAkB,YAGpB,KAAK,gBAAkB,SAAS,IAChC,KAAK,mBAAqB,MAAM,yBAlEpB,qBAAoB,MAAkB,GAAY,gBAAuB,CACrF,MAAO,cAAa,2BAA2B,MAAO,GAAI,CACxD,gBACA,mBAAoB,UAAA,QAAQ,YAKlB,4BAA2B,MAAkB,GAAY,MAA6B,CAClG,gFAAI,MAAM,oBAAsB,MAAM,mBAAmB,SAAW,EAClE,KAAM,IAAI,OAAM,gEAGlB,oBAAqB,iBAAgB,CAArC,aAAA,qBACkB,KAAA,gBAAkB,MAAM,gBACxB,KAAA,mBAAqB,MAAM,oBAG7C,MAAO,IAAI,QAAO,MAAO,KArB7B,QAAA,aAAA",
  "names": []
}
