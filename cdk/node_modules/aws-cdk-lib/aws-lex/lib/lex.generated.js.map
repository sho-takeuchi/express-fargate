{
  "version": 3,
  "sources": ["lex.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:32.167Z\",\"fingerprint\":\"lo28quLfvZHDKwax6a1drv+pHBULg3Rwz9j/2+Pt04Y=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                      \nexport interface CfnBotProps {\n\n                                                                                                                                                                                                                                                            \n    readonly dataPrivacy: any | cdk.IResolvable;\n\nn    readonly idleSessionTtlInSeconds: number;\n\n                                                                                                                                                                                                     \n    readonly name: string;\n\n                                                                                                                                                                                                                                    \n    readonly roleArn: string;\n\n                                                                                                                                                                                                                                                                     \n    readonly autoBuildBotLocales?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly botFileS3Location?: CfnBot.S3LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                        \n    readonly botLocales?: Array<CfnBot.BotLocaleProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                              \n    readonly botTags?: Array<cdk.CfnTag | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                          \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly testBotAliasTags?: Array<cdk.CfnTag | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnBotProps`\n *\n * @param properties - the TypeScript properties of a `CfnBotProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoBuildBotLocales', cdk.validateBoolean)(properties.autoBuildBotLocales));\n    errors.collect(cdk.propertyValidator('botFileS3Location', CfnBot_S3LocationPropertyValidator)(properties.botFileS3Location));\n    errors.collect(cdk.propertyValidator('botLocales', cdk.listValidator(CfnBot_BotLocalePropertyValidator))(properties.botLocales));\n    errors.collect(cdk.propertyValidator('botTags', cdk.listValidator(cdk.validateCfnTag))(properties.botTags));\n    errors.collect(cdk.propertyValidator('dataPrivacy', cdk.requiredValidator)(properties.dataPrivacy));\n    errors.collect(cdk.propertyValidator('dataPrivacy', cdk.validateObject)(properties.dataPrivacy));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('idleSessionTtlInSeconds', cdk.requiredValidator)(properties.idleSessionTtlInSeconds));\n    errors.collect(cdk.propertyValidator('idleSessionTtlInSeconds', cdk.validateNumber)(properties.idleSessionTtlInSeconds));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('testBotAliasTags', cdk.listValidator(cdk.validateCfnTag))(properties.testBotAliasTags));\n    return errors.wrap('supplied properties not correct for \"CfnBotProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot` resource\n *\n * @param properties - the TypeScript properties of a `CfnBotProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotPropsValidator(properties).assertSuccess();\n    return {\n        DataPrivacy: cdk.objectToCloudFormation(properties.dataPrivacy),\n        IdleSessionTTLInSeconds: cdk.numberToCloudFormation(properties.idleSessionTtlInSeconds),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        AutoBuildBotLocales: cdk.booleanToCloudFormation(properties.autoBuildBotLocales),\n        BotFileS3Location: cfnBotS3LocationPropertyToCloudFormation(properties.botFileS3Location),\n        BotLocales: cdk.listMapper(cfnBotBotLocalePropertyToCloudFormation)(properties.botLocales),\n        BotTags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.botTags),\n        Description: cdk.stringToCloudFormation(properties.description),\n        TestBotAliasTags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.testBotAliasTags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotProps>();\n    ret.addPropertyResult('dataPrivacy', 'DataPrivacy', cfn_parse.FromCloudFormation.getAny(properties.DataPrivacy));\n    ret.addPropertyResult('idleSessionTtlInSeconds', 'IdleSessionTTLInSeconds', cfn_parse.FromCloudFormation.getNumber(properties.IdleSessionTTLInSeconds));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('autoBuildBotLocales', 'AutoBuildBotLocales', properties.AutoBuildBotLocales != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoBuildBotLocales) : undefined);\n    ret.addPropertyResult('botFileS3Location', 'BotFileS3Location', properties.BotFileS3Location != null ? CfnBotS3LocationPropertyFromCloudFormation(properties.BotFileS3Location) : undefined);\n    ret.addPropertyResult('botLocales', 'BotLocales', properties.BotLocales != null ? cfn_parse.FromCloudFormation.getArray(CfnBotBotLocalePropertyFromCloudFormation)(properties.BotLocales) : undefined);\n    ret.addPropertyResult('botTags', 'BotTags', properties.BotTags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.BotTags) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('testBotAliasTags', 'TestBotAliasTags', properties.TestBotAliasTags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.TestBotAliasTags) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \nexport class CfnBot extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lex::Bot\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnBot {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnBotPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnBot(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                     \n    public readonly attrArn: string;\n\n                                                                                           \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                            \n    public dataPrivacy: any | cdk.IResolvable;\n\nn    public idleSessionTtlInSeconds: number;\n\n                                                                                                                                                                                                     \n    public name: string;\n\n                                                                                                                                                                                                                                    \n    public roleArn: string;\n\n                                                                                                                                                                                                                                                                     \n    public autoBuildBotLocales: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public botFileS3Location: CfnBot.S3LocationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                        \n    public botLocales: Array<CfnBot.BotLocaleProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                              \n    public botTags: Array<cdk.CfnTag | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                          \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    public testBotAliasTags: Array<cdk.CfnTag | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnBotProps) {\n        super(scope, id, { type: CfnBot.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'dataPrivacy', this);\n        cdk.requireProperty(props, 'idleSessionTtlInSeconds', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'roleArn', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.dataPrivacy = props.dataPrivacy;\n        this.idleSessionTtlInSeconds = props.idleSessionTtlInSeconds;\n        this.name = props.name;\n        this.roleArn = props.roleArn;\n        this.autoBuildBotLocales = props.autoBuildBotLocales;\n        this.botFileS3Location = props.botFileS3Location;\n        this.botLocales = props.botLocales;\n        this.botTags = props.botTags;\n        this.description = props.description;\n        this.testBotAliasTags = props.testBotAliasTags;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnBot.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            dataPrivacy: this.dataPrivacy,\n            idleSessionTtlInSeconds: this.idleSessionTtlInSeconds,\n            name: this.name,\n            roleArn: this.roleArn,\n            autoBuildBotLocales: this.autoBuildBotLocales,\n            botFileS3Location: this.botFileS3Location,\n            botLocales: this.botLocales,\n            botTags: this.botTags,\n            description: this.description,\n            testBotAliasTags: this.testBotAliasTags,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnBotPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                \n    export interface BotLocaleProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly description?: string;\n                                                                                                                                                                                                                                            \n        readonly intents?: Array<CfnBot.IntentProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                             \n        readonly localeId: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly nluConfidenceThreshold: number;\n                                                                                                                                                                                                                                                 \n        readonly slotTypes?: Array<CfnBot.SlotTypeProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                  \n        readonly voiceSettings?: CfnBot.VoiceSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BotLocaleProperty`\n *\n * @param properties - the TypeScript properties of a `BotLocaleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_BotLocalePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('intents', cdk.listValidator(CfnBot_IntentPropertyValidator))(properties.intents));\n    errors.collect(cdk.propertyValidator('localeId', cdk.requiredValidator)(properties.localeId));\n    errors.collect(cdk.propertyValidator('localeId', cdk.validateString)(properties.localeId));\n    errors.collect(cdk.propertyValidator('nluConfidenceThreshold', cdk.requiredValidator)(properties.nluConfidenceThreshold));\n    errors.collect(cdk.propertyValidator('nluConfidenceThreshold', cdk.validateNumber)(properties.nluConfidenceThreshold));\n    errors.collect(cdk.propertyValidator('slotTypes', cdk.listValidator(CfnBot_SlotTypePropertyValidator))(properties.slotTypes));\n    errors.collect(cdk.propertyValidator('voiceSettings', CfnBot_VoiceSettingsPropertyValidator)(properties.voiceSettings));\n    return errors.wrap('supplied properties not correct for \"BotLocaleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.BotLocale` resource\n *\n * @param properties - the TypeScript properties of a `BotLocaleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.BotLocale` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotBotLocalePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_BotLocalePropertyValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        Intents: cdk.listMapper(cfnBotIntentPropertyToCloudFormation)(properties.intents),\n        LocaleId: cdk.stringToCloudFormation(properties.localeId),\n        NluConfidenceThreshold: cdk.numberToCloudFormation(properties.nluConfidenceThreshold),\n        SlotTypes: cdk.listMapper(cfnBotSlotTypePropertyToCloudFormation)(properties.slotTypes),\n        VoiceSettings: cfnBotVoiceSettingsPropertyToCloudFormation(properties.voiceSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotBotLocalePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.BotLocaleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.BotLocaleProperty>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('intents', 'Intents', properties.Intents != null ? cfn_parse.FromCloudFormation.getArray(CfnBotIntentPropertyFromCloudFormation)(properties.Intents) : undefined);\n    ret.addPropertyResult('localeId', 'LocaleId', cfn_parse.FromCloudFormation.getString(properties.LocaleId));\n    ret.addPropertyResult('nluConfidenceThreshold', 'NluConfidenceThreshold', cfn_parse.FromCloudFormation.getNumber(properties.NluConfidenceThreshold));\n    ret.addPropertyResult('slotTypes', 'SlotTypes', properties.SlotTypes != null ? cfn_parse.FromCloudFormation.getArray(CfnBotSlotTypePropertyFromCloudFormation)(properties.SlotTypes) : undefined);\n    ret.addPropertyResult('voiceSettings', 'VoiceSettings', properties.VoiceSettings != null ? CfnBotVoiceSettingsPropertyFromCloudFormation(properties.VoiceSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                 \n    export interface ButtonProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly text: string;\n                                                                                                                                                                                                                                                                                                                         \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ButtonProperty`\n *\n * @param properties - the TypeScript properties of a `ButtonProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_ButtonPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('text', cdk.requiredValidator)(properties.text));\n    errors.collect(cdk.propertyValidator('text', cdk.validateString)(properties.text));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"ButtonProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.Button` resource\n *\n * @param properties - the TypeScript properties of a `ButtonProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.Button` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotButtonPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_ButtonPropertyValidator(properties).assertSuccess();\n    return {\n        Text: cdk.stringToCloudFormation(properties.text),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotButtonPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.ButtonProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.ButtonProperty>();\n    ret.addPropertyResult('text', 'Text', cfn_parse.FromCloudFormation.getString(properties.Text));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                                           \n    export interface CustomPayloadProperty {\n                                                                                                                                                                                                                                                   \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomPayloadProperty`\n *\n * @param properties - the TypeScript properties of a `CustomPayloadProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_CustomPayloadPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"CustomPayloadProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.CustomPayload` resource\n *\n * @param properties - the TypeScript properties of a `CustomPayloadProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.CustomPayload` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotCustomPayloadPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_CustomPayloadPropertyValidator(properties).assertSuccess();\n    return {\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotCustomPayloadPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.CustomPayloadProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.CustomPayloadProperty>();\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                   \n    export interface DialogCodeHookSettingProperty {\n                                                                                                                                                                                                                                                                                                                 \n        readonly enabled: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DialogCodeHookSettingProperty`\n *\n * @param properties - the TypeScript properties of a `DialogCodeHookSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_DialogCodeHookSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"DialogCodeHookSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.DialogCodeHookSetting` resource\n *\n * @param properties - the TypeScript properties of a `DialogCodeHookSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.DialogCodeHookSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotDialogCodeHookSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_DialogCodeHookSettingPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotDialogCodeHookSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.DialogCodeHookSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.DialogCodeHookSettingProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                         \n    export interface ExternalSourceSettingProperty {\n                                                                                                                                                                                                                                                                                                              \n        readonly grammarSlotTypeSetting?: CfnBot.GrammarSlotTypeSettingProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ExternalSourceSettingProperty`\n *\n * @param properties - the TypeScript properties of a `ExternalSourceSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_ExternalSourceSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('grammarSlotTypeSetting', CfnBot_GrammarSlotTypeSettingPropertyValidator)(properties.grammarSlotTypeSetting));\n    return errors.wrap('supplied properties not correct for \"ExternalSourceSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.ExternalSourceSetting` resource\n *\n * @param properties - the TypeScript properties of a `ExternalSourceSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.ExternalSourceSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotExternalSourceSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_ExternalSourceSettingPropertyValidator(properties).assertSuccess();\n    return {\n        GrammarSlotTypeSetting: cfnBotGrammarSlotTypeSettingPropertyToCloudFormation(properties.grammarSlotTypeSetting),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotExternalSourceSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.ExternalSourceSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.ExternalSourceSettingProperty>();\n    ret.addPropertyResult('grammarSlotTypeSetting', 'GrammarSlotTypeSetting', properties.GrammarSlotTypeSetting != null ? CfnBotGrammarSlotTypeSettingPropertyFromCloudFormation(properties.GrammarSlotTypeSetting) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                         \n    export interface FulfillmentCodeHookSettingProperty {\n                                                                                                                                                                                                                                                                                                                       \n        readonly enabled: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly fulfillmentUpdatesSpecification?: CfnBot.FulfillmentUpdatesSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly postFulfillmentStatusSpecification?: CfnBot.PostFulfillmentStatusSpecificationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FulfillmentCodeHookSettingProperty`\n *\n * @param properties - the TypeScript properties of a `FulfillmentCodeHookSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_FulfillmentCodeHookSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('fulfillmentUpdatesSpecification', CfnBot_FulfillmentUpdatesSpecificationPropertyValidator)(properties.fulfillmentUpdatesSpecification));\n    errors.collect(cdk.propertyValidator('postFulfillmentStatusSpecification', CfnBot_PostFulfillmentStatusSpecificationPropertyValidator)(properties.postFulfillmentStatusSpecification));\n    return errors.wrap('supplied properties not correct for \"FulfillmentCodeHookSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.FulfillmentCodeHookSetting` resource\n *\n * @param properties - the TypeScript properties of a `FulfillmentCodeHookSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.FulfillmentCodeHookSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotFulfillmentCodeHookSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_FulfillmentCodeHookSettingPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        FulfillmentUpdatesSpecification: cfnBotFulfillmentUpdatesSpecificationPropertyToCloudFormation(properties.fulfillmentUpdatesSpecification),\n        PostFulfillmentStatusSpecification: cfnBotPostFulfillmentStatusSpecificationPropertyToCloudFormation(properties.postFulfillmentStatusSpecification),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotFulfillmentCodeHookSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.FulfillmentCodeHookSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.FulfillmentCodeHookSettingProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addPropertyResult('fulfillmentUpdatesSpecification', 'FulfillmentUpdatesSpecification', properties.FulfillmentUpdatesSpecification != null ? CfnBotFulfillmentUpdatesSpecificationPropertyFromCloudFormation(properties.FulfillmentUpdatesSpecification) : undefined);\n    ret.addPropertyResult('postFulfillmentStatusSpecification', 'PostFulfillmentStatusSpecification', properties.PostFulfillmentStatusSpecification != null ? CfnBotPostFulfillmentStatusSpecificationPropertyFromCloudFormation(properties.PostFulfillmentStatusSpecification) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                                                       \n    export interface FulfillmentStartResponseSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly allowInterrupt?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly delayInSeconds: number;\n                                                                                                                                                                                                                                                                                                                                                                               \n        readonly messageGroups: Array<CfnBot.MessageGroupProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FulfillmentStartResponseSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `FulfillmentStartResponseSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_FulfillmentStartResponseSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowInterrupt', cdk.validateBoolean)(properties.allowInterrupt));\n    errors.collect(cdk.propertyValidator('delayInSeconds', cdk.requiredValidator)(properties.delayInSeconds));\n    errors.collect(cdk.propertyValidator('delayInSeconds', cdk.validateNumber)(properties.delayInSeconds));\n    errors.collect(cdk.propertyValidator('messageGroups', cdk.requiredValidator)(properties.messageGroups));\n    errors.collect(cdk.propertyValidator('messageGroups', cdk.listValidator(CfnBot_MessageGroupPropertyValidator))(properties.messageGroups));\n    return errors.wrap('supplied properties not correct for \"FulfillmentStartResponseSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.FulfillmentStartResponseSpecification` resource\n *\n * @param properties - the TypeScript properties of a `FulfillmentStartResponseSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.FulfillmentStartResponseSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotFulfillmentStartResponseSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_FulfillmentStartResponseSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        AllowInterrupt: cdk.booleanToCloudFormation(properties.allowInterrupt),\n        DelayInSeconds: cdk.numberToCloudFormation(properties.delayInSeconds),\n        MessageGroups: cdk.listMapper(cfnBotMessageGroupPropertyToCloudFormation)(properties.messageGroups),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotFulfillmentStartResponseSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.FulfillmentStartResponseSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.FulfillmentStartResponseSpecificationProperty>();\n    ret.addPropertyResult('allowInterrupt', 'AllowInterrupt', properties.AllowInterrupt != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowInterrupt) : undefined);\n    ret.addPropertyResult('delayInSeconds', 'DelayInSeconds', cfn_parse.FromCloudFormation.getNumber(properties.DelayInSeconds));\n    ret.addPropertyResult('messageGroups', 'MessageGroups', cfn_parse.FromCloudFormation.getArray(CfnBotMessageGroupPropertyFromCloudFormation)(properties.MessageGroups));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                                \n    export interface FulfillmentUpdateResponseSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly allowInterrupt?: boolean | cdk.IResolvable;\nn        readonly frequencyInSeconds: number;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly messageGroups: Array<CfnBot.MessageGroupProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FulfillmentUpdateResponseSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `FulfillmentUpdateResponseSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_FulfillmentUpdateResponseSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowInterrupt', cdk.validateBoolean)(properties.allowInterrupt));\n    errors.collect(cdk.propertyValidator('frequencyInSeconds', cdk.requiredValidator)(properties.frequencyInSeconds));\n    errors.collect(cdk.propertyValidator('frequencyInSeconds', cdk.validateNumber)(properties.frequencyInSeconds));\n    errors.collect(cdk.propertyValidator('messageGroups', cdk.requiredValidator)(properties.messageGroups));\n    errors.collect(cdk.propertyValidator('messageGroups', cdk.listValidator(CfnBot_MessageGroupPropertyValidator))(properties.messageGroups));\n    return errors.wrap('supplied properties not correct for \"FulfillmentUpdateResponseSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.FulfillmentUpdateResponseSpecification` resource\n *\n * @param properties - the TypeScript properties of a `FulfillmentUpdateResponseSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.FulfillmentUpdateResponseSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotFulfillmentUpdateResponseSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_FulfillmentUpdateResponseSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        AllowInterrupt: cdk.booleanToCloudFormation(properties.allowInterrupt),\n        FrequencyInSeconds: cdk.numberToCloudFormation(properties.frequencyInSeconds),\n        MessageGroups: cdk.listMapper(cfnBotMessageGroupPropertyToCloudFormation)(properties.messageGroups),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotFulfillmentUpdateResponseSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.FulfillmentUpdateResponseSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.FulfillmentUpdateResponseSpecificationProperty>();\n    ret.addPropertyResult('allowInterrupt', 'AllowInterrupt', properties.AllowInterrupt != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowInterrupt) : undefined);\n    ret.addPropertyResult('frequencyInSeconds', 'FrequencyInSeconds', cfn_parse.FromCloudFormation.getNumber(properties.FrequencyInSeconds));\n    ret.addPropertyResult('messageGroups', 'MessageGroups', cfn_parse.FromCloudFormation.getArray(CfnBotMessageGroupPropertyFromCloudFormation)(properties.MessageGroups));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                         \n    export interface FulfillmentUpdatesSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly active: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly startResponse?: CfnBot.FulfillmentStartResponseSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly timeoutInSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly updateResponse?: CfnBot.FulfillmentUpdateResponseSpecificationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FulfillmentUpdatesSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `FulfillmentUpdatesSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_FulfillmentUpdatesSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('active', cdk.requiredValidator)(properties.active));\n    errors.collect(cdk.propertyValidator('active', cdk.validateBoolean)(properties.active));\n    errors.collect(cdk.propertyValidator('startResponse', CfnBot_FulfillmentStartResponseSpecificationPropertyValidator)(properties.startResponse));\n    errors.collect(cdk.propertyValidator('timeoutInSeconds', cdk.validateNumber)(properties.timeoutInSeconds));\n    errors.collect(cdk.propertyValidator('updateResponse', CfnBot_FulfillmentUpdateResponseSpecificationPropertyValidator)(properties.updateResponse));\n    return errors.wrap('supplied properties not correct for \"FulfillmentUpdatesSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.FulfillmentUpdatesSpecification` resource\n *\n * @param properties - the TypeScript properties of a `FulfillmentUpdatesSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.FulfillmentUpdatesSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotFulfillmentUpdatesSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_FulfillmentUpdatesSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        Active: cdk.booleanToCloudFormation(properties.active),\n        StartResponse: cfnBotFulfillmentStartResponseSpecificationPropertyToCloudFormation(properties.startResponse),\n        TimeoutInSeconds: cdk.numberToCloudFormation(properties.timeoutInSeconds),\n        UpdateResponse: cfnBotFulfillmentUpdateResponseSpecificationPropertyToCloudFormation(properties.updateResponse),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotFulfillmentUpdatesSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.FulfillmentUpdatesSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.FulfillmentUpdatesSpecificationProperty>();\n    ret.addPropertyResult('active', 'Active', cfn_parse.FromCloudFormation.getBoolean(properties.Active));\n    ret.addPropertyResult('startResponse', 'StartResponse', properties.StartResponse != null ? CfnBotFulfillmentStartResponseSpecificationPropertyFromCloudFormation(properties.StartResponse) : undefined);\n    ret.addPropertyResult('timeoutInSeconds', 'TimeoutInSeconds', properties.TimeoutInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutInSeconds) : undefined);\n    ret.addPropertyResult('updateResponse', 'UpdateResponse', properties.UpdateResponse != null ? CfnBotFulfillmentUpdateResponseSpecificationPropertyFromCloudFormation(properties.UpdateResponse) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                   \n    export interface GrammarSlotTypeSettingProperty {\n                                                                                                                                                                                                                                                                                 \n        readonly source?: CfnBot.GrammarSlotTypeSourceProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GrammarSlotTypeSettingProperty`\n *\n * @param properties - the TypeScript properties of a `GrammarSlotTypeSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_GrammarSlotTypeSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('source', CfnBot_GrammarSlotTypeSourcePropertyValidator)(properties.source));\n    return errors.wrap('supplied properties not correct for \"GrammarSlotTypeSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.GrammarSlotTypeSetting` resource\n *\n * @param properties - the TypeScript properties of a `GrammarSlotTypeSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.GrammarSlotTypeSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotGrammarSlotTypeSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_GrammarSlotTypeSettingPropertyValidator(properties).assertSuccess();\n    return {\n        Source: cfnBotGrammarSlotTypeSourcePropertyToCloudFormation(properties.source),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotGrammarSlotTypeSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.GrammarSlotTypeSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.GrammarSlotTypeSettingProperty>();\n    ret.addPropertyResult('source', 'Source', properties.Source != null ? CfnBotGrammarSlotTypeSourcePropertyFromCloudFormation(properties.Source) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                                 \n    export interface GrammarSlotTypeSourceProperty {\n                                                                                                                                                                                                                                                                                                                      \n        readonly kmsKeyArn?: string;\n                                                                                                                                                                                                                                                                                         \n        readonly s3BucketName: string;\n                                                                                                                                                                                                                                                                      \n        readonly s3ObjectKey: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GrammarSlotTypeSourceProperty`\n *\n * @param properties - the TypeScript properties of a `GrammarSlotTypeSourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_GrammarSlotTypeSourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyArn', cdk.validateString)(properties.kmsKeyArn));\n    errors.collect(cdk.propertyValidator('s3BucketName', cdk.requiredValidator)(properties.s3BucketName));\n    errors.collect(cdk.propertyValidator('s3BucketName', cdk.validateString)(properties.s3BucketName));\n    errors.collect(cdk.propertyValidator('s3ObjectKey', cdk.requiredValidator)(properties.s3ObjectKey));\n    errors.collect(cdk.propertyValidator('s3ObjectKey', cdk.validateString)(properties.s3ObjectKey));\n    return errors.wrap('supplied properties not correct for \"GrammarSlotTypeSourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.GrammarSlotTypeSource` resource\n *\n * @param properties - the TypeScript properties of a `GrammarSlotTypeSourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.GrammarSlotTypeSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotGrammarSlotTypeSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_GrammarSlotTypeSourcePropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyArn: cdk.stringToCloudFormation(properties.kmsKeyArn),\n        S3BucketName: cdk.stringToCloudFormation(properties.s3BucketName),\n        S3ObjectKey: cdk.stringToCloudFormation(properties.s3ObjectKey),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotGrammarSlotTypeSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.GrammarSlotTypeSourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.GrammarSlotTypeSourceProperty>();\n    ret.addPropertyResult('kmsKeyArn', 'KmsKeyArn', properties.KmsKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyArn) : undefined);\n    ret.addPropertyResult('s3BucketName', 'S3BucketName', cfn_parse.FromCloudFormation.getString(properties.S3BucketName));\n    ret.addPropertyResult('s3ObjectKey', 'S3ObjectKey', cfn_parse.FromCloudFormation.getString(properties.S3ObjectKey));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface ImageResponseCardProperty {\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly buttons?: Array<CfnBot.ButtonProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly imageUrl?: string;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly subtitle?: string;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly title: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ImageResponseCardProperty`\n *\n * @param properties - the TypeScript properties of a `ImageResponseCardProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_ImageResponseCardPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('buttons', cdk.listValidator(CfnBot_ButtonPropertyValidator))(properties.buttons));\n    errors.collect(cdk.propertyValidator('imageUrl', cdk.validateString)(properties.imageUrl));\n    errors.collect(cdk.propertyValidator('subtitle', cdk.validateString)(properties.subtitle));\n    errors.collect(cdk.propertyValidator('title', cdk.requiredValidator)(properties.title));\n    errors.collect(cdk.propertyValidator('title', cdk.validateString)(properties.title));\n    return errors.wrap('supplied properties not correct for \"ImageResponseCardProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.ImageResponseCard` resource\n *\n * @param properties - the TypeScript properties of a `ImageResponseCardProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.ImageResponseCard` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotImageResponseCardPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_ImageResponseCardPropertyValidator(properties).assertSuccess();\n    return {\n        Buttons: cdk.listMapper(cfnBotButtonPropertyToCloudFormation)(properties.buttons),\n        ImageUrl: cdk.stringToCloudFormation(properties.imageUrl),\n        Subtitle: cdk.stringToCloudFormation(properties.subtitle),\n        Title: cdk.stringToCloudFormation(properties.title),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotImageResponseCardPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.ImageResponseCardProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.ImageResponseCardProperty>();\n    ret.addPropertyResult('buttons', 'Buttons', properties.Buttons != null ? cfn_parse.FromCloudFormation.getArray(CfnBotButtonPropertyFromCloudFormation)(properties.Buttons) : undefined);\n    ret.addPropertyResult('imageUrl', 'ImageUrl', properties.ImageUrl != null ? cfn_parse.FromCloudFormation.getString(properties.ImageUrl) : undefined);\n    ret.addPropertyResult('subtitle', 'Subtitle', properties.Subtitle != null ? cfn_parse.FromCloudFormation.getString(properties.Subtitle) : undefined);\n    ret.addPropertyResult('title', 'Title', cfn_parse.FromCloudFormation.getString(properties.Title));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                         \n    export interface InputContextProperty {\n                                                                                                                                                                                                                            \n        readonly name: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputContextProperty`\n *\n * @param properties - the TypeScript properties of a `InputContextProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_InputContextPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"InputContextProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.InputContext` resource\n *\n * @param properties - the TypeScript properties of a `InputContextProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.InputContext` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotInputContextPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_InputContextPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotInputContextPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.InputContextProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.InputContextProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                 \n    export interface IntentProperty {\n                                                                                                                                                                                                                                                                                     \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly dialogCodeHook?: CfnBot.DialogCodeHookSettingProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly fulfillmentCodeHook?: CfnBot.FulfillmentCodeHookSettingProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                        \n        readonly inputContexts?: Array<CfnBot.InputContextProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                      \n        readonly intentClosingSetting?: CfnBot.IntentClosingSettingProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly intentConfirmationSetting?: CfnBot.IntentConfirmationSettingProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly kendraConfiguration?: CfnBot.KendraConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly name: string;\n                                                                                                                                                                                                                                                                    \n        readonly outputContexts?: Array<CfnBot.OutputContextProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                            \n        readonly parentIntentSignature?: string;\n                                                                                                                                                                                                                                                                    \n        readonly sampleUtterances?: Array<CfnBot.SampleUtteranceProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                  \n        readonly slotPriorities?: Array<CfnBot.SlotPriorityProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                  \n        readonly slots?: Array<CfnBot.SlotProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IntentProperty`\n *\n * @param properties - the TypeScript properties of a `IntentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_IntentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('dialogCodeHook', CfnBot_DialogCodeHookSettingPropertyValidator)(properties.dialogCodeHook));\n    errors.collect(cdk.propertyValidator('fulfillmentCodeHook', CfnBot_FulfillmentCodeHookSettingPropertyValidator)(properties.fulfillmentCodeHook));\n    errors.collect(cdk.propertyValidator('inputContexts', cdk.listValidator(CfnBot_InputContextPropertyValidator))(properties.inputContexts));\n    errors.collect(cdk.propertyValidator('intentClosingSetting', CfnBot_IntentClosingSettingPropertyValidator)(properties.intentClosingSetting));\n    errors.collect(cdk.propertyValidator('intentConfirmationSetting', CfnBot_IntentConfirmationSettingPropertyValidator)(properties.intentConfirmationSetting));\n    errors.collect(cdk.propertyValidator('kendraConfiguration', CfnBot_KendraConfigurationPropertyValidator)(properties.kendraConfiguration));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('outputContexts', cdk.listValidator(CfnBot_OutputContextPropertyValidator))(properties.outputContexts));\n    errors.collect(cdk.propertyValidator('parentIntentSignature', cdk.validateString)(properties.parentIntentSignature));\n    errors.collect(cdk.propertyValidator('sampleUtterances', cdk.listValidator(CfnBot_SampleUtterancePropertyValidator))(properties.sampleUtterances));\n    errors.collect(cdk.propertyValidator('slotPriorities', cdk.listValidator(CfnBot_SlotPriorityPropertyValidator))(properties.slotPriorities));\n    errors.collect(cdk.propertyValidator('slots', cdk.listValidator(CfnBot_SlotPropertyValidator))(properties.slots));\n    return errors.wrap('supplied properties not correct for \"IntentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.Intent` resource\n *\n * @param properties - the TypeScript properties of a `IntentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.Intent` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotIntentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_IntentPropertyValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        DialogCodeHook: cfnBotDialogCodeHookSettingPropertyToCloudFormation(properties.dialogCodeHook),\n        FulfillmentCodeHook: cfnBotFulfillmentCodeHookSettingPropertyToCloudFormation(properties.fulfillmentCodeHook),\n        InputContexts: cdk.listMapper(cfnBotInputContextPropertyToCloudFormation)(properties.inputContexts),\n        IntentClosingSetting: cfnBotIntentClosingSettingPropertyToCloudFormation(properties.intentClosingSetting),\n        IntentConfirmationSetting: cfnBotIntentConfirmationSettingPropertyToCloudFormation(properties.intentConfirmationSetting),\n        KendraConfiguration: cfnBotKendraConfigurationPropertyToCloudFormation(properties.kendraConfiguration),\n        Name: cdk.stringToCloudFormation(properties.name),\n        OutputContexts: cdk.listMapper(cfnBotOutputContextPropertyToCloudFormation)(properties.outputContexts),\n        ParentIntentSignature: cdk.stringToCloudFormation(properties.parentIntentSignature),\n        SampleUtterances: cdk.listMapper(cfnBotSampleUtterancePropertyToCloudFormation)(properties.sampleUtterances),\n        SlotPriorities: cdk.listMapper(cfnBotSlotPriorityPropertyToCloudFormation)(properties.slotPriorities),\n        Slots: cdk.listMapper(cfnBotSlotPropertyToCloudFormation)(properties.slots),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotIntentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.IntentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.IntentProperty>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('dialogCodeHook', 'DialogCodeHook', properties.DialogCodeHook != null ? CfnBotDialogCodeHookSettingPropertyFromCloudFormation(properties.DialogCodeHook) : undefined);\n    ret.addPropertyResult('fulfillmentCodeHook', 'FulfillmentCodeHook', properties.FulfillmentCodeHook != null ? CfnBotFulfillmentCodeHookSettingPropertyFromCloudFormation(properties.FulfillmentCodeHook) : undefined);\n    ret.addPropertyResult('inputContexts', 'InputContexts', properties.InputContexts != null ? cfn_parse.FromCloudFormation.getArray(CfnBotInputContextPropertyFromCloudFormation)(properties.InputContexts) : undefined);\n    ret.addPropertyResult('intentClosingSetting', 'IntentClosingSetting', properties.IntentClosingSetting != null ? CfnBotIntentClosingSettingPropertyFromCloudFormation(properties.IntentClosingSetting) : undefined);\n    ret.addPropertyResult('intentConfirmationSetting', 'IntentConfirmationSetting', properties.IntentConfirmationSetting != null ? CfnBotIntentConfirmationSettingPropertyFromCloudFormation(properties.IntentConfirmationSetting) : undefined);\n    ret.addPropertyResult('kendraConfiguration', 'KendraConfiguration', properties.KendraConfiguration != null ? CfnBotKendraConfigurationPropertyFromCloudFormation(properties.KendraConfiguration) : undefined);\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('outputContexts', 'OutputContexts', properties.OutputContexts != null ? cfn_parse.FromCloudFormation.getArray(CfnBotOutputContextPropertyFromCloudFormation)(properties.OutputContexts) : undefined);\n    ret.addPropertyResult('parentIntentSignature', 'ParentIntentSignature', properties.ParentIntentSignature != null ? cfn_parse.FromCloudFormation.getString(properties.ParentIntentSignature) : undefined);\n    ret.addPropertyResult('sampleUtterances', 'SampleUtterances', properties.SampleUtterances != null ? cfn_parse.FromCloudFormation.getArray(CfnBotSampleUtterancePropertyFromCloudFormation)(properties.SampleUtterances) : undefined);\n    ret.addPropertyResult('slotPriorities', 'SlotPriorities', properties.SlotPriorities != null ? cfn_parse.FromCloudFormation.getArray(CfnBotSlotPriorityPropertyFromCloudFormation)(properties.SlotPriorities) : undefined);\n    ret.addPropertyResult('slots', 'Slots', properties.Slots != null ? cfn_parse.FromCloudFormation.getArray(CfnBotSlotPropertyFromCloudFormation)(properties.Slots) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                             \n    export interface IntentClosingSettingProperty {\n                                                                                                                                                                                                                                                                                                          \n        readonly closingResponse: CfnBot.ResponseSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly isActive?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IntentClosingSettingProperty`\n *\n * @param properties - the TypeScript properties of a `IntentClosingSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_IntentClosingSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('closingResponse', cdk.requiredValidator)(properties.closingResponse));\n    errors.collect(cdk.propertyValidator('closingResponse', CfnBot_ResponseSpecificationPropertyValidator)(properties.closingResponse));\n    errors.collect(cdk.propertyValidator('isActive', cdk.validateBoolean)(properties.isActive));\n    return errors.wrap('supplied properties not correct for \"IntentClosingSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.IntentClosingSetting` resource\n *\n * @param properties - the TypeScript properties of a `IntentClosingSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.IntentClosingSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotIntentClosingSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_IntentClosingSettingPropertyValidator(properties).assertSuccess();\n    return {\n        ClosingResponse: cfnBotResponseSpecificationPropertyToCloudFormation(properties.closingResponse),\n        IsActive: cdk.booleanToCloudFormation(properties.isActive),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotIntentClosingSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.IntentClosingSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.IntentClosingSettingProperty>();\n    ret.addPropertyResult('closingResponse', 'ClosingResponse', CfnBotResponseSpecificationPropertyFromCloudFormation(properties.ClosingResponse));\n    ret.addPropertyResult('isActive', 'IsActive', properties.IsActive != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsActive) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                        \n    export interface IntentConfirmationSettingProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly declinationResponse: CfnBot.ResponseSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly isActive?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly promptSpecification: CfnBot.PromptSpecificationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IntentConfirmationSettingProperty`\n *\n * @param properties - the TypeScript properties of a `IntentConfirmationSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_IntentConfirmationSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('declinationResponse', cdk.requiredValidator)(properties.declinationResponse));\n    errors.collect(cdk.propertyValidator('declinationResponse', CfnBot_ResponseSpecificationPropertyValidator)(properties.declinationResponse));\n    errors.collect(cdk.propertyValidator('isActive', cdk.validateBoolean)(properties.isActive));\n    errors.collect(cdk.propertyValidator('promptSpecification', cdk.requiredValidator)(properties.promptSpecification));\n    errors.collect(cdk.propertyValidator('promptSpecification', CfnBot_PromptSpecificationPropertyValidator)(properties.promptSpecification));\n    return errors.wrap('supplied properties not correct for \"IntentConfirmationSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.IntentConfirmationSetting` resource\n *\n * @param properties - the TypeScript properties of a `IntentConfirmationSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.IntentConfirmationSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotIntentConfirmationSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_IntentConfirmationSettingPropertyValidator(properties).assertSuccess();\n    return {\n        DeclinationResponse: cfnBotResponseSpecificationPropertyToCloudFormation(properties.declinationResponse),\n        IsActive: cdk.booleanToCloudFormation(properties.isActive),\n        PromptSpecification: cfnBotPromptSpecificationPropertyToCloudFormation(properties.promptSpecification),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotIntentConfirmationSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.IntentConfirmationSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.IntentConfirmationSettingProperty>();\n    ret.addPropertyResult('declinationResponse', 'DeclinationResponse', CfnBotResponseSpecificationPropertyFromCloudFormation(properties.DeclinationResponse));\n    ret.addPropertyResult('isActive', 'IsActive', properties.IsActive != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsActive) : undefined);\n    ret.addPropertyResult('promptSpecification', 'PromptSpecification', CfnBotPromptSpecificationPropertyFromCloudFormation(properties.PromptSpecification));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface KendraConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly kendraIndex: string;\n                                                                                                                                                                                                                                                                                                                                                                               \n        readonly queryFilterString?: string;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly queryFilterStringEnabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KendraConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `KendraConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_KendraConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kendraIndex', cdk.requiredValidator)(properties.kendraIndex));\n    errors.collect(cdk.propertyValidator('kendraIndex', cdk.validateString)(properties.kendraIndex));\n    errors.collect(cdk.propertyValidator('queryFilterString', cdk.validateString)(properties.queryFilterString));\n    errors.collect(cdk.propertyValidator('queryFilterStringEnabled', cdk.validateBoolean)(properties.queryFilterStringEnabled));\n    return errors.wrap('supplied properties not correct for \"KendraConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.KendraConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `KendraConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.KendraConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotKendraConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_KendraConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        KendraIndex: cdk.stringToCloudFormation(properties.kendraIndex),\n        QueryFilterString: cdk.stringToCloudFormation(properties.queryFilterString),\n        QueryFilterStringEnabled: cdk.booleanToCloudFormation(properties.queryFilterStringEnabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotKendraConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.KendraConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.KendraConfigurationProperty>();\n    ret.addPropertyResult('kendraIndex', 'KendraIndex', cfn_parse.FromCloudFormation.getString(properties.KendraIndex));\n    ret.addPropertyResult('queryFilterString', 'QueryFilterString', properties.QueryFilterString != null ? cfn_parse.FromCloudFormation.getString(properties.QueryFilterString) : undefined);\n    ret.addPropertyResult('queryFilterStringEnabled', 'QueryFilterStringEnabled', properties.QueryFilterStringEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.QueryFilterStringEnabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                  \n    export interface MessageProperty {\n                                                                                                                                                                                                                                                                  \n        readonly customPayload?: CfnBot.CustomPayloadProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                               \n        readonly imageResponseCard?: CfnBot.ImageResponseCardProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                     \n        readonly plainTextMessage?: CfnBot.PlainTextMessageProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                             \n        readonly ssmlMessage?: CfnBot.SSMLMessageProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MessageProperty`\n *\n * @param properties - the TypeScript properties of a `MessageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_MessagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('customPayload', CfnBot_CustomPayloadPropertyValidator)(properties.customPayload));\n    errors.collect(cdk.propertyValidator('imageResponseCard', CfnBot_ImageResponseCardPropertyValidator)(properties.imageResponseCard));\n    errors.collect(cdk.propertyValidator('plainTextMessage', CfnBot_PlainTextMessagePropertyValidator)(properties.plainTextMessage));\n    errors.collect(cdk.propertyValidator('ssmlMessage', CfnBot_SSMLMessagePropertyValidator)(properties.ssmlMessage));\n    return errors.wrap('supplied properties not correct for \"MessageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.Message` resource\n *\n * @param properties - the TypeScript properties of a `MessageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.Message` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotMessagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_MessagePropertyValidator(properties).assertSuccess();\n    return {\n        CustomPayload: cfnBotCustomPayloadPropertyToCloudFormation(properties.customPayload),\n        ImageResponseCard: cfnBotImageResponseCardPropertyToCloudFormation(properties.imageResponseCard),\n        PlainTextMessage: cfnBotPlainTextMessagePropertyToCloudFormation(properties.plainTextMessage),\n        SSMLMessage: cfnBotSSMLMessagePropertyToCloudFormation(properties.ssmlMessage),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotMessagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.MessageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.MessageProperty>();\n    ret.addPropertyResult('customPayload', 'CustomPayload', properties.CustomPayload != null ? CfnBotCustomPayloadPropertyFromCloudFormation(properties.CustomPayload) : undefined);\n    ret.addPropertyResult('imageResponseCard', 'ImageResponseCard', properties.ImageResponseCard != null ? CfnBotImageResponseCardPropertyFromCloudFormation(properties.ImageResponseCard) : undefined);\n    ret.addPropertyResult('plainTextMessage', 'PlainTextMessage', properties.PlainTextMessage != null ? CfnBotPlainTextMessagePropertyFromCloudFormation(properties.PlainTextMessage) : undefined);\n    ret.addPropertyResult('ssmlMessage', 'SSMLMessage', properties.SSMLMessage != null ? CfnBotSSMLMessagePropertyFromCloudFormation(properties.SSMLMessage) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                         \n    export interface MessageGroupProperty {\n                                                                                                                                                                                                                                                                   \n        readonly message: CfnBot.MessageProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly variations?: Array<CfnBot.MessageProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MessageGroupProperty`\n *\n * @param properties - the TypeScript properties of a `MessageGroupProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_MessageGroupPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('message', cdk.requiredValidator)(properties.message));\n    errors.collect(cdk.propertyValidator('message', CfnBot_MessagePropertyValidator)(properties.message));\n    errors.collect(cdk.propertyValidator('variations', cdk.listValidator(CfnBot_MessagePropertyValidator))(properties.variations));\n    return errors.wrap('supplied properties not correct for \"MessageGroupProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.MessageGroup` resource\n *\n * @param properties - the TypeScript properties of a `MessageGroupProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.MessageGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotMessageGroupPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_MessageGroupPropertyValidator(properties).assertSuccess();\n    return {\n        Message: cfnBotMessagePropertyToCloudFormation(properties.message),\n        Variations: cdk.listMapper(cfnBotMessagePropertyToCloudFormation)(properties.variations),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotMessageGroupPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.MessageGroupProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.MessageGroupProperty>();\n    ret.addPropertyResult('message', 'Message', CfnBotMessagePropertyFromCloudFormation(properties.Message));\n    ret.addPropertyResult('variations', 'Variations', properties.Variations != null ? cfn_parse.FromCloudFormation.getArray(CfnBotMessagePropertyFromCloudFormation)(properties.Variations) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                \n    export interface MultipleValuesSettingProperty {\nn        readonly allowMultipleValues?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MultipleValuesSettingProperty`\n *\n * @param properties - the TypeScript properties of a `MultipleValuesSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_MultipleValuesSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowMultipleValues', cdk.validateBoolean)(properties.allowMultipleValues));\n    return errors.wrap('supplied properties not correct for \"MultipleValuesSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.MultipleValuesSetting` resource\n *\n * @param properties - the TypeScript properties of a `MultipleValuesSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.MultipleValuesSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotMultipleValuesSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_MultipleValuesSettingPropertyValidator(properties).assertSuccess();\n    return {\n        AllowMultipleValues: cdk.booleanToCloudFormation(properties.allowMultipleValues),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotMultipleValuesSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.MultipleValuesSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.MultipleValuesSettingProperty>();\n    ret.addPropertyResult('allowMultipleValues', 'AllowMultipleValues', properties.AllowMultipleValues != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowMultipleValues) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                 \n    export interface ObfuscationSettingProperty {\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly obfuscationSettingType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ObfuscationSettingProperty`\n *\n * @param properties - the TypeScript properties of a `ObfuscationSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_ObfuscationSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('obfuscationSettingType', cdk.requiredValidator)(properties.obfuscationSettingType));\n    errors.collect(cdk.propertyValidator('obfuscationSettingType', cdk.validateString)(properties.obfuscationSettingType));\n    return errors.wrap('supplied properties not correct for \"ObfuscationSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.ObfuscationSetting` resource\n *\n * @param properties - the TypeScript properties of a `ObfuscationSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.ObfuscationSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotObfuscationSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_ObfuscationSettingPropertyValidator(properties).assertSuccess();\n    return {\n        ObfuscationSettingType: cdk.stringToCloudFormation(properties.obfuscationSettingType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotObfuscationSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.ObfuscationSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.ObfuscationSettingProperty>();\n    ret.addPropertyResult('obfuscationSettingType', 'ObfuscationSettingType', cfn_parse.FromCloudFormation.getString(properties.ObfuscationSettingType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                              \n    export interface OutputContextProperty {\n                                                                                                                                                                                                                                     \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly timeToLiveInSeconds: number;\n                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly turnsToLive: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OutputContextProperty`\n *\n * @param properties - the TypeScript properties of a `OutputContextProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_OutputContextPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('timeToLiveInSeconds', cdk.requiredValidator)(properties.timeToLiveInSeconds));\n    errors.collect(cdk.propertyValidator('timeToLiveInSeconds', cdk.validateNumber)(properties.timeToLiveInSeconds));\n    errors.collect(cdk.propertyValidator('turnsToLive', cdk.requiredValidator)(properties.turnsToLive));\n    errors.collect(cdk.propertyValidator('turnsToLive', cdk.validateNumber)(properties.turnsToLive));\n    return errors.wrap('supplied properties not correct for \"OutputContextProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.OutputContext` resource\n *\n * @param properties - the TypeScript properties of a `OutputContextProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.OutputContext` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotOutputContextPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_OutputContextPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        TimeToLiveInSeconds: cdk.numberToCloudFormation(properties.timeToLiveInSeconds),\n        TurnsToLive: cdk.numberToCloudFormation(properties.turnsToLive),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotOutputContextPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.OutputContextProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.OutputContextProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('timeToLiveInSeconds', 'TimeToLiveInSeconds', cfn_parse.FromCloudFormation.getNumber(properties.TimeToLiveInSeconds));\n    ret.addPropertyResult('turnsToLive', 'TurnsToLive', cfn_parse.FromCloudFormation.getNumber(properties.TurnsToLive));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                         \n    export interface PlainTextMessageProperty {\n                                                                                                                                                                                                                                             \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PlainTextMessageProperty`\n *\n * @param properties - the TypeScript properties of a `PlainTextMessageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_PlainTextMessagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"PlainTextMessageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.PlainTextMessage` resource\n *\n * @param properties - the TypeScript properties of a `PlainTextMessageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.PlainTextMessage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotPlainTextMessagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_PlainTextMessagePropertyValidator(properties).assertSuccess();\n    return {\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotPlainTextMessagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.PlainTextMessageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.PlainTextMessageProperty>();\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface PostFulfillmentStatusSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly failureResponse?: CfnBot.ResponseSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly successResponse?: CfnBot.ResponseSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly timeoutResponse?: CfnBot.ResponseSpecificationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PostFulfillmentStatusSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `PostFulfillmentStatusSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_PostFulfillmentStatusSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('failureResponse', CfnBot_ResponseSpecificationPropertyValidator)(properties.failureResponse));\n    errors.collect(cdk.propertyValidator('successResponse', CfnBot_ResponseSpecificationPropertyValidator)(properties.successResponse));\n    errors.collect(cdk.propertyValidator('timeoutResponse', CfnBot_ResponseSpecificationPropertyValidator)(properties.timeoutResponse));\n    return errors.wrap('supplied properties not correct for \"PostFulfillmentStatusSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.PostFulfillmentStatusSpecification` resource\n *\n * @param properties - the TypeScript properties of a `PostFulfillmentStatusSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.PostFulfillmentStatusSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotPostFulfillmentStatusSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_PostFulfillmentStatusSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        FailureResponse: cfnBotResponseSpecificationPropertyToCloudFormation(properties.failureResponse),\n        SuccessResponse: cfnBotResponseSpecificationPropertyToCloudFormation(properties.successResponse),\n        TimeoutResponse: cfnBotResponseSpecificationPropertyToCloudFormation(properties.timeoutResponse),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotPostFulfillmentStatusSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.PostFulfillmentStatusSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.PostFulfillmentStatusSpecificationProperty>();\n    ret.addPropertyResult('failureResponse', 'FailureResponse', properties.FailureResponse != null ? CfnBotResponseSpecificationPropertyFromCloudFormation(properties.FailureResponse) : undefined);\n    ret.addPropertyResult('successResponse', 'SuccessResponse', properties.SuccessResponse != null ? CfnBotResponseSpecificationPropertyFromCloudFormation(properties.SuccessResponse) : undefined);\n    ret.addPropertyResult('timeoutResponse', 'TimeoutResponse', properties.TimeoutResponse != null ? CfnBotResponseSpecificationPropertyFromCloudFormation(properties.TimeoutResponse) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                  \n    export interface PromptSpecificationProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly allowInterrupt?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                      \n        readonly maxRetries: number;\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly messageGroupsList: Array<CfnBot.MessageGroupProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PromptSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `PromptSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_PromptSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowInterrupt', cdk.validateBoolean)(properties.allowInterrupt));\n    errors.collect(cdk.propertyValidator('maxRetries', cdk.requiredValidator)(properties.maxRetries));\n    errors.collect(cdk.propertyValidator('maxRetries', cdk.validateNumber)(properties.maxRetries));\n    errors.collect(cdk.propertyValidator('messageGroupsList', cdk.requiredValidator)(properties.messageGroupsList));\n    errors.collect(cdk.propertyValidator('messageGroupsList', cdk.listValidator(CfnBot_MessageGroupPropertyValidator))(properties.messageGroupsList));\n    return errors.wrap('supplied properties not correct for \"PromptSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.PromptSpecification` resource\n *\n * @param properties - the TypeScript properties of a `PromptSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.PromptSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotPromptSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_PromptSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        AllowInterrupt: cdk.booleanToCloudFormation(properties.allowInterrupt),\n        MaxRetries: cdk.numberToCloudFormation(properties.maxRetries),\n        MessageGroupsList: cdk.listMapper(cfnBotMessageGroupPropertyToCloudFormation)(properties.messageGroupsList),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotPromptSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.PromptSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.PromptSpecificationProperty>();\n    ret.addPropertyResult('allowInterrupt', 'AllowInterrupt', properties.AllowInterrupt != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowInterrupt) : undefined);\n    ret.addPropertyResult('maxRetries', 'MaxRetries', cfn_parse.FromCloudFormation.getNumber(properties.MaxRetries));\n    ret.addPropertyResult('messageGroupsList', 'MessageGroupsList', cfn_parse.FromCloudFormation.getArray(CfnBotMessageGroupPropertyFromCloudFormation)(properties.MessageGroupsList));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                             \n    export interface ResponseSpecificationProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly allowInterrupt?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly messageGroupsList: Array<CfnBot.MessageGroupProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResponseSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `ResponseSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_ResponseSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowInterrupt', cdk.validateBoolean)(properties.allowInterrupt));\n    errors.collect(cdk.propertyValidator('messageGroupsList', cdk.requiredValidator)(properties.messageGroupsList));\n    errors.collect(cdk.propertyValidator('messageGroupsList', cdk.listValidator(CfnBot_MessageGroupPropertyValidator))(properties.messageGroupsList));\n    return errors.wrap('supplied properties not correct for \"ResponseSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.ResponseSpecification` resource\n *\n * @param properties - the TypeScript properties of a `ResponseSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.ResponseSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotResponseSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_ResponseSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        AllowInterrupt: cdk.booleanToCloudFormation(properties.allowInterrupt),\n        MessageGroupsList: cdk.listMapper(cfnBotMessageGroupPropertyToCloudFormation)(properties.messageGroupsList),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotResponseSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.ResponseSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.ResponseSpecificationProperty>();\n    ret.addPropertyResult('allowInterrupt', 'AllowInterrupt', properties.AllowInterrupt != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowInterrupt) : undefined);\n    ret.addPropertyResult('messageGroupsList', 'MessageGroupsList', cfn_parse.FromCloudFormation.getArray(CfnBotMessageGroupPropertyFromCloudFormation)(properties.MessageGroupsList));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                      \n    export interface S3LocationProperty {\n                                                                                                                                                                                                                       \n        readonly s3Bucket: string;\n                                                                                                                                                                                                                                                             \n        readonly s3ObjectKey: string;\n                                                                                                                                                                                                                                                      \n        readonly s3ObjectVersion?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3LocationProperty`\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_S3LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Bucket', cdk.requiredValidator)(properties.s3Bucket));\n    errors.collect(cdk.propertyValidator('s3Bucket', cdk.validateString)(properties.s3Bucket));\n    errors.collect(cdk.propertyValidator('s3ObjectKey', cdk.requiredValidator)(properties.s3ObjectKey));\n    errors.collect(cdk.propertyValidator('s3ObjectKey', cdk.validateString)(properties.s3ObjectKey));\n    errors.collect(cdk.propertyValidator('s3ObjectVersion', cdk.validateString)(properties.s3ObjectVersion));\n    return errors.wrap('supplied properties not correct for \"S3LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.S3Location` resource\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.S3Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotS3LocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_S3LocationPropertyValidator(properties).assertSuccess();\n    return {\n        S3Bucket: cdk.stringToCloudFormation(properties.s3Bucket),\n        S3ObjectKey: cdk.stringToCloudFormation(properties.s3ObjectKey),\n        S3ObjectVersion: cdk.stringToCloudFormation(properties.s3ObjectVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotS3LocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.S3LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.S3LocationProperty>();\n    ret.addPropertyResult('s3Bucket', 'S3Bucket', cfn_parse.FromCloudFormation.getString(properties.S3Bucket));\n    ret.addPropertyResult('s3ObjectKey', 'S3ObjectKey', cfn_parse.FromCloudFormation.getString(properties.S3ObjectKey));\n    ret.addPropertyResult('s3ObjectVersion', 'S3ObjectVersion', properties.S3ObjectVersion != null ? cfn_parse.FromCloudFormation.getString(properties.S3ObjectVersion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                           \n    export interface SSMLMessageProperty {\n                                                                                                                                                                                                                                         \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SSMLMessageProperty`\n *\n * @param properties - the TypeScript properties of a `SSMLMessageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_SSMLMessagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"SSMLMessageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.SSMLMessage` resource\n *\n * @param properties - the TypeScript properties of a `SSMLMessageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.SSMLMessage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotSSMLMessagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_SSMLMessagePropertyValidator(properties).assertSuccess();\n    return {\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotSSMLMessagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.SSMLMessageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.SSMLMessageProperty>();\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                          \n    export interface SampleUtteranceProperty {\n                                                                                                                                                                                                                                                                                                                  \n        readonly utterance: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SampleUtteranceProperty`\n *\n * @param properties - the TypeScript properties of a `SampleUtteranceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_SampleUtterancePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('utterance', cdk.requiredValidator)(properties.utterance));\n    errors.collect(cdk.propertyValidator('utterance', cdk.validateString)(properties.utterance));\n    return errors.wrap('supplied properties not correct for \"SampleUtteranceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.SampleUtterance` resource\n *\n * @param properties - the TypeScript properties of a `SampleUtteranceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.SampleUtterance` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotSampleUtterancePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_SampleUtterancePropertyValidator(properties).assertSuccess();\n    return {\n        Utterance: cdk.stringToCloudFormation(properties.utterance),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotSampleUtterancePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.SampleUtteranceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.SampleUtteranceProperty>();\n    ret.addPropertyResult('utterance', 'Utterance', cfn_parse.FromCloudFormation.getString(properties.Utterance));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                            \n    export interface SampleValueProperty {\n                                                                                                                                                                                                                                              \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SampleValueProperty`\n *\n * @param properties - the TypeScript properties of a `SampleValueProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_SampleValuePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"SampleValueProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.SampleValue` resource\n *\n * @param properties - the TypeScript properties of a `SampleValueProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.SampleValue` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotSampleValuePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_SampleValuePropertyValidator(properties).assertSuccess();\n    return {\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotSampleValuePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.SampleValueProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.SampleValueProperty>();\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                     \n    export interface SlotProperty {\n                                                                                                                                                                                                                          \n        readonly description?: string;\n                                                                                                                                                                                                                                                                               \n        readonly multipleValuesSetting?: CfnBot.MultipleValuesSettingProperty | cdk.IResolvable;\n                                                                                                                                                                                                         \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly obfuscationSetting?: CfnBot.ObfuscationSettingProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                           \n        readonly slotTypeName: string;\nn        readonly valueElicitationSetting: CfnBot.SlotValueElicitationSettingProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SlotProperty`\n *\n * @param properties - the TypeScript properties of a `SlotProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_SlotPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('multipleValuesSetting', CfnBot_MultipleValuesSettingPropertyValidator)(properties.multipleValuesSetting));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('obfuscationSetting', CfnBot_ObfuscationSettingPropertyValidator)(properties.obfuscationSetting));\n    errors.collect(cdk.propertyValidator('slotTypeName', cdk.requiredValidator)(properties.slotTypeName));\n    errors.collect(cdk.propertyValidator('slotTypeName', cdk.validateString)(properties.slotTypeName));\n    errors.collect(cdk.propertyValidator('valueElicitationSetting', cdk.requiredValidator)(properties.valueElicitationSetting));\n    errors.collect(cdk.propertyValidator('valueElicitationSetting', CfnBot_SlotValueElicitationSettingPropertyValidator)(properties.valueElicitationSetting));\n    return errors.wrap('supplied properties not correct for \"SlotProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.Slot` resource\n *\n * @param properties - the TypeScript properties of a `SlotProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.Slot` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotSlotPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_SlotPropertyValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        MultipleValuesSetting: cfnBotMultipleValuesSettingPropertyToCloudFormation(properties.multipleValuesSetting),\n        Name: cdk.stringToCloudFormation(properties.name),\n        ObfuscationSetting: cfnBotObfuscationSettingPropertyToCloudFormation(properties.obfuscationSetting),\n        SlotTypeName: cdk.stringToCloudFormation(properties.slotTypeName),\n        ValueElicitationSetting: cfnBotSlotValueElicitationSettingPropertyToCloudFormation(properties.valueElicitationSetting),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotSlotPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.SlotProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.SlotProperty>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('multipleValuesSetting', 'MultipleValuesSetting', properties.MultipleValuesSetting != null ? CfnBotMultipleValuesSettingPropertyFromCloudFormation(properties.MultipleValuesSetting) : undefined);\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('obfuscationSetting', 'ObfuscationSetting', properties.ObfuscationSetting != null ? CfnBotObfuscationSettingPropertyFromCloudFormation(properties.ObfuscationSetting) : undefined);\n    ret.addPropertyResult('slotTypeName', 'SlotTypeName', cfn_parse.FromCloudFormation.getString(properties.SlotTypeName));\n    ret.addPropertyResult('valueElicitationSetting', 'ValueElicitationSetting', CfnBotSlotValueElicitationSettingPropertyFromCloudFormation(properties.ValueElicitationSetting));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                         \n    export interface SlotDefaultValueProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly defaultValue: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SlotDefaultValueProperty`\n *\n * @param properties - the TypeScript properties of a `SlotDefaultValueProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_SlotDefaultValuePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultValue', cdk.requiredValidator)(properties.defaultValue));\n    errors.collect(cdk.propertyValidator('defaultValue', cdk.validateString)(properties.defaultValue));\n    return errors.wrap('supplied properties not correct for \"SlotDefaultValueProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotDefaultValue` resource\n *\n * @param properties - the TypeScript properties of a `SlotDefaultValueProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotDefaultValue` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotSlotDefaultValuePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_SlotDefaultValuePropertyValidator(properties).assertSuccess();\n    return {\n        DefaultValue: cdk.stringToCloudFormation(properties.defaultValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotSlotDefaultValuePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.SlotDefaultValueProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.SlotDefaultValueProperty>();\n    ret.addPropertyResult('defaultValue', 'DefaultValue', cfn_parse.FromCloudFormation.getString(properties.DefaultValue));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                        \n    export interface SlotDefaultValueSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly defaultValueList: Array<CfnBot.SlotDefaultValueProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SlotDefaultValueSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `SlotDefaultValueSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_SlotDefaultValueSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultValueList', cdk.requiredValidator)(properties.defaultValueList));\n    errors.collect(cdk.propertyValidator('defaultValueList', cdk.listValidator(CfnBot_SlotDefaultValuePropertyValidator))(properties.defaultValueList));\n    return errors.wrap('supplied properties not correct for \"SlotDefaultValueSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotDefaultValueSpecification` resource\n *\n * @param properties - the TypeScript properties of a `SlotDefaultValueSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotDefaultValueSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotSlotDefaultValueSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_SlotDefaultValueSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        DefaultValueList: cdk.listMapper(cfnBotSlotDefaultValuePropertyToCloudFormation)(properties.defaultValueList),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotSlotDefaultValueSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.SlotDefaultValueSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.SlotDefaultValueSpecificationProperty>();\n    ret.addPropertyResult('defaultValueList', 'DefaultValueList', cfn_parse.FromCloudFormation.getArray(CfnBotSlotDefaultValuePropertyFromCloudFormation)(properties.DefaultValueList));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                        \n    export interface SlotPriorityProperty {\n                                                                                                                                                                                                                                                              \n        readonly priority: number;\n                                                                                                                                                                                                                             \n        readonly slotName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SlotPriorityProperty`\n *\n * @param properties - the TypeScript properties of a `SlotPriorityProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_SlotPriorityPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('priority', cdk.requiredValidator)(properties.priority));\n    errors.collect(cdk.propertyValidator('priority', cdk.validateNumber)(properties.priority));\n    errors.collect(cdk.propertyValidator('slotName', cdk.requiredValidator)(properties.slotName));\n    errors.collect(cdk.propertyValidator('slotName', cdk.validateString)(properties.slotName));\n    return errors.wrap('supplied properties not correct for \"SlotPriorityProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotPriority` resource\n *\n * @param properties - the TypeScript properties of a `SlotPriorityProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotPriority` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotSlotPriorityPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_SlotPriorityPropertyValidator(properties).assertSuccess();\n    return {\n        Priority: cdk.numberToCloudFormation(properties.priority),\n        SlotName: cdk.stringToCloudFormation(properties.slotName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotSlotPriorityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.SlotPriorityProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.SlotPriorityProperty>();\n    ret.addPropertyResult('priority', 'Priority', cfn_parse.FromCloudFormation.getNumber(properties.Priority));\n    ret.addPropertyResult('slotName', 'SlotName', cfn_parse.FromCloudFormation.getString(properties.SlotName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                     \n    export interface SlotTypeProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                \n        readonly externalSourceSetting?: CfnBot.ExternalSourceSettingProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                           \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly parentSlotTypeSignature?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly slotTypeValues?: Array<CfnBot.SlotTypeValueProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly valueSelectionSetting?: CfnBot.SlotValueSelectionSettingProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SlotTypeProperty`\n *\n * @param properties - the TypeScript properties of a `SlotTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_SlotTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('externalSourceSetting', CfnBot_ExternalSourceSettingPropertyValidator)(properties.externalSourceSetting));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('parentSlotTypeSignature', cdk.validateString)(properties.parentSlotTypeSignature));\n    errors.collect(cdk.propertyValidator('slotTypeValues', cdk.listValidator(CfnBot_SlotTypeValuePropertyValidator))(properties.slotTypeValues));\n    errors.collect(cdk.propertyValidator('valueSelectionSetting', CfnBot_SlotValueSelectionSettingPropertyValidator)(properties.valueSelectionSetting));\n    return errors.wrap('supplied properties not correct for \"SlotTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotType` resource\n *\n * @param properties - the TypeScript properties of a `SlotTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotSlotTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_SlotTypePropertyValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        ExternalSourceSetting: cfnBotExternalSourceSettingPropertyToCloudFormation(properties.externalSourceSetting),\n        Name: cdk.stringToCloudFormation(properties.name),\n        ParentSlotTypeSignature: cdk.stringToCloudFormation(properties.parentSlotTypeSignature),\n        SlotTypeValues: cdk.listMapper(cfnBotSlotTypeValuePropertyToCloudFormation)(properties.slotTypeValues),\n        ValueSelectionSetting: cfnBotSlotValueSelectionSettingPropertyToCloudFormation(properties.valueSelectionSetting),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotSlotTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.SlotTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.SlotTypeProperty>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('externalSourceSetting', 'ExternalSourceSetting', properties.ExternalSourceSetting != null ? CfnBotExternalSourceSettingPropertyFromCloudFormation(properties.ExternalSourceSetting) : undefined);\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('parentSlotTypeSignature', 'ParentSlotTypeSignature', properties.ParentSlotTypeSignature != null ? cfn_parse.FromCloudFormation.getString(properties.ParentSlotTypeSignature) : undefined);\n    ret.addPropertyResult('slotTypeValues', 'SlotTypeValues', properties.SlotTypeValues != null ? cfn_parse.FromCloudFormation.getArray(CfnBotSlotTypeValuePropertyFromCloudFormation)(properties.SlotTypeValues) : undefined);\n    ret.addPropertyResult('valueSelectionSetting', 'ValueSelectionSetting', properties.ValueSelectionSetting != null ? CfnBotSlotValueSelectionSettingPropertyFromCloudFormation(properties.ValueSelectionSetting) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                                \n    export interface SlotTypeValueProperty {\n                                                                                                                                                                                                                                              \n        readonly sampleValue: CfnBot.SampleValueProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                           \n        readonly synonyms?: Array<CfnBot.SampleValueProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SlotTypeValueProperty`\n *\n * @param properties - the TypeScript properties of a `SlotTypeValueProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_SlotTypeValuePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('sampleValue', cdk.requiredValidator)(properties.sampleValue));\n    errors.collect(cdk.propertyValidator('sampleValue', CfnBot_SampleValuePropertyValidator)(properties.sampleValue));\n    errors.collect(cdk.propertyValidator('synonyms', cdk.listValidator(CfnBot_SampleValuePropertyValidator))(properties.synonyms));\n    return errors.wrap('supplied properties not correct for \"SlotTypeValueProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotTypeValue` resource\n *\n * @param properties - the TypeScript properties of a `SlotTypeValueProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotTypeValue` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotSlotTypeValuePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_SlotTypeValuePropertyValidator(properties).assertSuccess();\n    return {\n        SampleValue: cfnBotSampleValuePropertyToCloudFormation(properties.sampleValue),\n        Synonyms: cdk.listMapper(cfnBotSampleValuePropertyToCloudFormation)(properties.synonyms),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotSlotTypeValuePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.SlotTypeValueProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.SlotTypeValueProperty>();\n    ret.addPropertyResult('sampleValue', 'SampleValue', CfnBotSampleValuePropertyFromCloudFormation(properties.SampleValue));\n    ret.addPropertyResult('synonyms', 'Synonyms', properties.Synonyms != null ? cfn_parse.FromCloudFormation.getArray(CfnBotSampleValuePropertyFromCloudFormation)(properties.Synonyms) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                       \n    export interface SlotValueElicitationSettingProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly defaultValueSpecification?: CfnBot.SlotDefaultValueSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                        \n        readonly promptSpecification?: CfnBot.PromptSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly sampleUtterances?: Array<CfnBot.SampleUtteranceProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                               \n        readonly slotConstraint: string;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly waitAndContinueSpecification?: CfnBot.WaitAndContinueSpecificationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SlotValueElicitationSettingProperty`\n *\n * @param properties - the TypeScript properties of a `SlotValueElicitationSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_SlotValueElicitationSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultValueSpecification', CfnBot_SlotDefaultValueSpecificationPropertyValidator)(properties.defaultValueSpecification));\n    errors.collect(cdk.propertyValidator('promptSpecification', CfnBot_PromptSpecificationPropertyValidator)(properties.promptSpecification));\n    errors.collect(cdk.propertyValidator('sampleUtterances', cdk.listValidator(CfnBot_SampleUtterancePropertyValidator))(properties.sampleUtterances));\n    errors.collect(cdk.propertyValidator('slotConstraint', cdk.requiredValidator)(properties.slotConstraint));\n    errors.collect(cdk.propertyValidator('slotConstraint', cdk.validateString)(properties.slotConstraint));\n    errors.collect(cdk.propertyValidator('waitAndContinueSpecification', CfnBot_WaitAndContinueSpecificationPropertyValidator)(properties.waitAndContinueSpecification));\n    return errors.wrap('supplied properties not correct for \"SlotValueElicitationSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotValueElicitationSetting` resource\n *\n * @param properties - the TypeScript properties of a `SlotValueElicitationSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotValueElicitationSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotSlotValueElicitationSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_SlotValueElicitationSettingPropertyValidator(properties).assertSuccess();\n    return {\n        DefaultValueSpecification: cfnBotSlotDefaultValueSpecificationPropertyToCloudFormation(properties.defaultValueSpecification),\n        PromptSpecification: cfnBotPromptSpecificationPropertyToCloudFormation(properties.promptSpecification),\n        SampleUtterances: cdk.listMapper(cfnBotSampleUtterancePropertyToCloudFormation)(properties.sampleUtterances),\n        SlotConstraint: cdk.stringToCloudFormation(properties.slotConstraint),\n        WaitAndContinueSpecification: cfnBotWaitAndContinueSpecificationPropertyToCloudFormation(properties.waitAndContinueSpecification),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotSlotValueElicitationSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.SlotValueElicitationSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.SlotValueElicitationSettingProperty>();\n    ret.addPropertyResult('defaultValueSpecification', 'DefaultValueSpecification', properties.DefaultValueSpecification != null ? CfnBotSlotDefaultValueSpecificationPropertyFromCloudFormation(properties.DefaultValueSpecification) : undefined);\n    ret.addPropertyResult('promptSpecification', 'PromptSpecification', properties.PromptSpecification != null ? CfnBotPromptSpecificationPropertyFromCloudFormation(properties.PromptSpecification) : undefined);\n    ret.addPropertyResult('sampleUtterances', 'SampleUtterances', properties.SampleUtterances != null ? cfn_parse.FromCloudFormation.getArray(CfnBotSampleUtterancePropertyFromCloudFormation)(properties.SampleUtterances) : undefined);\n    ret.addPropertyResult('slotConstraint', 'SlotConstraint', cfn_parse.FromCloudFormation.getString(properties.SlotConstraint));\n    ret.addPropertyResult('waitAndContinueSpecification', 'WaitAndContinueSpecification', properties.WaitAndContinueSpecification != null ? CfnBotWaitAndContinueSpecificationPropertyFromCloudFormation(properties.WaitAndContinueSpecification) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                              \n    export interface SlotValueRegexFilterProperty {\nn        readonly pattern: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SlotValueRegexFilterProperty`\n *\n * @param properties - the TypeScript properties of a `SlotValueRegexFilterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_SlotValueRegexFilterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('pattern', cdk.requiredValidator)(properties.pattern));\n    errors.collect(cdk.propertyValidator('pattern', cdk.validateString)(properties.pattern));\n    return errors.wrap('supplied properties not correct for \"SlotValueRegexFilterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotValueRegexFilter` resource\n *\n * @param properties - the TypeScript properties of a `SlotValueRegexFilterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotValueRegexFilter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotSlotValueRegexFilterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_SlotValueRegexFilterPropertyValidator(properties).assertSuccess();\n    return {\n        Pattern: cdk.stringToCloudFormation(properties.pattern),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotSlotValueRegexFilterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.SlotValueRegexFilterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.SlotValueRegexFilterProperty>();\n    ret.addPropertyResult('pattern', 'Pattern', cfn_parse.FromCloudFormation.getString(properties.Pattern));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                            \n    export interface SlotValueSelectionSettingProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly regexFilter?: CfnBot.SlotValueRegexFilterProperty | cdk.IResolvable;\nn        readonly resolutionStrategy: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SlotValueSelectionSettingProperty`\n *\n * @param properties - the TypeScript properties of a `SlotValueSelectionSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_SlotValueSelectionSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('regexFilter', CfnBot_SlotValueRegexFilterPropertyValidator)(properties.regexFilter));\n    errors.collect(cdk.propertyValidator('resolutionStrategy', cdk.requiredValidator)(properties.resolutionStrategy));\n    errors.collect(cdk.propertyValidator('resolutionStrategy', cdk.validateString)(properties.resolutionStrategy));\n    return errors.wrap('supplied properties not correct for \"SlotValueSelectionSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotValueSelectionSetting` resource\n *\n * @param properties - the TypeScript properties of a `SlotValueSelectionSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.SlotValueSelectionSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotSlotValueSelectionSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_SlotValueSelectionSettingPropertyValidator(properties).assertSuccess();\n    return {\n        RegexFilter: cfnBotSlotValueRegexFilterPropertyToCloudFormation(properties.regexFilter),\n        ResolutionStrategy: cdk.stringToCloudFormation(properties.resolutionStrategy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotSlotValueSelectionSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.SlotValueSelectionSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.SlotValueSelectionSettingProperty>();\n    ret.addPropertyResult('regexFilter', 'RegexFilter', properties.RegexFilter != null ? CfnBotSlotValueRegexFilterPropertyFromCloudFormation(properties.RegexFilter) : undefined);\n    ret.addPropertyResult('resolutionStrategy', 'ResolutionStrategy', cfn_parse.FromCloudFormation.getString(properties.ResolutionStrategy));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                                                   \n    export interface StillWaitingResponseSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly allowInterrupt?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly frequencyInSeconds: number;\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly messageGroupsList: Array<CfnBot.MessageGroupProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                            \n        readonly timeoutInSeconds: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StillWaitingResponseSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `StillWaitingResponseSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_StillWaitingResponseSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowInterrupt', cdk.validateBoolean)(properties.allowInterrupt));\n    errors.collect(cdk.propertyValidator('frequencyInSeconds', cdk.requiredValidator)(properties.frequencyInSeconds));\n    errors.collect(cdk.propertyValidator('frequencyInSeconds', cdk.validateNumber)(properties.frequencyInSeconds));\n    errors.collect(cdk.propertyValidator('messageGroupsList', cdk.requiredValidator)(properties.messageGroupsList));\n    errors.collect(cdk.propertyValidator('messageGroupsList', cdk.listValidator(CfnBot_MessageGroupPropertyValidator))(properties.messageGroupsList));\n    errors.collect(cdk.propertyValidator('timeoutInSeconds', cdk.requiredValidator)(properties.timeoutInSeconds));\n    errors.collect(cdk.propertyValidator('timeoutInSeconds', cdk.validateNumber)(properties.timeoutInSeconds));\n    return errors.wrap('supplied properties not correct for \"StillWaitingResponseSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.StillWaitingResponseSpecification` resource\n *\n * @param properties - the TypeScript properties of a `StillWaitingResponseSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.StillWaitingResponseSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotStillWaitingResponseSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_StillWaitingResponseSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        AllowInterrupt: cdk.booleanToCloudFormation(properties.allowInterrupt),\n        FrequencyInSeconds: cdk.numberToCloudFormation(properties.frequencyInSeconds),\n        MessageGroupsList: cdk.listMapper(cfnBotMessageGroupPropertyToCloudFormation)(properties.messageGroupsList),\n        TimeoutInSeconds: cdk.numberToCloudFormation(properties.timeoutInSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotStillWaitingResponseSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.StillWaitingResponseSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.StillWaitingResponseSpecificationProperty>();\n    ret.addPropertyResult('allowInterrupt', 'AllowInterrupt', properties.AllowInterrupt != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowInterrupt) : undefined);\n    ret.addPropertyResult('frequencyInSeconds', 'FrequencyInSeconds', cfn_parse.FromCloudFormation.getNumber(properties.FrequencyInSeconds));\n    ret.addPropertyResult('messageGroupsList', 'MessageGroupsList', cfn_parse.FromCloudFormation.getArray(CfnBotMessageGroupPropertyFromCloudFormation)(properties.MessageGroupsList));\n    ret.addPropertyResult('timeoutInSeconds', 'TimeoutInSeconds', cfn_parse.FromCloudFormation.getNumber(properties.TimeoutInSeconds));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                               \n    export interface VoiceSettingsProperty {\n                                                                                                                                                                                                                                                                         \n        readonly voiceId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VoiceSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `VoiceSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_VoiceSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('voiceId', cdk.requiredValidator)(properties.voiceId));\n    errors.collect(cdk.propertyValidator('voiceId', cdk.validateString)(properties.voiceId));\n    return errors.wrap('supplied properties not correct for \"VoiceSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.VoiceSettings` resource\n *\n * @param properties - the TypeScript properties of a `VoiceSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.VoiceSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotVoiceSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_VoiceSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        VoiceId: cdk.stringToCloudFormation(properties.voiceId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotVoiceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.VoiceSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.VoiceSettingsProperty>();\n    ret.addPropertyResult('voiceId', 'VoiceId', cfn_parse.FromCloudFormation.getString(properties.VoiceId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBot {\n                                                                                                                                                                                                                                                                                                        \n    export interface WaitAndContinueSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly continueResponse: CfnBot.ResponseSpecificationProperty | cdk.IResolvable;\nn        readonly isActive?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly stillWaitingResponse?: CfnBot.StillWaitingResponseSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly waitingResponse: CfnBot.ResponseSpecificationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `WaitAndContinueSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `WaitAndContinueSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBot_WaitAndContinueSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('continueResponse', cdk.requiredValidator)(properties.continueResponse));\n    errors.collect(cdk.propertyValidator('continueResponse', CfnBot_ResponseSpecificationPropertyValidator)(properties.continueResponse));\n    errors.collect(cdk.propertyValidator('isActive', cdk.validateBoolean)(properties.isActive));\n    errors.collect(cdk.propertyValidator('stillWaitingResponse', CfnBot_StillWaitingResponseSpecificationPropertyValidator)(properties.stillWaitingResponse));\n    errors.collect(cdk.propertyValidator('waitingResponse', cdk.requiredValidator)(properties.waitingResponse));\n    errors.collect(cdk.propertyValidator('waitingResponse', CfnBot_ResponseSpecificationPropertyValidator)(properties.waitingResponse));\n    return errors.wrap('supplied properties not correct for \"WaitAndContinueSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::Bot.WaitAndContinueSpecification` resource\n *\n * @param properties - the TypeScript properties of a `WaitAndContinueSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::Bot.WaitAndContinueSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotWaitAndContinueSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBot_WaitAndContinueSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        ContinueResponse: cfnBotResponseSpecificationPropertyToCloudFormation(properties.continueResponse),\n        IsActive: cdk.booleanToCloudFormation(properties.isActive),\n        StillWaitingResponse: cfnBotStillWaitingResponseSpecificationPropertyToCloudFormation(properties.stillWaitingResponse),\n        WaitingResponse: cfnBotResponseSpecificationPropertyToCloudFormation(properties.waitingResponse),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotWaitAndContinueSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBot.WaitAndContinueSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBot.WaitAndContinueSpecificationProperty>();\n    ret.addPropertyResult('continueResponse', 'ContinueResponse', CfnBotResponseSpecificationPropertyFromCloudFormation(properties.ContinueResponse));\n    ret.addPropertyResult('isActive', 'IsActive', properties.IsActive != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsActive) : undefined);\n    ret.addPropertyResult('stillWaitingResponse', 'StillWaitingResponse', properties.StillWaitingResponse != null ? CfnBotStillWaitingResponseSpecificationPropertyFromCloudFormation(properties.StillWaitingResponse) : undefined);\n    ret.addPropertyResult('waitingResponse', 'WaitingResponse', CfnBotResponseSpecificationPropertyFromCloudFormation(properties.WaitingResponse));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                \nexport interface CfnBotAliasProps {\n\n                                                                                                                                                                                                \n    readonly botAliasName: string;\n\n                                                                                                                                                                                                \n    readonly botId: string;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    readonly botAliasLocaleSettings?: Array<CfnBotAlias.BotAliasLocaleSettingsItemProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly botAliasTags?: Array<cdk.CfnTag | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                         \n    readonly botVersion?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly conversationLogSettings?: CfnBotAlias.ConversationLogSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                      \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                       \n    readonly sentimentAnalysisSettings?: any | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnBotAliasProps`\n *\n * @param properties - the TypeScript properties of a `CfnBotAliasProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotAliasPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('botAliasLocaleSettings', cdk.listValidator(CfnBotAlias_BotAliasLocaleSettingsItemPropertyValidator))(properties.botAliasLocaleSettings));\n    errors.collect(cdk.propertyValidator('botAliasName', cdk.requiredValidator)(properties.botAliasName));\n    errors.collect(cdk.propertyValidator('botAliasName', cdk.validateString)(properties.botAliasName));\n    errors.collect(cdk.propertyValidator('botAliasTags', cdk.listValidator(cdk.validateCfnTag))(properties.botAliasTags));\n    errors.collect(cdk.propertyValidator('botId', cdk.requiredValidator)(properties.botId));\n    errors.collect(cdk.propertyValidator('botId', cdk.validateString)(properties.botId));\n    errors.collect(cdk.propertyValidator('botVersion', cdk.validateString)(properties.botVersion));\n    errors.collect(cdk.propertyValidator('conversationLogSettings', CfnBotAlias_ConversationLogSettingsPropertyValidator)(properties.conversationLogSettings));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('sentimentAnalysisSettings', cdk.validateObject)(properties.sentimentAnalysisSettings));\n    return errors.wrap('supplied properties not correct for \"CfnBotAliasProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotAlias` resource\n *\n * @param properties - the TypeScript properties of a `CfnBotAliasProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotAlias` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotAliasPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotAliasPropsValidator(properties).assertSuccess();\n    return {\n        BotAliasName: cdk.stringToCloudFormation(properties.botAliasName),\n        BotId: cdk.stringToCloudFormation(properties.botId),\n        BotAliasLocaleSettings: cdk.listMapper(cfnBotAliasBotAliasLocaleSettingsItemPropertyToCloudFormation)(properties.botAliasLocaleSettings),\n        BotAliasTags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.botAliasTags),\n        BotVersion: cdk.stringToCloudFormation(properties.botVersion),\n        ConversationLogSettings: cfnBotAliasConversationLogSettingsPropertyToCloudFormation(properties.conversationLogSettings),\n        Description: cdk.stringToCloudFormation(properties.description),\n        SentimentAnalysisSettings: cdk.objectToCloudFormation(properties.sentimentAnalysisSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotAliasPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotAliasProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotAliasProps>();\n    ret.addPropertyResult('botAliasName', 'BotAliasName', cfn_parse.FromCloudFormation.getString(properties.BotAliasName));\n    ret.addPropertyResult('botId', 'BotId', cfn_parse.FromCloudFormation.getString(properties.BotId));\n    ret.addPropertyResult('botAliasLocaleSettings', 'BotAliasLocaleSettings', properties.BotAliasLocaleSettings != null ? cfn_parse.FromCloudFormation.getArray(CfnBotAliasBotAliasLocaleSettingsItemPropertyFromCloudFormation)(properties.BotAliasLocaleSettings) : undefined);\n    ret.addPropertyResult('botAliasTags', 'BotAliasTags', properties.BotAliasTags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.BotAliasTags) : undefined);\n    ret.addPropertyResult('botVersion', 'BotVersion', properties.BotVersion != null ? cfn_parse.FromCloudFormation.getString(properties.BotVersion) : undefined);\n    ret.addPropertyResult('conversationLogSettings', 'ConversationLogSettings', properties.ConversationLogSettings != null ? CfnBotAliasConversationLogSettingsPropertyFromCloudFormation(properties.ConversationLogSettings) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('sentimentAnalysisSettings', 'SentimentAnalysisSettings', properties.SentimentAnalysisSettings != null ? cfn_parse.FromCloudFormation.getAny(properties.SentimentAnalysisSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \nexport class CfnBotAlias extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lex::BotAlias\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnBotAlias {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnBotAliasPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnBotAlias(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                           \n    public readonly attrArn: string;\n\n                                                                                                         \n    public readonly attrBotAliasId: string;\n\n                                                                                                                                                                                 \n    public readonly attrBotAliasStatus: string;\n\n                                                                                                                                                                                                \n    public botAliasName: string;\n\n                                                                                                                                                                                                \n    public botId: string;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    public botAliasLocaleSettings: Array<CfnBotAlias.BotAliasLocaleSettingsItemProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public botAliasTags: Array<cdk.CfnTag | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                         \n    public botVersion: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public conversationLogSettings: CfnBotAlias.ConversationLogSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                      \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                       \n    public sentimentAnalysisSettings: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnBotAliasProps) {\n        super(scope, id, { type: CfnBotAlias.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'botAliasName', this);\n        cdk.requireProperty(props, 'botId', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrBotAliasId = cdk.Token.asString(this.getAtt('BotAliasId'));\n        this.attrBotAliasStatus = cdk.Token.asString(this.getAtt('BotAliasStatus'));\n\n        this.botAliasName = props.botAliasName;\n        this.botId = props.botId;\n        this.botAliasLocaleSettings = props.botAliasLocaleSettings;\n        this.botAliasTags = props.botAliasTags;\n        this.botVersion = props.botVersion;\n        this.conversationLogSettings = props.conversationLogSettings;\n        this.description = props.description;\n        this.sentimentAnalysisSettings = props.sentimentAnalysisSettings;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnBotAlias.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            botAliasName: this.botAliasName,\n            botId: this.botId,\n            botAliasLocaleSettings: this.botAliasLocaleSettings,\n            botAliasTags: this.botAliasTags,\n            botVersion: this.botVersion,\n            conversationLogSettings: this.conversationLogSettings,\n            description: this.description,\n            sentimentAnalysisSettings: this.sentimentAnalysisSettings,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnBotAliasPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnBotAlias {\n                                                                                                                                                                                                                                                                            \n    export interface AudioLogDestinationProperty {\n                                                                                                                                                                                                                                                                                   \n        readonly s3Bucket?: CfnBotAlias.S3BucketLogDestinationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioLogDestinationProperty`\n *\n * @param properties - the TypeScript properties of a `AudioLogDestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotAlias_AudioLogDestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Bucket', CfnBotAlias_S3BucketLogDestinationPropertyValidator)(properties.s3Bucket));\n    return errors.wrap('supplied properties not correct for \"AudioLogDestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotAlias.AudioLogDestination` resource\n *\n * @param properties - the TypeScript properties of a `AudioLogDestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotAlias.AudioLogDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotAliasAudioLogDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotAlias_AudioLogDestinationPropertyValidator(properties).assertSuccess();\n    return {\n        S3Bucket: cfnBotAliasS3BucketLogDestinationPropertyToCloudFormation(properties.s3Bucket),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotAliasAudioLogDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotAlias.AudioLogDestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotAlias.AudioLogDestinationProperty>();\n    ret.addPropertyResult('s3Bucket', 'S3Bucket', properties.S3Bucket != null ? CfnBotAliasS3BucketLogDestinationPropertyFromCloudFormation(properties.S3Bucket) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBotAlias {\n                                                                                                                                                                                                                                                                                                                                                                               \n    export interface AudioLogSettingProperty {\n                                                                                                                                                                                                                                                                                                                    \n        readonly destination: CfnBotAlias.AudioLogDestinationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                               \n        readonly enabled: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioLogSettingProperty`\n *\n * @param properties - the TypeScript properties of a `AudioLogSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotAlias_AudioLogSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destination', cdk.requiredValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('destination', CfnBotAlias_AudioLogDestinationPropertyValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"AudioLogSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotAlias.AudioLogSetting` resource\n *\n * @param properties - the TypeScript properties of a `AudioLogSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotAlias.AudioLogSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotAliasAudioLogSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotAlias_AudioLogSettingPropertyValidator(properties).assertSuccess();\n    return {\n        Destination: cfnBotAliasAudioLogDestinationPropertyToCloudFormation(properties.destination),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotAliasAudioLogSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotAlias.AudioLogSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotAlias.AudioLogSettingProperty>();\n    ret.addPropertyResult('destination', 'Destination', CfnBotAliasAudioLogDestinationPropertyFromCloudFormation(properties.Destination));\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBotAlias {\n                                                                                                                                                                                                                                                                                                                                                   \n    export interface BotAliasLocaleSettingsProperty {\n                                                                                                                                                                                                                                                                                                                   \n        readonly codeHookSpecification?: CfnBotAlias.CodeHookSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly enabled: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BotAliasLocaleSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `BotAliasLocaleSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotAlias_BotAliasLocaleSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('codeHookSpecification', CfnBotAlias_CodeHookSpecificationPropertyValidator)(properties.codeHookSpecification));\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"BotAliasLocaleSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotAlias.BotAliasLocaleSettings` resource\n *\n * @param properties - the TypeScript properties of a `BotAliasLocaleSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotAlias.BotAliasLocaleSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotAliasBotAliasLocaleSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotAlias_BotAliasLocaleSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        CodeHookSpecification: cfnBotAliasCodeHookSpecificationPropertyToCloudFormation(properties.codeHookSpecification),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotAliasBotAliasLocaleSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotAlias.BotAliasLocaleSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotAlias.BotAliasLocaleSettingsProperty>();\n    ret.addPropertyResult('codeHookSpecification', 'CodeHookSpecification', properties.CodeHookSpecification != null ? CfnBotAliasCodeHookSpecificationPropertyFromCloudFormation(properties.CodeHookSpecification) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBotAlias {\n                                                                                                                                                                                                                                                                                                                                                       \n    export interface BotAliasLocaleSettingsItemProperty {\n                                                                                                                                                                                                                                                                                                          \n        readonly botAliasLocaleSetting: CfnBotAlias.BotAliasLocaleSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                  \n        readonly localeId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BotAliasLocaleSettingsItemProperty`\n *\n * @param properties - the TypeScript properties of a `BotAliasLocaleSettingsItemProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotAlias_BotAliasLocaleSettingsItemPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('botAliasLocaleSetting', cdk.requiredValidator)(properties.botAliasLocaleSetting));\n    errors.collect(cdk.propertyValidator('botAliasLocaleSetting', CfnBotAlias_BotAliasLocaleSettingsPropertyValidator)(properties.botAliasLocaleSetting));\n    errors.collect(cdk.propertyValidator('localeId', cdk.requiredValidator)(properties.localeId));\n    errors.collect(cdk.propertyValidator('localeId', cdk.validateString)(properties.localeId));\n    return errors.wrap('supplied properties not correct for \"BotAliasLocaleSettingsItemProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotAlias.BotAliasLocaleSettingsItem` resource\n *\n * @param properties - the TypeScript properties of a `BotAliasLocaleSettingsItemProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotAlias.BotAliasLocaleSettingsItem` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotAliasBotAliasLocaleSettingsItemPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotAlias_BotAliasLocaleSettingsItemPropertyValidator(properties).assertSuccess();\n    return {\n        BotAliasLocaleSetting: cfnBotAliasBotAliasLocaleSettingsPropertyToCloudFormation(properties.botAliasLocaleSetting),\n        LocaleId: cdk.stringToCloudFormation(properties.localeId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotAliasBotAliasLocaleSettingsItemPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotAlias.BotAliasLocaleSettingsItemProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotAlias.BotAliasLocaleSettingsItemProperty>();\n    ret.addPropertyResult('botAliasLocaleSetting', 'BotAliasLocaleSetting', CfnBotAliasBotAliasLocaleSettingsPropertyFromCloudFormation(properties.BotAliasLocaleSetting));\n    ret.addPropertyResult('localeId', 'LocaleId', cfn_parse.FromCloudFormation.getString(properties.LocaleId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBotAlias {\n                                                                                                                                                                                                                                                                                                                                                                    \n    export interface CloudWatchLogGroupLogDestinationProperty {\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly cloudWatchLogGroupArn: string;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly logPrefix: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CloudWatchLogGroupLogDestinationProperty`\n *\n * @param properties - the TypeScript properties of a `CloudWatchLogGroupLogDestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotAlias_CloudWatchLogGroupLogDestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchLogGroupArn', cdk.requiredValidator)(properties.cloudWatchLogGroupArn));\n    errors.collect(cdk.propertyValidator('cloudWatchLogGroupArn', cdk.validateString)(properties.cloudWatchLogGroupArn));\n    errors.collect(cdk.propertyValidator('logPrefix', cdk.requiredValidator)(properties.logPrefix));\n    errors.collect(cdk.propertyValidator('logPrefix', cdk.validateString)(properties.logPrefix));\n    return errors.wrap('supplied properties not correct for \"CloudWatchLogGroupLogDestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotAlias.CloudWatchLogGroupLogDestination` resource\n *\n * @param properties - the TypeScript properties of a `CloudWatchLogGroupLogDestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotAlias.CloudWatchLogGroupLogDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotAliasCloudWatchLogGroupLogDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotAlias_CloudWatchLogGroupLogDestinationPropertyValidator(properties).assertSuccess();\n    return {\n        CloudWatchLogGroupArn: cdk.stringToCloudFormation(properties.cloudWatchLogGroupArn),\n        LogPrefix: cdk.stringToCloudFormation(properties.logPrefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotAliasCloudWatchLogGroupLogDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotAlias.CloudWatchLogGroupLogDestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotAlias.CloudWatchLogGroupLogDestinationProperty>();\n    ret.addPropertyResult('cloudWatchLogGroupArn', 'CloudWatchLogGroupArn', cfn_parse.FromCloudFormation.getString(properties.CloudWatchLogGroupArn));\n    ret.addPropertyResult('logPrefix', 'LogPrefix', cfn_parse.FromCloudFormation.getString(properties.LogPrefix));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBotAlias {\n                                                                                                                                                                                                                                                                                                   \n    export interface CodeHookSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                              \n        readonly lambdaCodeHook: CfnBotAlias.LambdaCodeHookProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CodeHookSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `CodeHookSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotAlias_CodeHookSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('lambdaCodeHook', cdk.requiredValidator)(properties.lambdaCodeHook));\n    errors.collect(cdk.propertyValidator('lambdaCodeHook', CfnBotAlias_LambdaCodeHookPropertyValidator)(properties.lambdaCodeHook));\n    return errors.wrap('supplied properties not correct for \"CodeHookSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotAlias.CodeHookSpecification` resource\n *\n * @param properties - the TypeScript properties of a `CodeHookSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotAlias.CodeHookSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotAliasCodeHookSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotAlias_CodeHookSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        LambdaCodeHook: cfnBotAliasLambdaCodeHookPropertyToCloudFormation(properties.lambdaCodeHook),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotAliasCodeHookSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotAlias.CodeHookSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotAlias.CodeHookSpecificationProperty>();\n    ret.addPropertyResult('lambdaCodeHook', 'LambdaCodeHook', CfnBotAliasLambdaCodeHookPropertyFromCloudFormation(properties.LambdaCodeHook));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBotAlias {\n                                                                                                                                                                                                                                                                                                                              \n    export interface ConversationLogSettingsProperty {\n                                                                                                                                                                                                                                                                                                         \n        readonly audioLogSettings?: Array<CfnBotAlias.AudioLogSettingProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly textLogSettings?: Array<CfnBotAlias.TextLogSettingProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConversationLogSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `ConversationLogSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotAlias_ConversationLogSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audioLogSettings', cdk.listValidator(CfnBotAlias_AudioLogSettingPropertyValidator))(properties.audioLogSettings));\n    errors.collect(cdk.propertyValidator('textLogSettings', cdk.listValidator(CfnBotAlias_TextLogSettingPropertyValidator))(properties.textLogSettings));\n    return errors.wrap('supplied properties not correct for \"ConversationLogSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotAlias.ConversationLogSettings` resource\n *\n * @param properties - the TypeScript properties of a `ConversationLogSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotAlias.ConversationLogSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotAliasConversationLogSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotAlias_ConversationLogSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AudioLogSettings: cdk.listMapper(cfnBotAliasAudioLogSettingPropertyToCloudFormation)(properties.audioLogSettings),\n        TextLogSettings: cdk.listMapper(cfnBotAliasTextLogSettingPropertyToCloudFormation)(properties.textLogSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotAliasConversationLogSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotAlias.ConversationLogSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotAlias.ConversationLogSettingsProperty>();\n    ret.addPropertyResult('audioLogSettings', 'AudioLogSettings', properties.AudioLogSettings != null ? cfn_parse.FromCloudFormation.getArray(CfnBotAliasAudioLogSettingPropertyFromCloudFormation)(properties.AudioLogSettings) : undefined);\n    ret.addPropertyResult('textLogSettings', 'TextLogSettings', properties.TextLogSettings != null ? cfn_parse.FromCloudFormation.getArray(CfnBotAliasTextLogSettingPropertyFromCloudFormation)(properties.TextLogSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBotAlias {\n                                                                                                                                                                                                                                                                                                              \n    export interface LambdaCodeHookProperty {\n                                                                                                                                                                                                                                                                                                                                         \n        readonly codeHookInterfaceVersion: string;\n                                                                                                                                                                                                                                                                             \n        readonly lambdaArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaCodeHookProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaCodeHookProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotAlias_LambdaCodeHookPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('codeHookInterfaceVersion', cdk.requiredValidator)(properties.codeHookInterfaceVersion));\n    errors.collect(cdk.propertyValidator('codeHookInterfaceVersion', cdk.validateString)(properties.codeHookInterfaceVersion));\n    errors.collect(cdk.propertyValidator('lambdaArn', cdk.requiredValidator)(properties.lambdaArn));\n    errors.collect(cdk.propertyValidator('lambdaArn', cdk.validateString)(properties.lambdaArn));\n    return errors.wrap('supplied properties not correct for \"LambdaCodeHookProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotAlias.LambdaCodeHook` resource\n *\n * @param properties - the TypeScript properties of a `LambdaCodeHookProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotAlias.LambdaCodeHook` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotAliasLambdaCodeHookPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotAlias_LambdaCodeHookPropertyValidator(properties).assertSuccess();\n    return {\n        CodeHookInterfaceVersion: cdk.stringToCloudFormation(properties.codeHookInterfaceVersion),\n        LambdaArn: cdk.stringToCloudFormation(properties.lambdaArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotAliasLambdaCodeHookPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotAlias.LambdaCodeHookProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotAlias.LambdaCodeHookProperty>();\n    ret.addPropertyResult('codeHookInterfaceVersion', 'CodeHookInterfaceVersion', cfn_parse.FromCloudFormation.getString(properties.CodeHookInterfaceVersion));\n    ret.addPropertyResult('lambdaArn', 'LambdaArn', cfn_parse.FromCloudFormation.getString(properties.LambdaArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBotAlias {\n                                                                                                                                                                                                                                                                               \n    export interface S3BucketLogDestinationProperty {\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly kmsKeyArn?: string;\n                                                                                                                                                                                                                                                                                  \n        readonly logPrefix: string;\n                                                                                                                                                                                                                                                                                                                                \n        readonly s3BucketArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3BucketLogDestinationProperty`\n *\n * @param properties - the TypeScript properties of a `S3BucketLogDestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotAlias_S3BucketLogDestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyArn', cdk.validateString)(properties.kmsKeyArn));\n    errors.collect(cdk.propertyValidator('logPrefix', cdk.requiredValidator)(properties.logPrefix));\n    errors.collect(cdk.propertyValidator('logPrefix', cdk.validateString)(properties.logPrefix));\n    errors.collect(cdk.propertyValidator('s3BucketArn', cdk.requiredValidator)(properties.s3BucketArn));\n    errors.collect(cdk.propertyValidator('s3BucketArn', cdk.validateString)(properties.s3BucketArn));\n    return errors.wrap('supplied properties not correct for \"S3BucketLogDestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotAlias.S3BucketLogDestination` resource\n *\n * @param properties - the TypeScript properties of a `S3BucketLogDestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotAlias.S3BucketLogDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotAliasS3BucketLogDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotAlias_S3BucketLogDestinationPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyArn: cdk.stringToCloudFormation(properties.kmsKeyArn),\n        LogPrefix: cdk.stringToCloudFormation(properties.logPrefix),\n        S3BucketArn: cdk.stringToCloudFormation(properties.s3BucketArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotAliasS3BucketLogDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotAlias.S3BucketLogDestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotAlias.S3BucketLogDestinationProperty>();\n    ret.addPropertyResult('kmsKeyArn', 'KmsKeyArn', properties.KmsKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyArn) : undefined);\n    ret.addPropertyResult('logPrefix', 'LogPrefix', cfn_parse.FromCloudFormation.getString(properties.LogPrefix));\n    ret.addPropertyResult('s3BucketArn', 'S3BucketArn', cfn_parse.FromCloudFormation.getString(properties.S3BucketArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBotAlias {\n                                                                                                                                                                                                                                                                                                  \n    export interface TextLogDestinationProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TextLogDestinationProperty`\n *\n * @param properties - the TypeScript properties of a `TextLogDestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotAlias_TextLogDestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"TextLogDestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotAlias.TextLogDestination` resource\n *\n * @param properties - the TypeScript properties of a `TextLogDestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotAlias.TextLogDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotAliasTextLogDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotAlias_TextLogDestinationPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotAliasTextLogDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotAlias.TextLogDestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotAlias.TextLogDestinationProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBotAlias {\n                                                                                                                                                                                                                                                       \n    export interface TextLogSettingProperty {\n                                                                                                                                                                                                                                                                                                             \n        readonly destination?: CfnBotAlias.TextLogDestinationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                        \n        readonly enabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TextLogSettingProperty`\n *\n * @param properties - the TypeScript properties of a `TextLogSettingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotAlias_TextLogSettingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destination', CfnBotAlias_TextLogDestinationPropertyValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"TextLogSettingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotAlias.TextLogSetting` resource\n *\n * @param properties - the TypeScript properties of a `TextLogSettingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotAlias.TextLogSetting` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotAliasTextLogSettingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotAlias_TextLogSettingPropertyValidator(properties).assertSuccess();\n    return {\n        Destination: cfnBotAliasTextLogDestinationPropertyToCloudFormation(properties.destination),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotAliasTextLogSettingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotAlias.TextLogSettingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotAlias.TextLogSettingProperty>();\n    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnBotAliasTextLogDestinationPropertyFromCloudFormation(properties.Destination) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                    \nexport interface CfnBotVersionProps {\n\n                                                                                                                                                                                                    \n    readonly botId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly botVersionLocaleSpecification: Array<CfnBotVersion.BotVersionLocaleSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                        \n    readonly description?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnBotVersionProps`\n *\n * @param properties - the TypeScript properties of a `CfnBotVersionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotVersionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('botId', cdk.requiredValidator)(properties.botId));\n    errors.collect(cdk.propertyValidator('botId', cdk.validateString)(properties.botId));\n    errors.collect(cdk.propertyValidator('botVersionLocaleSpecification', cdk.requiredValidator)(properties.botVersionLocaleSpecification));\n    errors.collect(cdk.propertyValidator('botVersionLocaleSpecification', cdk.listValidator(CfnBotVersion_BotVersionLocaleSpecificationPropertyValidator))(properties.botVersionLocaleSpecification));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    return errors.wrap('supplied properties not correct for \"CfnBotVersionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotVersion` resource\n *\n * @param properties - the TypeScript properties of a `CfnBotVersionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotVersionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotVersionPropsValidator(properties).assertSuccess();\n    return {\n        BotId: cdk.stringToCloudFormation(properties.botId),\n        BotVersionLocaleSpecification: cdk.listMapper(cfnBotVersionBotVersionLocaleSpecificationPropertyToCloudFormation)(properties.botVersionLocaleSpecification),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotVersionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotVersionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotVersionProps>();\n    ret.addPropertyResult('botId', 'BotId', cfn_parse.FromCloudFormation.getString(properties.BotId));\n    ret.addPropertyResult('botVersionLocaleSpecification', 'BotVersionLocaleSpecification', cfn_parse.FromCloudFormation.getArray(CfnBotVersionBotVersionLocaleSpecificationPropertyFromCloudFormation)(properties.BotVersionLocaleSpecification));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnBotVersion extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lex::BotVersion\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnBotVersion {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnBotVersionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnBotVersion(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                         \n    public readonly attrBotVersion: string;\n\n                                                                                                                                                                                                    \n    public botId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public botVersionLocaleSpecification: Array<CfnBotVersion.BotVersionLocaleSpecificationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                        \n    public description: string | undefined;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnBotVersionProps) {\n        super(scope, id, { type: CfnBotVersion.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'botId', this);\n        cdk.requireProperty(props, 'botVersionLocaleSpecification', this);\n        this.attrBotVersion = cdk.Token.asString(this.getAtt('BotVersion'));\n\n        this.botId = props.botId;\n        this.botVersionLocaleSpecification = props.botVersionLocaleSpecification;\n        this.description = props.description;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnBotVersion.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            botId: this.botId,\n            botVersionLocaleSpecification: this.botVersionLocaleSpecification,\n            description: this.description,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnBotVersionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnBotVersion {\n                                                                                                                                                                                                                                                                \n    export interface BotVersionLocaleDetailsProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly sourceBotVersion: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BotVersionLocaleDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `BotVersionLocaleDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotVersion_BotVersionLocaleDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('sourceBotVersion', cdk.requiredValidator)(properties.sourceBotVersion));\n    errors.collect(cdk.propertyValidator('sourceBotVersion', cdk.validateString)(properties.sourceBotVersion));\n    return errors.wrap('supplied properties not correct for \"BotVersionLocaleDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotVersion.BotVersionLocaleDetails` resource\n *\n * @param properties - the TypeScript properties of a `BotVersionLocaleDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotVersion.BotVersionLocaleDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotVersionBotVersionLocaleDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotVersion_BotVersionLocaleDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        SourceBotVersion: cdk.stringToCloudFormation(properties.sourceBotVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotVersionBotVersionLocaleDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotVersion.BotVersionLocaleDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotVersion.BotVersionLocaleDetailsProperty>();\n    ret.addPropertyResult('sourceBotVersion', 'SourceBotVersion', cfn_parse.FromCloudFormation.getString(properties.SourceBotVersion));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBotVersion {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface BotVersionLocaleSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                  \n        readonly botVersionLocaleDetails: CfnBotVersion.BotVersionLocaleDetailsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                           \n        readonly localeId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BotVersionLocaleSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `BotVersionLocaleSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBotVersion_BotVersionLocaleSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('botVersionLocaleDetails', cdk.requiredValidator)(properties.botVersionLocaleDetails));\n    errors.collect(cdk.propertyValidator('botVersionLocaleDetails', CfnBotVersion_BotVersionLocaleDetailsPropertyValidator)(properties.botVersionLocaleDetails));\n    errors.collect(cdk.propertyValidator('localeId', cdk.requiredValidator)(properties.localeId));\n    errors.collect(cdk.propertyValidator('localeId', cdk.validateString)(properties.localeId));\n    return errors.wrap('supplied properties not correct for \"BotVersionLocaleSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::BotVersion.BotVersionLocaleSpecification` resource\n *\n * @param properties - the TypeScript properties of a `BotVersionLocaleSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::BotVersion.BotVersionLocaleSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBotVersionBotVersionLocaleSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBotVersion_BotVersionLocaleSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        BotVersionLocaleDetails: cfnBotVersionBotVersionLocaleDetailsPropertyToCloudFormation(properties.botVersionLocaleDetails),\n        LocaleId: cdk.stringToCloudFormation(properties.localeId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBotVersionBotVersionLocaleSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBotVersion.BotVersionLocaleSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBotVersion.BotVersionLocaleSpecificationProperty>();\n    ret.addPropertyResult('botVersionLocaleDetails', 'BotVersionLocaleDetails', CfnBotVersionBotVersionLocaleDetailsPropertyFromCloudFormation(properties.BotVersionLocaleDetails));\n    ret.addPropertyResult('localeId', 'LocaleId', cfn_parse.FromCloudFormation.getString(properties.LocaleId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnResourcePolicyProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly policy: any | cdk.IResolvable | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                \n    readonly resourceArn: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResourcePolicyProps`\n *\n * @param properties - the TypeScript properties of a `CfnResourcePolicyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResourcePolicyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('policy', cdk.requiredValidator)(properties.policy));\n    errors.collect(cdk.propertyValidator('policy', cdk.validateObject)(properties.policy));\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.requiredValidator)(properties.resourceArn));\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.validateString)(properties.resourceArn));\n    return errors.wrap('supplied properties not correct for \"CfnResourcePolicyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lex::ResourcePolicy` resource\n *\n * @param properties - the TypeScript properties of a `CfnResourcePolicyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lex::ResourcePolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResourcePolicyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResourcePolicyPropsValidator(properties).assertSuccess();\n    return {\n        Policy: cdk.objectToCloudFormation(properties.policy),\n        ResourceArn: cdk.stringToCloudFormation(properties.resourceArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResourcePolicyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResourcePolicyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResourcePolicyProps>();\n    ret.addPropertyResult('policy', 'Policy', cfn_parse.FromCloudFormation.getAny(properties.Policy));\n    ret.addPropertyResult('resourceArn', 'ResourceArn', cfn_parse.FromCloudFormation.getString(properties.ResourceArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                               \nexport class CfnResourcePolicy extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lex::ResourcePolicy\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResourcePolicy {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResourcePolicyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResourcePolicy(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                \n    public readonly attrId: string;\n\n                                                                 \n    public readonly attrRevisionId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public policy: any | cdk.IResolvable | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                \n    public resourceArn: string;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnResourcePolicyProps) {\n        super(scope, id, { type: CfnResourcePolicy.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'policy', this);\n        cdk.requireProperty(props, 'resourceArn', this);\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrRevisionId = cdk.Token.asString(this.getAtt('RevisionId'));\n\n        this.policy = props.policy;\n        this.resourceArn = props.resourceArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResourcePolicy.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            policy: this.policy,\n            resourceArn: this.resourceArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResourcePolicyPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
