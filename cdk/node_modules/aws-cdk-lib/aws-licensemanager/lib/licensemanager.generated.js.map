{
  "version": 3,
  "sources": ["licensemanager.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:32.249Z\",\"fingerprint\":\"E544wTCy+CbBxIM9+EjzK3EG1+Zx4w7y3XJ9BH/Xd0M=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                     \nexport interface CfnGrantProps {\n\n                                                                                                                                                                                                                            \n    readonly allowedOperations?: string[];\n\n                                                                                                                                                                                              \n    readonly grantName?: string;\n\n                                                                                                                                                                                                             \n    readonly homeRegion?: string;\n\n                                                                                                                                                                                                \n    readonly licenseArn?: string;\n\n                                                                                                                                                                                                         \n    readonly principals?: string[];\n\n                                                                                                                                                                                                       \n    readonly status?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnGrantProps`\n *\n * @param properties - the TypeScript properties of a `CfnGrantProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnGrantPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowedOperations', cdk.listValidator(cdk.validateString))(properties.allowedOperations));\n    errors.collect(cdk.propertyValidator('grantName', cdk.validateString)(properties.grantName));\n    errors.collect(cdk.propertyValidator('homeRegion', cdk.validateString)(properties.homeRegion));\n    errors.collect(cdk.propertyValidator('licenseArn', cdk.validateString)(properties.licenseArn));\n    errors.collect(cdk.propertyValidator('principals', cdk.listValidator(cdk.validateString))(properties.principals));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"CfnGrantProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LicenseManager::Grant` resource\n *\n * @param properties - the TypeScript properties of a `CfnGrantProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LicenseManager::Grant` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGrantPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGrantPropsValidator(properties).assertSuccess();\n    return {\n        AllowedOperations: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedOperations),\n        GrantName: cdk.stringToCloudFormation(properties.grantName),\n        HomeRegion: cdk.stringToCloudFormation(properties.homeRegion),\n        LicenseArn: cdk.stringToCloudFormation(properties.licenseArn),\n        Principals: cdk.listMapper(cdk.stringToCloudFormation)(properties.principals),\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGrantPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGrantProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGrantProps>();\n    ret.addPropertyResult('allowedOperations', 'AllowedOperations', properties.AllowedOperations != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AllowedOperations) : undefined);\n    ret.addPropertyResult('grantName', 'GrantName', properties.GrantName != null ? cfn_parse.FromCloudFormation.getString(properties.GrantName) : undefined);\n    ret.addPropertyResult('homeRegion', 'HomeRegion', properties.HomeRegion != null ? cfn_parse.FromCloudFormation.getString(properties.HomeRegion) : undefined);\n    ret.addPropertyResult('licenseArn', 'LicenseArn', properties.LicenseArn != null ? cfn_parse.FromCloudFormation.getString(properties.LicenseArn) : undefined);\n    ret.addPropertyResult('principals', 'Principals', properties.Principals != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Principals) : undefined);\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnGrant extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::LicenseManager::Grant\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnGrant {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnGrantPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnGrant(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                            \n    public readonly attrGrantArn: string;\n\n                                                                                 \n    public readonly attrVersion: string;\n\n                                                                                                                                                                                                                            \n    public allowedOperations: string[] | undefined;\n\n                                                                                                                                                                                              \n    public grantName: string | undefined;\n\n                                                                                                                                                                                                             \n    public homeRegion: string | undefined;\n\n                                                                                                                                                                                                \n    public licenseArn: string | undefined;\n\n                                                                                                                                                                                                         \n    public principals: string[] | undefined;\n\n                                                                                                                                                                                                       \n    public status: string | undefined;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnGrantProps = {}) {\n        super(scope, id, { type: CfnGrant.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrGrantArn = cdk.Token.asString(this.getAtt('GrantArn'));\n        this.attrVersion = cdk.Token.asString(this.getAtt('Version'));\n\n        this.allowedOperations = props.allowedOperations;\n        this.grantName = props.grantName;\n        this.homeRegion = props.homeRegion;\n        this.licenseArn = props.licenseArn;\n        this.principals = props.principals;\n        this.status = props.status;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnGrant.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            allowedOperations: this.allowedOperations,\n            grantName: this.grantName,\n            homeRegion: this.homeRegion,\n            licenseArn: this.licenseArn,\n            principals: this.principals,\n            status: this.status,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnGrantPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                         \nexport interface CfnLicenseProps {\n\n                                                                                                                                                                                                                                                   \n    readonly consumptionConfiguration: CfnLicense.ConsumptionConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                               \n    readonly entitlements: Array<CfnLicense.EntitlementProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                   \n    readonly homeRegion: string;\n\n                                                                                                                                                                                                   \n    readonly issuer: CfnLicense.IssuerDataProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                      \n    readonly licenseName: string;\n\n                                                                                                                                                                                                      \n    readonly productName: string;\n\n                                                                                                                                                                                                                                                                   \n    readonly validity: CfnLicense.ValidityDateFormatProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                             \n    readonly beneficiary?: string;\n\n                                                                                                                                                                                                              \n    readonly licenseMetadata?: Array<CfnLicense.MetadataProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                    \n    readonly productSku?: string;\n\n                                                                                                                                                                                                   \n    readonly status?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLicenseProps`\n *\n * @param properties - the TypeScript properties of a `CfnLicenseProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLicensePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('beneficiary', cdk.validateString)(properties.beneficiary));\n    errors.collect(cdk.propertyValidator('consumptionConfiguration', cdk.requiredValidator)(properties.consumptionConfiguration));\n    errors.collect(cdk.propertyValidator('consumptionConfiguration', CfnLicense_ConsumptionConfigurationPropertyValidator)(properties.consumptionConfiguration));\n    errors.collect(cdk.propertyValidator('entitlements', cdk.requiredValidator)(properties.entitlements));\n    errors.collect(cdk.propertyValidator('entitlements', cdk.listValidator(CfnLicense_EntitlementPropertyValidator))(properties.entitlements));\n    errors.collect(cdk.propertyValidator('homeRegion', cdk.requiredValidator)(properties.homeRegion));\n    errors.collect(cdk.propertyValidator('homeRegion', cdk.validateString)(properties.homeRegion));\n    errors.collect(cdk.propertyValidator('issuer', cdk.requiredValidator)(properties.issuer));\n    errors.collect(cdk.propertyValidator('issuer', CfnLicense_IssuerDataPropertyValidator)(properties.issuer));\n    errors.collect(cdk.propertyValidator('licenseMetadata', cdk.listValidator(CfnLicense_MetadataPropertyValidator))(properties.licenseMetadata));\n    errors.collect(cdk.propertyValidator('licenseName', cdk.requiredValidator)(properties.licenseName));\n    errors.collect(cdk.propertyValidator('licenseName', cdk.validateString)(properties.licenseName));\n    errors.collect(cdk.propertyValidator('productName', cdk.requiredValidator)(properties.productName));\n    errors.collect(cdk.propertyValidator('productName', cdk.validateString)(properties.productName));\n    errors.collect(cdk.propertyValidator('productSku', cdk.validateString)(properties.productSku));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    errors.collect(cdk.propertyValidator('validity', cdk.requiredValidator)(properties.validity));\n    errors.collect(cdk.propertyValidator('validity', CfnLicense_ValidityDateFormatPropertyValidator)(properties.validity));\n    return errors.wrap('supplied properties not correct for \"CfnLicenseProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LicenseManager::License` resource\n *\n * @param properties - the TypeScript properties of a `CfnLicenseProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LicenseManager::License` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLicensePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLicensePropsValidator(properties).assertSuccess();\n    return {\n        ConsumptionConfiguration: cfnLicenseConsumptionConfigurationPropertyToCloudFormation(properties.consumptionConfiguration),\n        Entitlements: cdk.listMapper(cfnLicenseEntitlementPropertyToCloudFormation)(properties.entitlements),\n        HomeRegion: cdk.stringToCloudFormation(properties.homeRegion),\n        Issuer: cfnLicenseIssuerDataPropertyToCloudFormation(properties.issuer),\n        LicenseName: cdk.stringToCloudFormation(properties.licenseName),\n        ProductName: cdk.stringToCloudFormation(properties.productName),\n        Validity: cfnLicenseValidityDateFormatPropertyToCloudFormation(properties.validity),\n        Beneficiary: cdk.stringToCloudFormation(properties.beneficiary),\n        LicenseMetadata: cdk.listMapper(cfnLicenseMetadataPropertyToCloudFormation)(properties.licenseMetadata),\n        ProductSKU: cdk.stringToCloudFormation(properties.productSku),\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLicensePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLicenseProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLicenseProps>();\n    ret.addPropertyResult('consumptionConfiguration', 'ConsumptionConfiguration', CfnLicenseConsumptionConfigurationPropertyFromCloudFormation(properties.ConsumptionConfiguration));\n    ret.addPropertyResult('entitlements', 'Entitlements', cfn_parse.FromCloudFormation.getArray(CfnLicenseEntitlementPropertyFromCloudFormation)(properties.Entitlements));\n    ret.addPropertyResult('homeRegion', 'HomeRegion', cfn_parse.FromCloudFormation.getString(properties.HomeRegion));\n    ret.addPropertyResult('issuer', 'Issuer', CfnLicenseIssuerDataPropertyFromCloudFormation(properties.Issuer));\n    ret.addPropertyResult('licenseName', 'LicenseName', cfn_parse.FromCloudFormation.getString(properties.LicenseName));\n    ret.addPropertyResult('productName', 'ProductName', cfn_parse.FromCloudFormation.getString(properties.ProductName));\n    ret.addPropertyResult('validity', 'Validity', CfnLicenseValidityDateFormatPropertyFromCloudFormation(properties.Validity));\n    ret.addPropertyResult('beneficiary', 'Beneficiary', properties.Beneficiary != null ? cfn_parse.FromCloudFormation.getString(properties.Beneficiary) : undefined);\n    ret.addPropertyResult('licenseMetadata', 'LicenseMetadata', properties.LicenseMetadata != null ? cfn_parse.FromCloudFormation.getArray(CfnLicenseMetadataPropertyFromCloudFormation)(properties.LicenseMetadata) : undefined);\n    ret.addPropertyResult('productSku', 'ProductSKU', properties.ProductSKU != null ? cfn_parse.FromCloudFormation.getString(properties.ProductSKU) : undefined);\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnLicense extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::LicenseManager::License\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLicense {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLicensePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLicense(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                \n    public readonly attrLicenseArn: string;\n\n                                                                                   \n    public readonly attrVersion: string;\n\n                                                                                                                                                                                                                                                   \n    public consumptionConfiguration: CfnLicense.ConsumptionConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                               \n    public entitlements: Array<CfnLicense.EntitlementProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                   \n    public homeRegion: string;\n\n                                                                                                                                                                                                   \n    public issuer: CfnLicense.IssuerDataProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                      \n    public licenseName: string;\n\n                                                                                                                                                                                                      \n    public productName: string;\n\n                                                                                                                                                                                                                                                                   \n    public validity: CfnLicense.ValidityDateFormatProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                             \n    public beneficiary: string | undefined;\n\n                                                                                                                                                                                                              \n    public licenseMetadata: Array<CfnLicense.MetadataProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                    \n    public productSku: string | undefined;\n\n                                                                                                                                                                                                   \n    public status: string | undefined;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnLicenseProps) {\n        super(scope, id, { type: CfnLicense.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'consumptionConfiguration', this);\n        cdk.requireProperty(props, 'entitlements', this);\n        cdk.requireProperty(props, 'homeRegion', this);\n        cdk.requireProperty(props, 'issuer', this);\n        cdk.requireProperty(props, 'licenseName', this);\n        cdk.requireProperty(props, 'productName', this);\n        cdk.requireProperty(props, 'validity', this);\n        this.attrLicenseArn = cdk.Token.asString(this.getAtt('LicenseArn'));\n        this.attrVersion = cdk.Token.asString(this.getAtt('Version'));\n\n        this.consumptionConfiguration = props.consumptionConfiguration;\n        this.entitlements = props.entitlements;\n        this.homeRegion = props.homeRegion;\n        this.issuer = props.issuer;\n        this.licenseName = props.licenseName;\n        this.productName = props.productName;\n        this.validity = props.validity;\n        this.beneficiary = props.beneficiary;\n        this.licenseMetadata = props.licenseMetadata;\n        this.productSku = props.productSku;\n        this.status = props.status;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLicense.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            consumptionConfiguration: this.consumptionConfiguration,\n            entitlements: this.entitlements,\n            homeRegion: this.homeRegion,\n            issuer: this.issuer,\n            licenseName: this.licenseName,\n            productName: this.productName,\n            validity: this.validity,\n            beneficiary: this.beneficiary,\n            licenseMetadata: this.licenseMetadata,\n            productSku: this.productSku,\n            status: this.status,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLicensePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnLicense {\n                                                                                                                                                                                                                                                              \n    export interface BorrowConfigurationProperty {\n                                                                                                                                                                                                                                                                                                           \n        readonly allowEarlyCheckIn: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                        \n        readonly maxTimeToLiveInMinutes: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BorrowConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `BorrowConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLicense_BorrowConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowEarlyCheckIn', cdk.requiredValidator)(properties.allowEarlyCheckIn));\n    errors.collect(cdk.propertyValidator('allowEarlyCheckIn', cdk.validateBoolean)(properties.allowEarlyCheckIn));\n    errors.collect(cdk.propertyValidator('maxTimeToLiveInMinutes', cdk.requiredValidator)(properties.maxTimeToLiveInMinutes));\n    errors.collect(cdk.propertyValidator('maxTimeToLiveInMinutes', cdk.validateNumber)(properties.maxTimeToLiveInMinutes));\n    return errors.wrap('supplied properties not correct for \"BorrowConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LicenseManager::License.BorrowConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `BorrowConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LicenseManager::License.BorrowConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLicenseBorrowConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLicense_BorrowConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AllowEarlyCheckIn: cdk.booleanToCloudFormation(properties.allowEarlyCheckIn),\n        MaxTimeToLiveInMinutes: cdk.numberToCloudFormation(properties.maxTimeToLiveInMinutes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLicenseBorrowConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLicense.BorrowConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLicense.BorrowConfigurationProperty>();\n    ret.addPropertyResult('allowEarlyCheckIn', 'AllowEarlyCheckIn', cfn_parse.FromCloudFormation.getBoolean(properties.AllowEarlyCheckIn));\n    ret.addPropertyResult('maxTimeToLiveInMinutes', 'MaxTimeToLiveInMinutes', cfn_parse.FromCloudFormation.getNumber(properties.MaxTimeToLiveInMinutes));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLicense {\n                                                                                                                                                                                                                                                                        \n    export interface ConsumptionConfigurationProperty {\n                                                                                                                                                                                                                                                                                                              \n        readonly borrowConfiguration?: CfnLicense.BorrowConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                        \n        readonly provisionalConfiguration?: CfnLicense.ProvisionalConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                 \n        readonly renewType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConsumptionConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ConsumptionConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLicense_ConsumptionConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('borrowConfiguration', CfnLicense_BorrowConfigurationPropertyValidator)(properties.borrowConfiguration));\n    errors.collect(cdk.propertyValidator('provisionalConfiguration', CfnLicense_ProvisionalConfigurationPropertyValidator)(properties.provisionalConfiguration));\n    errors.collect(cdk.propertyValidator('renewType', cdk.validateString)(properties.renewType));\n    return errors.wrap('supplied properties not correct for \"ConsumptionConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LicenseManager::License.ConsumptionConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ConsumptionConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LicenseManager::License.ConsumptionConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLicenseConsumptionConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLicense_ConsumptionConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        BorrowConfiguration: cfnLicenseBorrowConfigurationPropertyToCloudFormation(properties.borrowConfiguration),\n        ProvisionalConfiguration: cfnLicenseProvisionalConfigurationPropertyToCloudFormation(properties.provisionalConfiguration),\n        RenewType: cdk.stringToCloudFormation(properties.renewType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLicenseConsumptionConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLicense.ConsumptionConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLicense.ConsumptionConfigurationProperty>();\n    ret.addPropertyResult('borrowConfiguration', 'BorrowConfiguration', properties.BorrowConfiguration != null ? CfnLicenseBorrowConfigurationPropertyFromCloudFormation(properties.BorrowConfiguration) : undefined);\n    ret.addPropertyResult('provisionalConfiguration', 'ProvisionalConfiguration', properties.ProvisionalConfiguration != null ? CfnLicenseProvisionalConfigurationPropertyFromCloudFormation(properties.ProvisionalConfiguration) : undefined);\n    ret.addPropertyResult('renewType', 'RenewType', properties.RenewType != null ? cfn_parse.FromCloudFormation.getString(properties.RenewType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLicense {\n                                                                                                                                                                                                                                                                      \n    export interface EntitlementProperty {\n                                                                                                                                                                                                                                                                                \n        readonly allowCheckIn?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                           \n        readonly maxCount?: number;\n                                                                                                                                                                                                                                                 \n        readonly name: string;\n                                                                                                                                                                                                                                                                          \n        readonly overage?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                 \n        readonly unit: string;\n                                                                                                                                                                                                                                                                                    \n        readonly value?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EntitlementProperty`\n *\n * @param properties - the TypeScript properties of a `EntitlementProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLicense_EntitlementPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowCheckIn', cdk.validateBoolean)(properties.allowCheckIn));\n    errors.collect(cdk.propertyValidator('maxCount', cdk.validateNumber)(properties.maxCount));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('overage', cdk.validateBoolean)(properties.overage));\n    errors.collect(cdk.propertyValidator('unit', cdk.requiredValidator)(properties.unit));\n    errors.collect(cdk.propertyValidator('unit', cdk.validateString)(properties.unit));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"EntitlementProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LicenseManager::License.Entitlement` resource\n *\n * @param properties - the TypeScript properties of a `EntitlementProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LicenseManager::License.Entitlement` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLicenseEntitlementPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLicense_EntitlementPropertyValidator(properties).assertSuccess();\n    return {\n        AllowCheckIn: cdk.booleanToCloudFormation(properties.allowCheckIn),\n        MaxCount: cdk.numberToCloudFormation(properties.maxCount),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Overage: cdk.booleanToCloudFormation(properties.overage),\n        Unit: cdk.stringToCloudFormation(properties.unit),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLicenseEntitlementPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLicense.EntitlementProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLicense.EntitlementProperty>();\n    ret.addPropertyResult('allowCheckIn', 'AllowCheckIn', properties.AllowCheckIn != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowCheckIn) : undefined);\n    ret.addPropertyResult('maxCount', 'MaxCount', properties.MaxCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxCount) : undefined);\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('overage', 'Overage', properties.Overage != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Overage) : undefined);\n    ret.addPropertyResult('unit', 'Unit', cfn_parse.FromCloudFormation.getString(properties.Unit));\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLicense {\n                                                                                                                                                                                                                                                                \n    export interface IssuerDataProperty {\n                                                                                                                                                                                                                                          \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly signKey?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IssuerDataProperty`\n *\n * @param properties - the TypeScript properties of a `IssuerDataProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLicense_IssuerDataPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('signKey', cdk.validateString)(properties.signKey));\n    return errors.wrap('supplied properties not correct for \"IssuerDataProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LicenseManager::License.IssuerData` resource\n *\n * @param properties - the TypeScript properties of a `IssuerDataProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LicenseManager::License.IssuerData` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLicenseIssuerDataPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLicense_IssuerDataPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        SignKey: cdk.stringToCloudFormation(properties.signKey),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLicenseIssuerDataPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLicense.IssuerDataProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLicense.IssuerDataProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('signKey', 'SignKey', properties.SignKey != null ? cfn_parse.FromCloudFormation.getString(properties.SignKey) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLicense {\n                                                                                                                                                                                                                                        \n    export interface MetadataProperty {\n                                                                                                                                                                                                                                       \n        readonly name: string;\n                                                                                                                                                                                                                                     \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MetadataProperty`\n *\n * @param properties - the TypeScript properties of a `MetadataProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLicense_MetadataPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"MetadataProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LicenseManager::License.Metadata` resource\n *\n * @param properties - the TypeScript properties of a `MetadataProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LicenseManager::License.Metadata` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLicenseMetadataPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLicense_MetadataPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLicenseMetadataPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLicense.MetadataProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLicense.MetadataProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLicense {\n                                                                                                                                                                                                                                                                        \n    export interface ProvisionalConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                       \n        readonly maxTimeToLiveInMinutes: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ProvisionalConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ProvisionalConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLicense_ProvisionalConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxTimeToLiveInMinutes', cdk.requiredValidator)(properties.maxTimeToLiveInMinutes));\n    errors.collect(cdk.propertyValidator('maxTimeToLiveInMinutes', cdk.validateNumber)(properties.maxTimeToLiveInMinutes));\n    return errors.wrap('supplied properties not correct for \"ProvisionalConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LicenseManager::License.ProvisionalConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ProvisionalConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LicenseManager::License.ProvisionalConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLicenseProvisionalConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLicense_ProvisionalConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        MaxTimeToLiveInMinutes: cdk.numberToCloudFormation(properties.maxTimeToLiveInMinutes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLicenseProvisionalConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLicense.ProvisionalConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLicense.ProvisionalConfigurationProperty>();\n    ret.addPropertyResult('maxTimeToLiveInMinutes', 'MaxTimeToLiveInMinutes', cfn_parse.FromCloudFormation.getNumber(properties.MaxTimeToLiveInMinutes));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnLicense {\n                                                                                                                                                                                                                                                                                                     \n    export interface ValidityDateFormatProperty {\n                                                                                                                                                                                                                                                                       \n        readonly begin: string;\n                                                                                                                                                                                                                                                                   \n        readonly end: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ValidityDateFormatProperty`\n *\n * @param properties - the TypeScript properties of a `ValidityDateFormatProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLicense_ValidityDateFormatPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('begin', cdk.requiredValidator)(properties.begin));\n    errors.collect(cdk.propertyValidator('begin', cdk.validateString)(properties.begin));\n    errors.collect(cdk.propertyValidator('end', cdk.requiredValidator)(properties.end));\n    errors.collect(cdk.propertyValidator('end', cdk.validateString)(properties.end));\n    return errors.wrap('supplied properties not correct for \"ValidityDateFormatProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::LicenseManager::License.ValidityDateFormat` resource\n *\n * @param properties - the TypeScript properties of a `ValidityDateFormatProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::LicenseManager::License.ValidityDateFormat` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLicenseValidityDateFormatPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLicense_ValidityDateFormatPropertyValidator(properties).assertSuccess();\n    return {\n        Begin: cdk.stringToCloudFormation(properties.begin),\n        End: cdk.stringToCloudFormation(properties.end),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLicenseValidityDateFormatPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLicense.ValidityDateFormatProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLicense.ValidityDateFormatProperty>();\n    ret.addPropertyResult('begin', 'Begin', cfn_parse.FromCloudFormation.getString(properties.Begin));\n    ret.addPropertyResult('end', 'End', cfn_parse.FromCloudFormation.getString(properties.End));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
