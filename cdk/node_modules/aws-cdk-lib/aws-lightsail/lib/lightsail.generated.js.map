{
  "version": 3,
  "sources": ["lightsail.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:32.266Z\",\"fingerprint\":\"/5nkuQbTck62V4Yd/VYQQUJn30gfBhzgPdO2aKOdsvY=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                \nexport interface CfnAlarmProps {\n\n                                                                                                                                                                                               \n    readonly alarmName: string;\n\n                                                                                                                                                                                                                                                                       \n    readonly comparisonOperator: string;\n\n                                                                                                                                                                                                                                                              \n    readonly evaluationPeriods: number;\n\n                                                                                                                                                                                                                           \n    readonly metricName: string;\n\n                                                                                                                                                                                                                                                \n    readonly monitoredResourceName: string;\n\n                                                                                                                                                                                                                                     \n    readonly threshold: number;\n\n                                                                                                                                                                                                                                                                                                                        \n    readonly contactProtocols?: string[];\n\n                                                                                                                                                                                                                                                                                                              \n    readonly datapointsToAlarm?: number;\n\n                                                                                                                                                                                                                                           \n    readonly notificationEnabled?: boolean | cdk.IResolvable;\n\nn    readonly notificationTriggers?: string[];\n\nn    readonly treatMissingData?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAlarmProps`\n *\n * @param properties - the TypeScript properties of a `CfnAlarmProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAlarmPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alarmName', cdk.requiredValidator)(properties.alarmName));\n    errors.collect(cdk.propertyValidator('alarmName', cdk.validateString)(properties.alarmName));\n    errors.collect(cdk.propertyValidator('comparisonOperator', cdk.requiredValidator)(properties.comparisonOperator));\n    errors.collect(cdk.propertyValidator('comparisonOperator', cdk.validateString)(properties.comparisonOperator));\n    errors.collect(cdk.propertyValidator('contactProtocols', cdk.listValidator(cdk.validateString))(properties.contactProtocols));\n    errors.collect(cdk.propertyValidator('datapointsToAlarm', cdk.validateNumber)(properties.datapointsToAlarm));\n    errors.collect(cdk.propertyValidator('evaluationPeriods', cdk.requiredValidator)(properties.evaluationPeriods));\n    errors.collect(cdk.propertyValidator('evaluationPeriods', cdk.validateNumber)(properties.evaluationPeriods));\n    errors.collect(cdk.propertyValidator('metricName', cdk.requiredValidator)(properties.metricName));\n    errors.collect(cdk.propertyValidator('metricName', cdk.validateString)(properties.metricName));\n    errors.collect(cdk.propertyValidator('monitoredResourceName', cdk.requiredValidator)(properties.monitoredResourceName));\n    errors.collect(cdk.propertyValidator('monitoredResourceName', cdk.validateString)(properties.monitoredResourceName));\n    errors.collect(cdk.propertyValidator('notificationEnabled', cdk.validateBoolean)(properties.notificationEnabled));\n    errors.collect(cdk.propertyValidator('notificationTriggers', cdk.listValidator(cdk.validateString))(properties.notificationTriggers));\n    errors.collect(cdk.propertyValidator('threshold', cdk.requiredValidator)(properties.threshold));\n    errors.collect(cdk.propertyValidator('threshold', cdk.validateNumber)(properties.threshold));\n    errors.collect(cdk.propertyValidator('treatMissingData', cdk.validateString)(properties.treatMissingData));\n    return errors.wrap('supplied properties not correct for \"CfnAlarmProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Alarm` resource\n *\n * @param properties - the TypeScript properties of a `CfnAlarmProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Alarm` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAlarmPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAlarmPropsValidator(properties).assertSuccess();\n    return {\n        AlarmName: cdk.stringToCloudFormation(properties.alarmName),\n        ComparisonOperator: cdk.stringToCloudFormation(properties.comparisonOperator),\n        EvaluationPeriods: cdk.numberToCloudFormation(properties.evaluationPeriods),\n        MetricName: cdk.stringToCloudFormation(properties.metricName),\n        MonitoredResourceName: cdk.stringToCloudFormation(properties.monitoredResourceName),\n        Threshold: cdk.numberToCloudFormation(properties.threshold),\n        ContactProtocols: cdk.listMapper(cdk.stringToCloudFormation)(properties.contactProtocols),\n        DatapointsToAlarm: cdk.numberToCloudFormation(properties.datapointsToAlarm),\n        NotificationEnabled: cdk.booleanToCloudFormation(properties.notificationEnabled),\n        NotificationTriggers: cdk.listMapper(cdk.stringToCloudFormation)(properties.notificationTriggers),\n        TreatMissingData: cdk.stringToCloudFormation(properties.treatMissingData),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAlarmPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAlarmProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAlarmProps>();\n    ret.addPropertyResult('alarmName', 'AlarmName', cfn_parse.FromCloudFormation.getString(properties.AlarmName));\n    ret.addPropertyResult('comparisonOperator', 'ComparisonOperator', cfn_parse.FromCloudFormation.getString(properties.ComparisonOperator));\n    ret.addPropertyResult('evaluationPeriods', 'EvaluationPeriods', cfn_parse.FromCloudFormation.getNumber(properties.EvaluationPeriods));\n    ret.addPropertyResult('metricName', 'MetricName', cfn_parse.FromCloudFormation.getString(properties.MetricName));\n    ret.addPropertyResult('monitoredResourceName', 'MonitoredResourceName', cfn_parse.FromCloudFormation.getString(properties.MonitoredResourceName));\n    ret.addPropertyResult('threshold', 'Threshold', cfn_parse.FromCloudFormation.getNumber(properties.Threshold));\n    ret.addPropertyResult('contactProtocols', 'ContactProtocols', properties.ContactProtocols != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ContactProtocols) : undefined);\n    ret.addPropertyResult('datapointsToAlarm', 'DatapointsToAlarm', properties.DatapointsToAlarm != null ? cfn_parse.FromCloudFormation.getNumber(properties.DatapointsToAlarm) : undefined);\n    ret.addPropertyResult('notificationEnabled', 'NotificationEnabled', properties.NotificationEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.NotificationEnabled) : undefined);\n    ret.addPropertyResult('notificationTriggers', 'NotificationTriggers', properties.NotificationTriggers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NotificationTriggers) : undefined);\n    ret.addPropertyResult('treatMissingData', 'TreatMissingData', properties.TreatMissingData != null ? cfn_parse.FromCloudFormation.getString(properties.TreatMissingData) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                         \nexport class CfnAlarm extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::Alarm\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAlarm {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAlarmPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAlarm(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                            \n    public readonly attrAlarmArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public readonly attrState: string;\n\n                                                                                                                                                                                               \n    public alarmName: string;\n\n                                                                                                                                                                                                                                                                       \n    public comparisonOperator: string;\n\n                                                                                                                                                                                                                                                              \n    public evaluationPeriods: number;\n\n                                                                                                                                                                                                                           \n    public metricName: string;\n\n                                                                                                                                                                                                                                                \n    public monitoredResourceName: string;\n\n                                                                                                                                                                                                                                     \n    public threshold: number;\n\n                                                                                                                                                                                                                                                                                                                        \n    public contactProtocols: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                              \n    public datapointsToAlarm: number | undefined;\n\n                                                                                                                                                                                                                                           \n    public notificationEnabled: boolean | cdk.IResolvable | undefined;\n\nn    public notificationTriggers: string[] | undefined;\n\nn    public treatMissingData: string | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnAlarmProps) {\n        super(scope, id, { type: CfnAlarm.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'alarmName', this);\n        cdk.requireProperty(props, 'comparisonOperator', this);\n        cdk.requireProperty(props, 'evaluationPeriods', this);\n        cdk.requireProperty(props, 'metricName', this);\n        cdk.requireProperty(props, 'monitoredResourceName', this);\n        cdk.requireProperty(props, 'threshold', this);\n        this.attrAlarmArn = cdk.Token.asString(this.getAtt('AlarmArn'));\n        this.attrState = cdk.Token.asString(this.getAtt('State'));\n\n        this.alarmName = props.alarmName;\n        this.comparisonOperator = props.comparisonOperator;\n        this.evaluationPeriods = props.evaluationPeriods;\n        this.metricName = props.metricName;\n        this.monitoredResourceName = props.monitoredResourceName;\n        this.threshold = props.threshold;\n        this.contactProtocols = props.contactProtocols;\n        this.datapointsToAlarm = props.datapointsToAlarm;\n        this.notificationEnabled = props.notificationEnabled;\n        this.notificationTriggers = props.notificationTriggers;\n        this.treatMissingData = props.treatMissingData;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAlarm.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            alarmName: this.alarmName,\n            comparisonOperator: this.comparisonOperator,\n            evaluationPeriods: this.evaluationPeriods,\n            metricName: this.metricName,\n            monitoredResourceName: this.monitoredResourceName,\n            threshold: this.threshold,\n            contactProtocols: this.contactProtocols,\n            datapointsToAlarm: this.datapointsToAlarm,\n            notificationEnabled: this.notificationEnabled,\n            notificationTriggers: this.notificationTriggers,\n            treatMissingData: this.treatMissingData,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAlarmPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                  \nexport interface CfnBucketProps {\n\n                                                                                                                                                                                                   \n    readonly bucketName: string;\n\n                                                                                                                                                                                                                                                                                                                                                  \n    readonly bundleId: string;\n\n                                                                                                                                                                                                                                      \n    readonly accessRules?: CfnBucket.AccessRulesProperty | cdk.IResolvable;\n\nn    readonly objectVersioning?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                             \n    readonly readOnlyAccessAccounts?: string[];\n\n                                                                                                                                                                                                                                                         \n    readonly resourcesReceivingAccess?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnBucketProps`\n *\n * @param properties - the TypeScript properties of a `CfnBucketProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucketPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessRules', CfnBucket_AccessRulesPropertyValidator)(properties.accessRules));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.requiredValidator)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bundleId', cdk.requiredValidator)(properties.bundleId));\n    errors.collect(cdk.propertyValidator('bundleId', cdk.validateString)(properties.bundleId));\n    errors.collect(cdk.propertyValidator('objectVersioning', cdk.validateBoolean)(properties.objectVersioning));\n    errors.collect(cdk.propertyValidator('readOnlyAccessAccounts', cdk.listValidator(cdk.validateString))(properties.readOnlyAccessAccounts));\n    errors.collect(cdk.propertyValidator('resourcesReceivingAccess', cdk.listValidator(cdk.validateString))(properties.resourcesReceivingAccess));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnBucketProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Bucket` resource\n *\n * @param properties - the TypeScript properties of a `CfnBucketProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Bucket` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucketPropsValidator(properties).assertSuccess();\n    return {\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        BundleId: cdk.stringToCloudFormation(properties.bundleId),\n        AccessRules: cfnBucketAccessRulesPropertyToCloudFormation(properties.accessRules),\n        ObjectVersioning: cdk.booleanToCloudFormation(properties.objectVersioning),\n        ReadOnlyAccessAccounts: cdk.listMapper(cdk.stringToCloudFormation)(properties.readOnlyAccessAccounts),\n        ResourcesReceivingAccess: cdk.listMapper(cdk.stringToCloudFormation)(properties.resourcesReceivingAccess),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucketProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucketProps>();\n    ret.addPropertyResult('bucketName', 'BucketName', cfn_parse.FromCloudFormation.getString(properties.BucketName));\n    ret.addPropertyResult('bundleId', 'BundleId', cfn_parse.FromCloudFormation.getString(properties.BundleId));\n    ret.addPropertyResult('accessRules', 'AccessRules', properties.AccessRules != null ? CfnBucketAccessRulesPropertyFromCloudFormation(properties.AccessRules) : undefined);\n    ret.addPropertyResult('objectVersioning', 'ObjectVersioning', properties.ObjectVersioning != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ObjectVersioning) : undefined);\n    ret.addPropertyResult('readOnlyAccessAccounts', 'ReadOnlyAccessAccounts', properties.ReadOnlyAccessAccounts != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ReadOnlyAccessAccounts) : undefined);\n    ret.addPropertyResult('resourcesReceivingAccess', 'ResourcesReceivingAccess', properties.ResourcesReceivingAccess != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ResourcesReceivingAccess) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                             \nexport class CfnBucket extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::Bucket\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnBucket {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnBucketPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnBucket(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                        \n    public readonly attrAbleToUpdateBundle: cdk.IResolvable;\n\n                                                                                                              \n    public readonly attrBucketArn: string;\n\n                                                                                 \n    public readonly attrUrl: string;\n\n                                                                                                                                                                                                   \n    public bucketName: string;\n\n                                                                                                                                                                                                                                                                                                                                                  \n    public bundleId: string;\n\n                                                                                                                                                                                                                                      \n    public accessRules: CfnBucket.AccessRulesProperty | cdk.IResolvable | undefined;\n\nn    public objectVersioning: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                             \n    public readOnlyAccessAccounts: string[] | undefined;\n\n                                                                                                                                                                                                                                                         \n    public resourcesReceivingAccess: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnBucketProps) {\n        super(scope, id, { type: CfnBucket.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'bucketName', this);\n        cdk.requireProperty(props, 'bundleId', this);\n        this.attrAbleToUpdateBundle = this.getAtt('AbleToUpdateBundle');\n        this.attrBucketArn = cdk.Token.asString(this.getAtt('BucketArn'));\n        this.attrUrl = cdk.Token.asString(this.getAtt('Url'));\n\n        this.bucketName = props.bucketName;\n        this.bundleId = props.bundleId;\n        this.accessRules = props.accessRules;\n        this.objectVersioning = props.objectVersioning;\n        this.readOnlyAccessAccounts = props.readOnlyAccessAccounts;\n        this.resourcesReceivingAccess = props.resourcesReceivingAccess;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Lightsail::Bucket\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnBucket.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            bucketName: this.bucketName,\n            bundleId: this.bundleId,\n            accessRules: this.accessRules,\n            objectVersioning: this.objectVersioning,\n            readOnlyAccessAccounts: this.readOnlyAccessAccounts,\n            resourcesReceivingAccess: this.resourcesReceivingAccess,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnBucketPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface AccessRulesProperty {\nn        readonly allowPublicOverrides?: boolean | cdk.IResolvable;\nn        readonly objectAccess?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessRulesProperty`\n *\n * @param properties - the TypeScript properties of a `AccessRulesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_AccessRulesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowPublicOverrides', cdk.validateBoolean)(properties.allowPublicOverrides));\n    errors.collect(cdk.propertyValidator('objectAccess', cdk.validateString)(properties.objectAccess));\n    return errors.wrap('supplied properties not correct for \"AccessRulesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Bucket.AccessRules` resource\n *\n * @param properties - the TypeScript properties of a `AccessRulesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Bucket.AccessRules` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketAccessRulesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_AccessRulesPropertyValidator(properties).assertSuccess();\n    return {\n        AllowPublicOverrides: cdk.booleanToCloudFormation(properties.allowPublicOverrides),\n        GetObject: cdk.stringToCloudFormation(properties.objectAccess),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketAccessRulesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.AccessRulesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.AccessRulesProperty>();\n    ret.addPropertyResult('allowPublicOverrides', 'AllowPublicOverrides', properties.AllowPublicOverrides != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowPublicOverrides) : undefined);\n    ret.addPropertyResult('objectAccess', 'GetObject', properties.GetObject != null ? cfn_parse.FromCloudFormation.getString(properties.GetObject) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnCertificateProps {\n\n                                                                                                                                                                                                                       \n    readonly certificateName: string;\n\n                                                                                                                                                                                                                         \n    readonly domainName: string;\n\n                                                                                                                                                                                                                                                                                                                                                   \n    readonly subjectAlternativeNames?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCertificateProps`\n *\n * @param properties - the TypeScript properties of a `CfnCertificateProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCertificatePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificateName', cdk.requiredValidator)(properties.certificateName));\n    errors.collect(cdk.propertyValidator('certificateName', cdk.validateString)(properties.certificateName));\n    errors.collect(cdk.propertyValidator('domainName', cdk.requiredValidator)(properties.domainName));\n    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));\n    errors.collect(cdk.propertyValidator('subjectAlternativeNames', cdk.listValidator(cdk.validateString))(properties.subjectAlternativeNames));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnCertificateProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Certificate` resource\n *\n * @param properties - the TypeScript properties of a `CfnCertificateProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Certificate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCertificatePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCertificatePropsValidator(properties).assertSuccess();\n    return {\n        CertificateName: cdk.stringToCloudFormation(properties.certificateName),\n        DomainName: cdk.stringToCloudFormation(properties.domainName),\n        SubjectAlternativeNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.subjectAlternativeNames),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCertificatePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCertificateProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCertificateProps>();\n    ret.addPropertyResult('certificateName', 'CertificateName', cfn_parse.FromCloudFormation.getString(properties.CertificateName));\n    ret.addPropertyResult('domainName', 'DomainName', cfn_parse.FromCloudFormation.getString(properties.DomainName));\n    ret.addPropertyResult('subjectAlternativeNames', 'SubjectAlternativeNames', properties.SubjectAlternativeNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubjectAlternativeNames) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCertificate extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::Certificate\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCertificate {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCertificatePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCertificate(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                        \n    public readonly attrCertificateArn: string;\n\n                                                                                                       \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                       \n    public certificateName: string;\n\n                                                                                                                                                                                                                         \n    public domainName: string;\n\n                                                                                                                                                                                                                                                                                                                                                   \n    public subjectAlternativeNames: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnCertificateProps) {\n        super(scope, id, { type: CfnCertificate.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'certificateName', this);\n        cdk.requireProperty(props, 'domainName', this);\n        this.attrCertificateArn = cdk.Token.asString(this.getAtt('CertificateArn'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.certificateName = props.certificateName;\n        this.domainName = props.domainName;\n        this.subjectAlternativeNames = props.subjectAlternativeNames;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Lightsail::Certificate\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCertificate.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            certificateName: this.certificateName,\n            domainName: this.domainName,\n            subjectAlternativeNames: this.subjectAlternativeNames,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCertificatePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                        \nexport interface CfnContainerProps {\n\n                                                                                                                                                                                                                                                                                                                                                     \n    readonly power: string;\n\n                                                                                                                                                                                                                                                                                                                      \n    readonly scale: number;\n\n                                                                                                                                                                                                                     \n    readonly serviceName: string;\n\n                                                                                                                                                                                                                                                                                     \n    readonly containerServiceDeployment?: CfnContainer.ContainerServiceDeploymentProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                       \n    readonly isDisabled?: boolean | cdk.IResolvable;\n\nn    readonly publicDomainNames?: Array<CfnContainer.PublicDomainNameProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnContainerProps`\n *\n * @param properties - the TypeScript properties of a `CfnContainerProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainerPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerServiceDeployment', CfnContainer_ContainerServiceDeploymentPropertyValidator)(properties.containerServiceDeployment));\n    errors.collect(cdk.propertyValidator('isDisabled', cdk.validateBoolean)(properties.isDisabled));\n    errors.collect(cdk.propertyValidator('power', cdk.requiredValidator)(properties.power));\n    errors.collect(cdk.propertyValidator('power', cdk.validateString)(properties.power));\n    errors.collect(cdk.propertyValidator('publicDomainNames', cdk.listValidator(CfnContainer_PublicDomainNamePropertyValidator))(properties.publicDomainNames));\n    errors.collect(cdk.propertyValidator('scale', cdk.requiredValidator)(properties.scale));\n    errors.collect(cdk.propertyValidator('scale', cdk.validateNumber)(properties.scale));\n    errors.collect(cdk.propertyValidator('serviceName', cdk.requiredValidator)(properties.serviceName));\n    errors.collect(cdk.propertyValidator('serviceName', cdk.validateString)(properties.serviceName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnContainerProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Container` resource\n *\n * @param properties - the TypeScript properties of a `CfnContainerProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Container` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainerPropsValidator(properties).assertSuccess();\n    return {\n        Power: cdk.stringToCloudFormation(properties.power),\n        Scale: cdk.numberToCloudFormation(properties.scale),\n        ServiceName: cdk.stringToCloudFormation(properties.serviceName),\n        ContainerServiceDeployment: cfnContainerContainerServiceDeploymentPropertyToCloudFormation(properties.containerServiceDeployment),\n        IsDisabled: cdk.booleanToCloudFormation(properties.isDisabled),\n        PublicDomainNames: cdk.listMapper(cfnContainerPublicDomainNamePropertyToCloudFormation)(properties.publicDomainNames),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainerProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainerProps>();\n    ret.addPropertyResult('power', 'Power', cfn_parse.FromCloudFormation.getString(properties.Power));\n    ret.addPropertyResult('scale', 'Scale', cfn_parse.FromCloudFormation.getNumber(properties.Scale));\n    ret.addPropertyResult('serviceName', 'ServiceName', cfn_parse.FromCloudFormation.getString(properties.ServiceName));\n    ret.addPropertyResult('containerServiceDeployment', 'ContainerServiceDeployment', properties.ContainerServiceDeployment != null ? CfnContainerContainerServiceDeploymentPropertyFromCloudFormation(properties.ContainerServiceDeployment) : undefined);\n    ret.addPropertyResult('isDisabled', 'IsDisabled', properties.IsDisabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsDisabled) : undefined);\n    ret.addPropertyResult('publicDomainNames', 'PublicDomainNames', properties.PublicDomainNames != null ? cfn_parse.FromCloudFormation.getArray(CfnContainerPublicDomainNamePropertyFromCloudFormation)(properties.PublicDomainNames) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \nexport class CfnContainer extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::Container\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnContainer {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnContainerPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnContainer(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                    \n    public readonly attrContainerArn: string;\n\n                                                                                                                                                                                                                             \n    public readonly attrUrl: string;\n\n                                                                                                                                                                                                                                                                                                                                                     \n    public power: string;\n\n                                                                                                                                                                                                                                                                                                                      \n    public scale: number;\n\n                                                                                                                                                                                                                     \n    public serviceName: string;\n\n                                                                                                                                                                                                                                                                                     \n    public containerServiceDeployment: CfnContainer.ContainerServiceDeploymentProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                       \n    public isDisabled: boolean | cdk.IResolvable | undefined;\n\nn    public publicDomainNames: Array<CfnContainer.PublicDomainNameProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnContainerProps) {\n        super(scope, id, { type: CfnContainer.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'power', this);\n        cdk.requireProperty(props, 'scale', this);\n        cdk.requireProperty(props, 'serviceName', this);\n        this.attrContainerArn = cdk.Token.asString(this.getAtt('ContainerArn'));\n        this.attrUrl = cdk.Token.asString(this.getAtt('Url'));\n\n        this.power = props.power;\n        this.scale = props.scale;\n        this.serviceName = props.serviceName;\n        this.containerServiceDeployment = props.containerServiceDeployment;\n        this.isDisabled = props.isDisabled;\n        this.publicDomainNames = props.publicDomainNames;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Lightsail::Container\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnContainer.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            power: this.power,\n            scale: this.scale,\n            serviceName: this.serviceName,\n            containerServiceDeployment: this.containerServiceDeployment,\n            isDisabled: this.isDisabled,\n            publicDomainNames: this.publicDomainNames,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnContainerPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnContainer {\nn    export interface ContainerProperty {\n                                                                                                                                                                                                                                                              \n        readonly command?: string[];\n                                                                                                                                                                                                                                                         \n        readonly containerName?: string;\n                                                                                                                                                                                                                                                                        \n        readonly environment?: Array<CfnContainer.EnvironmentVariableProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly image?: string;\n                                                                                                                                                                                                                                                                                                       \n        readonly ports?: Array<CfnContainer.PortInfoProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ContainerProperty`\n *\n * @param properties - the TypeScript properties of a `ContainerProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainer_ContainerPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('command', cdk.listValidator(cdk.validateString))(properties.command));\n    errors.collect(cdk.propertyValidator('containerName', cdk.validateString)(properties.containerName));\n    errors.collect(cdk.propertyValidator('environment', cdk.listValidator(CfnContainer_EnvironmentVariablePropertyValidator))(properties.environment));\n    errors.collect(cdk.propertyValidator('image', cdk.validateString)(properties.image));\n    errors.collect(cdk.propertyValidator('ports', cdk.listValidator(CfnContainer_PortInfoPropertyValidator))(properties.ports));\n    return errors.wrap('supplied properties not correct for \"ContainerProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Container.Container` resource\n *\n * @param properties - the TypeScript properties of a `ContainerProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Container.Container` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerContainerPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainer_ContainerPropertyValidator(properties).assertSuccess();\n    return {\n        Command: cdk.listMapper(cdk.stringToCloudFormation)(properties.command),\n        ContainerName: cdk.stringToCloudFormation(properties.containerName),\n        Environment: cdk.listMapper(cfnContainerEnvironmentVariablePropertyToCloudFormation)(properties.environment),\n        Image: cdk.stringToCloudFormation(properties.image),\n        Ports: cdk.listMapper(cfnContainerPortInfoPropertyToCloudFormation)(properties.ports),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerContainerPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainer.ContainerProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainer.ContainerProperty>();\n    ret.addPropertyResult('command', 'Command', properties.Command != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Command) : undefined);\n    ret.addPropertyResult('containerName', 'ContainerName', properties.ContainerName != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerName) : undefined);\n    ret.addPropertyResult('environment', 'Environment', properties.Environment != null ? cfn_parse.FromCloudFormation.getArray(CfnContainerEnvironmentVariablePropertyFromCloudFormation)(properties.Environment) : undefined);\n    ret.addPropertyResult('image', 'Image', properties.Image != null ? cfn_parse.FromCloudFormation.getString(properties.Image) : undefined);\n    ret.addPropertyResult('ports', 'Ports', properties.Ports != null ? cfn_parse.FromCloudFormation.getArray(CfnContainerPortInfoPropertyFromCloudFormation)(properties.Ports) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnContainer {\nn    export interface ContainerServiceDeploymentProperty {\n                                                                                                                                                                                                                                                                                                                                              \n        readonly containers?: Array<CfnContainer.ContainerProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                          \n        readonly publicEndpoint?: CfnContainer.PublicEndpointProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ContainerServiceDeploymentProperty`\n *\n * @param properties - the TypeScript properties of a `ContainerServiceDeploymentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainer_ContainerServiceDeploymentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containers', cdk.listValidator(CfnContainer_ContainerPropertyValidator))(properties.containers));\n    errors.collect(cdk.propertyValidator('publicEndpoint', CfnContainer_PublicEndpointPropertyValidator)(properties.publicEndpoint));\n    return errors.wrap('supplied properties not correct for \"ContainerServiceDeploymentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Container.ContainerServiceDeployment` resource\n *\n * @param properties - the TypeScript properties of a `ContainerServiceDeploymentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Container.ContainerServiceDeployment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerContainerServiceDeploymentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainer_ContainerServiceDeploymentPropertyValidator(properties).assertSuccess();\n    return {\n        Containers: cdk.listMapper(cfnContainerContainerPropertyToCloudFormation)(properties.containers),\n        PublicEndpoint: cfnContainerPublicEndpointPropertyToCloudFormation(properties.publicEndpoint),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerContainerServiceDeploymentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainer.ContainerServiceDeploymentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainer.ContainerServiceDeploymentProperty>();\n    ret.addPropertyResult('containers', 'Containers', properties.Containers != null ? cfn_parse.FromCloudFormation.getArray(CfnContainerContainerPropertyFromCloudFormation)(properties.Containers) : undefined);\n    ret.addPropertyResult('publicEndpoint', 'PublicEndpoint', properties.PublicEndpoint != null ? CfnContainerPublicEndpointPropertyFromCloudFormation(properties.PublicEndpoint) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnContainer {\nn    export interface EnvironmentVariableProperty {\n                                                                                                                                                                                                                                                                          \n        readonly value?: string;\n                                                                                                                                                                                                                                                                           \n        readonly variable?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EnvironmentVariableProperty`\n *\n * @param properties - the TypeScript properties of a `EnvironmentVariableProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainer_EnvironmentVariablePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    errors.collect(cdk.propertyValidator('variable', cdk.validateString)(properties.variable));\n    return errors.wrap('supplied properties not correct for \"EnvironmentVariableProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Container.EnvironmentVariable` resource\n *\n * @param properties - the TypeScript properties of a `EnvironmentVariableProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Container.EnvironmentVariable` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerEnvironmentVariablePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainer_EnvironmentVariablePropertyValidator(properties).assertSuccess();\n    return {\n        Value: cdk.stringToCloudFormation(properties.value),\n        Variable: cdk.stringToCloudFormation(properties.variable),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerEnvironmentVariablePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainer.EnvironmentVariableProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainer.EnvironmentVariableProperty>();\n    ret.addPropertyResult('value', 'Value', properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined);\n    ret.addPropertyResult('variable', 'Variable', properties.Variable != null ? cfn_parse.FromCloudFormation.getString(properties.Variable) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnContainer {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface HealthCheckConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly healthyThreshold?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly intervalSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                \n        readonly path?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly successCodes?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly timeoutSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly unhealthyThreshold?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HealthCheckConfigProperty`\n *\n * @param properties - the TypeScript properties of a `HealthCheckConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainer_HealthCheckConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('healthyThreshold', cdk.validateNumber)(properties.healthyThreshold));\n    errors.collect(cdk.propertyValidator('intervalSeconds', cdk.validateNumber)(properties.intervalSeconds));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('successCodes', cdk.validateString)(properties.successCodes));\n    errors.collect(cdk.propertyValidator('timeoutSeconds', cdk.validateNumber)(properties.timeoutSeconds));\n    errors.collect(cdk.propertyValidator('unhealthyThreshold', cdk.validateNumber)(properties.unhealthyThreshold));\n    return errors.wrap('supplied properties not correct for \"HealthCheckConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Container.HealthCheckConfig` resource\n *\n * @param properties - the TypeScript properties of a `HealthCheckConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Container.HealthCheckConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerHealthCheckConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainer_HealthCheckConfigPropertyValidator(properties).assertSuccess();\n    return {\n        HealthyThreshold: cdk.numberToCloudFormation(properties.healthyThreshold),\n        IntervalSeconds: cdk.numberToCloudFormation(properties.intervalSeconds),\n        Path: cdk.stringToCloudFormation(properties.path),\n        SuccessCodes: cdk.stringToCloudFormation(properties.successCodes),\n        TimeoutSeconds: cdk.numberToCloudFormation(properties.timeoutSeconds),\n        UnhealthyThreshold: cdk.numberToCloudFormation(properties.unhealthyThreshold),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerHealthCheckConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainer.HealthCheckConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainer.HealthCheckConfigProperty>();\n    ret.addPropertyResult('healthyThreshold', 'HealthyThreshold', properties.HealthyThreshold != null ? cfn_parse.FromCloudFormation.getNumber(properties.HealthyThreshold) : undefined);\n    ret.addPropertyResult('intervalSeconds', 'IntervalSeconds', properties.IntervalSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.IntervalSeconds) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addPropertyResult('successCodes', 'SuccessCodes', properties.SuccessCodes != null ? cfn_parse.FromCloudFormation.getString(properties.SuccessCodes) : undefined);\n    ret.addPropertyResult('timeoutSeconds', 'TimeoutSeconds', properties.TimeoutSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutSeconds) : undefined);\n    ret.addPropertyResult('unhealthyThreshold', 'UnhealthyThreshold', properties.UnhealthyThreshold != null ? cfn_parse.FromCloudFormation.getNumber(properties.UnhealthyThreshold) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnContainer {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface PortInfoProperty {\n                                                                                                                                                                                                                                                             \n        readonly port?: string;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly protocol?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PortInfoProperty`\n *\n * @param properties - the TypeScript properties of a `PortInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainer_PortInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('port', cdk.validateString)(properties.port));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    return errors.wrap('supplied properties not correct for \"PortInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Container.PortInfo` resource\n *\n * @param properties - the TypeScript properties of a `PortInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Container.PortInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerPortInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainer_PortInfoPropertyValidator(properties).assertSuccess();\n    return {\n        Port: cdk.stringToCloudFormation(properties.port),\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerPortInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainer.PortInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainer.PortInfoProperty>();\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getString(properties.Port) : undefined);\n    ret.addPropertyResult('protocol', 'Protocol', properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnContainer {\nn    export interface PublicDomainNameProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly certificateName?: string;\n                                                                                                                                                                                                                                                                                                     \n        readonly domainNames?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PublicDomainNameProperty`\n *\n * @param properties - the TypeScript properties of a `PublicDomainNameProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainer_PublicDomainNamePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificateName', cdk.validateString)(properties.certificateName));\n    errors.collect(cdk.propertyValidator('domainNames', cdk.listValidator(cdk.validateString))(properties.domainNames));\n    return errors.wrap('supplied properties not correct for \"PublicDomainNameProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Container.PublicDomainName` resource\n *\n * @param properties - the TypeScript properties of a `PublicDomainNameProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Container.PublicDomainName` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerPublicDomainNamePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainer_PublicDomainNamePropertyValidator(properties).assertSuccess();\n    return {\n        CertificateName: cdk.stringToCloudFormation(properties.certificateName),\n        DomainNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.domainNames),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerPublicDomainNamePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainer.PublicDomainNameProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainer.PublicDomainNameProperty>();\n    ret.addPropertyResult('certificateName', 'CertificateName', properties.CertificateName != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateName) : undefined);\n    ret.addPropertyResult('domainNames', 'DomainNames', properties.DomainNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.DomainNames) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnContainer {\nn    export interface PublicEndpointProperty {\n                                                                                                                                                                                                                                                                                                                                      \n        readonly containerName?: string;\n                                                                                                                                                                                                                                                                                                              \n        readonly containerPort?: number;\n                                                                                                                                                                                                                                                                                                                      \n        readonly healthCheckConfig?: CfnContainer.HealthCheckConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PublicEndpointProperty`\n *\n * @param properties - the TypeScript properties of a `PublicEndpointProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnContainer_PublicEndpointPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerName', cdk.validateString)(properties.containerName));\n    errors.collect(cdk.propertyValidator('containerPort', cdk.validateNumber)(properties.containerPort));\n    errors.collect(cdk.propertyValidator('healthCheckConfig', CfnContainer_HealthCheckConfigPropertyValidator)(properties.healthCheckConfig));\n    return errors.wrap('supplied properties not correct for \"PublicEndpointProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Container.PublicEndpoint` resource\n *\n * @param properties - the TypeScript properties of a `PublicEndpointProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Container.PublicEndpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContainerPublicEndpointPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContainer_PublicEndpointPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerName: cdk.stringToCloudFormation(properties.containerName),\n        ContainerPort: cdk.numberToCloudFormation(properties.containerPort),\n        HealthCheckConfig: cfnContainerHealthCheckConfigPropertyToCloudFormation(properties.healthCheckConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContainerPublicEndpointPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContainer.PublicEndpointProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContainer.PublicEndpointProperty>();\n    ret.addPropertyResult('containerName', 'ContainerName', properties.ContainerName != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerName) : undefined);\n    ret.addPropertyResult('containerPort', 'ContainerPort', properties.ContainerPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ContainerPort) : undefined);\n    ret.addPropertyResult('healthCheckConfig', 'HealthCheckConfig', properties.HealthCheckConfig != null ? CfnContainerHealthCheckConfigPropertyFromCloudFormation(properties.HealthCheckConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                      \nexport interface CfnDatabaseProps {\n\nn    readonly masterDatabaseName: string;\n\nn    readonly masterUsername: string;\n\n                                                                                                                                                                                                                                                                 \n    readonly relationalDatabaseBlueprintId: string;\n\n                                                                                                                                                                                                                                                            \n    readonly relationalDatabaseBundleId: string;\n\n                                                                                                                                                                                                                     \n    readonly relationalDatabaseName: string;\n\n                                                                                                                                                                                                                             \n    readonly availabilityZone?: string;\n\n                                                                                                                                                                                                                                                                               \n    readonly backupRetention?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                          \n    readonly caCertificateIdentifier?: string;\n\nn    readonly masterUserPassword?: string;\n\n                                                                                                                                                                                                                                                                                                          \n    readonly preferredBackupWindow?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    readonly preferredMaintenanceWindow?: string;\n\n                                                                                                                                                                                                                                                                                \n    readonly publiclyAccessible?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                          \n    readonly relationalDatabaseParameters?: Array<CfnDatabase.RelationalDatabaseParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly rotateMasterUserPassword?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDatabaseProps`\n *\n * @param properties - the TypeScript properties of a `CfnDatabaseProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDatabasePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('backupRetention', cdk.validateBoolean)(properties.backupRetention));\n    errors.collect(cdk.propertyValidator('caCertificateIdentifier', cdk.validateString)(properties.caCertificateIdentifier));\n    errors.collect(cdk.propertyValidator('masterDatabaseName', cdk.requiredValidator)(properties.masterDatabaseName));\n    errors.collect(cdk.propertyValidator('masterDatabaseName', cdk.validateString)(properties.masterDatabaseName));\n    errors.collect(cdk.propertyValidator('masterUserPassword', cdk.validateString)(properties.masterUserPassword));\n    errors.collect(cdk.propertyValidator('masterUsername', cdk.requiredValidator)(properties.masterUsername));\n    errors.collect(cdk.propertyValidator('masterUsername', cdk.validateString)(properties.masterUsername));\n    errors.collect(cdk.propertyValidator('preferredBackupWindow', cdk.validateString)(properties.preferredBackupWindow));\n    errors.collect(cdk.propertyValidator('preferredMaintenanceWindow', cdk.validateString)(properties.preferredMaintenanceWindow));\n    errors.collect(cdk.propertyValidator('publiclyAccessible', cdk.validateBoolean)(properties.publiclyAccessible));\n    errors.collect(cdk.propertyValidator('relationalDatabaseBlueprintId', cdk.requiredValidator)(properties.relationalDatabaseBlueprintId));\n    errors.collect(cdk.propertyValidator('relationalDatabaseBlueprintId', cdk.validateString)(properties.relationalDatabaseBlueprintId));\n    errors.collect(cdk.propertyValidator('relationalDatabaseBundleId', cdk.requiredValidator)(properties.relationalDatabaseBundleId));\n    errors.collect(cdk.propertyValidator('relationalDatabaseBundleId', cdk.validateString)(properties.relationalDatabaseBundleId));\n    errors.collect(cdk.propertyValidator('relationalDatabaseName', cdk.requiredValidator)(properties.relationalDatabaseName));\n    errors.collect(cdk.propertyValidator('relationalDatabaseName', cdk.validateString)(properties.relationalDatabaseName));\n    errors.collect(cdk.propertyValidator('relationalDatabaseParameters', cdk.listValidator(CfnDatabase_RelationalDatabaseParameterPropertyValidator))(properties.relationalDatabaseParameters));\n    errors.collect(cdk.propertyValidator('rotateMasterUserPassword', cdk.validateBoolean)(properties.rotateMasterUserPassword));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDatabaseProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Database` resource\n *\n * @param properties - the TypeScript properties of a `CfnDatabaseProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Database` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDatabasePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDatabasePropsValidator(properties).assertSuccess();\n    return {\n        MasterDatabaseName: cdk.stringToCloudFormation(properties.masterDatabaseName),\n        MasterUsername: cdk.stringToCloudFormation(properties.masterUsername),\n        RelationalDatabaseBlueprintId: cdk.stringToCloudFormation(properties.relationalDatabaseBlueprintId),\n        RelationalDatabaseBundleId: cdk.stringToCloudFormation(properties.relationalDatabaseBundleId),\n        RelationalDatabaseName: cdk.stringToCloudFormation(properties.relationalDatabaseName),\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        BackupRetention: cdk.booleanToCloudFormation(properties.backupRetention),\n        CaCertificateIdentifier: cdk.stringToCloudFormation(properties.caCertificateIdentifier),\n        MasterUserPassword: cdk.stringToCloudFormation(properties.masterUserPassword),\n        PreferredBackupWindow: cdk.stringToCloudFormation(properties.preferredBackupWindow),\n        PreferredMaintenanceWindow: cdk.stringToCloudFormation(properties.preferredMaintenanceWindow),\n        PubliclyAccessible: cdk.booleanToCloudFormation(properties.publiclyAccessible),\n        RelationalDatabaseParameters: cdk.listMapper(cfnDatabaseRelationalDatabaseParameterPropertyToCloudFormation)(properties.relationalDatabaseParameters),\n        RotateMasterUserPassword: cdk.booleanToCloudFormation(properties.rotateMasterUserPassword),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDatabasePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDatabaseProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDatabaseProps>();\n    ret.addPropertyResult('masterDatabaseName', 'MasterDatabaseName', cfn_parse.FromCloudFormation.getString(properties.MasterDatabaseName));\n    ret.addPropertyResult('masterUsername', 'MasterUsername', cfn_parse.FromCloudFormation.getString(properties.MasterUsername));\n    ret.addPropertyResult('relationalDatabaseBlueprintId', 'RelationalDatabaseBlueprintId', cfn_parse.FromCloudFormation.getString(properties.RelationalDatabaseBlueprintId));\n    ret.addPropertyResult('relationalDatabaseBundleId', 'RelationalDatabaseBundleId', cfn_parse.FromCloudFormation.getString(properties.RelationalDatabaseBundleId));\n    ret.addPropertyResult('relationalDatabaseName', 'RelationalDatabaseName', cfn_parse.FromCloudFormation.getString(properties.RelationalDatabaseName));\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('backupRetention', 'BackupRetention', properties.BackupRetention != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BackupRetention) : undefined);\n    ret.addPropertyResult('caCertificateIdentifier', 'CaCertificateIdentifier', properties.CaCertificateIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.CaCertificateIdentifier) : undefined);\n    ret.addPropertyResult('masterUserPassword', 'MasterUserPassword', properties.MasterUserPassword != null ? cfn_parse.FromCloudFormation.getString(properties.MasterUserPassword) : undefined);\n    ret.addPropertyResult('preferredBackupWindow', 'PreferredBackupWindow', properties.PreferredBackupWindow != null ? cfn_parse.FromCloudFormation.getString(properties.PreferredBackupWindow) : undefined);\n    ret.addPropertyResult('preferredMaintenanceWindow', 'PreferredMaintenanceWindow', properties.PreferredMaintenanceWindow != null ? cfn_parse.FromCloudFormation.getString(properties.PreferredMaintenanceWindow) : undefined);\n    ret.addPropertyResult('publiclyAccessible', 'PubliclyAccessible', properties.PubliclyAccessible != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PubliclyAccessible) : undefined);\n    ret.addPropertyResult('relationalDatabaseParameters', 'RelationalDatabaseParameters', properties.RelationalDatabaseParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnDatabaseRelationalDatabaseParameterPropertyFromCloudFormation)(properties.RelationalDatabaseParameters) : undefined);\n    ret.addPropertyResult('rotateMasterUserPassword', 'RotateMasterUserPassword', properties.RotateMasterUserPassword != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RotateMasterUserPassword) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                         \nexport class CfnDatabase extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::Database\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDatabase {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDatabasePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDatabase(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                     \n    public readonly attrDatabaseArn: string;\n\nn    public masterDatabaseName: string;\n\nn    public masterUsername: string;\n\n                                                                                                                                                                                                                                                                 \n    public relationalDatabaseBlueprintId: string;\n\n                                                                                                                                                                                                                                                            \n    public relationalDatabaseBundleId: string;\n\n                                                                                                                                                                                                                     \n    public relationalDatabaseName: string;\n\n                                                                                                                                                                                                                             \n    public availabilityZone: string | undefined;\n\n                                                                                                                                                                                                                                                                               \n    public backupRetention: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                          \n    public caCertificateIdentifier: string | undefined;\n\nn    public masterUserPassword: string | undefined;\n\n                                                                                                                                                                                                                                                                                                          \n    public preferredBackupWindow: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    public preferredMaintenanceWindow: string | undefined;\n\n                                                                                                                                                                                                                                                                                \n    public publiclyAccessible: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                          \n    public relationalDatabaseParameters: Array<CfnDatabase.RelationalDatabaseParameterProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public rotateMasterUserPassword: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnDatabaseProps) {\n        super(scope, id, { type: CfnDatabase.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'masterDatabaseName', this);\n        cdk.requireProperty(props, 'masterUsername', this);\n        cdk.requireProperty(props, 'relationalDatabaseBlueprintId', this);\n        cdk.requireProperty(props, 'relationalDatabaseBundleId', this);\n        cdk.requireProperty(props, 'relationalDatabaseName', this);\n        this.attrDatabaseArn = cdk.Token.asString(this.getAtt('DatabaseArn'));\n\n        this.masterDatabaseName = props.masterDatabaseName;\n        this.masterUsername = props.masterUsername;\n        this.relationalDatabaseBlueprintId = props.relationalDatabaseBlueprintId;\n        this.relationalDatabaseBundleId = props.relationalDatabaseBundleId;\n        this.relationalDatabaseName = props.relationalDatabaseName;\n        this.availabilityZone = props.availabilityZone;\n        this.backupRetention = props.backupRetention;\n        this.caCertificateIdentifier = props.caCertificateIdentifier;\n        this.masterUserPassword = props.masterUserPassword;\n        this.preferredBackupWindow = props.preferredBackupWindow;\n        this.preferredMaintenanceWindow = props.preferredMaintenanceWindow;\n        this.publiclyAccessible = props.publiclyAccessible;\n        this.relationalDatabaseParameters = props.relationalDatabaseParameters;\n        this.rotateMasterUserPassword = props.rotateMasterUserPassword;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Lightsail::Database\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDatabase.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            masterDatabaseName: this.masterDatabaseName,\n            masterUsername: this.masterUsername,\n            relationalDatabaseBlueprintId: this.relationalDatabaseBlueprintId,\n            relationalDatabaseBundleId: this.relationalDatabaseBundleId,\n            relationalDatabaseName: this.relationalDatabaseName,\n            availabilityZone: this.availabilityZone,\n            backupRetention: this.backupRetention,\n            caCertificateIdentifier: this.caCertificateIdentifier,\n            masterUserPassword: this.masterUserPassword,\n            preferredBackupWindow: this.preferredBackupWindow,\n            preferredMaintenanceWindow: this.preferredMaintenanceWindow,\n            publiclyAccessible: this.publiclyAccessible,\n            relationalDatabaseParameters: this.relationalDatabaseParameters,\n            rotateMasterUserPassword: this.rotateMasterUserPassword,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDatabasePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDatabase {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface RelationalDatabaseParameterProperty {\n                                                                                                                                                                                                                                                                                                             \n        readonly allowedValues?: string;\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly applyMethod?: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly applyType?: string;\n                                                                                                                                                                                                                                                                                                 \n        readonly dataType?: string;\n                                                                                                                                                                                                                                                                                              \n        readonly description?: string;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly isModifiable?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                           \n        readonly parameterName?: string;\n                                                                                                                                                                                                                                                                                              \n        readonly parameterValue?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RelationalDatabaseParameterProperty`\n *\n * @param properties - the TypeScript properties of a `RelationalDatabaseParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDatabase_RelationalDatabaseParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowedValues', cdk.validateString)(properties.allowedValues));\n    errors.collect(cdk.propertyValidator('applyMethod', cdk.validateString)(properties.applyMethod));\n    errors.collect(cdk.propertyValidator('applyType', cdk.validateString)(properties.applyType));\n    errors.collect(cdk.propertyValidator('dataType', cdk.validateString)(properties.dataType));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('isModifiable', cdk.validateBoolean)(properties.isModifiable));\n    errors.collect(cdk.propertyValidator('parameterName', cdk.validateString)(properties.parameterName));\n    errors.collect(cdk.propertyValidator('parameterValue', cdk.validateString)(properties.parameterValue));\n    return errors.wrap('supplied properties not correct for \"RelationalDatabaseParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Database.RelationalDatabaseParameter` resource\n *\n * @param properties - the TypeScript properties of a `RelationalDatabaseParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Database.RelationalDatabaseParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDatabaseRelationalDatabaseParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDatabase_RelationalDatabaseParameterPropertyValidator(properties).assertSuccess();\n    return {\n        AllowedValues: cdk.stringToCloudFormation(properties.allowedValues),\n        ApplyMethod: cdk.stringToCloudFormation(properties.applyMethod),\n        ApplyType: cdk.stringToCloudFormation(properties.applyType),\n        DataType: cdk.stringToCloudFormation(properties.dataType),\n        Description: cdk.stringToCloudFormation(properties.description),\n        IsModifiable: cdk.booleanToCloudFormation(properties.isModifiable),\n        ParameterName: cdk.stringToCloudFormation(properties.parameterName),\n        ParameterValue: cdk.stringToCloudFormation(properties.parameterValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDatabaseRelationalDatabaseParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDatabase.RelationalDatabaseParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDatabase.RelationalDatabaseParameterProperty>();\n    ret.addPropertyResult('allowedValues', 'AllowedValues', properties.AllowedValues != null ? cfn_parse.FromCloudFormation.getString(properties.AllowedValues) : undefined);\n    ret.addPropertyResult('applyMethod', 'ApplyMethod', properties.ApplyMethod != null ? cfn_parse.FromCloudFormation.getString(properties.ApplyMethod) : undefined);\n    ret.addPropertyResult('applyType', 'ApplyType', properties.ApplyType != null ? cfn_parse.FromCloudFormation.getString(properties.ApplyType) : undefined);\n    ret.addPropertyResult('dataType', 'DataType', properties.DataType != null ? cfn_parse.FromCloudFormation.getString(properties.DataType) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('isModifiable', 'IsModifiable', properties.IsModifiable != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsModifiable) : undefined);\n    ret.addPropertyResult('parameterName', 'ParameterName', properties.ParameterName != null ? cfn_parse.FromCloudFormation.getString(properties.ParameterName) : undefined);\n    ret.addPropertyResult('parameterValue', 'ParameterValue', properties.ParameterValue != null ? cfn_parse.FromCloudFormation.getString(properties.ParameterValue) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                              \nexport interface CfnDiskProps {\n\n                                                                                                                                                                                           \n    readonly diskName: string;\n\n                                                                                                                                                                                                 \n    readonly sizeInGb: number;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    readonly addOns?: Array<CfnDisk.AddOnProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                      \n    readonly availabilityZone?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDiskProps`\n *\n * @param properties - the TypeScript properties of a `CfnDiskProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDiskPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addOns', cdk.listValidator(CfnDisk_AddOnPropertyValidator))(properties.addOns));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('diskName', cdk.requiredValidator)(properties.diskName));\n    errors.collect(cdk.propertyValidator('diskName', cdk.validateString)(properties.diskName));\n    errors.collect(cdk.propertyValidator('sizeInGb', cdk.requiredValidator)(properties.sizeInGb));\n    errors.collect(cdk.propertyValidator('sizeInGb', cdk.validateNumber)(properties.sizeInGb));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDiskProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Disk` resource\n *\n * @param properties - the TypeScript properties of a `CfnDiskProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Disk` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDiskPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDiskPropsValidator(properties).assertSuccess();\n    return {\n        DiskName: cdk.stringToCloudFormation(properties.diskName),\n        SizeInGb: cdk.numberToCloudFormation(properties.sizeInGb),\n        AddOns: cdk.listMapper(cfnDiskAddOnPropertyToCloudFormation)(properties.addOns),\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDiskPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDiskProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDiskProps>();\n    ret.addPropertyResult('diskName', 'DiskName', cfn_parse.FromCloudFormation.getString(properties.DiskName));\n    ret.addPropertyResult('sizeInGb', 'SizeInGb', cfn_parse.FromCloudFormation.getNumber(properties.SizeInGb));\n    ret.addPropertyResult('addOns', 'AddOns', properties.AddOns != null ? cfn_parse.FromCloudFormation.getArray(CfnDiskAddOnPropertyFromCloudFormation)(properties.AddOns) : undefined);\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \nexport class CfnDisk extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::Disk\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDisk {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDiskPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDisk(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                             \n    public readonly attrAttachedTo: string;\n\n                                                                                                                                                                                                                                                                                                                                          \n    public readonly attrAttachmentState: string;\n\n                                                                                                          \n    public readonly attrDiskArn: string;\n\n                                                                                                                      \n    public readonly attrIops: number;\n\n                                                                                                                                         \n    public readonly attrIsAttached: cdk.IResolvable;\n\n                                                                                 \n    public readonly attrPath: string;\n\n                                                                                                                         \n    public readonly attrResourceType: string;\n\n                                                                                                            \n    public readonly attrState: string;\n\n                                                                                                                                                                                                                                                                                                         \n    public readonly attrSupportCode: string;\n\n                                                                                                                                                                                           \n    public diskName: string;\n\n                                                                                                                                                                                                 \n    public sizeInGb: number;\n\n                                                                                                                                                                                                                                                                                                                                                               \n    public addOns: Array<CfnDisk.AddOnProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                      \n    public availabilityZone: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnDiskProps) {\n        super(scope, id, { type: CfnDisk.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'diskName', this);\n        cdk.requireProperty(props, 'sizeInGb', this);\n        this.attrAttachedTo = cdk.Token.asString(this.getAtt('AttachedTo'));\n        this.attrAttachmentState = cdk.Token.asString(this.getAtt('AttachmentState'));\n        this.attrDiskArn = cdk.Token.asString(this.getAtt('DiskArn'));\n        this.attrIops = cdk.Token.asNumber(this.getAtt('Iops'));\n        this.attrIsAttached = this.getAtt('IsAttached');\n        this.attrPath = cdk.Token.asString(this.getAtt('Path'));\n        this.attrResourceType = cdk.Token.asString(this.getAtt('ResourceType'));\n        this.attrState = cdk.Token.asString(this.getAtt('State'));\n        this.attrSupportCode = cdk.Token.asString(this.getAtt('SupportCode'));\n\n        this.diskName = props.diskName;\n        this.sizeInGb = props.sizeInGb;\n        this.addOns = props.addOns;\n        this.availabilityZone = props.availabilityZone;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Lightsail::Disk\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDisk.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            diskName: this.diskName,\n            sizeInGb: this.sizeInGb,\n            addOns: this.addOns,\n            availabilityZone: this.availabilityZone,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDiskPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDisk {\n                                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface AddOnProperty {\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly addOnType: string;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly autoSnapshotAddOnRequest?: CfnDisk.AutoSnapshotAddOnProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                          \n        readonly status?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AddOnProperty`\n *\n * @param properties - the TypeScript properties of a `AddOnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDisk_AddOnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addOnType', cdk.requiredValidator)(properties.addOnType));\n    errors.collect(cdk.propertyValidator('addOnType', cdk.validateString)(properties.addOnType));\n    errors.collect(cdk.propertyValidator('autoSnapshotAddOnRequest', CfnDisk_AutoSnapshotAddOnPropertyValidator)(properties.autoSnapshotAddOnRequest));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"AddOnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Disk.AddOn` resource\n *\n * @param properties - the TypeScript properties of a `AddOnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Disk.AddOn` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDiskAddOnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDisk_AddOnPropertyValidator(properties).assertSuccess();\n    return {\n        AddOnType: cdk.stringToCloudFormation(properties.addOnType),\n        AutoSnapshotAddOnRequest: cfnDiskAutoSnapshotAddOnPropertyToCloudFormation(properties.autoSnapshotAddOnRequest),\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDiskAddOnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDisk.AddOnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDisk.AddOnProperty>();\n    ret.addPropertyResult('addOnType', 'AddOnType', cfn_parse.FromCloudFormation.getString(properties.AddOnType));\n    ret.addPropertyResult('autoSnapshotAddOnRequest', 'AutoSnapshotAddOnRequest', properties.AutoSnapshotAddOnRequest != null ? CfnDiskAutoSnapshotAddOnPropertyFromCloudFormation(properties.AutoSnapshotAddOnRequest) : undefined);\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDisk {\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface AutoSnapshotAddOnProperty {\nn        readonly snapshotTimeOfDay?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AutoSnapshotAddOnProperty`\n *\n * @param properties - the TypeScript properties of a `AutoSnapshotAddOnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDisk_AutoSnapshotAddOnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('snapshotTimeOfDay', cdk.validateString)(properties.snapshotTimeOfDay));\n    return errors.wrap('supplied properties not correct for \"AutoSnapshotAddOnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Disk.AutoSnapshotAddOn` resource\n *\n * @param properties - the TypeScript properties of a `AutoSnapshotAddOnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Disk.AutoSnapshotAddOn` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDiskAutoSnapshotAddOnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDisk_AutoSnapshotAddOnPropertyValidator(properties).assertSuccess();\n    return {\n        SnapshotTimeOfDay: cdk.stringToCloudFormation(properties.snapshotTimeOfDay),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDiskAutoSnapshotAddOnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDisk.AutoSnapshotAddOnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDisk.AutoSnapshotAddOnProperty>();\n    ret.addPropertyResult('snapshotTimeOfDay', 'SnapshotTimeOfDay', properties.SnapshotTimeOfDay != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotTimeOfDay) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                              \nexport interface CfnDistributionProps {\n\n                                                                                                                                                                                                                                       \n    readonly bundleId: string;\n\n                                                                                                                                                                                                                                                                          \n    readonly defaultCacheBehavior: CfnDistribution.CacheBehaviorProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                          \n    readonly distributionName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly origin: CfnDistribution.InputOriginProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                              \n    readonly cacheBehaviors?: Array<CfnDistribution.CacheBehaviorPerPathProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                            \n    readonly cacheBehaviorSettings?: CfnDistribution.CacheSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                              \n    readonly certificateName?: string;\n\n                                                                                                                                                                                                                                                                                                                                  \n    readonly ipAddressType?: string;\n\n                                                                                                                                                                                                                                                      \n    readonly isEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDistributionProps`\n *\n * @param properties - the TypeScript properties of a `CfnDistributionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistributionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bundleId', cdk.requiredValidator)(properties.bundleId));\n    errors.collect(cdk.propertyValidator('bundleId', cdk.validateString)(properties.bundleId));\n    errors.collect(cdk.propertyValidator('cacheBehaviorSettings', CfnDistribution_CacheSettingsPropertyValidator)(properties.cacheBehaviorSettings));\n    errors.collect(cdk.propertyValidator('cacheBehaviors', cdk.listValidator(CfnDistribution_CacheBehaviorPerPathPropertyValidator))(properties.cacheBehaviors));\n    errors.collect(cdk.propertyValidator('certificateName', cdk.validateString)(properties.certificateName));\n    errors.collect(cdk.propertyValidator('defaultCacheBehavior', cdk.requiredValidator)(properties.defaultCacheBehavior));\n    errors.collect(cdk.propertyValidator('defaultCacheBehavior', CfnDistribution_CacheBehaviorPropertyValidator)(properties.defaultCacheBehavior));\n    errors.collect(cdk.propertyValidator('distributionName', cdk.requiredValidator)(properties.distributionName));\n    errors.collect(cdk.propertyValidator('distributionName', cdk.validateString)(properties.distributionName));\n    errors.collect(cdk.propertyValidator('ipAddressType', cdk.validateString)(properties.ipAddressType));\n    errors.collect(cdk.propertyValidator('isEnabled', cdk.validateBoolean)(properties.isEnabled));\n    errors.collect(cdk.propertyValidator('origin', cdk.requiredValidator)(properties.origin));\n    errors.collect(cdk.propertyValidator('origin', CfnDistribution_InputOriginPropertyValidator)(properties.origin));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDistributionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Distribution` resource\n *\n * @param properties - the TypeScript properties of a `CfnDistributionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Distribution` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistributionPropsValidator(properties).assertSuccess();\n    return {\n        BundleId: cdk.stringToCloudFormation(properties.bundleId),\n        DefaultCacheBehavior: cfnDistributionCacheBehaviorPropertyToCloudFormation(properties.defaultCacheBehavior),\n        DistributionName: cdk.stringToCloudFormation(properties.distributionName),\n        Origin: cfnDistributionInputOriginPropertyToCloudFormation(properties.origin),\n        CacheBehaviors: cdk.listMapper(cfnDistributionCacheBehaviorPerPathPropertyToCloudFormation)(properties.cacheBehaviors),\n        CacheBehaviorSettings: cfnDistributionCacheSettingsPropertyToCloudFormation(properties.cacheBehaviorSettings),\n        CertificateName: cdk.stringToCloudFormation(properties.certificateName),\n        IpAddressType: cdk.stringToCloudFormation(properties.ipAddressType),\n        IsEnabled: cdk.booleanToCloudFormation(properties.isEnabled),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistributionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistributionProps>();\n    ret.addPropertyResult('bundleId', 'BundleId', cfn_parse.FromCloudFormation.getString(properties.BundleId));\n    ret.addPropertyResult('defaultCacheBehavior', 'DefaultCacheBehavior', CfnDistributionCacheBehaviorPropertyFromCloudFormation(properties.DefaultCacheBehavior));\n    ret.addPropertyResult('distributionName', 'DistributionName', cfn_parse.FromCloudFormation.getString(properties.DistributionName));\n    ret.addPropertyResult('origin', 'Origin', CfnDistributionInputOriginPropertyFromCloudFormation(properties.Origin));\n    ret.addPropertyResult('cacheBehaviors', 'CacheBehaviors', properties.CacheBehaviors != null ? cfn_parse.FromCloudFormation.getArray(CfnDistributionCacheBehaviorPerPathPropertyFromCloudFormation)(properties.CacheBehaviors) : undefined);\n    ret.addPropertyResult('cacheBehaviorSettings', 'CacheBehaviorSettings', properties.CacheBehaviorSettings != null ? CfnDistributionCacheSettingsPropertyFromCloudFormation(properties.CacheBehaviorSettings) : undefined);\n    ret.addPropertyResult('certificateName', 'CertificateName', properties.CertificateName != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateName) : undefined);\n    ret.addPropertyResult('ipAddressType', 'IpAddressType', properties.IpAddressType != null ? cfn_parse.FromCloudFormation.getString(properties.IpAddressType) : undefined);\n    ret.addPropertyResult('isEnabled', 'IsEnabled', properties.IsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsEnabled) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDistribution extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::Distribution\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDistribution {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDistributionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDistribution(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                               \n    public readonly attrAbleToUpdateBundle: cdk.IResolvable;\n\n                                                                                                                          \n    public readonly attrDistributionArn: string;\n\n                                                                                             \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                       \n    public bundleId: string;\n\n                                                                                                                                                                                                                                                                          \n    public defaultCacheBehavior: CfnDistribution.CacheBehaviorProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                          \n    public distributionName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                               \n    public origin: CfnDistribution.InputOriginProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                              \n    public cacheBehaviors: Array<CfnDistribution.CacheBehaviorPerPathProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                            \n    public cacheBehaviorSettings: CfnDistribution.CacheSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                              \n    public certificateName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                  \n    public ipAddressType: string | undefined;\n\n                                                                                                                                                                                                                                                      \n    public isEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnDistributionProps) {\n        super(scope, id, { type: CfnDistribution.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'bundleId', this);\n        cdk.requireProperty(props, 'defaultCacheBehavior', this);\n        cdk.requireProperty(props, 'distributionName', this);\n        cdk.requireProperty(props, 'origin', this);\n        this.attrAbleToUpdateBundle = this.getAtt('AbleToUpdateBundle');\n        this.attrDistributionArn = cdk.Token.asString(this.getAtt('DistributionArn'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.bundleId = props.bundleId;\n        this.defaultCacheBehavior = props.defaultCacheBehavior;\n        this.distributionName = props.distributionName;\n        this.origin = props.origin;\n        this.cacheBehaviors = props.cacheBehaviors;\n        this.cacheBehaviorSettings = props.cacheBehaviorSettings;\n        this.certificateName = props.certificateName;\n        this.ipAddressType = props.ipAddressType;\n        this.isEnabled = props.isEnabled;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Lightsail::Distribution\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDistribution.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            bundleId: this.bundleId,\n            defaultCacheBehavior: this.defaultCacheBehavior,\n            distributionName: this.distributionName,\n            origin: this.origin,\n            cacheBehaviors: this.cacheBehaviors,\n            cacheBehaviorSettings: this.cacheBehaviorSettings,\n            certificateName: this.certificateName,\n            ipAddressType: this.ipAddressType,\n            isEnabled: this.isEnabled,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDistributionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDistribution {\nn    export interface CacheBehaviorProperty {\nn        readonly behavior?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CacheBehaviorProperty`\n *\n * @param properties - the TypeScript properties of a `CacheBehaviorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_CacheBehaviorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('behavior', cdk.validateString)(properties.behavior));\n    return errors.wrap('supplied properties not correct for \"CacheBehaviorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.CacheBehavior` resource\n *\n * @param properties - the TypeScript properties of a `CacheBehaviorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.CacheBehavior` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionCacheBehaviorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_CacheBehaviorPropertyValidator(properties).assertSuccess();\n    return {\n        Behavior: cdk.stringToCloudFormation(properties.behavior),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionCacheBehaviorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.CacheBehaviorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.CacheBehaviorProperty>();\n    ret.addPropertyResult('behavior', 'Behavior', properties.Behavior != null ? cfn_parse.FromCloudFormation.getString(properties.Behavior) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\nn    export interface CacheBehaviorPerPathProperty {\nn        readonly behavior?: string;\nn        readonly path?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CacheBehaviorPerPathProperty`\n *\n * @param properties - the TypeScript properties of a `CacheBehaviorPerPathProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_CacheBehaviorPerPathPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('behavior', cdk.validateString)(properties.behavior));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    return errors.wrap('supplied properties not correct for \"CacheBehaviorPerPathProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.CacheBehaviorPerPath` resource\n *\n * @param properties - the TypeScript properties of a `CacheBehaviorPerPathProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.CacheBehaviorPerPath` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionCacheBehaviorPerPathPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_CacheBehaviorPerPathPropertyValidator(properties).assertSuccess();\n    return {\n        Behavior: cdk.stringToCloudFormation(properties.behavior),\n        Path: cdk.stringToCloudFormation(properties.path),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionCacheBehaviorPerPathPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.CacheBehaviorPerPathProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.CacheBehaviorPerPathProperty>();\n    ret.addPropertyResult('behavior', 'Behavior', properties.Behavior != null ? cfn_parse.FromCloudFormation.getString(properties.Behavior) : undefined);\n    ret.addPropertyResult('path', 'Path', properties.Path != null ? cfn_parse.FromCloudFormation.getString(properties.Path) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\nn    export interface CacheSettingsProperty {\nn        readonly allowedHttpMethods?: string;\nn        readonly cachedHttpMethods?: string;\nn        readonly defaultTtl?: number;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly forwardedCookies?: CfnDistribution.CookieObjectProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly forwardedHeaders?: CfnDistribution.HeaderObjectProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly forwardedQueryStrings?: CfnDistribution.QueryStringObjectProperty | cdk.IResolvable;\nn        readonly maximumTtl?: number;\nn        readonly minimumTtl?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CacheSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `CacheSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_CacheSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowedHttpMethods', cdk.validateString)(properties.allowedHttpMethods));\n    errors.collect(cdk.propertyValidator('cachedHttpMethods', cdk.validateString)(properties.cachedHttpMethods));\n    errors.collect(cdk.propertyValidator('defaultTtl', cdk.validateNumber)(properties.defaultTtl));\n    errors.collect(cdk.propertyValidator('forwardedCookies', CfnDistribution_CookieObjectPropertyValidator)(properties.forwardedCookies));\n    errors.collect(cdk.propertyValidator('forwardedHeaders', CfnDistribution_HeaderObjectPropertyValidator)(properties.forwardedHeaders));\n    errors.collect(cdk.propertyValidator('forwardedQueryStrings', CfnDistribution_QueryStringObjectPropertyValidator)(properties.forwardedQueryStrings));\n    errors.collect(cdk.propertyValidator('maximumTtl', cdk.validateNumber)(properties.maximumTtl));\n    errors.collect(cdk.propertyValidator('minimumTtl', cdk.validateNumber)(properties.minimumTtl));\n    return errors.wrap('supplied properties not correct for \"CacheSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.CacheSettings` resource\n *\n * @param properties - the TypeScript properties of a `CacheSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.CacheSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionCacheSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_CacheSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AllowedHTTPMethods: cdk.stringToCloudFormation(properties.allowedHttpMethods),\n        CachedHTTPMethods: cdk.stringToCloudFormation(properties.cachedHttpMethods),\n        DefaultTTL: cdk.numberToCloudFormation(properties.defaultTtl),\n        ForwardedCookies: cfnDistributionCookieObjectPropertyToCloudFormation(properties.forwardedCookies),\n        ForwardedHeaders: cfnDistributionHeaderObjectPropertyToCloudFormation(properties.forwardedHeaders),\n        ForwardedQueryStrings: cfnDistributionQueryStringObjectPropertyToCloudFormation(properties.forwardedQueryStrings),\n        MaximumTTL: cdk.numberToCloudFormation(properties.maximumTtl),\n        MinimumTTL: cdk.numberToCloudFormation(properties.minimumTtl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionCacheSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.CacheSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.CacheSettingsProperty>();\n    ret.addPropertyResult('allowedHttpMethods', 'AllowedHTTPMethods', properties.AllowedHTTPMethods != null ? cfn_parse.FromCloudFormation.getString(properties.AllowedHTTPMethods) : undefined);\n    ret.addPropertyResult('cachedHttpMethods', 'CachedHTTPMethods', properties.CachedHTTPMethods != null ? cfn_parse.FromCloudFormation.getString(properties.CachedHTTPMethods) : undefined);\n    ret.addPropertyResult('defaultTtl', 'DefaultTTL', properties.DefaultTTL != null ? cfn_parse.FromCloudFormation.getNumber(properties.DefaultTTL) : undefined);\n    ret.addPropertyResult('forwardedCookies', 'ForwardedCookies', properties.ForwardedCookies != null ? CfnDistributionCookieObjectPropertyFromCloudFormation(properties.ForwardedCookies) : undefined);\n    ret.addPropertyResult('forwardedHeaders', 'ForwardedHeaders', properties.ForwardedHeaders != null ? CfnDistributionHeaderObjectPropertyFromCloudFormation(properties.ForwardedHeaders) : undefined);\n    ret.addPropertyResult('forwardedQueryStrings', 'ForwardedQueryStrings', properties.ForwardedQueryStrings != null ? CfnDistributionQueryStringObjectPropertyFromCloudFormation(properties.ForwardedQueryStrings) : undefined);\n    ret.addPropertyResult('maximumTtl', 'MaximumTTL', properties.MaximumTTL != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumTTL) : undefined);\n    ret.addPropertyResult('minimumTtl', 'MinimumTTL', properties.MinimumTTL != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinimumTTL) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\nn    export interface CookieObjectProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly cookiesAllowList?: string[];\nn        readonly option?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CookieObjectProperty`\n *\n * @param properties - the TypeScript properties of a `CookieObjectProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_CookieObjectPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cookiesAllowList', cdk.listValidator(cdk.validateString))(properties.cookiesAllowList));\n    errors.collect(cdk.propertyValidator('option', cdk.validateString)(properties.option));\n    return errors.wrap('supplied properties not correct for \"CookieObjectProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.CookieObject` resource\n *\n * @param properties - the TypeScript properties of a `CookieObjectProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.CookieObject` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionCookieObjectPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_CookieObjectPropertyValidator(properties).assertSuccess();\n    return {\n        CookiesAllowList: cdk.listMapper(cdk.stringToCloudFormation)(properties.cookiesAllowList),\n        Option: cdk.stringToCloudFormation(properties.option),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionCookieObjectPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.CookieObjectProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.CookieObjectProperty>();\n    ret.addPropertyResult('cookiesAllowList', 'CookiesAllowList', properties.CookiesAllowList != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CookiesAllowList) : undefined);\n    ret.addPropertyResult('option', 'Option', properties.Option != null ? cfn_parse.FromCloudFormation.getString(properties.Option) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\nn    export interface HeaderObjectProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly headersAllowList?: string[];\nn        readonly option?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HeaderObjectProperty`\n *\n * @param properties - the TypeScript properties of a `HeaderObjectProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_HeaderObjectPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('headersAllowList', cdk.listValidator(cdk.validateString))(properties.headersAllowList));\n    errors.collect(cdk.propertyValidator('option', cdk.validateString)(properties.option));\n    return errors.wrap('supplied properties not correct for \"HeaderObjectProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.HeaderObject` resource\n *\n * @param properties - the TypeScript properties of a `HeaderObjectProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.HeaderObject` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionHeaderObjectPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_HeaderObjectPropertyValidator(properties).assertSuccess();\n    return {\n        HeadersAllowList: cdk.listMapper(cdk.stringToCloudFormation)(properties.headersAllowList),\n        Option: cdk.stringToCloudFormation(properties.option),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionHeaderObjectPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.HeaderObjectProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.HeaderObjectProperty>();\n    ret.addPropertyResult('headersAllowList', 'HeadersAllowList', properties.HeadersAllowList != null ? cfn_parse.FromCloudFormation.getStringArray(properties.HeadersAllowList) : undefined);\n    ret.addPropertyResult('option', 'Option', properties.Option != null ? cfn_parse.FromCloudFormation.getString(properties.Option) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\nn    export interface InputOriginProperty {\n                                                                                                                                                                                                                                                                \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly protocolPolicy?: string;\n                                                                                                                                                                                                                                                                                 \n        readonly regionName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputOriginProperty`\n *\n * @param properties - the TypeScript properties of a `InputOriginProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_InputOriginPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('protocolPolicy', cdk.validateString)(properties.protocolPolicy));\n    errors.collect(cdk.propertyValidator('regionName', cdk.validateString)(properties.regionName));\n    return errors.wrap('supplied properties not correct for \"InputOriginProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.InputOrigin` resource\n *\n * @param properties - the TypeScript properties of a `InputOriginProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.InputOrigin` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionInputOriginPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_InputOriginPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        ProtocolPolicy: cdk.stringToCloudFormation(properties.protocolPolicy),\n        RegionName: cdk.stringToCloudFormation(properties.regionName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionInputOriginPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.InputOriginProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.InputOriginProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('protocolPolicy', 'ProtocolPolicy', properties.ProtocolPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.ProtocolPolicy) : undefined);\n    ret.addPropertyResult('regionName', 'RegionName', properties.RegionName != null ? cfn_parse.FromCloudFormation.getString(properties.RegionName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDistribution {\nn    export interface QueryStringObjectProperty {\n                                                                                                                                                                                                                                                                                                                            \n        readonly option?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly queryStringsAllowList?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `QueryStringObjectProperty`\n *\n * @param properties - the TypeScript properties of a `QueryStringObjectProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDistribution_QueryStringObjectPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('option', cdk.validateBoolean)(properties.option));\n    errors.collect(cdk.propertyValidator('queryStringsAllowList', cdk.listValidator(cdk.validateString))(properties.queryStringsAllowList));\n    return errors.wrap('supplied properties not correct for \"QueryStringObjectProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.QueryStringObject` resource\n *\n * @param properties - the TypeScript properties of a `QueryStringObjectProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Distribution.QueryStringObject` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDistributionQueryStringObjectPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDistribution_QueryStringObjectPropertyValidator(properties).assertSuccess();\n    return {\n        Option: cdk.booleanToCloudFormation(properties.option),\n        QueryStringsAllowList: cdk.listMapper(cdk.stringToCloudFormation)(properties.queryStringsAllowList),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDistributionQueryStringObjectPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDistribution.QueryStringObjectProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDistribution.QueryStringObjectProperty>();\n    ret.addPropertyResult('option', 'Option', properties.Option != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Option) : undefined);\n    ret.addPropertyResult('queryStringsAllowList', 'QueryStringsAllowList', properties.QueryStringsAllowList != null ? cfn_parse.FromCloudFormation.getStringArray(properties.QueryStringsAllowList) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                      \nexport interface CfnInstanceProps {\n\n                                                                                                                                                                                                                                                        \n    readonly blueprintId: string;\n\n                                                                                                                                                                                                                                         \n    readonly bundleId: string;\n\n                                                                                                                                                                                                           \n    readonly instanceName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly addOns?: Array<CfnInstance.AddOnProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                             \n    readonly availabilityZone?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly hardware?: CfnInstance.HardwareProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                   \n    readonly keyPairName?: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly networking?: CfnInstance.NetworkingProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n\nn    readonly userData?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnInstanceProps`\n *\n * @param properties - the TypeScript properties of a `CfnInstanceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstancePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addOns', cdk.listValidator(CfnInstance_AddOnPropertyValidator))(properties.addOns));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('blueprintId', cdk.requiredValidator)(properties.blueprintId));\n    errors.collect(cdk.propertyValidator('blueprintId', cdk.validateString)(properties.blueprintId));\n    errors.collect(cdk.propertyValidator('bundleId', cdk.requiredValidator)(properties.bundleId));\n    errors.collect(cdk.propertyValidator('bundleId', cdk.validateString)(properties.bundleId));\n    errors.collect(cdk.propertyValidator('hardware', CfnInstance_HardwarePropertyValidator)(properties.hardware));\n    errors.collect(cdk.propertyValidator('instanceName', cdk.requiredValidator)(properties.instanceName));\n    errors.collect(cdk.propertyValidator('instanceName', cdk.validateString)(properties.instanceName));\n    errors.collect(cdk.propertyValidator('keyPairName', cdk.validateString)(properties.keyPairName));\n    errors.collect(cdk.propertyValidator('networking', CfnInstance_NetworkingPropertyValidator)(properties.networking));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('userData', cdk.validateString)(properties.userData));\n    return errors.wrap('supplied properties not correct for \"CfnInstanceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance` resource\n *\n * @param properties - the TypeScript properties of a `CfnInstanceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstancePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstancePropsValidator(properties).assertSuccess();\n    return {\n        BlueprintId: cdk.stringToCloudFormation(properties.blueprintId),\n        BundleId: cdk.stringToCloudFormation(properties.bundleId),\n        InstanceName: cdk.stringToCloudFormation(properties.instanceName),\n        AddOns: cdk.listMapper(cfnInstanceAddOnPropertyToCloudFormation)(properties.addOns),\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        Hardware: cfnInstanceHardwarePropertyToCloudFormation(properties.hardware),\n        KeyPairName: cdk.stringToCloudFormation(properties.keyPairName),\n        Networking: cfnInstanceNetworkingPropertyToCloudFormation(properties.networking),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        UserData: cdk.stringToCloudFormation(properties.userData),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstancePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstanceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstanceProps>();\n    ret.addPropertyResult('blueprintId', 'BlueprintId', cfn_parse.FromCloudFormation.getString(properties.BlueprintId));\n    ret.addPropertyResult('bundleId', 'BundleId', cfn_parse.FromCloudFormation.getString(properties.BundleId));\n    ret.addPropertyResult('instanceName', 'InstanceName', cfn_parse.FromCloudFormation.getString(properties.InstanceName));\n    ret.addPropertyResult('addOns', 'AddOns', properties.AddOns != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceAddOnPropertyFromCloudFormation)(properties.AddOns) : undefined);\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('hardware', 'Hardware', properties.Hardware != null ? CfnInstanceHardwarePropertyFromCloudFormation(properties.Hardware) : undefined);\n    ret.addPropertyResult('keyPairName', 'KeyPairName', properties.KeyPairName != null ? cfn_parse.FromCloudFormation.getString(properties.KeyPairName) : undefined);\n    ret.addPropertyResult('networking', 'Networking', properties.Networking != null ? CfnInstanceNetworkingPropertyFromCloudFormation(properties.Networking) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('userData', 'UserData', properties.UserData != null ? cfn_parse.FromCloudFormation.getString(properties.UserData) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                         \nexport class CfnInstance extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::Instance\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnInstance {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnInstancePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnInstance(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                              \n    public readonly attrHardwareCpuCount: number;\n\n                                                                                                                                          \n    public readonly attrHardwareRamSizeInGb: number;\n\n                                                                                                                                                                                                                           \n    public readonly attrInstanceArn: string;\n\n                                                                                                                                                 \n    public readonly attrIsStaticIp: cdk.IResolvable;\n\n                                                                                                                                                    \n    public readonly attrLocationAvailabilityZone: string;\n\n                                                                                                          \n    public readonly attrLocationRegionName: string;\n\n                                                                                                                                                                            \n    public readonly attrNetworkingMonthlyTransferGbPerMonthAllocated: string;\n\n                                                                                                               \n    public readonly attrPrivateIpAddress: string;\n\n                                                                                                             \n    public readonly attrPublicIpAddress: string;\n\n                                                                                                                                 \n    public readonly attrResourceType: string;\n\n                                                                                                                    \n    public readonly attrSshKeyName: string;\n\n                                                                                                  \n    public readonly attrStateCode: number;\n\n                                                                                                                                   \n    public readonly attrStateName: string;\n\n                                                                                                                                                                                                                                                                                                                  \n    public readonly attrSupportCode: string;\n\n                                                                                                                                        \n    public readonly attrUserName: string;\n\n                                                                                                                                                                                                                                                        \n    public blueprintId: string;\n\n                                                                                                                                                                                                                                         \n    public bundleId: string;\n\n                                                                                                                                                                                                           \n    public instanceName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                       \n    public addOns: Array<CfnInstance.AddOnProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    public availabilityZone: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public hardware: CfnInstance.HardwareProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                   \n    public keyPairName: string | undefined;\n\n                                                                                                                                                                                                                                                                    \n    public networking: CfnInstance.NetworkingProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\nn    public userData: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnInstanceProps) {\n        super(scope, id, { type: CfnInstance.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'blueprintId', this);\n        cdk.requireProperty(props, 'bundleId', this);\n        cdk.requireProperty(props, 'instanceName', this);\n        this.attrHardwareCpuCount = cdk.Token.asNumber(this.getAtt('Hardware.CpuCount'));\n        this.attrHardwareRamSizeInGb = cdk.Token.asNumber(this.getAtt('Hardware.RamSizeInGb'));\n        this.attrInstanceArn = cdk.Token.asString(this.getAtt('InstanceArn'));\n        this.attrIsStaticIp = this.getAtt('IsStaticIp');\n        this.attrLocationAvailabilityZone = cdk.Token.asString(this.getAtt('Location.AvailabilityZone'));\n        this.attrLocationRegionName = cdk.Token.asString(this.getAtt('Location.RegionName'));\n        this.attrNetworkingMonthlyTransferGbPerMonthAllocated = cdk.Token.asString(this.getAtt('Networking.MonthlyTransfer.GbPerMonthAllocated'));\n        this.attrPrivateIpAddress = cdk.Token.asString(this.getAtt('PrivateIpAddress'));\n        this.attrPublicIpAddress = cdk.Token.asString(this.getAtt('PublicIpAddress'));\n        this.attrResourceType = cdk.Token.asString(this.getAtt('ResourceType'));\n        this.attrSshKeyName = cdk.Token.asString(this.getAtt('SshKeyName'));\n        this.attrStateCode = cdk.Token.asNumber(this.getAtt('State.Code'));\n        this.attrStateName = cdk.Token.asString(this.getAtt('State.Name'));\n        this.attrSupportCode = cdk.Token.asString(this.getAtt('SupportCode'));\n        this.attrUserName = cdk.Token.asString(this.getAtt('UserName'));\n\n        this.blueprintId = props.blueprintId;\n        this.bundleId = props.bundleId;\n        this.instanceName = props.instanceName;\n        this.addOns = props.addOns;\n        this.availabilityZone = props.availabilityZone;\n        this.hardware = props.hardware;\n        this.keyPairName = props.keyPairName;\n        this.networking = props.networking;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Lightsail::Instance\", props.tags, { tagPropertyName: 'tags' });\n        this.userData = props.userData;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnInstance.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            blueprintId: this.blueprintId,\n            bundleId: this.bundleId,\n            instanceName: this.instanceName,\n            addOns: this.addOns,\n            availabilityZone: this.availabilityZone,\n            hardware: this.hardware,\n            keyPairName: this.keyPairName,\n            networking: this.networking,\n            tags: this.tags.renderTags(),\n            userData: this.userData,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnInstancePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface AddOnProperty {\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly addOnType: string;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly autoSnapshotAddOnRequest?: CfnInstance.AutoSnapshotAddOnProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                  \n        readonly status?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AddOnProperty`\n *\n * @param properties - the TypeScript properties of a `AddOnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_AddOnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addOnType', cdk.requiredValidator)(properties.addOnType));\n    errors.collect(cdk.propertyValidator('addOnType', cdk.validateString)(properties.addOnType));\n    errors.collect(cdk.propertyValidator('autoSnapshotAddOnRequest', CfnInstance_AutoSnapshotAddOnPropertyValidator)(properties.autoSnapshotAddOnRequest));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"AddOnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.AddOn` resource\n *\n * @param properties - the TypeScript properties of a `AddOnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.AddOn` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceAddOnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_AddOnPropertyValidator(properties).assertSuccess();\n    return {\n        AddOnType: cdk.stringToCloudFormation(properties.addOnType),\n        AutoSnapshotAddOnRequest: cfnInstanceAutoSnapshotAddOnPropertyToCloudFormation(properties.autoSnapshotAddOnRequest),\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceAddOnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.AddOnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.AddOnProperty>();\n    ret.addPropertyResult('addOnType', 'AddOnType', cfn_parse.FromCloudFormation.getString(properties.AddOnType));\n    ret.addPropertyResult('autoSnapshotAddOnRequest', 'AutoSnapshotAddOnRequest', properties.AutoSnapshotAddOnRequest != null ? CfnInstanceAutoSnapshotAddOnPropertyFromCloudFormation(properties.AutoSnapshotAddOnRequest) : undefined);\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface AutoSnapshotAddOnProperty {\nn        readonly snapshotTimeOfDay?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AutoSnapshotAddOnProperty`\n *\n * @param properties - the TypeScript properties of a `AutoSnapshotAddOnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_AutoSnapshotAddOnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('snapshotTimeOfDay', cdk.validateString)(properties.snapshotTimeOfDay));\n    return errors.wrap('supplied properties not correct for \"AutoSnapshotAddOnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.AutoSnapshotAddOn` resource\n *\n * @param properties - the TypeScript properties of a `AutoSnapshotAddOnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.AutoSnapshotAddOn` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceAutoSnapshotAddOnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_AutoSnapshotAddOnPropertyValidator(properties).assertSuccess();\n    return {\n        SnapshotTimeOfDay: cdk.stringToCloudFormation(properties.snapshotTimeOfDay),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceAutoSnapshotAddOnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.AutoSnapshotAddOnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.AutoSnapshotAddOnProperty>();\n    ret.addPropertyResult('snapshotTimeOfDay', 'SnapshotTimeOfDay', properties.SnapshotTimeOfDay != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotTimeOfDay) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface DiskProperty {\n                                                                                                                                                                                                                                                            \n        readonly attachedTo?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly attachmentState?: string;\n                                                                                                                                                                                                                                          \n        readonly diskName: string;\n                                                                                                                                                                                                                                                                    \n        readonly iops?: number;\n                                                                                                                                                                                                                                                                                                                       \n        readonly isSystemDisk?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                        \n        readonly path: string;\n                                                                                                                                                                                                                                         \n        readonly sizeInGb?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DiskProperty`\n *\n * @param properties - the TypeScript properties of a `DiskProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_DiskPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attachedTo', cdk.validateString)(properties.attachedTo));\n    errors.collect(cdk.propertyValidator('attachmentState', cdk.validateString)(properties.attachmentState));\n    errors.collect(cdk.propertyValidator('diskName', cdk.requiredValidator)(properties.diskName));\n    errors.collect(cdk.propertyValidator('diskName', cdk.validateString)(properties.diskName));\n    errors.collect(cdk.propertyValidator('iops', cdk.validateNumber)(properties.iops));\n    errors.collect(cdk.propertyValidator('isSystemDisk', cdk.validateBoolean)(properties.isSystemDisk));\n    errors.collect(cdk.propertyValidator('path', cdk.requiredValidator)(properties.path));\n    errors.collect(cdk.propertyValidator('path', cdk.validateString)(properties.path));\n    errors.collect(cdk.propertyValidator('sizeInGb', cdk.validateString)(properties.sizeInGb));\n    return errors.wrap('supplied properties not correct for \"DiskProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Disk` resource\n *\n * @param properties - the TypeScript properties of a `DiskProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Disk` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceDiskPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_DiskPropertyValidator(properties).assertSuccess();\n    return {\n        AttachedTo: cdk.stringToCloudFormation(properties.attachedTo),\n        AttachmentState: cdk.stringToCloudFormation(properties.attachmentState),\n        DiskName: cdk.stringToCloudFormation(properties.diskName),\n        IOPS: cdk.numberToCloudFormation(properties.iops),\n        IsSystemDisk: cdk.booleanToCloudFormation(properties.isSystemDisk),\n        Path: cdk.stringToCloudFormation(properties.path),\n        SizeInGb: cdk.stringToCloudFormation(properties.sizeInGb),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceDiskPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.DiskProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.DiskProperty>();\n    ret.addPropertyResult('attachedTo', 'AttachedTo', properties.AttachedTo != null ? cfn_parse.FromCloudFormation.getString(properties.AttachedTo) : undefined);\n    ret.addPropertyResult('attachmentState', 'AttachmentState', properties.AttachmentState != null ? cfn_parse.FromCloudFormation.getString(properties.AttachmentState) : undefined);\n    ret.addPropertyResult('diskName', 'DiskName', cfn_parse.FromCloudFormation.getString(properties.DiskName));\n    ret.addPropertyResult('iops', 'IOPS', properties.IOPS != null ? cfn_parse.FromCloudFormation.getNumber(properties.IOPS) : undefined);\n    ret.addPropertyResult('isSystemDisk', 'IsSystemDisk', properties.IsSystemDisk != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsSystemDisk) : undefined);\n    ret.addPropertyResult('path', 'Path', cfn_parse.FromCloudFormation.getString(properties.Path));\n    ret.addPropertyResult('sizeInGb', 'SizeInGb', properties.SizeInGb != null ? cfn_parse.FromCloudFormation.getString(properties.SizeInGb) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface HardwareProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly cpuCount?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly disks?: Array<CfnInstance.DiskProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly ramSizeInGb?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HardwareProperty`\n *\n * @param properties - the TypeScript properties of a `HardwareProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_HardwarePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cpuCount', cdk.validateNumber)(properties.cpuCount));\n    errors.collect(cdk.propertyValidator('disks', cdk.listValidator(CfnInstance_DiskPropertyValidator))(properties.disks));\n    errors.collect(cdk.propertyValidator('ramSizeInGb', cdk.validateNumber)(properties.ramSizeInGb));\n    return errors.wrap('supplied properties not correct for \"HardwareProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Hardware` resource\n *\n * @param properties - the TypeScript properties of a `HardwareProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Hardware` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceHardwarePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_HardwarePropertyValidator(properties).assertSuccess();\n    return {\n        CpuCount: cdk.numberToCloudFormation(properties.cpuCount),\n        Disks: cdk.listMapper(cfnInstanceDiskPropertyToCloudFormation)(properties.disks),\n        RamSizeInGb: cdk.numberToCloudFormation(properties.ramSizeInGb),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceHardwarePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.HardwareProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.HardwareProperty>();\n    ret.addPropertyResult('cpuCount', 'CpuCount', properties.CpuCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.CpuCount) : undefined);\n    ret.addPropertyResult('disks', 'Disks', properties.Disks != null ? cfn_parse.FromCloudFormation.getArray(CfnInstanceDiskPropertyFromCloudFormation)(properties.Disks) : undefined);\n    ret.addPropertyResult('ramSizeInGb', 'RamSizeInGb', properties.RamSizeInGb != null ? cfn_parse.FromCloudFormation.getNumber(properties.RamSizeInGb) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface LocationProperty {\n                                                                                                                                                                                                                                                                     \n        readonly availabilityZone?: string;\n                                                                                                                                                                                                                                                                    \n        readonly regionName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LocationProperty`\n *\n * @param properties - the TypeScript properties of a `LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('regionName', cdk.validateString)(properties.regionName));\n    return errors.wrap('supplied properties not correct for \"LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Location` resource\n *\n * @param properties - the TypeScript properties of a `LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_LocationPropertyValidator(properties).assertSuccess();\n    return {\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        RegionName: cdk.stringToCloudFormation(properties.regionName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.LocationProperty>();\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('regionName', 'RegionName', properties.RegionName != null ? cfn_parse.FromCloudFormation.getString(properties.RegionName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface MonthlyTransferProperty {\n                                                                                                                                                                                                                                                                                                                     \n        readonly gbPerMonthAllocated?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonthlyTransferProperty`\n *\n * @param properties - the TypeScript properties of a `MonthlyTransferProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_MonthlyTransferPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('gbPerMonthAllocated', cdk.validateString)(properties.gbPerMonthAllocated));\n    return errors.wrap('supplied properties not correct for \"MonthlyTransferProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.MonthlyTransfer` resource\n *\n * @param properties - the TypeScript properties of a `MonthlyTransferProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.MonthlyTransfer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceMonthlyTransferPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_MonthlyTransferPropertyValidator(properties).assertSuccess();\n    return {\n        GbPerMonthAllocated: cdk.stringToCloudFormation(properties.gbPerMonthAllocated),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceMonthlyTransferPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.MonthlyTransferProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.MonthlyTransferProperty>();\n    ret.addPropertyResult('gbPerMonthAllocated', 'GbPerMonthAllocated', properties.GbPerMonthAllocated != null ? cfn_parse.FromCloudFormation.getString(properties.GbPerMonthAllocated) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface NetworkingProperty {\n                                                                                                         \n        readonly monthlyTransfer?: number;\n                                                                                                                                                                                                                                                                 \n        readonly ports: Array<CfnInstance.PortProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkingProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_NetworkingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('monthlyTransfer', cdk.validateNumber)(properties.monthlyTransfer));\n    errors.collect(cdk.propertyValidator('ports', cdk.requiredValidator)(properties.ports));\n    errors.collect(cdk.propertyValidator('ports', cdk.listValidator(CfnInstance_PortPropertyValidator))(properties.ports));\n    return errors.wrap('supplied properties not correct for \"NetworkingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Networking` resource\n *\n * @param properties - the TypeScript properties of a `NetworkingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Networking` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceNetworkingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_NetworkingPropertyValidator(properties).assertSuccess();\n    return {\n        MonthlyTransfer: cdk.numberToCloudFormation(properties.monthlyTransfer),\n        Ports: cdk.listMapper(cfnInstancePortPropertyToCloudFormation)(properties.ports),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceNetworkingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.NetworkingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.NetworkingProperty>();\n    ret.addPropertyResult('monthlyTransfer', 'MonthlyTransfer', properties.MonthlyTransfer != null ? cfn_parse.FromCloudFormation.getNumber(properties.MonthlyTransfer) : undefined);\n    ret.addPropertyResult('ports', 'Ports', cfn_parse.FromCloudFormation.getArray(CfnInstancePortPropertyFromCloudFormation)(properties.Ports));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface PortProperty {\n                                                                                                                                                                                                                                                                                                                                                            \n        readonly accessDirection?: string;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly accessFrom?: string;\n                                                                                                                                                                                                                                                             \n        readonly accessType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly cidrListAliases?: string[];\nn        readonly cidrs?: string[];\n                                                                                                                                                                                                                                                        \n        readonly commonName?: string;\nn        readonly fromPort?: number;\nn        readonly ipv6Cidrs?: string[];\nn        readonly protocol?: string;\nn        readonly toPort?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PortProperty`\n *\n * @param properties - the TypeScript properties of a `PortProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_PortPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessDirection', cdk.validateString)(properties.accessDirection));\n    errors.collect(cdk.propertyValidator('accessFrom', cdk.validateString)(properties.accessFrom));\n    errors.collect(cdk.propertyValidator('accessType', cdk.validateString)(properties.accessType));\n    errors.collect(cdk.propertyValidator('cidrListAliases', cdk.listValidator(cdk.validateString))(properties.cidrListAliases));\n    errors.collect(cdk.propertyValidator('cidrs', cdk.listValidator(cdk.validateString))(properties.cidrs));\n    errors.collect(cdk.propertyValidator('commonName', cdk.validateString)(properties.commonName));\n    errors.collect(cdk.propertyValidator('fromPort', cdk.validateNumber)(properties.fromPort));\n    errors.collect(cdk.propertyValidator('ipv6Cidrs', cdk.listValidator(cdk.validateString))(properties.ipv6Cidrs));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    errors.collect(cdk.propertyValidator('toPort', cdk.validateNumber)(properties.toPort));\n    return errors.wrap('supplied properties not correct for \"PortProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Port` resource\n *\n * @param properties - the TypeScript properties of a `PortProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.Port` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstancePortPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_PortPropertyValidator(properties).assertSuccess();\n    return {\n        AccessDirection: cdk.stringToCloudFormation(properties.accessDirection),\n        AccessFrom: cdk.stringToCloudFormation(properties.accessFrom),\n        AccessType: cdk.stringToCloudFormation(properties.accessType),\n        CidrListAliases: cdk.listMapper(cdk.stringToCloudFormation)(properties.cidrListAliases),\n        Cidrs: cdk.listMapper(cdk.stringToCloudFormation)(properties.cidrs),\n        CommonName: cdk.stringToCloudFormation(properties.commonName),\n        FromPort: cdk.numberToCloudFormation(properties.fromPort),\n        Ipv6Cidrs: cdk.listMapper(cdk.stringToCloudFormation)(properties.ipv6Cidrs),\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n        ToPort: cdk.numberToCloudFormation(properties.toPort),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstancePortPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.PortProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.PortProperty>();\n    ret.addPropertyResult('accessDirection', 'AccessDirection', properties.AccessDirection != null ? cfn_parse.FromCloudFormation.getString(properties.AccessDirection) : undefined);\n    ret.addPropertyResult('accessFrom', 'AccessFrom', properties.AccessFrom != null ? cfn_parse.FromCloudFormation.getString(properties.AccessFrom) : undefined);\n    ret.addPropertyResult('accessType', 'AccessType', properties.AccessType != null ? cfn_parse.FromCloudFormation.getString(properties.AccessType) : undefined);\n    ret.addPropertyResult('cidrListAliases', 'CidrListAliases', properties.CidrListAliases != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CidrListAliases) : undefined);\n    ret.addPropertyResult('cidrs', 'Cidrs', properties.Cidrs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Cidrs) : undefined);\n    ret.addPropertyResult('commonName', 'CommonName', properties.CommonName != null ? cfn_parse.FromCloudFormation.getString(properties.CommonName) : undefined);\n    ret.addPropertyResult('fromPort', 'FromPort', properties.FromPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.FromPort) : undefined);\n    ret.addPropertyResult('ipv6Cidrs', 'Ipv6Cidrs', properties.Ipv6Cidrs != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Ipv6Cidrs) : undefined);\n    ret.addPropertyResult('protocol', 'Protocol', properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : undefined);\n    ret.addPropertyResult('toPort', 'ToPort', properties.ToPort != null ? cfn_parse.FromCloudFormation.getNumber(properties.ToPort) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInstance {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface StateProperty {\n                                                                                                                                                                                                                                            \n        readonly code?: number;\n                                                                                                                                                                                                                                                                             \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StateProperty`\n *\n * @param properties - the TypeScript properties of a `StateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInstance_StatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('code', cdk.validateNumber)(properties.code));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"StateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::Instance.State` resource\n *\n * @param properties - the TypeScript properties of a `StateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::Instance.State` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInstanceStatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInstance_StatePropertyValidator(properties).assertSuccess();\n    return {\n        Code: cdk.numberToCloudFormation(properties.code),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInstanceStatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInstance.StateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInstance.StateProperty>();\n    ret.addPropertyResult('code', 'Code', properties.Code != null ? cfn_parse.FromCloudFormation.getNumber(properties.Code) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                              \nexport interface CfnLoadBalancerProps {\n\n                                                                                                                                                                                                                                                                                                                                                           \n    readonly instancePort: number;\n\n                                                                                                                                                                                                                            \n    readonly loadBalancerName: string;\n\n                                                                                                                                                                                                                                                      \n    readonly attachedInstances?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly healthCheckPath?: string;\n\n                                                                                                                                                                                                                                                                                                                                        \n    readonly ipAddressType?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly sessionStickinessEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly sessionStickinessLbCookieDurationSeconds?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLoadBalancerProps`\n *\n * @param properties - the TypeScript properties of a `CfnLoadBalancerProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLoadBalancerPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attachedInstances', cdk.listValidator(cdk.validateString))(properties.attachedInstances));\n    errors.collect(cdk.propertyValidator('healthCheckPath', cdk.validateString)(properties.healthCheckPath));\n    errors.collect(cdk.propertyValidator('instancePort', cdk.requiredValidator)(properties.instancePort));\n    errors.collect(cdk.propertyValidator('instancePort', cdk.validateNumber)(properties.instancePort));\n    errors.collect(cdk.propertyValidator('ipAddressType', cdk.validateString)(properties.ipAddressType));\n    errors.collect(cdk.propertyValidator('loadBalancerName', cdk.requiredValidator)(properties.loadBalancerName));\n    errors.collect(cdk.propertyValidator('loadBalancerName', cdk.validateString)(properties.loadBalancerName));\n    errors.collect(cdk.propertyValidator('sessionStickinessEnabled', cdk.validateBoolean)(properties.sessionStickinessEnabled));\n    errors.collect(cdk.propertyValidator('sessionStickinessLbCookieDurationSeconds', cdk.validateString)(properties.sessionStickinessLbCookieDurationSeconds));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnLoadBalancerProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::LoadBalancer` resource\n *\n * @param properties - the TypeScript properties of a `CfnLoadBalancerProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::LoadBalancer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLoadBalancerPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLoadBalancerPropsValidator(properties).assertSuccess();\n    return {\n        InstancePort: cdk.numberToCloudFormation(properties.instancePort),\n        LoadBalancerName: cdk.stringToCloudFormation(properties.loadBalancerName),\n        AttachedInstances: cdk.listMapper(cdk.stringToCloudFormation)(properties.attachedInstances),\n        HealthCheckPath: cdk.stringToCloudFormation(properties.healthCheckPath),\n        IpAddressType: cdk.stringToCloudFormation(properties.ipAddressType),\n        SessionStickinessEnabled: cdk.booleanToCloudFormation(properties.sessionStickinessEnabled),\n        SessionStickinessLBCookieDurationSeconds: cdk.stringToCloudFormation(properties.sessionStickinessLbCookieDurationSeconds),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLoadBalancerPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLoadBalancerProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLoadBalancerProps>();\n    ret.addPropertyResult('instancePort', 'InstancePort', cfn_parse.FromCloudFormation.getNumber(properties.InstancePort));\n    ret.addPropertyResult('loadBalancerName', 'LoadBalancerName', cfn_parse.FromCloudFormation.getString(properties.LoadBalancerName));\n    ret.addPropertyResult('attachedInstances', 'AttachedInstances', properties.AttachedInstances != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AttachedInstances) : undefined);\n    ret.addPropertyResult('healthCheckPath', 'HealthCheckPath', properties.HealthCheckPath != null ? cfn_parse.FromCloudFormation.getString(properties.HealthCheckPath) : undefined);\n    ret.addPropertyResult('ipAddressType', 'IpAddressType', properties.IpAddressType != null ? cfn_parse.FromCloudFormation.getString(properties.IpAddressType) : undefined);\n    ret.addPropertyResult('sessionStickinessEnabled', 'SessionStickinessEnabled', properties.SessionStickinessEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SessionStickinessEnabled) : undefined);\n    ret.addPropertyResult('sessionStickinessLbCookieDurationSeconds', 'SessionStickinessLBCookieDurationSeconds', properties.SessionStickinessLBCookieDurationSeconds != null ? cfn_parse.FromCloudFormation.getString(properties.SessionStickinessLBCookieDurationSeconds) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \nexport class CfnLoadBalancer extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::LoadBalancer\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLoadBalancer {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLoadBalancerPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLoadBalancer(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                           \n    public readonly attrLoadBalancerArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    public instancePort: number;\n\n                                                                                                                                                                                                                            \n    public loadBalancerName: string;\n\n                                                                                                                                                                                                                                                      \n    public attachedInstances: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                         \n    public healthCheckPath: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                        \n    public ipAddressType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public sessionStickinessEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public sessionStickinessLbCookieDurationSeconds: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnLoadBalancerProps) {\n        super(scope, id, { type: CfnLoadBalancer.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'instancePort', this);\n        cdk.requireProperty(props, 'loadBalancerName', this);\n        this.attrLoadBalancerArn = cdk.Token.asString(this.getAtt('LoadBalancerArn'));\n\n        this.instancePort = props.instancePort;\n        this.loadBalancerName = props.loadBalancerName;\n        this.attachedInstances = props.attachedInstances;\n        this.healthCheckPath = props.healthCheckPath;\n        this.ipAddressType = props.ipAddressType;\n        this.sessionStickinessEnabled = props.sessionStickinessEnabled;\n        this.sessionStickinessLbCookieDurationSeconds = props.sessionStickinessLbCookieDurationSeconds;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Lightsail::LoadBalancer\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLoadBalancer.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            instancePort: this.instancePort,\n            loadBalancerName: this.loadBalancerName,\n            attachedInstances: this.attachedInstances,\n            healthCheckPath: this.healthCheckPath,\n            ipAddressType: this.ipAddressType,\n            sessionStickinessEnabled: this.sessionStickinessEnabled,\n            sessionStickinessLbCookieDurationSeconds: this.sessionStickinessLbCookieDurationSeconds,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLoadBalancerPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                          \nexport interface CfnLoadBalancerTlsCertificateProps {\n\n                                                                                                                                                                                                                                                                                                                             \n    readonly certificateDomainName: string;\n\n                                                                                                                                                                                                                                                             \n    readonly certificateName: string;\n\n                                                                                                                                                                                                                                                                                                    \n    readonly loadBalancerName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly certificateAlternativeNames?: string[];\n\n                                                                                                                                                                                                                                                                                                                        \n    readonly isAttached?: boolean | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLoadBalancerTlsCertificateProps`\n *\n * @param properties - the TypeScript properties of a `CfnLoadBalancerTlsCertificateProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLoadBalancerTlsCertificatePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificateAlternativeNames', cdk.listValidator(cdk.validateString))(properties.certificateAlternativeNames));\n    errors.collect(cdk.propertyValidator('certificateDomainName', cdk.requiredValidator)(properties.certificateDomainName));\n    errors.collect(cdk.propertyValidator('certificateDomainName', cdk.validateString)(properties.certificateDomainName));\n    errors.collect(cdk.propertyValidator('certificateName', cdk.requiredValidator)(properties.certificateName));\n    errors.collect(cdk.propertyValidator('certificateName', cdk.validateString)(properties.certificateName));\n    errors.collect(cdk.propertyValidator('isAttached', cdk.validateBoolean)(properties.isAttached));\n    errors.collect(cdk.propertyValidator('loadBalancerName', cdk.requiredValidator)(properties.loadBalancerName));\n    errors.collect(cdk.propertyValidator('loadBalancerName', cdk.validateString)(properties.loadBalancerName));\n    return errors.wrap('supplied properties not correct for \"CfnLoadBalancerTlsCertificateProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::LoadBalancerTlsCertificate` resource\n *\n * @param properties - the TypeScript properties of a `CfnLoadBalancerTlsCertificateProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::LoadBalancerTlsCertificate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLoadBalancerTlsCertificatePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLoadBalancerTlsCertificatePropsValidator(properties).assertSuccess();\n    return {\n        CertificateDomainName: cdk.stringToCloudFormation(properties.certificateDomainName),\n        CertificateName: cdk.stringToCloudFormation(properties.certificateName),\n        LoadBalancerName: cdk.stringToCloudFormation(properties.loadBalancerName),\n        CertificateAlternativeNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.certificateAlternativeNames),\n        IsAttached: cdk.booleanToCloudFormation(properties.isAttached),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLoadBalancerTlsCertificatePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLoadBalancerTlsCertificateProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLoadBalancerTlsCertificateProps>();\n    ret.addPropertyResult('certificateDomainName', 'CertificateDomainName', cfn_parse.FromCloudFormation.getString(properties.CertificateDomainName));\n    ret.addPropertyResult('certificateName', 'CertificateName', cfn_parse.FromCloudFormation.getString(properties.CertificateName));\n    ret.addPropertyResult('loadBalancerName', 'LoadBalancerName', cfn_parse.FromCloudFormation.getString(properties.LoadBalancerName));\n    ret.addPropertyResult('certificateAlternativeNames', 'CertificateAlternativeNames', properties.CertificateAlternativeNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CertificateAlternativeNames) : undefined);\n    ret.addPropertyResult('isAttached', 'IsAttached', properties.IsAttached != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsAttached) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                      \nexport class CfnLoadBalancerTlsCertificate extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::LoadBalancerTlsCertificate\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLoadBalancerTlsCertificate {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLoadBalancerTlsCertificatePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLoadBalancerTlsCertificate(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                               \n    public readonly attrLoadBalancerTlsCertificateArn: string;\n\n                                                                                                                                                                                                                                                                \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                                                                                                             \n    public certificateDomainName: string;\n\n                                                                                                                                                                                                                                                             \n    public certificateName: string;\n\n                                                                                                                                                                                                                                                                                                    \n    public loadBalancerName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public certificateAlternativeNames: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                        \n    public isAttached: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnLoadBalancerTlsCertificateProps) {\n        super(scope, id, { type: CfnLoadBalancerTlsCertificate.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'certificateDomainName', this);\n        cdk.requireProperty(props, 'certificateName', this);\n        cdk.requireProperty(props, 'loadBalancerName', this);\n        this.attrLoadBalancerTlsCertificateArn = cdk.Token.asString(this.getAtt('LoadBalancerTlsCertificateArn'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.certificateDomainName = props.certificateDomainName;\n        this.certificateName = props.certificateName;\n        this.loadBalancerName = props.loadBalancerName;\n        this.certificateAlternativeNames = props.certificateAlternativeNames;\n        this.isAttached = props.isAttached;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLoadBalancerTlsCertificate.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            certificateDomainName: this.certificateDomainName,\n            certificateName: this.certificateName,\n            loadBalancerName: this.loadBalancerName,\n            certificateAlternativeNames: this.certificateAlternativeNames,\n            isAttached: this.isAttached,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLoadBalancerTlsCertificatePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                      \nexport interface CfnStaticIpProps {\n\n                                                                                                                                                                                                            \n    readonly staticIpName: string;\n\n                                                                                                                                                                                                                               \n    readonly attachedTo?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStaticIpProps`\n *\n * @param properties - the TypeScript properties of a `CfnStaticIpProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStaticIpPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attachedTo', cdk.validateString)(properties.attachedTo));\n    errors.collect(cdk.propertyValidator('staticIpName', cdk.requiredValidator)(properties.staticIpName));\n    errors.collect(cdk.propertyValidator('staticIpName', cdk.validateString)(properties.staticIpName));\n    return errors.wrap('supplied properties not correct for \"CfnStaticIpProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Lightsail::StaticIp` resource\n *\n * @param properties - the TypeScript properties of a `CfnStaticIpProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Lightsail::StaticIp` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStaticIpPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStaticIpPropsValidator(properties).assertSuccess();\n    return {\n        StaticIpName: cdk.stringToCloudFormation(properties.staticIpName),\n        AttachedTo: cdk.stringToCloudFormation(properties.attachedTo),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStaticIpPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStaticIpProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStaticIpProps>();\n    ret.addPropertyResult('staticIpName', 'StaticIpName', cfn_parse.FromCloudFormation.getString(properties.StaticIpName));\n    ret.addPropertyResult('attachedTo', 'AttachedTo', properties.AttachedTo != null ? cfn_parse.FromCloudFormation.getString(properties.AttachedTo) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \nexport class CfnStaticIp extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Lightsail::StaticIp\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStaticIp {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStaticIpPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStaticIp(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                 \n    public readonly attrIpAddress: string;\n\n                                                                                                                                              \n    public readonly attrIsAttached: cdk.IResolvable;\n\n                                                                                                                                                                                                                            \n    public readonly attrStaticIpArn: string;\n\n                                                                                                                                                                                                            \n    public staticIpName: string;\n\n                                                                                                                                                                                                                               \n    public attachedTo: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnStaticIpProps) {\n        super(scope, id, { type: CfnStaticIp.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'staticIpName', this);\n        this.attrIpAddress = cdk.Token.asString(this.getAtt('IpAddress'));\n        this.attrIsAttached = this.getAtt('IsAttached');\n        this.attrStaticIpArn = cdk.Token.asString(this.getAtt('StaticIpArn'));\n\n        this.staticIpName = props.staticIpName;\n        this.attachedTo = props.attachedTo;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStaticIp.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            staticIpName: this.staticIpName,\n            attachedTo: this.attachedTo,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStaticIpPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
