{
  "version": 3,
  "sources": ["location.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:32.323Z\",\"fingerprint\":\"2wGnix2hQgFu16sgXO49IVpWDldXWS/eGSpkhNBfxs4=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                         \nexport interface CfnGeofenceCollectionProps {\n\n                                                                                                                                                                                                                                           \n    readonly collectionName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly pricingPlan: string;\n\n                                                                                                                                                                                                                                                       \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly kmsKeyId?: string;\n\nn    readonly pricingPlanDataSource?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnGeofenceCollectionProps`\n *\n * @param properties - the TypeScript properties of a `CfnGeofenceCollectionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnGeofenceCollectionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('collectionName', cdk.requiredValidator)(properties.collectionName));\n    errors.collect(cdk.propertyValidator('collectionName', cdk.validateString)(properties.collectionName));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('pricingPlan', cdk.requiredValidator)(properties.pricingPlan));\n    errors.collect(cdk.propertyValidator('pricingPlan', cdk.validateString)(properties.pricingPlan));\n    errors.collect(cdk.propertyValidator('pricingPlanDataSource', cdk.validateString)(properties.pricingPlanDataSource));\n    return errors.wrap('supplied properties not correct for \"CfnGeofenceCollectionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Location::GeofenceCollection` resource\n *\n * @param properties - the TypeScript properties of a `CfnGeofenceCollectionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Location::GeofenceCollection` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGeofenceCollectionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGeofenceCollectionPropsValidator(properties).assertSuccess();\n    return {\n        CollectionName: cdk.stringToCloudFormation(properties.collectionName),\n        PricingPlan: cdk.stringToCloudFormation(properties.pricingPlan),\n        Description: cdk.stringToCloudFormation(properties.description),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        PricingPlanDataSource: cdk.stringToCloudFormation(properties.pricingPlanDataSource),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGeofenceCollectionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGeofenceCollectionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGeofenceCollectionProps>();\n    ret.addPropertyResult('collectionName', 'CollectionName', cfn_parse.FromCloudFormation.getString(properties.CollectionName));\n    ret.addPropertyResult('pricingPlan', 'PricingPlan', cfn_parse.FromCloudFormation.getString(properties.PricingPlan));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('pricingPlanDataSource', 'PricingPlanDataSource', properties.PricingPlanDataSource != null ? cfn_parse.FromCloudFormation.getString(properties.PricingPlanDataSource) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \nexport class CfnGeofenceCollection extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Location::GeofenceCollection\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnGeofenceCollection {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnGeofenceCollectionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnGeofenceCollection(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                       \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                                     \n    public readonly attrCollectionArn: string;\n\n                                                                                                                                                                                                                                                                            \n    public readonly attrCreateTime: string;\n\n                                                                                                                                                                                                                                                                                 \n    public readonly attrUpdateTime: string;\n\n                                                                                                                                                                                                                                           \n    public collectionName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public pricingPlan: string;\n\n                                                                                                                                                                                                                                                       \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n    public kmsKeyId: string | undefined;\n\nn    public pricingPlanDataSource: string | undefined;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnGeofenceCollectionProps) {\n        super(scope, id, { type: CfnGeofenceCollection.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'collectionName', this);\n        cdk.requireProperty(props, 'pricingPlan', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCollectionArn = cdk.Token.asString(this.getAtt('CollectionArn'));\n        this.attrCreateTime = cdk.Token.asString(this.getAtt('CreateTime'));\n        this.attrUpdateTime = cdk.Token.asString(this.getAtt('UpdateTime'));\n\n        this.collectionName = props.collectionName;\n        this.pricingPlan = props.pricingPlan;\n        this.description = props.description;\n        this.kmsKeyId = props.kmsKeyId;\n        this.pricingPlanDataSource = props.pricingPlanDataSource;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnGeofenceCollection.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            collectionName: this.collectionName,\n            pricingPlan: this.pricingPlan,\n            description: this.description,\n            kmsKeyId: this.kmsKeyId,\n            pricingPlanDataSource: this.pricingPlanDataSource,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnGeofenceCollectionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                           \nexport interface CfnMapProps {\n\n                                                                                                                                                                                                                                        \n    readonly configuration: CfnMap.MapConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly mapName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly pricingPlan: string;\n\n                                                                                                                                                                                                                  \n    readonly description?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMapProps`\n *\n * @param properties - the TypeScript properties of a `CfnMapProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMapPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('configuration', cdk.requiredValidator)(properties.configuration));\n    errors.collect(cdk.propertyValidator('configuration', CfnMap_MapConfigurationPropertyValidator)(properties.configuration));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('mapName', cdk.requiredValidator)(properties.mapName));\n    errors.collect(cdk.propertyValidator('mapName', cdk.validateString)(properties.mapName));\n    errors.collect(cdk.propertyValidator('pricingPlan', cdk.requiredValidator)(properties.pricingPlan));\n    errors.collect(cdk.propertyValidator('pricingPlan', cdk.validateString)(properties.pricingPlan));\n    return errors.wrap('supplied properties not correct for \"CfnMapProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Location::Map` resource\n *\n * @param properties - the TypeScript properties of a `CfnMapProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Location::Map` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMapPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMapPropsValidator(properties).assertSuccess();\n    return {\n        Configuration: cfnMapMapConfigurationPropertyToCloudFormation(properties.configuration),\n        MapName: cdk.stringToCloudFormation(properties.mapName),\n        PricingPlan: cdk.stringToCloudFormation(properties.pricingPlan),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMapPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMapProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMapProps>();\n    ret.addPropertyResult('configuration', 'Configuration', CfnMapMapConfigurationPropertyFromCloudFormation(properties.Configuration));\n    ret.addPropertyResult('mapName', 'MapName', cfn_parse.FromCloudFormation.getString(properties.MapName));\n    ret.addPropertyResult('pricingPlan', 'PricingPlan', cfn_parse.FromCloudFormation.getString(properties.PricingPlan));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnMap extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Location::Map\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMap {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMapPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMap(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                           \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                            \n    public readonly attrCreateTime: string;\n\n                                                                                                                 \n    public readonly attrDataSource: string;\n\n                                                                                                                                                                                                                                                                  \n    public readonly attrMapArn: string;\n\n                                                                                                                                                                                                                                                                 \n    public readonly attrUpdateTime: string;\n\n                                                                                                                                                                                                                                        \n    public configuration: CfnMap.MapConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public mapName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    public pricingPlan: string;\n\n                                                                                                                                                                                                                  \n    public description: string | undefined;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnMapProps) {\n        super(scope, id, { type: CfnMap.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'configuration', this);\n        cdk.requireProperty(props, 'mapName', this);\n        cdk.requireProperty(props, 'pricingPlan', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreateTime = cdk.Token.asString(this.getAtt('CreateTime'));\n        this.attrDataSource = cdk.Token.asString(this.getAtt('DataSource'));\n        this.attrMapArn = cdk.Token.asString(this.getAtt('MapArn'));\n        this.attrUpdateTime = cdk.Token.asString(this.getAtt('UpdateTime'));\n\n        this.configuration = props.configuration;\n        this.mapName = props.mapName;\n        this.pricingPlan = props.pricingPlan;\n        this.description = props.description;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMap.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            configuration: this.configuration,\n            mapName: this.mapName,\n            pricingPlan: this.pricingPlan,\n            description: this.description,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMapPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnMap {\n                                                                                                                                                                                                                                                                             \n    export interface MapConfigurationProperty {\nn        readonly style: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MapConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `MapConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMap_MapConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('style', cdk.requiredValidator)(properties.style));\n    errors.collect(cdk.propertyValidator('style', cdk.validateString)(properties.style));\n    return errors.wrap('supplied properties not correct for \"MapConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Location::Map.MapConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `MapConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Location::Map.MapConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMapMapConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMap_MapConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Style: cdk.stringToCloudFormation(properties.style),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMapMapConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMap.MapConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMap.MapConfigurationProperty>();\n    ret.addPropertyResult('style', 'Style', cfn_parse.FromCloudFormation.getString(properties.Style));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                         \nexport interface CfnPlaceIndexProps {\n\nn    readonly dataSource: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly indexName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n    readonly pricingPlan: string;\n\n                                                                                                                                                                                                                                                       \n    readonly dataSourceConfiguration?: CfnPlaceIndex.DataSourceConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                         \n    readonly description?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPlaceIndexProps`\n *\n * @param properties - the TypeScript properties of a `CfnPlaceIndexProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPlaceIndexPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataSource', cdk.requiredValidator)(properties.dataSource));\n    errors.collect(cdk.propertyValidator('dataSource', cdk.validateString)(properties.dataSource));\n    errors.collect(cdk.propertyValidator('dataSourceConfiguration', CfnPlaceIndex_DataSourceConfigurationPropertyValidator)(properties.dataSourceConfiguration));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('indexName', cdk.requiredValidator)(properties.indexName));\n    errors.collect(cdk.propertyValidator('indexName', cdk.validateString)(properties.indexName));\n    errors.collect(cdk.propertyValidator('pricingPlan', cdk.requiredValidator)(properties.pricingPlan));\n    errors.collect(cdk.propertyValidator('pricingPlan', cdk.validateString)(properties.pricingPlan));\n    return errors.wrap('supplied properties not correct for \"CfnPlaceIndexProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Location::PlaceIndex` resource\n *\n * @param properties - the TypeScript properties of a `CfnPlaceIndexProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Location::PlaceIndex` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPlaceIndexPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPlaceIndexPropsValidator(properties).assertSuccess();\n    return {\n        DataSource: cdk.stringToCloudFormation(properties.dataSource),\n        IndexName: cdk.stringToCloudFormation(properties.indexName),\n        PricingPlan: cdk.stringToCloudFormation(properties.pricingPlan),\n        DataSourceConfiguration: cfnPlaceIndexDataSourceConfigurationPropertyToCloudFormation(properties.dataSourceConfiguration),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPlaceIndexPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPlaceIndexProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPlaceIndexProps>();\n    ret.addPropertyResult('dataSource', 'DataSource', cfn_parse.FromCloudFormation.getString(properties.DataSource));\n    ret.addPropertyResult('indexName', 'IndexName', cfn_parse.FromCloudFormation.getString(properties.IndexName));\n    ret.addPropertyResult('pricingPlan', 'PricingPlan', cfn_parse.FromCloudFormation.getString(properties.PricingPlan));\n    ret.addPropertyResult('dataSourceConfiguration', 'DataSourceConfiguration', properties.DataSourceConfiguration != null ? CfnPlaceIndexDataSourceConfigurationPropertyFromCloudFormation(properties.DataSourceConfiguration) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \nexport class CfnPlaceIndex extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Location::PlaceIndex\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPlaceIndex {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPlaceIndexPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPlaceIndex(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                             \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                    \n    public readonly attrCreateTime: string;\n\n                                                                                                                                                                                                                                                                                      \n    public readonly attrIndexArn: string;\n\n                                                                                                                                                                                                                                                                         \n    public readonly attrUpdateTime: string;\n\nn    public dataSource: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public indexName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public pricingPlan: string;\n\n                                                                                                                                                                                                                                                       \n    public dataSourceConfiguration: CfnPlaceIndex.DataSourceConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                         \n    public description: string | undefined;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnPlaceIndexProps) {\n        super(scope, id, { type: CfnPlaceIndex.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'dataSource', this);\n        cdk.requireProperty(props, 'indexName', this);\n        cdk.requireProperty(props, 'pricingPlan', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreateTime = cdk.Token.asString(this.getAtt('CreateTime'));\n        this.attrIndexArn = cdk.Token.asString(this.getAtt('IndexArn'));\n        this.attrUpdateTime = cdk.Token.asString(this.getAtt('UpdateTime'));\n\n        this.dataSource = props.dataSource;\n        this.indexName = props.indexName;\n        this.pricingPlan = props.pricingPlan;\n        this.dataSourceConfiguration = props.dataSourceConfiguration;\n        this.description = props.description;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPlaceIndex.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            dataSource: this.dataSource,\n            indexName: this.indexName,\n            pricingPlan: this.pricingPlan,\n            dataSourceConfiguration: this.dataSourceConfiguration,\n            description: this.description,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPlaceIndexPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnPlaceIndex {\n                                                                                                                                                                                                                                                                                  \n    export interface DataSourceConfigurationProperty {\nn        readonly intendedUse?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataSourceConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `DataSourceConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPlaceIndex_DataSourceConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('intendedUse', cdk.validateString)(properties.intendedUse));\n    return errors.wrap('supplied properties not correct for \"DataSourceConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Location::PlaceIndex.DataSourceConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `DataSourceConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Location::PlaceIndex.DataSourceConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPlaceIndexDataSourceConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPlaceIndex_DataSourceConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        IntendedUse: cdk.stringToCloudFormation(properties.intendedUse),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPlaceIndexDataSourceConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPlaceIndex.DataSourceConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPlaceIndex.DataSourceConfigurationProperty>();\n    ret.addPropertyResult('intendedUse', 'IntendedUse', properties.IntendedUse != null ? cfn_parse.FromCloudFormation.getString(properties.IntendedUse) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                   \nexport interface CfnRouteCalculatorProps {\n\nn    readonly calculatorName: string;\n\nn    readonly dataSource: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly pricingPlan: string;\n\n                                                                                                                                                                                                                                                        \n    readonly description?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRouteCalculatorProps`\n *\n * @param properties - the TypeScript properties of a `CfnRouteCalculatorProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRouteCalculatorPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('calculatorName', cdk.requiredValidator)(properties.calculatorName));\n    errors.collect(cdk.propertyValidator('calculatorName', cdk.validateString)(properties.calculatorName));\n    errors.collect(cdk.propertyValidator('dataSource', cdk.requiredValidator)(properties.dataSource));\n    errors.collect(cdk.propertyValidator('dataSource', cdk.validateString)(properties.dataSource));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('pricingPlan', cdk.requiredValidator)(properties.pricingPlan));\n    errors.collect(cdk.propertyValidator('pricingPlan', cdk.validateString)(properties.pricingPlan));\n    return errors.wrap('supplied properties not correct for \"CfnRouteCalculatorProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Location::RouteCalculator` resource\n *\n * @param properties - the TypeScript properties of a `CfnRouteCalculatorProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Location::RouteCalculator` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRouteCalculatorPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRouteCalculatorPropsValidator(properties).assertSuccess();\n    return {\n        CalculatorName: cdk.stringToCloudFormation(properties.calculatorName),\n        DataSource: cdk.stringToCloudFormation(properties.dataSource),\n        PricingPlan: cdk.stringToCloudFormation(properties.pricingPlan),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRouteCalculatorPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRouteCalculatorProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRouteCalculatorProps>();\n    ret.addPropertyResult('calculatorName', 'CalculatorName', cfn_parse.FromCloudFormation.getString(properties.CalculatorName));\n    ret.addPropertyResult('dataSource', 'DataSource', cfn_parse.FromCloudFormation.getString(properties.DataSource));\n    ret.addPropertyResult('pricingPlan', 'PricingPlan', cfn_parse.FromCloudFormation.getString(properties.PricingPlan));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnRouteCalculator extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Location::RouteCalculator\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRouteCalculator {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRouteCalculatorPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRouteCalculator(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                        \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                      \n    public readonly attrCalculatorArn: string;\n\n                                                                                                                                                                                                                                                                         \n    public readonly attrCreateTime: string;\n\n                                                                                                                                                                                                                                                                              \n    public readonly attrUpdateTime: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public calculatorName: string;\n\nn    public dataSource: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public pricingPlan: string;\n\n                                                                                                                                                                                                                                                        \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnRouteCalculatorProps) {\n        super(scope, id, { type: CfnRouteCalculator.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'calculatorName', this);\n        cdk.requireProperty(props, 'dataSource', this);\n        cdk.requireProperty(props, 'pricingPlan', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCalculatorArn = cdk.Token.asString(this.getAtt('CalculatorArn'));\n        this.attrCreateTime = cdk.Token.asString(this.getAtt('CreateTime'));\n        this.attrUpdateTime = cdk.Token.asString(this.getAtt('UpdateTime'));\n\n        this.calculatorName = props.calculatorName;\n        this.dataSource = props.dataSource;\n        this.pricingPlan = props.pricingPlan;\n        this.description = props.description;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRouteCalculator.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            calculatorName: this.calculatorName,\n            dataSource: this.dataSource,\n            pricingPlan: this.pricingPlan,\n            description: this.description,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRouteCalculatorPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                   \nexport interface CfnTrackerProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly pricingPlan: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly trackerName: string;\n\n                                                                                                                                                                                                                              \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    readonly kmsKeyId?: string;\n\nn    readonly positionFiltering?: string;\n\nn    readonly pricingPlanDataSource?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTrackerProps`\n *\n * @param properties - the TypeScript properties of a `CfnTrackerProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTrackerPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('positionFiltering', cdk.validateString)(properties.positionFiltering));\n    errors.collect(cdk.propertyValidator('pricingPlan', cdk.requiredValidator)(properties.pricingPlan));\n    errors.collect(cdk.propertyValidator('pricingPlan', cdk.validateString)(properties.pricingPlan));\n    errors.collect(cdk.propertyValidator('pricingPlanDataSource', cdk.validateString)(properties.pricingPlanDataSource));\n    errors.collect(cdk.propertyValidator('trackerName', cdk.requiredValidator)(properties.trackerName));\n    errors.collect(cdk.propertyValidator('trackerName', cdk.validateString)(properties.trackerName));\n    return errors.wrap('supplied properties not correct for \"CfnTrackerProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Location::Tracker` resource\n *\n * @param properties - the TypeScript properties of a `CfnTrackerProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Location::Tracker` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTrackerPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTrackerPropsValidator(properties).assertSuccess();\n    return {\n        PricingPlan: cdk.stringToCloudFormation(properties.pricingPlan),\n        TrackerName: cdk.stringToCloudFormation(properties.trackerName),\n        Description: cdk.stringToCloudFormation(properties.description),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        PositionFiltering: cdk.stringToCloudFormation(properties.positionFiltering),\n        PricingPlanDataSource: cdk.stringToCloudFormation(properties.pricingPlanDataSource),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTrackerPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTrackerProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTrackerProps>();\n    ret.addPropertyResult('pricingPlan', 'PricingPlan', cfn_parse.FromCloudFormation.getString(properties.PricingPlan));\n    ret.addPropertyResult('trackerName', 'TrackerName', cfn_parse.FromCloudFormation.getString(properties.TrackerName));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('positionFiltering', 'PositionFiltering', properties.PositionFiltering != null ? cfn_parse.FromCloudFormation.getString(properties.PositionFiltering) : undefined);\n    ret.addPropertyResult('pricingPlanDataSource', 'PricingPlanDataSource', properties.PricingPlanDataSource != null ? cfn_parse.FromCloudFormation.getString(properties.PricingPlanDataSource) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                               \nexport class CfnTracker extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Location::Tracker\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTracker {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTrackerPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTracker(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                    \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                \n    public readonly attrCreateTime: string;\n\n                                                                                                                                                                                                                                                                                               \n    public readonly attrTrackerArn: string;\n\n                                                                                                                                                                                                                                                                     \n    public readonly attrUpdateTime: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public pricingPlan: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public trackerName: string;\n\n                                                                                                                                                                                                                              \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                             \n    public kmsKeyId: string | undefined;\n\nn    public positionFiltering: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public pricingPlanDataSource: string | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnTrackerProps) {\n        super(scope, id, { type: CfnTracker.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'pricingPlan', this);\n        cdk.requireProperty(props, 'trackerName', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreateTime = cdk.Token.asString(this.getAtt('CreateTime'));\n        this.attrTrackerArn = cdk.Token.asString(this.getAtt('TrackerArn'));\n        this.attrUpdateTime = cdk.Token.asString(this.getAtt('UpdateTime'));\n\n        this.pricingPlan = props.pricingPlan;\n        this.trackerName = props.trackerName;\n        this.description = props.description;\n        this.kmsKeyId = props.kmsKeyId;\n        this.positionFiltering = props.positionFiltering;\n        this.pricingPlanDataSource = props.pricingPlanDataSource;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTracker.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            pricingPlan: this.pricingPlan,\n            trackerName: this.trackerName,\n            description: this.description,\n            kmsKeyId: this.kmsKeyId,\n            positionFiltering: this.positionFiltering,\n            pricingPlanDataSource: this.pricingPlanDataSource,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTrackerPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                   \nexport interface CfnTrackerConsumerProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly consumerArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly trackerName: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTrackerConsumerProps`\n *\n * @param properties - the TypeScript properties of a `CfnTrackerConsumerProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTrackerConsumerPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('consumerArn', cdk.requiredValidator)(properties.consumerArn));\n    errors.collect(cdk.propertyValidator('consumerArn', cdk.validateString)(properties.consumerArn));\n    errors.collect(cdk.propertyValidator('trackerName', cdk.requiredValidator)(properties.trackerName));\n    errors.collect(cdk.propertyValidator('trackerName', cdk.validateString)(properties.trackerName));\n    return errors.wrap('supplied properties not correct for \"CfnTrackerConsumerProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Location::TrackerConsumer` resource\n *\n * @param properties - the TypeScript properties of a `CfnTrackerConsumerProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Location::TrackerConsumer` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTrackerConsumerPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTrackerConsumerPropsValidator(properties).assertSuccess();\n    return {\n        ConsumerArn: cdk.stringToCloudFormation(properties.consumerArn),\n        TrackerName: cdk.stringToCloudFormation(properties.trackerName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTrackerConsumerPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTrackerConsumerProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTrackerConsumerProps>();\n    ret.addPropertyResult('consumerArn', 'ConsumerArn', cfn_parse.FromCloudFormation.getString(properties.ConsumerArn));\n    ret.addPropertyResult('trackerName', 'TrackerName', cfn_parse.FromCloudFormation.getString(properties.TrackerName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTrackerConsumer extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Location::TrackerConsumer\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTrackerConsumer {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTrackerConsumerPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTrackerConsumer(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public consumerArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public trackerName: string;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnTrackerConsumerProps) {\n        super(scope, id, { type: CfnTrackerConsumer.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'consumerArn', this);\n        cdk.requireProperty(props, 'trackerName', this);\n\n        this.consumerArn = props.consumerArn;\n        this.trackerName = props.trackerName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTrackerConsumer.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            consumerArn: this.consumerArn,\n            trackerName: this.trackerName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTrackerConsumerPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
