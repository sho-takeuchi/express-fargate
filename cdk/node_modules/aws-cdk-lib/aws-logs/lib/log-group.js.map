{
  "version": 3,
  "sources": ["log-group.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../aws-cloudwatch';\nimport * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport { ArnFormat, RemovalPolicy, Resource, Stack, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { LogStream } from './log-stream';\nimport { CfnLogGroup } from './logs.generated';\nimport { MetricFilter } from './metric-filter';\nimport { FilterPattern, IFilterPattern } from './pattern';\nimport { ResourcePolicy } from './policy';\nimport { ILogSubscriptionDestination, SubscriptionFilter } from './subscription-filter';\n\nexport interface ILogGroup extends iam.IResourceWithPolicy {\n                                                                                   \n  readonly logGroupArn: string;\n\n                                                           \n  readonly logGroupName: string;\n\n                                                                                                                                                                                         \n  addStream(id: string, props?: StreamOptions): LogStream;\n\n                                                                                                                                                                                                          \n  addSubscriptionFilter(id: string, props: SubscriptionFilterOptions): SubscriptionFilter;\n\n                                                                                                                                                                                              \n  addMetricFilter(id: string, props: MetricFilterOptions): MetricFilter;\n\nn  extractMetric(jsonField: string, metricNamespace: string, metricName: string): cloudwatch.Metric;\n\n                                                                                           \n  grantWrite(grantee: iam.IGrantable): iam.Grant;\n\n                                                                                 \n  grant(grantee: iam.IGrantable, ...actions: string[]): iam.Grant;\n\n                                                                         \n  logGroupPhysicalName(): string;\n}\n\n/**\n * An CloudWatch Log Group\n */\nabstract class LogGroupBase extends Resource implements ILogGroup {\n  /**\n   * The ARN of this log group, with ':*' appended\n   */\n  public abstract readonly logGroupArn: string;\n\n  /**\n   * The name of this log group\n   */\n  public abstract readonly logGroupName: string;\n\n\n  private policy?: ResourcePolicy;\n\n                                                                                                                                                                                         \n  public addStream(id: string, props: StreamOptions = {}): LogStream {\n    return new LogStream(this, id, {\n      logGroup: this,\n      ...props,\n    });\n  }\n\n                                                                                                                                                                                                          \n  public addSubscriptionFilter(id: string, props: SubscriptionFilterOptions): SubscriptionFilter {\n    return new SubscriptionFilter(this, id, {\n      logGroup: this,\n      ...props,\n    });\n  }\n\n                                                                                                                                                                                              \n  public addMetricFilter(id: string, props: MetricFilterOptions): MetricFilter {\n    return new MetricFilter(this, id, {\n      logGroup: this,\n      ...props,\n    });\n  }\n\nn  public extractMetric(jsonField: string, metricNamespace: string, metricName: string) {\n    new MetricFilter(this, `${metricNamespace}_${metricName}`, {\n      logGroup: this,\n      metricNamespace,\n      metricName,\n      filterPattern: FilterPattern.exists(jsonField),\n      metricValue: jsonField,\n    });\n\n    return new cloudwatch.Metric({ metricName, namespace: metricNamespace }).attachTo(this);\n  }\n\n                                                                                  \n  public grantWrite(grantee: iam.IGrantable) {\n    return this.grant(grantee, 'logs:CreateLogStream', 'logs:PutLogEvents');\n  }\n\n                                                                                 \n  public grant(grantee: iam.IGrantable, ...actions: string[]) {\n    return iam.Grant.addToPrincipalOrResource({\n      grantee,\n      actions,\n      // A LogGroup ARN out of CloudFormation already includes a ':*' at the end to include the log streams under the group.\n      // See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#w2ab1c21c10c63c43c11\n      resourceArns: [this.logGroupArn],\n      resource: this,\n    });\n  }\n\n                                                                                                                  \n  public logGroupPhysicalName(): string {\n    return this.physicalName;\n  }\n\n                                                                                                                                                                                                                                             \n  public addToResourcePolicy(statement: iam.PolicyStatement): iam.AddToResourcePolicyResult {\n    if (!this.policy) {\n      this.policy = new ResourcePolicy(this, 'Policy');\n    }\n    this.policy.document.addStatements(statement);\n    return { statementAdded: true, policyDependable: this.policy };\n  }\n}\n\n                                                                \nexport enum RetentionDays {\n                      \n  ONE_DAY = 1,\n\n                       \n  THREE_DAYS = 3,\n\n                       \n  FIVE_DAYS = 5,\n\n                       \n  ONE_WEEK = 7,\n\n                        \n  TWO_WEEKS = 14,\n\n                        \n  ONE_MONTH = 30,\n\n                         \n  TWO_MONTHS = 60,\n\n                         \n  THREE_MONTHS = 90,\n\n                         \n  FOUR_MONTHS = 120,\n\n                         \n  FIVE_MONTHS = 150,\n\n                         \n  SIX_MONTHS = 180,\n\n                       \n  ONE_YEAR = 365,\n\n                          \n  THIRTEEN_MONTHS = 400,\n\n                          \n  EIGHTEEN_MONTHS = 545,\n\n                        \n  TWO_YEARS = 731,\n\n                        \n  FIVE_YEARS = 1827,\n\n                         \n  TEN_YEARS = 3653,\n\n                                    \n  INFINITE = 9999,\n}\n\n                                    \nexport interface LogGroupProps {\n                                                                                                                                   \n  readonly encryptionKey?: kms.IKey;\n\n                                                                                  \n  readonly logGroupName?: string;\n\n                                                                                                                                                                                         \n  readonly retention?: RetentionDays;\n\n                                                                                                                                                                                                                                                                                                                                                              \n  readonly removalPolicy?: RemovalPolicy;\n}\n\n                                        \nexport class LogGroup extends LogGroupBase {\n                                                          \n  public static fromLogGroupArn(scope: Construct, id: string, logGroupArn: string): ILogGroup {\n    const baseLogGroupArn = logGroupArn.replace(/:\\*$/, '');\n\n    class Import extends LogGroupBase {\n      public readonly logGroupArn = `${baseLogGroupArn}:*`;\n      public readonly logGroupName = Stack.of(scope).splitArn(baseLogGroupArn, ArnFormat.COLON_RESOURCE_NAME).resourceName!;\n    }\n\n    return new Import(scope, id, {\n      environmentFromArn: baseLogGroupArn,\n    });\n  }\n\n                                                           \n  public static fromLogGroupName(scope: Construct, id: string, logGroupName: string): ILogGroup {\n    const baseLogGroupName = logGroupName.replace(/:\\*$/, '');\n\n    class Import extends LogGroupBase {\n      public readonly logGroupName = baseLogGroupName;\n      public readonly logGroupArn = Stack.of(scope).formatArn({\n        service: 'logs',\n        resource: 'log-group',\n        arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n        resourceName: baseLogGroupName + ':*',\n      });\n    }\n\n    return new Import(scope, id);\n  }\n\n                                          \n  public readonly logGroupArn: string;\n\n                                           \n  public readonly logGroupName: string;\n\n  constructor(scope: Construct, id: string, props: LogGroupProps = {}) {\n    super(scope, id, {\n      physicalName: props.logGroupName,\n    });\n\n    let retentionInDays = props.retention;\n    if (retentionInDays === undefined) { retentionInDays = RetentionDays.TWO_YEARS; }\n    if (retentionInDays === Infinity || retentionInDays === RetentionDays.INFINITE) { retentionInDays = undefined; }\n\n    if (retentionInDays !== undefined && !Token.isUnresolved(retentionInDays) && retentionInDays <= 0) {\n      throw new Error(`retentionInDays must be positive, got ${retentionInDays}`);\n    }\n\n    const resource = new CfnLogGroup(this, 'Resource', {\n      kmsKeyId: props.encryptionKey?.keyArn,\n      logGroupName: this.physicalName,\n      retentionInDays,\n    });\n\n    resource.applyRemovalPolicy(props.removalPolicy);\n\n    this.logGroupArn = this.getResourceArnAttribute(resource.attrArn, {\n      service: 'logs',\n      resource: 'log-group',\n      resourceName: this.physicalName,\n      arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n    });\n    this.logGroupName = this.getResourceNameAttribute(resource.ref);\n  }\n}\n\n                                                                 \nexport interface StreamOptions {\n                                                                                                                                                         \n  readonly logStreamName?: string;\n}\n\n                                                                          \nexport interface SubscriptionFilterOptions {\n                                                                                                                              \n  readonly destination: ILogSubscriptionDestination;\n\n                                                                                  \n  readonly filterPattern: IFilterPattern;\n}\n\n                                                                \nexport interface MetricFilterOptions {\n                                                  \n  readonly filterPattern: IFilterPattern;\n\n                                                     \n  readonly metricNamespace: string;\n\n                                                \n  readonly metricName: string;\n\nn  readonly metricValue?: string;\n\n                                                                                                                          \n  readonly defaultValue?: number;\n}\n"],
  "mappings": "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",
  "names": []
}
