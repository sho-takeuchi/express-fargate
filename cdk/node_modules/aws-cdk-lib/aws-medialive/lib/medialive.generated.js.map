{
  "version": 3,
  "sources": ["medialive.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:32.459Z\",\"fingerprint\":\"eNa88m4nlCqmXxMRbclKyQlg1iN0QoUrqNmYYMzLrWI=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                    \nexport interface CfnChannelProps {\n\n                                                                                                                                                                                                                                      \n    readonly cdiInputSpecification?: CfnChannel.CdiInputSpecificationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                   \n    readonly channelClass?: string;\n\n                                                                                                                                                                                                                                                                            \n    readonly destinations?: Array<CfnChannel.OutputDestinationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                     \n    readonly encoderSettings?: CfnChannel.EncoderSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                  \n    readonly inputAttachments?: Array<CfnChannel.InputAttachmentProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                        \n    readonly inputSpecification?: CfnChannel.InputSpecificationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                               \n    readonly logLevel?: string;\n\n                                                                                                                                                                                                                                                                                                                                       \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                             \n    readonly roleArn?: string;\n\n                                                                                                                                                                                                                                            \n    readonly tags?: any;\n\n                                                                                                                                                                                                                                                                         \n    readonly vpc?: CfnChannel.VpcOutputSettingsProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnChannelProps`\n *\n * @param properties - the TypeScript properties of a `CfnChannelProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannelPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cdiInputSpecification', CfnChannel_CdiInputSpecificationPropertyValidator)(properties.cdiInputSpecification));\n    errors.collect(cdk.propertyValidator('channelClass', cdk.validateString)(properties.channelClass));\n    errors.collect(cdk.propertyValidator('destinations', cdk.listValidator(CfnChannel_OutputDestinationPropertyValidator))(properties.destinations));\n    errors.collect(cdk.propertyValidator('encoderSettings', CfnChannel_EncoderSettingsPropertyValidator)(properties.encoderSettings));\n    errors.collect(cdk.propertyValidator('inputAttachments', cdk.listValidator(CfnChannel_InputAttachmentPropertyValidator))(properties.inputAttachments));\n    errors.collect(cdk.propertyValidator('inputSpecification', CfnChannel_InputSpecificationPropertyValidator)(properties.inputSpecification));\n    errors.collect(cdk.propertyValidator('logLevel', cdk.validateString)(properties.logLevel));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    errors.collect(cdk.propertyValidator('vpc', CfnChannel_VpcOutputSettingsPropertyValidator)(properties.vpc));\n    return errors.wrap('supplied properties not correct for \"CfnChannelProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel` resource\n *\n * @param properties - the TypeScript properties of a `CfnChannelProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannelPropsValidator(properties).assertSuccess();\n    return {\n        CdiInputSpecification: cfnChannelCdiInputSpecificationPropertyToCloudFormation(properties.cdiInputSpecification),\n        ChannelClass: cdk.stringToCloudFormation(properties.channelClass),\n        Destinations: cdk.listMapper(cfnChannelOutputDestinationPropertyToCloudFormation)(properties.destinations),\n        EncoderSettings: cfnChannelEncoderSettingsPropertyToCloudFormation(properties.encoderSettings),\n        InputAttachments: cdk.listMapper(cfnChannelInputAttachmentPropertyToCloudFormation)(properties.inputAttachments),\n        InputSpecification: cfnChannelInputSpecificationPropertyToCloudFormation(properties.inputSpecification),\n        LogLevel: cdk.stringToCloudFormation(properties.logLevel),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n        Vpc: cfnChannelVpcOutputSettingsPropertyToCloudFormation(properties.vpc),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannelProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannelProps>();\n    ret.addPropertyResult('cdiInputSpecification', 'CdiInputSpecification', properties.CdiInputSpecification != null ? CfnChannelCdiInputSpecificationPropertyFromCloudFormation(properties.CdiInputSpecification) : undefined);\n    ret.addPropertyResult('channelClass', 'ChannelClass', properties.ChannelClass != null ? cfn_parse.FromCloudFormation.getString(properties.ChannelClass) : undefined);\n    ret.addPropertyResult('destinations', 'Destinations', properties.Destinations != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelOutputDestinationPropertyFromCloudFormation)(properties.Destinations) : undefined);\n    ret.addPropertyResult('encoderSettings', 'EncoderSettings', properties.EncoderSettings != null ? CfnChannelEncoderSettingsPropertyFromCloudFormation(properties.EncoderSettings) : undefined);\n    ret.addPropertyResult('inputAttachments', 'InputAttachments', properties.InputAttachments != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelInputAttachmentPropertyFromCloudFormation)(properties.InputAttachments) : undefined);\n    ret.addPropertyResult('inputSpecification', 'InputSpecification', properties.InputSpecification != null ? CfnChannelInputSpecificationPropertyFromCloudFormation(properties.InputSpecification) : undefined);\n    ret.addPropertyResult('logLevel', 'LogLevel', properties.LogLevel != null ? cfn_parse.FromCloudFormation.getString(properties.LogLevel) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addPropertyResult('vpc', 'Vpc', properties.Vpc != null ? CfnChannelVpcOutputSettingsPropertyFromCloudFormation(properties.Vpc) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnChannel extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::MediaLive::Channel\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnChannel {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnChannelPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnChannel(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                            \n    public readonly attrArn: string;\n\n                                                                                                                                                                                      \n    public readonly attrInputs: string[];\n\n                                                                                                                                                                                                                                      \n    public cdiInputSpecification: CfnChannel.CdiInputSpecificationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                   \n    public channelClass: string | undefined;\n\n                                                                                                                                                                                                                                                                            \n    public destinations: Array<CfnChannel.OutputDestinationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                     \n    public encoderSettings: CfnChannel.EncoderSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                  \n    public inputAttachments: Array<CfnChannel.InputAttachmentProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                        \n    public inputSpecification: CfnChannel.InputSpecificationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                               \n    public logLevel: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                       \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                             \n    public roleArn: string | undefined;\n\n                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                         \n    public vpc: CfnChannel.VpcOutputSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnChannelProps = {}) {\n        super(scope, id, { type: CfnChannel.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrInputs = cdk.Token.asList(this.getAtt('Inputs'));\n\n        this.cdiInputSpecification = props.cdiInputSpecification;\n        this.channelClass = props.channelClass;\n        this.destinations = props.destinations;\n        this.encoderSettings = props.encoderSettings;\n        this.inputAttachments = props.inputAttachments;\n        this.inputSpecification = props.inputSpecification;\n        this.logLevel = props.logLevel;\n        this.name = props.name;\n        this.roleArn = props.roleArn;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::MediaLive::Channel\", props.tags, { tagPropertyName: 'tags' });\n        this.vpc = props.vpc;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnChannel.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            cdiInputSpecification: this.cdiInputSpecification,\n            channelClass: this.channelClass,\n            destinations: this.destinations,\n            encoderSettings: this.encoderSettings,\n            inputAttachments: this.inputAttachments,\n            inputSpecification: this.inputSpecification,\n            logLevel: this.logLevel,\n            name: this.name,\n            roleArn: this.roleArn,\n            tags: this.tags.renderTags(),\n            vpc: this.vpc,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnChannelPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                              \n    export interface AacSettingsProperty {\n                                                                                                                                                                                                                                                                                                                      \n        readonly bitrate?: number;\nn        readonly codingMode?: string;\nn        readonly inputType?: string;\n                                                                                                                                                                                                                                         \n        readonly profile?: string;\n                                                                                                                                                                                                                                                       \n        readonly rateControlMode?: string;\n                                                                                                                                                                                                                                                                            \n        readonly rawFormat?: string;\n                                                                                                                                                                                                                                                                                                            \n        readonly sampleRate?: number;\n                                                                                                                                                                                                                                                                                                                      \n        readonly spec?: string;\n                                                                                                                                                                                                                                                                                               \n        readonly vbrQuality?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AacSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AacSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AacSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));\n    errors.collect(cdk.propertyValidator('codingMode', cdk.validateString)(properties.codingMode));\n    errors.collect(cdk.propertyValidator('inputType', cdk.validateString)(properties.inputType));\n    errors.collect(cdk.propertyValidator('profile', cdk.validateString)(properties.profile));\n    errors.collect(cdk.propertyValidator('rateControlMode', cdk.validateString)(properties.rateControlMode));\n    errors.collect(cdk.propertyValidator('rawFormat', cdk.validateString)(properties.rawFormat));\n    errors.collect(cdk.propertyValidator('sampleRate', cdk.validateNumber)(properties.sampleRate));\n    errors.collect(cdk.propertyValidator('spec', cdk.validateString)(properties.spec));\n    errors.collect(cdk.propertyValidator('vbrQuality', cdk.validateString)(properties.vbrQuality));\n    return errors.wrap('supplied properties not correct for \"AacSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AacSettings` resource\n *\n * @param properties - the TypeScript properties of a `AacSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AacSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAacSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AacSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Bitrate: cdk.numberToCloudFormation(properties.bitrate),\n        CodingMode: cdk.stringToCloudFormation(properties.codingMode),\n        InputType: cdk.stringToCloudFormation(properties.inputType),\n        Profile: cdk.stringToCloudFormation(properties.profile),\n        RateControlMode: cdk.stringToCloudFormation(properties.rateControlMode),\n        RawFormat: cdk.stringToCloudFormation(properties.rawFormat),\n        SampleRate: cdk.numberToCloudFormation(properties.sampleRate),\n        Spec: cdk.stringToCloudFormation(properties.spec),\n        VbrQuality: cdk.stringToCloudFormation(properties.vbrQuality),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAacSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AacSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AacSettingsProperty>();\n    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);\n    ret.addPropertyResult('codingMode', 'CodingMode', properties.CodingMode != null ? cfn_parse.FromCloudFormation.getString(properties.CodingMode) : undefined);\n    ret.addPropertyResult('inputType', 'InputType', properties.InputType != null ? cfn_parse.FromCloudFormation.getString(properties.InputType) : undefined);\n    ret.addPropertyResult('profile', 'Profile', properties.Profile != null ? cfn_parse.FromCloudFormation.getString(properties.Profile) : undefined);\n    ret.addPropertyResult('rateControlMode', 'RateControlMode', properties.RateControlMode != null ? cfn_parse.FromCloudFormation.getString(properties.RateControlMode) : undefined);\n    ret.addPropertyResult('rawFormat', 'RawFormat', properties.RawFormat != null ? cfn_parse.FromCloudFormation.getString(properties.RawFormat) : undefined);\n    ret.addPropertyResult('sampleRate', 'SampleRate', properties.SampleRate != null ? cfn_parse.FromCloudFormation.getNumber(properties.SampleRate) : undefined);\n    ret.addPropertyResult('spec', 'Spec', properties.Spec != null ? cfn_parse.FromCloudFormation.getString(properties.Spec) : undefined);\n    ret.addPropertyResult('vbrQuality', 'VbrQuality', properties.VbrQuality != null ? cfn_parse.FromCloudFormation.getString(properties.VbrQuality) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                              \n    export interface Ac3SettingsProperty {\n                                                                                                                                                                                                                                                                                                      \n        readonly bitrate?: number;\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly bitstreamMode?: string;\n                                                                                                                                                                                                                                                                                                  \n        readonly codingMode?: string;\n                                                                                                                                                                                                                                                                                                                                         \n        readonly dialnorm?: number;\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly drcProfile?: string;\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly lfeFilter?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly metadataControl?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Ac3SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `Ac3SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Ac3SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));\n    errors.collect(cdk.propertyValidator('bitstreamMode', cdk.validateString)(properties.bitstreamMode));\n    errors.collect(cdk.propertyValidator('codingMode', cdk.validateString)(properties.codingMode));\n    errors.collect(cdk.propertyValidator('dialnorm', cdk.validateNumber)(properties.dialnorm));\n    errors.collect(cdk.propertyValidator('drcProfile', cdk.validateString)(properties.drcProfile));\n    errors.collect(cdk.propertyValidator('lfeFilter', cdk.validateString)(properties.lfeFilter));\n    errors.collect(cdk.propertyValidator('metadataControl', cdk.validateString)(properties.metadataControl));\n    return errors.wrap('supplied properties not correct for \"Ac3SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Ac3Settings` resource\n *\n * @param properties - the TypeScript properties of a `Ac3SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Ac3Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAc3SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Ac3SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Bitrate: cdk.numberToCloudFormation(properties.bitrate),\n        BitstreamMode: cdk.stringToCloudFormation(properties.bitstreamMode),\n        CodingMode: cdk.stringToCloudFormation(properties.codingMode),\n        Dialnorm: cdk.numberToCloudFormation(properties.dialnorm),\n        DrcProfile: cdk.stringToCloudFormation(properties.drcProfile),\n        LfeFilter: cdk.stringToCloudFormation(properties.lfeFilter),\n        MetadataControl: cdk.stringToCloudFormation(properties.metadataControl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAc3SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Ac3SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Ac3SettingsProperty>();\n    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);\n    ret.addPropertyResult('bitstreamMode', 'BitstreamMode', properties.BitstreamMode != null ? cfn_parse.FromCloudFormation.getString(properties.BitstreamMode) : undefined);\n    ret.addPropertyResult('codingMode', 'CodingMode', properties.CodingMode != null ? cfn_parse.FromCloudFormation.getString(properties.CodingMode) : undefined);\n    ret.addPropertyResult('dialnorm', 'Dialnorm', properties.Dialnorm != null ? cfn_parse.FromCloudFormation.getNumber(properties.Dialnorm) : undefined);\n    ret.addPropertyResult('drcProfile', 'DrcProfile', properties.DrcProfile != null ? cfn_parse.FromCloudFormation.getString(properties.DrcProfile) : undefined);\n    ret.addPropertyResult('lfeFilter', 'LfeFilter', properties.LfeFilter != null ? cfn_parse.FromCloudFormation.getString(properties.LfeFilter) : undefined);\n    ret.addPropertyResult('metadataControl', 'MetadataControl', properties.MetadataControl != null ? cfn_parse.FromCloudFormation.getString(properties.MetadataControl) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                               \n    export interface AncillarySourceSettingsProperty {\nn        readonly sourceAncillaryChannelNumber?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AncillarySourceSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AncillarySourceSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AncillarySourceSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('sourceAncillaryChannelNumber', cdk.validateNumber)(properties.sourceAncillaryChannelNumber));\n    return errors.wrap('supplied properties not correct for \"AncillarySourceSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AncillarySourceSettings` resource\n *\n * @param properties - the TypeScript properties of a `AncillarySourceSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AncillarySourceSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAncillarySourceSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AncillarySourceSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        SourceAncillaryChannelNumber: cdk.numberToCloudFormation(properties.sourceAncillaryChannelNumber),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAncillarySourceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AncillarySourceSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AncillarySourceSettingsProperty>();\n    ret.addPropertyResult('sourceAncillaryChannelNumber', 'SourceAncillaryChannelNumber', properties.SourceAncillaryChannelNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.SourceAncillaryChannelNumber) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                               \n    export interface ArchiveCdnSettingsProperty {\n                                                                                                                                                                                                                                                                                                              \n        readonly archiveS3Settings?: CfnChannel.ArchiveS3SettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ArchiveCdnSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `ArchiveCdnSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_ArchiveCdnSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('archiveS3Settings', CfnChannel_ArchiveS3SettingsPropertyValidator)(properties.archiveS3Settings));\n    return errors.wrap('supplied properties not correct for \"ArchiveCdnSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveCdnSettings` resource\n *\n * @param properties - the TypeScript properties of a `ArchiveCdnSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveCdnSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelArchiveCdnSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_ArchiveCdnSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ArchiveS3Settings: cfnChannelArchiveS3SettingsPropertyToCloudFormation(properties.archiveS3Settings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelArchiveCdnSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.ArchiveCdnSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.ArchiveCdnSettingsProperty>();\n    ret.addPropertyResult('archiveS3Settings', 'ArchiveS3Settings', properties.ArchiveS3Settings != null ? CfnChannelArchiveS3SettingsPropertyFromCloudFormation(properties.ArchiveS3Settings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                          \n    export interface ArchiveContainerSettingsProperty {\n                                                                                                                                                                                                                                                                                                        \n        readonly m2TsSettings?: CfnChannel.M2tsSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                \n        readonly rawSettings?: CfnChannel.RawSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ArchiveContainerSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `ArchiveContainerSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_ArchiveContainerSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('m2TsSettings', CfnChannel_M2tsSettingsPropertyValidator)(properties.m2TsSettings));\n    errors.collect(cdk.propertyValidator('rawSettings', CfnChannel_RawSettingsPropertyValidator)(properties.rawSettings));\n    return errors.wrap('supplied properties not correct for \"ArchiveContainerSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveContainerSettings` resource\n *\n * @param properties - the TypeScript properties of a `ArchiveContainerSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveContainerSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelArchiveContainerSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_ArchiveContainerSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        M2tsSettings: cfnChannelM2tsSettingsPropertyToCloudFormation(properties.m2TsSettings),\n        RawSettings: cfnChannelRawSettingsPropertyToCloudFormation(properties.rawSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelArchiveContainerSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.ArchiveContainerSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.ArchiveContainerSettingsProperty>();\n    ret.addPropertyResult('m2TsSettings', 'M2tsSettings', properties.M2tsSettings != null ? CfnChannelM2tsSettingsPropertyFromCloudFormation(properties.M2tsSettings) : undefined);\n    ret.addPropertyResult('rawSettings', 'RawSettings', properties.RawSettings != null ? CfnChannelRawSettingsPropertyFromCloudFormation(properties.RawSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                              \n    export interface ArchiveGroupSettingsProperty {\n                                                                                                                                                                                                                                                                                                                 \n        readonly archiveCdnSettings?: CfnChannel.ArchiveCdnSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                    \n        readonly destination?: CfnChannel.OutputLocationRefProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly rolloverInterval?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ArchiveGroupSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `ArchiveGroupSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_ArchiveGroupSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('archiveCdnSettings', CfnChannel_ArchiveCdnSettingsPropertyValidator)(properties.archiveCdnSettings));\n    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('rolloverInterval', cdk.validateNumber)(properties.rolloverInterval));\n    return errors.wrap('supplied properties not correct for \"ArchiveGroupSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveGroupSettings` resource\n *\n * @param properties - the TypeScript properties of a `ArchiveGroupSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveGroupSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelArchiveGroupSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_ArchiveGroupSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ArchiveCdnSettings: cfnChannelArchiveCdnSettingsPropertyToCloudFormation(properties.archiveCdnSettings),\n        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),\n        RolloverInterval: cdk.numberToCloudFormation(properties.rolloverInterval),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelArchiveGroupSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.ArchiveGroupSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.ArchiveGroupSettingsProperty>();\n    ret.addPropertyResult('archiveCdnSettings', 'ArchiveCdnSettings', properties.ArchiveCdnSettings != null ? CfnChannelArchiveCdnSettingsPropertyFromCloudFormation(properties.ArchiveCdnSettings) : undefined);\n    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);\n    ret.addPropertyResult('rolloverInterval', 'RolloverInterval', properties.RolloverInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.RolloverInterval) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                             \n    export interface ArchiveOutputSettingsProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly containerSettings?: CfnChannel.ArchiveContainerSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly extension?: string;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly nameModifier?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ArchiveOutputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `ArchiveOutputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_ArchiveOutputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerSettings', CfnChannel_ArchiveContainerSettingsPropertyValidator)(properties.containerSettings));\n    errors.collect(cdk.propertyValidator('extension', cdk.validateString)(properties.extension));\n    errors.collect(cdk.propertyValidator('nameModifier', cdk.validateString)(properties.nameModifier));\n    return errors.wrap('supplied properties not correct for \"ArchiveOutputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveOutputSettings` resource\n *\n * @param properties - the TypeScript properties of a `ArchiveOutputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveOutputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelArchiveOutputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_ArchiveOutputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerSettings: cfnChannelArchiveContainerSettingsPropertyToCloudFormation(properties.containerSettings),\n        Extension: cdk.stringToCloudFormation(properties.extension),\n        NameModifier: cdk.stringToCloudFormation(properties.nameModifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelArchiveOutputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.ArchiveOutputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.ArchiveOutputSettingsProperty>();\n    ret.addPropertyResult('containerSettings', 'ContainerSettings', properties.ContainerSettings != null ? CfnChannelArchiveContainerSettingsPropertyFromCloudFormation(properties.ContainerSettings) : undefined);\n    ret.addPropertyResult('extension', 'Extension', properties.Extension != null ? cfn_parse.FromCloudFormation.getString(properties.Extension) : undefined);\n    ret.addPropertyResult('nameModifier', 'NameModifier', properties.NameModifier != null ? cfn_parse.FromCloudFormation.getString(properties.NameModifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                              \n    export interface ArchiveS3SettingsProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly cannedAcl?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ArchiveS3SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `ArchiveS3SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_ArchiveS3SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cannedAcl', cdk.validateString)(properties.cannedAcl));\n    return errors.wrap('supplied properties not correct for \"ArchiveS3SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveS3Settings` resource\n *\n * @param properties - the TypeScript properties of a `ArchiveS3SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ArchiveS3Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelArchiveS3SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_ArchiveS3SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        CannedAcl: cdk.stringToCloudFormation(properties.cannedAcl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelArchiveS3SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.ArchiveS3SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.ArchiveS3SettingsProperty>();\n    ret.addPropertyResult('cannedAcl', 'CannedAcl', properties.CannedAcl != null ? cfn_parse.FromCloudFormation.getString(properties.CannedAcl) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                \n    export interface AribDestinationSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AribDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AribDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AribDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"AribDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AribDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `AribDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AribDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAribDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AribDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAribDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AribDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AribDestinationSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                     \n    export interface AribSourceSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AribSourceSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AribSourceSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AribSourceSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"AribSourceSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AribSourceSettings` resource\n *\n * @param properties - the TypeScript properties of a `AribSourceSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AribSourceSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAribSourceSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AribSourceSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAribSourceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AribSourceSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AribSourceSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                              \n    export interface AudioChannelMappingProperty {\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly inputChannelLevels?: Array<CfnChannel.InputChannelLevelProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                      \n        readonly outputChannel?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioChannelMappingProperty`\n *\n * @param properties - the TypeScript properties of a `AudioChannelMappingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioChannelMappingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('inputChannelLevels', cdk.listValidator(CfnChannel_InputChannelLevelPropertyValidator))(properties.inputChannelLevels));\n    errors.collect(cdk.propertyValidator('outputChannel', cdk.validateNumber)(properties.outputChannel));\n    return errors.wrap('supplied properties not correct for \"AudioChannelMappingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioChannelMapping` resource\n *\n * @param properties - the TypeScript properties of a `AudioChannelMappingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioChannelMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioChannelMappingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioChannelMappingPropertyValidator(properties).assertSuccess();\n    return {\n        InputChannelLevels: cdk.listMapper(cfnChannelInputChannelLevelPropertyToCloudFormation)(properties.inputChannelLevels),\n        OutputChannel: cdk.numberToCloudFormation(properties.outputChannel),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioChannelMappingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioChannelMappingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioChannelMappingProperty>();\n    ret.addPropertyResult('inputChannelLevels', 'InputChannelLevels', properties.InputChannelLevels != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelInputChannelLevelPropertyFromCloudFormation)(properties.InputChannelLevels) : undefined);\n    ret.addPropertyResult('outputChannel', 'OutputChannel', properties.OutputChannel != null ? cfn_parse.FromCloudFormation.getNumber(properties.OutputChannel) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                         \n    export interface AudioCodecSettingsProperty {\n                                                                                                                                                                                                                                                                                          \n        readonly aacSettings?: CfnChannel.AacSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly ac3Settings?: CfnChannel.Ac3SettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                           \n        readonly eac3Settings?: CfnChannel.Eac3SettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly mp2Settings?: CfnChannel.Mp2SettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly passThroughSettings?: CfnChannel.PassThroughSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly wavSettings?: CfnChannel.WavSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioCodecSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AudioCodecSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioCodecSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('aacSettings', CfnChannel_AacSettingsPropertyValidator)(properties.aacSettings));\n    errors.collect(cdk.propertyValidator('ac3Settings', CfnChannel_Ac3SettingsPropertyValidator)(properties.ac3Settings));\n    errors.collect(cdk.propertyValidator('eac3Settings', CfnChannel_Eac3SettingsPropertyValidator)(properties.eac3Settings));\n    errors.collect(cdk.propertyValidator('mp2Settings', CfnChannel_Mp2SettingsPropertyValidator)(properties.mp2Settings));\n    errors.collect(cdk.propertyValidator('passThroughSettings', CfnChannel_PassThroughSettingsPropertyValidator)(properties.passThroughSettings));\n    errors.collect(cdk.propertyValidator('wavSettings', CfnChannel_WavSettingsPropertyValidator)(properties.wavSettings));\n    return errors.wrap('supplied properties not correct for \"AudioCodecSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioCodecSettings` resource\n *\n * @param properties - the TypeScript properties of a `AudioCodecSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioCodecSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioCodecSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioCodecSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AacSettings: cfnChannelAacSettingsPropertyToCloudFormation(properties.aacSettings),\n        Ac3Settings: cfnChannelAc3SettingsPropertyToCloudFormation(properties.ac3Settings),\n        Eac3Settings: cfnChannelEac3SettingsPropertyToCloudFormation(properties.eac3Settings),\n        Mp2Settings: cfnChannelMp2SettingsPropertyToCloudFormation(properties.mp2Settings),\n        PassThroughSettings: cfnChannelPassThroughSettingsPropertyToCloudFormation(properties.passThroughSettings),\n        WavSettings: cfnChannelWavSettingsPropertyToCloudFormation(properties.wavSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioCodecSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioCodecSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioCodecSettingsProperty>();\n    ret.addPropertyResult('aacSettings', 'AacSettings', properties.AacSettings != null ? CfnChannelAacSettingsPropertyFromCloudFormation(properties.AacSettings) : undefined);\n    ret.addPropertyResult('ac3Settings', 'Ac3Settings', properties.Ac3Settings != null ? CfnChannelAc3SettingsPropertyFromCloudFormation(properties.Ac3Settings) : undefined);\n    ret.addPropertyResult('eac3Settings', 'Eac3Settings', properties.Eac3Settings != null ? CfnChannelEac3SettingsPropertyFromCloudFormation(properties.Eac3Settings) : undefined);\n    ret.addPropertyResult('mp2Settings', 'Mp2Settings', properties.Mp2Settings != null ? CfnChannelMp2SettingsPropertyFromCloudFormation(properties.Mp2Settings) : undefined);\n    ret.addPropertyResult('passThroughSettings', 'PassThroughSettings', properties.PassThroughSettings != null ? CfnChannelPassThroughSettingsPropertyFromCloudFormation(properties.PassThroughSettings) : undefined);\n    ret.addPropertyResult('wavSettings', 'WavSettings', properties.WavSettings != null ? CfnChannelWavSettingsPropertyFromCloudFormation(properties.WavSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                           \n    export interface AudioDescriptionProperty {\n                                                                                                                                                                                                                                                                                                \n        readonly audioNormalizationSettings?: CfnChannel.AudioNormalizationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                \n        readonly audioSelectorName?: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly audioType?: string;\nn        readonly audioTypeControl?: string;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly audioWatermarkingSettings?: CfnChannel.AudioWatermarkSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                  \n        readonly codecSettings?: CfnChannel.AudioCodecSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly languageCode?: string;\nn        readonly languageCodeControl?: string;\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly remixSettings?: CfnChannel.RemixSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly streamName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioDescriptionProperty`\n *\n * @param properties - the TypeScript properties of a `AudioDescriptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioDescriptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audioNormalizationSettings', CfnChannel_AudioNormalizationSettingsPropertyValidator)(properties.audioNormalizationSettings));\n    errors.collect(cdk.propertyValidator('audioSelectorName', cdk.validateString)(properties.audioSelectorName));\n    errors.collect(cdk.propertyValidator('audioType', cdk.validateString)(properties.audioType));\n    errors.collect(cdk.propertyValidator('audioTypeControl', cdk.validateString)(properties.audioTypeControl));\n    errors.collect(cdk.propertyValidator('audioWatermarkingSettings', CfnChannel_AudioWatermarkSettingsPropertyValidator)(properties.audioWatermarkingSettings));\n    errors.collect(cdk.propertyValidator('codecSettings', CfnChannel_AudioCodecSettingsPropertyValidator)(properties.codecSettings));\n    errors.collect(cdk.propertyValidator('languageCode', cdk.validateString)(properties.languageCode));\n    errors.collect(cdk.propertyValidator('languageCodeControl', cdk.validateString)(properties.languageCodeControl));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('remixSettings', CfnChannel_RemixSettingsPropertyValidator)(properties.remixSettings));\n    errors.collect(cdk.propertyValidator('streamName', cdk.validateString)(properties.streamName));\n    return errors.wrap('supplied properties not correct for \"AudioDescriptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioDescription` resource\n *\n * @param properties - the TypeScript properties of a `AudioDescriptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioDescription` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioDescriptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioDescriptionPropertyValidator(properties).assertSuccess();\n    return {\n        AudioNormalizationSettings: cfnChannelAudioNormalizationSettingsPropertyToCloudFormation(properties.audioNormalizationSettings),\n        AudioSelectorName: cdk.stringToCloudFormation(properties.audioSelectorName),\n        AudioType: cdk.stringToCloudFormation(properties.audioType),\n        AudioTypeControl: cdk.stringToCloudFormation(properties.audioTypeControl),\n        AudioWatermarkingSettings: cfnChannelAudioWatermarkSettingsPropertyToCloudFormation(properties.audioWatermarkingSettings),\n        CodecSettings: cfnChannelAudioCodecSettingsPropertyToCloudFormation(properties.codecSettings),\n        LanguageCode: cdk.stringToCloudFormation(properties.languageCode),\n        LanguageCodeControl: cdk.stringToCloudFormation(properties.languageCodeControl),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RemixSettings: cfnChannelRemixSettingsPropertyToCloudFormation(properties.remixSettings),\n        StreamName: cdk.stringToCloudFormation(properties.streamName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioDescriptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioDescriptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioDescriptionProperty>();\n    ret.addPropertyResult('audioNormalizationSettings', 'AudioNormalizationSettings', properties.AudioNormalizationSettings != null ? CfnChannelAudioNormalizationSettingsPropertyFromCloudFormation(properties.AudioNormalizationSettings) : undefined);\n    ret.addPropertyResult('audioSelectorName', 'AudioSelectorName', properties.AudioSelectorName != null ? cfn_parse.FromCloudFormation.getString(properties.AudioSelectorName) : undefined);\n    ret.addPropertyResult('audioType', 'AudioType', properties.AudioType != null ? cfn_parse.FromCloudFormation.getString(properties.AudioType) : undefined);\n    ret.addPropertyResult('audioTypeControl', 'AudioTypeControl', properties.AudioTypeControl != null ? cfn_parse.FromCloudFormation.getString(properties.AudioTypeControl) : undefined);\n    ret.addPropertyResult('audioWatermarkingSettings', 'AudioWatermarkingSettings', properties.AudioWatermarkingSettings != null ? CfnChannelAudioWatermarkSettingsPropertyFromCloudFormation(properties.AudioWatermarkingSettings) : undefined);\n    ret.addPropertyResult('codecSettings', 'CodecSettings', properties.CodecSettings != null ? CfnChannelAudioCodecSettingsPropertyFromCloudFormation(properties.CodecSettings) : undefined);\n    ret.addPropertyResult('languageCode', 'LanguageCode', properties.LanguageCode != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageCode) : undefined);\n    ret.addPropertyResult('languageCodeControl', 'LanguageCodeControl', properties.LanguageCodeControl != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageCodeControl) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('remixSettings', 'RemixSettings', properties.RemixSettings != null ? CfnChannelRemixSettingsPropertyFromCloudFormation(properties.RemixSettings) : undefined);\n    ret.addPropertyResult('streamName', 'StreamName', properties.StreamName != null ? cfn_parse.FromCloudFormation.getString(properties.StreamName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                              \n    export interface AudioHlsRenditionSelectionProperty {\n                                                                                                                                                                                                                                                                                                                                        \n        readonly groupId?: string;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioHlsRenditionSelectionProperty`\n *\n * @param properties - the TypeScript properties of a `AudioHlsRenditionSelectionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioHlsRenditionSelectionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('groupId', cdk.validateString)(properties.groupId));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"AudioHlsRenditionSelectionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioHlsRenditionSelection` resource\n *\n * @param properties - the TypeScript properties of a `AudioHlsRenditionSelectionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioHlsRenditionSelection` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioHlsRenditionSelectionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioHlsRenditionSelectionPropertyValidator(properties).assertSuccess();\n    return {\n        GroupId: cdk.stringToCloudFormation(properties.groupId),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioHlsRenditionSelectionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioHlsRenditionSelectionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioHlsRenditionSelectionProperty>();\n    ret.addPropertyResult('groupId', 'GroupId', properties.GroupId != null ? cfn_parse.FromCloudFormation.getString(properties.GroupId) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                         \n    export interface AudioLanguageSelectionProperty {\n                                                                                                                                                                                                                                                                                                                              \n        readonly languageCode?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly languageSelectionPolicy?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioLanguageSelectionProperty`\n *\n * @param properties - the TypeScript properties of a `AudioLanguageSelectionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioLanguageSelectionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('languageCode', cdk.validateString)(properties.languageCode));\n    errors.collect(cdk.propertyValidator('languageSelectionPolicy', cdk.validateString)(properties.languageSelectionPolicy));\n    return errors.wrap('supplied properties not correct for \"AudioLanguageSelectionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioLanguageSelection` resource\n *\n * @param properties - the TypeScript properties of a `AudioLanguageSelectionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioLanguageSelection` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioLanguageSelectionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioLanguageSelectionPropertyValidator(properties).assertSuccess();\n    return {\n        LanguageCode: cdk.stringToCloudFormation(properties.languageCode),\n        LanguageSelectionPolicy: cdk.stringToCloudFormation(properties.languageSelectionPolicy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioLanguageSelectionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioLanguageSelectionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioLanguageSelectionProperty>();\n    ret.addPropertyResult('languageCode', 'LanguageCode', properties.LanguageCode != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageCode) : undefined);\n    ret.addPropertyResult('languageSelectionPolicy', 'LanguageSelectionPolicy', properties.LanguageSelectionPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageSelectionPolicy) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                           \n    export interface AudioNormalizationSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly algorithm?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly algorithmControl?: string;\nn        readonly targetLkfs?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioNormalizationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AudioNormalizationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioNormalizationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('algorithm', cdk.validateString)(properties.algorithm));\n    errors.collect(cdk.propertyValidator('algorithmControl', cdk.validateString)(properties.algorithmControl));\n    errors.collect(cdk.propertyValidator('targetLkfs', cdk.validateNumber)(properties.targetLkfs));\n    return errors.wrap('supplied properties not correct for \"AudioNormalizationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioNormalizationSettings` resource\n *\n * @param properties - the TypeScript properties of a `AudioNormalizationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioNormalizationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioNormalizationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioNormalizationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Algorithm: cdk.stringToCloudFormation(properties.algorithm),\n        AlgorithmControl: cdk.stringToCloudFormation(properties.algorithmControl),\n        TargetLkfs: cdk.numberToCloudFormation(properties.targetLkfs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioNormalizationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioNormalizationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioNormalizationSettingsProperty>();\n    ret.addPropertyResult('algorithm', 'Algorithm', properties.Algorithm != null ? cfn_parse.FromCloudFormation.getString(properties.Algorithm) : undefined);\n    ret.addPropertyResult('algorithmControl', 'AlgorithmControl', properties.AlgorithmControl != null ? cfn_parse.FromCloudFormation.getString(properties.AlgorithmControl) : undefined);\n    ret.addPropertyResult('targetLkfs', 'TargetLkfs', properties.TargetLkfs != null ? cfn_parse.FromCloudFormation.getNumber(properties.TargetLkfs) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                           \n    export interface AudioOnlyHlsSettingsProperty {\n                                                                                                                                                                                                                                                                                                        \n        readonly audioGroupId?: string;\nn        readonly audioOnlyImage?: CfnChannel.InputLocationProperty | cdk.IResolvable;\nn        readonly audioTrackType?: string;\n                                                                                                                                                                                                                                                                          \n        readonly segmentType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioOnlyHlsSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AudioOnlyHlsSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioOnlyHlsSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audioGroupId', cdk.validateString)(properties.audioGroupId));\n    errors.collect(cdk.propertyValidator('audioOnlyImage', CfnChannel_InputLocationPropertyValidator)(properties.audioOnlyImage));\n    errors.collect(cdk.propertyValidator('audioTrackType', cdk.validateString)(properties.audioTrackType));\n    errors.collect(cdk.propertyValidator('segmentType', cdk.validateString)(properties.segmentType));\n    return errors.wrap('supplied properties not correct for \"AudioOnlyHlsSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioOnlyHlsSettings` resource\n *\n * @param properties - the TypeScript properties of a `AudioOnlyHlsSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioOnlyHlsSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioOnlyHlsSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioOnlyHlsSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AudioGroupId: cdk.stringToCloudFormation(properties.audioGroupId),\n        AudioOnlyImage: cfnChannelInputLocationPropertyToCloudFormation(properties.audioOnlyImage),\n        AudioTrackType: cdk.stringToCloudFormation(properties.audioTrackType),\n        SegmentType: cdk.stringToCloudFormation(properties.segmentType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioOnlyHlsSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioOnlyHlsSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioOnlyHlsSettingsProperty>();\n    ret.addPropertyResult('audioGroupId', 'AudioGroupId', properties.AudioGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.AudioGroupId) : undefined);\n    ret.addPropertyResult('audioOnlyImage', 'AudioOnlyImage', properties.AudioOnlyImage != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.AudioOnlyImage) : undefined);\n    ret.addPropertyResult('audioTrackType', 'AudioTrackType', properties.AudioTrackType != null ? cfn_parse.FromCloudFormation.getString(properties.AudioTrackType) : undefined);\n    ret.addPropertyResult('segmentType', 'SegmentType', properties.SegmentType != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                     \n    export interface AudioPidSelectionProperty {\n                                                                                                                                                                                                                                                              \n        readonly pid?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioPidSelectionProperty`\n *\n * @param properties - the TypeScript properties of a `AudioPidSelectionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioPidSelectionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('pid', cdk.validateNumber)(properties.pid));\n    return errors.wrap('supplied properties not correct for \"AudioPidSelectionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioPidSelection` resource\n *\n * @param properties - the TypeScript properties of a `AudioPidSelectionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioPidSelection` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioPidSelectionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioPidSelectionPropertyValidator(properties).assertSuccess();\n    return {\n        Pid: cdk.numberToCloudFormation(properties.pid),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioPidSelectionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioPidSelectionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioPidSelectionProperty>();\n    ret.addPropertyResult('pid', 'Pid', properties.Pid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Pid) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                              \n    export interface AudioSelectorProperty {\n                                                                                                                                                                                                                                                        \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                                     \n        readonly selectorSettings?: CfnChannel.AudioSelectorSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioSelectorProperty`\n *\n * @param properties - the TypeScript properties of a `AudioSelectorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioSelectorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('selectorSettings', CfnChannel_AudioSelectorSettingsPropertyValidator)(properties.selectorSettings));\n    return errors.wrap('supplied properties not correct for \"AudioSelectorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioSelector` resource\n *\n * @param properties - the TypeScript properties of a `AudioSelectorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioSelector` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioSelectorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioSelectorPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        SelectorSettings: cfnChannelAudioSelectorSettingsPropertyToCloudFormation(properties.selectorSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioSelectorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioSelectorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioSelectorProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('selectorSettings', 'SelectorSettings', properties.SelectorSettings != null ? CfnChannelAudioSelectorSettingsPropertyFromCloudFormation(properties.SelectorSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                      \n    export interface AudioSelectorSettingsProperty {\n                                                                                                                                                                                                                                                                                                 \n        readonly audioHlsRenditionSelection?: CfnChannel.AudioHlsRenditionSelectionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                     \n        readonly audioLanguageSelection?: CfnChannel.AudioLanguageSelectionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                      \n        readonly audioPidSelection?: CfnChannel.AudioPidSelectionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                      \n        readonly audioTrackSelection?: CfnChannel.AudioTrackSelectionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioSelectorSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AudioSelectorSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioSelectorSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audioHlsRenditionSelection', CfnChannel_AudioHlsRenditionSelectionPropertyValidator)(properties.audioHlsRenditionSelection));\n    errors.collect(cdk.propertyValidator('audioLanguageSelection', CfnChannel_AudioLanguageSelectionPropertyValidator)(properties.audioLanguageSelection));\n    errors.collect(cdk.propertyValidator('audioPidSelection', CfnChannel_AudioPidSelectionPropertyValidator)(properties.audioPidSelection));\n    errors.collect(cdk.propertyValidator('audioTrackSelection', CfnChannel_AudioTrackSelectionPropertyValidator)(properties.audioTrackSelection));\n    return errors.wrap('supplied properties not correct for \"AudioSelectorSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioSelectorSettings` resource\n *\n * @param properties - the TypeScript properties of a `AudioSelectorSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioSelectorSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioSelectorSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioSelectorSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AudioHlsRenditionSelection: cfnChannelAudioHlsRenditionSelectionPropertyToCloudFormation(properties.audioHlsRenditionSelection),\n        AudioLanguageSelection: cfnChannelAudioLanguageSelectionPropertyToCloudFormation(properties.audioLanguageSelection),\n        AudioPidSelection: cfnChannelAudioPidSelectionPropertyToCloudFormation(properties.audioPidSelection),\n        AudioTrackSelection: cfnChannelAudioTrackSelectionPropertyToCloudFormation(properties.audioTrackSelection),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioSelectorSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioSelectorSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioSelectorSettingsProperty>();\n    ret.addPropertyResult('audioHlsRenditionSelection', 'AudioHlsRenditionSelection', properties.AudioHlsRenditionSelection != null ? CfnChannelAudioHlsRenditionSelectionPropertyFromCloudFormation(properties.AudioHlsRenditionSelection) : undefined);\n    ret.addPropertyResult('audioLanguageSelection', 'AudioLanguageSelection', properties.AudioLanguageSelection != null ? CfnChannelAudioLanguageSelectionPropertyFromCloudFormation(properties.AudioLanguageSelection) : undefined);\n    ret.addPropertyResult('audioPidSelection', 'AudioPidSelection', properties.AudioPidSelection != null ? CfnChannelAudioPidSelectionPropertyFromCloudFormation(properties.AudioPidSelection) : undefined);\n    ret.addPropertyResult('audioTrackSelection', 'AudioTrackSelection', properties.AudioTrackSelection != null ? CfnChannelAudioTrackSelectionPropertyFromCloudFormation(properties.AudioTrackSelection) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface AudioSilenceFailoverSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly audioSelectorName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly audioSilenceThresholdMsec?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioSilenceFailoverSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AudioSilenceFailoverSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioSilenceFailoverSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audioSelectorName', cdk.validateString)(properties.audioSelectorName));\n    errors.collect(cdk.propertyValidator('audioSilenceThresholdMsec', cdk.validateNumber)(properties.audioSilenceThresholdMsec));\n    return errors.wrap('supplied properties not correct for \"AudioSilenceFailoverSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioSilenceFailoverSettings` resource\n *\n * @param properties - the TypeScript properties of a `AudioSilenceFailoverSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioSilenceFailoverSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioSilenceFailoverSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioSilenceFailoverSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AudioSelectorName: cdk.stringToCloudFormation(properties.audioSelectorName),\n        AudioSilenceThresholdMsec: cdk.numberToCloudFormation(properties.audioSilenceThresholdMsec),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioSilenceFailoverSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioSilenceFailoverSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioSilenceFailoverSettingsProperty>();\n    ret.addPropertyResult('audioSelectorName', 'AudioSelectorName', properties.AudioSelectorName != null ? cfn_parse.FromCloudFormation.getString(properties.AudioSelectorName) : undefined);\n    ret.addPropertyResult('audioSilenceThresholdMsec', 'AudioSilenceThresholdMsec', properties.AudioSilenceThresholdMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.AudioSilenceThresholdMsec) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                        \n    export interface AudioTrackProperty {\n                                                                                                                                                                                                                                                                              \n        readonly track?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioTrackProperty`\n *\n * @param properties - the TypeScript properties of a `AudioTrackProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioTrackPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('track', cdk.validateNumber)(properties.track));\n    return errors.wrap('supplied properties not correct for \"AudioTrackProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioTrack` resource\n *\n * @param properties - the TypeScript properties of a `AudioTrackProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioTrack` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioTrackPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioTrackPropertyValidator(properties).assertSuccess();\n    return {\n        Track: cdk.numberToCloudFormation(properties.track),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioTrackPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioTrackProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioTrackProperty>();\n    ret.addPropertyResult('track', 'Track', properties.Track != null ? cfn_parse.FromCloudFormation.getNumber(properties.Track) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                   \n    export interface AudioTrackSelectionProperty {\n                                                                                                                                                                                                                                                                                                     \n        readonly tracks?: Array<CfnChannel.AudioTrackProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioTrackSelectionProperty`\n *\n * @param properties - the TypeScript properties of a `AudioTrackSelectionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioTrackSelectionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('tracks', cdk.listValidator(CfnChannel_AudioTrackPropertyValidator))(properties.tracks));\n    return errors.wrap('supplied properties not correct for \"AudioTrackSelectionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioTrackSelection` resource\n *\n * @param properties - the TypeScript properties of a `AudioTrackSelectionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioTrackSelection` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioTrackSelectionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioTrackSelectionPropertyValidator(properties).assertSuccess();\n    return {\n        Tracks: cdk.listMapper(cfnChannelAudioTrackPropertyToCloudFormation)(properties.tracks),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioTrackSelectionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioTrackSelectionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioTrackSelectionProperty>();\n    ret.addPropertyResult('tracks', 'Tracks', properties.Tracks != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelAudioTrackPropertyFromCloudFormation)(properties.Tracks) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                            \n    export interface AudioWatermarkSettingsProperty {\n                                                                                                                                                                                                                                                                                                                             \n        readonly nielsenWatermarksSettings?: CfnChannel.NielsenWatermarksSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AudioWatermarkSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AudioWatermarkSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AudioWatermarkSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('nielsenWatermarksSettings', CfnChannel_NielsenWatermarksSettingsPropertyValidator)(properties.nielsenWatermarksSettings));\n    return errors.wrap('supplied properties not correct for \"AudioWatermarkSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioWatermarkSettings` resource\n *\n * @param properties - the TypeScript properties of a `AudioWatermarkSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AudioWatermarkSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAudioWatermarkSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AudioWatermarkSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        NielsenWatermarksSettings: cfnChannelNielsenWatermarksSettingsPropertyToCloudFormation(properties.nielsenWatermarksSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAudioWatermarkSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AudioWatermarkSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AudioWatermarkSettingsProperty>();\n    ret.addPropertyResult('nielsenWatermarksSettings', 'NielsenWatermarksSettings', properties.NielsenWatermarksSettings != null ? CfnChannelNielsenWatermarksSettingsPropertyFromCloudFormation(properties.NielsenWatermarksSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface AutomaticInputFailoverSettingsProperty {\nn        readonly errorClearTimeMsec?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly failoverConditions?: Array<CfnChannel.FailoverConditionProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly inputPreference?: string;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly secondaryInputId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AutomaticInputFailoverSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AutomaticInputFailoverSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AutomaticInputFailoverSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('errorClearTimeMsec', cdk.validateNumber)(properties.errorClearTimeMsec));\n    errors.collect(cdk.propertyValidator('failoverConditions', cdk.listValidator(CfnChannel_FailoverConditionPropertyValidator))(properties.failoverConditions));\n    errors.collect(cdk.propertyValidator('inputPreference', cdk.validateString)(properties.inputPreference));\n    errors.collect(cdk.propertyValidator('secondaryInputId', cdk.validateString)(properties.secondaryInputId));\n    return errors.wrap('supplied properties not correct for \"AutomaticInputFailoverSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AutomaticInputFailoverSettings` resource\n *\n * @param properties - the TypeScript properties of a `AutomaticInputFailoverSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AutomaticInputFailoverSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAutomaticInputFailoverSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AutomaticInputFailoverSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ErrorClearTimeMsec: cdk.numberToCloudFormation(properties.errorClearTimeMsec),\n        FailoverConditions: cdk.listMapper(cfnChannelFailoverConditionPropertyToCloudFormation)(properties.failoverConditions),\n        InputPreference: cdk.stringToCloudFormation(properties.inputPreference),\n        SecondaryInputId: cdk.stringToCloudFormation(properties.secondaryInputId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAutomaticInputFailoverSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AutomaticInputFailoverSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AutomaticInputFailoverSettingsProperty>();\n    ret.addPropertyResult('errorClearTimeMsec', 'ErrorClearTimeMsec', properties.ErrorClearTimeMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.ErrorClearTimeMsec) : undefined);\n    ret.addPropertyResult('failoverConditions', 'FailoverConditions', properties.FailoverConditions != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelFailoverConditionPropertyFromCloudFormation)(properties.FailoverConditions) : undefined);\n    ret.addPropertyResult('inputPreference', 'InputPreference', properties.InputPreference != null ? cfn_parse.FromCloudFormation.getString(properties.InputPreference) : undefined);\n    ret.addPropertyResult('secondaryInputId', 'SecondaryInputId', properties.SecondaryInputId != null ? cfn_parse.FromCloudFormation.getString(properties.SecondaryInputId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                               \n    export interface AvailBlankingProperty {\n                                                                                                                                                                                                                                                                                                                                           \n        readonly availBlankingImage?: CfnChannel.InputLocationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                            \n        readonly state?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AvailBlankingProperty`\n *\n * @param properties - the TypeScript properties of a `AvailBlankingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AvailBlankingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availBlankingImage', CfnChannel_InputLocationPropertyValidator)(properties.availBlankingImage));\n    errors.collect(cdk.propertyValidator('state', cdk.validateString)(properties.state));\n    return errors.wrap('supplied properties not correct for \"AvailBlankingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AvailBlanking` resource\n *\n * @param properties - the TypeScript properties of a `AvailBlankingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AvailBlanking` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAvailBlankingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AvailBlankingPropertyValidator(properties).assertSuccess();\n    return {\n        AvailBlankingImage: cfnChannelInputLocationPropertyToCloudFormation(properties.availBlankingImage),\n        State: cdk.stringToCloudFormation(properties.state),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAvailBlankingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AvailBlankingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AvailBlankingProperty>();\n    ret.addPropertyResult('availBlankingImage', 'AvailBlankingImage', properties.AvailBlankingImage != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.AvailBlankingImage) : undefined);\n    ret.addPropertyResult('state', 'State', properties.State != null ? cfn_parse.FromCloudFormation.getString(properties.State) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                            \n    export interface AvailConfigurationProperty {\n                                                                                                                                                                                                                                                                                          \n        readonly availSettings?: CfnChannel.AvailSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AvailConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `AvailConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AvailConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availSettings', CfnChannel_AvailSettingsPropertyValidator)(properties.availSettings));\n    return errors.wrap('supplied properties not correct for \"AvailConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AvailConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `AvailConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AvailConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAvailConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AvailConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AvailSettings: cfnChannelAvailSettingsPropertyToCloudFormation(properties.availSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAvailConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AvailConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AvailConfigurationProperty>();\n    ret.addPropertyResult('availSettings', 'AvailSettings', properties.AvailSettings != null ? CfnChannelAvailSettingsPropertyFromCloudFormation(properties.AvailSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                               \n    export interface AvailSettingsProperty {\n                                                                                                                                                                                                                                                                                     \n        readonly scte35SpliceInsert?: CfnChannel.Scte35SpliceInsertProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                          \n        readonly scte35TimeSignalApos?: CfnChannel.Scte35TimeSignalAposProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AvailSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `AvailSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_AvailSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('scte35SpliceInsert', CfnChannel_Scte35SpliceInsertPropertyValidator)(properties.scte35SpliceInsert));\n    errors.collect(cdk.propertyValidator('scte35TimeSignalApos', CfnChannel_Scte35TimeSignalAposPropertyValidator)(properties.scte35TimeSignalApos));\n    return errors.wrap('supplied properties not correct for \"AvailSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AvailSettings` resource\n *\n * @param properties - the TypeScript properties of a `AvailSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.AvailSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelAvailSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_AvailSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Scte35SpliceInsert: cfnChannelScte35SpliceInsertPropertyToCloudFormation(properties.scte35SpliceInsert),\n        Scte35TimeSignalApos: cfnChannelScte35TimeSignalAposPropertyToCloudFormation(properties.scte35TimeSignalApos),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelAvailSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.AvailSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.AvailSettingsProperty>();\n    ret.addPropertyResult('scte35SpliceInsert', 'Scte35SpliceInsert', properties.Scte35SpliceInsert != null ? CfnChannelScte35SpliceInsertPropertyFromCloudFormation(properties.Scte35SpliceInsert) : undefined);\n    ret.addPropertyResult('scte35TimeSignalApos', 'Scte35TimeSignalApos', properties.Scte35TimeSignalApos != null ? CfnChannelScte35TimeSignalAposPropertyFromCloudFormation(properties.Scte35TimeSignalApos) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                            \n    export interface BlackoutSlateProperty {\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly blackoutSlateImage?: CfnChannel.InputLocationProperty | cdk.IResolvable;\nn        readonly networkEndBlackout?: string;\n                                                                                                                                                                                                                                                                                                                                                                       \n        readonly networkEndBlackoutImage?: CfnChannel.InputLocationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly networkId?: string;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly state?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BlackoutSlateProperty`\n *\n * @param properties - the TypeScript properties of a `BlackoutSlateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_BlackoutSlatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('blackoutSlateImage', CfnChannel_InputLocationPropertyValidator)(properties.blackoutSlateImage));\n    errors.collect(cdk.propertyValidator('networkEndBlackout', cdk.validateString)(properties.networkEndBlackout));\n    errors.collect(cdk.propertyValidator('networkEndBlackoutImage', CfnChannel_InputLocationPropertyValidator)(properties.networkEndBlackoutImage));\n    errors.collect(cdk.propertyValidator('networkId', cdk.validateString)(properties.networkId));\n    errors.collect(cdk.propertyValidator('state', cdk.validateString)(properties.state));\n    return errors.wrap('supplied properties not correct for \"BlackoutSlateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.BlackoutSlate` resource\n *\n * @param properties - the TypeScript properties of a `BlackoutSlateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.BlackoutSlate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelBlackoutSlatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_BlackoutSlatePropertyValidator(properties).assertSuccess();\n    return {\n        BlackoutSlateImage: cfnChannelInputLocationPropertyToCloudFormation(properties.blackoutSlateImage),\n        NetworkEndBlackout: cdk.stringToCloudFormation(properties.networkEndBlackout),\n        NetworkEndBlackoutImage: cfnChannelInputLocationPropertyToCloudFormation(properties.networkEndBlackoutImage),\n        NetworkId: cdk.stringToCloudFormation(properties.networkId),\n        State: cdk.stringToCloudFormation(properties.state),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelBlackoutSlatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.BlackoutSlateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.BlackoutSlateProperty>();\n    ret.addPropertyResult('blackoutSlateImage', 'BlackoutSlateImage', properties.BlackoutSlateImage != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.BlackoutSlateImage) : undefined);\n    ret.addPropertyResult('networkEndBlackout', 'NetworkEndBlackout', properties.NetworkEndBlackout != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkEndBlackout) : undefined);\n    ret.addPropertyResult('networkEndBlackoutImage', 'NetworkEndBlackoutImage', properties.NetworkEndBlackoutImage != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.NetworkEndBlackoutImage) : undefined);\n    ret.addPropertyResult('networkId', 'NetworkId', properties.NetworkId != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkId) : undefined);\n    ret.addPropertyResult('state', 'State', properties.State != null ? cfn_parse.FromCloudFormation.getString(properties.State) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                 \n    export interface BurnInDestinationSettingsProperty {\nn        readonly alignment?: string;\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly backgroundColor?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly backgroundOpacity?: number;\nn        readonly font?: CfnChannel.InputLocationProperty | cdk.IResolvable;\nn        readonly fontColor?: string;\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly fontOpacity?: number;\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly fontResolution?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly fontSize?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly outlineColor?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly outlineSize?: number;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly shadowColor?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly shadowOpacity?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly shadowXOffset?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly shadowYOffset?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly teletextGridControl?: string;\nn        readonly xPosition?: number;\nn        readonly yPosition?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BurnInDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `BurnInDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_BurnInDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alignment', cdk.validateString)(properties.alignment));\n    errors.collect(cdk.propertyValidator('backgroundColor', cdk.validateString)(properties.backgroundColor));\n    errors.collect(cdk.propertyValidator('backgroundOpacity', cdk.validateNumber)(properties.backgroundOpacity));\n    errors.collect(cdk.propertyValidator('font', CfnChannel_InputLocationPropertyValidator)(properties.font));\n    errors.collect(cdk.propertyValidator('fontColor', cdk.validateString)(properties.fontColor));\n    errors.collect(cdk.propertyValidator('fontOpacity', cdk.validateNumber)(properties.fontOpacity));\n    errors.collect(cdk.propertyValidator('fontResolution', cdk.validateNumber)(properties.fontResolution));\n    errors.collect(cdk.propertyValidator('fontSize', cdk.validateString)(properties.fontSize));\n    errors.collect(cdk.propertyValidator('outlineColor', cdk.validateString)(properties.outlineColor));\n    errors.collect(cdk.propertyValidator('outlineSize', cdk.validateNumber)(properties.outlineSize));\n    errors.collect(cdk.propertyValidator('shadowColor', cdk.validateString)(properties.shadowColor));\n    errors.collect(cdk.propertyValidator('shadowOpacity', cdk.validateNumber)(properties.shadowOpacity));\n    errors.collect(cdk.propertyValidator('shadowXOffset', cdk.validateNumber)(properties.shadowXOffset));\n    errors.collect(cdk.propertyValidator('shadowYOffset', cdk.validateNumber)(properties.shadowYOffset));\n    errors.collect(cdk.propertyValidator('teletextGridControl', cdk.validateString)(properties.teletextGridControl));\n    errors.collect(cdk.propertyValidator('xPosition', cdk.validateNumber)(properties.xPosition));\n    errors.collect(cdk.propertyValidator('yPosition', cdk.validateNumber)(properties.yPosition));\n    return errors.wrap('supplied properties not correct for \"BurnInDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.BurnInDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `BurnInDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.BurnInDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelBurnInDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_BurnInDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Alignment: cdk.stringToCloudFormation(properties.alignment),\n        BackgroundColor: cdk.stringToCloudFormation(properties.backgroundColor),\n        BackgroundOpacity: cdk.numberToCloudFormation(properties.backgroundOpacity),\n        Font: cfnChannelInputLocationPropertyToCloudFormation(properties.font),\n        FontColor: cdk.stringToCloudFormation(properties.fontColor),\n        FontOpacity: cdk.numberToCloudFormation(properties.fontOpacity),\n        FontResolution: cdk.numberToCloudFormation(properties.fontResolution),\n        FontSize: cdk.stringToCloudFormation(properties.fontSize),\n        OutlineColor: cdk.stringToCloudFormation(properties.outlineColor),\n        OutlineSize: cdk.numberToCloudFormation(properties.outlineSize),\n        ShadowColor: cdk.stringToCloudFormation(properties.shadowColor),\n        ShadowOpacity: cdk.numberToCloudFormation(properties.shadowOpacity),\n        ShadowXOffset: cdk.numberToCloudFormation(properties.shadowXOffset),\n        ShadowYOffset: cdk.numberToCloudFormation(properties.shadowYOffset),\n        TeletextGridControl: cdk.stringToCloudFormation(properties.teletextGridControl),\n        XPosition: cdk.numberToCloudFormation(properties.xPosition),\n        YPosition: cdk.numberToCloudFormation(properties.yPosition),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelBurnInDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.BurnInDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.BurnInDestinationSettingsProperty>();\n    ret.addPropertyResult('alignment', 'Alignment', properties.Alignment != null ? cfn_parse.FromCloudFormation.getString(properties.Alignment) : undefined);\n    ret.addPropertyResult('backgroundColor', 'BackgroundColor', properties.BackgroundColor != null ? cfn_parse.FromCloudFormation.getString(properties.BackgroundColor) : undefined);\n    ret.addPropertyResult('backgroundOpacity', 'BackgroundOpacity', properties.BackgroundOpacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.BackgroundOpacity) : undefined);\n    ret.addPropertyResult('font', 'Font', properties.Font != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.Font) : undefined);\n    ret.addPropertyResult('fontColor', 'FontColor', properties.FontColor != null ? cfn_parse.FromCloudFormation.getString(properties.FontColor) : undefined);\n    ret.addPropertyResult('fontOpacity', 'FontOpacity', properties.FontOpacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.FontOpacity) : undefined);\n    ret.addPropertyResult('fontResolution', 'FontResolution', properties.FontResolution != null ? cfn_parse.FromCloudFormation.getNumber(properties.FontResolution) : undefined);\n    ret.addPropertyResult('fontSize', 'FontSize', properties.FontSize != null ? cfn_parse.FromCloudFormation.getString(properties.FontSize) : undefined);\n    ret.addPropertyResult('outlineColor', 'OutlineColor', properties.OutlineColor != null ? cfn_parse.FromCloudFormation.getString(properties.OutlineColor) : undefined);\n    ret.addPropertyResult('outlineSize', 'OutlineSize', properties.OutlineSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.OutlineSize) : undefined);\n    ret.addPropertyResult('shadowColor', 'ShadowColor', properties.ShadowColor != null ? cfn_parse.FromCloudFormation.getString(properties.ShadowColor) : undefined);\n    ret.addPropertyResult('shadowOpacity', 'ShadowOpacity', properties.ShadowOpacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.ShadowOpacity) : undefined);\n    ret.addPropertyResult('shadowXOffset', 'ShadowXOffset', properties.ShadowXOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.ShadowXOffset) : undefined);\n    ret.addPropertyResult('shadowYOffset', 'ShadowYOffset', properties.ShadowYOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.ShadowYOffset) : undefined);\n    ret.addPropertyResult('teletextGridControl', 'TeletextGridControl', properties.TeletextGridControl != null ? cfn_parse.FromCloudFormation.getString(properties.TeletextGridControl) : undefined);\n    ret.addPropertyResult('xPosition', 'XPosition', properties.XPosition != null ? cfn_parse.FromCloudFormation.getNumber(properties.XPosition) : undefined);\n    ret.addPropertyResult('yPosition', 'YPosition', properties.YPosition != null ? cfn_parse.FromCloudFormation.getNumber(properties.YPosition) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                            \n    export interface CaptionDescriptionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly captionSelectorName?: string;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly destinationSettings?: CfnChannel.CaptionDestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly languageCode?: string;\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly languageDescription?: string;\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CaptionDescriptionProperty`\n *\n * @param properties - the TypeScript properties of a `CaptionDescriptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_CaptionDescriptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('captionSelectorName', cdk.validateString)(properties.captionSelectorName));\n    errors.collect(cdk.propertyValidator('destinationSettings', CfnChannel_CaptionDestinationSettingsPropertyValidator)(properties.destinationSettings));\n    errors.collect(cdk.propertyValidator('languageCode', cdk.validateString)(properties.languageCode));\n    errors.collect(cdk.propertyValidator('languageDescription', cdk.validateString)(properties.languageDescription));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CaptionDescriptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionDescription` resource\n *\n * @param properties - the TypeScript properties of a `CaptionDescriptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionDescription` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelCaptionDescriptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_CaptionDescriptionPropertyValidator(properties).assertSuccess();\n    return {\n        CaptionSelectorName: cdk.stringToCloudFormation(properties.captionSelectorName),\n        DestinationSettings: cfnChannelCaptionDestinationSettingsPropertyToCloudFormation(properties.destinationSettings),\n        LanguageCode: cdk.stringToCloudFormation(properties.languageCode),\n        LanguageDescription: cdk.stringToCloudFormation(properties.languageDescription),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelCaptionDescriptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.CaptionDescriptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.CaptionDescriptionProperty>();\n    ret.addPropertyResult('captionSelectorName', 'CaptionSelectorName', properties.CaptionSelectorName != null ? cfn_parse.FromCloudFormation.getString(properties.CaptionSelectorName) : undefined);\n    ret.addPropertyResult('destinationSettings', 'DestinationSettings', properties.DestinationSettings != null ? CfnChannelCaptionDestinationSettingsPropertyFromCloudFormation(properties.DestinationSettings) : undefined);\n    ret.addPropertyResult('languageCode', 'LanguageCode', properties.LanguageCode != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageCode) : undefined);\n    ret.addPropertyResult('languageDescription', 'LanguageDescription', properties.LanguageDescription != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageDescription) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                 \n    export interface CaptionDestinationSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                   \n        readonly aribDestinationSettings?: CfnChannel.AribDestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly burnInDestinationSettings?: CfnChannel.BurnInDestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly dvbSubDestinationSettings?: CfnChannel.DvbSubDestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                    \n        readonly ebuTtDDestinationSettings?: CfnChannel.EbuTtDDestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly embeddedDestinationSettings?: CfnChannel.EmbeddedDestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly embeddedPlusScte20DestinationSettings?: CfnChannel.EmbeddedPlusScte20DestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly rtmpCaptionInfoDestinationSettings?: CfnChannel.RtmpCaptionInfoDestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly scte20PlusEmbeddedDestinationSettings?: CfnChannel.Scte20PlusEmbeddedDestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly scte27DestinationSettings?: CfnChannel.Scte27DestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly smpteTtDestinationSettings?: CfnChannel.SmpteTtDestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly teletextDestinationSettings?: CfnChannel.TeletextDestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly ttmlDestinationSettings?: CfnChannel.TtmlDestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly webvttDestinationSettings?: CfnChannel.WebvttDestinationSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CaptionDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `CaptionDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_CaptionDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('aribDestinationSettings', CfnChannel_AribDestinationSettingsPropertyValidator)(properties.aribDestinationSettings));\n    errors.collect(cdk.propertyValidator('burnInDestinationSettings', CfnChannel_BurnInDestinationSettingsPropertyValidator)(properties.burnInDestinationSettings));\n    errors.collect(cdk.propertyValidator('dvbSubDestinationSettings', CfnChannel_DvbSubDestinationSettingsPropertyValidator)(properties.dvbSubDestinationSettings));\n    errors.collect(cdk.propertyValidator('ebuTtDDestinationSettings', CfnChannel_EbuTtDDestinationSettingsPropertyValidator)(properties.ebuTtDDestinationSettings));\n    errors.collect(cdk.propertyValidator('embeddedDestinationSettings', CfnChannel_EmbeddedDestinationSettingsPropertyValidator)(properties.embeddedDestinationSettings));\n    errors.collect(cdk.propertyValidator('embeddedPlusScte20DestinationSettings', CfnChannel_EmbeddedPlusScte20DestinationSettingsPropertyValidator)(properties.embeddedPlusScte20DestinationSettings));\n    errors.collect(cdk.propertyValidator('rtmpCaptionInfoDestinationSettings', CfnChannel_RtmpCaptionInfoDestinationSettingsPropertyValidator)(properties.rtmpCaptionInfoDestinationSettings));\n    errors.collect(cdk.propertyValidator('scte20PlusEmbeddedDestinationSettings', CfnChannel_Scte20PlusEmbeddedDestinationSettingsPropertyValidator)(properties.scte20PlusEmbeddedDestinationSettings));\n    errors.collect(cdk.propertyValidator('scte27DestinationSettings', CfnChannel_Scte27DestinationSettingsPropertyValidator)(properties.scte27DestinationSettings));\n    errors.collect(cdk.propertyValidator('smpteTtDestinationSettings', CfnChannel_SmpteTtDestinationSettingsPropertyValidator)(properties.smpteTtDestinationSettings));\n    errors.collect(cdk.propertyValidator('teletextDestinationSettings', CfnChannel_TeletextDestinationSettingsPropertyValidator)(properties.teletextDestinationSettings));\n    errors.collect(cdk.propertyValidator('ttmlDestinationSettings', CfnChannel_TtmlDestinationSettingsPropertyValidator)(properties.ttmlDestinationSettings));\n    errors.collect(cdk.propertyValidator('webvttDestinationSettings', CfnChannel_WebvttDestinationSettingsPropertyValidator)(properties.webvttDestinationSettings));\n    return errors.wrap('supplied properties not correct for \"CaptionDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `CaptionDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelCaptionDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_CaptionDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AribDestinationSettings: cfnChannelAribDestinationSettingsPropertyToCloudFormation(properties.aribDestinationSettings),\n        BurnInDestinationSettings: cfnChannelBurnInDestinationSettingsPropertyToCloudFormation(properties.burnInDestinationSettings),\n        DvbSubDestinationSettings: cfnChannelDvbSubDestinationSettingsPropertyToCloudFormation(properties.dvbSubDestinationSettings),\n        EbuTtDDestinationSettings: cfnChannelEbuTtDDestinationSettingsPropertyToCloudFormation(properties.ebuTtDDestinationSettings),\n        EmbeddedDestinationSettings: cfnChannelEmbeddedDestinationSettingsPropertyToCloudFormation(properties.embeddedDestinationSettings),\n        EmbeddedPlusScte20DestinationSettings: cfnChannelEmbeddedPlusScte20DestinationSettingsPropertyToCloudFormation(properties.embeddedPlusScte20DestinationSettings),\n        RtmpCaptionInfoDestinationSettings: cfnChannelRtmpCaptionInfoDestinationSettingsPropertyToCloudFormation(properties.rtmpCaptionInfoDestinationSettings),\n        Scte20PlusEmbeddedDestinationSettings: cfnChannelScte20PlusEmbeddedDestinationSettingsPropertyToCloudFormation(properties.scte20PlusEmbeddedDestinationSettings),\n        Scte27DestinationSettings: cfnChannelScte27DestinationSettingsPropertyToCloudFormation(properties.scte27DestinationSettings),\n        SmpteTtDestinationSettings: cfnChannelSmpteTtDestinationSettingsPropertyToCloudFormation(properties.smpteTtDestinationSettings),\n        TeletextDestinationSettings: cfnChannelTeletextDestinationSettingsPropertyToCloudFormation(properties.teletextDestinationSettings),\n        TtmlDestinationSettings: cfnChannelTtmlDestinationSettingsPropertyToCloudFormation(properties.ttmlDestinationSettings),\n        WebvttDestinationSettings: cfnChannelWebvttDestinationSettingsPropertyToCloudFormation(properties.webvttDestinationSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelCaptionDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.CaptionDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.CaptionDestinationSettingsProperty>();\n    ret.addPropertyResult('aribDestinationSettings', 'AribDestinationSettings', properties.AribDestinationSettings != null ? CfnChannelAribDestinationSettingsPropertyFromCloudFormation(properties.AribDestinationSettings) : undefined);\n    ret.addPropertyResult('burnInDestinationSettings', 'BurnInDestinationSettings', properties.BurnInDestinationSettings != null ? CfnChannelBurnInDestinationSettingsPropertyFromCloudFormation(properties.BurnInDestinationSettings) : undefined);\n    ret.addPropertyResult('dvbSubDestinationSettings', 'DvbSubDestinationSettings', properties.DvbSubDestinationSettings != null ? CfnChannelDvbSubDestinationSettingsPropertyFromCloudFormation(properties.DvbSubDestinationSettings) : undefined);\n    ret.addPropertyResult('ebuTtDDestinationSettings', 'EbuTtDDestinationSettings', properties.EbuTtDDestinationSettings != null ? CfnChannelEbuTtDDestinationSettingsPropertyFromCloudFormation(properties.EbuTtDDestinationSettings) : undefined);\n    ret.addPropertyResult('embeddedDestinationSettings', 'EmbeddedDestinationSettings', properties.EmbeddedDestinationSettings != null ? CfnChannelEmbeddedDestinationSettingsPropertyFromCloudFormation(properties.EmbeddedDestinationSettings) : undefined);\n    ret.addPropertyResult('embeddedPlusScte20DestinationSettings', 'EmbeddedPlusScte20DestinationSettings', properties.EmbeddedPlusScte20DestinationSettings != null ? CfnChannelEmbeddedPlusScte20DestinationSettingsPropertyFromCloudFormation(properties.EmbeddedPlusScte20DestinationSettings) : undefined);\n    ret.addPropertyResult('rtmpCaptionInfoDestinationSettings', 'RtmpCaptionInfoDestinationSettings', properties.RtmpCaptionInfoDestinationSettings != null ? CfnChannelRtmpCaptionInfoDestinationSettingsPropertyFromCloudFormation(properties.RtmpCaptionInfoDestinationSettings) : undefined);\n    ret.addPropertyResult('scte20PlusEmbeddedDestinationSettings', 'Scte20PlusEmbeddedDestinationSettings', properties.Scte20PlusEmbeddedDestinationSettings != null ? CfnChannelScte20PlusEmbeddedDestinationSettingsPropertyFromCloudFormation(properties.Scte20PlusEmbeddedDestinationSettings) : undefined);\n    ret.addPropertyResult('scte27DestinationSettings', 'Scte27DestinationSettings', properties.Scte27DestinationSettings != null ? CfnChannelScte27DestinationSettingsPropertyFromCloudFormation(properties.Scte27DestinationSettings) : undefined);\n    ret.addPropertyResult('smpteTtDestinationSettings', 'SmpteTtDestinationSettings', properties.SmpteTtDestinationSettings != null ? CfnChannelSmpteTtDestinationSettingsPropertyFromCloudFormation(properties.SmpteTtDestinationSettings) : undefined);\n    ret.addPropertyResult('teletextDestinationSettings', 'TeletextDestinationSettings', properties.TeletextDestinationSettings != null ? CfnChannelTeletextDestinationSettingsPropertyFromCloudFormation(properties.TeletextDestinationSettings) : undefined);\n    ret.addPropertyResult('ttmlDestinationSettings', 'TtmlDestinationSettings', properties.TtmlDestinationSettings != null ? CfnChannelTtmlDestinationSettingsPropertyFromCloudFormation(properties.TtmlDestinationSettings) : undefined);\n    ret.addPropertyResult('webvttDestinationSettings', 'WebvttDestinationSettings', properties.WebvttDestinationSettings != null ? CfnChannelWebvttDestinationSettingsPropertyFromCloudFormation(properties.WebvttDestinationSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface CaptionLanguageMappingProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly captionChannel?: number;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly languageCode?: string;\n                                                                                                                                                                                                                                                                                               \n        readonly languageDescription?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CaptionLanguageMappingProperty`\n *\n * @param properties - the TypeScript properties of a `CaptionLanguageMappingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_CaptionLanguageMappingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('captionChannel', cdk.validateNumber)(properties.captionChannel));\n    errors.collect(cdk.propertyValidator('languageCode', cdk.validateString)(properties.languageCode));\n    errors.collect(cdk.propertyValidator('languageDescription', cdk.validateString)(properties.languageDescription));\n    return errors.wrap('supplied properties not correct for \"CaptionLanguageMappingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionLanguageMapping` resource\n *\n * @param properties - the TypeScript properties of a `CaptionLanguageMappingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionLanguageMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelCaptionLanguageMappingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_CaptionLanguageMappingPropertyValidator(properties).assertSuccess();\n    return {\n        CaptionChannel: cdk.numberToCloudFormation(properties.captionChannel),\n        LanguageCode: cdk.stringToCloudFormation(properties.languageCode),\n        LanguageDescription: cdk.stringToCloudFormation(properties.languageDescription),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelCaptionLanguageMappingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.CaptionLanguageMappingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.CaptionLanguageMappingProperty>();\n    ret.addPropertyResult('captionChannel', 'CaptionChannel', properties.CaptionChannel != null ? cfn_parse.FromCloudFormation.getNumber(properties.CaptionChannel) : undefined);\n    ret.addPropertyResult('languageCode', 'LanguageCode', properties.LanguageCode != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageCode) : undefined);\n    ret.addPropertyResult('languageDescription', 'LanguageDescription', properties.LanguageDescription != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageDescription) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface CaptionRectangleProperty {\nn        readonly height?: number;\nn        readonly leftOffset?: number;\nn        readonly topOffset?: number;\nn        readonly width?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CaptionRectangleProperty`\n *\n * @param properties - the TypeScript properties of a `CaptionRectangleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_CaptionRectanglePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('height', cdk.validateNumber)(properties.height));\n    errors.collect(cdk.propertyValidator('leftOffset', cdk.validateNumber)(properties.leftOffset));\n    errors.collect(cdk.propertyValidator('topOffset', cdk.validateNumber)(properties.topOffset));\n    errors.collect(cdk.propertyValidator('width', cdk.validateNumber)(properties.width));\n    return errors.wrap('supplied properties not correct for \"CaptionRectangleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionRectangle` resource\n *\n * @param properties - the TypeScript properties of a `CaptionRectangleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionRectangle` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelCaptionRectanglePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_CaptionRectanglePropertyValidator(properties).assertSuccess();\n    return {\n        Height: cdk.numberToCloudFormation(properties.height),\n        LeftOffset: cdk.numberToCloudFormation(properties.leftOffset),\n        TopOffset: cdk.numberToCloudFormation(properties.topOffset),\n        Width: cdk.numberToCloudFormation(properties.width),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelCaptionRectanglePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.CaptionRectangleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.CaptionRectangleProperty>();\n    ret.addPropertyResult('height', 'Height', properties.Height != null ? cfn_parse.FromCloudFormation.getNumber(properties.Height) : undefined);\n    ret.addPropertyResult('leftOffset', 'LeftOffset', properties.LeftOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.LeftOffset) : undefined);\n    ret.addPropertyResult('topOffset', 'TopOffset', properties.TopOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.TopOffset) : undefined);\n    ret.addPropertyResult('width', 'Width', properties.Width != null ? cfn_parse.FromCloudFormation.getNumber(properties.Width) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                  \n    export interface CaptionSelectorProperty {\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly languageCode?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                                         \n        readonly selectorSettings?: CfnChannel.CaptionSelectorSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CaptionSelectorProperty`\n *\n * @param properties - the TypeScript properties of a `CaptionSelectorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_CaptionSelectorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('languageCode', cdk.validateString)(properties.languageCode));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('selectorSettings', CfnChannel_CaptionSelectorSettingsPropertyValidator)(properties.selectorSettings));\n    return errors.wrap('supplied properties not correct for \"CaptionSelectorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionSelector` resource\n *\n * @param properties - the TypeScript properties of a `CaptionSelectorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionSelector` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelCaptionSelectorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_CaptionSelectorPropertyValidator(properties).assertSuccess();\n    return {\n        LanguageCode: cdk.stringToCloudFormation(properties.languageCode),\n        Name: cdk.stringToCloudFormation(properties.name),\n        SelectorSettings: cfnChannelCaptionSelectorSettingsPropertyToCloudFormation(properties.selectorSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelCaptionSelectorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.CaptionSelectorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.CaptionSelectorProperty>();\n    ret.addPropertyResult('languageCode', 'LanguageCode', properties.LanguageCode != null ? cfn_parse.FromCloudFormation.getString(properties.LanguageCode) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('selectorSettings', 'SelectorSettings', properties.SelectorSettings != null ? CfnChannelCaptionSelectorSettingsPropertyFromCloudFormation(properties.SelectorSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                              \n    export interface CaptionSelectorSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                    \n        readonly ancillarySourceSettings?: CfnChannel.AncillarySourceSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                          \n        readonly aribSourceSettings?: CfnChannel.AribSourceSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                               \n        readonly dvbSubSourceSettings?: CfnChannel.DvbSubSourceSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly embeddedSourceSettings?: CfnChannel.EmbeddedSourceSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                               \n        readonly scte20SourceSettings?: CfnChannel.Scte20SourceSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                               \n        readonly scte27SourceSettings?: CfnChannel.Scte27SourceSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly teletextSourceSettings?: CfnChannel.TeletextSourceSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CaptionSelectorSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `CaptionSelectorSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_CaptionSelectorSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ancillarySourceSettings', CfnChannel_AncillarySourceSettingsPropertyValidator)(properties.ancillarySourceSettings));\n    errors.collect(cdk.propertyValidator('aribSourceSettings', CfnChannel_AribSourceSettingsPropertyValidator)(properties.aribSourceSettings));\n    errors.collect(cdk.propertyValidator('dvbSubSourceSettings', CfnChannel_DvbSubSourceSettingsPropertyValidator)(properties.dvbSubSourceSettings));\n    errors.collect(cdk.propertyValidator('embeddedSourceSettings', CfnChannel_EmbeddedSourceSettingsPropertyValidator)(properties.embeddedSourceSettings));\n    errors.collect(cdk.propertyValidator('scte20SourceSettings', CfnChannel_Scte20SourceSettingsPropertyValidator)(properties.scte20SourceSettings));\n    errors.collect(cdk.propertyValidator('scte27SourceSettings', CfnChannel_Scte27SourceSettingsPropertyValidator)(properties.scte27SourceSettings));\n    errors.collect(cdk.propertyValidator('teletextSourceSettings', CfnChannel_TeletextSourceSettingsPropertyValidator)(properties.teletextSourceSettings));\n    return errors.wrap('supplied properties not correct for \"CaptionSelectorSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionSelectorSettings` resource\n *\n * @param properties - the TypeScript properties of a `CaptionSelectorSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CaptionSelectorSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelCaptionSelectorSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_CaptionSelectorSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AncillarySourceSettings: cfnChannelAncillarySourceSettingsPropertyToCloudFormation(properties.ancillarySourceSettings),\n        AribSourceSettings: cfnChannelAribSourceSettingsPropertyToCloudFormation(properties.aribSourceSettings),\n        DvbSubSourceSettings: cfnChannelDvbSubSourceSettingsPropertyToCloudFormation(properties.dvbSubSourceSettings),\n        EmbeddedSourceSettings: cfnChannelEmbeddedSourceSettingsPropertyToCloudFormation(properties.embeddedSourceSettings),\n        Scte20SourceSettings: cfnChannelScte20SourceSettingsPropertyToCloudFormation(properties.scte20SourceSettings),\n        Scte27SourceSettings: cfnChannelScte27SourceSettingsPropertyToCloudFormation(properties.scte27SourceSettings),\n        TeletextSourceSettings: cfnChannelTeletextSourceSettingsPropertyToCloudFormation(properties.teletextSourceSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelCaptionSelectorSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.CaptionSelectorSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.CaptionSelectorSettingsProperty>();\n    ret.addPropertyResult('ancillarySourceSettings', 'AncillarySourceSettings', properties.AncillarySourceSettings != null ? CfnChannelAncillarySourceSettingsPropertyFromCloudFormation(properties.AncillarySourceSettings) : undefined);\n    ret.addPropertyResult('aribSourceSettings', 'AribSourceSettings', properties.AribSourceSettings != null ? CfnChannelAribSourceSettingsPropertyFromCloudFormation(properties.AribSourceSettings) : undefined);\n    ret.addPropertyResult('dvbSubSourceSettings', 'DvbSubSourceSettings', properties.DvbSubSourceSettings != null ? CfnChannelDvbSubSourceSettingsPropertyFromCloudFormation(properties.DvbSubSourceSettings) : undefined);\n    ret.addPropertyResult('embeddedSourceSettings', 'EmbeddedSourceSettings', properties.EmbeddedSourceSettings != null ? CfnChannelEmbeddedSourceSettingsPropertyFromCloudFormation(properties.EmbeddedSourceSettings) : undefined);\n    ret.addPropertyResult('scte20SourceSettings', 'Scte20SourceSettings', properties.Scte20SourceSettings != null ? CfnChannelScte20SourceSettingsPropertyFromCloudFormation(properties.Scte20SourceSettings) : undefined);\n    ret.addPropertyResult('scte27SourceSettings', 'Scte27SourceSettings', properties.Scte27SourceSettings != null ? CfnChannelScte27SourceSettingsPropertyFromCloudFormation(properties.Scte27SourceSettings) : undefined);\n    ret.addPropertyResult('teletextSourceSettings', 'TeletextSourceSettings', properties.TeletextSourceSettings != null ? CfnChannelTeletextSourceSettingsPropertyFromCloudFormation(properties.TeletextSourceSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface CdiInputSpecificationProperty {\n                                                                                                                                                                                                                                                                            \n        readonly resolution?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CdiInputSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `CdiInputSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_CdiInputSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resolution', cdk.validateString)(properties.resolution));\n    return errors.wrap('supplied properties not correct for \"CdiInputSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CdiInputSpecification` resource\n *\n * @param properties - the TypeScript properties of a `CdiInputSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.CdiInputSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelCdiInputSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_CdiInputSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        Resolution: cdk.stringToCloudFormation(properties.resolution),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelCdiInputSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.CdiInputSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.CdiInputSpecificationProperty>();\n    ret.addPropertyResult('resolution', 'Resolution', properties.Resolution != null ? cfn_parse.FromCloudFormation.getString(properties.Resolution) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface ColorSpacePassthroughSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ColorSpacePassthroughSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `ColorSpacePassthroughSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_ColorSpacePassthroughSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"ColorSpacePassthroughSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ColorSpacePassthroughSettings` resource\n *\n * @param properties - the TypeScript properties of a `ColorSpacePassthroughSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.ColorSpacePassthroughSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelColorSpacePassthroughSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_ColorSpacePassthroughSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelColorSpacePassthroughSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.ColorSpacePassthroughSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.ColorSpacePassthroughSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                     \n    export interface DvbNitSettingsProperty {\n                                                                                                                                                                                                                                                                                                 \n        readonly networkId?: number;\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly networkName?: string;\n                                                                                                                                                                                                                                                                                                                             \n        readonly repInterval?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DvbNitSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `DvbNitSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_DvbNitSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('networkId', cdk.validateNumber)(properties.networkId));\n    errors.collect(cdk.propertyValidator('networkName', cdk.validateString)(properties.networkName));\n    errors.collect(cdk.propertyValidator('repInterval', cdk.validateNumber)(properties.repInterval));\n    return errors.wrap('supplied properties not correct for \"DvbNitSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbNitSettings` resource\n *\n * @param properties - the TypeScript properties of a `DvbNitSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbNitSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelDvbNitSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_DvbNitSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        NetworkId: cdk.numberToCloudFormation(properties.networkId),\n        NetworkName: cdk.stringToCloudFormation(properties.networkName),\n        RepInterval: cdk.numberToCloudFormation(properties.repInterval),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelDvbNitSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.DvbNitSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.DvbNitSettingsProperty>();\n    ret.addPropertyResult('networkId', 'NetworkId', properties.NetworkId != null ? cfn_parse.FromCloudFormation.getNumber(properties.NetworkId) : undefined);\n    ret.addPropertyResult('networkName', 'NetworkName', properties.NetworkName != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkName) : undefined);\n    ret.addPropertyResult('repInterval', 'RepInterval', properties.RepInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.RepInterval) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                              \n    export interface DvbSdtSettingsProperty {\nn        readonly outputSdt?: string;\n                                                                                                                                                                                                                                                                                                                             \n        readonly repInterval?: number;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly serviceName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly serviceProviderName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DvbSdtSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `DvbSdtSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_DvbSdtSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('outputSdt', cdk.validateString)(properties.outputSdt));\n    errors.collect(cdk.propertyValidator('repInterval', cdk.validateNumber)(properties.repInterval));\n    errors.collect(cdk.propertyValidator('serviceName', cdk.validateString)(properties.serviceName));\n    errors.collect(cdk.propertyValidator('serviceProviderName', cdk.validateString)(properties.serviceProviderName));\n    return errors.wrap('supplied properties not correct for \"DvbSdtSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbSdtSettings` resource\n *\n * @param properties - the TypeScript properties of a `DvbSdtSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbSdtSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelDvbSdtSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_DvbSdtSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        OutputSdt: cdk.stringToCloudFormation(properties.outputSdt),\n        RepInterval: cdk.numberToCloudFormation(properties.repInterval),\n        ServiceName: cdk.stringToCloudFormation(properties.serviceName),\n        ServiceProviderName: cdk.stringToCloudFormation(properties.serviceProviderName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelDvbSdtSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.DvbSdtSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.DvbSdtSettingsProperty>();\n    ret.addPropertyResult('outputSdt', 'OutputSdt', properties.OutputSdt != null ? cfn_parse.FromCloudFormation.getString(properties.OutputSdt) : undefined);\n    ret.addPropertyResult('repInterval', 'RepInterval', properties.RepInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.RepInterval) : undefined);\n    ret.addPropertyResult('serviceName', 'ServiceName', properties.ServiceName != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceName) : undefined);\n    ret.addPropertyResult('serviceProviderName', 'ServiceProviderName', properties.ServiceProviderName != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceProviderName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                 \n    export interface DvbSubDestinationSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly alignment?: string;\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly backgroundColor?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly backgroundOpacity?: number;\nn        readonly font?: CfnChannel.InputLocationProperty | cdk.IResolvable;\nn        readonly fontColor?: string;\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly fontOpacity?: number;\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly fontResolution?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly fontSize?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly outlineColor?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly outlineSize?: number;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly shadowColor?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly shadowOpacity?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly shadowXOffset?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly shadowYOffset?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly teletextGridControl?: string;\nn        readonly xPosition?: number;\nn        readonly yPosition?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DvbSubDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `DvbSubDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_DvbSubDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alignment', cdk.validateString)(properties.alignment));\n    errors.collect(cdk.propertyValidator('backgroundColor', cdk.validateString)(properties.backgroundColor));\n    errors.collect(cdk.propertyValidator('backgroundOpacity', cdk.validateNumber)(properties.backgroundOpacity));\n    errors.collect(cdk.propertyValidator('font', CfnChannel_InputLocationPropertyValidator)(properties.font));\n    errors.collect(cdk.propertyValidator('fontColor', cdk.validateString)(properties.fontColor));\n    errors.collect(cdk.propertyValidator('fontOpacity', cdk.validateNumber)(properties.fontOpacity));\n    errors.collect(cdk.propertyValidator('fontResolution', cdk.validateNumber)(properties.fontResolution));\n    errors.collect(cdk.propertyValidator('fontSize', cdk.validateString)(properties.fontSize));\n    errors.collect(cdk.propertyValidator('outlineColor', cdk.validateString)(properties.outlineColor));\n    errors.collect(cdk.propertyValidator('outlineSize', cdk.validateNumber)(properties.outlineSize));\n    errors.collect(cdk.propertyValidator('shadowColor', cdk.validateString)(properties.shadowColor));\n    errors.collect(cdk.propertyValidator('shadowOpacity', cdk.validateNumber)(properties.shadowOpacity));\n    errors.collect(cdk.propertyValidator('shadowXOffset', cdk.validateNumber)(properties.shadowXOffset));\n    errors.collect(cdk.propertyValidator('shadowYOffset', cdk.validateNumber)(properties.shadowYOffset));\n    errors.collect(cdk.propertyValidator('teletextGridControl', cdk.validateString)(properties.teletextGridControl));\n    errors.collect(cdk.propertyValidator('xPosition', cdk.validateNumber)(properties.xPosition));\n    errors.collect(cdk.propertyValidator('yPosition', cdk.validateNumber)(properties.yPosition));\n    return errors.wrap('supplied properties not correct for \"DvbSubDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbSubDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `DvbSubDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbSubDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelDvbSubDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_DvbSubDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Alignment: cdk.stringToCloudFormation(properties.alignment),\n        BackgroundColor: cdk.stringToCloudFormation(properties.backgroundColor),\n        BackgroundOpacity: cdk.numberToCloudFormation(properties.backgroundOpacity),\n        Font: cfnChannelInputLocationPropertyToCloudFormation(properties.font),\n        FontColor: cdk.stringToCloudFormation(properties.fontColor),\n        FontOpacity: cdk.numberToCloudFormation(properties.fontOpacity),\n        FontResolution: cdk.numberToCloudFormation(properties.fontResolution),\n        FontSize: cdk.stringToCloudFormation(properties.fontSize),\n        OutlineColor: cdk.stringToCloudFormation(properties.outlineColor),\n        OutlineSize: cdk.numberToCloudFormation(properties.outlineSize),\n        ShadowColor: cdk.stringToCloudFormation(properties.shadowColor),\n        ShadowOpacity: cdk.numberToCloudFormation(properties.shadowOpacity),\n        ShadowXOffset: cdk.numberToCloudFormation(properties.shadowXOffset),\n        ShadowYOffset: cdk.numberToCloudFormation(properties.shadowYOffset),\n        TeletextGridControl: cdk.stringToCloudFormation(properties.teletextGridControl),\n        XPosition: cdk.numberToCloudFormation(properties.xPosition),\n        YPosition: cdk.numberToCloudFormation(properties.yPosition),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelDvbSubDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.DvbSubDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.DvbSubDestinationSettingsProperty>();\n    ret.addPropertyResult('alignment', 'Alignment', properties.Alignment != null ? cfn_parse.FromCloudFormation.getString(properties.Alignment) : undefined);\n    ret.addPropertyResult('backgroundColor', 'BackgroundColor', properties.BackgroundColor != null ? cfn_parse.FromCloudFormation.getString(properties.BackgroundColor) : undefined);\n    ret.addPropertyResult('backgroundOpacity', 'BackgroundOpacity', properties.BackgroundOpacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.BackgroundOpacity) : undefined);\n    ret.addPropertyResult('font', 'Font', properties.Font != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.Font) : undefined);\n    ret.addPropertyResult('fontColor', 'FontColor', properties.FontColor != null ? cfn_parse.FromCloudFormation.getString(properties.FontColor) : undefined);\n    ret.addPropertyResult('fontOpacity', 'FontOpacity', properties.FontOpacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.FontOpacity) : undefined);\n    ret.addPropertyResult('fontResolution', 'FontResolution', properties.FontResolution != null ? cfn_parse.FromCloudFormation.getNumber(properties.FontResolution) : undefined);\n    ret.addPropertyResult('fontSize', 'FontSize', properties.FontSize != null ? cfn_parse.FromCloudFormation.getString(properties.FontSize) : undefined);\n    ret.addPropertyResult('outlineColor', 'OutlineColor', properties.OutlineColor != null ? cfn_parse.FromCloudFormation.getString(properties.OutlineColor) : undefined);\n    ret.addPropertyResult('outlineSize', 'OutlineSize', properties.OutlineSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.OutlineSize) : undefined);\n    ret.addPropertyResult('shadowColor', 'ShadowColor', properties.ShadowColor != null ? cfn_parse.FromCloudFormation.getString(properties.ShadowColor) : undefined);\n    ret.addPropertyResult('shadowOpacity', 'ShadowOpacity', properties.ShadowOpacity != null ? cfn_parse.FromCloudFormation.getNumber(properties.ShadowOpacity) : undefined);\n    ret.addPropertyResult('shadowXOffset', 'ShadowXOffset', properties.ShadowXOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.ShadowXOffset) : undefined);\n    ret.addPropertyResult('shadowYOffset', 'ShadowYOffset', properties.ShadowYOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.ShadowYOffset) : undefined);\n    ret.addPropertyResult('teletextGridControl', 'TeletextGridControl', properties.TeletextGridControl != null ? cfn_parse.FromCloudFormation.getString(properties.TeletextGridControl) : undefined);\n    ret.addPropertyResult('xPosition', 'XPosition', properties.XPosition != null ? cfn_parse.FromCloudFormation.getNumber(properties.XPosition) : undefined);\n    ret.addPropertyResult('yPosition', 'YPosition', properties.YPosition != null ? cfn_parse.FromCloudFormation.getNumber(properties.YPosition) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                          \n    export interface DvbSubSourceSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly ocrLanguage?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly pid?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DvbSubSourceSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `DvbSubSourceSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_DvbSubSourceSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ocrLanguage', cdk.validateString)(properties.ocrLanguage));\n    errors.collect(cdk.propertyValidator('pid', cdk.validateNumber)(properties.pid));\n    return errors.wrap('supplied properties not correct for \"DvbSubSourceSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbSubSourceSettings` resource\n *\n * @param properties - the TypeScript properties of a `DvbSubSourceSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbSubSourceSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelDvbSubSourceSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_DvbSubSourceSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        OcrLanguage: cdk.stringToCloudFormation(properties.ocrLanguage),\n        Pid: cdk.numberToCloudFormation(properties.pid),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelDvbSubSourceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.DvbSubSourceSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.DvbSubSourceSettingsProperty>();\n    ret.addPropertyResult('ocrLanguage', 'OcrLanguage', properties.OcrLanguage != null ? cfn_parse.FromCloudFormation.getString(properties.OcrLanguage) : undefined);\n    ret.addPropertyResult('pid', 'Pid', properties.Pid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Pid) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                          \n    export interface DvbTdtSettingsProperty {\n                                                                                                                                                                                                                                                                                                                             \n        readonly repInterval?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DvbTdtSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `DvbTdtSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_DvbTdtSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('repInterval', cdk.validateNumber)(properties.repInterval));\n    return errors.wrap('supplied properties not correct for \"DvbTdtSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbTdtSettings` resource\n *\n * @param properties - the TypeScript properties of a `DvbTdtSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.DvbTdtSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelDvbTdtSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_DvbTdtSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        RepInterval: cdk.numberToCloudFormation(properties.repInterval),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelDvbTdtSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.DvbTdtSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.DvbTdtSettingsProperty>();\n    ret.addPropertyResult('repInterval', 'RepInterval', properties.RepInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.RepInterval) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                \n    export interface Eac3SettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly attenuationControl?: string;\n                                                                                                                                                                                                                                                                                                        \n        readonly bitrate?: number;\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly bitstreamMode?: string;\n                                                                                                                                                                                                                                                                                                              \n        readonly codingMode?: string;\n                                                                                                                                                                                                                                                                                                       \n        readonly dcFilter?: string;\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly dialnorm?: number;\n                                                                                                                                                                                                                                                                            \n        readonly drcLine?: string;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly drcRf?: string;\n                                                                                                                                                                                                                                                                                              \n        readonly lfeControl?: string;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly lfeFilter?: string;\n                                                                                                                                                                                                                                                                                                                   \n        readonly loRoCenterMixLevel?: number;\n                                                                                                                                                                                                                                                                                                                     \n        readonly loRoSurroundMixLevel?: number;\n                                                                                                                                                                                                                                                                                                                   \n        readonly ltRtCenterMixLevel?: number;\n                                                                                                                                                                                                                                                                                                                         \n        readonly ltRtSurroundMixLevel?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly metadataControl?: string;\nn        readonly passthroughControl?: string;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly phaseControl?: string;\n                                                                                                                                                                                                                                                                                                \n        readonly stereoDownmix?: string;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly surroundExMode?: string;\n                                                                                                                                                                                                                                                                                                                             \n        readonly surroundMode?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Eac3SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `Eac3SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Eac3SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attenuationControl', cdk.validateString)(properties.attenuationControl));\n    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));\n    errors.collect(cdk.propertyValidator('bitstreamMode', cdk.validateString)(properties.bitstreamMode));\n    errors.collect(cdk.propertyValidator('codingMode', cdk.validateString)(properties.codingMode));\n    errors.collect(cdk.propertyValidator('dcFilter', cdk.validateString)(properties.dcFilter));\n    errors.collect(cdk.propertyValidator('dialnorm', cdk.validateNumber)(properties.dialnorm));\n    errors.collect(cdk.propertyValidator('drcLine', cdk.validateString)(properties.drcLine));\n    errors.collect(cdk.propertyValidator('drcRf', cdk.validateString)(properties.drcRf));\n    errors.collect(cdk.propertyValidator('lfeControl', cdk.validateString)(properties.lfeControl));\n    errors.collect(cdk.propertyValidator('lfeFilter', cdk.validateString)(properties.lfeFilter));\n    errors.collect(cdk.propertyValidator('loRoCenterMixLevel', cdk.validateNumber)(properties.loRoCenterMixLevel));\n    errors.collect(cdk.propertyValidator('loRoSurroundMixLevel', cdk.validateNumber)(properties.loRoSurroundMixLevel));\n    errors.collect(cdk.propertyValidator('ltRtCenterMixLevel', cdk.validateNumber)(properties.ltRtCenterMixLevel));\n    errors.collect(cdk.propertyValidator('ltRtSurroundMixLevel', cdk.validateNumber)(properties.ltRtSurroundMixLevel));\n    errors.collect(cdk.propertyValidator('metadataControl', cdk.validateString)(properties.metadataControl));\n    errors.collect(cdk.propertyValidator('passthroughControl', cdk.validateString)(properties.passthroughControl));\n    errors.collect(cdk.propertyValidator('phaseControl', cdk.validateString)(properties.phaseControl));\n    errors.collect(cdk.propertyValidator('stereoDownmix', cdk.validateString)(properties.stereoDownmix));\n    errors.collect(cdk.propertyValidator('surroundExMode', cdk.validateString)(properties.surroundExMode));\n    errors.collect(cdk.propertyValidator('surroundMode', cdk.validateString)(properties.surroundMode));\n    return errors.wrap('supplied properties not correct for \"Eac3SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Eac3Settings` resource\n *\n * @param properties - the TypeScript properties of a `Eac3SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Eac3Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelEac3SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Eac3SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AttenuationControl: cdk.stringToCloudFormation(properties.attenuationControl),\n        Bitrate: cdk.numberToCloudFormation(properties.bitrate),\n        BitstreamMode: cdk.stringToCloudFormation(properties.bitstreamMode),\n        CodingMode: cdk.stringToCloudFormation(properties.codingMode),\n        DcFilter: cdk.stringToCloudFormation(properties.dcFilter),\n        Dialnorm: cdk.numberToCloudFormation(properties.dialnorm),\n        DrcLine: cdk.stringToCloudFormation(properties.drcLine),\n        DrcRf: cdk.stringToCloudFormation(properties.drcRf),\n        LfeControl: cdk.stringToCloudFormation(properties.lfeControl),\n        LfeFilter: cdk.stringToCloudFormation(properties.lfeFilter),\n        LoRoCenterMixLevel: cdk.numberToCloudFormation(properties.loRoCenterMixLevel),\n        LoRoSurroundMixLevel: cdk.numberToCloudFormation(properties.loRoSurroundMixLevel),\n        LtRtCenterMixLevel: cdk.numberToCloudFormation(properties.ltRtCenterMixLevel),\n        LtRtSurroundMixLevel: cdk.numberToCloudFormation(properties.ltRtSurroundMixLevel),\n        MetadataControl: cdk.stringToCloudFormation(properties.metadataControl),\n        PassthroughControl: cdk.stringToCloudFormation(properties.passthroughControl),\n        PhaseControl: cdk.stringToCloudFormation(properties.phaseControl),\n        StereoDownmix: cdk.stringToCloudFormation(properties.stereoDownmix),\n        SurroundExMode: cdk.stringToCloudFormation(properties.surroundExMode),\n        SurroundMode: cdk.stringToCloudFormation(properties.surroundMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelEac3SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Eac3SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Eac3SettingsProperty>();\n    ret.addPropertyResult('attenuationControl', 'AttenuationControl', properties.AttenuationControl != null ? cfn_parse.FromCloudFormation.getString(properties.AttenuationControl) : undefined);\n    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);\n    ret.addPropertyResult('bitstreamMode', 'BitstreamMode', properties.BitstreamMode != null ? cfn_parse.FromCloudFormation.getString(properties.BitstreamMode) : undefined);\n    ret.addPropertyResult('codingMode', 'CodingMode', properties.CodingMode != null ? cfn_parse.FromCloudFormation.getString(properties.CodingMode) : undefined);\n    ret.addPropertyResult('dcFilter', 'DcFilter', properties.DcFilter != null ? cfn_parse.FromCloudFormation.getString(properties.DcFilter) : undefined);\n    ret.addPropertyResult('dialnorm', 'Dialnorm', properties.Dialnorm != null ? cfn_parse.FromCloudFormation.getNumber(properties.Dialnorm) : undefined);\n    ret.addPropertyResult('drcLine', 'DrcLine', properties.DrcLine != null ? cfn_parse.FromCloudFormation.getString(properties.DrcLine) : undefined);\n    ret.addPropertyResult('drcRf', 'DrcRf', properties.DrcRf != null ? cfn_parse.FromCloudFormation.getString(properties.DrcRf) : undefined);\n    ret.addPropertyResult('lfeControl', 'LfeControl', properties.LfeControl != null ? cfn_parse.FromCloudFormation.getString(properties.LfeControl) : undefined);\n    ret.addPropertyResult('lfeFilter', 'LfeFilter', properties.LfeFilter != null ? cfn_parse.FromCloudFormation.getString(properties.LfeFilter) : undefined);\n    ret.addPropertyResult('loRoCenterMixLevel', 'LoRoCenterMixLevel', properties.LoRoCenterMixLevel != null ? cfn_parse.FromCloudFormation.getNumber(properties.LoRoCenterMixLevel) : undefined);\n    ret.addPropertyResult('loRoSurroundMixLevel', 'LoRoSurroundMixLevel', properties.LoRoSurroundMixLevel != null ? cfn_parse.FromCloudFormation.getNumber(properties.LoRoSurroundMixLevel) : undefined);\n    ret.addPropertyResult('ltRtCenterMixLevel', 'LtRtCenterMixLevel', properties.LtRtCenterMixLevel != null ? cfn_parse.FromCloudFormation.getNumber(properties.LtRtCenterMixLevel) : undefined);\n    ret.addPropertyResult('ltRtSurroundMixLevel', 'LtRtSurroundMixLevel', properties.LtRtSurroundMixLevel != null ? cfn_parse.FromCloudFormation.getNumber(properties.LtRtSurroundMixLevel) : undefined);\n    ret.addPropertyResult('metadataControl', 'MetadataControl', properties.MetadataControl != null ? cfn_parse.FromCloudFormation.getString(properties.MetadataControl) : undefined);\n    ret.addPropertyResult('passthroughControl', 'PassthroughControl', properties.PassthroughControl != null ? cfn_parse.FromCloudFormation.getString(properties.PassthroughControl) : undefined);\n    ret.addPropertyResult('phaseControl', 'PhaseControl', properties.PhaseControl != null ? cfn_parse.FromCloudFormation.getString(properties.PhaseControl) : undefined);\n    ret.addPropertyResult('stereoDownmix', 'StereoDownmix', properties.StereoDownmix != null ? cfn_parse.FromCloudFormation.getString(properties.StereoDownmix) : undefined);\n    ret.addPropertyResult('surroundExMode', 'SurroundExMode', properties.SurroundExMode != null ? cfn_parse.FromCloudFormation.getString(properties.SurroundExMode) : undefined);\n    ret.addPropertyResult('surroundMode', 'SurroundMode', properties.SurroundMode != null ? cfn_parse.FromCloudFormation.getString(properties.SurroundMode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                            \n    export interface EbuTtDDestinationSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly copyrightHolder?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly fillLineGap?: string;\nn        readonly fontFamily?: string;\nn        readonly styleControl?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EbuTtDDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `EbuTtDDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_EbuTtDDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('copyrightHolder', cdk.validateString)(properties.copyrightHolder));\n    errors.collect(cdk.propertyValidator('fillLineGap', cdk.validateString)(properties.fillLineGap));\n    errors.collect(cdk.propertyValidator('fontFamily', cdk.validateString)(properties.fontFamily));\n    errors.collect(cdk.propertyValidator('styleControl', cdk.validateString)(properties.styleControl));\n    return errors.wrap('supplied properties not correct for \"EbuTtDDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EbuTtDDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `EbuTtDDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EbuTtDDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelEbuTtDDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_EbuTtDDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        CopyrightHolder: cdk.stringToCloudFormation(properties.copyrightHolder),\n        FillLineGap: cdk.stringToCloudFormation(properties.fillLineGap),\n        FontFamily: cdk.stringToCloudFormation(properties.fontFamily),\n        StyleControl: cdk.stringToCloudFormation(properties.styleControl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelEbuTtDDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.EbuTtDDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.EbuTtDDestinationSettingsProperty>();\n    ret.addPropertyResult('copyrightHolder', 'CopyrightHolder', properties.CopyrightHolder != null ? cfn_parse.FromCloudFormation.getString(properties.CopyrightHolder) : undefined);\n    ret.addPropertyResult('fillLineGap', 'FillLineGap', properties.FillLineGap != null ? cfn_parse.FromCloudFormation.getString(properties.FillLineGap) : undefined);\n    ret.addPropertyResult('fontFamily', 'FontFamily', properties.FontFamily != null ? cfn_parse.FromCloudFormation.getString(properties.FontFamily) : undefined);\n    ret.addPropertyResult('styleControl', 'StyleControl', properties.StyleControl != null ? cfn_parse.FromCloudFormation.getString(properties.StyleControl) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                        \n    export interface EmbeddedDestinationSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EmbeddedDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `EmbeddedDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_EmbeddedDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"EmbeddedDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EmbeddedDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `EmbeddedDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EmbeddedDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelEmbeddedDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_EmbeddedDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelEmbeddedDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.EmbeddedDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.EmbeddedDestinationSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                           \n    export interface EmbeddedPlusScte20DestinationSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EmbeddedPlusScte20DestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `EmbeddedPlusScte20DestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_EmbeddedPlusScte20DestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"EmbeddedPlusScte20DestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EmbeddedPlusScte20DestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `EmbeddedPlusScte20DestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EmbeddedPlusScte20DestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelEmbeddedPlusScte20DestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_EmbeddedPlusScte20DestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelEmbeddedPlusScte20DestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.EmbeddedPlusScte20DestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.EmbeddedPlusScte20DestinationSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                             \n    export interface EmbeddedSourceSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly convert608To708?: string;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly scte20Detection?: string;\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly source608ChannelNumber?: number;\n                                                                                                                                                                                                                                                                                                \n        readonly source608TrackNumber?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EmbeddedSourceSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `EmbeddedSourceSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_EmbeddedSourceSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('convert608To708', cdk.validateString)(properties.convert608To708));\n    errors.collect(cdk.propertyValidator('scte20Detection', cdk.validateString)(properties.scte20Detection));\n    errors.collect(cdk.propertyValidator('source608ChannelNumber', cdk.validateNumber)(properties.source608ChannelNumber));\n    errors.collect(cdk.propertyValidator('source608TrackNumber', cdk.validateNumber)(properties.source608TrackNumber));\n    return errors.wrap('supplied properties not correct for \"EmbeddedSourceSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EmbeddedSourceSettings` resource\n *\n * @param properties - the TypeScript properties of a `EmbeddedSourceSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EmbeddedSourceSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelEmbeddedSourceSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_EmbeddedSourceSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Convert608To708: cdk.stringToCloudFormation(properties.convert608To708),\n        Scte20Detection: cdk.stringToCloudFormation(properties.scte20Detection),\n        Source608ChannelNumber: cdk.numberToCloudFormation(properties.source608ChannelNumber),\n        Source608TrackNumber: cdk.numberToCloudFormation(properties.source608TrackNumber),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelEmbeddedSourceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.EmbeddedSourceSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.EmbeddedSourceSettingsProperty>();\n    ret.addPropertyResult('convert608To708', 'Convert608To708', properties.Convert608To708 != null ? cfn_parse.FromCloudFormation.getString(properties.Convert608To708) : undefined);\n    ret.addPropertyResult('scte20Detection', 'Scte20Detection', properties.Scte20Detection != null ? cfn_parse.FromCloudFormation.getString(properties.Scte20Detection) : undefined);\n    ret.addPropertyResult('source608ChannelNumber', 'Source608ChannelNumber', properties.Source608ChannelNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.Source608ChannelNumber) : undefined);\n    ret.addPropertyResult('source608TrackNumber', 'Source608TrackNumber', properties.Source608TrackNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.Source608TrackNumber) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                       \n    export interface EncoderSettingsProperty {\n                                                                                                                                                                                                                                                                                     \n        readonly audioDescriptions?: Array<CfnChannel.AudioDescriptionProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                          \n        readonly availBlanking?: CfnChannel.AvailBlankingProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                 \n        readonly availConfiguration?: CfnChannel.AvailConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                           \n        readonly blackoutSlate?: CfnChannel.BlackoutSlateProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                          \n        readonly captionDescriptions?: Array<CfnChannel.CaptionDescriptionProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                 \n        readonly featureActivations?: CfnChannel.FeatureActivationsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                         \n        readonly globalConfiguration?: CfnChannel.GlobalConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                         \n        readonly motionGraphicsConfiguration?: CfnChannel.MotionGraphicsConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                           \n        readonly nielsenConfiguration?: CfnChannel.NielsenConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                        \n        readonly outputGroups?: Array<CfnChannel.OutputGroupProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                          \n        readonly timecodeConfig?: CfnChannel.TimecodeConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                      \n        readonly videoDescriptions?: Array<CfnChannel.VideoDescriptionProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EncoderSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `EncoderSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_EncoderSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audioDescriptions', cdk.listValidator(CfnChannel_AudioDescriptionPropertyValidator))(properties.audioDescriptions));\n    errors.collect(cdk.propertyValidator('availBlanking', CfnChannel_AvailBlankingPropertyValidator)(properties.availBlanking));\n    errors.collect(cdk.propertyValidator('availConfiguration', CfnChannel_AvailConfigurationPropertyValidator)(properties.availConfiguration));\n    errors.collect(cdk.propertyValidator('blackoutSlate', CfnChannel_BlackoutSlatePropertyValidator)(properties.blackoutSlate));\n    errors.collect(cdk.propertyValidator('captionDescriptions', cdk.listValidator(CfnChannel_CaptionDescriptionPropertyValidator))(properties.captionDescriptions));\n    errors.collect(cdk.propertyValidator('featureActivations', CfnChannel_FeatureActivationsPropertyValidator)(properties.featureActivations));\n    errors.collect(cdk.propertyValidator('globalConfiguration', CfnChannel_GlobalConfigurationPropertyValidator)(properties.globalConfiguration));\n    errors.collect(cdk.propertyValidator('motionGraphicsConfiguration', CfnChannel_MotionGraphicsConfigurationPropertyValidator)(properties.motionGraphicsConfiguration));\n    errors.collect(cdk.propertyValidator('nielsenConfiguration', CfnChannel_NielsenConfigurationPropertyValidator)(properties.nielsenConfiguration));\n    errors.collect(cdk.propertyValidator('outputGroups', cdk.listValidator(CfnChannel_OutputGroupPropertyValidator))(properties.outputGroups));\n    errors.collect(cdk.propertyValidator('timecodeConfig', CfnChannel_TimecodeConfigPropertyValidator)(properties.timecodeConfig));\n    errors.collect(cdk.propertyValidator('videoDescriptions', cdk.listValidator(CfnChannel_VideoDescriptionPropertyValidator))(properties.videoDescriptions));\n    return errors.wrap('supplied properties not correct for \"EncoderSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EncoderSettings` resource\n *\n * @param properties - the TypeScript properties of a `EncoderSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.EncoderSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelEncoderSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_EncoderSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AudioDescriptions: cdk.listMapper(cfnChannelAudioDescriptionPropertyToCloudFormation)(properties.audioDescriptions),\n        AvailBlanking: cfnChannelAvailBlankingPropertyToCloudFormation(properties.availBlanking),\n        AvailConfiguration: cfnChannelAvailConfigurationPropertyToCloudFormation(properties.availConfiguration),\n        BlackoutSlate: cfnChannelBlackoutSlatePropertyToCloudFormation(properties.blackoutSlate),\n        CaptionDescriptions: cdk.listMapper(cfnChannelCaptionDescriptionPropertyToCloudFormation)(properties.captionDescriptions),\n        FeatureActivations: cfnChannelFeatureActivationsPropertyToCloudFormation(properties.featureActivations),\n        GlobalConfiguration: cfnChannelGlobalConfigurationPropertyToCloudFormation(properties.globalConfiguration),\n        MotionGraphicsConfiguration: cfnChannelMotionGraphicsConfigurationPropertyToCloudFormation(properties.motionGraphicsConfiguration),\n        NielsenConfiguration: cfnChannelNielsenConfigurationPropertyToCloudFormation(properties.nielsenConfiguration),\n        OutputGroups: cdk.listMapper(cfnChannelOutputGroupPropertyToCloudFormation)(properties.outputGroups),\n        TimecodeConfig: cfnChannelTimecodeConfigPropertyToCloudFormation(properties.timecodeConfig),\n        VideoDescriptions: cdk.listMapper(cfnChannelVideoDescriptionPropertyToCloudFormation)(properties.videoDescriptions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelEncoderSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.EncoderSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.EncoderSettingsProperty>();\n    ret.addPropertyResult('audioDescriptions', 'AudioDescriptions', properties.AudioDescriptions != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelAudioDescriptionPropertyFromCloudFormation)(properties.AudioDescriptions) : undefined);\n    ret.addPropertyResult('availBlanking', 'AvailBlanking', properties.AvailBlanking != null ? CfnChannelAvailBlankingPropertyFromCloudFormation(properties.AvailBlanking) : undefined);\n    ret.addPropertyResult('availConfiguration', 'AvailConfiguration', properties.AvailConfiguration != null ? CfnChannelAvailConfigurationPropertyFromCloudFormation(properties.AvailConfiguration) : undefined);\n    ret.addPropertyResult('blackoutSlate', 'BlackoutSlate', properties.BlackoutSlate != null ? CfnChannelBlackoutSlatePropertyFromCloudFormation(properties.BlackoutSlate) : undefined);\n    ret.addPropertyResult('captionDescriptions', 'CaptionDescriptions', properties.CaptionDescriptions != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelCaptionDescriptionPropertyFromCloudFormation)(properties.CaptionDescriptions) : undefined);\n    ret.addPropertyResult('featureActivations', 'FeatureActivations', properties.FeatureActivations != null ? CfnChannelFeatureActivationsPropertyFromCloudFormation(properties.FeatureActivations) : undefined);\n    ret.addPropertyResult('globalConfiguration', 'GlobalConfiguration', properties.GlobalConfiguration != null ? CfnChannelGlobalConfigurationPropertyFromCloudFormation(properties.GlobalConfiguration) : undefined);\n    ret.addPropertyResult('motionGraphicsConfiguration', 'MotionGraphicsConfiguration', properties.MotionGraphicsConfiguration != null ? CfnChannelMotionGraphicsConfigurationPropertyFromCloudFormation(properties.MotionGraphicsConfiguration) : undefined);\n    ret.addPropertyResult('nielsenConfiguration', 'NielsenConfiguration', properties.NielsenConfiguration != null ? CfnChannelNielsenConfigurationPropertyFromCloudFormation(properties.NielsenConfiguration) : undefined);\n    ret.addPropertyResult('outputGroups', 'OutputGroups', properties.OutputGroups != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelOutputGroupPropertyFromCloudFormation)(properties.OutputGroups) : undefined);\n    ret.addPropertyResult('timecodeConfig', 'TimecodeConfig', properties.TimecodeConfig != null ? CfnChannelTimecodeConfigPropertyFromCloudFormation(properties.TimecodeConfig) : undefined);\n    ret.addPropertyResult('videoDescriptions', 'VideoDescriptions', properties.VideoDescriptions != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelVideoDescriptionPropertyFromCloudFormation)(properties.VideoDescriptions) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface FailoverConditionProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly failoverConditionSettings?: CfnChannel.FailoverConditionSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FailoverConditionProperty`\n *\n * @param properties - the TypeScript properties of a `FailoverConditionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_FailoverConditionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('failoverConditionSettings', CfnChannel_FailoverConditionSettingsPropertyValidator)(properties.failoverConditionSettings));\n    return errors.wrap('supplied properties not correct for \"FailoverConditionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FailoverCondition` resource\n *\n * @param properties - the TypeScript properties of a `FailoverConditionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FailoverCondition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelFailoverConditionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_FailoverConditionPropertyValidator(properties).assertSuccess();\n    return {\n        FailoverConditionSettings: cfnChannelFailoverConditionSettingsPropertyToCloudFormation(properties.failoverConditionSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelFailoverConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.FailoverConditionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.FailoverConditionProperty>();\n    ret.addPropertyResult('failoverConditionSettings', 'FailoverConditionSettings', properties.FailoverConditionSettings != null ? CfnChannelFailoverConditionSettingsPropertyFromCloudFormation(properties.FailoverConditionSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                            \n    export interface FailoverConditionSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                       \n        readonly audioSilenceSettings?: CfnChannel.AudioSilenceFailoverSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly inputLossSettings?: CfnChannel.InputLossFailoverSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly videoBlackSettings?: CfnChannel.VideoBlackFailoverSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FailoverConditionSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `FailoverConditionSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_FailoverConditionSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audioSilenceSettings', CfnChannel_AudioSilenceFailoverSettingsPropertyValidator)(properties.audioSilenceSettings));\n    errors.collect(cdk.propertyValidator('inputLossSettings', CfnChannel_InputLossFailoverSettingsPropertyValidator)(properties.inputLossSettings));\n    errors.collect(cdk.propertyValidator('videoBlackSettings', CfnChannel_VideoBlackFailoverSettingsPropertyValidator)(properties.videoBlackSettings));\n    return errors.wrap('supplied properties not correct for \"FailoverConditionSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FailoverConditionSettings` resource\n *\n * @param properties - the TypeScript properties of a `FailoverConditionSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FailoverConditionSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelFailoverConditionSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_FailoverConditionSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AudioSilenceSettings: cfnChannelAudioSilenceFailoverSettingsPropertyToCloudFormation(properties.audioSilenceSettings),\n        InputLossSettings: cfnChannelInputLossFailoverSettingsPropertyToCloudFormation(properties.inputLossSettings),\n        VideoBlackSettings: cfnChannelVideoBlackFailoverSettingsPropertyToCloudFormation(properties.videoBlackSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelFailoverConditionSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.FailoverConditionSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.FailoverConditionSettingsProperty>();\n    ret.addPropertyResult('audioSilenceSettings', 'AudioSilenceSettings', properties.AudioSilenceSettings != null ? CfnChannelAudioSilenceFailoverSettingsPropertyFromCloudFormation(properties.AudioSilenceSettings) : undefined);\n    ret.addPropertyResult('inputLossSettings', 'InputLossSettings', properties.InputLossSettings != null ? CfnChannelInputLossFailoverSettingsPropertyFromCloudFormation(properties.InputLossSettings) : undefined);\n    ret.addPropertyResult('videoBlackSettings', 'VideoBlackSettings', properties.VideoBlackSettings != null ? CfnChannelVideoBlackFailoverSettingsPropertyFromCloudFormation(properties.VideoBlackSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface FeatureActivationsProperty {\nn        readonly inputPrepareScheduleActions?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FeatureActivationsProperty`\n *\n * @param properties - the TypeScript properties of a `FeatureActivationsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_FeatureActivationsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('inputPrepareScheduleActions', cdk.validateString)(properties.inputPrepareScheduleActions));\n    return errors.wrap('supplied properties not correct for \"FeatureActivationsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FeatureActivations` resource\n *\n * @param properties - the TypeScript properties of a `FeatureActivationsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FeatureActivations` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelFeatureActivationsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_FeatureActivationsPropertyValidator(properties).assertSuccess();\n    return {\n        InputPrepareScheduleActions: cdk.stringToCloudFormation(properties.inputPrepareScheduleActions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelFeatureActivationsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.FeatureActivationsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.FeatureActivationsProperty>();\n    ret.addPropertyResult('inputPrepareScheduleActions', 'InputPrepareScheduleActions', properties.InputPrepareScheduleActions != null ? cfn_parse.FromCloudFormation.getString(properties.InputPrepareScheduleActions) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                     \n    export interface FecOutputSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly columnDepth?: number;\n                                                                                                                                                                                                                                                                                        \n        readonly includeFec?: string;\nn        readonly rowLength?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FecOutputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `FecOutputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_FecOutputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('columnDepth', cdk.validateNumber)(properties.columnDepth));\n    errors.collect(cdk.propertyValidator('includeFec', cdk.validateString)(properties.includeFec));\n    errors.collect(cdk.propertyValidator('rowLength', cdk.validateNumber)(properties.rowLength));\n    return errors.wrap('supplied properties not correct for \"FecOutputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FecOutputSettings` resource\n *\n * @param properties - the TypeScript properties of a `FecOutputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FecOutputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelFecOutputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_FecOutputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ColumnDepth: cdk.numberToCloudFormation(properties.columnDepth),\n        IncludeFec: cdk.stringToCloudFormation(properties.includeFec),\n        RowLength: cdk.numberToCloudFormation(properties.rowLength),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelFecOutputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.FecOutputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.FecOutputSettingsProperty>();\n    ret.addPropertyResult('columnDepth', 'ColumnDepth', properties.ColumnDepth != null ? cfn_parse.FromCloudFormation.getNumber(properties.ColumnDepth) : undefined);\n    ret.addPropertyResult('includeFec', 'IncludeFec', properties.IncludeFec != null ? cfn_parse.FromCloudFormation.getString(properties.IncludeFec) : undefined);\n    ret.addPropertyResult('rowLength', 'RowLength', properties.RowLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.RowLength) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                         \n    export interface Fmp4HlsSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly audioRenditionSets?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly nielsenId3Behavior?: string;\n                                                                                                                                                                                                                                                                                                                              \n        readonly timedMetadataBehavior?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Fmp4HlsSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `Fmp4HlsSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Fmp4HlsSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audioRenditionSets', cdk.validateString)(properties.audioRenditionSets));\n    errors.collect(cdk.propertyValidator('nielsenId3Behavior', cdk.validateString)(properties.nielsenId3Behavior));\n    errors.collect(cdk.propertyValidator('timedMetadataBehavior', cdk.validateString)(properties.timedMetadataBehavior));\n    return errors.wrap('supplied properties not correct for \"Fmp4HlsSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Fmp4HlsSettings` resource\n *\n * @param properties - the TypeScript properties of a `Fmp4HlsSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Fmp4HlsSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelFmp4HlsSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Fmp4HlsSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AudioRenditionSets: cdk.stringToCloudFormation(properties.audioRenditionSets),\n        NielsenId3Behavior: cdk.stringToCloudFormation(properties.nielsenId3Behavior),\n        TimedMetadataBehavior: cdk.stringToCloudFormation(properties.timedMetadataBehavior),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelFmp4HlsSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Fmp4HlsSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Fmp4HlsSettingsProperty>();\n    ret.addPropertyResult('audioRenditionSets', 'AudioRenditionSets', properties.AudioRenditionSets != null ? cfn_parse.FromCloudFormation.getString(properties.AudioRenditionSets) : undefined);\n    ret.addPropertyResult('nielsenId3Behavior', 'NielsenId3Behavior', properties.NielsenId3Behavior != null ? cfn_parse.FromCloudFormation.getString(properties.NielsenId3Behavior) : undefined);\n    ret.addPropertyResult('timedMetadataBehavior', 'TimedMetadataBehavior', properties.TimedMetadataBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataBehavior) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                              \n    export interface FrameCaptureCdnSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                   \n        readonly frameCaptureS3Settings?: CfnChannel.FrameCaptureS3SettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FrameCaptureCdnSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `FrameCaptureCdnSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_FrameCaptureCdnSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('frameCaptureS3Settings', CfnChannel_FrameCaptureS3SettingsPropertyValidator)(properties.frameCaptureS3Settings));\n    return errors.wrap('supplied properties not correct for \"FrameCaptureCdnSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureCdnSettings` resource\n *\n * @param properties - the TypeScript properties of a `FrameCaptureCdnSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureCdnSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelFrameCaptureCdnSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_FrameCaptureCdnSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        FrameCaptureS3Settings: cfnChannelFrameCaptureS3SettingsPropertyToCloudFormation(properties.frameCaptureS3Settings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelFrameCaptureCdnSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.FrameCaptureCdnSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.FrameCaptureCdnSettingsProperty>();\n    ret.addPropertyResult('frameCaptureS3Settings', 'FrameCaptureS3Settings', properties.FrameCaptureS3Settings != null ? CfnChannelFrameCaptureS3SettingsPropertyFromCloudFormation(properties.FrameCaptureS3Settings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                        \n    export interface FrameCaptureGroupSettingsProperty {\nn        readonly destination?: CfnChannel.OutputLocationRefProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly frameCaptureCdnSettings?: CfnChannel.FrameCaptureCdnSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FrameCaptureGroupSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `FrameCaptureGroupSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_FrameCaptureGroupSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('frameCaptureCdnSettings', CfnChannel_FrameCaptureCdnSettingsPropertyValidator)(properties.frameCaptureCdnSettings));\n    return errors.wrap('supplied properties not correct for \"FrameCaptureGroupSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureGroupSettings` resource\n *\n * @param properties - the TypeScript properties of a `FrameCaptureGroupSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureGroupSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelFrameCaptureGroupSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_FrameCaptureGroupSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),\n        FrameCaptureCdnSettings: cfnChannelFrameCaptureCdnSettingsPropertyToCloudFormation(properties.frameCaptureCdnSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelFrameCaptureGroupSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.FrameCaptureGroupSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.FrameCaptureGroupSettingsProperty>();\n    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);\n    ret.addPropertyResult('frameCaptureCdnSettings', 'FrameCaptureCdnSettings', properties.FrameCaptureCdnSettings != null ? CfnChannelFrameCaptureCdnSettingsPropertyFromCloudFormation(properties.FrameCaptureCdnSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                           \n    export interface FrameCaptureHlsSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FrameCaptureHlsSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `FrameCaptureHlsSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_FrameCaptureHlsSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"FrameCaptureHlsSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureHlsSettings` resource\n *\n * @param properties - the TypeScript properties of a `FrameCaptureHlsSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureHlsSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelFrameCaptureHlsSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_FrameCaptureHlsSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelFrameCaptureHlsSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.FrameCaptureHlsSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.FrameCaptureHlsSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                        \n    export interface FrameCaptureOutputSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly nameModifier?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FrameCaptureOutputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `FrameCaptureOutputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_FrameCaptureOutputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('nameModifier', cdk.validateString)(properties.nameModifier));\n    return errors.wrap('supplied properties not correct for \"FrameCaptureOutputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureOutputSettings` resource\n *\n * @param properties - the TypeScript properties of a `FrameCaptureOutputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureOutputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelFrameCaptureOutputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_FrameCaptureOutputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        NameModifier: cdk.stringToCloudFormation(properties.nameModifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelFrameCaptureOutputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.FrameCaptureOutputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.FrameCaptureOutputSettingsProperty>();\n    ret.addPropertyResult('nameModifier', 'NameModifier', properties.NameModifier != null ? cfn_parse.FromCloudFormation.getString(properties.NameModifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                              \n    export interface FrameCaptureS3SettingsProperty {\n                                                                                                                                                                                                                                                                                                                      \n        readonly cannedAcl?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FrameCaptureS3SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `FrameCaptureS3SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_FrameCaptureS3SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cannedAcl', cdk.validateString)(properties.cannedAcl));\n    return errors.wrap('supplied properties not correct for \"FrameCaptureS3SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureS3Settings` resource\n *\n * @param properties - the TypeScript properties of a `FrameCaptureS3SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureS3Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelFrameCaptureS3SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_FrameCaptureS3SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        CannedAcl: cdk.stringToCloudFormation(properties.cannedAcl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelFrameCaptureS3SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.FrameCaptureS3SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.FrameCaptureS3SettingsProperty>();\n    ret.addPropertyResult('cannedAcl', 'CannedAcl', properties.CannedAcl != null ? cfn_parse.FromCloudFormation.getString(properties.CannedAcl) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                               \n    export interface FrameCaptureSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly captureInterval?: number;\n                                                                                                                                                                                                                                                                                            \n        readonly captureIntervalUnits?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FrameCaptureSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `FrameCaptureSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_FrameCaptureSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('captureInterval', cdk.validateNumber)(properties.captureInterval));\n    errors.collect(cdk.propertyValidator('captureIntervalUnits', cdk.validateString)(properties.captureIntervalUnits));\n    return errors.wrap('supplied properties not correct for \"FrameCaptureSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureSettings` resource\n *\n * @param properties - the TypeScript properties of a `FrameCaptureSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.FrameCaptureSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelFrameCaptureSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_FrameCaptureSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        CaptureInterval: cdk.numberToCloudFormation(properties.captureInterval),\n        CaptureIntervalUnits: cdk.stringToCloudFormation(properties.captureIntervalUnits),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelFrameCaptureSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.FrameCaptureSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.FrameCaptureSettingsProperty>();\n    ret.addPropertyResult('captureInterval', 'CaptureInterval', properties.CaptureInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.CaptureInterval) : undefined);\n    ret.addPropertyResult('captureIntervalUnits', 'CaptureIntervalUnits', properties.CaptureIntervalUnits != null ? cfn_parse.FromCloudFormation.getString(properties.CaptureIntervalUnits) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                            \n    export interface GlobalConfigurationProperty {\n                                                                                                                                                                                                                                                                                                          \n        readonly initialAudioGain?: number;\nn        readonly inputEndAction?: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly inputLossBehavior?: CfnChannel.InputLossBehaviorProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly outputLockingMode?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly outputTimingSource?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly supportLowFramerateInputs?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GlobalConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `GlobalConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_GlobalConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('initialAudioGain', cdk.validateNumber)(properties.initialAudioGain));\n    errors.collect(cdk.propertyValidator('inputEndAction', cdk.validateString)(properties.inputEndAction));\n    errors.collect(cdk.propertyValidator('inputLossBehavior', CfnChannel_InputLossBehaviorPropertyValidator)(properties.inputLossBehavior));\n    errors.collect(cdk.propertyValidator('outputLockingMode', cdk.validateString)(properties.outputLockingMode));\n    errors.collect(cdk.propertyValidator('outputTimingSource', cdk.validateString)(properties.outputTimingSource));\n    errors.collect(cdk.propertyValidator('supportLowFramerateInputs', cdk.validateString)(properties.supportLowFramerateInputs));\n    return errors.wrap('supplied properties not correct for \"GlobalConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.GlobalConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `GlobalConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.GlobalConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelGlobalConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_GlobalConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        InitialAudioGain: cdk.numberToCloudFormation(properties.initialAudioGain),\n        InputEndAction: cdk.stringToCloudFormation(properties.inputEndAction),\n        InputLossBehavior: cfnChannelInputLossBehaviorPropertyToCloudFormation(properties.inputLossBehavior),\n        OutputLockingMode: cdk.stringToCloudFormation(properties.outputLockingMode),\n        OutputTimingSource: cdk.stringToCloudFormation(properties.outputTimingSource),\n        SupportLowFramerateInputs: cdk.stringToCloudFormation(properties.supportLowFramerateInputs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelGlobalConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.GlobalConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.GlobalConfigurationProperty>();\n    ret.addPropertyResult('initialAudioGain', 'InitialAudioGain', properties.InitialAudioGain != null ? cfn_parse.FromCloudFormation.getNumber(properties.InitialAudioGain) : undefined);\n    ret.addPropertyResult('inputEndAction', 'InputEndAction', properties.InputEndAction != null ? cfn_parse.FromCloudFormation.getString(properties.InputEndAction) : undefined);\n    ret.addPropertyResult('inputLossBehavior', 'InputLossBehavior', properties.InputLossBehavior != null ? CfnChannelInputLossBehaviorPropertyFromCloudFormation(properties.InputLossBehavior) : undefined);\n    ret.addPropertyResult('outputLockingMode', 'OutputLockingMode', properties.OutputLockingMode != null ? cfn_parse.FromCloudFormation.getString(properties.OutputLockingMode) : undefined);\n    ret.addPropertyResult('outputTimingSource', 'OutputTimingSource', properties.OutputTimingSource != null ? cfn_parse.FromCloudFormation.getString(properties.OutputTimingSource) : undefined);\n    ret.addPropertyResult('supportLowFramerateInputs', 'SupportLowFramerateInputs', properties.SupportLowFramerateInputs != null ? cfn_parse.FromCloudFormation.getString(properties.SupportLowFramerateInputs) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                             \n    export interface H264ColorSpaceSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                 \n        readonly colorSpacePassthroughSettings?: CfnChannel.ColorSpacePassthroughSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                               \n        readonly rec601Settings?: CfnChannel.Rec601SettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                               \n        readonly rec709Settings?: CfnChannel.Rec709SettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `H264ColorSpaceSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `H264ColorSpaceSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_H264ColorSpaceSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('colorSpacePassthroughSettings', CfnChannel_ColorSpacePassthroughSettingsPropertyValidator)(properties.colorSpacePassthroughSettings));\n    errors.collect(cdk.propertyValidator('rec601Settings', CfnChannel_Rec601SettingsPropertyValidator)(properties.rec601Settings));\n    errors.collect(cdk.propertyValidator('rec709Settings', CfnChannel_Rec709SettingsPropertyValidator)(properties.rec709Settings));\n    return errors.wrap('supplied properties not correct for \"H264ColorSpaceSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H264ColorSpaceSettings` resource\n *\n * @param properties - the TypeScript properties of a `H264ColorSpaceSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H264ColorSpaceSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelH264ColorSpaceSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_H264ColorSpaceSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ColorSpacePassthroughSettings: cfnChannelColorSpacePassthroughSettingsPropertyToCloudFormation(properties.colorSpacePassthroughSettings),\n        Rec601Settings: cfnChannelRec601SettingsPropertyToCloudFormation(properties.rec601Settings),\n        Rec709Settings: cfnChannelRec709SettingsPropertyToCloudFormation(properties.rec709Settings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelH264ColorSpaceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.H264ColorSpaceSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.H264ColorSpaceSettingsProperty>();\n    ret.addPropertyResult('colorSpacePassthroughSettings', 'ColorSpacePassthroughSettings', properties.ColorSpacePassthroughSettings != null ? CfnChannelColorSpacePassthroughSettingsPropertyFromCloudFormation(properties.ColorSpacePassthroughSettings) : undefined);\n    ret.addPropertyResult('rec601Settings', 'Rec601Settings', properties.Rec601Settings != null ? CfnChannelRec601SettingsPropertyFromCloudFormation(properties.Rec601Settings) : undefined);\n    ret.addPropertyResult('rec709Settings', 'Rec709Settings', properties.Rec709Settings != null ? CfnChannelRec709SettingsPropertyFromCloudFormation(properties.Rec709Settings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                             \n    export interface H264FilterSettingsProperty {\n                                                                                                                                                                                                                                                                                                             \n        readonly temporalFilterSettings?: CfnChannel.TemporalFilterSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `H264FilterSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `H264FilterSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_H264FilterSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('temporalFilterSettings', CfnChannel_TemporalFilterSettingsPropertyValidator)(properties.temporalFilterSettings));\n    return errors.wrap('supplied properties not correct for \"H264FilterSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H264FilterSettings` resource\n *\n * @param properties - the TypeScript properties of a `H264FilterSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H264FilterSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelH264FilterSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_H264FilterSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        TemporalFilterSettings: cfnChannelTemporalFilterSettingsPropertyToCloudFormation(properties.temporalFilterSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelH264FilterSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.H264FilterSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.H264FilterSettingsProperty>();\n    ret.addPropertyResult('temporalFilterSettings', 'TemporalFilterSettings', properties.TemporalFilterSettings != null ? CfnChannelTemporalFilterSettingsPropertyFromCloudFormation(properties.TemporalFilterSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                           \n    export interface H264SettingsProperty {\n                                                                                                                                                                                                                                                                                                                                        \n        readonly adaptiveQuantization?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly afdSignaling?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly bitrate?: number;\n                                                                                                                                                                                                                                                                                                              \n        readonly bufFillPct?: number;\n                                                                                                                                                                                                                                                                                    \n        readonly bufSize?: number;\n                                                                                                                                                                                                                                                                             \n        readonly colorMetadata?: string;\n                                                                                                                                                                                                                                                                                                   \n        readonly colorSpaceSettings?: CfnChannel.H264ColorSpaceSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                   \n        readonly entropyEncoding?: string;\n                                                                                                                                                                                                                                                                                   \n        readonly filterSettings?: CfnChannel.H264FilterSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly fixedAfd?: string;\n                                                                                                                                                                                                                                                                                                                                \n        readonly flickerAq?: string;\nn        readonly forceFieldPictures?: string;\nn        readonly framerateControl?: string;\n                                                                                                                                                                                                                                                                   \n        readonly framerateDenominator?: number;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly framerateNumerator?: number;\n                                                                                                                                                                                                                                                                                                               \n        readonly gopBReference?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly gopClosedCadence?: number;\n                                                                                                                                                                                                                                                                                 \n        readonly gopNumBFrames?: number;\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly gopSize?: number;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly gopSizeUnits?: string;\n                                                                                                                                                                                                                                         \n        readonly level?: string;\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly lookAheadRateControl?: string;\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly maxBitrate?: number;\nn        readonly minIInterval?: number;\n                                                                                                                                                                                                                                                                                                                                                            \n        readonly numRefFrames?: number;\nn        readonly parControl?: string;\n                                                                                                                                                                                                                                                                     \n        readonly parDenominator?: number;\n                                                                                                                                                                                                                                                                 \n        readonly parNumerator?: number;\n                                                                                                                                                                                                                                            \n        readonly profile?: string;\nn        readonly qualityLevel?: string;\nn        readonly qvbrQualityLevel?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly rateControlMode?: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly scanType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly sceneChangeDetect?: string;\nn        readonly slices?: number;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly softness?: number;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly spatialAq?: string;\n                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly subgopLength?: string;\n                                                                                                                                                                                                                                                                                    \n        readonly syntax?: string;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly temporalAq?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly timecodeInsertion?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `H264SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `H264SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_H264SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('adaptiveQuantization', cdk.validateString)(properties.adaptiveQuantization));\n    errors.collect(cdk.propertyValidator('afdSignaling', cdk.validateString)(properties.afdSignaling));\n    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));\n    errors.collect(cdk.propertyValidator('bufFillPct', cdk.validateNumber)(properties.bufFillPct));\n    errors.collect(cdk.propertyValidator('bufSize', cdk.validateNumber)(properties.bufSize));\n    errors.collect(cdk.propertyValidator('colorMetadata', cdk.validateString)(properties.colorMetadata));\n    errors.collect(cdk.propertyValidator('colorSpaceSettings', CfnChannel_H264ColorSpaceSettingsPropertyValidator)(properties.colorSpaceSettings));\n    errors.collect(cdk.propertyValidator('entropyEncoding', cdk.validateString)(properties.entropyEncoding));\n    errors.collect(cdk.propertyValidator('filterSettings', CfnChannel_H264FilterSettingsPropertyValidator)(properties.filterSettings));\n    errors.collect(cdk.propertyValidator('fixedAfd', cdk.validateString)(properties.fixedAfd));\n    errors.collect(cdk.propertyValidator('flickerAq', cdk.validateString)(properties.flickerAq));\n    errors.collect(cdk.propertyValidator('forceFieldPictures', cdk.validateString)(properties.forceFieldPictures));\n    errors.collect(cdk.propertyValidator('framerateControl', cdk.validateString)(properties.framerateControl));\n    errors.collect(cdk.propertyValidator('framerateDenominator', cdk.validateNumber)(properties.framerateDenominator));\n    errors.collect(cdk.propertyValidator('framerateNumerator', cdk.validateNumber)(properties.framerateNumerator));\n    errors.collect(cdk.propertyValidator('gopBReference', cdk.validateString)(properties.gopBReference));\n    errors.collect(cdk.propertyValidator('gopClosedCadence', cdk.validateNumber)(properties.gopClosedCadence));\n    errors.collect(cdk.propertyValidator('gopNumBFrames', cdk.validateNumber)(properties.gopNumBFrames));\n    errors.collect(cdk.propertyValidator('gopSize', cdk.validateNumber)(properties.gopSize));\n    errors.collect(cdk.propertyValidator('gopSizeUnits', cdk.validateString)(properties.gopSizeUnits));\n    errors.collect(cdk.propertyValidator('level', cdk.validateString)(properties.level));\n    errors.collect(cdk.propertyValidator('lookAheadRateControl', cdk.validateString)(properties.lookAheadRateControl));\n    errors.collect(cdk.propertyValidator('maxBitrate', cdk.validateNumber)(properties.maxBitrate));\n    errors.collect(cdk.propertyValidator('minIInterval', cdk.validateNumber)(properties.minIInterval));\n    errors.collect(cdk.propertyValidator('numRefFrames', cdk.validateNumber)(properties.numRefFrames));\n    errors.collect(cdk.propertyValidator('parControl', cdk.validateString)(properties.parControl));\n    errors.collect(cdk.propertyValidator('parDenominator', cdk.validateNumber)(properties.parDenominator));\n    errors.collect(cdk.propertyValidator('parNumerator', cdk.validateNumber)(properties.parNumerator));\n    errors.collect(cdk.propertyValidator('profile', cdk.validateString)(properties.profile));\n    errors.collect(cdk.propertyValidator('qualityLevel', cdk.validateString)(properties.qualityLevel));\n    errors.collect(cdk.propertyValidator('qvbrQualityLevel', cdk.validateNumber)(properties.qvbrQualityLevel));\n    errors.collect(cdk.propertyValidator('rateControlMode', cdk.validateString)(properties.rateControlMode));\n    errors.collect(cdk.propertyValidator('scanType', cdk.validateString)(properties.scanType));\n    errors.collect(cdk.propertyValidator('sceneChangeDetect', cdk.validateString)(properties.sceneChangeDetect));\n    errors.collect(cdk.propertyValidator('slices', cdk.validateNumber)(properties.slices));\n    errors.collect(cdk.propertyValidator('softness', cdk.validateNumber)(properties.softness));\n    errors.collect(cdk.propertyValidator('spatialAq', cdk.validateString)(properties.spatialAq));\n    errors.collect(cdk.propertyValidator('subgopLength', cdk.validateString)(properties.subgopLength));\n    errors.collect(cdk.propertyValidator('syntax', cdk.validateString)(properties.syntax));\n    errors.collect(cdk.propertyValidator('temporalAq', cdk.validateString)(properties.temporalAq));\n    errors.collect(cdk.propertyValidator('timecodeInsertion', cdk.validateString)(properties.timecodeInsertion));\n    return errors.wrap('supplied properties not correct for \"H264SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H264Settings` resource\n *\n * @param properties - the TypeScript properties of a `H264SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H264Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelH264SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_H264SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AdaptiveQuantization: cdk.stringToCloudFormation(properties.adaptiveQuantization),\n        AfdSignaling: cdk.stringToCloudFormation(properties.afdSignaling),\n        Bitrate: cdk.numberToCloudFormation(properties.bitrate),\n        BufFillPct: cdk.numberToCloudFormation(properties.bufFillPct),\n        BufSize: cdk.numberToCloudFormation(properties.bufSize),\n        ColorMetadata: cdk.stringToCloudFormation(properties.colorMetadata),\n        ColorSpaceSettings: cfnChannelH264ColorSpaceSettingsPropertyToCloudFormation(properties.colorSpaceSettings),\n        EntropyEncoding: cdk.stringToCloudFormation(properties.entropyEncoding),\n        FilterSettings: cfnChannelH264FilterSettingsPropertyToCloudFormation(properties.filterSettings),\n        FixedAfd: cdk.stringToCloudFormation(properties.fixedAfd),\n        FlickerAq: cdk.stringToCloudFormation(properties.flickerAq),\n        ForceFieldPictures: cdk.stringToCloudFormation(properties.forceFieldPictures),\n        FramerateControl: cdk.stringToCloudFormation(properties.framerateControl),\n        FramerateDenominator: cdk.numberToCloudFormation(properties.framerateDenominator),\n        FramerateNumerator: cdk.numberToCloudFormation(properties.framerateNumerator),\n        GopBReference: cdk.stringToCloudFormation(properties.gopBReference),\n        GopClosedCadence: cdk.numberToCloudFormation(properties.gopClosedCadence),\n        GopNumBFrames: cdk.numberToCloudFormation(properties.gopNumBFrames),\n        GopSize: cdk.numberToCloudFormation(properties.gopSize),\n        GopSizeUnits: cdk.stringToCloudFormation(properties.gopSizeUnits),\n        Level: cdk.stringToCloudFormation(properties.level),\n        LookAheadRateControl: cdk.stringToCloudFormation(properties.lookAheadRateControl),\n        MaxBitrate: cdk.numberToCloudFormation(properties.maxBitrate),\n        MinIInterval: cdk.numberToCloudFormation(properties.minIInterval),\n        NumRefFrames: cdk.numberToCloudFormation(properties.numRefFrames),\n        ParControl: cdk.stringToCloudFormation(properties.parControl),\n        ParDenominator: cdk.numberToCloudFormation(properties.parDenominator),\n        ParNumerator: cdk.numberToCloudFormation(properties.parNumerator),\n        Profile: cdk.stringToCloudFormation(properties.profile),\n        QualityLevel: cdk.stringToCloudFormation(properties.qualityLevel),\n        QvbrQualityLevel: cdk.numberToCloudFormation(properties.qvbrQualityLevel),\n        RateControlMode: cdk.stringToCloudFormation(properties.rateControlMode),\n        ScanType: cdk.stringToCloudFormation(properties.scanType),\n        SceneChangeDetect: cdk.stringToCloudFormation(properties.sceneChangeDetect),\n        Slices: cdk.numberToCloudFormation(properties.slices),\n        Softness: cdk.numberToCloudFormation(properties.softness),\n        SpatialAq: cdk.stringToCloudFormation(properties.spatialAq),\n        SubgopLength: cdk.stringToCloudFormation(properties.subgopLength),\n        Syntax: cdk.stringToCloudFormation(properties.syntax),\n        TemporalAq: cdk.stringToCloudFormation(properties.temporalAq),\n        TimecodeInsertion: cdk.stringToCloudFormation(properties.timecodeInsertion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelH264SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.H264SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.H264SettingsProperty>();\n    ret.addPropertyResult('adaptiveQuantization', 'AdaptiveQuantization', properties.AdaptiveQuantization != null ? cfn_parse.FromCloudFormation.getString(properties.AdaptiveQuantization) : undefined);\n    ret.addPropertyResult('afdSignaling', 'AfdSignaling', properties.AfdSignaling != null ? cfn_parse.FromCloudFormation.getString(properties.AfdSignaling) : undefined);\n    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);\n    ret.addPropertyResult('bufFillPct', 'BufFillPct', properties.BufFillPct != null ? cfn_parse.FromCloudFormation.getNumber(properties.BufFillPct) : undefined);\n    ret.addPropertyResult('bufSize', 'BufSize', properties.BufSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.BufSize) : undefined);\n    ret.addPropertyResult('colorMetadata', 'ColorMetadata', properties.ColorMetadata != null ? cfn_parse.FromCloudFormation.getString(properties.ColorMetadata) : undefined);\n    ret.addPropertyResult('colorSpaceSettings', 'ColorSpaceSettings', properties.ColorSpaceSettings != null ? CfnChannelH264ColorSpaceSettingsPropertyFromCloudFormation(properties.ColorSpaceSettings) : undefined);\n    ret.addPropertyResult('entropyEncoding', 'EntropyEncoding', properties.EntropyEncoding != null ? cfn_parse.FromCloudFormation.getString(properties.EntropyEncoding) : undefined);\n    ret.addPropertyResult('filterSettings', 'FilterSettings', properties.FilterSettings != null ? CfnChannelH264FilterSettingsPropertyFromCloudFormation(properties.FilterSettings) : undefined);\n    ret.addPropertyResult('fixedAfd', 'FixedAfd', properties.FixedAfd != null ? cfn_parse.FromCloudFormation.getString(properties.FixedAfd) : undefined);\n    ret.addPropertyResult('flickerAq', 'FlickerAq', properties.FlickerAq != null ? cfn_parse.FromCloudFormation.getString(properties.FlickerAq) : undefined);\n    ret.addPropertyResult('forceFieldPictures', 'ForceFieldPictures', properties.ForceFieldPictures != null ? cfn_parse.FromCloudFormation.getString(properties.ForceFieldPictures) : undefined);\n    ret.addPropertyResult('framerateControl', 'FramerateControl', properties.FramerateControl != null ? cfn_parse.FromCloudFormation.getString(properties.FramerateControl) : undefined);\n    ret.addPropertyResult('framerateDenominator', 'FramerateDenominator', properties.FramerateDenominator != null ? cfn_parse.FromCloudFormation.getNumber(properties.FramerateDenominator) : undefined);\n    ret.addPropertyResult('framerateNumerator', 'FramerateNumerator', properties.FramerateNumerator != null ? cfn_parse.FromCloudFormation.getNumber(properties.FramerateNumerator) : undefined);\n    ret.addPropertyResult('gopBReference', 'GopBReference', properties.GopBReference != null ? cfn_parse.FromCloudFormation.getString(properties.GopBReference) : undefined);\n    ret.addPropertyResult('gopClosedCadence', 'GopClosedCadence', properties.GopClosedCadence != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopClosedCadence) : undefined);\n    ret.addPropertyResult('gopNumBFrames', 'GopNumBFrames', properties.GopNumBFrames != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopNumBFrames) : undefined);\n    ret.addPropertyResult('gopSize', 'GopSize', properties.GopSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopSize) : undefined);\n    ret.addPropertyResult('gopSizeUnits', 'GopSizeUnits', properties.GopSizeUnits != null ? cfn_parse.FromCloudFormation.getString(properties.GopSizeUnits) : undefined);\n    ret.addPropertyResult('level', 'Level', properties.Level != null ? cfn_parse.FromCloudFormation.getString(properties.Level) : undefined);\n    ret.addPropertyResult('lookAheadRateControl', 'LookAheadRateControl', properties.LookAheadRateControl != null ? cfn_parse.FromCloudFormation.getString(properties.LookAheadRateControl) : undefined);\n    ret.addPropertyResult('maxBitrate', 'MaxBitrate', properties.MaxBitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxBitrate) : undefined);\n    ret.addPropertyResult('minIInterval', 'MinIInterval', properties.MinIInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinIInterval) : undefined);\n    ret.addPropertyResult('numRefFrames', 'NumRefFrames', properties.NumRefFrames != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRefFrames) : undefined);\n    ret.addPropertyResult('parControl', 'ParControl', properties.ParControl != null ? cfn_parse.FromCloudFormation.getString(properties.ParControl) : undefined);\n    ret.addPropertyResult('parDenominator', 'ParDenominator', properties.ParDenominator != null ? cfn_parse.FromCloudFormation.getNumber(properties.ParDenominator) : undefined);\n    ret.addPropertyResult('parNumerator', 'ParNumerator', properties.ParNumerator != null ? cfn_parse.FromCloudFormation.getNumber(properties.ParNumerator) : undefined);\n    ret.addPropertyResult('profile', 'Profile', properties.Profile != null ? cfn_parse.FromCloudFormation.getString(properties.Profile) : undefined);\n    ret.addPropertyResult('qualityLevel', 'QualityLevel', properties.QualityLevel != null ? cfn_parse.FromCloudFormation.getString(properties.QualityLevel) : undefined);\n    ret.addPropertyResult('qvbrQualityLevel', 'QvbrQualityLevel', properties.QvbrQualityLevel != null ? cfn_parse.FromCloudFormation.getNumber(properties.QvbrQualityLevel) : undefined);\n    ret.addPropertyResult('rateControlMode', 'RateControlMode', properties.RateControlMode != null ? cfn_parse.FromCloudFormation.getString(properties.RateControlMode) : undefined);\n    ret.addPropertyResult('scanType', 'ScanType', properties.ScanType != null ? cfn_parse.FromCloudFormation.getString(properties.ScanType) : undefined);\n    ret.addPropertyResult('sceneChangeDetect', 'SceneChangeDetect', properties.SceneChangeDetect != null ? cfn_parse.FromCloudFormation.getString(properties.SceneChangeDetect) : undefined);\n    ret.addPropertyResult('slices', 'Slices', properties.Slices != null ? cfn_parse.FromCloudFormation.getNumber(properties.Slices) : undefined);\n    ret.addPropertyResult('softness', 'Softness', properties.Softness != null ? cfn_parse.FromCloudFormation.getNumber(properties.Softness) : undefined);\n    ret.addPropertyResult('spatialAq', 'SpatialAq', properties.SpatialAq != null ? cfn_parse.FromCloudFormation.getString(properties.SpatialAq) : undefined);\n    ret.addPropertyResult('subgopLength', 'SubgopLength', properties.SubgopLength != null ? cfn_parse.FromCloudFormation.getString(properties.SubgopLength) : undefined);\n    ret.addPropertyResult('syntax', 'Syntax', properties.Syntax != null ? cfn_parse.FromCloudFormation.getString(properties.Syntax) : undefined);\n    ret.addPropertyResult('temporalAq', 'TemporalAq', properties.TemporalAq != null ? cfn_parse.FromCloudFormation.getString(properties.TemporalAq) : undefined);\n    ret.addPropertyResult('timecodeInsertion', 'TimecodeInsertion', properties.TimecodeInsertion != null ? cfn_parse.FromCloudFormation.getString(properties.TimecodeInsertion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                         \n    export interface H265ColorSpaceSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                 \n        readonly colorSpacePassthroughSettings?: CfnChannel.ColorSpacePassthroughSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                             \n        readonly hdr10Settings?: CfnChannel.Hdr10SettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                               \n        readonly rec601Settings?: CfnChannel.Rec601SettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                               \n        readonly rec709Settings?: CfnChannel.Rec709SettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `H265ColorSpaceSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `H265ColorSpaceSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_H265ColorSpaceSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('colorSpacePassthroughSettings', CfnChannel_ColorSpacePassthroughSettingsPropertyValidator)(properties.colorSpacePassthroughSettings));\n    errors.collect(cdk.propertyValidator('hdr10Settings', CfnChannel_Hdr10SettingsPropertyValidator)(properties.hdr10Settings));\n    errors.collect(cdk.propertyValidator('rec601Settings', CfnChannel_Rec601SettingsPropertyValidator)(properties.rec601Settings));\n    errors.collect(cdk.propertyValidator('rec709Settings', CfnChannel_Rec709SettingsPropertyValidator)(properties.rec709Settings));\n    return errors.wrap('supplied properties not correct for \"H265ColorSpaceSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H265ColorSpaceSettings` resource\n *\n * @param properties - the TypeScript properties of a `H265ColorSpaceSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H265ColorSpaceSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelH265ColorSpaceSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_H265ColorSpaceSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ColorSpacePassthroughSettings: cfnChannelColorSpacePassthroughSettingsPropertyToCloudFormation(properties.colorSpacePassthroughSettings),\n        Hdr10Settings: cfnChannelHdr10SettingsPropertyToCloudFormation(properties.hdr10Settings),\n        Rec601Settings: cfnChannelRec601SettingsPropertyToCloudFormation(properties.rec601Settings),\n        Rec709Settings: cfnChannelRec709SettingsPropertyToCloudFormation(properties.rec709Settings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelH265ColorSpaceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.H265ColorSpaceSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.H265ColorSpaceSettingsProperty>();\n    ret.addPropertyResult('colorSpacePassthroughSettings', 'ColorSpacePassthroughSettings', properties.ColorSpacePassthroughSettings != null ? CfnChannelColorSpacePassthroughSettingsPropertyFromCloudFormation(properties.ColorSpacePassthroughSettings) : undefined);\n    ret.addPropertyResult('hdr10Settings', 'Hdr10Settings', properties.Hdr10Settings != null ? CfnChannelHdr10SettingsPropertyFromCloudFormation(properties.Hdr10Settings) : undefined);\n    ret.addPropertyResult('rec601Settings', 'Rec601Settings', properties.Rec601Settings != null ? CfnChannelRec601SettingsPropertyFromCloudFormation(properties.Rec601Settings) : undefined);\n    ret.addPropertyResult('rec709Settings', 'Rec709Settings', properties.Rec709Settings != null ? CfnChannelRec709SettingsPropertyFromCloudFormation(properties.Rec709Settings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                             \n    export interface H265FilterSettingsProperty {\n                                                                                                                                                                                                                                                                                                             \n        readonly temporalFilterSettings?: CfnChannel.TemporalFilterSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `H265FilterSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `H265FilterSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_H265FilterSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('temporalFilterSettings', CfnChannel_TemporalFilterSettingsPropertyValidator)(properties.temporalFilterSettings));\n    return errors.wrap('supplied properties not correct for \"H265FilterSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H265FilterSettings` resource\n *\n * @param properties - the TypeScript properties of a `H265FilterSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H265FilterSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelH265FilterSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_H265FilterSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        TemporalFilterSettings: cfnChannelTemporalFilterSettingsPropertyToCloudFormation(properties.temporalFilterSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelH265FilterSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.H265FilterSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.H265FilterSettingsProperty>();\n    ret.addPropertyResult('temporalFilterSettings', 'TemporalFilterSettings', properties.TemporalFilterSettings != null ? CfnChannelTemporalFilterSettingsPropertyFromCloudFormation(properties.TemporalFilterSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                         \n    export interface H265SettingsProperty {\n                                                                                                                                                                                                                                                                                                                               \n        readonly adaptiveQuantization?: string;\nn        readonly afdSignaling?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly alternativeTransferFunction?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly bitrate?: number;\n                                                                                                                                                                                                                                                                     \n        readonly bufSize?: number;\n                                                                                                                                                                                                                                                                            \n        readonly colorMetadata?: string;\n                                                                                                                                                                                                                                                          \n        readonly colorSpaceSettings?: CfnChannel.H265ColorSpaceSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                   \n        readonly filterSettings?: CfnChannel.H265FilterSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly fixedAfd?: string;\n                                                                                                                                                                                                                                                                                                                             \n        readonly flickerAq?: string;\n                                                                                                                                                                                                                                                              \n        readonly framerateDenominator?: number;\n                                                                                                                                                                                                                                                                                                                    \n        readonly framerateNumerator?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly gopClosedCadence?: number;\nn        readonly gopSize?: number;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly gopSizeUnits?: string;\n                                                                                                                                                                                                                                     \n        readonly level?: string;\n                                                                                                                                                                                                                                                                                                                                                                             \n        readonly lookAheadRateControl?: string;\n                                                                                                                                                                                                                                                                         \n        readonly maxBitrate?: number;\nn        readonly minIInterval?: number;\n                                                                                                                                                                                                                                                                 \n        readonly parDenominator?: number;\n                                                                                                                                                                                                                                                             \n        readonly parNumerator?: number;\n                                                                                                                                                                                                                                         \n        readonly profile?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly qvbrQualityLevel?: number;\nn        readonly rateControlMode?: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly scanType?: string;\n                                                                                                                                                                                                                                                            \n        readonly sceneChangeDetect?: string;\nn        readonly slices?: number;\n                                                                                                                                                                                                                                   \n        readonly tier?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly timecodeInsertion?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `H265SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `H265SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_H265SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('adaptiveQuantization', cdk.validateString)(properties.adaptiveQuantization));\n    errors.collect(cdk.propertyValidator('afdSignaling', cdk.validateString)(properties.afdSignaling));\n    errors.collect(cdk.propertyValidator('alternativeTransferFunction', cdk.validateString)(properties.alternativeTransferFunction));\n    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));\n    errors.collect(cdk.propertyValidator('bufSize', cdk.validateNumber)(properties.bufSize));\n    errors.collect(cdk.propertyValidator('colorMetadata', cdk.validateString)(properties.colorMetadata));\n    errors.collect(cdk.propertyValidator('colorSpaceSettings', CfnChannel_H265ColorSpaceSettingsPropertyValidator)(properties.colorSpaceSettings));\n    errors.collect(cdk.propertyValidator('filterSettings', CfnChannel_H265FilterSettingsPropertyValidator)(properties.filterSettings));\n    errors.collect(cdk.propertyValidator('fixedAfd', cdk.validateString)(properties.fixedAfd));\n    errors.collect(cdk.propertyValidator('flickerAq', cdk.validateString)(properties.flickerAq));\n    errors.collect(cdk.propertyValidator('framerateDenominator', cdk.validateNumber)(properties.framerateDenominator));\n    errors.collect(cdk.propertyValidator('framerateNumerator', cdk.validateNumber)(properties.framerateNumerator));\n    errors.collect(cdk.propertyValidator('gopClosedCadence', cdk.validateNumber)(properties.gopClosedCadence));\n    errors.collect(cdk.propertyValidator('gopSize', cdk.validateNumber)(properties.gopSize));\n    errors.collect(cdk.propertyValidator('gopSizeUnits', cdk.validateString)(properties.gopSizeUnits));\n    errors.collect(cdk.propertyValidator('level', cdk.validateString)(properties.level));\n    errors.collect(cdk.propertyValidator('lookAheadRateControl', cdk.validateString)(properties.lookAheadRateControl));\n    errors.collect(cdk.propertyValidator('maxBitrate', cdk.validateNumber)(properties.maxBitrate));\n    errors.collect(cdk.propertyValidator('minIInterval', cdk.validateNumber)(properties.minIInterval));\n    errors.collect(cdk.propertyValidator('parDenominator', cdk.validateNumber)(properties.parDenominator));\n    errors.collect(cdk.propertyValidator('parNumerator', cdk.validateNumber)(properties.parNumerator));\n    errors.collect(cdk.propertyValidator('profile', cdk.validateString)(properties.profile));\n    errors.collect(cdk.propertyValidator('qvbrQualityLevel', cdk.validateNumber)(properties.qvbrQualityLevel));\n    errors.collect(cdk.propertyValidator('rateControlMode', cdk.validateString)(properties.rateControlMode));\n    errors.collect(cdk.propertyValidator('scanType', cdk.validateString)(properties.scanType));\n    errors.collect(cdk.propertyValidator('sceneChangeDetect', cdk.validateString)(properties.sceneChangeDetect));\n    errors.collect(cdk.propertyValidator('slices', cdk.validateNumber)(properties.slices));\n    errors.collect(cdk.propertyValidator('tier', cdk.validateString)(properties.tier));\n    errors.collect(cdk.propertyValidator('timecodeInsertion', cdk.validateString)(properties.timecodeInsertion));\n    return errors.wrap('supplied properties not correct for \"H265SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H265Settings` resource\n *\n * @param properties - the TypeScript properties of a `H265SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.H265Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelH265SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_H265SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AdaptiveQuantization: cdk.stringToCloudFormation(properties.adaptiveQuantization),\n        AfdSignaling: cdk.stringToCloudFormation(properties.afdSignaling),\n        AlternativeTransferFunction: cdk.stringToCloudFormation(properties.alternativeTransferFunction),\n        Bitrate: cdk.numberToCloudFormation(properties.bitrate),\n        BufSize: cdk.numberToCloudFormation(properties.bufSize),\n        ColorMetadata: cdk.stringToCloudFormation(properties.colorMetadata),\n        ColorSpaceSettings: cfnChannelH265ColorSpaceSettingsPropertyToCloudFormation(properties.colorSpaceSettings),\n        FilterSettings: cfnChannelH265FilterSettingsPropertyToCloudFormation(properties.filterSettings),\n        FixedAfd: cdk.stringToCloudFormation(properties.fixedAfd),\n        FlickerAq: cdk.stringToCloudFormation(properties.flickerAq),\n        FramerateDenominator: cdk.numberToCloudFormation(properties.framerateDenominator),\n        FramerateNumerator: cdk.numberToCloudFormation(properties.framerateNumerator),\n        GopClosedCadence: cdk.numberToCloudFormation(properties.gopClosedCadence),\n        GopSize: cdk.numberToCloudFormation(properties.gopSize),\n        GopSizeUnits: cdk.stringToCloudFormation(properties.gopSizeUnits),\n        Level: cdk.stringToCloudFormation(properties.level),\n        LookAheadRateControl: cdk.stringToCloudFormation(properties.lookAheadRateControl),\n        MaxBitrate: cdk.numberToCloudFormation(properties.maxBitrate),\n        MinIInterval: cdk.numberToCloudFormation(properties.minIInterval),\n        ParDenominator: cdk.numberToCloudFormation(properties.parDenominator),\n        ParNumerator: cdk.numberToCloudFormation(properties.parNumerator),\n        Profile: cdk.stringToCloudFormation(properties.profile),\n        QvbrQualityLevel: cdk.numberToCloudFormation(properties.qvbrQualityLevel),\n        RateControlMode: cdk.stringToCloudFormation(properties.rateControlMode),\n        ScanType: cdk.stringToCloudFormation(properties.scanType),\n        SceneChangeDetect: cdk.stringToCloudFormation(properties.sceneChangeDetect),\n        Slices: cdk.numberToCloudFormation(properties.slices),\n        Tier: cdk.stringToCloudFormation(properties.tier),\n        TimecodeInsertion: cdk.stringToCloudFormation(properties.timecodeInsertion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelH265SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.H265SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.H265SettingsProperty>();\n    ret.addPropertyResult('adaptiveQuantization', 'AdaptiveQuantization', properties.AdaptiveQuantization != null ? cfn_parse.FromCloudFormation.getString(properties.AdaptiveQuantization) : undefined);\n    ret.addPropertyResult('afdSignaling', 'AfdSignaling', properties.AfdSignaling != null ? cfn_parse.FromCloudFormation.getString(properties.AfdSignaling) : undefined);\n    ret.addPropertyResult('alternativeTransferFunction', 'AlternativeTransferFunction', properties.AlternativeTransferFunction != null ? cfn_parse.FromCloudFormation.getString(properties.AlternativeTransferFunction) : undefined);\n    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);\n    ret.addPropertyResult('bufSize', 'BufSize', properties.BufSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.BufSize) : undefined);\n    ret.addPropertyResult('colorMetadata', 'ColorMetadata', properties.ColorMetadata != null ? cfn_parse.FromCloudFormation.getString(properties.ColorMetadata) : undefined);\n    ret.addPropertyResult('colorSpaceSettings', 'ColorSpaceSettings', properties.ColorSpaceSettings != null ? CfnChannelH265ColorSpaceSettingsPropertyFromCloudFormation(properties.ColorSpaceSettings) : undefined);\n    ret.addPropertyResult('filterSettings', 'FilterSettings', properties.FilterSettings != null ? CfnChannelH265FilterSettingsPropertyFromCloudFormation(properties.FilterSettings) : undefined);\n    ret.addPropertyResult('fixedAfd', 'FixedAfd', properties.FixedAfd != null ? cfn_parse.FromCloudFormation.getString(properties.FixedAfd) : undefined);\n    ret.addPropertyResult('flickerAq', 'FlickerAq', properties.FlickerAq != null ? cfn_parse.FromCloudFormation.getString(properties.FlickerAq) : undefined);\n    ret.addPropertyResult('framerateDenominator', 'FramerateDenominator', properties.FramerateDenominator != null ? cfn_parse.FromCloudFormation.getNumber(properties.FramerateDenominator) : undefined);\n    ret.addPropertyResult('framerateNumerator', 'FramerateNumerator', properties.FramerateNumerator != null ? cfn_parse.FromCloudFormation.getNumber(properties.FramerateNumerator) : undefined);\n    ret.addPropertyResult('gopClosedCadence', 'GopClosedCadence', properties.GopClosedCadence != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopClosedCadence) : undefined);\n    ret.addPropertyResult('gopSize', 'GopSize', properties.GopSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopSize) : undefined);\n    ret.addPropertyResult('gopSizeUnits', 'GopSizeUnits', properties.GopSizeUnits != null ? cfn_parse.FromCloudFormation.getString(properties.GopSizeUnits) : undefined);\n    ret.addPropertyResult('level', 'Level', properties.Level != null ? cfn_parse.FromCloudFormation.getString(properties.Level) : undefined);\n    ret.addPropertyResult('lookAheadRateControl', 'LookAheadRateControl', properties.LookAheadRateControl != null ? cfn_parse.FromCloudFormation.getString(properties.LookAheadRateControl) : undefined);\n    ret.addPropertyResult('maxBitrate', 'MaxBitrate', properties.MaxBitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxBitrate) : undefined);\n    ret.addPropertyResult('minIInterval', 'MinIInterval', properties.MinIInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinIInterval) : undefined);\n    ret.addPropertyResult('parDenominator', 'ParDenominator', properties.ParDenominator != null ? cfn_parse.FromCloudFormation.getNumber(properties.ParDenominator) : undefined);\n    ret.addPropertyResult('parNumerator', 'ParNumerator', properties.ParNumerator != null ? cfn_parse.FromCloudFormation.getNumber(properties.ParNumerator) : undefined);\n    ret.addPropertyResult('profile', 'Profile', properties.Profile != null ? cfn_parse.FromCloudFormation.getString(properties.Profile) : undefined);\n    ret.addPropertyResult('qvbrQualityLevel', 'QvbrQualityLevel', properties.QvbrQualityLevel != null ? cfn_parse.FromCloudFormation.getNumber(properties.QvbrQualityLevel) : undefined);\n    ret.addPropertyResult('rateControlMode', 'RateControlMode', properties.RateControlMode != null ? cfn_parse.FromCloudFormation.getString(properties.RateControlMode) : undefined);\n    ret.addPropertyResult('scanType', 'ScanType', properties.ScanType != null ? cfn_parse.FromCloudFormation.getString(properties.ScanType) : undefined);\n    ret.addPropertyResult('sceneChangeDetect', 'SceneChangeDetect', properties.SceneChangeDetect != null ? cfn_parse.FromCloudFormation.getString(properties.SceneChangeDetect) : undefined);\n    ret.addPropertyResult('slices', 'Slices', properties.Slices != null ? cfn_parse.FromCloudFormation.getNumber(properties.Slices) : undefined);\n    ret.addPropertyResult('tier', 'Tier', properties.Tier != null ? cfn_parse.FromCloudFormation.getString(properties.Tier) : undefined);\n    ret.addPropertyResult('timecodeInsertion', 'TimecodeInsertion', properties.TimecodeInsertion != null ? cfn_parse.FromCloudFormation.getString(properties.TimecodeInsertion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface Hdr10SettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly maxCll?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly maxFall?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Hdr10SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `Hdr10SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Hdr10SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxCll', cdk.validateNumber)(properties.maxCll));\n    errors.collect(cdk.propertyValidator('maxFall', cdk.validateNumber)(properties.maxFall));\n    return errors.wrap('supplied properties not correct for \"Hdr10SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Hdr10Settings` resource\n *\n * @param properties - the TypeScript properties of a `Hdr10SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Hdr10Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelHdr10SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Hdr10SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        MaxCll: cdk.numberToCloudFormation(properties.maxCll),\n        MaxFall: cdk.numberToCloudFormation(properties.maxFall),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelHdr10SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Hdr10SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Hdr10SettingsProperty>();\n    ret.addPropertyResult('maxCll', 'MaxCll', properties.MaxCll != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxCll) : undefined);\n    ret.addPropertyResult('maxFall', 'MaxFall', properties.MaxFall != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxFall) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                  \n    export interface HlsAkamaiSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly connectionRetryInterval?: number;\n                                                                                                                                                                                                                                                                                                             \n        readonly filecacheDuration?: number;\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly httpTransferMode?: string;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly numRetries?: number;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly restartDelay?: number;\n                                                                                                                                                                                                                                                                    \n        readonly salt?: string;\n                                                                                                                                                                                                                                                                                                                         \n        readonly token?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsAkamaiSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `HlsAkamaiSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_HlsAkamaiSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectionRetryInterval', cdk.validateNumber)(properties.connectionRetryInterval));\n    errors.collect(cdk.propertyValidator('filecacheDuration', cdk.validateNumber)(properties.filecacheDuration));\n    errors.collect(cdk.propertyValidator('httpTransferMode', cdk.validateString)(properties.httpTransferMode));\n    errors.collect(cdk.propertyValidator('numRetries', cdk.validateNumber)(properties.numRetries));\n    errors.collect(cdk.propertyValidator('restartDelay', cdk.validateNumber)(properties.restartDelay));\n    errors.collect(cdk.propertyValidator('salt', cdk.validateString)(properties.salt));\n    errors.collect(cdk.propertyValidator('token', cdk.validateString)(properties.token));\n    return errors.wrap('supplied properties not correct for \"HlsAkamaiSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsAkamaiSettings` resource\n *\n * @param properties - the TypeScript properties of a `HlsAkamaiSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsAkamaiSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelHlsAkamaiSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_HlsAkamaiSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectionRetryInterval: cdk.numberToCloudFormation(properties.connectionRetryInterval),\n        FilecacheDuration: cdk.numberToCloudFormation(properties.filecacheDuration),\n        HttpTransferMode: cdk.stringToCloudFormation(properties.httpTransferMode),\n        NumRetries: cdk.numberToCloudFormation(properties.numRetries),\n        RestartDelay: cdk.numberToCloudFormation(properties.restartDelay),\n        Salt: cdk.stringToCloudFormation(properties.salt),\n        Token: cdk.stringToCloudFormation(properties.token),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelHlsAkamaiSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.HlsAkamaiSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.HlsAkamaiSettingsProperty>();\n    ret.addPropertyResult('connectionRetryInterval', 'ConnectionRetryInterval', properties.ConnectionRetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionRetryInterval) : undefined);\n    ret.addPropertyResult('filecacheDuration', 'FilecacheDuration', properties.FilecacheDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.FilecacheDuration) : undefined);\n    ret.addPropertyResult('httpTransferMode', 'HttpTransferMode', properties.HttpTransferMode != null ? cfn_parse.FromCloudFormation.getString(properties.HttpTransferMode) : undefined);\n    ret.addPropertyResult('numRetries', 'NumRetries', properties.NumRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRetries) : undefined);\n    ret.addPropertyResult('restartDelay', 'RestartDelay', properties.RestartDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.RestartDelay) : undefined);\n    ret.addPropertyResult('salt', 'Salt', properties.Salt != null ? cfn_parse.FromCloudFormation.getString(properties.Salt) : undefined);\n    ret.addPropertyResult('token', 'Token', properties.Token != null ? cfn_parse.FromCloudFormation.getString(properties.Token) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                           \n    export interface HlsBasicPutSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly connectionRetryInterval?: number;\n                                                                                                                                                                                                                                                                                                                 \n        readonly filecacheDuration?: number;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly numRetries?: number;\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly restartDelay?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsBasicPutSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `HlsBasicPutSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_HlsBasicPutSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectionRetryInterval', cdk.validateNumber)(properties.connectionRetryInterval));\n    errors.collect(cdk.propertyValidator('filecacheDuration', cdk.validateNumber)(properties.filecacheDuration));\n    errors.collect(cdk.propertyValidator('numRetries', cdk.validateNumber)(properties.numRetries));\n    errors.collect(cdk.propertyValidator('restartDelay', cdk.validateNumber)(properties.restartDelay));\n    return errors.wrap('supplied properties not correct for \"HlsBasicPutSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsBasicPutSettings` resource\n *\n * @param properties - the TypeScript properties of a `HlsBasicPutSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsBasicPutSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelHlsBasicPutSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_HlsBasicPutSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectionRetryInterval: cdk.numberToCloudFormation(properties.connectionRetryInterval),\n        FilecacheDuration: cdk.numberToCloudFormation(properties.filecacheDuration),\n        NumRetries: cdk.numberToCloudFormation(properties.numRetries),\n        RestartDelay: cdk.numberToCloudFormation(properties.restartDelay),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelHlsBasicPutSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.HlsBasicPutSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.HlsBasicPutSettingsProperty>();\n    ret.addPropertyResult('connectionRetryInterval', 'ConnectionRetryInterval', properties.ConnectionRetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionRetryInterval) : undefined);\n    ret.addPropertyResult('filecacheDuration', 'FilecacheDuration', properties.FilecacheDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.FilecacheDuration) : undefined);\n    ret.addPropertyResult('numRetries', 'NumRetries', properties.NumRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRetries) : undefined);\n    ret.addPropertyResult('restartDelay', 'RestartDelay', properties.RestartDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.RestartDelay) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                      \n    export interface HlsCdnSettingsProperty {\n                                                                                                                                                                                                                                                                                                          \n        readonly hlsAkamaiSettings?: CfnChannel.HlsAkamaiSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly hlsBasicPutSettings?: CfnChannel.HlsBasicPutSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                      \n        readonly hlsMediaStoreSettings?: CfnChannel.HlsMediaStoreSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                              \n        readonly hlsS3Settings?: CfnChannel.HlsS3SettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly hlsWebdavSettings?: CfnChannel.HlsWebdavSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsCdnSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `HlsCdnSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_HlsCdnSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('hlsAkamaiSettings', CfnChannel_HlsAkamaiSettingsPropertyValidator)(properties.hlsAkamaiSettings));\n    errors.collect(cdk.propertyValidator('hlsBasicPutSettings', CfnChannel_HlsBasicPutSettingsPropertyValidator)(properties.hlsBasicPutSettings));\n    errors.collect(cdk.propertyValidator('hlsMediaStoreSettings', CfnChannel_HlsMediaStoreSettingsPropertyValidator)(properties.hlsMediaStoreSettings));\n    errors.collect(cdk.propertyValidator('hlsS3Settings', CfnChannel_HlsS3SettingsPropertyValidator)(properties.hlsS3Settings));\n    errors.collect(cdk.propertyValidator('hlsWebdavSettings', CfnChannel_HlsWebdavSettingsPropertyValidator)(properties.hlsWebdavSettings));\n    return errors.wrap('supplied properties not correct for \"HlsCdnSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsCdnSettings` resource\n *\n * @param properties - the TypeScript properties of a `HlsCdnSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsCdnSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelHlsCdnSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_HlsCdnSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        HlsAkamaiSettings: cfnChannelHlsAkamaiSettingsPropertyToCloudFormation(properties.hlsAkamaiSettings),\n        HlsBasicPutSettings: cfnChannelHlsBasicPutSettingsPropertyToCloudFormation(properties.hlsBasicPutSettings),\n        HlsMediaStoreSettings: cfnChannelHlsMediaStoreSettingsPropertyToCloudFormation(properties.hlsMediaStoreSettings),\n        HlsS3Settings: cfnChannelHlsS3SettingsPropertyToCloudFormation(properties.hlsS3Settings),\n        HlsWebdavSettings: cfnChannelHlsWebdavSettingsPropertyToCloudFormation(properties.hlsWebdavSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelHlsCdnSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.HlsCdnSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.HlsCdnSettingsProperty>();\n    ret.addPropertyResult('hlsAkamaiSettings', 'HlsAkamaiSettings', properties.HlsAkamaiSettings != null ? CfnChannelHlsAkamaiSettingsPropertyFromCloudFormation(properties.HlsAkamaiSettings) : undefined);\n    ret.addPropertyResult('hlsBasicPutSettings', 'HlsBasicPutSettings', properties.HlsBasicPutSettings != null ? CfnChannelHlsBasicPutSettingsPropertyFromCloudFormation(properties.HlsBasicPutSettings) : undefined);\n    ret.addPropertyResult('hlsMediaStoreSettings', 'HlsMediaStoreSettings', properties.HlsMediaStoreSettings != null ? CfnChannelHlsMediaStoreSettingsPropertyFromCloudFormation(properties.HlsMediaStoreSettings) : undefined);\n    ret.addPropertyResult('hlsS3Settings', 'HlsS3Settings', properties.HlsS3Settings != null ? CfnChannelHlsS3SettingsPropertyFromCloudFormation(properties.HlsS3Settings) : undefined);\n    ret.addPropertyResult('hlsWebdavSettings', 'HlsWebdavSettings', properties.HlsWebdavSettings != null ? CfnChannelHlsWebdavSettingsPropertyFromCloudFormation(properties.HlsWebdavSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                      \n    export interface HlsGroupSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                           \n        readonly adMarkers?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly baseUrlContent?: string;\nn        readonly baseUrlContent1?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly baseUrlManifest?: string;\nn        readonly baseUrlManifest1?: string;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly captionLanguageMappings?: Array<CfnChannel.CaptionLanguageMappingProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly captionLanguageSetting?: string;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly clientCache?: string;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly codecSpecification?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly constantIv?: string;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly destination?: CfnChannel.OutputLocationRefProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                \n        readonly directoryStructure?: string;\nn        readonly discontinuityTags?: string;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly encryptionType?: string;\n                                                                                                                                                                                                                                                                                                \n        readonly hlsCdnSettings?: CfnChannel.HlsCdnSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                \n        readonly hlsId3SegmentTagging?: string;\nn        readonly iFrameOnlyPlaylists?: string;\nn        readonly incompleteSegmentBehavior?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly indexNSegments?: number;\n                                                                                                                                                                                                                                                                                                            \n        readonly inputLossAction?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly ivInManifest?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly ivSource?: string;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly keepSegments?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly keyFormat?: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly keyFormatVersions?: string;\n                                                                                                                                                                                                                                                                         \n        readonly keyProviderSettings?: CfnChannel.KeyProviderSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly manifestCompression?: string;\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly manifestDurationFormat?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly minSegmentLength?: number;\nn        readonly mode?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly outputSelection?: string;\nn        readonly programDateTime?: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly programDateTimeClock?: string;\n                                                                                                                                                                                                                                                                                                                          \n        readonly programDateTimePeriod?: number;\nn        readonly redundantManifest?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly segmentLength?: number;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly segmentationMode?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly segmentsPerSubdirectory?: number;\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly streamInfResolution?: string;\n                                                                                                                                                                                                                                                                                               \n        readonly timedMetadataId3Frame?: string;\n                                                                                                                                                                                                                                                                                          \n        readonly timedMetadataId3Period?: number;\n                                                                                                                                                                                                                                                                                                                             \n        readonly timestampDeltaMilliseconds?: number;\nn        readonly tsFileMode?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsGroupSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `HlsGroupSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_HlsGroupSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('adMarkers', cdk.listValidator(cdk.validateString))(properties.adMarkers));\n    errors.collect(cdk.propertyValidator('baseUrlContent', cdk.validateString)(properties.baseUrlContent));\n    errors.collect(cdk.propertyValidator('baseUrlContent1', cdk.validateString)(properties.baseUrlContent1));\n    errors.collect(cdk.propertyValidator('baseUrlManifest', cdk.validateString)(properties.baseUrlManifest));\n    errors.collect(cdk.propertyValidator('baseUrlManifest1', cdk.validateString)(properties.baseUrlManifest1));\n    errors.collect(cdk.propertyValidator('captionLanguageMappings', cdk.listValidator(CfnChannel_CaptionLanguageMappingPropertyValidator))(properties.captionLanguageMappings));\n    errors.collect(cdk.propertyValidator('captionLanguageSetting', cdk.validateString)(properties.captionLanguageSetting));\n    errors.collect(cdk.propertyValidator('clientCache', cdk.validateString)(properties.clientCache));\n    errors.collect(cdk.propertyValidator('codecSpecification', cdk.validateString)(properties.codecSpecification));\n    errors.collect(cdk.propertyValidator('constantIv', cdk.validateString)(properties.constantIv));\n    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('directoryStructure', cdk.validateString)(properties.directoryStructure));\n    errors.collect(cdk.propertyValidator('discontinuityTags', cdk.validateString)(properties.discontinuityTags));\n    errors.collect(cdk.propertyValidator('encryptionType', cdk.validateString)(properties.encryptionType));\n    errors.collect(cdk.propertyValidator('hlsCdnSettings', CfnChannel_HlsCdnSettingsPropertyValidator)(properties.hlsCdnSettings));\n    errors.collect(cdk.propertyValidator('hlsId3SegmentTagging', cdk.validateString)(properties.hlsId3SegmentTagging));\n    errors.collect(cdk.propertyValidator('iFrameOnlyPlaylists', cdk.validateString)(properties.iFrameOnlyPlaylists));\n    errors.collect(cdk.propertyValidator('incompleteSegmentBehavior', cdk.validateString)(properties.incompleteSegmentBehavior));\n    errors.collect(cdk.propertyValidator('indexNSegments', cdk.validateNumber)(properties.indexNSegments));\n    errors.collect(cdk.propertyValidator('inputLossAction', cdk.validateString)(properties.inputLossAction));\n    errors.collect(cdk.propertyValidator('ivInManifest', cdk.validateString)(properties.ivInManifest));\n    errors.collect(cdk.propertyValidator('ivSource', cdk.validateString)(properties.ivSource));\n    errors.collect(cdk.propertyValidator('keepSegments', cdk.validateNumber)(properties.keepSegments));\n    errors.collect(cdk.propertyValidator('keyFormat', cdk.validateString)(properties.keyFormat));\n    errors.collect(cdk.propertyValidator('keyFormatVersions', cdk.validateString)(properties.keyFormatVersions));\n    errors.collect(cdk.propertyValidator('keyProviderSettings', CfnChannel_KeyProviderSettingsPropertyValidator)(properties.keyProviderSettings));\n    errors.collect(cdk.propertyValidator('manifestCompression', cdk.validateString)(properties.manifestCompression));\n    errors.collect(cdk.propertyValidator('manifestDurationFormat', cdk.validateString)(properties.manifestDurationFormat));\n    errors.collect(cdk.propertyValidator('minSegmentLength', cdk.validateNumber)(properties.minSegmentLength));\n    errors.collect(cdk.propertyValidator('mode', cdk.validateString)(properties.mode));\n    errors.collect(cdk.propertyValidator('outputSelection', cdk.validateString)(properties.outputSelection));\n    errors.collect(cdk.propertyValidator('programDateTime', cdk.validateString)(properties.programDateTime));\n    errors.collect(cdk.propertyValidator('programDateTimeClock', cdk.validateString)(properties.programDateTimeClock));\n    errors.collect(cdk.propertyValidator('programDateTimePeriod', cdk.validateNumber)(properties.programDateTimePeriod));\n    errors.collect(cdk.propertyValidator('redundantManifest', cdk.validateString)(properties.redundantManifest));\n    errors.collect(cdk.propertyValidator('segmentLength', cdk.validateNumber)(properties.segmentLength));\n    errors.collect(cdk.propertyValidator('segmentationMode', cdk.validateString)(properties.segmentationMode));\n    errors.collect(cdk.propertyValidator('segmentsPerSubdirectory', cdk.validateNumber)(properties.segmentsPerSubdirectory));\n    errors.collect(cdk.propertyValidator('streamInfResolution', cdk.validateString)(properties.streamInfResolution));\n    errors.collect(cdk.propertyValidator('timedMetadataId3Frame', cdk.validateString)(properties.timedMetadataId3Frame));\n    errors.collect(cdk.propertyValidator('timedMetadataId3Period', cdk.validateNumber)(properties.timedMetadataId3Period));\n    errors.collect(cdk.propertyValidator('timestampDeltaMilliseconds', cdk.validateNumber)(properties.timestampDeltaMilliseconds));\n    errors.collect(cdk.propertyValidator('tsFileMode', cdk.validateString)(properties.tsFileMode));\n    return errors.wrap('supplied properties not correct for \"HlsGroupSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsGroupSettings` resource\n *\n * @param properties - the TypeScript properties of a `HlsGroupSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsGroupSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelHlsGroupSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_HlsGroupSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AdMarkers: cdk.listMapper(cdk.stringToCloudFormation)(properties.adMarkers),\n        BaseUrlContent: cdk.stringToCloudFormation(properties.baseUrlContent),\n        BaseUrlContent1: cdk.stringToCloudFormation(properties.baseUrlContent1),\n        BaseUrlManifest: cdk.stringToCloudFormation(properties.baseUrlManifest),\n        BaseUrlManifest1: cdk.stringToCloudFormation(properties.baseUrlManifest1),\n        CaptionLanguageMappings: cdk.listMapper(cfnChannelCaptionLanguageMappingPropertyToCloudFormation)(properties.captionLanguageMappings),\n        CaptionLanguageSetting: cdk.stringToCloudFormation(properties.captionLanguageSetting),\n        ClientCache: cdk.stringToCloudFormation(properties.clientCache),\n        CodecSpecification: cdk.stringToCloudFormation(properties.codecSpecification),\n        ConstantIv: cdk.stringToCloudFormation(properties.constantIv),\n        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),\n        DirectoryStructure: cdk.stringToCloudFormation(properties.directoryStructure),\n        DiscontinuityTags: cdk.stringToCloudFormation(properties.discontinuityTags),\n        EncryptionType: cdk.stringToCloudFormation(properties.encryptionType),\n        HlsCdnSettings: cfnChannelHlsCdnSettingsPropertyToCloudFormation(properties.hlsCdnSettings),\n        HlsId3SegmentTagging: cdk.stringToCloudFormation(properties.hlsId3SegmentTagging),\n        IFrameOnlyPlaylists: cdk.stringToCloudFormation(properties.iFrameOnlyPlaylists),\n        IncompleteSegmentBehavior: cdk.stringToCloudFormation(properties.incompleteSegmentBehavior),\n        IndexNSegments: cdk.numberToCloudFormation(properties.indexNSegments),\n        InputLossAction: cdk.stringToCloudFormation(properties.inputLossAction),\n        IvInManifest: cdk.stringToCloudFormation(properties.ivInManifest),\n        IvSource: cdk.stringToCloudFormation(properties.ivSource),\n        KeepSegments: cdk.numberToCloudFormation(properties.keepSegments),\n        KeyFormat: cdk.stringToCloudFormation(properties.keyFormat),\n        KeyFormatVersions: cdk.stringToCloudFormation(properties.keyFormatVersions),\n        KeyProviderSettings: cfnChannelKeyProviderSettingsPropertyToCloudFormation(properties.keyProviderSettings),\n        ManifestCompression: cdk.stringToCloudFormation(properties.manifestCompression),\n        ManifestDurationFormat: cdk.stringToCloudFormation(properties.manifestDurationFormat),\n        MinSegmentLength: cdk.numberToCloudFormation(properties.minSegmentLength),\n        Mode: cdk.stringToCloudFormation(properties.mode),\n        OutputSelection: cdk.stringToCloudFormation(properties.outputSelection),\n        ProgramDateTime: cdk.stringToCloudFormation(properties.programDateTime),\n        ProgramDateTimeClock: cdk.stringToCloudFormation(properties.programDateTimeClock),\n        ProgramDateTimePeriod: cdk.numberToCloudFormation(properties.programDateTimePeriod),\n        RedundantManifest: cdk.stringToCloudFormation(properties.redundantManifest),\n        SegmentLength: cdk.numberToCloudFormation(properties.segmentLength),\n        SegmentationMode: cdk.stringToCloudFormation(properties.segmentationMode),\n        SegmentsPerSubdirectory: cdk.numberToCloudFormation(properties.segmentsPerSubdirectory),\n        StreamInfResolution: cdk.stringToCloudFormation(properties.streamInfResolution),\n        TimedMetadataId3Frame: cdk.stringToCloudFormation(properties.timedMetadataId3Frame),\n        TimedMetadataId3Period: cdk.numberToCloudFormation(properties.timedMetadataId3Period),\n        TimestampDeltaMilliseconds: cdk.numberToCloudFormation(properties.timestampDeltaMilliseconds),\n        TsFileMode: cdk.stringToCloudFormation(properties.tsFileMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelHlsGroupSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.HlsGroupSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.HlsGroupSettingsProperty>();\n    ret.addPropertyResult('adMarkers', 'AdMarkers', properties.AdMarkers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AdMarkers) : undefined);\n    ret.addPropertyResult('baseUrlContent', 'BaseUrlContent', properties.BaseUrlContent != null ? cfn_parse.FromCloudFormation.getString(properties.BaseUrlContent) : undefined);\n    ret.addPropertyResult('baseUrlContent1', 'BaseUrlContent1', properties.BaseUrlContent1 != null ? cfn_parse.FromCloudFormation.getString(properties.BaseUrlContent1) : undefined);\n    ret.addPropertyResult('baseUrlManifest', 'BaseUrlManifest', properties.BaseUrlManifest != null ? cfn_parse.FromCloudFormation.getString(properties.BaseUrlManifest) : undefined);\n    ret.addPropertyResult('baseUrlManifest1', 'BaseUrlManifest1', properties.BaseUrlManifest1 != null ? cfn_parse.FromCloudFormation.getString(properties.BaseUrlManifest1) : undefined);\n    ret.addPropertyResult('captionLanguageMappings', 'CaptionLanguageMappings', properties.CaptionLanguageMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelCaptionLanguageMappingPropertyFromCloudFormation)(properties.CaptionLanguageMappings) : undefined);\n    ret.addPropertyResult('captionLanguageSetting', 'CaptionLanguageSetting', properties.CaptionLanguageSetting != null ? cfn_parse.FromCloudFormation.getString(properties.CaptionLanguageSetting) : undefined);\n    ret.addPropertyResult('clientCache', 'ClientCache', properties.ClientCache != null ? cfn_parse.FromCloudFormation.getString(properties.ClientCache) : undefined);\n    ret.addPropertyResult('codecSpecification', 'CodecSpecification', properties.CodecSpecification != null ? cfn_parse.FromCloudFormation.getString(properties.CodecSpecification) : undefined);\n    ret.addPropertyResult('constantIv', 'ConstantIv', properties.ConstantIv != null ? cfn_parse.FromCloudFormation.getString(properties.ConstantIv) : undefined);\n    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);\n    ret.addPropertyResult('directoryStructure', 'DirectoryStructure', properties.DirectoryStructure != null ? cfn_parse.FromCloudFormation.getString(properties.DirectoryStructure) : undefined);\n    ret.addPropertyResult('discontinuityTags', 'DiscontinuityTags', properties.DiscontinuityTags != null ? cfn_parse.FromCloudFormation.getString(properties.DiscontinuityTags) : undefined);\n    ret.addPropertyResult('encryptionType', 'EncryptionType', properties.EncryptionType != null ? cfn_parse.FromCloudFormation.getString(properties.EncryptionType) : undefined);\n    ret.addPropertyResult('hlsCdnSettings', 'HlsCdnSettings', properties.HlsCdnSettings != null ? CfnChannelHlsCdnSettingsPropertyFromCloudFormation(properties.HlsCdnSettings) : undefined);\n    ret.addPropertyResult('hlsId3SegmentTagging', 'HlsId3SegmentTagging', properties.HlsId3SegmentTagging != null ? cfn_parse.FromCloudFormation.getString(properties.HlsId3SegmentTagging) : undefined);\n    ret.addPropertyResult('iFrameOnlyPlaylists', 'IFrameOnlyPlaylists', properties.IFrameOnlyPlaylists != null ? cfn_parse.FromCloudFormation.getString(properties.IFrameOnlyPlaylists) : undefined);\n    ret.addPropertyResult('incompleteSegmentBehavior', 'IncompleteSegmentBehavior', properties.IncompleteSegmentBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.IncompleteSegmentBehavior) : undefined);\n    ret.addPropertyResult('indexNSegments', 'IndexNSegments', properties.IndexNSegments != null ? cfn_parse.FromCloudFormation.getNumber(properties.IndexNSegments) : undefined);\n    ret.addPropertyResult('inputLossAction', 'InputLossAction', properties.InputLossAction != null ? cfn_parse.FromCloudFormation.getString(properties.InputLossAction) : undefined);\n    ret.addPropertyResult('ivInManifest', 'IvInManifest', properties.IvInManifest != null ? cfn_parse.FromCloudFormation.getString(properties.IvInManifest) : undefined);\n    ret.addPropertyResult('ivSource', 'IvSource', properties.IvSource != null ? cfn_parse.FromCloudFormation.getString(properties.IvSource) : undefined);\n    ret.addPropertyResult('keepSegments', 'KeepSegments', properties.KeepSegments != null ? cfn_parse.FromCloudFormation.getNumber(properties.KeepSegments) : undefined);\n    ret.addPropertyResult('keyFormat', 'KeyFormat', properties.KeyFormat != null ? cfn_parse.FromCloudFormation.getString(properties.KeyFormat) : undefined);\n    ret.addPropertyResult('keyFormatVersions', 'KeyFormatVersions', properties.KeyFormatVersions != null ? cfn_parse.FromCloudFormation.getString(properties.KeyFormatVersions) : undefined);\n    ret.addPropertyResult('keyProviderSettings', 'KeyProviderSettings', properties.KeyProviderSettings != null ? CfnChannelKeyProviderSettingsPropertyFromCloudFormation(properties.KeyProviderSettings) : undefined);\n    ret.addPropertyResult('manifestCompression', 'ManifestCompression', properties.ManifestCompression != null ? cfn_parse.FromCloudFormation.getString(properties.ManifestCompression) : undefined);\n    ret.addPropertyResult('manifestDurationFormat', 'ManifestDurationFormat', properties.ManifestDurationFormat != null ? cfn_parse.FromCloudFormation.getString(properties.ManifestDurationFormat) : undefined);\n    ret.addPropertyResult('minSegmentLength', 'MinSegmentLength', properties.MinSegmentLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinSegmentLength) : undefined);\n    ret.addPropertyResult('mode', 'Mode', properties.Mode != null ? cfn_parse.FromCloudFormation.getString(properties.Mode) : undefined);\n    ret.addPropertyResult('outputSelection', 'OutputSelection', properties.OutputSelection != null ? cfn_parse.FromCloudFormation.getString(properties.OutputSelection) : undefined);\n    ret.addPropertyResult('programDateTime', 'ProgramDateTime', properties.ProgramDateTime != null ? cfn_parse.FromCloudFormation.getString(properties.ProgramDateTime) : undefined);\n    ret.addPropertyResult('programDateTimeClock', 'ProgramDateTimeClock', properties.ProgramDateTimeClock != null ? cfn_parse.FromCloudFormation.getString(properties.ProgramDateTimeClock) : undefined);\n    ret.addPropertyResult('programDateTimePeriod', 'ProgramDateTimePeriod', properties.ProgramDateTimePeriod != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProgramDateTimePeriod) : undefined);\n    ret.addPropertyResult('redundantManifest', 'RedundantManifest', properties.RedundantManifest != null ? cfn_parse.FromCloudFormation.getString(properties.RedundantManifest) : undefined);\n    ret.addPropertyResult('segmentLength', 'SegmentLength', properties.SegmentLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentLength) : undefined);\n    ret.addPropertyResult('segmentationMode', 'SegmentationMode', properties.SegmentationMode != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentationMode) : undefined);\n    ret.addPropertyResult('segmentsPerSubdirectory', 'SegmentsPerSubdirectory', properties.SegmentsPerSubdirectory != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentsPerSubdirectory) : undefined);\n    ret.addPropertyResult('streamInfResolution', 'StreamInfResolution', properties.StreamInfResolution != null ? cfn_parse.FromCloudFormation.getString(properties.StreamInfResolution) : undefined);\n    ret.addPropertyResult('timedMetadataId3Frame', 'TimedMetadataId3Frame', properties.TimedMetadataId3Frame != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataId3Frame) : undefined);\n    ret.addPropertyResult('timedMetadataId3Period', 'TimedMetadataId3Period', properties.TimedMetadataId3Period != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimedMetadataId3Period) : undefined);\n    ret.addPropertyResult('timestampDeltaMilliseconds', 'TimestampDeltaMilliseconds', properties.TimestampDeltaMilliseconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimestampDeltaMilliseconds) : undefined);\n    ret.addPropertyResult('tsFileMode', 'TsFileMode', properties.TsFileMode != null ? cfn_parse.FromCloudFormation.getString(properties.TsFileMode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                          \n    export interface HlsInputSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly bandwidth?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly bufferSegments?: number;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly retries?: number;\n                                                                                                                                                                                                                                                                                                                                   \n        readonly retryInterval?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly scte35Source?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsInputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `HlsInputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_HlsInputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bandwidth', cdk.validateNumber)(properties.bandwidth));\n    errors.collect(cdk.propertyValidator('bufferSegments', cdk.validateNumber)(properties.bufferSegments));\n    errors.collect(cdk.propertyValidator('retries', cdk.validateNumber)(properties.retries));\n    errors.collect(cdk.propertyValidator('retryInterval', cdk.validateNumber)(properties.retryInterval));\n    errors.collect(cdk.propertyValidator('scte35Source', cdk.validateString)(properties.scte35Source));\n    return errors.wrap('supplied properties not correct for \"HlsInputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsInputSettings` resource\n *\n * @param properties - the TypeScript properties of a `HlsInputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsInputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelHlsInputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_HlsInputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Bandwidth: cdk.numberToCloudFormation(properties.bandwidth),\n        BufferSegments: cdk.numberToCloudFormation(properties.bufferSegments),\n        Retries: cdk.numberToCloudFormation(properties.retries),\n        RetryInterval: cdk.numberToCloudFormation(properties.retryInterval),\n        Scte35Source: cdk.stringToCloudFormation(properties.scte35Source),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelHlsInputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.HlsInputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.HlsInputSettingsProperty>();\n    ret.addPropertyResult('bandwidth', 'Bandwidth', properties.Bandwidth != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bandwidth) : undefined);\n    ret.addPropertyResult('bufferSegments', 'BufferSegments', properties.BufferSegments != null ? cfn_parse.FromCloudFormation.getNumber(properties.BufferSegments) : undefined);\n    ret.addPropertyResult('retries', 'Retries', properties.Retries != null ? cfn_parse.FromCloudFormation.getNumber(properties.Retries) : undefined);\n    ret.addPropertyResult('retryInterval', 'RetryInterval', properties.RetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.RetryInterval) : undefined);\n    ret.addPropertyResult('scte35Source', 'Scte35Source', properties.Scte35Source != null ? cfn_parse.FromCloudFormation.getString(properties.Scte35Source) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                  \n    export interface HlsMediaStoreSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly connectionRetryInterval?: number;\n                                                                                                                                                                                                                                                                                                                     \n        readonly filecacheDuration?: number;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly mediaStoreStorageClass?: string;\n                                                                                                                                                                                                                                                                                                                                         \n        readonly numRetries?: number;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly restartDelay?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsMediaStoreSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `HlsMediaStoreSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_HlsMediaStoreSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectionRetryInterval', cdk.validateNumber)(properties.connectionRetryInterval));\n    errors.collect(cdk.propertyValidator('filecacheDuration', cdk.validateNumber)(properties.filecacheDuration));\n    errors.collect(cdk.propertyValidator('mediaStoreStorageClass', cdk.validateString)(properties.mediaStoreStorageClass));\n    errors.collect(cdk.propertyValidator('numRetries', cdk.validateNumber)(properties.numRetries));\n    errors.collect(cdk.propertyValidator('restartDelay', cdk.validateNumber)(properties.restartDelay));\n    return errors.wrap('supplied properties not correct for \"HlsMediaStoreSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsMediaStoreSettings` resource\n *\n * @param properties - the TypeScript properties of a `HlsMediaStoreSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsMediaStoreSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelHlsMediaStoreSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_HlsMediaStoreSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectionRetryInterval: cdk.numberToCloudFormation(properties.connectionRetryInterval),\n        FilecacheDuration: cdk.numberToCloudFormation(properties.filecacheDuration),\n        MediaStoreStorageClass: cdk.stringToCloudFormation(properties.mediaStoreStorageClass),\n        NumRetries: cdk.numberToCloudFormation(properties.numRetries),\n        RestartDelay: cdk.numberToCloudFormation(properties.restartDelay),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelHlsMediaStoreSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.HlsMediaStoreSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.HlsMediaStoreSettingsProperty>();\n    ret.addPropertyResult('connectionRetryInterval', 'ConnectionRetryInterval', properties.ConnectionRetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionRetryInterval) : undefined);\n    ret.addPropertyResult('filecacheDuration', 'FilecacheDuration', properties.FilecacheDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.FilecacheDuration) : undefined);\n    ret.addPropertyResult('mediaStoreStorageClass', 'MediaStoreStorageClass', properties.MediaStoreStorageClass != null ? cfn_parse.FromCloudFormation.getString(properties.MediaStoreStorageClass) : undefined);\n    ret.addPropertyResult('numRetries', 'NumRetries', properties.NumRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRetries) : undefined);\n    ret.addPropertyResult('restartDelay', 'RestartDelay', properties.RestartDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.RestartDelay) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                            \n    export interface HlsOutputSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly h265PackagingType?: string;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly hlsSettings?: CfnChannel.HlsSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly nameModifier?: string;\n                                                                                                                                                                                                                                                                                                            \n        readonly segmentModifier?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsOutputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `HlsOutputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_HlsOutputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('h265PackagingType', cdk.validateString)(properties.h265PackagingType));\n    errors.collect(cdk.propertyValidator('hlsSettings', CfnChannel_HlsSettingsPropertyValidator)(properties.hlsSettings));\n    errors.collect(cdk.propertyValidator('nameModifier', cdk.validateString)(properties.nameModifier));\n    errors.collect(cdk.propertyValidator('segmentModifier', cdk.validateString)(properties.segmentModifier));\n    return errors.wrap('supplied properties not correct for \"HlsOutputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsOutputSettings` resource\n *\n * @param properties - the TypeScript properties of a `HlsOutputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsOutputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelHlsOutputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_HlsOutputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        H265PackagingType: cdk.stringToCloudFormation(properties.h265PackagingType),\n        HlsSettings: cfnChannelHlsSettingsPropertyToCloudFormation(properties.hlsSettings),\n        NameModifier: cdk.stringToCloudFormation(properties.nameModifier),\n        SegmentModifier: cdk.stringToCloudFormation(properties.segmentModifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelHlsOutputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.HlsOutputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.HlsOutputSettingsProperty>();\n    ret.addPropertyResult('h265PackagingType', 'H265PackagingType', properties.H265PackagingType != null ? cfn_parse.FromCloudFormation.getString(properties.H265PackagingType) : undefined);\n    ret.addPropertyResult('hlsSettings', 'HlsSettings', properties.HlsSettings != null ? CfnChannelHlsSettingsPropertyFromCloudFormation(properties.HlsSettings) : undefined);\n    ret.addPropertyResult('nameModifier', 'NameModifier', properties.NameModifier != null ? cfn_parse.FromCloudFormation.getString(properties.NameModifier) : undefined);\n    ret.addPropertyResult('segmentModifier', 'SegmentModifier', properties.SegmentModifier != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentModifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                  \n    export interface HlsS3SettingsProperty {\n                                                                                                                                                                                                                                                                                                    \n        readonly cannedAcl?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsS3SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `HlsS3SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_HlsS3SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cannedAcl', cdk.validateString)(properties.cannedAcl));\n    return errors.wrap('supplied properties not correct for \"HlsS3SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsS3Settings` resource\n *\n * @param properties - the TypeScript properties of a `HlsS3SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsS3Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelHlsS3SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_HlsS3SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        CannedAcl: cdk.stringToCloudFormation(properties.cannedAcl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelHlsS3SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.HlsS3SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.HlsS3SettingsProperty>();\n    ret.addPropertyResult('cannedAcl', 'CannedAcl', properties.CannedAcl != null ? cfn_parse.FromCloudFormation.getString(properties.CannedAcl) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                         \n    export interface HlsSettingsProperty {\n                                                                                                                                                                                                                                                                            \n        readonly audioOnlyHlsSettings?: CfnChannel.AudioOnlyHlsSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                    \n        readonly fmp4HlsSettings?: CfnChannel.Fmp4HlsSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                    \n        readonly frameCaptureHlsSettings?: CfnChannel.FrameCaptureHlsSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                           \n        readonly standardHlsSettings?: CfnChannel.StandardHlsSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `HlsSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_HlsSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audioOnlyHlsSettings', CfnChannel_AudioOnlyHlsSettingsPropertyValidator)(properties.audioOnlyHlsSettings));\n    errors.collect(cdk.propertyValidator('fmp4HlsSettings', CfnChannel_Fmp4HlsSettingsPropertyValidator)(properties.fmp4HlsSettings));\n    errors.collect(cdk.propertyValidator('frameCaptureHlsSettings', CfnChannel_FrameCaptureHlsSettingsPropertyValidator)(properties.frameCaptureHlsSettings));\n    errors.collect(cdk.propertyValidator('standardHlsSettings', CfnChannel_StandardHlsSettingsPropertyValidator)(properties.standardHlsSettings));\n    return errors.wrap('supplied properties not correct for \"HlsSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsSettings` resource\n *\n * @param properties - the TypeScript properties of a `HlsSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelHlsSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_HlsSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AudioOnlyHlsSettings: cfnChannelAudioOnlyHlsSettingsPropertyToCloudFormation(properties.audioOnlyHlsSettings),\n        Fmp4HlsSettings: cfnChannelFmp4HlsSettingsPropertyToCloudFormation(properties.fmp4HlsSettings),\n        FrameCaptureHlsSettings: cfnChannelFrameCaptureHlsSettingsPropertyToCloudFormation(properties.frameCaptureHlsSettings),\n        StandardHlsSettings: cfnChannelStandardHlsSettingsPropertyToCloudFormation(properties.standardHlsSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelHlsSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.HlsSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.HlsSettingsProperty>();\n    ret.addPropertyResult('audioOnlyHlsSettings', 'AudioOnlyHlsSettings', properties.AudioOnlyHlsSettings != null ? CfnChannelAudioOnlyHlsSettingsPropertyFromCloudFormation(properties.AudioOnlyHlsSettings) : undefined);\n    ret.addPropertyResult('fmp4HlsSettings', 'Fmp4HlsSettings', properties.Fmp4HlsSettings != null ? CfnChannelFmp4HlsSettingsPropertyFromCloudFormation(properties.Fmp4HlsSettings) : undefined);\n    ret.addPropertyResult('frameCaptureHlsSettings', 'FrameCaptureHlsSettings', properties.FrameCaptureHlsSettings != null ? CfnChannelFrameCaptureHlsSettingsPropertyFromCloudFormation(properties.FrameCaptureHlsSettings) : undefined);\n    ret.addPropertyResult('standardHlsSettings', 'StandardHlsSettings', properties.StandardHlsSettings != null ? CfnChannelStandardHlsSettingsPropertyFromCloudFormation(properties.StandardHlsSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                             \n    export interface HlsWebdavSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly connectionRetryInterval?: number;\n                                                                                                                                                                                                                                                                                                             \n        readonly filecacheDuration?: number;\n                                                                                                                                                                                                                                                                                                           \n        readonly httpTransferMode?: string;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly numRetries?: number;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly restartDelay?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsWebdavSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `HlsWebdavSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_HlsWebdavSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('connectionRetryInterval', cdk.validateNumber)(properties.connectionRetryInterval));\n    errors.collect(cdk.propertyValidator('filecacheDuration', cdk.validateNumber)(properties.filecacheDuration));\n    errors.collect(cdk.propertyValidator('httpTransferMode', cdk.validateString)(properties.httpTransferMode));\n    errors.collect(cdk.propertyValidator('numRetries', cdk.validateNumber)(properties.numRetries));\n    errors.collect(cdk.propertyValidator('restartDelay', cdk.validateNumber)(properties.restartDelay));\n    return errors.wrap('supplied properties not correct for \"HlsWebdavSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsWebdavSettings` resource\n *\n * @param properties - the TypeScript properties of a `HlsWebdavSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HlsWebdavSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelHlsWebdavSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_HlsWebdavSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ConnectionRetryInterval: cdk.numberToCloudFormation(properties.connectionRetryInterval),\n        FilecacheDuration: cdk.numberToCloudFormation(properties.filecacheDuration),\n        HttpTransferMode: cdk.stringToCloudFormation(properties.httpTransferMode),\n        NumRetries: cdk.numberToCloudFormation(properties.numRetries),\n        RestartDelay: cdk.numberToCloudFormation(properties.restartDelay),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelHlsWebdavSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.HlsWebdavSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.HlsWebdavSettingsProperty>();\n    ret.addPropertyResult('connectionRetryInterval', 'ConnectionRetryInterval', properties.ConnectionRetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionRetryInterval) : undefined);\n    ret.addPropertyResult('filecacheDuration', 'FilecacheDuration', properties.FilecacheDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.FilecacheDuration) : undefined);\n    ret.addPropertyResult('httpTransferMode', 'HttpTransferMode', properties.HttpTransferMode != null ? cfn_parse.FromCloudFormation.getString(properties.HttpTransferMode) : undefined);\n    ret.addPropertyResult('numRetries', 'NumRetries', properties.NumRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRetries) : undefined);\n    ret.addPropertyResult('restartDelay', 'RestartDelay', properties.RestartDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.RestartDelay) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                    \n    export interface HtmlMotionGraphicsSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HtmlMotionGraphicsSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `HtmlMotionGraphicsSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_HtmlMotionGraphicsSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"HtmlMotionGraphicsSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HtmlMotionGraphicsSettings` resource\n *\n * @param properties - the TypeScript properties of a `HtmlMotionGraphicsSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.HtmlMotionGraphicsSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelHtmlMotionGraphicsSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_HtmlMotionGraphicsSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelHtmlMotionGraphicsSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.HtmlMotionGraphicsSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.HtmlMotionGraphicsSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                 \n    export interface InputAttachmentProperty {\n                                                                                                                                                                                                                                                                                                                     \n        readonly automaticInputFailoverSettings?: CfnChannel.AutomaticInputFailoverSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly inputAttachmentName?: string;\n                                                                                                                                                                                                                                                               \n        readonly inputId?: string;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly inputSettings?: CfnChannel.InputSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputAttachmentProperty`\n *\n * @param properties - the TypeScript properties of a `InputAttachmentProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_InputAttachmentPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('automaticInputFailoverSettings', CfnChannel_AutomaticInputFailoverSettingsPropertyValidator)(properties.automaticInputFailoverSettings));\n    errors.collect(cdk.propertyValidator('inputAttachmentName', cdk.validateString)(properties.inputAttachmentName));\n    errors.collect(cdk.propertyValidator('inputId', cdk.validateString)(properties.inputId));\n    errors.collect(cdk.propertyValidator('inputSettings', CfnChannel_InputSettingsPropertyValidator)(properties.inputSettings));\n    return errors.wrap('supplied properties not correct for \"InputAttachmentProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputAttachment` resource\n *\n * @param properties - the TypeScript properties of a `InputAttachmentProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputAttachment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelInputAttachmentPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_InputAttachmentPropertyValidator(properties).assertSuccess();\n    return {\n        AutomaticInputFailoverSettings: cfnChannelAutomaticInputFailoverSettingsPropertyToCloudFormation(properties.automaticInputFailoverSettings),\n        InputAttachmentName: cdk.stringToCloudFormation(properties.inputAttachmentName),\n        InputId: cdk.stringToCloudFormation(properties.inputId),\n        InputSettings: cfnChannelInputSettingsPropertyToCloudFormation(properties.inputSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelInputAttachmentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.InputAttachmentProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.InputAttachmentProperty>();\n    ret.addPropertyResult('automaticInputFailoverSettings', 'AutomaticInputFailoverSettings', properties.AutomaticInputFailoverSettings != null ? CfnChannelAutomaticInputFailoverSettingsPropertyFromCloudFormation(properties.AutomaticInputFailoverSettings) : undefined);\n    ret.addPropertyResult('inputAttachmentName', 'InputAttachmentName', properties.InputAttachmentName != null ? cfn_parse.FromCloudFormation.getString(properties.InputAttachmentName) : undefined);\n    ret.addPropertyResult('inputId', 'InputId', properties.InputId != null ? cfn_parse.FromCloudFormation.getString(properties.InputId) : undefined);\n    ret.addPropertyResult('inputSettings', 'InputSettings', properties.InputSettings != null ? CfnChannelInputSettingsPropertyFromCloudFormation(properties.InputSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                  \n    export interface InputChannelLevelProperty {\n                                                                                                                                                                                                                                                                                                                                          \n        readonly gain?: number;\n                                                                                                                                                                                                                                                                                                  \n        readonly inputChannel?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputChannelLevelProperty`\n *\n * @param properties - the TypeScript properties of a `InputChannelLevelProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_InputChannelLevelPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('gain', cdk.validateNumber)(properties.gain));\n    errors.collect(cdk.propertyValidator('inputChannel', cdk.validateNumber)(properties.inputChannel));\n    return errors.wrap('supplied properties not correct for \"InputChannelLevelProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputChannelLevel` resource\n *\n * @param properties - the TypeScript properties of a `InputChannelLevelProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputChannelLevel` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelInputChannelLevelPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_InputChannelLevelPropertyValidator(properties).assertSuccess();\n    return {\n        Gain: cdk.numberToCloudFormation(properties.gain),\n        InputChannel: cdk.numberToCloudFormation(properties.inputChannel),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelInputChannelLevelPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.InputChannelLevelProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.InputChannelLevelProperty>();\n    ret.addPropertyResult('gain', 'Gain', properties.Gain != null ? cfn_parse.FromCloudFormation.getNumber(properties.Gain) : undefined);\n    ret.addPropertyResult('inputChannel', 'InputChannel', properties.InputChannel != null ? cfn_parse.FromCloudFormation.getNumber(properties.InputChannel) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                               \n    export interface InputLocationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly passwordParam?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly uri?: string;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly username?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputLocationProperty`\n *\n * @param properties - the TypeScript properties of a `InputLocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_InputLocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('passwordParam', cdk.validateString)(properties.passwordParam));\n    errors.collect(cdk.propertyValidator('uri', cdk.validateString)(properties.uri));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"InputLocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputLocation` resource\n *\n * @param properties - the TypeScript properties of a `InputLocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputLocation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelInputLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_InputLocationPropertyValidator(properties).assertSuccess();\n    return {\n        PasswordParam: cdk.stringToCloudFormation(properties.passwordParam),\n        Uri: cdk.stringToCloudFormation(properties.uri),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelInputLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.InputLocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.InputLocationProperty>();\n    ret.addPropertyResult('passwordParam', 'PasswordParam', properties.PasswordParam != null ? cfn_parse.FromCloudFormation.getString(properties.PasswordParam) : undefined);\n    ret.addPropertyResult('uri', 'Uri', properties.Uri != null ? cfn_parse.FromCloudFormation.getString(properties.Uri) : undefined);\n    ret.addPropertyResult('username', 'Username', properties.Username != null ? cfn_parse.FromCloudFormation.getString(properties.Username) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                               \n    export interface InputLossBehaviorProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly blackFrameMsec?: number;\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly inputLossImageColor?: string;\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly inputLossImageSlate?: CfnChannel.InputLocationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly inputLossImageType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly repeatFrameMsec?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputLossBehaviorProperty`\n *\n * @param properties - the TypeScript properties of a `InputLossBehaviorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_InputLossBehaviorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('blackFrameMsec', cdk.validateNumber)(properties.blackFrameMsec));\n    errors.collect(cdk.propertyValidator('inputLossImageColor', cdk.validateString)(properties.inputLossImageColor));\n    errors.collect(cdk.propertyValidator('inputLossImageSlate', CfnChannel_InputLocationPropertyValidator)(properties.inputLossImageSlate));\n    errors.collect(cdk.propertyValidator('inputLossImageType', cdk.validateString)(properties.inputLossImageType));\n    errors.collect(cdk.propertyValidator('repeatFrameMsec', cdk.validateNumber)(properties.repeatFrameMsec));\n    return errors.wrap('supplied properties not correct for \"InputLossBehaviorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputLossBehavior` resource\n *\n * @param properties - the TypeScript properties of a `InputLossBehaviorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputLossBehavior` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelInputLossBehaviorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_InputLossBehaviorPropertyValidator(properties).assertSuccess();\n    return {\n        BlackFrameMsec: cdk.numberToCloudFormation(properties.blackFrameMsec),\n        InputLossImageColor: cdk.stringToCloudFormation(properties.inputLossImageColor),\n        InputLossImageSlate: cfnChannelInputLocationPropertyToCloudFormation(properties.inputLossImageSlate),\n        InputLossImageType: cdk.stringToCloudFormation(properties.inputLossImageType),\n        RepeatFrameMsec: cdk.numberToCloudFormation(properties.repeatFrameMsec),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelInputLossBehaviorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.InputLossBehaviorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.InputLossBehaviorProperty>();\n    ret.addPropertyResult('blackFrameMsec', 'BlackFrameMsec', properties.BlackFrameMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.BlackFrameMsec) : undefined);\n    ret.addPropertyResult('inputLossImageColor', 'InputLossImageColor', properties.InputLossImageColor != null ? cfn_parse.FromCloudFormation.getString(properties.InputLossImageColor) : undefined);\n    ret.addPropertyResult('inputLossImageSlate', 'InputLossImageSlate', properties.InputLossImageSlate != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.InputLossImageSlate) : undefined);\n    ret.addPropertyResult('inputLossImageType', 'InputLossImageType', properties.InputLossImageType != null ? cfn_parse.FromCloudFormation.getString(properties.InputLossImageType) : undefined);\n    ret.addPropertyResult('repeatFrameMsec', 'RepeatFrameMsec', properties.RepeatFrameMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.RepeatFrameMsec) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface InputLossFailoverSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly inputLossThresholdMsec?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputLossFailoverSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `InputLossFailoverSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_InputLossFailoverSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('inputLossThresholdMsec', cdk.validateNumber)(properties.inputLossThresholdMsec));\n    return errors.wrap('supplied properties not correct for \"InputLossFailoverSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputLossFailoverSettings` resource\n *\n * @param properties - the TypeScript properties of a `InputLossFailoverSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputLossFailoverSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelInputLossFailoverSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_InputLossFailoverSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        InputLossThresholdMsec: cdk.numberToCloudFormation(properties.inputLossThresholdMsec),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelInputLossFailoverSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.InputLossFailoverSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.InputLossFailoverSettingsProperty>();\n    ret.addPropertyResult('inputLossThresholdMsec', 'InputLossThresholdMsec', properties.InputLossThresholdMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.InputLossThresholdMsec) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                             \n    export interface InputSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly audioSelectors?: Array<CfnChannel.AudioSelectorProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                        \n        readonly captionSelectors?: Array<CfnChannel.CaptionSelectorProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly deblockFilter?: string;\n                                                                                                                                                                                                                                                                                         \n        readonly denoiseFilter?: string;\n                                                                                                                                                                                                                                                                                                         \n        readonly filterStrength?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly inputFilter?: string;\n                                                                                                                                                                                                                                                                                                  \n        readonly networkInputSettings?: CfnChannel.NetworkInputSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                           \n        readonly scte35Pid?: number;\nn        readonly smpte2038DataPreference?: string;\n                                                                                                                                                                                                                                                                      \n        readonly sourceEndBehavior?: string;\n                                                                                                                                                                                                                                                                                         \n        readonly videoSelector?: CfnChannel.VideoSelectorProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `InputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_InputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audioSelectors', cdk.listValidator(CfnChannel_AudioSelectorPropertyValidator))(properties.audioSelectors));\n    errors.collect(cdk.propertyValidator('captionSelectors', cdk.listValidator(CfnChannel_CaptionSelectorPropertyValidator))(properties.captionSelectors));\n    errors.collect(cdk.propertyValidator('deblockFilter', cdk.validateString)(properties.deblockFilter));\n    errors.collect(cdk.propertyValidator('denoiseFilter', cdk.validateString)(properties.denoiseFilter));\n    errors.collect(cdk.propertyValidator('filterStrength', cdk.validateNumber)(properties.filterStrength));\n    errors.collect(cdk.propertyValidator('inputFilter', cdk.validateString)(properties.inputFilter));\n    errors.collect(cdk.propertyValidator('networkInputSettings', CfnChannel_NetworkInputSettingsPropertyValidator)(properties.networkInputSettings));\n    errors.collect(cdk.propertyValidator('scte35Pid', cdk.validateNumber)(properties.scte35Pid));\n    errors.collect(cdk.propertyValidator('smpte2038DataPreference', cdk.validateString)(properties.smpte2038DataPreference));\n    errors.collect(cdk.propertyValidator('sourceEndBehavior', cdk.validateString)(properties.sourceEndBehavior));\n    errors.collect(cdk.propertyValidator('videoSelector', CfnChannel_VideoSelectorPropertyValidator)(properties.videoSelector));\n    return errors.wrap('supplied properties not correct for \"InputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputSettings` resource\n *\n * @param properties - the TypeScript properties of a `InputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelInputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_InputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AudioSelectors: cdk.listMapper(cfnChannelAudioSelectorPropertyToCloudFormation)(properties.audioSelectors),\n        CaptionSelectors: cdk.listMapper(cfnChannelCaptionSelectorPropertyToCloudFormation)(properties.captionSelectors),\n        DeblockFilter: cdk.stringToCloudFormation(properties.deblockFilter),\n        DenoiseFilter: cdk.stringToCloudFormation(properties.denoiseFilter),\n        FilterStrength: cdk.numberToCloudFormation(properties.filterStrength),\n        InputFilter: cdk.stringToCloudFormation(properties.inputFilter),\n        NetworkInputSettings: cfnChannelNetworkInputSettingsPropertyToCloudFormation(properties.networkInputSettings),\n        Scte35Pid: cdk.numberToCloudFormation(properties.scte35Pid),\n        Smpte2038DataPreference: cdk.stringToCloudFormation(properties.smpte2038DataPreference),\n        SourceEndBehavior: cdk.stringToCloudFormation(properties.sourceEndBehavior),\n        VideoSelector: cfnChannelVideoSelectorPropertyToCloudFormation(properties.videoSelector),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelInputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.InputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.InputSettingsProperty>();\n    ret.addPropertyResult('audioSelectors', 'AudioSelectors', properties.AudioSelectors != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelAudioSelectorPropertyFromCloudFormation)(properties.AudioSelectors) : undefined);\n    ret.addPropertyResult('captionSelectors', 'CaptionSelectors', properties.CaptionSelectors != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelCaptionSelectorPropertyFromCloudFormation)(properties.CaptionSelectors) : undefined);\n    ret.addPropertyResult('deblockFilter', 'DeblockFilter', properties.DeblockFilter != null ? cfn_parse.FromCloudFormation.getString(properties.DeblockFilter) : undefined);\n    ret.addPropertyResult('denoiseFilter', 'DenoiseFilter', properties.DenoiseFilter != null ? cfn_parse.FromCloudFormation.getString(properties.DenoiseFilter) : undefined);\n    ret.addPropertyResult('filterStrength', 'FilterStrength', properties.FilterStrength != null ? cfn_parse.FromCloudFormation.getNumber(properties.FilterStrength) : undefined);\n    ret.addPropertyResult('inputFilter', 'InputFilter', properties.InputFilter != null ? cfn_parse.FromCloudFormation.getString(properties.InputFilter) : undefined);\n    ret.addPropertyResult('networkInputSettings', 'NetworkInputSettings', properties.NetworkInputSettings != null ? CfnChannelNetworkInputSettingsPropertyFromCloudFormation(properties.NetworkInputSettings) : undefined);\n    ret.addPropertyResult('scte35Pid', 'Scte35Pid', properties.Scte35Pid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Scte35Pid) : undefined);\n    ret.addPropertyResult('smpte2038DataPreference', 'Smpte2038DataPreference', properties.Smpte2038DataPreference != null ? cfn_parse.FromCloudFormation.getString(properties.Smpte2038DataPreference) : undefined);\n    ret.addPropertyResult('sourceEndBehavior', 'SourceEndBehavior', properties.SourceEndBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.SourceEndBehavior) : undefined);\n    ret.addPropertyResult('videoSelector', 'VideoSelector', properties.VideoSelector != null ? CfnChannelVideoSelectorPropertyFromCloudFormation(properties.VideoSelector) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface InputSpecificationProperty {\n                                                                                                                                                                                                                                                                                                      \n        readonly codec?: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly maximumBitrate?: string;\n                                                                                                                                                                                                                                                                                                \n        readonly resolution?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `InputSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_InputSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('codec', cdk.validateString)(properties.codec));\n    errors.collect(cdk.propertyValidator('maximumBitrate', cdk.validateString)(properties.maximumBitrate));\n    errors.collect(cdk.propertyValidator('resolution', cdk.validateString)(properties.resolution));\n    return errors.wrap('supplied properties not correct for \"InputSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputSpecification` resource\n *\n * @param properties - the TypeScript properties of a `InputSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.InputSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelInputSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_InputSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        Codec: cdk.stringToCloudFormation(properties.codec),\n        MaximumBitrate: cdk.stringToCloudFormation(properties.maximumBitrate),\n        Resolution: cdk.stringToCloudFormation(properties.resolution),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelInputSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.InputSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.InputSpecificationProperty>();\n    ret.addPropertyResult('codec', 'Codec', properties.Codec != null ? cfn_parse.FromCloudFormation.getString(properties.Codec) : undefined);\n    ret.addPropertyResult('maximumBitrate', 'MaximumBitrate', properties.MaximumBitrate != null ? cfn_parse.FromCloudFormation.getString(properties.MaximumBitrate) : undefined);\n    ret.addPropertyResult('resolution', 'Resolution', properties.Resolution != null ? cfn_parse.FromCloudFormation.getString(properties.Resolution) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                            \n    export interface KeyProviderSettingsProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly staticKeySettings?: CfnChannel.StaticKeySettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KeyProviderSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `KeyProviderSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_KeyProviderSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('staticKeySettings', CfnChannel_StaticKeySettingsPropertyValidator)(properties.staticKeySettings));\n    return errors.wrap('supplied properties not correct for \"KeyProviderSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.KeyProviderSettings` resource\n *\n * @param properties - the TypeScript properties of a `KeyProviderSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.KeyProviderSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelKeyProviderSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_KeyProviderSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        StaticKeySettings: cfnChannelStaticKeySettingsPropertyToCloudFormation(properties.staticKeySettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelKeyProviderSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.KeyProviderSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.KeyProviderSettingsProperty>();\n    ret.addPropertyResult('staticKeySettings', 'StaticKeySettings', properties.StaticKeySettings != null ? CfnChannelStaticKeySettingsPropertyFromCloudFormation(properties.StaticKeySettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                         \n    export interface M2tsSettingsProperty {\nn        readonly absentInputAudioBehavior?: string;\n                                                                                                                                                                                                                                                                                                           \n        readonly arib?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly aribCaptionsPid?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly aribCaptionsPidControl?: string;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly audioBufferModel?: string;\n                                                                                                                                                                                                                                                                                              \n        readonly audioFramesPerPes?: number;\nn        readonly audioPids?: string;\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly audioStreamType?: string;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly bitrate?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly bufferModel?: string;\n                                                                                                                                                                                                                                                                                               \n        readonly ccDescriptor?: string;\n                                                                                                                                                                                                                                                                                                                           \n        readonly dvbNitSettings?: CfnChannel.DvbNitSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                           \n        readonly dvbSdtSettings?: CfnChannel.DvbSdtSettingsProperty | cdk.IResolvable;\nn        readonly dvbSubPids?: string;\n                                                                                                                                                                                                                                                                                                                   \n        readonly dvbTdtSettings?: CfnChannel.DvbTdtSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly dvbTeletextPid?: string;\n                                                                                                                                                                                                                                                                                                         \n        readonly ebif?: string;\nn        readonly ebpAudioInterval?: string;\nn        readonly ebpLookaheadMs?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly ebpPlacement?: string;\n                                                                                                                                                                                                                                                              \n        readonly ecmPid?: string;\n                                                                                                                                                                                                                                                                                        \n        readonly esRateInPes?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly etvPlatformPid?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly etvSignalPid?: string;\n                                                                                                                                                                                                                                                                                                           \n        readonly fragmentTime?: number;\n                                                                                                                                                                                                                                                                                                       \n        readonly klv?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly klvDataPids?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly nielsenId3Behavior?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly nullPacketBitrate?: number;\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly patInterval?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly pcrControl?: string;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly pcrPeriod?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly pcrPid?: string;\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly pmtInterval?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly pmtPid?: string;\n                                                                                                                                                                                                                                                                                                   \n        readonly programNum?: number;\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly rateMode?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly scte27Pids?: string;\n                                                                                                                                                                                                                                                                                                        \n        readonly scte35Control?: string;\n                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly scte35Pid?: string;\nn        readonly segmentationMarkers?: string;\nn        readonly segmentationStyle?: string;\n                                                                                                                                                                                                                                                                                                                             \n        readonly segmentationTime?: number;\n                                                                                                                                                                                                                                                                                                                        \n        readonly timedMetadataBehavior?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly timedMetadataPid?: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly transportStreamId?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly videoPid?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `M2tsSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `M2tsSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_M2tsSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('absentInputAudioBehavior', cdk.validateString)(properties.absentInputAudioBehavior));\n    errors.collect(cdk.propertyValidator('arib', cdk.validateString)(properties.arib));\n    errors.collect(cdk.propertyValidator('aribCaptionsPid', cdk.validateString)(properties.aribCaptionsPid));\n    errors.collect(cdk.propertyValidator('aribCaptionsPidControl', cdk.validateString)(properties.aribCaptionsPidControl));\n    errors.collect(cdk.propertyValidator('audioBufferModel', cdk.validateString)(properties.audioBufferModel));\n    errors.collect(cdk.propertyValidator('audioFramesPerPes', cdk.validateNumber)(properties.audioFramesPerPes));\n    errors.collect(cdk.propertyValidator('audioPids', cdk.validateString)(properties.audioPids));\n    errors.collect(cdk.propertyValidator('audioStreamType', cdk.validateString)(properties.audioStreamType));\n    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));\n    errors.collect(cdk.propertyValidator('bufferModel', cdk.validateString)(properties.bufferModel));\n    errors.collect(cdk.propertyValidator('ccDescriptor', cdk.validateString)(properties.ccDescriptor));\n    errors.collect(cdk.propertyValidator('dvbNitSettings', CfnChannel_DvbNitSettingsPropertyValidator)(properties.dvbNitSettings));\n    errors.collect(cdk.propertyValidator('dvbSdtSettings', CfnChannel_DvbSdtSettingsPropertyValidator)(properties.dvbSdtSettings));\n    errors.collect(cdk.propertyValidator('dvbSubPids', cdk.validateString)(properties.dvbSubPids));\n    errors.collect(cdk.propertyValidator('dvbTdtSettings', CfnChannel_DvbTdtSettingsPropertyValidator)(properties.dvbTdtSettings));\n    errors.collect(cdk.propertyValidator('dvbTeletextPid', cdk.validateString)(properties.dvbTeletextPid));\n    errors.collect(cdk.propertyValidator('ebif', cdk.validateString)(properties.ebif));\n    errors.collect(cdk.propertyValidator('ebpAudioInterval', cdk.validateString)(properties.ebpAudioInterval));\n    errors.collect(cdk.propertyValidator('ebpLookaheadMs', cdk.validateNumber)(properties.ebpLookaheadMs));\n    errors.collect(cdk.propertyValidator('ebpPlacement', cdk.validateString)(properties.ebpPlacement));\n    errors.collect(cdk.propertyValidator('ecmPid', cdk.validateString)(properties.ecmPid));\n    errors.collect(cdk.propertyValidator('esRateInPes', cdk.validateString)(properties.esRateInPes));\n    errors.collect(cdk.propertyValidator('etvPlatformPid', cdk.validateString)(properties.etvPlatformPid));\n    errors.collect(cdk.propertyValidator('etvSignalPid', cdk.validateString)(properties.etvSignalPid));\n    errors.collect(cdk.propertyValidator('fragmentTime', cdk.validateNumber)(properties.fragmentTime));\n    errors.collect(cdk.propertyValidator('klv', cdk.validateString)(properties.klv));\n    errors.collect(cdk.propertyValidator('klvDataPids', cdk.validateString)(properties.klvDataPids));\n    errors.collect(cdk.propertyValidator('nielsenId3Behavior', cdk.validateString)(properties.nielsenId3Behavior));\n    errors.collect(cdk.propertyValidator('nullPacketBitrate', cdk.validateNumber)(properties.nullPacketBitrate));\n    errors.collect(cdk.propertyValidator('patInterval', cdk.validateNumber)(properties.patInterval));\n    errors.collect(cdk.propertyValidator('pcrControl', cdk.validateString)(properties.pcrControl));\n    errors.collect(cdk.propertyValidator('pcrPeriod', cdk.validateNumber)(properties.pcrPeriod));\n    errors.collect(cdk.propertyValidator('pcrPid', cdk.validateString)(properties.pcrPid));\n    errors.collect(cdk.propertyValidator('pmtInterval', cdk.validateNumber)(properties.pmtInterval));\n    errors.collect(cdk.propertyValidator('pmtPid', cdk.validateString)(properties.pmtPid));\n    errors.collect(cdk.propertyValidator('programNum', cdk.validateNumber)(properties.programNum));\n    errors.collect(cdk.propertyValidator('rateMode', cdk.validateString)(properties.rateMode));\n    errors.collect(cdk.propertyValidator('scte27Pids', cdk.validateString)(properties.scte27Pids));\n    errors.collect(cdk.propertyValidator('scte35Control', cdk.validateString)(properties.scte35Control));\n    errors.collect(cdk.propertyValidator('scte35Pid', cdk.validateString)(properties.scte35Pid));\n    errors.collect(cdk.propertyValidator('segmentationMarkers', cdk.validateString)(properties.segmentationMarkers));\n    errors.collect(cdk.propertyValidator('segmentationStyle', cdk.validateString)(properties.segmentationStyle));\n    errors.collect(cdk.propertyValidator('segmentationTime', cdk.validateNumber)(properties.segmentationTime));\n    errors.collect(cdk.propertyValidator('timedMetadataBehavior', cdk.validateString)(properties.timedMetadataBehavior));\n    errors.collect(cdk.propertyValidator('timedMetadataPid', cdk.validateString)(properties.timedMetadataPid));\n    errors.collect(cdk.propertyValidator('transportStreamId', cdk.validateNumber)(properties.transportStreamId));\n    errors.collect(cdk.propertyValidator('videoPid', cdk.validateString)(properties.videoPid));\n    return errors.wrap('supplied properties not correct for \"M2tsSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.M2tsSettings` resource\n *\n * @param properties - the TypeScript properties of a `M2tsSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.M2tsSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelM2tsSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_M2tsSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AbsentInputAudioBehavior: cdk.stringToCloudFormation(properties.absentInputAudioBehavior),\n        Arib: cdk.stringToCloudFormation(properties.arib),\n        AribCaptionsPid: cdk.stringToCloudFormation(properties.aribCaptionsPid),\n        AribCaptionsPidControl: cdk.stringToCloudFormation(properties.aribCaptionsPidControl),\n        AudioBufferModel: cdk.stringToCloudFormation(properties.audioBufferModel),\n        AudioFramesPerPes: cdk.numberToCloudFormation(properties.audioFramesPerPes),\n        AudioPids: cdk.stringToCloudFormation(properties.audioPids),\n        AudioStreamType: cdk.stringToCloudFormation(properties.audioStreamType),\n        Bitrate: cdk.numberToCloudFormation(properties.bitrate),\n        BufferModel: cdk.stringToCloudFormation(properties.bufferModel),\n        CcDescriptor: cdk.stringToCloudFormation(properties.ccDescriptor),\n        DvbNitSettings: cfnChannelDvbNitSettingsPropertyToCloudFormation(properties.dvbNitSettings),\n        DvbSdtSettings: cfnChannelDvbSdtSettingsPropertyToCloudFormation(properties.dvbSdtSettings),\n        DvbSubPids: cdk.stringToCloudFormation(properties.dvbSubPids),\n        DvbTdtSettings: cfnChannelDvbTdtSettingsPropertyToCloudFormation(properties.dvbTdtSettings),\n        DvbTeletextPid: cdk.stringToCloudFormation(properties.dvbTeletextPid),\n        Ebif: cdk.stringToCloudFormation(properties.ebif),\n        EbpAudioInterval: cdk.stringToCloudFormation(properties.ebpAudioInterval),\n        EbpLookaheadMs: cdk.numberToCloudFormation(properties.ebpLookaheadMs),\n        EbpPlacement: cdk.stringToCloudFormation(properties.ebpPlacement),\n        EcmPid: cdk.stringToCloudFormation(properties.ecmPid),\n        EsRateInPes: cdk.stringToCloudFormation(properties.esRateInPes),\n        EtvPlatformPid: cdk.stringToCloudFormation(properties.etvPlatformPid),\n        EtvSignalPid: cdk.stringToCloudFormation(properties.etvSignalPid),\n        FragmentTime: cdk.numberToCloudFormation(properties.fragmentTime),\n        Klv: cdk.stringToCloudFormation(properties.klv),\n        KlvDataPids: cdk.stringToCloudFormation(properties.klvDataPids),\n        NielsenId3Behavior: cdk.stringToCloudFormation(properties.nielsenId3Behavior),\n        NullPacketBitrate: cdk.numberToCloudFormation(properties.nullPacketBitrate),\n        PatInterval: cdk.numberToCloudFormation(properties.patInterval),\n        PcrControl: cdk.stringToCloudFormation(properties.pcrControl),\n        PcrPeriod: cdk.numberToCloudFormation(properties.pcrPeriod),\n        PcrPid: cdk.stringToCloudFormation(properties.pcrPid),\n        PmtInterval: cdk.numberToCloudFormation(properties.pmtInterval),\n        PmtPid: cdk.stringToCloudFormation(properties.pmtPid),\n        ProgramNum: cdk.numberToCloudFormation(properties.programNum),\n        RateMode: cdk.stringToCloudFormation(properties.rateMode),\n        Scte27Pids: cdk.stringToCloudFormation(properties.scte27Pids),\n        Scte35Control: cdk.stringToCloudFormation(properties.scte35Control),\n        Scte35Pid: cdk.stringToCloudFormation(properties.scte35Pid),\n        SegmentationMarkers: cdk.stringToCloudFormation(properties.segmentationMarkers),\n        SegmentationStyle: cdk.stringToCloudFormation(properties.segmentationStyle),\n        SegmentationTime: cdk.numberToCloudFormation(properties.segmentationTime),\n        TimedMetadataBehavior: cdk.stringToCloudFormation(properties.timedMetadataBehavior),\n        TimedMetadataPid: cdk.stringToCloudFormation(properties.timedMetadataPid),\n        TransportStreamId: cdk.numberToCloudFormation(properties.transportStreamId),\n        VideoPid: cdk.stringToCloudFormation(properties.videoPid),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelM2tsSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.M2tsSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.M2tsSettingsProperty>();\n    ret.addPropertyResult('absentInputAudioBehavior', 'AbsentInputAudioBehavior', properties.AbsentInputAudioBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.AbsentInputAudioBehavior) : undefined);\n    ret.addPropertyResult('arib', 'Arib', properties.Arib != null ? cfn_parse.FromCloudFormation.getString(properties.Arib) : undefined);\n    ret.addPropertyResult('aribCaptionsPid', 'AribCaptionsPid', properties.AribCaptionsPid != null ? cfn_parse.FromCloudFormation.getString(properties.AribCaptionsPid) : undefined);\n    ret.addPropertyResult('aribCaptionsPidControl', 'AribCaptionsPidControl', properties.AribCaptionsPidControl != null ? cfn_parse.FromCloudFormation.getString(properties.AribCaptionsPidControl) : undefined);\n    ret.addPropertyResult('audioBufferModel', 'AudioBufferModel', properties.AudioBufferModel != null ? cfn_parse.FromCloudFormation.getString(properties.AudioBufferModel) : undefined);\n    ret.addPropertyResult('audioFramesPerPes', 'AudioFramesPerPes', properties.AudioFramesPerPes != null ? cfn_parse.FromCloudFormation.getNumber(properties.AudioFramesPerPes) : undefined);\n    ret.addPropertyResult('audioPids', 'AudioPids', properties.AudioPids != null ? cfn_parse.FromCloudFormation.getString(properties.AudioPids) : undefined);\n    ret.addPropertyResult('audioStreamType', 'AudioStreamType', properties.AudioStreamType != null ? cfn_parse.FromCloudFormation.getString(properties.AudioStreamType) : undefined);\n    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);\n    ret.addPropertyResult('bufferModel', 'BufferModel', properties.BufferModel != null ? cfn_parse.FromCloudFormation.getString(properties.BufferModel) : undefined);\n    ret.addPropertyResult('ccDescriptor', 'CcDescriptor', properties.CcDescriptor != null ? cfn_parse.FromCloudFormation.getString(properties.CcDescriptor) : undefined);\n    ret.addPropertyResult('dvbNitSettings', 'DvbNitSettings', properties.DvbNitSettings != null ? CfnChannelDvbNitSettingsPropertyFromCloudFormation(properties.DvbNitSettings) : undefined);\n    ret.addPropertyResult('dvbSdtSettings', 'DvbSdtSettings', properties.DvbSdtSettings != null ? CfnChannelDvbSdtSettingsPropertyFromCloudFormation(properties.DvbSdtSettings) : undefined);\n    ret.addPropertyResult('dvbSubPids', 'DvbSubPids', properties.DvbSubPids != null ? cfn_parse.FromCloudFormation.getString(properties.DvbSubPids) : undefined);\n    ret.addPropertyResult('dvbTdtSettings', 'DvbTdtSettings', properties.DvbTdtSettings != null ? CfnChannelDvbTdtSettingsPropertyFromCloudFormation(properties.DvbTdtSettings) : undefined);\n    ret.addPropertyResult('dvbTeletextPid', 'DvbTeletextPid', properties.DvbTeletextPid != null ? cfn_parse.FromCloudFormation.getString(properties.DvbTeletextPid) : undefined);\n    ret.addPropertyResult('ebif', 'Ebif', properties.Ebif != null ? cfn_parse.FromCloudFormation.getString(properties.Ebif) : undefined);\n    ret.addPropertyResult('ebpAudioInterval', 'EbpAudioInterval', properties.EbpAudioInterval != null ? cfn_parse.FromCloudFormation.getString(properties.EbpAudioInterval) : undefined);\n    ret.addPropertyResult('ebpLookaheadMs', 'EbpLookaheadMs', properties.EbpLookaheadMs != null ? cfn_parse.FromCloudFormation.getNumber(properties.EbpLookaheadMs) : undefined);\n    ret.addPropertyResult('ebpPlacement', 'EbpPlacement', properties.EbpPlacement != null ? cfn_parse.FromCloudFormation.getString(properties.EbpPlacement) : undefined);\n    ret.addPropertyResult('ecmPid', 'EcmPid', properties.EcmPid != null ? cfn_parse.FromCloudFormation.getString(properties.EcmPid) : undefined);\n    ret.addPropertyResult('esRateInPes', 'EsRateInPes', properties.EsRateInPes != null ? cfn_parse.FromCloudFormation.getString(properties.EsRateInPes) : undefined);\n    ret.addPropertyResult('etvPlatformPid', 'EtvPlatformPid', properties.EtvPlatformPid != null ? cfn_parse.FromCloudFormation.getString(properties.EtvPlatformPid) : undefined);\n    ret.addPropertyResult('etvSignalPid', 'EtvSignalPid', properties.EtvSignalPid != null ? cfn_parse.FromCloudFormation.getString(properties.EtvSignalPid) : undefined);\n    ret.addPropertyResult('fragmentTime', 'FragmentTime', properties.FragmentTime != null ? cfn_parse.FromCloudFormation.getNumber(properties.FragmentTime) : undefined);\n    ret.addPropertyResult('klv', 'Klv', properties.Klv != null ? cfn_parse.FromCloudFormation.getString(properties.Klv) : undefined);\n    ret.addPropertyResult('klvDataPids', 'KlvDataPids', properties.KlvDataPids != null ? cfn_parse.FromCloudFormation.getString(properties.KlvDataPids) : undefined);\n    ret.addPropertyResult('nielsenId3Behavior', 'NielsenId3Behavior', properties.NielsenId3Behavior != null ? cfn_parse.FromCloudFormation.getString(properties.NielsenId3Behavior) : undefined);\n    ret.addPropertyResult('nullPacketBitrate', 'NullPacketBitrate', properties.NullPacketBitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.NullPacketBitrate) : undefined);\n    ret.addPropertyResult('patInterval', 'PatInterval', properties.PatInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.PatInterval) : undefined);\n    ret.addPropertyResult('pcrControl', 'PcrControl', properties.PcrControl != null ? cfn_parse.FromCloudFormation.getString(properties.PcrControl) : undefined);\n    ret.addPropertyResult('pcrPeriod', 'PcrPeriod', properties.PcrPeriod != null ? cfn_parse.FromCloudFormation.getNumber(properties.PcrPeriod) : undefined);\n    ret.addPropertyResult('pcrPid', 'PcrPid', properties.PcrPid != null ? cfn_parse.FromCloudFormation.getString(properties.PcrPid) : undefined);\n    ret.addPropertyResult('pmtInterval', 'PmtInterval', properties.PmtInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.PmtInterval) : undefined);\n    ret.addPropertyResult('pmtPid', 'PmtPid', properties.PmtPid != null ? cfn_parse.FromCloudFormation.getString(properties.PmtPid) : undefined);\n    ret.addPropertyResult('programNum', 'ProgramNum', properties.ProgramNum != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProgramNum) : undefined);\n    ret.addPropertyResult('rateMode', 'RateMode', properties.RateMode != null ? cfn_parse.FromCloudFormation.getString(properties.RateMode) : undefined);\n    ret.addPropertyResult('scte27Pids', 'Scte27Pids', properties.Scte27Pids != null ? cfn_parse.FromCloudFormation.getString(properties.Scte27Pids) : undefined);\n    ret.addPropertyResult('scte35Control', 'Scte35Control', properties.Scte35Control != null ? cfn_parse.FromCloudFormation.getString(properties.Scte35Control) : undefined);\n    ret.addPropertyResult('scte35Pid', 'Scte35Pid', properties.Scte35Pid != null ? cfn_parse.FromCloudFormation.getString(properties.Scte35Pid) : undefined);\n    ret.addPropertyResult('segmentationMarkers', 'SegmentationMarkers', properties.SegmentationMarkers != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentationMarkers) : undefined);\n    ret.addPropertyResult('segmentationStyle', 'SegmentationStyle', properties.SegmentationStyle != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentationStyle) : undefined);\n    ret.addPropertyResult('segmentationTime', 'SegmentationTime', properties.SegmentationTime != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentationTime) : undefined);\n    ret.addPropertyResult('timedMetadataBehavior', 'TimedMetadataBehavior', properties.TimedMetadataBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataBehavior) : undefined);\n    ret.addPropertyResult('timedMetadataPid', 'TimedMetadataPid', properties.TimedMetadataPid != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataPid) : undefined);\n    ret.addPropertyResult('transportStreamId', 'TransportStreamId', properties.TransportStreamId != null ? cfn_parse.FromCloudFormation.getNumber(properties.TransportStreamId) : undefined);\n    ret.addPropertyResult('videoPid', 'VideoPid', properties.VideoPid != null ? cfn_parse.FromCloudFormation.getString(properties.VideoPid) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                             \n    export interface M3u8SettingsProperty {\n                                                                                                                                                                                                                                                                                              \n        readonly audioFramesPerPes?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly audioPids?: string;\n                                                                                                                                                                                                                                                                  \n        readonly ecmPid?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly nielsenId3Behavior?: string;\n                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly patInterval?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly pcrControl?: string;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly pcrPeriod?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly pcrPid?: string;\n                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly pmtInterval?: number;\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly pmtPid?: string;\n                                                                                                                                                                                                                                                                                                   \n        readonly programNum?: number;\n                                                                                                                                                                                                                                                                                                                         \n        readonly scte35Behavior?: string;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly scte35Pid?: string;\n                                                                                                                                                                                                                                                                                                                        \n        readonly timedMetadataBehavior?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly timedMetadataPid?: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly transportStreamId?: number;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly videoPid?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `M3u8SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `M3u8SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_M3u8SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audioFramesPerPes', cdk.validateNumber)(properties.audioFramesPerPes));\n    errors.collect(cdk.propertyValidator('audioPids', cdk.validateString)(properties.audioPids));\n    errors.collect(cdk.propertyValidator('ecmPid', cdk.validateString)(properties.ecmPid));\n    errors.collect(cdk.propertyValidator('nielsenId3Behavior', cdk.validateString)(properties.nielsenId3Behavior));\n    errors.collect(cdk.propertyValidator('patInterval', cdk.validateNumber)(properties.patInterval));\n    errors.collect(cdk.propertyValidator('pcrControl', cdk.validateString)(properties.pcrControl));\n    errors.collect(cdk.propertyValidator('pcrPeriod', cdk.validateNumber)(properties.pcrPeriod));\n    errors.collect(cdk.propertyValidator('pcrPid', cdk.validateString)(properties.pcrPid));\n    errors.collect(cdk.propertyValidator('pmtInterval', cdk.validateNumber)(properties.pmtInterval));\n    errors.collect(cdk.propertyValidator('pmtPid', cdk.validateString)(properties.pmtPid));\n    errors.collect(cdk.propertyValidator('programNum', cdk.validateNumber)(properties.programNum));\n    errors.collect(cdk.propertyValidator('scte35Behavior', cdk.validateString)(properties.scte35Behavior));\n    errors.collect(cdk.propertyValidator('scte35Pid', cdk.validateString)(properties.scte35Pid));\n    errors.collect(cdk.propertyValidator('timedMetadataBehavior', cdk.validateString)(properties.timedMetadataBehavior));\n    errors.collect(cdk.propertyValidator('timedMetadataPid', cdk.validateString)(properties.timedMetadataPid));\n    errors.collect(cdk.propertyValidator('transportStreamId', cdk.validateNumber)(properties.transportStreamId));\n    errors.collect(cdk.propertyValidator('videoPid', cdk.validateString)(properties.videoPid));\n    return errors.wrap('supplied properties not correct for \"M3u8SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.M3u8Settings` resource\n *\n * @param properties - the TypeScript properties of a `M3u8SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.M3u8Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelM3u8SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_M3u8SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AudioFramesPerPes: cdk.numberToCloudFormation(properties.audioFramesPerPes),\n        AudioPids: cdk.stringToCloudFormation(properties.audioPids),\n        EcmPid: cdk.stringToCloudFormation(properties.ecmPid),\n        NielsenId3Behavior: cdk.stringToCloudFormation(properties.nielsenId3Behavior),\n        PatInterval: cdk.numberToCloudFormation(properties.patInterval),\n        PcrControl: cdk.stringToCloudFormation(properties.pcrControl),\n        PcrPeriod: cdk.numberToCloudFormation(properties.pcrPeriod),\n        PcrPid: cdk.stringToCloudFormation(properties.pcrPid),\n        PmtInterval: cdk.numberToCloudFormation(properties.pmtInterval),\n        PmtPid: cdk.stringToCloudFormation(properties.pmtPid),\n        ProgramNum: cdk.numberToCloudFormation(properties.programNum),\n        Scte35Behavior: cdk.stringToCloudFormation(properties.scte35Behavior),\n        Scte35Pid: cdk.stringToCloudFormation(properties.scte35Pid),\n        TimedMetadataBehavior: cdk.stringToCloudFormation(properties.timedMetadataBehavior),\n        TimedMetadataPid: cdk.stringToCloudFormation(properties.timedMetadataPid),\n        TransportStreamId: cdk.numberToCloudFormation(properties.transportStreamId),\n        VideoPid: cdk.stringToCloudFormation(properties.videoPid),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelM3u8SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.M3u8SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.M3u8SettingsProperty>();\n    ret.addPropertyResult('audioFramesPerPes', 'AudioFramesPerPes', properties.AudioFramesPerPes != null ? cfn_parse.FromCloudFormation.getNumber(properties.AudioFramesPerPes) : undefined);\n    ret.addPropertyResult('audioPids', 'AudioPids', properties.AudioPids != null ? cfn_parse.FromCloudFormation.getString(properties.AudioPids) : undefined);\n    ret.addPropertyResult('ecmPid', 'EcmPid', properties.EcmPid != null ? cfn_parse.FromCloudFormation.getString(properties.EcmPid) : undefined);\n    ret.addPropertyResult('nielsenId3Behavior', 'NielsenId3Behavior', properties.NielsenId3Behavior != null ? cfn_parse.FromCloudFormation.getString(properties.NielsenId3Behavior) : undefined);\n    ret.addPropertyResult('patInterval', 'PatInterval', properties.PatInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.PatInterval) : undefined);\n    ret.addPropertyResult('pcrControl', 'PcrControl', properties.PcrControl != null ? cfn_parse.FromCloudFormation.getString(properties.PcrControl) : undefined);\n    ret.addPropertyResult('pcrPeriod', 'PcrPeriod', properties.PcrPeriod != null ? cfn_parse.FromCloudFormation.getNumber(properties.PcrPeriod) : undefined);\n    ret.addPropertyResult('pcrPid', 'PcrPid', properties.PcrPid != null ? cfn_parse.FromCloudFormation.getString(properties.PcrPid) : undefined);\n    ret.addPropertyResult('pmtInterval', 'PmtInterval', properties.PmtInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.PmtInterval) : undefined);\n    ret.addPropertyResult('pmtPid', 'PmtPid', properties.PmtPid != null ? cfn_parse.FromCloudFormation.getString(properties.PmtPid) : undefined);\n    ret.addPropertyResult('programNum', 'ProgramNum', properties.ProgramNum != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProgramNum) : undefined);\n    ret.addPropertyResult('scte35Behavior', 'Scte35Behavior', properties.Scte35Behavior != null ? cfn_parse.FromCloudFormation.getString(properties.Scte35Behavior) : undefined);\n    ret.addPropertyResult('scte35Pid', 'Scte35Pid', properties.Scte35Pid != null ? cfn_parse.FromCloudFormation.getString(properties.Scte35Pid) : undefined);\n    ret.addPropertyResult('timedMetadataBehavior', 'TimedMetadataBehavior', properties.TimedMetadataBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataBehavior) : undefined);\n    ret.addPropertyResult('timedMetadataPid', 'TimedMetadataPid', properties.TimedMetadataPid != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataPid) : undefined);\n    ret.addPropertyResult('transportStreamId', 'TransportStreamId', properties.TransportStreamId != null ? cfn_parse.FromCloudFormation.getNumber(properties.TransportStreamId) : undefined);\n    ret.addPropertyResult('videoPid', 'VideoPid', properties.VideoPid != null ? cfn_parse.FromCloudFormation.getString(properties.VideoPid) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                  \n    export interface MediaPackageGroupSettingsProperty {\n                                                                                                                                                                                                                                                                                              \n        readonly destination?: CfnChannel.OutputLocationRefProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MediaPackageGroupSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `MediaPackageGroupSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_MediaPackageGroupSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));\n    return errors.wrap('supplied properties not correct for \"MediaPackageGroupSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MediaPackageGroupSettings` resource\n *\n * @param properties - the TypeScript properties of a `MediaPackageGroupSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MediaPackageGroupSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelMediaPackageGroupSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_MediaPackageGroupSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelMediaPackageGroupSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.MediaPackageGroupSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.MediaPackageGroupSettingsProperty>();\n    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                   \n    export interface MediaPackageOutputDestinationSettingsProperty {\nn        readonly channelId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MediaPackageOutputDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `MediaPackageOutputDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_MediaPackageOutputDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('channelId', cdk.validateString)(properties.channelId));\n    return errors.wrap('supplied properties not correct for \"MediaPackageOutputDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MediaPackageOutputDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `MediaPackageOutputDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MediaPackageOutputDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelMediaPackageOutputDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_MediaPackageOutputDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ChannelId: cdk.stringToCloudFormation(properties.channelId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelMediaPackageOutputDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.MediaPackageOutputDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.MediaPackageOutputDestinationSettingsProperty>();\n    ret.addPropertyResult('channelId', 'ChannelId', properties.ChannelId != null ? cfn_parse.FromCloudFormation.getString(properties.ChannelId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                             \n    export interface MediaPackageOutputSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MediaPackageOutputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `MediaPackageOutputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_MediaPackageOutputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"MediaPackageOutputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MediaPackageOutputSettings` resource\n *\n * @param properties - the TypeScript properties of a `MediaPackageOutputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MediaPackageOutputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelMediaPackageOutputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_MediaPackageOutputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelMediaPackageOutputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.MediaPackageOutputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.MediaPackageOutputSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                            \n    export interface MotionGraphicsConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly motionGraphicsInsertion?: string;\n                                                                                                                                                                                                                                                                                                                                                            \n        readonly motionGraphicsSettings?: CfnChannel.MotionGraphicsSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MotionGraphicsConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `MotionGraphicsConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_MotionGraphicsConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('motionGraphicsInsertion', cdk.validateString)(properties.motionGraphicsInsertion));\n    errors.collect(cdk.propertyValidator('motionGraphicsSettings', CfnChannel_MotionGraphicsSettingsPropertyValidator)(properties.motionGraphicsSettings));\n    return errors.wrap('supplied properties not correct for \"MotionGraphicsConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MotionGraphicsConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `MotionGraphicsConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MotionGraphicsConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelMotionGraphicsConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_MotionGraphicsConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        MotionGraphicsInsertion: cdk.stringToCloudFormation(properties.motionGraphicsInsertion),\n        MotionGraphicsSettings: cfnChannelMotionGraphicsSettingsPropertyToCloudFormation(properties.motionGraphicsSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelMotionGraphicsConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.MotionGraphicsConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.MotionGraphicsConfigurationProperty>();\n    ret.addPropertyResult('motionGraphicsInsertion', 'MotionGraphicsInsertion', properties.MotionGraphicsInsertion != null ? cfn_parse.FromCloudFormation.getString(properties.MotionGraphicsInsertion) : undefined);\n    ret.addPropertyResult('motionGraphicsSettings', 'MotionGraphicsSettings', properties.MotionGraphicsSettings != null ? CfnChannelMotionGraphicsSettingsPropertyFromCloudFormation(properties.MotionGraphicsSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                   \n    export interface MotionGraphicsSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                         \n        readonly htmlMotionGraphicsSettings?: CfnChannel.HtmlMotionGraphicsSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MotionGraphicsSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `MotionGraphicsSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_MotionGraphicsSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('htmlMotionGraphicsSettings', CfnChannel_HtmlMotionGraphicsSettingsPropertyValidator)(properties.htmlMotionGraphicsSettings));\n    return errors.wrap('supplied properties not correct for \"MotionGraphicsSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MotionGraphicsSettings` resource\n *\n * @param properties - the TypeScript properties of a `MotionGraphicsSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MotionGraphicsSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelMotionGraphicsSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_MotionGraphicsSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        HtmlMotionGraphicsSettings: cfnChannelHtmlMotionGraphicsSettingsPropertyToCloudFormation(properties.htmlMotionGraphicsSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelMotionGraphicsSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.MotionGraphicsSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.MotionGraphicsSettingsProperty>();\n    ret.addPropertyResult('htmlMotionGraphicsSettings', 'HtmlMotionGraphicsSettings', properties.HtmlMotionGraphicsSettings != null ? CfnChannelHtmlMotionGraphicsSettingsPropertyFromCloudFormation(properties.HtmlMotionGraphicsSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                \n    export interface Mp2SettingsProperty {\n                                                                                                                                                                                                                                                            \n        readonly bitrate?: number;\n                                                                                                                                                                                                                                                                                                                               \n        readonly codingMode?: string;\n                                                                                                                                                                                                                                                  \n        readonly sampleRate?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Mp2SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `Mp2SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Mp2SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bitrate', cdk.validateNumber)(properties.bitrate));\n    errors.collect(cdk.propertyValidator('codingMode', cdk.validateString)(properties.codingMode));\n    errors.collect(cdk.propertyValidator('sampleRate', cdk.validateNumber)(properties.sampleRate));\n    return errors.wrap('supplied properties not correct for \"Mp2SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Mp2Settings` resource\n *\n * @param properties - the TypeScript properties of a `Mp2SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Mp2Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelMp2SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Mp2SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Bitrate: cdk.numberToCloudFormation(properties.bitrate),\n        CodingMode: cdk.stringToCloudFormation(properties.codingMode),\n        SampleRate: cdk.numberToCloudFormation(properties.sampleRate),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelMp2SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Mp2SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Mp2SettingsProperty>();\n    ret.addPropertyResult('bitrate', 'Bitrate', properties.Bitrate != null ? cfn_parse.FromCloudFormation.getNumber(properties.Bitrate) : undefined);\n    ret.addPropertyResult('codingMode', 'CodingMode', properties.CodingMode != null ? cfn_parse.FromCloudFormation.getString(properties.CodingMode) : undefined);\n    ret.addPropertyResult('sampleRate', 'SampleRate', properties.SampleRate != null ? cfn_parse.FromCloudFormation.getNumber(properties.SampleRate) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                       \n    export interface Mpeg2FilterSettingsProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly temporalFilterSettings?: CfnChannel.TemporalFilterSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Mpeg2FilterSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `Mpeg2FilterSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Mpeg2FilterSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('temporalFilterSettings', CfnChannel_TemporalFilterSettingsPropertyValidator)(properties.temporalFilterSettings));\n    return errors.wrap('supplied properties not correct for \"Mpeg2FilterSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Mpeg2FilterSettings` resource\n *\n * @param properties - the TypeScript properties of a `Mpeg2FilterSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Mpeg2FilterSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelMpeg2FilterSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Mpeg2FilterSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        TemporalFilterSettings: cfnChannelTemporalFilterSettingsPropertyToCloudFormation(properties.temporalFilterSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelMpeg2FilterSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Mpeg2FilterSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Mpeg2FilterSettingsProperty>();\n    ret.addPropertyResult('temporalFilterSettings', 'TemporalFilterSettings', properties.TemporalFilterSettings != null ? CfnChannelTemporalFilterSettingsPropertyFromCloudFormation(properties.TemporalFilterSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                            \n    export interface Mpeg2SettingsProperty {\nn        readonly adaptiveQuantization?: string;\nn        readonly afdSignaling?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly colorMetadata?: string;\nn        readonly colorSpace?: string;\n                                                                                                                                                                                                                                                                                   \n        readonly displayAspectRatio?: string;\nn        readonly filterSettings?: CfnChannel.Mpeg2FilterSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly fixedAfd?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly framerateDenominator?: number;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly framerateNumerator?: number;\n                                                                                                                                                                                                                                                                 \n        readonly gopClosedCadence?: number;\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly gopNumBFrames?: number;\nn        readonly gopSize?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly gopSizeUnits?: string;\n                                                                                                                                                                                                                                                                                                             \n        readonly scanType?: string;\nn        readonly subgopLength?: string;\nn        readonly timecodeInsertion?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Mpeg2SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `Mpeg2SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Mpeg2SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('adaptiveQuantization', cdk.validateString)(properties.adaptiveQuantization));\n    errors.collect(cdk.propertyValidator('afdSignaling', cdk.validateString)(properties.afdSignaling));\n    errors.collect(cdk.propertyValidator('colorMetadata', cdk.validateString)(properties.colorMetadata));\n    errors.collect(cdk.propertyValidator('colorSpace', cdk.validateString)(properties.colorSpace));\n    errors.collect(cdk.propertyValidator('displayAspectRatio', cdk.validateString)(properties.displayAspectRatio));\n    errors.collect(cdk.propertyValidator('filterSettings', CfnChannel_Mpeg2FilterSettingsPropertyValidator)(properties.filterSettings));\n    errors.collect(cdk.propertyValidator('fixedAfd', cdk.validateString)(properties.fixedAfd));\n    errors.collect(cdk.propertyValidator('framerateDenominator', cdk.validateNumber)(properties.framerateDenominator));\n    errors.collect(cdk.propertyValidator('framerateNumerator', cdk.validateNumber)(properties.framerateNumerator));\n    errors.collect(cdk.propertyValidator('gopClosedCadence', cdk.validateNumber)(properties.gopClosedCadence));\n    errors.collect(cdk.propertyValidator('gopNumBFrames', cdk.validateNumber)(properties.gopNumBFrames));\n    errors.collect(cdk.propertyValidator('gopSize', cdk.validateNumber)(properties.gopSize));\n    errors.collect(cdk.propertyValidator('gopSizeUnits', cdk.validateString)(properties.gopSizeUnits));\n    errors.collect(cdk.propertyValidator('scanType', cdk.validateString)(properties.scanType));\n    errors.collect(cdk.propertyValidator('subgopLength', cdk.validateString)(properties.subgopLength));\n    errors.collect(cdk.propertyValidator('timecodeInsertion', cdk.validateString)(properties.timecodeInsertion));\n    return errors.wrap('supplied properties not correct for \"Mpeg2SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Mpeg2Settings` resource\n *\n * @param properties - the TypeScript properties of a `Mpeg2SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Mpeg2Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelMpeg2SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Mpeg2SettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AdaptiveQuantization: cdk.stringToCloudFormation(properties.adaptiveQuantization),\n        AfdSignaling: cdk.stringToCloudFormation(properties.afdSignaling),\n        ColorMetadata: cdk.stringToCloudFormation(properties.colorMetadata),\n        ColorSpace: cdk.stringToCloudFormation(properties.colorSpace),\n        DisplayAspectRatio: cdk.stringToCloudFormation(properties.displayAspectRatio),\n        FilterSettings: cfnChannelMpeg2FilterSettingsPropertyToCloudFormation(properties.filterSettings),\n        FixedAfd: cdk.stringToCloudFormation(properties.fixedAfd),\n        FramerateDenominator: cdk.numberToCloudFormation(properties.framerateDenominator),\n        FramerateNumerator: cdk.numberToCloudFormation(properties.framerateNumerator),\n        GopClosedCadence: cdk.numberToCloudFormation(properties.gopClosedCadence),\n        GopNumBFrames: cdk.numberToCloudFormation(properties.gopNumBFrames),\n        GopSize: cdk.numberToCloudFormation(properties.gopSize),\n        GopSizeUnits: cdk.stringToCloudFormation(properties.gopSizeUnits),\n        ScanType: cdk.stringToCloudFormation(properties.scanType),\n        SubgopLength: cdk.stringToCloudFormation(properties.subgopLength),\n        TimecodeInsertion: cdk.stringToCloudFormation(properties.timecodeInsertion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelMpeg2SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Mpeg2SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Mpeg2SettingsProperty>();\n    ret.addPropertyResult('adaptiveQuantization', 'AdaptiveQuantization', properties.AdaptiveQuantization != null ? cfn_parse.FromCloudFormation.getString(properties.AdaptiveQuantization) : undefined);\n    ret.addPropertyResult('afdSignaling', 'AfdSignaling', properties.AfdSignaling != null ? cfn_parse.FromCloudFormation.getString(properties.AfdSignaling) : undefined);\n    ret.addPropertyResult('colorMetadata', 'ColorMetadata', properties.ColorMetadata != null ? cfn_parse.FromCloudFormation.getString(properties.ColorMetadata) : undefined);\n    ret.addPropertyResult('colorSpace', 'ColorSpace', properties.ColorSpace != null ? cfn_parse.FromCloudFormation.getString(properties.ColorSpace) : undefined);\n    ret.addPropertyResult('displayAspectRatio', 'DisplayAspectRatio', properties.DisplayAspectRatio != null ? cfn_parse.FromCloudFormation.getString(properties.DisplayAspectRatio) : undefined);\n    ret.addPropertyResult('filterSettings', 'FilterSettings', properties.FilterSettings != null ? CfnChannelMpeg2FilterSettingsPropertyFromCloudFormation(properties.FilterSettings) : undefined);\n    ret.addPropertyResult('fixedAfd', 'FixedAfd', properties.FixedAfd != null ? cfn_parse.FromCloudFormation.getString(properties.FixedAfd) : undefined);\n    ret.addPropertyResult('framerateDenominator', 'FramerateDenominator', properties.FramerateDenominator != null ? cfn_parse.FromCloudFormation.getNumber(properties.FramerateDenominator) : undefined);\n    ret.addPropertyResult('framerateNumerator', 'FramerateNumerator', properties.FramerateNumerator != null ? cfn_parse.FromCloudFormation.getNumber(properties.FramerateNumerator) : undefined);\n    ret.addPropertyResult('gopClosedCadence', 'GopClosedCadence', properties.GopClosedCadence != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopClosedCadence) : undefined);\n    ret.addPropertyResult('gopNumBFrames', 'GopNumBFrames', properties.GopNumBFrames != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopNumBFrames) : undefined);\n    ret.addPropertyResult('gopSize', 'GopSize', properties.GopSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.GopSize) : undefined);\n    ret.addPropertyResult('gopSizeUnits', 'GopSizeUnits', properties.GopSizeUnits != null ? cfn_parse.FromCloudFormation.getString(properties.GopSizeUnits) : undefined);\n    ret.addPropertyResult('scanType', 'ScanType', properties.ScanType != null ? cfn_parse.FromCloudFormation.getString(properties.ScanType) : undefined);\n    ret.addPropertyResult('subgopLength', 'SubgopLength', properties.SubgopLength != null ? cfn_parse.FromCloudFormation.getString(properties.SubgopLength) : undefined);\n    ret.addPropertyResult('timecodeInsertion', 'TimecodeInsertion', properties.TimecodeInsertion != null ? cfn_parse.FromCloudFormation.getString(properties.TimecodeInsertion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                       \n    export interface MsSmoothGroupSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly acquisitionPointId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly audioOnlyTimecodeControl?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly certificateMode?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly connectionRetryInterval?: number;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly destination?: CfnChannel.OutputLocationRefProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly eventId?: string;\nn        readonly eventIdMode?: string;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly eventStopBehavior?: string;\n                                                                                                                                                                                                                                                                                                                     \n        readonly filecacheDuration?: number;\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly fragmentLength?: number;\n                                                                                                                                                                                                                                                                                                                      \n        readonly inputLossAction?: string;\n                                                                                                                                                                                                                                                                             \n        readonly numRetries?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly restartDelay?: number;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly segmentationMode?: string;\n                                                                                                                                                                                                                                                                                                                         \n        readonly sendDelayMs?: number;\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly sparseTrackType?: string;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly streamManifestBehavior?: string;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly timestampOffset?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly timestampOffsetMode?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MsSmoothGroupSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `MsSmoothGroupSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_MsSmoothGroupSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('acquisitionPointId', cdk.validateString)(properties.acquisitionPointId));\n    errors.collect(cdk.propertyValidator('audioOnlyTimecodeControl', cdk.validateString)(properties.audioOnlyTimecodeControl));\n    errors.collect(cdk.propertyValidator('certificateMode', cdk.validateString)(properties.certificateMode));\n    errors.collect(cdk.propertyValidator('connectionRetryInterval', cdk.validateNumber)(properties.connectionRetryInterval));\n    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('eventId', cdk.validateString)(properties.eventId));\n    errors.collect(cdk.propertyValidator('eventIdMode', cdk.validateString)(properties.eventIdMode));\n    errors.collect(cdk.propertyValidator('eventStopBehavior', cdk.validateString)(properties.eventStopBehavior));\n    errors.collect(cdk.propertyValidator('filecacheDuration', cdk.validateNumber)(properties.filecacheDuration));\n    errors.collect(cdk.propertyValidator('fragmentLength', cdk.validateNumber)(properties.fragmentLength));\n    errors.collect(cdk.propertyValidator('inputLossAction', cdk.validateString)(properties.inputLossAction));\n    errors.collect(cdk.propertyValidator('numRetries', cdk.validateNumber)(properties.numRetries));\n    errors.collect(cdk.propertyValidator('restartDelay', cdk.validateNumber)(properties.restartDelay));\n    errors.collect(cdk.propertyValidator('segmentationMode', cdk.validateString)(properties.segmentationMode));\n    errors.collect(cdk.propertyValidator('sendDelayMs', cdk.validateNumber)(properties.sendDelayMs));\n    errors.collect(cdk.propertyValidator('sparseTrackType', cdk.validateString)(properties.sparseTrackType));\n    errors.collect(cdk.propertyValidator('streamManifestBehavior', cdk.validateString)(properties.streamManifestBehavior));\n    errors.collect(cdk.propertyValidator('timestampOffset', cdk.validateString)(properties.timestampOffset));\n    errors.collect(cdk.propertyValidator('timestampOffsetMode', cdk.validateString)(properties.timestampOffsetMode));\n    return errors.wrap('supplied properties not correct for \"MsSmoothGroupSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MsSmoothGroupSettings` resource\n *\n * @param properties - the TypeScript properties of a `MsSmoothGroupSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MsSmoothGroupSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelMsSmoothGroupSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_MsSmoothGroupSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AcquisitionPointId: cdk.stringToCloudFormation(properties.acquisitionPointId),\n        AudioOnlyTimecodeControl: cdk.stringToCloudFormation(properties.audioOnlyTimecodeControl),\n        CertificateMode: cdk.stringToCloudFormation(properties.certificateMode),\n        ConnectionRetryInterval: cdk.numberToCloudFormation(properties.connectionRetryInterval),\n        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),\n        EventId: cdk.stringToCloudFormation(properties.eventId),\n        EventIdMode: cdk.stringToCloudFormation(properties.eventIdMode),\n        EventStopBehavior: cdk.stringToCloudFormation(properties.eventStopBehavior),\n        FilecacheDuration: cdk.numberToCloudFormation(properties.filecacheDuration),\n        FragmentLength: cdk.numberToCloudFormation(properties.fragmentLength),\n        InputLossAction: cdk.stringToCloudFormation(properties.inputLossAction),\n        NumRetries: cdk.numberToCloudFormation(properties.numRetries),\n        RestartDelay: cdk.numberToCloudFormation(properties.restartDelay),\n        SegmentationMode: cdk.stringToCloudFormation(properties.segmentationMode),\n        SendDelayMs: cdk.numberToCloudFormation(properties.sendDelayMs),\n        SparseTrackType: cdk.stringToCloudFormation(properties.sparseTrackType),\n        StreamManifestBehavior: cdk.stringToCloudFormation(properties.streamManifestBehavior),\n        TimestampOffset: cdk.stringToCloudFormation(properties.timestampOffset),\n        TimestampOffsetMode: cdk.stringToCloudFormation(properties.timestampOffsetMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelMsSmoothGroupSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.MsSmoothGroupSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.MsSmoothGroupSettingsProperty>();\n    ret.addPropertyResult('acquisitionPointId', 'AcquisitionPointId', properties.AcquisitionPointId != null ? cfn_parse.FromCloudFormation.getString(properties.AcquisitionPointId) : undefined);\n    ret.addPropertyResult('audioOnlyTimecodeControl', 'AudioOnlyTimecodeControl', properties.AudioOnlyTimecodeControl != null ? cfn_parse.FromCloudFormation.getString(properties.AudioOnlyTimecodeControl) : undefined);\n    ret.addPropertyResult('certificateMode', 'CertificateMode', properties.CertificateMode != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateMode) : undefined);\n    ret.addPropertyResult('connectionRetryInterval', 'ConnectionRetryInterval', properties.ConnectionRetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionRetryInterval) : undefined);\n    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);\n    ret.addPropertyResult('eventId', 'EventId', properties.EventId != null ? cfn_parse.FromCloudFormation.getString(properties.EventId) : undefined);\n    ret.addPropertyResult('eventIdMode', 'EventIdMode', properties.EventIdMode != null ? cfn_parse.FromCloudFormation.getString(properties.EventIdMode) : undefined);\n    ret.addPropertyResult('eventStopBehavior', 'EventStopBehavior', properties.EventStopBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.EventStopBehavior) : undefined);\n    ret.addPropertyResult('filecacheDuration', 'FilecacheDuration', properties.FilecacheDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.FilecacheDuration) : undefined);\n    ret.addPropertyResult('fragmentLength', 'FragmentLength', properties.FragmentLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.FragmentLength) : undefined);\n    ret.addPropertyResult('inputLossAction', 'InputLossAction', properties.InputLossAction != null ? cfn_parse.FromCloudFormation.getString(properties.InputLossAction) : undefined);\n    ret.addPropertyResult('numRetries', 'NumRetries', properties.NumRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRetries) : undefined);\n    ret.addPropertyResult('restartDelay', 'RestartDelay', properties.RestartDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.RestartDelay) : undefined);\n    ret.addPropertyResult('segmentationMode', 'SegmentationMode', properties.SegmentationMode != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentationMode) : undefined);\n    ret.addPropertyResult('sendDelayMs', 'SendDelayMs', properties.SendDelayMs != null ? cfn_parse.FromCloudFormation.getNumber(properties.SendDelayMs) : undefined);\n    ret.addPropertyResult('sparseTrackType', 'SparseTrackType', properties.SparseTrackType != null ? cfn_parse.FromCloudFormation.getString(properties.SparseTrackType) : undefined);\n    ret.addPropertyResult('streamManifestBehavior', 'StreamManifestBehavior', properties.StreamManifestBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.StreamManifestBehavior) : undefined);\n    ret.addPropertyResult('timestampOffset', 'TimestampOffset', properties.TimestampOffset != null ? cfn_parse.FromCloudFormation.getString(properties.TimestampOffset) : undefined);\n    ret.addPropertyResult('timestampOffsetMode', 'TimestampOffsetMode', properties.TimestampOffsetMode != null ? cfn_parse.FromCloudFormation.getString(properties.TimestampOffsetMode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                             \n    export interface MsSmoothOutputSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly h265PackagingType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly nameModifier?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MsSmoothOutputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `MsSmoothOutputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_MsSmoothOutputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('h265PackagingType', cdk.validateString)(properties.h265PackagingType));\n    errors.collect(cdk.propertyValidator('nameModifier', cdk.validateString)(properties.nameModifier));\n    return errors.wrap('supplied properties not correct for \"MsSmoothOutputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MsSmoothOutputSettings` resource\n *\n * @param properties - the TypeScript properties of a `MsSmoothOutputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MsSmoothOutputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelMsSmoothOutputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_MsSmoothOutputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        H265PackagingType: cdk.stringToCloudFormation(properties.h265PackagingType),\n        NameModifier: cdk.stringToCloudFormation(properties.nameModifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelMsSmoothOutputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.MsSmoothOutputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.MsSmoothOutputSettingsProperty>();\n    ret.addPropertyResult('h265PackagingType', 'H265PackagingType', properties.H265PackagingType != null ? cfn_parse.FromCloudFormation.getString(properties.H265PackagingType) : undefined);\n    ret.addPropertyResult('nameModifier', 'NameModifier', properties.NameModifier != null ? cfn_parse.FromCloudFormation.getString(properties.NameModifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                 \n    export interface MultiplexGroupSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MultiplexGroupSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `MultiplexGroupSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_MultiplexGroupSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"MultiplexGroupSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MultiplexGroupSettings` resource\n *\n * @param properties - the TypeScript properties of a `MultiplexGroupSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MultiplexGroupSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelMultiplexGroupSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_MultiplexGroupSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelMultiplexGroupSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.MultiplexGroupSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.MultiplexGroupSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                       \n    export interface MultiplexOutputSettingsProperty {\n                                                                                                                                                                                                                                                                                \n        readonly destination?: CfnChannel.OutputLocationRefProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MultiplexOutputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `MultiplexOutputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_MultiplexOutputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));\n    return errors.wrap('supplied properties not correct for \"MultiplexOutputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MultiplexOutputSettings` resource\n *\n * @param properties - the TypeScript properties of a `MultiplexOutputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MultiplexOutputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelMultiplexOutputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_MultiplexOutputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelMultiplexOutputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.MultiplexOutputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.MultiplexOutputSettingsProperty>();\n    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                     \n    export interface MultiplexProgramChannelDestinationSettingsProperty {\nn        readonly multiplexId?: string;\n                                                                                                                                                                                                                                                                                                                                                                             \n        readonly programName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MultiplexProgramChannelDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `MultiplexProgramChannelDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_MultiplexProgramChannelDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('multiplexId', cdk.validateString)(properties.multiplexId));\n    errors.collect(cdk.propertyValidator('programName', cdk.validateString)(properties.programName));\n    return errors.wrap('supplied properties not correct for \"MultiplexProgramChannelDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MultiplexProgramChannelDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `MultiplexProgramChannelDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.MultiplexProgramChannelDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelMultiplexProgramChannelDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_MultiplexProgramChannelDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        MultiplexId: cdk.stringToCloudFormation(properties.multiplexId),\n        ProgramName: cdk.stringToCloudFormation(properties.programName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelMultiplexProgramChannelDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.MultiplexProgramChannelDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.MultiplexProgramChannelDestinationSettingsProperty>();\n    ret.addPropertyResult('multiplexId', 'MultiplexId', properties.MultiplexId != null ? cfn_parse.FromCloudFormation.getString(properties.MultiplexId) : undefined);\n    ret.addPropertyResult('programName', 'ProgramName', properties.ProgramName != null ? cfn_parse.FromCloudFormation.getString(properties.ProgramName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                       \n    export interface NetworkInputSettingsProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly hlsInputSettings?: CfnChannel.HlsInputSettingsProperty | cdk.IResolvable;\nn        readonly serverValidation?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkInputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkInputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_NetworkInputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('hlsInputSettings', CfnChannel_HlsInputSettingsPropertyValidator)(properties.hlsInputSettings));\n    errors.collect(cdk.propertyValidator('serverValidation', cdk.validateString)(properties.serverValidation));\n    return errors.wrap('supplied properties not correct for \"NetworkInputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NetworkInputSettings` resource\n *\n * @param properties - the TypeScript properties of a `NetworkInputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NetworkInputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelNetworkInputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_NetworkInputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        HlsInputSettings: cfnChannelHlsInputSettingsPropertyToCloudFormation(properties.hlsInputSettings),\n        ServerValidation: cdk.stringToCloudFormation(properties.serverValidation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelNetworkInputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.NetworkInputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.NetworkInputSettingsProperty>();\n    ret.addPropertyResult('hlsInputSettings', 'HlsInputSettings', properties.HlsInputSettings != null ? CfnChannelHlsInputSettingsPropertyFromCloudFormation(properties.HlsInputSettings) : undefined);\n    ret.addPropertyResult('serverValidation', 'ServerValidation', properties.ServerValidation != null ? cfn_parse.FromCloudFormation.getString(properties.ServerValidation) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                 \n    export interface NielsenCBETProperty {\n                                                                                                                                                                                                                                                                                          \n        readonly cbetCheckDigitString?: string;\n                                                                                                                                                                                                                                                                                                                              \n        readonly cbetStepaside?: string;\n                                                                                                                                                                                                                                                                             \n        readonly csid?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NielsenCBETProperty`\n *\n * @param properties - the TypeScript properties of a `NielsenCBETProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_NielsenCBETPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cbetCheckDigitString', cdk.validateString)(properties.cbetCheckDigitString));\n    errors.collect(cdk.propertyValidator('cbetStepaside', cdk.validateString)(properties.cbetStepaside));\n    errors.collect(cdk.propertyValidator('csid', cdk.validateString)(properties.csid));\n    return errors.wrap('supplied properties not correct for \"NielsenCBETProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenCBET` resource\n *\n * @param properties - the TypeScript properties of a `NielsenCBETProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenCBET` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelNielsenCBETPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_NielsenCBETPropertyValidator(properties).assertSuccess();\n    return {\n        CbetCheckDigitString: cdk.stringToCloudFormation(properties.cbetCheckDigitString),\n        CbetStepaside: cdk.stringToCloudFormation(properties.cbetStepaside),\n        Csid: cdk.stringToCloudFormation(properties.csid),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelNielsenCBETPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.NielsenCBETProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.NielsenCBETProperty>();\n    ret.addPropertyResult('cbetCheckDigitString', 'CbetCheckDigitString', properties.CbetCheckDigitString != null ? cfn_parse.FromCloudFormation.getString(properties.CbetCheckDigitString) : undefined);\n    ret.addPropertyResult('cbetStepaside', 'CbetStepaside', properties.CbetStepaside != null ? cfn_parse.FromCloudFormation.getString(properties.CbetStepaside) : undefined);\n    ret.addPropertyResult('csid', 'Csid', properties.Csid != null ? cfn_parse.FromCloudFormation.getString(properties.Csid) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                              \n    export interface NielsenConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                   \n        readonly distributorId?: string;\n                                                                                                                                                                                                                                                                                            \n        readonly nielsenPcmToId3Tagging?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NielsenConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `NielsenConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_NielsenConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('distributorId', cdk.validateString)(properties.distributorId));\n    errors.collect(cdk.propertyValidator('nielsenPcmToId3Tagging', cdk.validateString)(properties.nielsenPcmToId3Tagging));\n    return errors.wrap('supplied properties not correct for \"NielsenConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `NielsenConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelNielsenConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_NielsenConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        DistributorId: cdk.stringToCloudFormation(properties.distributorId),\n        NielsenPcmToId3Tagging: cdk.stringToCloudFormation(properties.nielsenPcmToId3Tagging),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelNielsenConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.NielsenConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.NielsenConfigurationProperty>();\n    ret.addPropertyResult('distributorId', 'DistributorId', properties.DistributorId != null ? cfn_parse.FromCloudFormation.getString(properties.DistributorId) : undefined);\n    ret.addPropertyResult('nielsenPcmToId3Tagging', 'NielsenPcmToId3Tagging', properties.NielsenPcmToId3Tagging != null ? cfn_parse.FromCloudFormation.getString(properties.NielsenPcmToId3Tagging) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface NielsenNaesIiNwProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly checkDigitString?: string;\n                                                                                                                                                                                                                                                                                          \n        readonly sid?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NielsenNaesIiNwProperty`\n *\n * @param properties - the TypeScript properties of a `NielsenNaesIiNwProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_NielsenNaesIiNwPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('checkDigitString', cdk.validateString)(properties.checkDigitString));\n    errors.collect(cdk.propertyValidator('sid', cdk.validateNumber)(properties.sid));\n    return errors.wrap('supplied properties not correct for \"NielsenNaesIiNwProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenNaesIiNw` resource\n *\n * @param properties - the TypeScript properties of a `NielsenNaesIiNwProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenNaesIiNw` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelNielsenNaesIiNwPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_NielsenNaesIiNwPropertyValidator(properties).assertSuccess();\n    return {\n        CheckDigitString: cdk.stringToCloudFormation(properties.checkDigitString),\n        Sid: cdk.numberToCloudFormation(properties.sid),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelNielsenNaesIiNwPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.NielsenNaesIiNwProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.NielsenNaesIiNwProperty>();\n    ret.addPropertyResult('checkDigitString', 'CheckDigitString', properties.CheckDigitString != null ? cfn_parse.FromCloudFormation.getString(properties.CheckDigitString) : undefined);\n    ret.addPropertyResult('sid', 'Sid', properties.Sid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Sid) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                          \n    export interface NielsenWatermarksSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly nielsenCbetSettings?: CfnChannel.NielsenCBETProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly nielsenDistributionType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly nielsenNaesIiNwSettings?: CfnChannel.NielsenNaesIiNwProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NielsenWatermarksSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `NielsenWatermarksSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_NielsenWatermarksSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('nielsenCbetSettings', CfnChannel_NielsenCBETPropertyValidator)(properties.nielsenCbetSettings));\n    errors.collect(cdk.propertyValidator('nielsenDistributionType', cdk.validateString)(properties.nielsenDistributionType));\n    errors.collect(cdk.propertyValidator('nielsenNaesIiNwSettings', CfnChannel_NielsenNaesIiNwPropertyValidator)(properties.nielsenNaesIiNwSettings));\n    return errors.wrap('supplied properties not correct for \"NielsenWatermarksSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenWatermarksSettings` resource\n *\n * @param properties - the TypeScript properties of a `NielsenWatermarksSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.NielsenWatermarksSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelNielsenWatermarksSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_NielsenWatermarksSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        NielsenCbetSettings: cfnChannelNielsenCBETPropertyToCloudFormation(properties.nielsenCbetSettings),\n        NielsenDistributionType: cdk.stringToCloudFormation(properties.nielsenDistributionType),\n        NielsenNaesIiNwSettings: cfnChannelNielsenNaesIiNwPropertyToCloudFormation(properties.nielsenNaesIiNwSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelNielsenWatermarksSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.NielsenWatermarksSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.NielsenWatermarksSettingsProperty>();\n    ret.addPropertyResult('nielsenCbetSettings', 'NielsenCbetSettings', properties.NielsenCbetSettings != null ? CfnChannelNielsenCBETPropertyFromCloudFormation(properties.NielsenCbetSettings) : undefined);\n    ret.addPropertyResult('nielsenDistributionType', 'NielsenDistributionType', properties.NielsenDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.NielsenDistributionType) : undefined);\n    ret.addPropertyResult('nielsenNaesIiNwSettings', 'NielsenNaesIiNwSettings', properties.NielsenNaesIiNwSettings != null ? CfnChannelNielsenNaesIiNwPropertyFromCloudFormation(properties.NielsenNaesIiNwSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                   \n    export interface OutputProperty {\n                                                                                                                                                                                                                                                                                                                \n        readonly audioDescriptionNames?: string[];\n                                                                                                                                                                                                                                                                                                                       \n        readonly captionDescriptionNames?: string[];\n                                                                                                                                                                                                                                                              \n        readonly outputName?: string;\n                                                                                                                                                                                                                                                        \n        readonly outputSettings?: CfnChannel.OutputSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                        \n        readonly videoDescriptionName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OutputProperty`\n *\n * @param properties - the TypeScript properties of a `OutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_OutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audioDescriptionNames', cdk.listValidator(cdk.validateString))(properties.audioDescriptionNames));\n    errors.collect(cdk.propertyValidator('captionDescriptionNames', cdk.listValidator(cdk.validateString))(properties.captionDescriptionNames));\n    errors.collect(cdk.propertyValidator('outputName', cdk.validateString)(properties.outputName));\n    errors.collect(cdk.propertyValidator('outputSettings', CfnChannel_OutputSettingsPropertyValidator)(properties.outputSettings));\n    errors.collect(cdk.propertyValidator('videoDescriptionName', cdk.validateString)(properties.videoDescriptionName));\n    return errors.wrap('supplied properties not correct for \"OutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Output` resource\n *\n * @param properties - the TypeScript properties of a `OutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Output` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelOutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_OutputPropertyValidator(properties).assertSuccess();\n    return {\n        AudioDescriptionNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.audioDescriptionNames),\n        CaptionDescriptionNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.captionDescriptionNames),\n        OutputName: cdk.stringToCloudFormation(properties.outputName),\n        OutputSettings: cfnChannelOutputSettingsPropertyToCloudFormation(properties.outputSettings),\n        VideoDescriptionName: cdk.stringToCloudFormation(properties.videoDescriptionName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.OutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.OutputProperty>();\n    ret.addPropertyResult('audioDescriptionNames', 'AudioDescriptionNames', properties.AudioDescriptionNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AudioDescriptionNames) : undefined);\n    ret.addPropertyResult('captionDescriptionNames', 'CaptionDescriptionNames', properties.CaptionDescriptionNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CaptionDescriptionNames) : undefined);\n    ret.addPropertyResult('outputName', 'OutputName', properties.OutputName != null ? cfn_parse.FromCloudFormation.getString(properties.OutputName) : undefined);\n    ret.addPropertyResult('outputSettings', 'OutputSettings', properties.OutputSettings != null ? CfnChannelOutputSettingsPropertyFromCloudFormation(properties.OutputSettings) : undefined);\n    ret.addPropertyResult('videoDescriptionName', 'VideoDescriptionName', properties.VideoDescriptionName != null ? cfn_parse.FromCloudFormation.getString(properties.VideoDescriptionName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                        \n    export interface OutputDestinationProperty {\n                                                                                                                                                                                                                                                            \n        readonly id?: string;\n                                                                                                                                                                                                                                                                                                     \n        readonly mediaPackageSettings?: Array<CfnChannel.MediaPackageOutputDestinationSettingsProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                              \n        readonly multiplexSettings?: CfnChannel.MultiplexProgramChannelDestinationSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                             \n        readonly settings?: Array<CfnChannel.OutputDestinationSettingsProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OutputDestinationProperty`\n *\n * @param properties - the TypeScript properties of a `OutputDestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_OutputDestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('mediaPackageSettings', cdk.listValidator(CfnChannel_MediaPackageOutputDestinationSettingsPropertyValidator))(properties.mediaPackageSettings));\n    errors.collect(cdk.propertyValidator('multiplexSettings', CfnChannel_MultiplexProgramChannelDestinationSettingsPropertyValidator)(properties.multiplexSettings));\n    errors.collect(cdk.propertyValidator('settings', cdk.listValidator(CfnChannel_OutputDestinationSettingsPropertyValidator))(properties.settings));\n    return errors.wrap('supplied properties not correct for \"OutputDestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputDestination` resource\n *\n * @param properties - the TypeScript properties of a `OutputDestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelOutputDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_OutputDestinationPropertyValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n        MediaPackageSettings: cdk.listMapper(cfnChannelMediaPackageOutputDestinationSettingsPropertyToCloudFormation)(properties.mediaPackageSettings),\n        MultiplexSettings: cfnChannelMultiplexProgramChannelDestinationSettingsPropertyToCloudFormation(properties.multiplexSettings),\n        Settings: cdk.listMapper(cfnChannelOutputDestinationSettingsPropertyToCloudFormation)(properties.settings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelOutputDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.OutputDestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.OutputDestinationProperty>();\n    ret.addPropertyResult('id', 'Id', properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : undefined);\n    ret.addPropertyResult('mediaPackageSettings', 'MediaPackageSettings', properties.MediaPackageSettings != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelMediaPackageOutputDestinationSettingsPropertyFromCloudFormation)(properties.MediaPackageSettings) : undefined);\n    ret.addPropertyResult('multiplexSettings', 'MultiplexSettings', properties.MultiplexSettings != null ? CfnChannelMultiplexProgramChannelDestinationSettingsPropertyFromCloudFormation(properties.MultiplexSettings) : undefined);\n    ret.addPropertyResult('settings', 'Settings', properties.Settings != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelOutputDestinationSettingsPropertyFromCloudFormation)(properties.Settings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                      \n    export interface OutputDestinationSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly passwordParam?: string;\n                                                                                                                                                                                                                                                                                                                           \n        readonly streamName?: string;\n                                                                                                                                                                                                                                                                             \n        readonly url?: string;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly username?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OutputDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `OutputDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_OutputDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('passwordParam', cdk.validateString)(properties.passwordParam));\n    errors.collect(cdk.propertyValidator('streamName', cdk.validateString)(properties.streamName));\n    errors.collect(cdk.propertyValidator('url', cdk.validateString)(properties.url));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"OutputDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `OutputDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelOutputDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_OutputDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        PasswordParam: cdk.stringToCloudFormation(properties.passwordParam),\n        StreamName: cdk.stringToCloudFormation(properties.streamName),\n        Url: cdk.stringToCloudFormation(properties.url),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelOutputDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.OutputDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.OutputDestinationSettingsProperty>();\n    ret.addPropertyResult('passwordParam', 'PasswordParam', properties.PasswordParam != null ? cfn_parse.FromCloudFormation.getString(properties.PasswordParam) : undefined);\n    ret.addPropertyResult('streamName', 'StreamName', properties.StreamName != null ? cfn_parse.FromCloudFormation.getString(properties.StreamName) : undefined);\n    ret.addPropertyResult('url', 'Url', properties.Url != null ? cfn_parse.FromCloudFormation.getString(properties.Url) : undefined);\n    ret.addPropertyResult('username', 'Username', properties.Username != null ? cfn_parse.FromCloudFormation.getString(properties.Username) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                          \n    export interface OutputGroupProperty {\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                   \n        readonly outputGroupSettings?: CfnChannel.OutputGroupSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                          \n        readonly outputs?: Array<CfnChannel.OutputProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OutputGroupProperty`\n *\n * @param properties - the TypeScript properties of a `OutputGroupProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_OutputGroupPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('outputGroupSettings', CfnChannel_OutputGroupSettingsPropertyValidator)(properties.outputGroupSettings));\n    errors.collect(cdk.propertyValidator('outputs', cdk.listValidator(CfnChannel_OutputPropertyValidator))(properties.outputs));\n    return errors.wrap('supplied properties not correct for \"OutputGroupProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputGroup` resource\n *\n * @param properties - the TypeScript properties of a `OutputGroupProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelOutputGroupPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_OutputGroupPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        OutputGroupSettings: cfnChannelOutputGroupSettingsPropertyToCloudFormation(properties.outputGroupSettings),\n        Outputs: cdk.listMapper(cfnChannelOutputPropertyToCloudFormation)(properties.outputs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelOutputGroupPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.OutputGroupProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.OutputGroupProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('outputGroupSettings', 'OutputGroupSettings', properties.OutputGroupSettings != null ? CfnChannelOutputGroupSettingsPropertyFromCloudFormation(properties.OutputGroupSettings) : undefined);\n    ret.addPropertyResult('outputs', 'Outputs', properties.Outputs != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelOutputPropertyFromCloudFormation)(properties.Outputs) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                  \n    export interface OutputGroupSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly archiveGroupSettings?: CfnChannel.ArchiveGroupSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                             \n        readonly frameCaptureGroupSettings?: CfnChannel.FrameCaptureGroupSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                           \n        readonly hlsGroupSettings?: CfnChannel.HlsGroupSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                            \n        readonly mediaPackageGroupSettings?: CfnChannel.MediaPackageGroupSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                            \n        readonly msSmoothGroupSettings?: CfnChannel.MsSmoothGroupSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                  \n        readonly multiplexGroupSettings?: CfnChannel.MultiplexGroupSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                             \n        readonly rtmpGroupSettings?: CfnChannel.RtmpGroupSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                          \n        readonly udpGroupSettings?: CfnChannel.UdpGroupSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OutputGroupSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `OutputGroupSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_OutputGroupSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('archiveGroupSettings', CfnChannel_ArchiveGroupSettingsPropertyValidator)(properties.archiveGroupSettings));\n    errors.collect(cdk.propertyValidator('frameCaptureGroupSettings', CfnChannel_FrameCaptureGroupSettingsPropertyValidator)(properties.frameCaptureGroupSettings));\n    errors.collect(cdk.propertyValidator('hlsGroupSettings', CfnChannel_HlsGroupSettingsPropertyValidator)(properties.hlsGroupSettings));\n    errors.collect(cdk.propertyValidator('mediaPackageGroupSettings', CfnChannel_MediaPackageGroupSettingsPropertyValidator)(properties.mediaPackageGroupSettings));\n    errors.collect(cdk.propertyValidator('msSmoothGroupSettings', CfnChannel_MsSmoothGroupSettingsPropertyValidator)(properties.msSmoothGroupSettings));\n    errors.collect(cdk.propertyValidator('multiplexGroupSettings', CfnChannel_MultiplexGroupSettingsPropertyValidator)(properties.multiplexGroupSettings));\n    errors.collect(cdk.propertyValidator('rtmpGroupSettings', CfnChannel_RtmpGroupSettingsPropertyValidator)(properties.rtmpGroupSettings));\n    errors.collect(cdk.propertyValidator('udpGroupSettings', CfnChannel_UdpGroupSettingsPropertyValidator)(properties.udpGroupSettings));\n    return errors.wrap('supplied properties not correct for \"OutputGroupSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputGroupSettings` resource\n *\n * @param properties - the TypeScript properties of a `OutputGroupSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputGroupSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelOutputGroupSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_OutputGroupSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ArchiveGroupSettings: cfnChannelArchiveGroupSettingsPropertyToCloudFormation(properties.archiveGroupSettings),\n        FrameCaptureGroupSettings: cfnChannelFrameCaptureGroupSettingsPropertyToCloudFormation(properties.frameCaptureGroupSettings),\n        HlsGroupSettings: cfnChannelHlsGroupSettingsPropertyToCloudFormation(properties.hlsGroupSettings),\n        MediaPackageGroupSettings: cfnChannelMediaPackageGroupSettingsPropertyToCloudFormation(properties.mediaPackageGroupSettings),\n        MsSmoothGroupSettings: cfnChannelMsSmoothGroupSettingsPropertyToCloudFormation(properties.msSmoothGroupSettings),\n        MultiplexGroupSettings: cfnChannelMultiplexGroupSettingsPropertyToCloudFormation(properties.multiplexGroupSettings),\n        RtmpGroupSettings: cfnChannelRtmpGroupSettingsPropertyToCloudFormation(properties.rtmpGroupSettings),\n        UdpGroupSettings: cfnChannelUdpGroupSettingsPropertyToCloudFormation(properties.udpGroupSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelOutputGroupSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.OutputGroupSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.OutputGroupSettingsProperty>();\n    ret.addPropertyResult('archiveGroupSettings', 'ArchiveGroupSettings', properties.ArchiveGroupSettings != null ? CfnChannelArchiveGroupSettingsPropertyFromCloudFormation(properties.ArchiveGroupSettings) : undefined);\n    ret.addPropertyResult('frameCaptureGroupSettings', 'FrameCaptureGroupSettings', properties.FrameCaptureGroupSettings != null ? CfnChannelFrameCaptureGroupSettingsPropertyFromCloudFormation(properties.FrameCaptureGroupSettings) : undefined);\n    ret.addPropertyResult('hlsGroupSettings', 'HlsGroupSettings', properties.HlsGroupSettings != null ? CfnChannelHlsGroupSettingsPropertyFromCloudFormation(properties.HlsGroupSettings) : undefined);\n    ret.addPropertyResult('mediaPackageGroupSettings', 'MediaPackageGroupSettings', properties.MediaPackageGroupSettings != null ? CfnChannelMediaPackageGroupSettingsPropertyFromCloudFormation(properties.MediaPackageGroupSettings) : undefined);\n    ret.addPropertyResult('msSmoothGroupSettings', 'MsSmoothGroupSettings', properties.MsSmoothGroupSettings != null ? CfnChannelMsSmoothGroupSettingsPropertyFromCloudFormation(properties.MsSmoothGroupSettings) : undefined);\n    ret.addPropertyResult('multiplexGroupSettings', 'MultiplexGroupSettings', properties.MultiplexGroupSettings != null ? CfnChannelMultiplexGroupSettingsPropertyFromCloudFormation(properties.MultiplexGroupSettings) : undefined);\n    ret.addPropertyResult('rtmpGroupSettings', 'RtmpGroupSettings', properties.RtmpGroupSettings != null ? CfnChannelRtmpGroupSettingsPropertyFromCloudFormation(properties.RtmpGroupSettings) : undefined);\n    ret.addPropertyResult('udpGroupSettings', 'UdpGroupSettings', properties.UdpGroupSettings != null ? CfnChannelUdpGroupSettingsPropertyFromCloudFormation(properties.UdpGroupSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface OutputLocationRefProperty {\n                                                                                                                                                                                                                                                                                  \n        readonly destinationRefId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OutputLocationRefProperty`\n *\n * @param properties - the TypeScript properties of a `OutputLocationRefProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_OutputLocationRefPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationRefId', cdk.validateString)(properties.destinationRefId));\n    return errors.wrap('supplied properties not correct for \"OutputLocationRefProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputLocationRef` resource\n *\n * @param properties - the TypeScript properties of a `OutputLocationRefProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputLocationRef` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelOutputLocationRefPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_OutputLocationRefPropertyValidator(properties).assertSuccess();\n    return {\n        DestinationRefId: cdk.stringToCloudFormation(properties.destinationRefId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelOutputLocationRefPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.OutputLocationRefProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.OutputLocationRefProperty>();\n    ret.addPropertyResult('destinationRefId', 'DestinationRefId', properties.DestinationRefId != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationRefId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                      \n    export interface OutputSettingsProperty {\n                                                                                                                                                                                                                                                                                \n        readonly archiveOutputSettings?: CfnChannel.ArchiveOutputSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly frameCaptureOutputSettings?: CfnChannel.FrameCaptureOutputSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly hlsOutputSettings?: CfnChannel.HlsOutputSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly mediaPackageOutputSettings?: CfnChannel.MediaPackageOutputSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly msSmoothOutputSettings?: CfnChannel.MsSmoothOutputSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                   \n        readonly multiplexOutputSettings?: CfnChannel.MultiplexOutputSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly rtmpOutputSettings?: CfnChannel.RtmpOutputSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly udpOutputSettings?: CfnChannel.UdpOutputSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OutputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `OutputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_OutputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('archiveOutputSettings', CfnChannel_ArchiveOutputSettingsPropertyValidator)(properties.archiveOutputSettings));\n    errors.collect(cdk.propertyValidator('frameCaptureOutputSettings', CfnChannel_FrameCaptureOutputSettingsPropertyValidator)(properties.frameCaptureOutputSettings));\n    errors.collect(cdk.propertyValidator('hlsOutputSettings', CfnChannel_HlsOutputSettingsPropertyValidator)(properties.hlsOutputSettings));\n    errors.collect(cdk.propertyValidator('mediaPackageOutputSettings', CfnChannel_MediaPackageOutputSettingsPropertyValidator)(properties.mediaPackageOutputSettings));\n    errors.collect(cdk.propertyValidator('msSmoothOutputSettings', CfnChannel_MsSmoothOutputSettingsPropertyValidator)(properties.msSmoothOutputSettings));\n    errors.collect(cdk.propertyValidator('multiplexOutputSettings', CfnChannel_MultiplexOutputSettingsPropertyValidator)(properties.multiplexOutputSettings));\n    errors.collect(cdk.propertyValidator('rtmpOutputSettings', CfnChannel_RtmpOutputSettingsPropertyValidator)(properties.rtmpOutputSettings));\n    errors.collect(cdk.propertyValidator('udpOutputSettings', CfnChannel_UdpOutputSettingsPropertyValidator)(properties.udpOutputSettings));\n    return errors.wrap('supplied properties not correct for \"OutputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputSettings` resource\n *\n * @param properties - the TypeScript properties of a `OutputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.OutputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelOutputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_OutputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ArchiveOutputSettings: cfnChannelArchiveOutputSettingsPropertyToCloudFormation(properties.archiveOutputSettings),\n        FrameCaptureOutputSettings: cfnChannelFrameCaptureOutputSettingsPropertyToCloudFormation(properties.frameCaptureOutputSettings),\n        HlsOutputSettings: cfnChannelHlsOutputSettingsPropertyToCloudFormation(properties.hlsOutputSettings),\n        MediaPackageOutputSettings: cfnChannelMediaPackageOutputSettingsPropertyToCloudFormation(properties.mediaPackageOutputSettings),\n        MsSmoothOutputSettings: cfnChannelMsSmoothOutputSettingsPropertyToCloudFormation(properties.msSmoothOutputSettings),\n        MultiplexOutputSettings: cfnChannelMultiplexOutputSettingsPropertyToCloudFormation(properties.multiplexOutputSettings),\n        RtmpOutputSettings: cfnChannelRtmpOutputSettingsPropertyToCloudFormation(properties.rtmpOutputSettings),\n        UdpOutputSettings: cfnChannelUdpOutputSettingsPropertyToCloudFormation(properties.udpOutputSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelOutputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.OutputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.OutputSettingsProperty>();\n    ret.addPropertyResult('archiveOutputSettings', 'ArchiveOutputSettings', properties.ArchiveOutputSettings != null ? CfnChannelArchiveOutputSettingsPropertyFromCloudFormation(properties.ArchiveOutputSettings) : undefined);\n    ret.addPropertyResult('frameCaptureOutputSettings', 'FrameCaptureOutputSettings', properties.FrameCaptureOutputSettings != null ? CfnChannelFrameCaptureOutputSettingsPropertyFromCloudFormation(properties.FrameCaptureOutputSettings) : undefined);\n    ret.addPropertyResult('hlsOutputSettings', 'HlsOutputSettings', properties.HlsOutputSettings != null ? CfnChannelHlsOutputSettingsPropertyFromCloudFormation(properties.HlsOutputSettings) : undefined);\n    ret.addPropertyResult('mediaPackageOutputSettings', 'MediaPackageOutputSettings', properties.MediaPackageOutputSettings != null ? CfnChannelMediaPackageOutputSettingsPropertyFromCloudFormation(properties.MediaPackageOutputSettings) : undefined);\n    ret.addPropertyResult('msSmoothOutputSettings', 'MsSmoothOutputSettings', properties.MsSmoothOutputSettings != null ? CfnChannelMsSmoothOutputSettingsPropertyFromCloudFormation(properties.MsSmoothOutputSettings) : undefined);\n    ret.addPropertyResult('multiplexOutputSettings', 'MultiplexOutputSettings', properties.MultiplexOutputSettings != null ? CfnChannelMultiplexOutputSettingsPropertyFromCloudFormation(properties.MultiplexOutputSettings) : undefined);\n    ret.addPropertyResult('rtmpOutputSettings', 'RtmpOutputSettings', properties.RtmpOutputSettings != null ? CfnChannelRtmpOutputSettingsPropertyFromCloudFormation(properties.RtmpOutputSettings) : undefined);\n    ret.addPropertyResult('udpOutputSettings', 'UdpOutputSettings', properties.UdpOutputSettings != null ? CfnChannelUdpOutputSettingsPropertyFromCloudFormation(properties.UdpOutputSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                        \n    export interface PassThroughSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PassThroughSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `PassThroughSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_PassThroughSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"PassThroughSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.PassThroughSettings` resource\n *\n * @param properties - the TypeScript properties of a `PassThroughSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.PassThroughSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelPassThroughSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_PassThroughSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelPassThroughSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.PassThroughSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.PassThroughSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                 \n    export interface RawSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RawSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `RawSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_RawSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"RawSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RawSettings` resource\n *\n * @param properties - the TypeScript properties of a `RawSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RawSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelRawSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_RawSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelRawSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.RawSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.RawSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                              \n    export interface Rec601SettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Rec601SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `Rec601SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Rec601SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"Rec601SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Rec601Settings` resource\n *\n * @param properties - the TypeScript properties of a `Rec601SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Rec601Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelRec601SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Rec601SettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelRec601SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Rec601SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Rec601SettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                              \n    export interface Rec709SettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Rec709SettingsProperty`\n *\n * @param properties - the TypeScript properties of a `Rec709SettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Rec709SettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"Rec709SettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Rec709Settings` resource\n *\n * @param properties - the TypeScript properties of a `Rec709SettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Rec709Settings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelRec709SettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Rec709SettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelRec709SettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Rec709SettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Rec709SettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                         \n    export interface RemixSettingsProperty {\n                                                                                                                                                                                                                                                                                                                       \n        readonly channelMappings?: Array<CfnChannel.AudioChannelMappingProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                        \n        readonly channelsIn?: number;\n                                                                                                                                                                                                                                                                                                           \n        readonly channelsOut?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RemixSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `RemixSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_RemixSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('channelMappings', cdk.listValidator(CfnChannel_AudioChannelMappingPropertyValidator))(properties.channelMappings));\n    errors.collect(cdk.propertyValidator('channelsIn', cdk.validateNumber)(properties.channelsIn));\n    errors.collect(cdk.propertyValidator('channelsOut', cdk.validateNumber)(properties.channelsOut));\n    return errors.wrap('supplied properties not correct for \"RemixSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RemixSettings` resource\n *\n * @param properties - the TypeScript properties of a `RemixSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RemixSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelRemixSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_RemixSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ChannelMappings: cdk.listMapper(cfnChannelAudioChannelMappingPropertyToCloudFormation)(properties.channelMappings),\n        ChannelsIn: cdk.numberToCloudFormation(properties.channelsIn),\n        ChannelsOut: cdk.numberToCloudFormation(properties.channelsOut),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelRemixSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.RemixSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.RemixSettingsProperty>();\n    ret.addPropertyResult('channelMappings', 'ChannelMappings', properties.ChannelMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnChannelAudioChannelMappingPropertyFromCloudFormation)(properties.ChannelMappings) : undefined);\n    ret.addPropertyResult('channelsIn', 'ChannelsIn', properties.ChannelsIn != null ? cfn_parse.FromCloudFormation.getNumber(properties.ChannelsIn) : undefined);\n    ret.addPropertyResult('channelsOut', 'ChannelsOut', properties.ChannelsOut != null ? cfn_parse.FromCloudFormation.getNumber(properties.ChannelsOut) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                         \n    export interface RtmpCaptionInfoDestinationSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RtmpCaptionInfoDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `RtmpCaptionInfoDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_RtmpCaptionInfoDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"RtmpCaptionInfoDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RtmpCaptionInfoDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `RtmpCaptionInfoDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RtmpCaptionInfoDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelRtmpCaptionInfoDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_RtmpCaptionInfoDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelRtmpCaptionInfoDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.RtmpCaptionInfoDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.RtmpCaptionInfoDestinationSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                            \n    export interface RtmpGroupSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly adMarkers?: string[];\n                                                                                                                                                                                                                                                                                                             \n        readonly authenticationScheme?: string;\nn        readonly cacheFullBehavior?: string;\n                                                                                                                                                                                                                                                                                                             \n        readonly cacheLength?: number;\nn        readonly captionData?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly inputLossAction?: string;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly restartDelay?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RtmpGroupSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `RtmpGroupSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_RtmpGroupSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('adMarkers', cdk.listValidator(cdk.validateString))(properties.adMarkers));\n    errors.collect(cdk.propertyValidator('authenticationScheme', cdk.validateString)(properties.authenticationScheme));\n    errors.collect(cdk.propertyValidator('cacheFullBehavior', cdk.validateString)(properties.cacheFullBehavior));\n    errors.collect(cdk.propertyValidator('cacheLength', cdk.validateNumber)(properties.cacheLength));\n    errors.collect(cdk.propertyValidator('captionData', cdk.validateString)(properties.captionData));\n    errors.collect(cdk.propertyValidator('inputLossAction', cdk.validateString)(properties.inputLossAction));\n    errors.collect(cdk.propertyValidator('restartDelay', cdk.validateNumber)(properties.restartDelay));\n    return errors.wrap('supplied properties not correct for \"RtmpGroupSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RtmpGroupSettings` resource\n *\n * @param properties - the TypeScript properties of a `RtmpGroupSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RtmpGroupSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelRtmpGroupSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_RtmpGroupSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AdMarkers: cdk.listMapper(cdk.stringToCloudFormation)(properties.adMarkers),\n        AuthenticationScheme: cdk.stringToCloudFormation(properties.authenticationScheme),\n        CacheFullBehavior: cdk.stringToCloudFormation(properties.cacheFullBehavior),\n        CacheLength: cdk.numberToCloudFormation(properties.cacheLength),\n        CaptionData: cdk.stringToCloudFormation(properties.captionData),\n        InputLossAction: cdk.stringToCloudFormation(properties.inputLossAction),\n        RestartDelay: cdk.numberToCloudFormation(properties.restartDelay),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelRtmpGroupSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.RtmpGroupSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.RtmpGroupSettingsProperty>();\n    ret.addPropertyResult('adMarkers', 'AdMarkers', properties.AdMarkers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AdMarkers) : undefined);\n    ret.addPropertyResult('authenticationScheme', 'AuthenticationScheme', properties.AuthenticationScheme != null ? cfn_parse.FromCloudFormation.getString(properties.AuthenticationScheme) : undefined);\n    ret.addPropertyResult('cacheFullBehavior', 'CacheFullBehavior', properties.CacheFullBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.CacheFullBehavior) : undefined);\n    ret.addPropertyResult('cacheLength', 'CacheLength', properties.CacheLength != null ? cfn_parse.FromCloudFormation.getNumber(properties.CacheLength) : undefined);\n    ret.addPropertyResult('captionData', 'CaptionData', properties.CaptionData != null ? cfn_parse.FromCloudFormation.getString(properties.CaptionData) : undefined);\n    ret.addPropertyResult('inputLossAction', 'InputLossAction', properties.InputLossAction != null ? cfn_parse.FromCloudFormation.getString(properties.InputLossAction) : undefined);\n    ret.addPropertyResult('restartDelay', 'RestartDelay', properties.RestartDelay != null ? cfn_parse.FromCloudFormation.getNumber(properties.RestartDelay) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                               \n    export interface RtmpOutputSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly certificateMode?: string;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly connectionRetryInterval?: number;\n                                                                                                                                                                                                                                                                                                                          \n        readonly destination?: CfnChannel.OutputLocationRefProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                       \n        readonly numRetries?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RtmpOutputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `RtmpOutputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_RtmpOutputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificateMode', cdk.validateString)(properties.certificateMode));\n    errors.collect(cdk.propertyValidator('connectionRetryInterval', cdk.validateNumber)(properties.connectionRetryInterval));\n    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('numRetries', cdk.validateNumber)(properties.numRetries));\n    return errors.wrap('supplied properties not correct for \"RtmpOutputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RtmpOutputSettings` resource\n *\n * @param properties - the TypeScript properties of a `RtmpOutputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.RtmpOutputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelRtmpOutputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_RtmpOutputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        CertificateMode: cdk.stringToCloudFormation(properties.certificateMode),\n        ConnectionRetryInterval: cdk.numberToCloudFormation(properties.connectionRetryInterval),\n        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),\n        NumRetries: cdk.numberToCloudFormation(properties.numRetries),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelRtmpOutputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.RtmpOutputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.RtmpOutputSettingsProperty>();\n    ret.addPropertyResult('certificateMode', 'CertificateMode', properties.CertificateMode != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateMode) : undefined);\n    ret.addPropertyResult('connectionRetryInterval', 'ConnectionRetryInterval', properties.ConnectionRetryInterval != null ? cfn_parse.FromCloudFormation.getNumber(properties.ConnectionRetryInterval) : undefined);\n    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);\n    ret.addPropertyResult('numRetries', 'NumRetries', properties.NumRetries != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumRetries) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                               \n    export interface Scte20PlusEmbeddedDestinationSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Scte20PlusEmbeddedDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `Scte20PlusEmbeddedDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Scte20PlusEmbeddedDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"Scte20PlusEmbeddedDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte20PlusEmbeddedDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `Scte20PlusEmbeddedDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte20PlusEmbeddedDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelScte20PlusEmbeddedDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Scte20PlusEmbeddedDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelScte20PlusEmbeddedDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Scte20PlusEmbeddedDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Scte20PlusEmbeddedDestinationSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                          \n    export interface Scte20SourceSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly convert608To708?: string;\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly source608ChannelNumber?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Scte20SourceSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `Scte20SourceSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Scte20SourceSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('convert608To708', cdk.validateString)(properties.convert608To708));\n    errors.collect(cdk.propertyValidator('source608ChannelNumber', cdk.validateNumber)(properties.source608ChannelNumber));\n    return errors.wrap('supplied properties not correct for \"Scte20SourceSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte20SourceSettings` resource\n *\n * @param properties - the TypeScript properties of a `Scte20SourceSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte20SourceSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelScte20SourceSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Scte20SourceSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Convert608To708: cdk.stringToCloudFormation(properties.convert608To708),\n        Source608ChannelNumber: cdk.numberToCloudFormation(properties.source608ChannelNumber),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelScte20SourceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Scte20SourceSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Scte20SourceSettingsProperty>();\n    ret.addPropertyResult('convert608To708', 'Convert608To708', properties.Convert608To708 != null ? cfn_parse.FromCloudFormation.getString(properties.Convert608To708) : undefined);\n    ret.addPropertyResult('source608ChannelNumber', 'Source608ChannelNumber', properties.Source608ChannelNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.Source608ChannelNumber) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                     \n    export interface Scte27DestinationSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Scte27DestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `Scte27DestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Scte27DestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"Scte27DestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte27DestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `Scte27DestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte27DestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelScte27DestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Scte27DestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelScte27DestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Scte27DestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Scte27DestinationSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                          \n    export interface Scte27SourceSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly ocrLanguage?: string;\nn        readonly pid?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Scte27SourceSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `Scte27SourceSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Scte27SourceSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ocrLanguage', cdk.validateString)(properties.ocrLanguage));\n    errors.collect(cdk.propertyValidator('pid', cdk.validateNumber)(properties.pid));\n    return errors.wrap('supplied properties not correct for \"Scte27SourceSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte27SourceSettings` resource\n *\n * @param properties - the TypeScript properties of a `Scte27SourceSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte27SourceSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelScte27SourceSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Scte27SourceSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        OcrLanguage: cdk.stringToCloudFormation(properties.ocrLanguage),\n        Pid: cdk.numberToCloudFormation(properties.pid),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelScte27SourceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Scte27SourceSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Scte27SourceSettingsProperty>();\n    ret.addPropertyResult('ocrLanguage', 'OcrLanguage', properties.OcrLanguage != null ? cfn_parse.FromCloudFormation.getString(properties.OcrLanguage) : undefined);\n    ret.addPropertyResult('pid', 'Pid', properties.Pid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Pid) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                         \n    export interface Scte35SpliceInsertProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly adAvailOffset?: number;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly noRegionalBlackoutFlag?: string;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly webDeliveryAllowedFlag?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Scte35SpliceInsertProperty`\n *\n * @param properties - the TypeScript properties of a `Scte35SpliceInsertProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Scte35SpliceInsertPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('adAvailOffset', cdk.validateNumber)(properties.adAvailOffset));\n    errors.collect(cdk.propertyValidator('noRegionalBlackoutFlag', cdk.validateString)(properties.noRegionalBlackoutFlag));\n    errors.collect(cdk.propertyValidator('webDeliveryAllowedFlag', cdk.validateString)(properties.webDeliveryAllowedFlag));\n    return errors.wrap('supplied properties not correct for \"Scte35SpliceInsertProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte35SpliceInsert` resource\n *\n * @param properties - the TypeScript properties of a `Scte35SpliceInsertProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte35SpliceInsert` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelScte35SpliceInsertPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Scte35SpliceInsertPropertyValidator(properties).assertSuccess();\n    return {\n        AdAvailOffset: cdk.numberToCloudFormation(properties.adAvailOffset),\n        NoRegionalBlackoutFlag: cdk.stringToCloudFormation(properties.noRegionalBlackoutFlag),\n        WebDeliveryAllowedFlag: cdk.stringToCloudFormation(properties.webDeliveryAllowedFlag),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelScte35SpliceInsertPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Scte35SpliceInsertProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Scte35SpliceInsertProperty>();\n    ret.addPropertyResult('adAvailOffset', 'AdAvailOffset', properties.AdAvailOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.AdAvailOffset) : undefined);\n    ret.addPropertyResult('noRegionalBlackoutFlag', 'NoRegionalBlackoutFlag', properties.NoRegionalBlackoutFlag != null ? cfn_parse.FromCloudFormation.getString(properties.NoRegionalBlackoutFlag) : undefined);\n    ret.addPropertyResult('webDeliveryAllowedFlag', 'WebDeliveryAllowedFlag', properties.WebDeliveryAllowedFlag != null ? cfn_parse.FromCloudFormation.getString(properties.WebDeliveryAllowedFlag) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                  \n    export interface Scte35TimeSignalAposProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly adAvailOffset?: number;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly noRegionalBlackoutFlag?: string;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly webDeliveryAllowedFlag?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `Scte35TimeSignalAposProperty`\n *\n * @param properties - the TypeScript properties of a `Scte35TimeSignalAposProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_Scte35TimeSignalAposPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('adAvailOffset', cdk.validateNumber)(properties.adAvailOffset));\n    errors.collect(cdk.propertyValidator('noRegionalBlackoutFlag', cdk.validateString)(properties.noRegionalBlackoutFlag));\n    errors.collect(cdk.propertyValidator('webDeliveryAllowedFlag', cdk.validateString)(properties.webDeliveryAllowedFlag));\n    return errors.wrap('supplied properties not correct for \"Scte35TimeSignalAposProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte35TimeSignalApos` resource\n *\n * @param properties - the TypeScript properties of a `Scte35TimeSignalAposProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.Scte35TimeSignalApos` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelScte35TimeSignalAposPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_Scte35TimeSignalAposPropertyValidator(properties).assertSuccess();\n    return {\n        AdAvailOffset: cdk.numberToCloudFormation(properties.adAvailOffset),\n        NoRegionalBlackoutFlag: cdk.stringToCloudFormation(properties.noRegionalBlackoutFlag),\n        WebDeliveryAllowedFlag: cdk.stringToCloudFormation(properties.webDeliveryAllowedFlag),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelScte35TimeSignalAposPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.Scte35TimeSignalAposProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.Scte35TimeSignalAposProperty>();\n    ret.addPropertyResult('adAvailOffset', 'AdAvailOffset', properties.AdAvailOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.AdAvailOffset) : undefined);\n    ret.addPropertyResult('noRegionalBlackoutFlag', 'NoRegionalBlackoutFlag', properties.NoRegionalBlackoutFlag != null ? cfn_parse.FromCloudFormation.getString(properties.NoRegionalBlackoutFlag) : undefined);\n    ret.addPropertyResult('webDeliveryAllowedFlag', 'WebDeliveryAllowedFlag', properties.WebDeliveryAllowedFlag != null ? cfn_parse.FromCloudFormation.getString(properties.WebDeliveryAllowedFlag) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                               \n    export interface SmpteTtDestinationSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SmpteTtDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `SmpteTtDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_SmpteTtDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"SmpteTtDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.SmpteTtDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `SmpteTtDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.SmpteTtDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelSmpteTtDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_SmpteTtDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelSmpteTtDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.SmpteTtDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.SmpteTtDestinationSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                    \n    export interface StandardHlsSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly audioRenditionSets?: string;\n                                                                                                                                                                                                                                                                              \n        readonly m3U8Settings?: CfnChannel.M3u8SettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StandardHlsSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `StandardHlsSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_StandardHlsSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('audioRenditionSets', cdk.validateString)(properties.audioRenditionSets));\n    errors.collect(cdk.propertyValidator('m3U8Settings', CfnChannel_M3u8SettingsPropertyValidator)(properties.m3U8Settings));\n    return errors.wrap('supplied properties not correct for \"StandardHlsSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.StandardHlsSettings` resource\n *\n * @param properties - the TypeScript properties of a `StandardHlsSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.StandardHlsSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelStandardHlsSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_StandardHlsSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        AudioRenditionSets: cdk.stringToCloudFormation(properties.audioRenditionSets),\n        M3u8Settings: cfnChannelM3u8SettingsPropertyToCloudFormation(properties.m3U8Settings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelStandardHlsSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.StandardHlsSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.StandardHlsSettingsProperty>();\n    ret.addPropertyResult('audioRenditionSets', 'AudioRenditionSets', properties.AudioRenditionSets != null ? cfn_parse.FromCloudFormation.getString(properties.AudioRenditionSets) : undefined);\n    ret.addPropertyResult('m3U8Settings', 'M3u8Settings', properties.M3u8Settings != null ? CfnChannelM3u8SettingsPropertyFromCloudFormation(properties.M3u8Settings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                          \n    export interface StaticKeySettingsProperty {\n                                                                                                                                                                                                                                                                                                                 \n        readonly keyProviderServer?: CfnChannel.InputLocationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                      \n        readonly staticKeyValue?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StaticKeySettingsProperty`\n *\n * @param properties - the TypeScript properties of a `StaticKeySettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_StaticKeySettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('keyProviderServer', CfnChannel_InputLocationPropertyValidator)(properties.keyProviderServer));\n    errors.collect(cdk.propertyValidator('staticKeyValue', cdk.validateString)(properties.staticKeyValue));\n    return errors.wrap('supplied properties not correct for \"StaticKeySettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.StaticKeySettings` resource\n *\n * @param properties - the TypeScript properties of a `StaticKeySettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.StaticKeySettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelStaticKeySettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_StaticKeySettingsPropertyValidator(properties).assertSuccess();\n    return {\n        KeyProviderServer: cfnChannelInputLocationPropertyToCloudFormation(properties.keyProviderServer),\n        StaticKeyValue: cdk.stringToCloudFormation(properties.staticKeyValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelStaticKeySettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.StaticKeySettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.StaticKeySettingsProperty>();\n    ret.addPropertyResult('keyProviderServer', 'KeyProviderServer', properties.KeyProviderServer != null ? CfnChannelInputLocationPropertyFromCloudFormation(properties.KeyProviderServer) : undefined);\n    ret.addPropertyResult('staticKeyValue', 'StaticKeyValue', properties.StaticKeyValue != null ? cfn_parse.FromCloudFormation.getString(properties.StaticKeyValue) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                      \n    export interface TeletextDestinationSettingsProperty {\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TeletextDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `TeletextDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_TeletextDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    return errors.wrap('supplied properties not correct for \"TeletextDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TeletextDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `TeletextDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TeletextDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelTeletextDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_TeletextDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelTeletextDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.TeletextDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.TeletextDestinationSettingsProperty>();\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                             \n    export interface TeletextSourceSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly outputRectangle?: CfnChannel.CaptionRectangleProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly pageNumber?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TeletextSourceSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `TeletextSourceSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_TeletextSourceSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('outputRectangle', CfnChannel_CaptionRectanglePropertyValidator)(properties.outputRectangle));\n    errors.collect(cdk.propertyValidator('pageNumber', cdk.validateString)(properties.pageNumber));\n    return errors.wrap('supplied properties not correct for \"TeletextSourceSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TeletextSourceSettings` resource\n *\n * @param properties - the TypeScript properties of a `TeletextSourceSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TeletextSourceSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelTeletextSourceSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_TeletextSourceSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        OutputRectangle: cfnChannelCaptionRectanglePropertyToCloudFormation(properties.outputRectangle),\n        PageNumber: cdk.stringToCloudFormation(properties.pageNumber),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelTeletextSourceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.TeletextSourceSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.TeletextSourceSettingsProperty>();\n    ret.addPropertyResult('outputRectangle', 'OutputRectangle', properties.OutputRectangle != null ? CfnChannelCaptionRectanglePropertyFromCloudFormation(properties.OutputRectangle) : undefined);\n    ret.addPropertyResult('pageNumber', 'PageNumber', properties.PageNumber != null ? cfn_parse.FromCloudFormation.getString(properties.PageNumber) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface TemporalFilterSettingsProperty {\nn        readonly postFilterSharpening?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly strength?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TemporalFilterSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `TemporalFilterSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_TemporalFilterSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('postFilterSharpening', cdk.validateString)(properties.postFilterSharpening));\n    errors.collect(cdk.propertyValidator('strength', cdk.validateString)(properties.strength));\n    return errors.wrap('supplied properties not correct for \"TemporalFilterSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TemporalFilterSettings` resource\n *\n * @param properties - the TypeScript properties of a `TemporalFilterSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TemporalFilterSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelTemporalFilterSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_TemporalFilterSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        PostFilterSharpening: cdk.stringToCloudFormation(properties.postFilterSharpening),\n        Strength: cdk.stringToCloudFormation(properties.strength),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelTemporalFilterSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.TemporalFilterSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.TemporalFilterSettingsProperty>();\n    ret.addPropertyResult('postFilterSharpening', 'PostFilterSharpening', properties.PostFilterSharpening != null ? cfn_parse.FromCloudFormation.getString(properties.PostFilterSharpening) : undefined);\n    ret.addPropertyResult('strength', 'Strength', properties.Strength != null ? cfn_parse.FromCloudFormation.getString(properties.Strength) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                           \n    export interface TimecodeConfigProperty {\nn        readonly source?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly syncThreshold?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TimecodeConfigProperty`\n *\n * @param properties - the TypeScript properties of a `TimecodeConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_TimecodeConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('source', cdk.validateString)(properties.source));\n    errors.collect(cdk.propertyValidator('syncThreshold', cdk.validateNumber)(properties.syncThreshold));\n    return errors.wrap('supplied properties not correct for \"TimecodeConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TimecodeConfig` resource\n *\n * @param properties - the TypeScript properties of a `TimecodeConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TimecodeConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelTimecodeConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_TimecodeConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Source: cdk.stringToCloudFormation(properties.source),\n        SyncThreshold: cdk.numberToCloudFormation(properties.syncThreshold),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelTimecodeConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.TimecodeConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.TimecodeConfigProperty>();\n    ret.addPropertyResult('source', 'Source', properties.Source != null ? cfn_parse.FromCloudFormation.getString(properties.Source) : undefined);\n    ret.addPropertyResult('syncThreshold', 'SyncThreshold', properties.SyncThreshold != null ? cfn_parse.FromCloudFormation.getNumber(properties.SyncThreshold) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                        \n    export interface TtmlDestinationSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly styleControl?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TtmlDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `TtmlDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_TtmlDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('styleControl', cdk.validateString)(properties.styleControl));\n    return errors.wrap('supplied properties not correct for \"TtmlDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TtmlDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `TtmlDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.TtmlDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelTtmlDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_TtmlDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        StyleControl: cdk.stringToCloudFormation(properties.styleControl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelTtmlDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.TtmlDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.TtmlDestinationSettingsProperty>();\n    ret.addPropertyResult('styleControl', 'StyleControl', properties.StyleControl != null ? cfn_parse.FromCloudFormation.getString(properties.StyleControl) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                     \n    export interface UdpContainerSettingsProperty {\n                                                                                                                                                                                                                                                                                           \n        readonly m2TsSettings?: CfnChannel.M2tsSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UdpContainerSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `UdpContainerSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_UdpContainerSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('m2TsSettings', CfnChannel_M2tsSettingsPropertyValidator)(properties.m2TsSettings));\n    return errors.wrap('supplied properties not correct for \"UdpContainerSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.UdpContainerSettings` resource\n *\n * @param properties - the TypeScript properties of a `UdpContainerSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.UdpContainerSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelUdpContainerSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_UdpContainerSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        M2tsSettings: cfnChannelM2tsSettingsPropertyToCloudFormation(properties.m2TsSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelUdpContainerSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.UdpContainerSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.UdpContainerSettingsProperty>();\n    ret.addPropertyResult('m2TsSettings', 'M2tsSettings', properties.M2tsSettings != null ? CfnChannelM2tsSettingsPropertyFromCloudFormation(properties.M2tsSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                         \n    export interface UdpGroupSettingsProperty {\nn        readonly inputLossAction?: string;\n                                                                                                                                                                                                                                                                                               \n        readonly timedMetadataId3Frame?: string;\n                                                                                                                                                                                                                                                                                         \n        readonly timedMetadataId3Period?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UdpGroupSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `UdpGroupSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_UdpGroupSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('inputLossAction', cdk.validateString)(properties.inputLossAction));\n    errors.collect(cdk.propertyValidator('timedMetadataId3Frame', cdk.validateString)(properties.timedMetadataId3Frame));\n    errors.collect(cdk.propertyValidator('timedMetadataId3Period', cdk.validateNumber)(properties.timedMetadataId3Period));\n    return errors.wrap('supplied properties not correct for \"UdpGroupSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.UdpGroupSettings` resource\n *\n * @param properties - the TypeScript properties of a `UdpGroupSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.UdpGroupSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelUdpGroupSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_UdpGroupSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        InputLossAction: cdk.stringToCloudFormation(properties.inputLossAction),\n        TimedMetadataId3Frame: cdk.stringToCloudFormation(properties.timedMetadataId3Frame),\n        TimedMetadataId3Period: cdk.numberToCloudFormation(properties.timedMetadataId3Period),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelUdpGroupSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.UdpGroupSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.UdpGroupSettingsProperty>();\n    ret.addPropertyResult('inputLossAction', 'InputLossAction', properties.InputLossAction != null ? cfn_parse.FromCloudFormation.getString(properties.InputLossAction) : undefined);\n    ret.addPropertyResult('timedMetadataId3Frame', 'TimedMetadataId3Frame', properties.TimedMetadataId3Frame != null ? cfn_parse.FromCloudFormation.getString(properties.TimedMetadataId3Frame) : undefined);\n    ret.addPropertyResult('timedMetadataId3Period', 'TimedMetadataId3Period', properties.TimedMetadataId3Period != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimedMetadataId3Period) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                             \n    export interface UdpOutputSettingsProperty {\nn        readonly bufferMsec?: number;\n                                                                                                                                                                                                                                                                               \n        readonly containerSettings?: CfnChannel.UdpContainerSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly destination?: CfnChannel.OutputLocationRefProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                               \n        readonly fecOutputSettings?: CfnChannel.FecOutputSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UdpOutputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `UdpOutputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_UdpOutputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bufferMsec', cdk.validateNumber)(properties.bufferMsec));\n    errors.collect(cdk.propertyValidator('containerSettings', CfnChannel_UdpContainerSettingsPropertyValidator)(properties.containerSettings));\n    errors.collect(cdk.propertyValidator('destination', CfnChannel_OutputLocationRefPropertyValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('fecOutputSettings', CfnChannel_FecOutputSettingsPropertyValidator)(properties.fecOutputSettings));\n    return errors.wrap('supplied properties not correct for \"UdpOutputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.UdpOutputSettings` resource\n *\n * @param properties - the TypeScript properties of a `UdpOutputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.UdpOutputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelUdpOutputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_UdpOutputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        BufferMsec: cdk.numberToCloudFormation(properties.bufferMsec),\n        ContainerSettings: cfnChannelUdpContainerSettingsPropertyToCloudFormation(properties.containerSettings),\n        Destination: cfnChannelOutputLocationRefPropertyToCloudFormation(properties.destination),\n        FecOutputSettings: cfnChannelFecOutputSettingsPropertyToCloudFormation(properties.fecOutputSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelUdpOutputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.UdpOutputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.UdpOutputSettingsProperty>();\n    ret.addPropertyResult('bufferMsec', 'BufferMsec', properties.BufferMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.BufferMsec) : undefined);\n    ret.addPropertyResult('containerSettings', 'ContainerSettings', properties.ContainerSettings != null ? CfnChannelUdpContainerSettingsPropertyFromCloudFormation(properties.ContainerSettings) : undefined);\n    ret.addPropertyResult('destination', 'Destination', properties.Destination != null ? CfnChannelOutputLocationRefPropertyFromCloudFormation(properties.Destination) : undefined);\n    ret.addPropertyResult('fecOutputSettings', 'FecOutputSettings', properties.FecOutputSettings != null ? CfnChannelFecOutputSettingsPropertyFromCloudFormation(properties.FecOutputSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface VideoBlackFailoverSettingsProperty {\nn        readonly blackDetectThreshold?: number;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly videoBlackThresholdMsec?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VideoBlackFailoverSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `VideoBlackFailoverSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_VideoBlackFailoverSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('blackDetectThreshold', cdk.validateNumber)(properties.blackDetectThreshold));\n    errors.collect(cdk.propertyValidator('videoBlackThresholdMsec', cdk.validateNumber)(properties.videoBlackThresholdMsec));\n    return errors.wrap('supplied properties not correct for \"VideoBlackFailoverSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoBlackFailoverSettings` resource\n *\n * @param properties - the TypeScript properties of a `VideoBlackFailoverSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoBlackFailoverSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelVideoBlackFailoverSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_VideoBlackFailoverSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        BlackDetectThreshold: cdk.numberToCloudFormation(properties.blackDetectThreshold),\n        VideoBlackThresholdMsec: cdk.numberToCloudFormation(properties.videoBlackThresholdMsec),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelVideoBlackFailoverSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.VideoBlackFailoverSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.VideoBlackFailoverSettingsProperty>();\n    ret.addPropertyResult('blackDetectThreshold', 'BlackDetectThreshold', properties.BlackDetectThreshold != null ? cfn_parse.FromCloudFormation.getNumber(properties.BlackDetectThreshold) : undefined);\n    ret.addPropertyResult('videoBlackThresholdMsec', 'VideoBlackThresholdMsec', properties.VideoBlackThresholdMsec != null ? cfn_parse.FromCloudFormation.getNumber(properties.VideoBlackThresholdMsec) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                               \n    export interface VideoCodecSettingsProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly frameCaptureSettings?: CfnChannel.FrameCaptureSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                           \n        readonly h264Settings?: CfnChannel.H264SettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                           \n        readonly h265Settings?: CfnChannel.H265SettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                              \n        readonly mpeg2Settings?: CfnChannel.Mpeg2SettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VideoCodecSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `VideoCodecSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_VideoCodecSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('frameCaptureSettings', CfnChannel_FrameCaptureSettingsPropertyValidator)(properties.frameCaptureSettings));\n    errors.collect(cdk.propertyValidator('h264Settings', CfnChannel_H264SettingsPropertyValidator)(properties.h264Settings));\n    errors.collect(cdk.propertyValidator('h265Settings', CfnChannel_H265SettingsPropertyValidator)(properties.h265Settings));\n    errors.collect(cdk.propertyValidator('mpeg2Settings', CfnChannel_Mpeg2SettingsPropertyValidator)(properties.mpeg2Settings));\n    return errors.wrap('supplied properties not correct for \"VideoCodecSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoCodecSettings` resource\n *\n * @param properties - the TypeScript properties of a `VideoCodecSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoCodecSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelVideoCodecSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_VideoCodecSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        FrameCaptureSettings: cfnChannelFrameCaptureSettingsPropertyToCloudFormation(properties.frameCaptureSettings),\n        H264Settings: cfnChannelH264SettingsPropertyToCloudFormation(properties.h264Settings),\n        H265Settings: cfnChannelH265SettingsPropertyToCloudFormation(properties.h265Settings),\n        Mpeg2Settings: cfnChannelMpeg2SettingsPropertyToCloudFormation(properties.mpeg2Settings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelVideoCodecSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.VideoCodecSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.VideoCodecSettingsProperty>();\n    ret.addPropertyResult('frameCaptureSettings', 'FrameCaptureSettings', properties.FrameCaptureSettings != null ? CfnChannelFrameCaptureSettingsPropertyFromCloudFormation(properties.FrameCaptureSettings) : undefined);\n    ret.addPropertyResult('h264Settings', 'H264Settings', properties.H264Settings != null ? CfnChannelH264SettingsPropertyFromCloudFormation(properties.H264Settings) : undefined);\n    ret.addPropertyResult('h265Settings', 'H265Settings', properties.H265Settings != null ? CfnChannelH265SettingsPropertyFromCloudFormation(properties.H265Settings) : undefined);\n    ret.addPropertyResult('mpeg2Settings', 'Mpeg2Settings', properties.Mpeg2Settings != null ? CfnChannelMpeg2SettingsPropertyFromCloudFormation(properties.Mpeg2Settings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                       \n    export interface VideoDescriptionProperty {\n                                                                                                                                                                                                                                                                  \n        readonly codecSettings?: CfnChannel.VideoCodecSettingsProperty | cdk.IResolvable;\nn        readonly height?: number;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly name?: string;\nn        readonly respondToAfd?: string;\nn        readonly scalingBehavior?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly sharpness?: number;\nn        readonly width?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VideoDescriptionProperty`\n *\n * @param properties - the TypeScript properties of a `VideoDescriptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_VideoDescriptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('codecSettings', CfnChannel_VideoCodecSettingsPropertyValidator)(properties.codecSettings));\n    errors.collect(cdk.propertyValidator('height', cdk.validateNumber)(properties.height));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('respondToAfd', cdk.validateString)(properties.respondToAfd));\n    errors.collect(cdk.propertyValidator('scalingBehavior', cdk.validateString)(properties.scalingBehavior));\n    errors.collect(cdk.propertyValidator('sharpness', cdk.validateNumber)(properties.sharpness));\n    errors.collect(cdk.propertyValidator('width', cdk.validateNumber)(properties.width));\n    return errors.wrap('supplied properties not correct for \"VideoDescriptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoDescription` resource\n *\n * @param properties - the TypeScript properties of a `VideoDescriptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoDescription` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelVideoDescriptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_VideoDescriptionPropertyValidator(properties).assertSuccess();\n    return {\n        CodecSettings: cfnChannelVideoCodecSettingsPropertyToCloudFormation(properties.codecSettings),\n        Height: cdk.numberToCloudFormation(properties.height),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RespondToAfd: cdk.stringToCloudFormation(properties.respondToAfd),\n        ScalingBehavior: cdk.stringToCloudFormation(properties.scalingBehavior),\n        Sharpness: cdk.numberToCloudFormation(properties.sharpness),\n        Width: cdk.numberToCloudFormation(properties.width),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelVideoDescriptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.VideoDescriptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.VideoDescriptionProperty>();\n    ret.addPropertyResult('codecSettings', 'CodecSettings', properties.CodecSettings != null ? CfnChannelVideoCodecSettingsPropertyFromCloudFormation(properties.CodecSettings) : undefined);\n    ret.addPropertyResult('height', 'Height', properties.Height != null ? cfn_parse.FromCloudFormation.getNumber(properties.Height) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('respondToAfd', 'RespondToAfd', properties.RespondToAfd != null ? cfn_parse.FromCloudFormation.getString(properties.RespondToAfd) : undefined);\n    ret.addPropertyResult('scalingBehavior', 'ScalingBehavior', properties.ScalingBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.ScalingBehavior) : undefined);\n    ret.addPropertyResult('sharpness', 'Sharpness', properties.Sharpness != null ? cfn_parse.FromCloudFormation.getNumber(properties.Sharpness) : undefined);\n    ret.addPropertyResult('width', 'Width', properties.Width != null ? cfn_parse.FromCloudFormation.getNumber(properties.Width) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                            \n    export interface VideoSelectorProperty {\n                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly colorSpace?: string;\n                                                                                                                                                                                                                                                                                                         \n        readonly colorSpaceSettings?: CfnChannel.VideoSelectorColorSpaceSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly colorSpaceUsage?: string;\n                                                                                                                                                                                                                                                                                             \n        readonly selectorSettings?: CfnChannel.VideoSelectorSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VideoSelectorProperty`\n *\n * @param properties - the TypeScript properties of a `VideoSelectorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_VideoSelectorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('colorSpace', cdk.validateString)(properties.colorSpace));\n    errors.collect(cdk.propertyValidator('colorSpaceSettings', CfnChannel_VideoSelectorColorSpaceSettingsPropertyValidator)(properties.colorSpaceSettings));\n    errors.collect(cdk.propertyValidator('colorSpaceUsage', cdk.validateString)(properties.colorSpaceUsage));\n    errors.collect(cdk.propertyValidator('selectorSettings', CfnChannel_VideoSelectorSettingsPropertyValidator)(properties.selectorSettings));\n    return errors.wrap('supplied properties not correct for \"VideoSelectorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelector` resource\n *\n * @param properties - the TypeScript properties of a `VideoSelectorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelector` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelVideoSelectorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_VideoSelectorPropertyValidator(properties).assertSuccess();\n    return {\n        ColorSpace: cdk.stringToCloudFormation(properties.colorSpace),\n        ColorSpaceSettings: cfnChannelVideoSelectorColorSpaceSettingsPropertyToCloudFormation(properties.colorSpaceSettings),\n        ColorSpaceUsage: cdk.stringToCloudFormation(properties.colorSpaceUsage),\n        SelectorSettings: cfnChannelVideoSelectorSettingsPropertyToCloudFormation(properties.selectorSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelVideoSelectorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.VideoSelectorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.VideoSelectorProperty>();\n    ret.addPropertyResult('colorSpace', 'ColorSpace', properties.ColorSpace != null ? cfn_parse.FromCloudFormation.getString(properties.ColorSpace) : undefined);\n    ret.addPropertyResult('colorSpaceSettings', 'ColorSpaceSettings', properties.ColorSpaceSettings != null ? CfnChannelVideoSelectorColorSpaceSettingsPropertyFromCloudFormation(properties.ColorSpaceSettings) : undefined);\n    ret.addPropertyResult('colorSpaceUsage', 'ColorSpaceUsage', properties.ColorSpaceUsage != null ? cfn_parse.FromCloudFormation.getString(properties.ColorSpaceUsage) : undefined);\n    ret.addPropertyResult('selectorSettings', 'SelectorSettings', properties.SelectorSettings != null ? CfnChannelVideoSelectorSettingsPropertyFromCloudFormation(properties.SelectorSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                           \n    export interface VideoSelectorColorSpaceSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                        \n        readonly hdr10Settings?: CfnChannel.Hdr10SettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VideoSelectorColorSpaceSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `VideoSelectorColorSpaceSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_VideoSelectorColorSpaceSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('hdr10Settings', CfnChannel_Hdr10SettingsPropertyValidator)(properties.hdr10Settings));\n    return errors.wrap('supplied properties not correct for \"VideoSelectorColorSpaceSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorColorSpaceSettings` resource\n *\n * @param properties - the TypeScript properties of a `VideoSelectorColorSpaceSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorColorSpaceSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelVideoSelectorColorSpaceSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_VideoSelectorColorSpaceSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Hdr10Settings: cfnChannelHdr10SettingsPropertyToCloudFormation(properties.hdr10Settings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelVideoSelectorColorSpaceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.VideoSelectorColorSpaceSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.VideoSelectorColorSpaceSettingsProperty>();\n    ret.addPropertyResult('hdr10Settings', 'Hdr10Settings', properties.Hdr10Settings != null ? CfnChannelHdr10SettingsPropertyFromCloudFormation(properties.Hdr10Settings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                     \n    export interface VideoSelectorPidProperty {\n                                                                                                                                                                                                                                                                                 \n        readonly pid?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VideoSelectorPidProperty`\n *\n * @param properties - the TypeScript properties of a `VideoSelectorPidProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_VideoSelectorPidPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('pid', cdk.validateNumber)(properties.pid));\n    return errors.wrap('supplied properties not correct for \"VideoSelectorPidProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorPid` resource\n *\n * @param properties - the TypeScript properties of a `VideoSelectorPidProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorPid` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelVideoSelectorPidPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_VideoSelectorPidPropertyValidator(properties).assertSuccess();\n    return {\n        Pid: cdk.numberToCloudFormation(properties.pid),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelVideoSelectorPidPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.VideoSelectorPidProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.VideoSelectorPidProperty>();\n    ret.addPropertyResult('pid', 'Pid', properties.Pid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Pid) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                 \n    export interface VideoSelectorProgramIdProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly programId?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VideoSelectorProgramIdProperty`\n *\n * @param properties - the TypeScript properties of a `VideoSelectorProgramIdProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_VideoSelectorProgramIdPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('programId', cdk.validateNumber)(properties.programId));\n    return errors.wrap('supplied properties not correct for \"VideoSelectorProgramIdProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorProgramId` resource\n *\n * @param properties - the TypeScript properties of a `VideoSelectorProgramIdProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorProgramId` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelVideoSelectorProgramIdPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_VideoSelectorProgramIdPropertyValidator(properties).assertSuccess();\n    return {\n        ProgramId: cdk.numberToCloudFormation(properties.programId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelVideoSelectorProgramIdPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.VideoSelectorProgramIdProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.VideoSelectorProgramIdProperty>();\n    ret.addPropertyResult('programId', 'ProgramId', properties.ProgramId != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProgramId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                      \n    export interface VideoSelectorSettingsProperty {\n                                                                                                                                                                                                                                                                                   \n        readonly videoSelectorPid?: CfnChannel.VideoSelectorPidProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                \n        readonly videoSelectorProgramId?: CfnChannel.VideoSelectorProgramIdProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VideoSelectorSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `VideoSelectorSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_VideoSelectorSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('videoSelectorPid', CfnChannel_VideoSelectorPidPropertyValidator)(properties.videoSelectorPid));\n    errors.collect(cdk.propertyValidator('videoSelectorProgramId', CfnChannel_VideoSelectorProgramIdPropertyValidator)(properties.videoSelectorProgramId));\n    return errors.wrap('supplied properties not correct for \"VideoSelectorSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorSettings` resource\n *\n * @param properties - the TypeScript properties of a `VideoSelectorSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VideoSelectorSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelVideoSelectorSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_VideoSelectorSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        VideoSelectorPid: cfnChannelVideoSelectorPidPropertyToCloudFormation(properties.videoSelectorPid),\n        VideoSelectorProgramId: cfnChannelVideoSelectorProgramIdPropertyToCloudFormation(properties.videoSelectorProgramId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelVideoSelectorSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.VideoSelectorSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.VideoSelectorSettingsProperty>();\n    ret.addPropertyResult('videoSelectorPid', 'VideoSelectorPid', properties.VideoSelectorPid != null ? CfnChannelVideoSelectorPidPropertyFromCloudFormation(properties.VideoSelectorPid) : undefined);\n    ret.addPropertyResult('videoSelectorProgramId', 'VideoSelectorProgramId', properties.VideoSelectorProgramId != null ? CfnChannelVideoSelectorProgramIdPropertyFromCloudFormation(properties.VideoSelectorProgramId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface VpcOutputSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly publicAddressAllocationIds?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly securityGroupIds?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly subnetIds?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcOutputSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `VpcOutputSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_VpcOutputSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('publicAddressAllocationIds', cdk.listValidator(cdk.validateString))(properties.publicAddressAllocationIds));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    return errors.wrap('supplied properties not correct for \"VpcOutputSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VpcOutputSettings` resource\n *\n * @param properties - the TypeScript properties of a `VpcOutputSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.VpcOutputSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelVpcOutputSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_VpcOutputSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        PublicAddressAllocationIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.publicAddressAllocationIds),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelVpcOutputSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.VpcOutputSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.VpcOutputSettingsProperty>();\n    ret.addPropertyResult('publicAddressAllocationIds', 'PublicAddressAllocationIds', properties.PublicAddressAllocationIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PublicAddressAllocationIds) : undefined);\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('subnetIds', 'SubnetIds', properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                \n    export interface WavSettingsProperty {\n                                                                                                                                                                                                                                          \n        readonly bitDepth?: number;\n                                                                                                                                                                                                                                                                                                                             \n        readonly codingMode?: string;\n                                                                                                                                                                                                                                              \n        readonly sampleRate?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `WavSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `WavSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_WavSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bitDepth', cdk.validateNumber)(properties.bitDepth));\n    errors.collect(cdk.propertyValidator('codingMode', cdk.validateString)(properties.codingMode));\n    errors.collect(cdk.propertyValidator('sampleRate', cdk.validateNumber)(properties.sampleRate));\n    return errors.wrap('supplied properties not correct for \"WavSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.WavSettings` resource\n *\n * @param properties - the TypeScript properties of a `WavSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.WavSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelWavSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_WavSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        BitDepth: cdk.numberToCloudFormation(properties.bitDepth),\n        CodingMode: cdk.stringToCloudFormation(properties.codingMode),\n        SampleRate: cdk.numberToCloudFormation(properties.sampleRate),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelWavSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.WavSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.WavSettingsProperty>();\n    ret.addPropertyResult('bitDepth', 'BitDepth', properties.BitDepth != null ? cfn_parse.FromCloudFormation.getNumber(properties.BitDepth) : undefined);\n    ret.addPropertyResult('codingMode', 'CodingMode', properties.CodingMode != null ? cfn_parse.FromCloudFormation.getString(properties.CodingMode) : undefined);\n    ret.addPropertyResult('sampleRate', 'SampleRate', properties.SampleRate != null ? cfn_parse.FromCloudFormation.getNumber(properties.SampleRate) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                                                                                                     \n    export interface WebvttDestinationSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly styleControl?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `WebvttDestinationSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `WebvttDestinationSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_WebvttDestinationSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('styleControl', cdk.validateString)(properties.styleControl));\n    return errors.wrap('supplied properties not correct for \"WebvttDestinationSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Channel.WebvttDestinationSettings` resource\n *\n * @param properties - the TypeScript properties of a `WebvttDestinationSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Channel.WebvttDestinationSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelWebvttDestinationSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_WebvttDestinationSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        StyleControl: cdk.stringToCloudFormation(properties.styleControl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelWebvttDestinationSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.WebvttDestinationSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.WebvttDestinationSettingsProperty>();\n    ret.addPropertyResult('styleControl', 'StyleControl', properties.StyleControl != null ? cfn_parse.FromCloudFormation.getString(properties.StyleControl) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                \nexport interface CfnInputProps {\n\n                                                                                                                                                                                                                                          \n    readonly destinations?: Array<CfnInput.InputDestinationRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                             \n    readonly inputDevices?: Array<CfnInput.InputDeviceSettingsProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                            \n    readonly inputSecurityGroups?: string[];\n\n                                                                                                                                                                                                                                               \n    readonly mediaConnectFlows?: Array<CfnInput.MediaConnectFlowRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                         \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                                                   \n    readonly roleArn?: string;\n\n                                                                                                                                                                                                                                     \n    readonly sources?: Array<CfnInput.InputSourceRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                      \n    readonly tags?: any;\n\n                                                                                                                                                                                            \n    readonly type?: string;\n\n                                                                                                                                                                                                                                                            \n    readonly vpc?: CfnInput.InputVpcRequestProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnInputProps`\n *\n * @param properties - the TypeScript properties of a `CfnInputProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnInputPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinations', cdk.listValidator(CfnInput_InputDestinationRequestPropertyValidator))(properties.destinations));\n    errors.collect(cdk.propertyValidator('inputDevices', cdk.listValidator(CfnInput_InputDeviceSettingsPropertyValidator))(properties.inputDevices));\n    errors.collect(cdk.propertyValidator('inputSecurityGroups', cdk.listValidator(cdk.validateString))(properties.inputSecurityGroups));\n    errors.collect(cdk.propertyValidator('mediaConnectFlows', cdk.listValidator(CfnInput_MediaConnectFlowRequestPropertyValidator))(properties.mediaConnectFlows));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('sources', cdk.listValidator(CfnInput_InputSourceRequestPropertyValidator))(properties.sources));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('vpc', CfnInput_InputVpcRequestPropertyValidator)(properties.vpc));\n    return errors.wrap('supplied properties not correct for \"CfnInputProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input` resource\n *\n * @param properties - the TypeScript properties of a `CfnInputProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInputPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInputPropsValidator(properties).assertSuccess();\n    return {\n        Destinations: cdk.listMapper(cfnInputInputDestinationRequestPropertyToCloudFormation)(properties.destinations),\n        InputDevices: cdk.listMapper(cfnInputInputDeviceSettingsPropertyToCloudFormation)(properties.inputDevices),\n        InputSecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.inputSecurityGroups),\n        MediaConnectFlows: cdk.listMapper(cfnInputMediaConnectFlowRequestPropertyToCloudFormation)(properties.mediaConnectFlows),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        Sources: cdk.listMapper(cfnInputInputSourceRequestPropertyToCloudFormation)(properties.sources),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n        Type: cdk.stringToCloudFormation(properties.type),\n        Vpc: cfnInputInputVpcRequestPropertyToCloudFormation(properties.vpc),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInputPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInputProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInputProps>();\n    ret.addPropertyResult('destinations', 'Destinations', properties.Destinations != null ? cfn_parse.FromCloudFormation.getArray(CfnInputInputDestinationRequestPropertyFromCloudFormation)(properties.Destinations) : undefined);\n    ret.addPropertyResult('inputDevices', 'InputDevices', properties.InputDevices != null ? cfn_parse.FromCloudFormation.getArray(CfnInputInputDeviceSettingsPropertyFromCloudFormation)(properties.InputDevices) : undefined);\n    ret.addPropertyResult('inputSecurityGroups', 'InputSecurityGroups', properties.InputSecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.InputSecurityGroups) : undefined);\n    ret.addPropertyResult('mediaConnectFlows', 'MediaConnectFlows', properties.MediaConnectFlows != null ? cfn_parse.FromCloudFormation.getArray(CfnInputMediaConnectFlowRequestPropertyFromCloudFormation)(properties.MediaConnectFlows) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);\n    ret.addPropertyResult('sources', 'Sources', properties.Sources != null ? cfn_parse.FromCloudFormation.getArray(CfnInputInputSourceRequestPropertyFromCloudFormation)(properties.Sources) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('vpc', 'Vpc', properties.Vpc != null ? CfnInputInputVpcRequestPropertyFromCloudFormation(properties.Vpc) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnInput extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::MediaLive::Input\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnInput {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnInputPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnInput(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                               \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                              \n    public readonly attrDestinations: string[];\n\n                                                                                                                                                                                                                                                                                         \n    public readonly attrSources: string[];\n\n                                                                                                                                                                                                                                          \n    public destinations: Array<CfnInput.InputDestinationRequestProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                             \n    public inputDevices: Array<CfnInput.InputDeviceSettingsProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                            \n    public inputSecurityGroups: string[] | undefined;\n\n                                                                                                                                                                                                                                               \n    public mediaConnectFlows: Array<CfnInput.MediaConnectFlowRequestProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                         \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                   \n    public roleArn: string | undefined;\n\n                                                                                                                                                                                                                                     \n    public sources: Array<CfnInput.InputSourceRequestProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                      \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                            \n    public type: string | undefined;\n\n                                                                                                                                                                                                                                                            \n    public vpc: CfnInput.InputVpcRequestProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnInputProps = {}) {\n        super(scope, id, { type: CfnInput.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrDestinations = cdk.Token.asList(this.getAtt('Destinations'));\n        this.attrSources = cdk.Token.asList(this.getAtt('Sources'));\n\n        this.destinations = props.destinations;\n        this.inputDevices = props.inputDevices;\n        this.inputSecurityGroups = props.inputSecurityGroups;\n        this.mediaConnectFlows = props.mediaConnectFlows;\n        this.name = props.name;\n        this.roleArn = props.roleArn;\n        this.sources = props.sources;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::MediaLive::Input\", props.tags, { tagPropertyName: 'tags' });\n        this.type = props.type;\n        this.vpc = props.vpc;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnInput.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            destinations: this.destinations,\n            inputDevices: this.inputDevices,\n            inputSecurityGroups: this.inputSecurityGroups,\n            mediaConnectFlows: this.mediaConnectFlows,\n            name: this.name,\n            roleArn: this.roleArn,\n            sources: this.sources,\n            tags: this.tags.renderTags(),\n            type: this.type,\n            vpc: this.vpc,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnInputPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnInput {\n                                                                                                                                                                                                                                                                                                                                      \n    export interface InputDestinationRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly streamName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputDestinationRequestProperty`\n *\n * @param properties - the TypeScript properties of a `InputDestinationRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInput_InputDestinationRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('streamName', cdk.validateString)(properties.streamName));\n    return errors.wrap('supplied properties not correct for \"InputDestinationRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputDestinationRequest` resource\n *\n * @param properties - the TypeScript properties of a `InputDestinationRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputDestinationRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInputInputDestinationRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInput_InputDestinationRequestPropertyValidator(properties).assertSuccess();\n    return {\n        StreamName: cdk.stringToCloudFormation(properties.streamName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInputInputDestinationRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInput.InputDestinationRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInput.InputDestinationRequestProperty>();\n    ret.addPropertyResult('streamName', 'StreamName', properties.StreamName != null ? cfn_parse.FromCloudFormation.getString(properties.StreamName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInput {\n                                                                                                                                                                                                                                                    \n    export interface InputDeviceRequestProperty {\n                                                                                                                                                                                                                                                                   \n        readonly id?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputDeviceRequestProperty`\n *\n * @param properties - the TypeScript properties of a `InputDeviceRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInput_InputDeviceRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    return errors.wrap('supplied properties not correct for \"InputDeviceRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputDeviceRequest` resource\n *\n * @param properties - the TypeScript properties of a `InputDeviceRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputDeviceRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInputInputDeviceRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInput_InputDeviceRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInputInputDeviceRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInput.InputDeviceRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInput.InputDeviceRequestProperty>();\n    ret.addPropertyResult('id', 'Id', properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInput {\n                                                                                                                                                                                                                                                                                                                                     \n    export interface InputDeviceSettingsProperty {\n                                                                                                                                                                                                                                                             \n        readonly id?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputDeviceSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `InputDeviceSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInput_InputDeviceSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    return errors.wrap('supplied properties not correct for \"InputDeviceSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputDeviceSettings` resource\n *\n * @param properties - the TypeScript properties of a `InputDeviceSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputDeviceSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInputInputDeviceSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInput_InputDeviceSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInputInputDeviceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInput.InputDeviceSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInput.InputDeviceSettingsProperty>();\n    ret.addPropertyResult('id', 'Id', properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInput {\n                                                                                                                                                                                                                                                                                                                                 \n    export interface InputSourceRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly passwordParam?: string;\n                                                                                                                                                                                                                                                                                                       \n        readonly url?: string;\n                                                                                                                                                                                                                                                                                                                                                            \n        readonly username?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputSourceRequestProperty`\n *\n * @param properties - the TypeScript properties of a `InputSourceRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInput_InputSourceRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('passwordParam', cdk.validateString)(properties.passwordParam));\n    errors.collect(cdk.propertyValidator('url', cdk.validateString)(properties.url));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"InputSourceRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputSourceRequest` resource\n *\n * @param properties - the TypeScript properties of a `InputSourceRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputSourceRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInputInputSourceRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInput_InputSourceRequestPropertyValidator(properties).assertSuccess();\n    return {\n        PasswordParam: cdk.stringToCloudFormation(properties.passwordParam),\n        Url: cdk.stringToCloudFormation(properties.url),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInputInputSourceRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInput.InputSourceRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInput.InputSourceRequestProperty>();\n    ret.addPropertyResult('passwordParam', 'PasswordParam', properties.PasswordParam != null ? cfn_parse.FromCloudFormation.getString(properties.PasswordParam) : undefined);\n    ret.addPropertyResult('url', 'Url', properties.Url != null ? cfn_parse.FromCloudFormation.getString(properties.Url) : undefined);\n    ret.addPropertyResult('username', 'Username', properties.Username != null ? cfn_parse.FromCloudFormation.getString(properties.Username) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInput {\n                                                                                                                                                                                                                                                                                                                                                         \n    export interface InputVpcRequestProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly securityGroupIds?: string[];\n                                                                                                                                                                                                                                                                                                                                                \n        readonly subnetIds?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputVpcRequestProperty`\n *\n * @param properties - the TypeScript properties of a `InputVpcRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInput_InputVpcRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    return errors.wrap('supplied properties not correct for \"InputVpcRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputVpcRequest` resource\n *\n * @param properties - the TypeScript properties of a `InputVpcRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input.InputVpcRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInputInputVpcRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInput_InputVpcRequestPropertyValidator(properties).assertSuccess();\n    return {\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInputInputVpcRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInput.InputVpcRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInput.InputVpcRequestProperty>();\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('subnetIds', 'SubnetIds', properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnInput {\n                                                                                                                                                                                                                                                                                                                                      \n    export interface MediaConnectFlowRequestProperty {\n                                                                                                                                                                                                                                                                                                                                       \n        readonly flowArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MediaConnectFlowRequestProperty`\n *\n * @param properties - the TypeScript properties of a `MediaConnectFlowRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInput_MediaConnectFlowRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('flowArn', cdk.validateString)(properties.flowArn));\n    return errors.wrap('supplied properties not correct for \"MediaConnectFlowRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::Input.MediaConnectFlowRequest` resource\n *\n * @param properties - the TypeScript properties of a `MediaConnectFlowRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::Input.MediaConnectFlowRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInputMediaConnectFlowRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInput_MediaConnectFlowRequestPropertyValidator(properties).assertSuccess();\n    return {\n        FlowArn: cdk.stringToCloudFormation(properties.flowArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInputMediaConnectFlowRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInput.MediaConnectFlowRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInput.MediaConnectFlowRequestProperty>();\n    ret.addPropertyResult('flowArn', 'FlowArn', properties.FlowArn != null ? cfn_parse.FromCloudFormation.getString(properties.FlowArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                          \nexport interface CfnInputSecurityGroupProps {\n\n                                                                                                                                                                                                                                                                               \n    readonly tags?: any;\n\n                                                                                                                                                                                                                                                                                                      \n    readonly whitelistRules?: Array<CfnInputSecurityGroup.InputWhitelistRuleCidrProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnInputSecurityGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnInputSecurityGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnInputSecurityGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    errors.collect(cdk.propertyValidator('whitelistRules', cdk.listValidator(CfnInputSecurityGroup_InputWhitelistRuleCidrPropertyValidator))(properties.whitelistRules));\n    return errors.wrap('supplied properties not correct for \"CfnInputSecurityGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::InputSecurityGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnInputSecurityGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::InputSecurityGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInputSecurityGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInputSecurityGroupPropsValidator(properties).assertSuccess();\n    return {\n        Tags: cdk.objectToCloudFormation(properties.tags),\n        WhitelistRules: cdk.listMapper(cfnInputSecurityGroupInputWhitelistRuleCidrPropertyToCloudFormation)(properties.whitelistRules),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInputSecurityGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInputSecurityGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInputSecurityGroupProps>();\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addPropertyResult('whitelistRules', 'WhitelistRules', properties.WhitelistRules != null ? cfn_parse.FromCloudFormation.getArray(CfnInputSecurityGroupInputWhitelistRuleCidrPropertyFromCloudFormation)(properties.WhitelistRules) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnInputSecurityGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::MediaLive::InputSecurityGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnInputSecurityGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnInputSecurityGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnInputSecurityGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                    \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                      \n    public whitelistRules: Array<CfnInputSecurityGroup.InputWhitelistRuleCidrProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnInputSecurityGroupProps = {}) {\n        super(scope, id, { type: CfnInputSecurityGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::MediaLive::InputSecurityGroup\", props.tags, { tagPropertyName: 'tags' });\n        this.whitelistRules = props.whitelistRules;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnInputSecurityGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            tags: this.tags.renderTags(),\n            whitelistRules: this.whitelistRules,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnInputSecurityGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnInputSecurityGroup {\n                                                                                                                                                                                                                                                                                                                                                            \n    export interface InputWhitelistRuleCidrProperty {\n                                                                                                                                                                                                                                                                                                                             \n        readonly cidr?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputWhitelistRuleCidrProperty`\n *\n * @param properties - the TypeScript properties of a `InputWhitelistRuleCidrProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnInputSecurityGroup_InputWhitelistRuleCidrPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidr', cdk.validateString)(properties.cidr));\n    return errors.wrap('supplied properties not correct for \"InputWhitelistRuleCidrProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaLive::InputSecurityGroup.InputWhitelistRuleCidr` resource\n *\n * @param properties - the TypeScript properties of a `InputWhitelistRuleCidrProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaLive::InputSecurityGroup.InputWhitelistRuleCidr` resource.\n */\n// @ts-ignore TS6133\nfunction cfnInputSecurityGroupInputWhitelistRuleCidrPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnInputSecurityGroup_InputWhitelistRuleCidrPropertyValidator(properties).assertSuccess();\n    return {\n        Cidr: cdk.stringToCloudFormation(properties.cidr),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnInputSecurityGroupInputWhitelistRuleCidrPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInputSecurityGroup.InputWhitelistRuleCidrProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInputSecurityGroup.InputWhitelistRuleCidrProperty>();\n    ret.addPropertyResult('cidr', 'Cidr', properties.Cidr != null ? cfn_parse.FromCloudFormation.getString(properties.Cidr) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
