{
  "version": 3,
  "sources": ["mediapackage.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:32.627Z\",\"fingerprint\":\"HrqC4ZnkQ/vD5U8cOnKpclialELb/KaxqdeqhA8SiaI=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                   \nexport interface CfnAssetProps {\n\n                                                                                                                                                                                                                       \n    readonly id: string;\n\n                                                                                                                                                                                                                                               \n    readonly packagingGroupId: string;\n\n                                                                                                                                                                                                                           \n    readonly sourceArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                          \n    readonly sourceRoleArn: string;\n\n                                                                                                                                                                                                                                                                 \n    readonly resourceId?: string;\n\n                                                                                                                                                                                                          \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAssetProps`\n *\n * @param properties - the TypeScript properties of a `CfnAssetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAssetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('packagingGroupId', cdk.requiredValidator)(properties.packagingGroupId));\n    errors.collect(cdk.propertyValidator('packagingGroupId', cdk.validateString)(properties.packagingGroupId));\n    errors.collect(cdk.propertyValidator('resourceId', cdk.validateString)(properties.resourceId));\n    errors.collect(cdk.propertyValidator('sourceArn', cdk.requiredValidator)(properties.sourceArn));\n    errors.collect(cdk.propertyValidator('sourceArn', cdk.validateString)(properties.sourceArn));\n    errors.collect(cdk.propertyValidator('sourceRoleArn', cdk.requiredValidator)(properties.sourceRoleArn));\n    errors.collect(cdk.propertyValidator('sourceRoleArn', cdk.validateString)(properties.sourceRoleArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnAssetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::Asset` resource\n *\n * @param properties - the TypeScript properties of a `CfnAssetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::Asset` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAssetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAssetPropsValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n        PackagingGroupId: cdk.stringToCloudFormation(properties.packagingGroupId),\n        SourceArn: cdk.stringToCloudFormation(properties.sourceArn),\n        SourceRoleArn: cdk.stringToCloudFormation(properties.sourceRoleArn),\n        ResourceId: cdk.stringToCloudFormation(properties.resourceId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAssetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAssetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAssetProps>();\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('packagingGroupId', 'PackagingGroupId', cfn_parse.FromCloudFormation.getString(properties.PackagingGroupId));\n    ret.addPropertyResult('sourceArn', 'SourceArn', cfn_parse.FromCloudFormation.getString(properties.SourceArn));\n    ret.addPropertyResult('sourceRoleArn', 'SourceRoleArn', cfn_parse.FromCloudFormation.getString(properties.SourceRoleArn));\n    ret.addPropertyResult('resourceId', 'ResourceId', properties.ResourceId != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnAsset extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::MediaPackage::Asset\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAsset {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAssetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAsset(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                               \n    public readonly attrArn: string;\n\n                                                                                                                            \n    public readonly attrCreatedAt: string;\n\n                                                                      \n    public readonly attrEgressEndpoints: cdk.IResolvable;\n\n                                                                                                                                                                                                                       \n    public id: string;\n\n                                                                                                                                                                                                                                               \n    public packagingGroupId: string;\n\n                                                                                                                                                                                                                           \n    public sourceArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                          \n    public sourceRoleArn: string;\n\n                                                                                                                                                                                                                                                                 \n    public resourceId: string | undefined;\n\n                                                                                                                                                                                                          \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnAssetProps) {\n        super(scope, id, { type: CfnAsset.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'id', this);\n        cdk.requireProperty(props, 'packagingGroupId', this);\n        cdk.requireProperty(props, 'sourceArn', this);\n        cdk.requireProperty(props, 'sourceRoleArn', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreatedAt = cdk.Token.asString(this.getAtt('CreatedAt'));\n        this.attrEgressEndpoints = this.getAtt('EgressEndpoints');\n\n        this.id = props.id;\n        this.packagingGroupId = props.packagingGroupId;\n        this.sourceArn = props.sourceArn;\n        this.sourceRoleArn = props.sourceRoleArn;\n        this.resourceId = props.resourceId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::MediaPackage::Asset\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAsset.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            id: this.id,\n            packagingGroupId: this.packagingGroupId,\n            sourceArn: this.sourceArn,\n            sourceRoleArn: this.sourceRoleArn,\n            resourceId: this.resourceId,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAssetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnAsset {\n                                                                                                                                                                                                                                                                                \n    export interface EgressEndpointProperty {\n                                                                                                                                                                                                                                                                                                                   \n        readonly packagingConfigurationId: string;\n                                                                                                                                                                                                                                                                                       \n        readonly url: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EgressEndpointProperty`\n *\n * @param properties - the TypeScript properties of a `EgressEndpointProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAsset_EgressEndpointPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('packagingConfigurationId', cdk.requiredValidator)(properties.packagingConfigurationId));\n    errors.collect(cdk.propertyValidator('packagingConfigurationId', cdk.validateString)(properties.packagingConfigurationId));\n    errors.collect(cdk.propertyValidator('url', cdk.requiredValidator)(properties.url));\n    errors.collect(cdk.propertyValidator('url', cdk.validateString)(properties.url));\n    return errors.wrap('supplied properties not correct for \"EgressEndpointProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::Asset.EgressEndpoint` resource\n *\n * @param properties - the TypeScript properties of a `EgressEndpointProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::Asset.EgressEndpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAssetEgressEndpointPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAsset_EgressEndpointPropertyValidator(properties).assertSuccess();\n    return {\n        PackagingConfigurationId: cdk.stringToCloudFormation(properties.packagingConfigurationId),\n        Url: cdk.stringToCloudFormation(properties.url),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAssetEgressEndpointPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAsset.EgressEndpointProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAsset.EgressEndpointProperty>();\n    ret.addPropertyResult('packagingConfigurationId', 'PackagingConfigurationId', cfn_parse.FromCloudFormation.getString(properties.PackagingConfigurationId));\n    ret.addPropertyResult('url', 'Url', cfn_parse.FromCloudFormation.getString(properties.Url));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                       \nexport interface CfnChannelProps {\n\n                                                                                                                                                                                                                             \n    readonly id: string;\n\n                                                                                                                                                                                                                                                                                        \n    readonly description?: string;\n\n                                                                                                                                                                                                                        \n    readonly egressAccessLogs?: CfnChannel.LogConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                          \n    readonly ingressAccessLogs?: CfnChannel.LogConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnChannelProps`\n *\n * @param properties - the TypeScript properties of a `CfnChannelProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannelPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('egressAccessLogs', CfnChannel_LogConfigurationPropertyValidator)(properties.egressAccessLogs));\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('ingressAccessLogs', CfnChannel_LogConfigurationPropertyValidator)(properties.ingressAccessLogs));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnChannelProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::Channel` resource\n *\n * @param properties - the TypeScript properties of a `CfnChannelProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::Channel` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannelPropsValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n        Description: cdk.stringToCloudFormation(properties.description),\n        EgressAccessLogs: cfnChannelLogConfigurationPropertyToCloudFormation(properties.egressAccessLogs),\n        IngressAccessLogs: cfnChannelLogConfigurationPropertyToCloudFormation(properties.ingressAccessLogs),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannelProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannelProps>();\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('egressAccessLogs', 'EgressAccessLogs', properties.EgressAccessLogs != null ? CfnChannelLogConfigurationPropertyFromCloudFormation(properties.EgressAccessLogs) : undefined);\n    ret.addPropertyResult('ingressAccessLogs', 'IngressAccessLogs', properties.IngressAccessLogs != null ? CfnChannelLogConfigurationPropertyFromCloudFormation(properties.IngressAccessLogs) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnChannel extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::MediaPackage::Channel\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnChannel {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnChannelPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnChannel(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                        \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                             \n    public id: string;\n\n                                                                                                                                                                                                                                                                                        \n    public description: string | undefined;\n\n                                                                                                                                                                                                                        \n    public egressAccessLogs: CfnChannel.LogConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                          \n    public ingressAccessLogs: CfnChannel.LogConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnChannelProps) {\n        super(scope, id, { type: CfnChannel.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'id', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.id = props.id;\n        this.description = props.description;\n        this.egressAccessLogs = props.egressAccessLogs;\n        this.ingressAccessLogs = props.ingressAccessLogs;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::MediaPackage::Channel\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnChannel.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            id: this.id,\n            description: this.description,\n            egressAccessLogs: this.egressAccessLogs,\n            ingressAccessLogs: this.ingressAccessLogs,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnChannelPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnChannel {\n                                                                                                                                                                                                                                                                             \n    export interface LogConfigurationProperty {\n                                                                                                                                                                                                                                                                                             \n        readonly logGroupName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `LogConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnChannel_LogConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('logGroupName', cdk.validateString)(properties.logGroupName));\n    return errors.wrap('supplied properties not correct for \"LogConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::Channel.LogConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `LogConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::Channel.LogConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnChannelLogConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnChannel_LogConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnChannelLogConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnChannel.LogConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnChannel.LogConfigurationProperty>();\n    ret.addPropertyResult('logGroupName', 'LogGroupName', properties.LogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.LogGroupName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                     \nexport interface CfnOriginEndpointProps {\n\n                                                                                                                                                                                                                                                     \n    readonly channelId: string;\n\n                                                                                                                                                                                                                                                                                                                          \n    readonly id: string;\n\n                                                                                                                                                                                                                                      \n    readonly authorization?: CfnOriginEndpoint.AuthorizationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                   \n    readonly cmafPackage?: CfnOriginEndpoint.CmafPackageProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                 \n    readonly dashPackage?: CfnOriginEndpoint.DashPackageProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                       \n    readonly description?: string;\n\n                                                                                                                                                                                                                                     \n    readonly hlsPackage?: CfnOriginEndpoint.HlsPackageProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                           \n    readonly manifestName?: string;\n\n                                                                                                                                                                                                                                                      \n    readonly mssPackage?: CfnOriginEndpoint.MssPackageProperty | cdk.IResolvable;\n\nn    readonly origination?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly startoverWindowSeconds?: number;\n\n                                                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly timeDelaySeconds?: number;\n\n                                                                                                                                                                                                                                                \n    readonly whitelist?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnOriginEndpointProps`\n *\n * @param properties - the TypeScript properties of a `CfnOriginEndpointProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginEndpointPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authorization', CfnOriginEndpoint_AuthorizationPropertyValidator)(properties.authorization));\n    errors.collect(cdk.propertyValidator('channelId', cdk.requiredValidator)(properties.channelId));\n    errors.collect(cdk.propertyValidator('channelId', cdk.validateString)(properties.channelId));\n    errors.collect(cdk.propertyValidator('cmafPackage', CfnOriginEndpoint_CmafPackagePropertyValidator)(properties.cmafPackage));\n    errors.collect(cdk.propertyValidator('dashPackage', CfnOriginEndpoint_DashPackagePropertyValidator)(properties.dashPackage));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('hlsPackage', CfnOriginEndpoint_HlsPackagePropertyValidator)(properties.hlsPackage));\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('manifestName', cdk.validateString)(properties.manifestName));\n    errors.collect(cdk.propertyValidator('mssPackage', CfnOriginEndpoint_MssPackagePropertyValidator)(properties.mssPackage));\n    errors.collect(cdk.propertyValidator('origination', cdk.validateString)(properties.origination));\n    errors.collect(cdk.propertyValidator('startoverWindowSeconds', cdk.validateNumber)(properties.startoverWindowSeconds));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('timeDelaySeconds', cdk.validateNumber)(properties.timeDelaySeconds));\n    errors.collect(cdk.propertyValidator('whitelist', cdk.listValidator(cdk.validateString))(properties.whitelist));\n    return errors.wrap('supplied properties not correct for \"CfnOriginEndpointProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint` resource\n *\n * @param properties - the TypeScript properties of a `CfnOriginEndpointProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginEndpointPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginEndpointPropsValidator(properties).assertSuccess();\n    return {\n        ChannelId: cdk.stringToCloudFormation(properties.channelId),\n        Id: cdk.stringToCloudFormation(properties.id),\n        Authorization: cfnOriginEndpointAuthorizationPropertyToCloudFormation(properties.authorization),\n        CmafPackage: cfnOriginEndpointCmafPackagePropertyToCloudFormation(properties.cmafPackage),\n        DashPackage: cfnOriginEndpointDashPackagePropertyToCloudFormation(properties.dashPackage),\n        Description: cdk.stringToCloudFormation(properties.description),\n        HlsPackage: cfnOriginEndpointHlsPackagePropertyToCloudFormation(properties.hlsPackage),\n        ManifestName: cdk.stringToCloudFormation(properties.manifestName),\n        MssPackage: cfnOriginEndpointMssPackagePropertyToCloudFormation(properties.mssPackage),\n        Origination: cdk.stringToCloudFormation(properties.origination),\n        StartoverWindowSeconds: cdk.numberToCloudFormation(properties.startoverWindowSeconds),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TimeDelaySeconds: cdk.numberToCloudFormation(properties.timeDelaySeconds),\n        Whitelist: cdk.listMapper(cdk.stringToCloudFormation)(properties.whitelist),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginEndpointPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginEndpointProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginEndpointProps>();\n    ret.addPropertyResult('channelId', 'ChannelId', cfn_parse.FromCloudFormation.getString(properties.ChannelId));\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('authorization', 'Authorization', properties.Authorization != null ? CfnOriginEndpointAuthorizationPropertyFromCloudFormation(properties.Authorization) : undefined);\n    ret.addPropertyResult('cmafPackage', 'CmafPackage', properties.CmafPackage != null ? CfnOriginEndpointCmafPackagePropertyFromCloudFormation(properties.CmafPackage) : undefined);\n    ret.addPropertyResult('dashPackage', 'DashPackage', properties.DashPackage != null ? CfnOriginEndpointDashPackagePropertyFromCloudFormation(properties.DashPackage) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('hlsPackage', 'HlsPackage', properties.HlsPackage != null ? CfnOriginEndpointHlsPackagePropertyFromCloudFormation(properties.HlsPackage) : undefined);\n    ret.addPropertyResult('manifestName', 'ManifestName', properties.ManifestName != null ? cfn_parse.FromCloudFormation.getString(properties.ManifestName) : undefined);\n    ret.addPropertyResult('mssPackage', 'MssPackage', properties.MssPackage != null ? CfnOriginEndpointMssPackagePropertyFromCloudFormation(properties.MssPackage) : undefined);\n    ret.addPropertyResult('origination', 'Origination', properties.Origination != null ? cfn_parse.FromCloudFormation.getString(properties.Origination) : undefined);\n    ret.addPropertyResult('startoverWindowSeconds', 'StartoverWindowSeconds', properties.StartoverWindowSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.StartoverWindowSeconds) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('timeDelaySeconds', 'TimeDelaySeconds', properties.TimeDelaySeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeDelaySeconds) : undefined);\n    ret.addPropertyResult('whitelist', 'Whitelist', properties.Whitelist != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Whitelist) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnOriginEndpoint extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::MediaPackage::OriginEndpoint\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnOriginEndpoint {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnOriginEndpointPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnOriginEndpoint(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                         \n    public readonly attrArn: string;\n\n                                                                                                                                           \n    public readonly attrUrl: string;\n\n                                                                                                                                                                                                                                                     \n    public channelId: string;\n\n                                                                                                                                                                                                                                                                                                                          \n    public id: string;\n\n                                                                                                                                                                                                                                      \n    public authorization: CfnOriginEndpoint.AuthorizationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                   \n    public cmafPackage: CfnOriginEndpoint.CmafPackageProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                 \n    public dashPackage: CfnOriginEndpoint.DashPackageProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                       \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                     \n    public hlsPackage: CfnOriginEndpoint.HlsPackageProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                           \n    public manifestName: string | undefined;\n\n                                                                                                                                                                                                                                                      \n    public mssPackage: CfnOriginEndpoint.MssPackageProperty | cdk.IResolvable | undefined;\n\nn    public origination: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                         \n    public startoverWindowSeconds: number | undefined;\n\n                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    public timeDelaySeconds: number | undefined;\n\n                                                                                                                                                                                                                                                \n    public whitelist: string[] | undefined;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnOriginEndpointProps) {\n        super(scope, id, { type: CfnOriginEndpoint.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'channelId', this);\n        cdk.requireProperty(props, 'id', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrUrl = cdk.Token.asString(this.getAtt('Url'));\n\n        this.channelId = props.channelId;\n        this.id = props.id;\n        this.authorization = props.authorization;\n        this.cmafPackage = props.cmafPackage;\n        this.dashPackage = props.dashPackage;\n        this.description = props.description;\n        this.hlsPackage = props.hlsPackage;\n        this.manifestName = props.manifestName;\n        this.mssPackage = props.mssPackage;\n        this.origination = props.origination;\n        this.startoverWindowSeconds = props.startoverWindowSeconds;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::MediaPackage::OriginEndpoint\", props.tags, { tagPropertyName: 'tags' });\n        this.timeDelaySeconds = props.timeDelaySeconds;\n        this.whitelist = props.whitelist;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnOriginEndpoint.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            channelId: this.channelId,\n            id: this.id,\n            authorization: this.authorization,\n            cmafPackage: this.cmafPackage,\n            dashPackage: this.dashPackage,\n            description: this.description,\n            hlsPackage: this.hlsPackage,\n            manifestName: this.manifestName,\n            mssPackage: this.mssPackage,\n            origination: this.origination,\n            startoverWindowSeconds: this.startoverWindowSeconds,\n            tags: this.tags.renderTags(),\n            timeDelaySeconds: this.timeDelaySeconds,\n            whitelist: this.whitelist,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnOriginEndpointPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnOriginEndpoint {\n                                                                                                                                                                                                                                                                                  \n    export interface AuthorizationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly cdnIdentifierSecret: string;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly secretsRoleArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AuthorizationProperty`\n *\n * @param properties - the TypeScript properties of a `AuthorizationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginEndpoint_AuthorizationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cdnIdentifierSecret', cdk.requiredValidator)(properties.cdnIdentifierSecret));\n    errors.collect(cdk.propertyValidator('cdnIdentifierSecret', cdk.validateString)(properties.cdnIdentifierSecret));\n    errors.collect(cdk.propertyValidator('secretsRoleArn', cdk.requiredValidator)(properties.secretsRoleArn));\n    errors.collect(cdk.propertyValidator('secretsRoleArn', cdk.validateString)(properties.secretsRoleArn));\n    return errors.wrap('supplied properties not correct for \"AuthorizationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.Authorization` resource\n *\n * @param properties - the TypeScript properties of a `AuthorizationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.Authorization` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginEndpointAuthorizationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginEndpoint_AuthorizationPropertyValidator(properties).assertSuccess();\n    return {\n        CdnIdentifierSecret: cdk.stringToCloudFormation(properties.cdnIdentifierSecret),\n        SecretsRoleArn: cdk.stringToCloudFormation(properties.secretsRoleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginEndpointAuthorizationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginEndpoint.AuthorizationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginEndpoint.AuthorizationProperty>();\n    ret.addPropertyResult('cdnIdentifierSecret', 'CdnIdentifierSecret', cfn_parse.FromCloudFormation.getString(properties.CdnIdentifierSecret));\n    ret.addPropertyResult('secretsRoleArn', 'SecretsRoleArn', cfn_parse.FromCloudFormation.getString(properties.SecretsRoleArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginEndpoint {\n                                                                                                                                                                                                                                                                                                                        \n    export interface CmafEncryptionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly constantInitializationVector?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly keyRotationIntervalSeconds?: number;\n                                                                                                                                                                                                                                                                                                  \n        readonly spekeKeyProvider: CfnOriginEndpoint.SpekeKeyProviderProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CmafEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `CmafEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginEndpoint_CmafEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('constantInitializationVector', cdk.validateString)(properties.constantInitializationVector));\n    errors.collect(cdk.propertyValidator('keyRotationIntervalSeconds', cdk.validateNumber)(properties.keyRotationIntervalSeconds));\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', cdk.requiredValidator)(properties.spekeKeyProvider));\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', CfnOriginEndpoint_SpekeKeyProviderPropertyValidator)(properties.spekeKeyProvider));\n    return errors.wrap('supplied properties not correct for \"CmafEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.CmafEncryption` resource\n *\n * @param properties - the TypeScript properties of a `CmafEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.CmafEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginEndpointCmafEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginEndpoint_CmafEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        ConstantInitializationVector: cdk.stringToCloudFormation(properties.constantInitializationVector),\n        KeyRotationIntervalSeconds: cdk.numberToCloudFormation(properties.keyRotationIntervalSeconds),\n        SpekeKeyProvider: cfnOriginEndpointSpekeKeyProviderPropertyToCloudFormation(properties.spekeKeyProvider),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginEndpointCmafEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginEndpoint.CmafEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginEndpoint.CmafEncryptionProperty>();\n    ret.addPropertyResult('constantInitializationVector', 'ConstantInitializationVector', properties.ConstantInitializationVector != null ? cfn_parse.FromCloudFormation.getString(properties.ConstantInitializationVector) : undefined);\n    ret.addPropertyResult('keyRotationIntervalSeconds', 'KeyRotationIntervalSeconds', properties.KeyRotationIntervalSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.KeyRotationIntervalSeconds) : undefined);\n    ret.addPropertyResult('spekeKeyProvider', 'SpekeKeyProvider', CfnOriginEndpointSpekeKeyProviderPropertyFromCloudFormation(properties.SpekeKeyProvider));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginEndpoint {\n                                                                                                                                                                                                                                                                                      \n    export interface CmafPackageProperty {\n                                                                                                                                                                                                                                                                                  \n        readonly encryption?: CfnOriginEndpoint.CmafEncryptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                              \n        readonly hlsManifests?: Array<CfnOriginEndpoint.HlsManifestProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly segmentDurationSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly segmentPrefix?: string;\n                                                                                                                                                                                                                                                                                                                           \n        readonly streamSelection?: CfnOriginEndpoint.StreamSelectionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CmafPackageProperty`\n *\n * @param properties - the TypeScript properties of a `CmafPackageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginEndpoint_CmafPackagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encryption', CfnOriginEndpoint_CmafEncryptionPropertyValidator)(properties.encryption));\n    errors.collect(cdk.propertyValidator('hlsManifests', cdk.listValidator(CfnOriginEndpoint_HlsManifestPropertyValidator))(properties.hlsManifests));\n    errors.collect(cdk.propertyValidator('segmentDurationSeconds', cdk.validateNumber)(properties.segmentDurationSeconds));\n    errors.collect(cdk.propertyValidator('segmentPrefix', cdk.validateString)(properties.segmentPrefix));\n    errors.collect(cdk.propertyValidator('streamSelection', CfnOriginEndpoint_StreamSelectionPropertyValidator)(properties.streamSelection));\n    return errors.wrap('supplied properties not correct for \"CmafPackageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.CmafPackage` resource\n *\n * @param properties - the TypeScript properties of a `CmafPackageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.CmafPackage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginEndpointCmafPackagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginEndpoint_CmafPackagePropertyValidator(properties).assertSuccess();\n    return {\n        Encryption: cfnOriginEndpointCmafEncryptionPropertyToCloudFormation(properties.encryption),\n        HlsManifests: cdk.listMapper(cfnOriginEndpointHlsManifestPropertyToCloudFormation)(properties.hlsManifests),\n        SegmentDurationSeconds: cdk.numberToCloudFormation(properties.segmentDurationSeconds),\n        SegmentPrefix: cdk.stringToCloudFormation(properties.segmentPrefix),\n        StreamSelection: cfnOriginEndpointStreamSelectionPropertyToCloudFormation(properties.streamSelection),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginEndpointCmafPackagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginEndpoint.CmafPackageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginEndpoint.CmafPackageProperty>();\n    ret.addPropertyResult('encryption', 'Encryption', properties.Encryption != null ? CfnOriginEndpointCmafEncryptionPropertyFromCloudFormation(properties.Encryption) : undefined);\n    ret.addPropertyResult('hlsManifests', 'HlsManifests', properties.HlsManifests != null ? cfn_parse.FromCloudFormation.getArray(CfnOriginEndpointHlsManifestPropertyFromCloudFormation)(properties.HlsManifests) : undefined);\n    ret.addPropertyResult('segmentDurationSeconds', 'SegmentDurationSeconds', properties.SegmentDurationSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentDurationSeconds) : undefined);\n    ret.addPropertyResult('segmentPrefix', 'SegmentPrefix', properties.SegmentPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentPrefix) : undefined);\n    ret.addPropertyResult('streamSelection', 'StreamSelection', properties.StreamSelection != null ? CfnOriginEndpointStreamSelectionPropertyFromCloudFormation(properties.StreamSelection) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginEndpoint {\n                                                                                                                                                                                                                                                                                                                        \n    export interface DashEncryptionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly keyRotationIntervalSeconds?: number;\n                                                                                                                                                                                                                                                                                                  \n        readonly spekeKeyProvider: CfnOriginEndpoint.SpekeKeyProviderProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DashEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `DashEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginEndpoint_DashEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('keyRotationIntervalSeconds', cdk.validateNumber)(properties.keyRotationIntervalSeconds));\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', cdk.requiredValidator)(properties.spekeKeyProvider));\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', CfnOriginEndpoint_SpekeKeyProviderPropertyValidator)(properties.spekeKeyProvider));\n    return errors.wrap('supplied properties not correct for \"DashEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.DashEncryption` resource\n *\n * @param properties - the TypeScript properties of a `DashEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.DashEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginEndpointDashEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginEndpoint_DashEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        KeyRotationIntervalSeconds: cdk.numberToCloudFormation(properties.keyRotationIntervalSeconds),\n        SpekeKeyProvider: cfnOriginEndpointSpekeKeyProviderPropertyToCloudFormation(properties.spekeKeyProvider),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginEndpointDashEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginEndpoint.DashEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginEndpoint.DashEncryptionProperty>();\n    ret.addPropertyResult('keyRotationIntervalSeconds', 'KeyRotationIntervalSeconds', properties.KeyRotationIntervalSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.KeyRotationIntervalSeconds) : undefined);\n    ret.addPropertyResult('spekeKeyProvider', 'SpekeKeyProvider', CfnOriginEndpointSpekeKeyProviderPropertyFromCloudFormation(properties.SpekeKeyProvider));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginEndpoint {\n                                                                                                                                                                                                                                                    \n    export interface DashPackageProperty {\nn        readonly adTriggers?: string[];\nn        readonly adsOnDeliveryRestrictions?: string;\n                                                                                                                                                                                                                                                                                  \n        readonly encryption?: CfnOriginEndpoint.DashEncryptionProperty | cdk.IResolvable;\nn        readonly manifestLayout?: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly manifestWindowSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly minBufferTimeSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly minUpdatePeriodSeconds?: number;\nn        readonly periodTriggers?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly profile?: string;\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly segmentDurationSeconds?: number;\nn        readonly segmentTemplateFormat?: string;\n                                                                                                                                                                                                                                                                                                                           \n        readonly streamSelection?: CfnOriginEndpoint.StreamSelectionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly suggestedPresentationDelaySeconds?: number;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly utcTiming?: string;\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly utcTimingUri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DashPackageProperty`\n *\n * @param properties - the TypeScript properties of a `DashPackageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginEndpoint_DashPackagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('adTriggers', cdk.listValidator(cdk.validateString))(properties.adTriggers));\n    errors.collect(cdk.propertyValidator('adsOnDeliveryRestrictions', cdk.validateString)(properties.adsOnDeliveryRestrictions));\n    errors.collect(cdk.propertyValidator('encryption', CfnOriginEndpoint_DashEncryptionPropertyValidator)(properties.encryption));\n    errors.collect(cdk.propertyValidator('manifestLayout', cdk.validateString)(properties.manifestLayout));\n    errors.collect(cdk.propertyValidator('manifestWindowSeconds', cdk.validateNumber)(properties.manifestWindowSeconds));\n    errors.collect(cdk.propertyValidator('minBufferTimeSeconds', cdk.validateNumber)(properties.minBufferTimeSeconds));\n    errors.collect(cdk.propertyValidator('minUpdatePeriodSeconds', cdk.validateNumber)(properties.minUpdatePeriodSeconds));\n    errors.collect(cdk.propertyValidator('periodTriggers', cdk.listValidator(cdk.validateString))(properties.periodTriggers));\n    errors.collect(cdk.propertyValidator('profile', cdk.validateString)(properties.profile));\n    errors.collect(cdk.propertyValidator('segmentDurationSeconds', cdk.validateNumber)(properties.segmentDurationSeconds));\n    errors.collect(cdk.propertyValidator('segmentTemplateFormat', cdk.validateString)(properties.segmentTemplateFormat));\n    errors.collect(cdk.propertyValidator('streamSelection', CfnOriginEndpoint_StreamSelectionPropertyValidator)(properties.streamSelection));\n    errors.collect(cdk.propertyValidator('suggestedPresentationDelaySeconds', cdk.validateNumber)(properties.suggestedPresentationDelaySeconds));\n    errors.collect(cdk.propertyValidator('utcTiming', cdk.validateString)(properties.utcTiming));\n    errors.collect(cdk.propertyValidator('utcTimingUri', cdk.validateString)(properties.utcTimingUri));\n    return errors.wrap('supplied properties not correct for \"DashPackageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.DashPackage` resource\n *\n * @param properties - the TypeScript properties of a `DashPackageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.DashPackage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginEndpointDashPackagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginEndpoint_DashPackagePropertyValidator(properties).assertSuccess();\n    return {\n        AdTriggers: cdk.listMapper(cdk.stringToCloudFormation)(properties.adTriggers),\n        AdsOnDeliveryRestrictions: cdk.stringToCloudFormation(properties.adsOnDeliveryRestrictions),\n        Encryption: cfnOriginEndpointDashEncryptionPropertyToCloudFormation(properties.encryption),\n        ManifestLayout: cdk.stringToCloudFormation(properties.manifestLayout),\n        ManifestWindowSeconds: cdk.numberToCloudFormation(properties.manifestWindowSeconds),\n        MinBufferTimeSeconds: cdk.numberToCloudFormation(properties.minBufferTimeSeconds),\n        MinUpdatePeriodSeconds: cdk.numberToCloudFormation(properties.minUpdatePeriodSeconds),\n        PeriodTriggers: cdk.listMapper(cdk.stringToCloudFormation)(properties.periodTriggers),\n        Profile: cdk.stringToCloudFormation(properties.profile),\n        SegmentDurationSeconds: cdk.numberToCloudFormation(properties.segmentDurationSeconds),\n        SegmentTemplateFormat: cdk.stringToCloudFormation(properties.segmentTemplateFormat),\n        StreamSelection: cfnOriginEndpointStreamSelectionPropertyToCloudFormation(properties.streamSelection),\n        SuggestedPresentationDelaySeconds: cdk.numberToCloudFormation(properties.suggestedPresentationDelaySeconds),\n        UtcTiming: cdk.stringToCloudFormation(properties.utcTiming),\n        UtcTimingUri: cdk.stringToCloudFormation(properties.utcTimingUri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginEndpointDashPackagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginEndpoint.DashPackageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginEndpoint.DashPackageProperty>();\n    ret.addPropertyResult('adTriggers', 'AdTriggers', properties.AdTriggers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AdTriggers) : undefined);\n    ret.addPropertyResult('adsOnDeliveryRestrictions', 'AdsOnDeliveryRestrictions', properties.AdsOnDeliveryRestrictions != null ? cfn_parse.FromCloudFormation.getString(properties.AdsOnDeliveryRestrictions) : undefined);\n    ret.addPropertyResult('encryption', 'Encryption', properties.Encryption != null ? CfnOriginEndpointDashEncryptionPropertyFromCloudFormation(properties.Encryption) : undefined);\n    ret.addPropertyResult('manifestLayout', 'ManifestLayout', properties.ManifestLayout != null ? cfn_parse.FromCloudFormation.getString(properties.ManifestLayout) : undefined);\n    ret.addPropertyResult('manifestWindowSeconds', 'ManifestWindowSeconds', properties.ManifestWindowSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.ManifestWindowSeconds) : undefined);\n    ret.addPropertyResult('minBufferTimeSeconds', 'MinBufferTimeSeconds', properties.MinBufferTimeSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinBufferTimeSeconds) : undefined);\n    ret.addPropertyResult('minUpdatePeriodSeconds', 'MinUpdatePeriodSeconds', properties.MinUpdatePeriodSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinUpdatePeriodSeconds) : undefined);\n    ret.addPropertyResult('periodTriggers', 'PeriodTriggers', properties.PeriodTriggers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PeriodTriggers) : undefined);\n    ret.addPropertyResult('profile', 'Profile', properties.Profile != null ? cfn_parse.FromCloudFormation.getString(properties.Profile) : undefined);\n    ret.addPropertyResult('segmentDurationSeconds', 'SegmentDurationSeconds', properties.SegmentDurationSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentDurationSeconds) : undefined);\n    ret.addPropertyResult('segmentTemplateFormat', 'SegmentTemplateFormat', properties.SegmentTemplateFormat != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentTemplateFormat) : undefined);\n    ret.addPropertyResult('streamSelection', 'StreamSelection', properties.StreamSelection != null ? CfnOriginEndpointStreamSelectionPropertyFromCloudFormation(properties.StreamSelection) : undefined);\n    ret.addPropertyResult('suggestedPresentationDelaySeconds', 'SuggestedPresentationDelaySeconds', properties.SuggestedPresentationDelaySeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.SuggestedPresentationDelaySeconds) : undefined);\n    ret.addPropertyResult('utcTiming', 'UtcTiming', properties.UtcTiming != null ? cfn_parse.FromCloudFormation.getString(properties.UtcTiming) : undefined);\n    ret.addPropertyResult('utcTimingUri', 'UtcTimingUri', properties.UtcTimingUri != null ? cfn_parse.FromCloudFormation.getString(properties.UtcTimingUri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginEndpoint {\n                                                                                                                                                                                                                                                                                                                       \n    export interface HlsEncryptionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly constantInitializationVector?: string;\n                                                                                                                                                                                                                                                                              \n        readonly encryptionMethod?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly keyRotationIntervalSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly repeatExtXKey?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                \n        readonly spekeKeyProvider: CfnOriginEndpoint.SpekeKeyProviderProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `HlsEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginEndpoint_HlsEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('constantInitializationVector', cdk.validateString)(properties.constantInitializationVector));\n    errors.collect(cdk.propertyValidator('encryptionMethod', cdk.validateString)(properties.encryptionMethod));\n    errors.collect(cdk.propertyValidator('keyRotationIntervalSeconds', cdk.validateNumber)(properties.keyRotationIntervalSeconds));\n    errors.collect(cdk.propertyValidator('repeatExtXKey', cdk.validateBoolean)(properties.repeatExtXKey));\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', cdk.requiredValidator)(properties.spekeKeyProvider));\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', CfnOriginEndpoint_SpekeKeyProviderPropertyValidator)(properties.spekeKeyProvider));\n    return errors.wrap('supplied properties not correct for \"HlsEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.HlsEncryption` resource\n *\n * @param properties - the TypeScript properties of a `HlsEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.HlsEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginEndpointHlsEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginEndpoint_HlsEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        ConstantInitializationVector: cdk.stringToCloudFormation(properties.constantInitializationVector),\n        EncryptionMethod: cdk.stringToCloudFormation(properties.encryptionMethod),\n        KeyRotationIntervalSeconds: cdk.numberToCloudFormation(properties.keyRotationIntervalSeconds),\n        RepeatExtXKey: cdk.booleanToCloudFormation(properties.repeatExtXKey),\n        SpekeKeyProvider: cfnOriginEndpointSpekeKeyProviderPropertyToCloudFormation(properties.spekeKeyProvider),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginEndpointHlsEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginEndpoint.HlsEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginEndpoint.HlsEncryptionProperty>();\n    ret.addPropertyResult('constantInitializationVector', 'ConstantInitializationVector', properties.ConstantInitializationVector != null ? cfn_parse.FromCloudFormation.getString(properties.ConstantInitializationVector) : undefined);\n    ret.addPropertyResult('encryptionMethod', 'EncryptionMethod', properties.EncryptionMethod != null ? cfn_parse.FromCloudFormation.getString(properties.EncryptionMethod) : undefined);\n    ret.addPropertyResult('keyRotationIntervalSeconds', 'KeyRotationIntervalSeconds', properties.KeyRotationIntervalSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.KeyRotationIntervalSeconds) : undefined);\n    ret.addPropertyResult('repeatExtXKey', 'RepeatExtXKey', properties.RepeatExtXKey != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RepeatExtXKey) : undefined);\n    ret.addPropertyResult('spekeKeyProvider', 'SpekeKeyProvider', CfnOriginEndpointSpekeKeyProviderPropertyFromCloudFormation(properties.SpekeKeyProvider));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginEndpoint {\n                                                                                                                                                                                                                                                                                             \n    export interface HlsManifestProperty {\nn        readonly adMarkers?: string;\nn        readonly adTriggers?: string[];\nn        readonly adsOnDeliveryRestrictions?: string;\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly id: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly includeIframeOnlyStream?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly manifestName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly playlistType?: string;\n                                                                                                                                                                                                                                                                                                                      \n        readonly playlistWindowSeconds?: number;\nn        readonly programDateTimeIntervalSeconds?: number;\n                                                                                                                                                                                                                                                                                                         \n        readonly url?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsManifestProperty`\n *\n * @param properties - the TypeScript properties of a `HlsManifestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginEndpoint_HlsManifestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('adMarkers', cdk.validateString)(properties.adMarkers));\n    errors.collect(cdk.propertyValidator('adTriggers', cdk.listValidator(cdk.validateString))(properties.adTriggers));\n    errors.collect(cdk.propertyValidator('adsOnDeliveryRestrictions', cdk.validateString)(properties.adsOnDeliveryRestrictions));\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('includeIframeOnlyStream', cdk.validateBoolean)(properties.includeIframeOnlyStream));\n    errors.collect(cdk.propertyValidator('manifestName', cdk.validateString)(properties.manifestName));\n    errors.collect(cdk.propertyValidator('playlistType', cdk.validateString)(properties.playlistType));\n    errors.collect(cdk.propertyValidator('playlistWindowSeconds', cdk.validateNumber)(properties.playlistWindowSeconds));\n    errors.collect(cdk.propertyValidator('programDateTimeIntervalSeconds', cdk.validateNumber)(properties.programDateTimeIntervalSeconds));\n    errors.collect(cdk.propertyValidator('url', cdk.validateString)(properties.url));\n    return errors.wrap('supplied properties not correct for \"HlsManifestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.HlsManifest` resource\n *\n * @param properties - the TypeScript properties of a `HlsManifestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.HlsManifest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginEndpointHlsManifestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginEndpoint_HlsManifestPropertyValidator(properties).assertSuccess();\n    return {\n        AdMarkers: cdk.stringToCloudFormation(properties.adMarkers),\n        AdTriggers: cdk.listMapper(cdk.stringToCloudFormation)(properties.adTriggers),\n        AdsOnDeliveryRestrictions: cdk.stringToCloudFormation(properties.adsOnDeliveryRestrictions),\n        Id: cdk.stringToCloudFormation(properties.id),\n        IncludeIframeOnlyStream: cdk.booleanToCloudFormation(properties.includeIframeOnlyStream),\n        ManifestName: cdk.stringToCloudFormation(properties.manifestName),\n        PlaylistType: cdk.stringToCloudFormation(properties.playlistType),\n        PlaylistWindowSeconds: cdk.numberToCloudFormation(properties.playlistWindowSeconds),\n        ProgramDateTimeIntervalSeconds: cdk.numberToCloudFormation(properties.programDateTimeIntervalSeconds),\n        Url: cdk.stringToCloudFormation(properties.url),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginEndpointHlsManifestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginEndpoint.HlsManifestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginEndpoint.HlsManifestProperty>();\n    ret.addPropertyResult('adMarkers', 'AdMarkers', properties.AdMarkers != null ? cfn_parse.FromCloudFormation.getString(properties.AdMarkers) : undefined);\n    ret.addPropertyResult('adTriggers', 'AdTriggers', properties.AdTriggers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AdTriggers) : undefined);\n    ret.addPropertyResult('adsOnDeliveryRestrictions', 'AdsOnDeliveryRestrictions', properties.AdsOnDeliveryRestrictions != null ? cfn_parse.FromCloudFormation.getString(properties.AdsOnDeliveryRestrictions) : undefined);\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('includeIframeOnlyStream', 'IncludeIframeOnlyStream', properties.IncludeIframeOnlyStream != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeIframeOnlyStream) : undefined);\n    ret.addPropertyResult('manifestName', 'ManifestName', properties.ManifestName != null ? cfn_parse.FromCloudFormation.getString(properties.ManifestName) : undefined);\n    ret.addPropertyResult('playlistType', 'PlaylistType', properties.PlaylistType != null ? cfn_parse.FromCloudFormation.getString(properties.PlaylistType) : undefined);\n    ret.addPropertyResult('playlistWindowSeconds', 'PlaylistWindowSeconds', properties.PlaylistWindowSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.PlaylistWindowSeconds) : undefined);\n    ret.addPropertyResult('programDateTimeIntervalSeconds', 'ProgramDateTimeIntervalSeconds', properties.ProgramDateTimeIntervalSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProgramDateTimeIntervalSeconds) : undefined);\n    ret.addPropertyResult('url', 'Url', properties.Url != null ? cfn_parse.FromCloudFormation.getString(properties.Url) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginEndpoint {\n                                                                                                                                                                                                                                                        \n    export interface HlsPackageProperty {\nn        readonly adMarkers?: string;\nn        readonly adTriggers?: string[];\nn        readonly adsOnDeliveryRestrictions?: string;\n                                                                                                                                                                                                                                                                                \n        readonly encryption?: CfnOriginEndpoint.HlsEncryptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly includeIframeOnlyStream?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly playlistType?: string;\n                                                                                                                                                                                                                                                                                                                    \n        readonly playlistWindowSeconds?: number;\nn        readonly programDateTimeIntervalSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly segmentDurationSeconds?: number;\n                                                                                                                                                                                                                                                                                                                         \n        readonly streamSelection?: CfnOriginEndpoint.StreamSelectionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly useAudioRenditionGroup?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsPackageProperty`\n *\n * @param properties - the TypeScript properties of a `HlsPackageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginEndpoint_HlsPackagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('adMarkers', cdk.validateString)(properties.adMarkers));\n    errors.collect(cdk.propertyValidator('adTriggers', cdk.listValidator(cdk.validateString))(properties.adTriggers));\n    errors.collect(cdk.propertyValidator('adsOnDeliveryRestrictions', cdk.validateString)(properties.adsOnDeliveryRestrictions));\n    errors.collect(cdk.propertyValidator('encryption', CfnOriginEndpoint_HlsEncryptionPropertyValidator)(properties.encryption));\n    errors.collect(cdk.propertyValidator('includeIframeOnlyStream', cdk.validateBoolean)(properties.includeIframeOnlyStream));\n    errors.collect(cdk.propertyValidator('playlistType', cdk.validateString)(properties.playlistType));\n    errors.collect(cdk.propertyValidator('playlistWindowSeconds', cdk.validateNumber)(properties.playlistWindowSeconds));\n    errors.collect(cdk.propertyValidator('programDateTimeIntervalSeconds', cdk.validateNumber)(properties.programDateTimeIntervalSeconds));\n    errors.collect(cdk.propertyValidator('segmentDurationSeconds', cdk.validateNumber)(properties.segmentDurationSeconds));\n    errors.collect(cdk.propertyValidator('streamSelection', CfnOriginEndpoint_StreamSelectionPropertyValidator)(properties.streamSelection));\n    errors.collect(cdk.propertyValidator('useAudioRenditionGroup', cdk.validateBoolean)(properties.useAudioRenditionGroup));\n    return errors.wrap('supplied properties not correct for \"HlsPackageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.HlsPackage` resource\n *\n * @param properties - the TypeScript properties of a `HlsPackageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.HlsPackage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginEndpointHlsPackagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginEndpoint_HlsPackagePropertyValidator(properties).assertSuccess();\n    return {\n        AdMarkers: cdk.stringToCloudFormation(properties.adMarkers),\n        AdTriggers: cdk.listMapper(cdk.stringToCloudFormation)(properties.adTriggers),\n        AdsOnDeliveryRestrictions: cdk.stringToCloudFormation(properties.adsOnDeliveryRestrictions),\n        Encryption: cfnOriginEndpointHlsEncryptionPropertyToCloudFormation(properties.encryption),\n        IncludeIframeOnlyStream: cdk.booleanToCloudFormation(properties.includeIframeOnlyStream),\n        PlaylistType: cdk.stringToCloudFormation(properties.playlistType),\n        PlaylistWindowSeconds: cdk.numberToCloudFormation(properties.playlistWindowSeconds),\n        ProgramDateTimeIntervalSeconds: cdk.numberToCloudFormation(properties.programDateTimeIntervalSeconds),\n        SegmentDurationSeconds: cdk.numberToCloudFormation(properties.segmentDurationSeconds),\n        StreamSelection: cfnOriginEndpointStreamSelectionPropertyToCloudFormation(properties.streamSelection),\n        UseAudioRenditionGroup: cdk.booleanToCloudFormation(properties.useAudioRenditionGroup),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginEndpointHlsPackagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginEndpoint.HlsPackageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginEndpoint.HlsPackageProperty>();\n    ret.addPropertyResult('adMarkers', 'AdMarkers', properties.AdMarkers != null ? cfn_parse.FromCloudFormation.getString(properties.AdMarkers) : undefined);\n    ret.addPropertyResult('adTriggers', 'AdTriggers', properties.AdTriggers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AdTriggers) : undefined);\n    ret.addPropertyResult('adsOnDeliveryRestrictions', 'AdsOnDeliveryRestrictions', properties.AdsOnDeliveryRestrictions != null ? cfn_parse.FromCloudFormation.getString(properties.AdsOnDeliveryRestrictions) : undefined);\n    ret.addPropertyResult('encryption', 'Encryption', properties.Encryption != null ? CfnOriginEndpointHlsEncryptionPropertyFromCloudFormation(properties.Encryption) : undefined);\n    ret.addPropertyResult('includeIframeOnlyStream', 'IncludeIframeOnlyStream', properties.IncludeIframeOnlyStream != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeIframeOnlyStream) : undefined);\n    ret.addPropertyResult('playlistType', 'PlaylistType', properties.PlaylistType != null ? cfn_parse.FromCloudFormation.getString(properties.PlaylistType) : undefined);\n    ret.addPropertyResult('playlistWindowSeconds', 'PlaylistWindowSeconds', properties.PlaylistWindowSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.PlaylistWindowSeconds) : undefined);\n    ret.addPropertyResult('programDateTimeIntervalSeconds', 'ProgramDateTimeIntervalSeconds', properties.ProgramDateTimeIntervalSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProgramDateTimeIntervalSeconds) : undefined);\n    ret.addPropertyResult('segmentDurationSeconds', 'SegmentDurationSeconds', properties.SegmentDurationSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentDurationSeconds) : undefined);\n    ret.addPropertyResult('streamSelection', 'StreamSelection', properties.StreamSelection != null ? CfnOriginEndpointStreamSelectionPropertyFromCloudFormation(properties.StreamSelection) : undefined);\n    ret.addPropertyResult('useAudioRenditionGroup', 'UseAudioRenditionGroup', properties.UseAudioRenditionGroup != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UseAudioRenditionGroup) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginEndpoint {\n                                                                                                                                                                                                                                                                                                                       \n    export interface MssEncryptionProperty {\n                                                                                                                                                                                                                                                                                                \n        readonly spekeKeyProvider: CfnOriginEndpoint.SpekeKeyProviderProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MssEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `MssEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginEndpoint_MssEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', cdk.requiredValidator)(properties.spekeKeyProvider));\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', CfnOriginEndpoint_SpekeKeyProviderPropertyValidator)(properties.spekeKeyProvider));\n    return errors.wrap('supplied properties not correct for \"MssEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.MssEncryption` resource\n *\n * @param properties - the TypeScript properties of a `MssEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.MssEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginEndpointMssEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginEndpoint_MssEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        SpekeKeyProvider: cfnOriginEndpointSpekeKeyProviderPropertyToCloudFormation(properties.spekeKeyProvider),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginEndpointMssEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginEndpoint.MssEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginEndpoint.MssEncryptionProperty>();\n    ret.addPropertyResult('spekeKeyProvider', 'SpekeKeyProvider', CfnOriginEndpointSpekeKeyProviderPropertyFromCloudFormation(properties.SpekeKeyProvider));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginEndpoint {\n                                                                                                                                                                                                                                                                         \n    export interface MssPackageProperty {\n                                                                                                                                                                                                                                                                                \n        readonly encryption?: CfnOriginEndpoint.MssEncryptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                             \n        readonly manifestWindowSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly segmentDurationSeconds?: number;\n                                                                                                                                                                                                                                                                                                                         \n        readonly streamSelection?: CfnOriginEndpoint.StreamSelectionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MssPackageProperty`\n *\n * @param properties - the TypeScript properties of a `MssPackageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginEndpoint_MssPackagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encryption', CfnOriginEndpoint_MssEncryptionPropertyValidator)(properties.encryption));\n    errors.collect(cdk.propertyValidator('manifestWindowSeconds', cdk.validateNumber)(properties.manifestWindowSeconds));\n    errors.collect(cdk.propertyValidator('segmentDurationSeconds', cdk.validateNumber)(properties.segmentDurationSeconds));\n    errors.collect(cdk.propertyValidator('streamSelection', CfnOriginEndpoint_StreamSelectionPropertyValidator)(properties.streamSelection));\n    return errors.wrap('supplied properties not correct for \"MssPackageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.MssPackage` resource\n *\n * @param properties - the TypeScript properties of a `MssPackageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.MssPackage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginEndpointMssPackagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginEndpoint_MssPackagePropertyValidator(properties).assertSuccess();\n    return {\n        Encryption: cfnOriginEndpointMssEncryptionPropertyToCloudFormation(properties.encryption),\n        ManifestWindowSeconds: cdk.numberToCloudFormation(properties.manifestWindowSeconds),\n        SegmentDurationSeconds: cdk.numberToCloudFormation(properties.segmentDurationSeconds),\n        StreamSelection: cfnOriginEndpointStreamSelectionPropertyToCloudFormation(properties.streamSelection),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginEndpointMssPackagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginEndpoint.MssPackageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginEndpoint.MssPackageProperty>();\n    ret.addPropertyResult('encryption', 'Encryption', properties.Encryption != null ? CfnOriginEndpointMssEncryptionPropertyFromCloudFormation(properties.Encryption) : undefined);\n    ret.addPropertyResult('manifestWindowSeconds', 'ManifestWindowSeconds', properties.ManifestWindowSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.ManifestWindowSeconds) : undefined);\n    ret.addPropertyResult('segmentDurationSeconds', 'SegmentDurationSeconds', properties.SegmentDurationSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentDurationSeconds) : undefined);\n    ret.addPropertyResult('streamSelection', 'StreamSelection', properties.StreamSelection != null ? CfnOriginEndpointStreamSelectionPropertyFromCloudFormation(properties.StreamSelection) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginEndpoint {\n                                                                                                                                                                                                                                                        \n    export interface SpekeKeyProviderProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly certificateArn?: string;\n                                                                                                                                                                                                                                                                                                                                               \n        readonly resourceId: string;\nn        readonly roleArn: string;\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly systemIds: string[];\n                                                                                                                                                                                                                                                                                                                                   \n        readonly url: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SpekeKeyProviderProperty`\n *\n * @param properties - the TypeScript properties of a `SpekeKeyProviderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginEndpoint_SpekeKeyProviderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificateArn', cdk.validateString)(properties.certificateArn));\n    errors.collect(cdk.propertyValidator('resourceId', cdk.requiredValidator)(properties.resourceId));\n    errors.collect(cdk.propertyValidator('resourceId', cdk.validateString)(properties.resourceId));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('systemIds', cdk.requiredValidator)(properties.systemIds));\n    errors.collect(cdk.propertyValidator('systemIds', cdk.listValidator(cdk.validateString))(properties.systemIds));\n    errors.collect(cdk.propertyValidator('url', cdk.requiredValidator)(properties.url));\n    errors.collect(cdk.propertyValidator('url', cdk.validateString)(properties.url));\n    return errors.wrap('supplied properties not correct for \"SpekeKeyProviderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.SpekeKeyProvider` resource\n *\n * @param properties - the TypeScript properties of a `SpekeKeyProviderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.SpekeKeyProvider` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginEndpointSpekeKeyProviderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginEndpoint_SpekeKeyProviderPropertyValidator(properties).assertSuccess();\n    return {\n        CertificateArn: cdk.stringToCloudFormation(properties.certificateArn),\n        ResourceId: cdk.stringToCloudFormation(properties.resourceId),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        SystemIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.systemIds),\n        Url: cdk.stringToCloudFormation(properties.url),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginEndpointSpekeKeyProviderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginEndpoint.SpekeKeyProviderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginEndpoint.SpekeKeyProviderProperty>();\n    ret.addPropertyResult('certificateArn', 'CertificateArn', properties.CertificateArn != null ? cfn_parse.FromCloudFormation.getString(properties.CertificateArn) : undefined);\n    ret.addPropertyResult('resourceId', 'ResourceId', cfn_parse.FromCloudFormation.getString(properties.ResourceId));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('systemIds', 'SystemIds', cfn_parse.FromCloudFormation.getStringArray(properties.SystemIds));\n    ret.addPropertyResult('url', 'Url', cfn_parse.FromCloudFormation.getString(properties.Url));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnOriginEndpoint {\n                                                                                                                                                                                                                                                                                                \n    export interface StreamSelectionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly maxVideoBitsPerSecond?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly minVideoBitsPerSecond?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly streamOrder?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StreamSelectionProperty`\n *\n * @param properties - the TypeScript properties of a `StreamSelectionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnOriginEndpoint_StreamSelectionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxVideoBitsPerSecond', cdk.validateNumber)(properties.maxVideoBitsPerSecond));\n    errors.collect(cdk.propertyValidator('minVideoBitsPerSecond', cdk.validateNumber)(properties.minVideoBitsPerSecond));\n    errors.collect(cdk.propertyValidator('streamOrder', cdk.validateString)(properties.streamOrder));\n    return errors.wrap('supplied properties not correct for \"StreamSelectionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.StreamSelection` resource\n *\n * @param properties - the TypeScript properties of a `StreamSelectionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::OriginEndpoint.StreamSelection` resource.\n */\n// @ts-ignore TS6133\nfunction cfnOriginEndpointStreamSelectionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnOriginEndpoint_StreamSelectionPropertyValidator(properties).assertSuccess();\n    return {\n        MaxVideoBitsPerSecond: cdk.numberToCloudFormation(properties.maxVideoBitsPerSecond),\n        MinVideoBitsPerSecond: cdk.numberToCloudFormation(properties.minVideoBitsPerSecond),\n        StreamOrder: cdk.stringToCloudFormation(properties.streamOrder),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnOriginEndpointStreamSelectionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnOriginEndpoint.StreamSelectionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnOriginEndpoint.StreamSelectionProperty>();\n    ret.addPropertyResult('maxVideoBitsPerSecond', 'MaxVideoBitsPerSecond', properties.MaxVideoBitsPerSecond != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxVideoBitsPerSecond) : undefined);\n    ret.addPropertyResult('minVideoBitsPerSecond', 'MinVideoBitsPerSecond', properties.MinVideoBitsPerSecond != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinVideoBitsPerSecond) : undefined);\n    ret.addPropertyResult('streamOrder', 'StreamOrder', properties.StreamOrder != null ? cfn_parse.FromCloudFormation.getString(properties.StreamOrder) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                     \nexport interface CfnPackagingConfigurationProps {\n\n                                                                                                                                                                                                                                                                           \n    readonly id: string;\n\n                                                                                                                                                                                                                                                                                                   \n    readonly packagingGroupId: string;\n\n                                                                                                                                                                                                                                                 \n    readonly cmafPackage?: CfnPackagingConfiguration.CmafPackageProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                     \n    readonly dashPackage?: CfnPackagingConfiguration.DashPackageProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                     \n    readonly hlsPackage?: CfnPackagingConfiguration.HlsPackageProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                      \n    readonly mssPackage?: CfnPackagingConfiguration.MssPackageProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPackagingConfigurationProps`\n *\n * @param properties - the TypeScript properties of a `CfnPackagingConfigurationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfigurationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cmafPackage', CfnPackagingConfiguration_CmafPackagePropertyValidator)(properties.cmafPackage));\n    errors.collect(cdk.propertyValidator('dashPackage', CfnPackagingConfiguration_DashPackagePropertyValidator)(properties.dashPackage));\n    errors.collect(cdk.propertyValidator('hlsPackage', CfnPackagingConfiguration_HlsPackagePropertyValidator)(properties.hlsPackage));\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('mssPackage', CfnPackagingConfiguration_MssPackagePropertyValidator)(properties.mssPackage));\n    errors.collect(cdk.propertyValidator('packagingGroupId', cdk.requiredValidator)(properties.packagingGroupId));\n    errors.collect(cdk.propertyValidator('packagingGroupId', cdk.validateString)(properties.packagingGroupId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnPackagingConfigurationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CfnPackagingConfigurationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfigurationPropsValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n        PackagingGroupId: cdk.stringToCloudFormation(properties.packagingGroupId),\n        CmafPackage: cfnPackagingConfigurationCmafPackagePropertyToCloudFormation(properties.cmafPackage),\n        DashPackage: cfnPackagingConfigurationDashPackagePropertyToCloudFormation(properties.dashPackage),\n        HlsPackage: cfnPackagingConfigurationHlsPackagePropertyToCloudFormation(properties.hlsPackage),\n        MssPackage: cfnPackagingConfigurationMssPackagePropertyToCloudFormation(properties.mssPackage),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfigurationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfigurationProps>();\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('packagingGroupId', 'PackagingGroupId', cfn_parse.FromCloudFormation.getString(properties.PackagingGroupId));\n    ret.addPropertyResult('cmafPackage', 'CmafPackage', properties.CmafPackage != null ? CfnPackagingConfigurationCmafPackagePropertyFromCloudFormation(properties.CmafPackage) : undefined);\n    ret.addPropertyResult('dashPackage', 'DashPackage', properties.DashPackage != null ? CfnPackagingConfigurationDashPackagePropertyFromCloudFormation(properties.DashPackage) : undefined);\n    ret.addPropertyResult('hlsPackage', 'HlsPackage', properties.HlsPackage != null ? CfnPackagingConfigurationHlsPackagePropertyFromCloudFormation(properties.HlsPackage) : undefined);\n    ret.addPropertyResult('mssPackage', 'MssPackage', properties.MssPackage != null ? CfnPackagingConfigurationMssPackagePropertyFromCloudFormation(properties.MssPackage) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPackagingConfiguration extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::MediaPackage::PackagingConfiguration\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPackagingConfiguration {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPackagingConfigurationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPackagingConfiguration(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                            \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                           \n    public id: string;\n\n                                                                                                                                                                                                                                                                                                   \n    public packagingGroupId: string;\n\n                                                                                                                                                                                                                                                 \n    public cmafPackage: CfnPackagingConfiguration.CmafPackageProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                     \n    public dashPackage: CfnPackagingConfiguration.DashPackageProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                     \n    public hlsPackage: CfnPackagingConfiguration.HlsPackageProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                      \n    public mssPackage: CfnPackagingConfiguration.MssPackageProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnPackagingConfigurationProps) {\n        super(scope, id, { type: CfnPackagingConfiguration.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'id', this);\n        cdk.requireProperty(props, 'packagingGroupId', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.id = props.id;\n        this.packagingGroupId = props.packagingGroupId;\n        this.cmafPackage = props.cmafPackage;\n        this.dashPackage = props.dashPackage;\n        this.hlsPackage = props.hlsPackage;\n        this.mssPackage = props.mssPackage;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::MediaPackage::PackagingConfiguration\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPackagingConfiguration.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            id: this.id,\n            packagingGroupId: this.packagingGroupId,\n            cmafPackage: this.cmafPackage,\n            dashPackage: this.dashPackage,\n            hlsPackage: this.hlsPackage,\n            mssPackage: this.mssPackage,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPackagingConfigurationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnPackagingConfiguration {\n                                                                                                                                                                                                                                                                                                                                \n    export interface CmafEncryptionProperty {\n                                                                                                                                                                                                                                                                                                                  \n        readonly spekeKeyProvider: CfnPackagingConfiguration.SpekeKeyProviderProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CmafEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `CmafEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfiguration_CmafEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', cdk.requiredValidator)(properties.spekeKeyProvider));\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', CfnPackagingConfiguration_SpekeKeyProviderPropertyValidator)(properties.spekeKeyProvider));\n    return errors.wrap('supplied properties not correct for \"CmafEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.CmafEncryption` resource\n *\n * @param properties - the TypeScript properties of a `CmafEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.CmafEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationCmafEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfiguration_CmafEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        SpekeKeyProvider: cfnPackagingConfigurationSpekeKeyProviderPropertyToCloudFormation(properties.spekeKeyProvider),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationCmafEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfiguration.CmafEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfiguration.CmafEncryptionProperty>();\n    ret.addPropertyResult('spekeKeyProvider', 'SpekeKeyProvider', CfnPackagingConfigurationSpekeKeyProviderPropertyFromCloudFormation(properties.SpekeKeyProvider));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPackagingConfiguration {\n                                                                                                                                                                                                                                                                                                                                  \n    export interface CmafPackageProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly encryption?: CfnPackagingConfiguration.CmafEncryptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly hlsManifests: Array<CfnPackagingConfiguration.HlsManifestProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly includeEncoderConfigurationInSegments?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly segmentDurationSeconds?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CmafPackageProperty`\n *\n * @param properties - the TypeScript properties of a `CmafPackageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfiguration_CmafPackagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encryption', CfnPackagingConfiguration_CmafEncryptionPropertyValidator)(properties.encryption));\n    errors.collect(cdk.propertyValidator('hlsManifests', cdk.requiredValidator)(properties.hlsManifests));\n    errors.collect(cdk.propertyValidator('hlsManifests', cdk.listValidator(CfnPackagingConfiguration_HlsManifestPropertyValidator))(properties.hlsManifests));\n    errors.collect(cdk.propertyValidator('includeEncoderConfigurationInSegments', cdk.validateBoolean)(properties.includeEncoderConfigurationInSegments));\n    errors.collect(cdk.propertyValidator('segmentDurationSeconds', cdk.validateNumber)(properties.segmentDurationSeconds));\n    return errors.wrap('supplied properties not correct for \"CmafPackageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.CmafPackage` resource\n *\n * @param properties - the TypeScript properties of a `CmafPackageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.CmafPackage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationCmafPackagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfiguration_CmafPackagePropertyValidator(properties).assertSuccess();\n    return {\n        Encryption: cfnPackagingConfigurationCmafEncryptionPropertyToCloudFormation(properties.encryption),\n        HlsManifests: cdk.listMapper(cfnPackagingConfigurationHlsManifestPropertyToCloudFormation)(properties.hlsManifests),\n        IncludeEncoderConfigurationInSegments: cdk.booleanToCloudFormation(properties.includeEncoderConfigurationInSegments),\n        SegmentDurationSeconds: cdk.numberToCloudFormation(properties.segmentDurationSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationCmafPackagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfiguration.CmafPackageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfiguration.CmafPackageProperty>();\n    ret.addPropertyResult('encryption', 'Encryption', properties.Encryption != null ? CfnPackagingConfigurationCmafEncryptionPropertyFromCloudFormation(properties.Encryption) : undefined);\n    ret.addPropertyResult('hlsManifests', 'HlsManifests', cfn_parse.FromCloudFormation.getArray(CfnPackagingConfigurationHlsManifestPropertyFromCloudFormation)(properties.HlsManifests));\n    ret.addPropertyResult('includeEncoderConfigurationInSegments', 'IncludeEncoderConfigurationInSegments', properties.IncludeEncoderConfigurationInSegments != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeEncoderConfigurationInSegments) : undefined);\n    ret.addPropertyResult('segmentDurationSeconds', 'SegmentDurationSeconds', properties.SegmentDurationSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentDurationSeconds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPackagingConfiguration {\n                                                                                                                                                                                                                                                                                                                                \n    export interface DashEncryptionProperty {\n                                                                                                                                                                                                                                                                                                                  \n        readonly spekeKeyProvider: CfnPackagingConfiguration.SpekeKeyProviderProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DashEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `DashEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfiguration_DashEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', cdk.requiredValidator)(properties.spekeKeyProvider));\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', CfnPackagingConfiguration_SpekeKeyProviderPropertyValidator)(properties.spekeKeyProvider));\n    return errors.wrap('supplied properties not correct for \"DashEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.DashEncryption` resource\n *\n * @param properties - the TypeScript properties of a `DashEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.DashEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationDashEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfiguration_DashEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        SpekeKeyProvider: cfnPackagingConfigurationSpekeKeyProviderPropertyToCloudFormation(properties.spekeKeyProvider),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationDashEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfiguration.DashEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfiguration.DashEncryptionProperty>();\n    ret.addPropertyResult('spekeKeyProvider', 'SpekeKeyProvider', CfnPackagingConfigurationSpekeKeyProviderPropertyFromCloudFormation(properties.SpekeKeyProvider));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPackagingConfiguration {\n                                                                                                                                                                                                                                                              \n    export interface DashManifestProperty {\nn        readonly manifestLayout?: string;\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly manifestName?: string;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly minBufferTimeSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly profile?: string;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly streamSelection?: CfnPackagingConfiguration.StreamSelectionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DashManifestProperty`\n *\n * @param properties - the TypeScript properties of a `DashManifestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfiguration_DashManifestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('manifestLayout', cdk.validateString)(properties.manifestLayout));\n    errors.collect(cdk.propertyValidator('manifestName', cdk.validateString)(properties.manifestName));\n    errors.collect(cdk.propertyValidator('minBufferTimeSeconds', cdk.validateNumber)(properties.minBufferTimeSeconds));\n    errors.collect(cdk.propertyValidator('profile', cdk.validateString)(properties.profile));\n    errors.collect(cdk.propertyValidator('streamSelection', CfnPackagingConfiguration_StreamSelectionPropertyValidator)(properties.streamSelection));\n    return errors.wrap('supplied properties not correct for \"DashManifestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.DashManifest` resource\n *\n * @param properties - the TypeScript properties of a `DashManifestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.DashManifest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationDashManifestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfiguration_DashManifestPropertyValidator(properties).assertSuccess();\n    return {\n        ManifestLayout: cdk.stringToCloudFormation(properties.manifestLayout),\n        ManifestName: cdk.stringToCloudFormation(properties.manifestName),\n        MinBufferTimeSeconds: cdk.numberToCloudFormation(properties.minBufferTimeSeconds),\n        Profile: cdk.stringToCloudFormation(properties.profile),\n        StreamSelection: cfnPackagingConfigurationStreamSelectionPropertyToCloudFormation(properties.streamSelection),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationDashManifestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfiguration.DashManifestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfiguration.DashManifestProperty>();\n    ret.addPropertyResult('manifestLayout', 'ManifestLayout', properties.ManifestLayout != null ? cfn_parse.FromCloudFormation.getString(properties.ManifestLayout) : undefined);\n    ret.addPropertyResult('manifestName', 'ManifestName', properties.ManifestName != null ? cfn_parse.FromCloudFormation.getString(properties.ManifestName) : undefined);\n    ret.addPropertyResult('minBufferTimeSeconds', 'MinBufferTimeSeconds', properties.MinBufferTimeSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinBufferTimeSeconds) : undefined);\n    ret.addPropertyResult('profile', 'Profile', properties.Profile != null ? cfn_parse.FromCloudFormation.getString(properties.Profile) : undefined);\n    ret.addPropertyResult('streamSelection', 'StreamSelection', properties.StreamSelection != null ? CfnPackagingConfigurationStreamSelectionPropertyFromCloudFormation(properties.StreamSelection) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPackagingConfiguration {\n                                                                                                                                                                                                                                                                                                                                       \n    export interface DashPackageProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly dashManifests: Array<CfnPackagingConfiguration.DashManifestProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                  \n        readonly encryption?: CfnPackagingConfiguration.DashEncryptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly includeEncoderConfigurationInSegments?: boolean | cdk.IResolvable;\nn        readonly periodTriggers?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly segmentDurationSeconds?: number;\nn        readonly segmentTemplateFormat?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DashPackageProperty`\n *\n * @param properties - the TypeScript properties of a `DashPackageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfiguration_DashPackagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dashManifests', cdk.requiredValidator)(properties.dashManifests));\n    errors.collect(cdk.propertyValidator('dashManifests', cdk.listValidator(CfnPackagingConfiguration_DashManifestPropertyValidator))(properties.dashManifests));\n    errors.collect(cdk.propertyValidator('encryption', CfnPackagingConfiguration_DashEncryptionPropertyValidator)(properties.encryption));\n    errors.collect(cdk.propertyValidator('includeEncoderConfigurationInSegments', cdk.validateBoolean)(properties.includeEncoderConfigurationInSegments));\n    errors.collect(cdk.propertyValidator('periodTriggers', cdk.listValidator(cdk.validateString))(properties.periodTriggers));\n    errors.collect(cdk.propertyValidator('segmentDurationSeconds', cdk.validateNumber)(properties.segmentDurationSeconds));\n    errors.collect(cdk.propertyValidator('segmentTemplateFormat', cdk.validateString)(properties.segmentTemplateFormat));\n    return errors.wrap('supplied properties not correct for \"DashPackageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.DashPackage` resource\n *\n * @param properties - the TypeScript properties of a `DashPackageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.DashPackage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationDashPackagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfiguration_DashPackagePropertyValidator(properties).assertSuccess();\n    return {\n        DashManifests: cdk.listMapper(cfnPackagingConfigurationDashManifestPropertyToCloudFormation)(properties.dashManifests),\n        Encryption: cfnPackagingConfigurationDashEncryptionPropertyToCloudFormation(properties.encryption),\n        IncludeEncoderConfigurationInSegments: cdk.booleanToCloudFormation(properties.includeEncoderConfigurationInSegments),\n        PeriodTriggers: cdk.listMapper(cdk.stringToCloudFormation)(properties.periodTriggers),\n        SegmentDurationSeconds: cdk.numberToCloudFormation(properties.segmentDurationSeconds),\n        SegmentTemplateFormat: cdk.stringToCloudFormation(properties.segmentTemplateFormat),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationDashPackagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfiguration.DashPackageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfiguration.DashPackageProperty>();\n    ret.addPropertyResult('dashManifests', 'DashManifests', cfn_parse.FromCloudFormation.getArray(CfnPackagingConfigurationDashManifestPropertyFromCloudFormation)(properties.DashManifests));\n    ret.addPropertyResult('encryption', 'Encryption', properties.Encryption != null ? CfnPackagingConfigurationDashEncryptionPropertyFromCloudFormation(properties.Encryption) : undefined);\n    ret.addPropertyResult('includeEncoderConfigurationInSegments', 'IncludeEncoderConfigurationInSegments', properties.IncludeEncoderConfigurationInSegments != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeEncoderConfigurationInSegments) : undefined);\n    ret.addPropertyResult('periodTriggers', 'PeriodTriggers', properties.PeriodTriggers != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PeriodTriggers) : undefined);\n    ret.addPropertyResult('segmentDurationSeconds', 'SegmentDurationSeconds', properties.SegmentDurationSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentDurationSeconds) : undefined);\n    ret.addPropertyResult('segmentTemplateFormat', 'SegmentTemplateFormat', properties.SegmentTemplateFormat != null ? cfn_parse.FromCloudFormation.getString(properties.SegmentTemplateFormat) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPackagingConfiguration {\n                                                                                                                                                                                                                                                                                                                               \n    export interface HlsEncryptionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly constantInitializationVector?: string;\n                                                                                                                                                                                                                                                                                              \n        readonly encryptionMethod?: string;\n                                                                                                                                                                                                                                                                                                                \n        readonly spekeKeyProvider: CfnPackagingConfiguration.SpekeKeyProviderProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `HlsEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfiguration_HlsEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('constantInitializationVector', cdk.validateString)(properties.constantInitializationVector));\n    errors.collect(cdk.propertyValidator('encryptionMethod', cdk.validateString)(properties.encryptionMethod));\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', cdk.requiredValidator)(properties.spekeKeyProvider));\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', CfnPackagingConfiguration_SpekeKeyProviderPropertyValidator)(properties.spekeKeyProvider));\n    return errors.wrap('supplied properties not correct for \"HlsEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.HlsEncryption` resource\n *\n * @param properties - the TypeScript properties of a `HlsEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.HlsEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationHlsEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfiguration_HlsEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        ConstantInitializationVector: cdk.stringToCloudFormation(properties.constantInitializationVector),\n        EncryptionMethod: cdk.stringToCloudFormation(properties.encryptionMethod),\n        SpekeKeyProvider: cfnPackagingConfigurationSpekeKeyProviderPropertyToCloudFormation(properties.spekeKeyProvider),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationHlsEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfiguration.HlsEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfiguration.HlsEncryptionProperty>();\n    ret.addPropertyResult('constantInitializationVector', 'ConstantInitializationVector', properties.ConstantInitializationVector != null ? cfn_parse.FromCloudFormation.getString(properties.ConstantInitializationVector) : undefined);\n    ret.addPropertyResult('encryptionMethod', 'EncryptionMethod', properties.EncryptionMethod != null ? cfn_parse.FromCloudFormation.getString(properties.EncryptionMethod) : undefined);\n    ret.addPropertyResult('spekeKeyProvider', 'SpekeKeyProvider', CfnPackagingConfigurationSpekeKeyProviderPropertyFromCloudFormation(properties.SpekeKeyProvider));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPackagingConfiguration {\n                                                                                                                                                                                                                                                             \n    export interface HlsManifestProperty {\nn        readonly adMarkers?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly includeIframeOnlyStream?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly manifestName?: string;\nn        readonly programDateTimeIntervalSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly repeatExtXKey?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly streamSelection?: CfnPackagingConfiguration.StreamSelectionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsManifestProperty`\n *\n * @param properties - the TypeScript properties of a `HlsManifestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfiguration_HlsManifestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('adMarkers', cdk.validateString)(properties.adMarkers));\n    errors.collect(cdk.propertyValidator('includeIframeOnlyStream', cdk.validateBoolean)(properties.includeIframeOnlyStream));\n    errors.collect(cdk.propertyValidator('manifestName', cdk.validateString)(properties.manifestName));\n    errors.collect(cdk.propertyValidator('programDateTimeIntervalSeconds', cdk.validateNumber)(properties.programDateTimeIntervalSeconds));\n    errors.collect(cdk.propertyValidator('repeatExtXKey', cdk.validateBoolean)(properties.repeatExtXKey));\n    errors.collect(cdk.propertyValidator('streamSelection', CfnPackagingConfiguration_StreamSelectionPropertyValidator)(properties.streamSelection));\n    return errors.wrap('supplied properties not correct for \"HlsManifestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.HlsManifest` resource\n *\n * @param properties - the TypeScript properties of a `HlsManifestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.HlsManifest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationHlsManifestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfiguration_HlsManifestPropertyValidator(properties).assertSuccess();\n    return {\n        AdMarkers: cdk.stringToCloudFormation(properties.adMarkers),\n        IncludeIframeOnlyStream: cdk.booleanToCloudFormation(properties.includeIframeOnlyStream),\n        ManifestName: cdk.stringToCloudFormation(properties.manifestName),\n        ProgramDateTimeIntervalSeconds: cdk.numberToCloudFormation(properties.programDateTimeIntervalSeconds),\n        RepeatExtXKey: cdk.booleanToCloudFormation(properties.repeatExtXKey),\n        StreamSelection: cfnPackagingConfigurationStreamSelectionPropertyToCloudFormation(properties.streamSelection),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationHlsManifestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfiguration.HlsManifestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfiguration.HlsManifestProperty>();\n    ret.addPropertyResult('adMarkers', 'AdMarkers', properties.AdMarkers != null ? cfn_parse.FromCloudFormation.getString(properties.AdMarkers) : undefined);\n    ret.addPropertyResult('includeIframeOnlyStream', 'IncludeIframeOnlyStream', properties.IncludeIframeOnlyStream != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeIframeOnlyStream) : undefined);\n    ret.addPropertyResult('manifestName', 'ManifestName', properties.ManifestName != null ? cfn_parse.FromCloudFormation.getString(properties.ManifestName) : undefined);\n    ret.addPropertyResult('programDateTimeIntervalSeconds', 'ProgramDateTimeIntervalSeconds', properties.ProgramDateTimeIntervalSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProgramDateTimeIntervalSeconds) : undefined);\n    ret.addPropertyResult('repeatExtXKey', 'RepeatExtXKey', properties.RepeatExtXKey != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RepeatExtXKey) : undefined);\n    ret.addPropertyResult('streamSelection', 'StreamSelection', properties.StreamSelection != null ? CfnPackagingConfigurationStreamSelectionPropertyFromCloudFormation(properties.StreamSelection) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPackagingConfiguration {\n                                                                                                                                                                                                                                                                                                                    \n    export interface HlsPackageProperty {\n                                                                                                                                                                                                                                                                                                \n        readonly encryption?: CfnPackagingConfiguration.HlsEncryptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly hlsManifests: Array<CfnPackagingConfiguration.HlsManifestProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly segmentDurationSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly useAudioRenditionGroup?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HlsPackageProperty`\n *\n * @param properties - the TypeScript properties of a `HlsPackageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfiguration_HlsPackagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encryption', CfnPackagingConfiguration_HlsEncryptionPropertyValidator)(properties.encryption));\n    errors.collect(cdk.propertyValidator('hlsManifests', cdk.requiredValidator)(properties.hlsManifests));\n    errors.collect(cdk.propertyValidator('hlsManifests', cdk.listValidator(CfnPackagingConfiguration_HlsManifestPropertyValidator))(properties.hlsManifests));\n    errors.collect(cdk.propertyValidator('segmentDurationSeconds', cdk.validateNumber)(properties.segmentDurationSeconds));\n    errors.collect(cdk.propertyValidator('useAudioRenditionGroup', cdk.validateBoolean)(properties.useAudioRenditionGroup));\n    return errors.wrap('supplied properties not correct for \"HlsPackageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.HlsPackage` resource\n *\n * @param properties - the TypeScript properties of a `HlsPackageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.HlsPackage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationHlsPackagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfiguration_HlsPackagePropertyValidator(properties).assertSuccess();\n    return {\n        Encryption: cfnPackagingConfigurationHlsEncryptionPropertyToCloudFormation(properties.encryption),\n        HlsManifests: cdk.listMapper(cfnPackagingConfigurationHlsManifestPropertyToCloudFormation)(properties.hlsManifests),\n        SegmentDurationSeconds: cdk.numberToCloudFormation(properties.segmentDurationSeconds),\n        UseAudioRenditionGroup: cdk.booleanToCloudFormation(properties.useAudioRenditionGroup),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationHlsPackagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfiguration.HlsPackageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfiguration.HlsPackageProperty>();\n    ret.addPropertyResult('encryption', 'Encryption', properties.Encryption != null ? CfnPackagingConfigurationHlsEncryptionPropertyFromCloudFormation(properties.Encryption) : undefined);\n    ret.addPropertyResult('hlsManifests', 'HlsManifests', cfn_parse.FromCloudFormation.getArray(CfnPackagingConfigurationHlsManifestPropertyFromCloudFormation)(properties.HlsManifests));\n    ret.addPropertyResult('segmentDurationSeconds', 'SegmentDurationSeconds', properties.SegmentDurationSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentDurationSeconds) : undefined);\n    ret.addPropertyResult('useAudioRenditionGroup', 'UseAudioRenditionGroup', properties.UseAudioRenditionGroup != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UseAudioRenditionGroup) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPackagingConfiguration {\n                                                                                                                                                                                                                                                                                                                               \n    export interface MssEncryptionProperty {\n                                                                                                                                                                                                                                                                                                                \n        readonly spekeKeyProvider: CfnPackagingConfiguration.SpekeKeyProviderProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MssEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `MssEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfiguration_MssEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', cdk.requiredValidator)(properties.spekeKeyProvider));\n    errors.collect(cdk.propertyValidator('spekeKeyProvider', CfnPackagingConfiguration_SpekeKeyProviderPropertyValidator)(properties.spekeKeyProvider));\n    return errors.wrap('supplied properties not correct for \"MssEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.MssEncryption` resource\n *\n * @param properties - the TypeScript properties of a `MssEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.MssEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationMssEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfiguration_MssEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        SpekeKeyProvider: cfnPackagingConfigurationSpekeKeyProviderPropertyToCloudFormation(properties.spekeKeyProvider),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationMssEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfiguration.MssEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfiguration.MssEncryptionProperty>();\n    ret.addPropertyResult('spekeKeyProvider', 'SpekeKeyProvider', CfnPackagingConfigurationSpekeKeyProviderPropertyFromCloudFormation(properties.SpekeKeyProvider));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPackagingConfiguration {\n                                                                                                                                                                                                                                                                         \n    export interface MssManifestProperty {\n                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly manifestName?: string;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly streamSelection?: CfnPackagingConfiguration.StreamSelectionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MssManifestProperty`\n *\n * @param properties - the TypeScript properties of a `MssManifestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfiguration_MssManifestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('manifestName', cdk.validateString)(properties.manifestName));\n    errors.collect(cdk.propertyValidator('streamSelection', CfnPackagingConfiguration_StreamSelectionPropertyValidator)(properties.streamSelection));\n    return errors.wrap('supplied properties not correct for \"MssManifestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.MssManifest` resource\n *\n * @param properties - the TypeScript properties of a `MssManifestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.MssManifest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationMssManifestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfiguration_MssManifestPropertyValidator(properties).assertSuccess();\n    return {\n        ManifestName: cdk.stringToCloudFormation(properties.manifestName),\n        StreamSelection: cfnPackagingConfigurationStreamSelectionPropertyToCloudFormation(properties.streamSelection),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationMssManifestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfiguration.MssManifestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfiguration.MssManifestProperty>();\n    ret.addPropertyResult('manifestName', 'ManifestName', properties.ManifestName != null ? cfn_parse.FromCloudFormation.getString(properties.ManifestName) : undefined);\n    ret.addPropertyResult('streamSelection', 'StreamSelection', properties.StreamSelection != null ? CfnPackagingConfigurationStreamSelectionPropertyFromCloudFormation(properties.StreamSelection) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPackagingConfiguration {\n                                                                                                                                                                                                                                                                                                                           \n    export interface MssPackageProperty {\n                                                                                                                                                                                                                                                                                                \n        readonly encryption?: CfnPackagingConfiguration.MssEncryptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly mssManifests: Array<CfnPackagingConfiguration.MssManifestProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly segmentDurationSeconds?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MssPackageProperty`\n *\n * @param properties - the TypeScript properties of a `MssPackageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfiguration_MssPackagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encryption', CfnPackagingConfiguration_MssEncryptionPropertyValidator)(properties.encryption));\n    errors.collect(cdk.propertyValidator('mssManifests', cdk.requiredValidator)(properties.mssManifests));\n    errors.collect(cdk.propertyValidator('mssManifests', cdk.listValidator(CfnPackagingConfiguration_MssManifestPropertyValidator))(properties.mssManifests));\n    errors.collect(cdk.propertyValidator('segmentDurationSeconds', cdk.validateNumber)(properties.segmentDurationSeconds));\n    return errors.wrap('supplied properties not correct for \"MssPackageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.MssPackage` resource\n *\n * @param properties - the TypeScript properties of a `MssPackageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.MssPackage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationMssPackagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfiguration_MssPackagePropertyValidator(properties).assertSuccess();\n    return {\n        Encryption: cfnPackagingConfigurationMssEncryptionPropertyToCloudFormation(properties.encryption),\n        MssManifests: cdk.listMapper(cfnPackagingConfigurationMssManifestPropertyToCloudFormation)(properties.mssManifests),\n        SegmentDurationSeconds: cdk.numberToCloudFormation(properties.segmentDurationSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationMssPackagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfiguration.MssPackageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfiguration.MssPackageProperty>();\n    ret.addPropertyResult('encryption', 'Encryption', properties.Encryption != null ? CfnPackagingConfigurationMssEncryptionPropertyFromCloudFormation(properties.Encryption) : undefined);\n    ret.addPropertyResult('mssManifests', 'MssManifests', cfn_parse.FromCloudFormation.getArray(CfnPackagingConfigurationMssManifestPropertyFromCloudFormation)(properties.MssManifests));\n    ret.addPropertyResult('segmentDurationSeconds', 'SegmentDurationSeconds', properties.SegmentDurationSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.SegmentDurationSeconds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPackagingConfiguration {\n                                                                                                                                                                                                                                                                                                                                                                    \n    export interface SpekeKeyProviderProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly roleArn: string;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly systemIds: string[];\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly url: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SpekeKeyProviderProperty`\n *\n * @param properties - the TypeScript properties of a `SpekeKeyProviderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfiguration_SpekeKeyProviderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('systemIds', cdk.requiredValidator)(properties.systemIds));\n    errors.collect(cdk.propertyValidator('systemIds', cdk.listValidator(cdk.validateString))(properties.systemIds));\n    errors.collect(cdk.propertyValidator('url', cdk.requiredValidator)(properties.url));\n    errors.collect(cdk.propertyValidator('url', cdk.validateString)(properties.url));\n    return errors.wrap('supplied properties not correct for \"SpekeKeyProviderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.SpekeKeyProvider` resource\n *\n * @param properties - the TypeScript properties of a `SpekeKeyProviderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.SpekeKeyProvider` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationSpekeKeyProviderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfiguration_SpekeKeyProviderPropertyValidator(properties).assertSuccess();\n    return {\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        SystemIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.systemIds),\n        Url: cdk.stringToCloudFormation(properties.url),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationSpekeKeyProviderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfiguration.SpekeKeyProviderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfiguration.SpekeKeyProviderProperty>();\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('systemIds', 'SystemIds', cfn_parse.FromCloudFormation.getStringArray(properties.SystemIds));\n    ret.addPropertyResult('url', 'Url', cfn_parse.FromCloudFormation.getString(properties.Url));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPackagingConfiguration {\n                                                                                                                                                                                                                                                                                                        \n    export interface StreamSelectionProperty {\nn        readonly maxVideoBitsPerSecond?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly minVideoBitsPerSecond?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly streamOrder?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StreamSelectionProperty`\n *\n * @param properties - the TypeScript properties of a `StreamSelectionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingConfiguration_StreamSelectionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxVideoBitsPerSecond', cdk.validateNumber)(properties.maxVideoBitsPerSecond));\n    errors.collect(cdk.propertyValidator('minVideoBitsPerSecond', cdk.validateNumber)(properties.minVideoBitsPerSecond));\n    errors.collect(cdk.propertyValidator('streamOrder', cdk.validateString)(properties.streamOrder));\n    return errors.wrap('supplied properties not correct for \"StreamSelectionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.StreamSelection` resource\n *\n * @param properties - the TypeScript properties of a `StreamSelectionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingConfiguration.StreamSelection` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingConfigurationStreamSelectionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingConfiguration_StreamSelectionPropertyValidator(properties).assertSuccess();\n    return {\n        MaxVideoBitsPerSecond: cdk.numberToCloudFormation(properties.maxVideoBitsPerSecond),\n        MinVideoBitsPerSecond: cdk.numberToCloudFormation(properties.minVideoBitsPerSecond),\n        StreamOrder: cdk.stringToCloudFormation(properties.streamOrder),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingConfigurationStreamSelectionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingConfiguration.StreamSelectionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingConfiguration.StreamSelectionProperty>();\n    ret.addPropertyResult('maxVideoBitsPerSecond', 'MaxVideoBitsPerSecond', properties.MaxVideoBitsPerSecond != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxVideoBitsPerSecond) : undefined);\n    ret.addPropertyResult('minVideoBitsPerSecond', 'MinVideoBitsPerSecond', properties.MinVideoBitsPerSecond != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinVideoBitsPerSecond) : undefined);\n    ret.addPropertyResult('streamOrder', 'StreamOrder', properties.StreamOrder != null ? cfn_parse.FromCloudFormation.getString(properties.StreamOrder) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                     \nexport interface CfnPackagingGroupProps {\n\n                                                                                                                                                                                                                                                   \n    readonly id: string;\n\n                                                                                                                                                                                                                                      \n    readonly authorization?: CfnPackagingGroup.AuthorizationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                               \n    readonly egressAccessLogs?: CfnPackagingGroup.LogConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                      \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPackagingGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnPackagingGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('authorization', CfnPackagingGroup_AuthorizationPropertyValidator)(properties.authorization));\n    errors.collect(cdk.propertyValidator('egressAccessLogs', CfnPackagingGroup_LogConfigurationPropertyValidator)(properties.egressAccessLogs));\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnPackagingGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnPackagingGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingGroupPropsValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n        Authorization: cfnPackagingGroupAuthorizationPropertyToCloudFormation(properties.authorization),\n        EgressAccessLogs: cfnPackagingGroupLogConfigurationPropertyToCloudFormation(properties.egressAccessLogs),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingGroupProps>();\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('authorization', 'Authorization', properties.Authorization != null ? CfnPackagingGroupAuthorizationPropertyFromCloudFormation(properties.Authorization) : undefined);\n    ret.addPropertyResult('egressAccessLogs', 'EgressAccessLogs', properties.EgressAccessLogs != null ? CfnPackagingGroupLogConfigurationPropertyFromCloudFormation(properties.EgressAccessLogs) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPackagingGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::MediaPackage::PackagingGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPackagingGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPackagingGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPackagingGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                            \n    public readonly attrArn: string;\n\n                                                                                                                                       \n    public readonly attrDomainName: string;\n\n                                                                                                                                                                                                                                                   \n    public id: string;\n\n                                                                                                                                                                                                                                      \n    public authorization: CfnPackagingGroup.AuthorizationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                               \n    public egressAccessLogs: CfnPackagingGroup.LogConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                      \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnPackagingGroupProps) {\n        super(scope, id, { type: CfnPackagingGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'id', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrDomainName = cdk.Token.asString(this.getAtt('DomainName'));\n\n        this.id = props.id;\n        this.authorization = props.authorization;\n        this.egressAccessLogs = props.egressAccessLogs;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::MediaPackage::PackagingGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPackagingGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            id: this.id,\n            authorization: this.authorization,\n            egressAccessLogs: this.egressAccessLogs,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPackagingGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnPackagingGroup {\n                                                                                                                                                                                                                                                                  \n    export interface AuthorizationProperty {\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly cdnIdentifierSecret: string;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly secretsRoleArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AuthorizationProperty`\n *\n * @param properties - the TypeScript properties of a `AuthorizationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingGroup_AuthorizationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cdnIdentifierSecret', cdk.requiredValidator)(properties.cdnIdentifierSecret));\n    errors.collect(cdk.propertyValidator('cdnIdentifierSecret', cdk.validateString)(properties.cdnIdentifierSecret));\n    errors.collect(cdk.propertyValidator('secretsRoleArn', cdk.requiredValidator)(properties.secretsRoleArn));\n    errors.collect(cdk.propertyValidator('secretsRoleArn', cdk.validateString)(properties.secretsRoleArn));\n    return errors.wrap('supplied properties not correct for \"AuthorizationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingGroup.Authorization` resource\n *\n * @param properties - the TypeScript properties of a `AuthorizationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingGroup.Authorization` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingGroupAuthorizationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingGroup_AuthorizationPropertyValidator(properties).assertSuccess();\n    return {\n        CdnIdentifierSecret: cdk.stringToCloudFormation(properties.cdnIdentifierSecret),\n        SecretsRoleArn: cdk.stringToCloudFormation(properties.secretsRoleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingGroupAuthorizationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingGroup.AuthorizationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingGroup.AuthorizationProperty>();\n    ret.addPropertyResult('cdnIdentifierSecret', 'CdnIdentifierSecret', cfn_parse.FromCloudFormation.getString(properties.CdnIdentifierSecret));\n    ret.addPropertyResult('secretsRoleArn', 'SecretsRoleArn', cfn_parse.FromCloudFormation.getString(properties.SecretsRoleArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPackagingGroup {\n                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface LogConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly logGroupName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `LogConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPackagingGroup_LogConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('logGroupName', cdk.validateString)(properties.logGroupName));\n    return errors.wrap('supplied properties not correct for \"LogConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingGroup.LogConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `LogConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MediaPackage::PackagingGroup.LogConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPackagingGroupLogConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPackagingGroup_LogConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        LogGroupName: cdk.stringToCloudFormation(properties.logGroupName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPackagingGroupLogConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPackagingGroup.LogConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPackagingGroup.LogConfigurationProperty>();\n    ret.addPropertyResult('logGroupName', 'LogGroupName', properties.LogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.LogGroupName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
