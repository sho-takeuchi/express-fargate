{
  "version": 3,
  "sources": ["memorydb.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:32.679Z\",\"fingerprint\":\"sCIpNxk+vDUcYkivZIlewOp9R7TbfSFLmPzDoWAUUmE=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                           \nexport interface CfnACLProps {\n\n                                                                                                                                                                                                     \n    readonly aclName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                      \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                            \n    readonly userNames?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnACLProps`\n *\n * @param properties - the TypeScript properties of a `CfnACLProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnACLPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('aclName', cdk.requiredValidator)(properties.aclName));\n    errors.collect(cdk.propertyValidator('aclName', cdk.validateString)(properties.aclName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('userNames', cdk.listValidator(cdk.validateString))(properties.userNames));\n    return errors.wrap('supplied properties not correct for \"CfnACLProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MemoryDB::ACL` resource\n *\n * @param properties - the TypeScript properties of a `CfnACLProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MemoryDB::ACL` resource.\n */\n// @ts-ignore TS6133\nfunction cfnACLPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnACLPropsValidator(properties).assertSuccess();\n    return {\n        ACLName: cdk.stringToCloudFormation(properties.aclName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        UserNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.userNames),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnACLPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnACLProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnACLProps>();\n    ret.addPropertyResult('aclName', 'ACLName', cfn_parse.FromCloudFormation.getString(properties.ACLName));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('userNames', 'UserNames', properties.UserNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.UserNames) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport class CfnACL extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::MemoryDB::ACL\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnACL {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnACLPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnACL(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                      \n    public readonly attrArn: string;\n\n                                                                                                                                                                   \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                     \n    public aclName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                      \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                            \n    public userNames: string[] | undefined;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnACLProps) {\n        super(scope, id, { type: CfnACL.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'aclName', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.aclName = props.aclName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::MemoryDB::ACL\", props.tags, { tagPropertyName: 'tags' });\n        this.userNames = props.userNames;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnACL.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            aclName: this.aclName,\n            tags: this.tags.renderTags(),\n            userNames: this.userNames,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnACLPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                   \nexport interface CfnClusterProps {\n\n                                                                                                                                                                                                                                            \n    readonly aclName: string;\n\n                                                                                                                                                                                                      \n    readonly clusterName: string;\n\n                                                                                                                                                                                                   \n    readonly nodeType: string;\n\n                                                                                                                                                                                                                                                                                             \n    readonly autoMinorVersionUpgrade?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                           \n    readonly description?: string;\n\n                                                                                                                                                                                                                             \n    readonly engineVersion?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n    readonly finalSnapshotName?: string;\n\n                                                                                                                                                                                                                             \n    readonly kmsKeyId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly maintenanceWindow?: string;\n\n                                                                                                                                                                                                                                                                                                           \n    readonly numReplicasPerShard?: number;\n\n                                                                                                                                                                                                                \n    readonly numShards?: number;\n\n                                                                                                                                                                                                                                         \n    readonly parameterGroupName?: string;\n\n                                                                                                                                                                                                    \n    readonly port?: number;\n\n                                                                                                                                                                                                                                                 \n    readonly securityGroupIds?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly snapshotArns?: string[];\n\n                                                                                                                                                                                                                                                                                                                                       \n    readonly snapshotName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly snapshotRetentionLimit?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly snapshotWindow?: string;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    readonly snsTopicArn?: string;\n\n                                                                                                                                                                                                                                                \n    readonly snsTopicStatus?: string;\n\n                                                                                                                                                                                                                                   \n    readonly subnetGroupName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                   \n    readonly tlsEnabled?: boolean | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClusterProps`\n *\n * @param properties - the TypeScript properties of a `CfnClusterProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClusterPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('aclName', cdk.requiredValidator)(properties.aclName));\n    errors.collect(cdk.propertyValidator('aclName', cdk.validateString)(properties.aclName));\n    errors.collect(cdk.propertyValidator('autoMinorVersionUpgrade', cdk.validateBoolean)(properties.autoMinorVersionUpgrade));\n    errors.collect(cdk.propertyValidator('clusterName', cdk.requiredValidator)(properties.clusterName));\n    errors.collect(cdk.propertyValidator('clusterName', cdk.validateString)(properties.clusterName));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('engineVersion', cdk.validateString)(properties.engineVersion));\n    errors.collect(cdk.propertyValidator('finalSnapshotName', cdk.validateString)(properties.finalSnapshotName));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('maintenanceWindow', cdk.validateString)(properties.maintenanceWindow));\n    errors.collect(cdk.propertyValidator('nodeType', cdk.requiredValidator)(properties.nodeType));\n    errors.collect(cdk.propertyValidator('nodeType', cdk.validateString)(properties.nodeType));\n    errors.collect(cdk.propertyValidator('numReplicasPerShard', cdk.validateNumber)(properties.numReplicasPerShard));\n    errors.collect(cdk.propertyValidator('numShards', cdk.validateNumber)(properties.numShards));\n    errors.collect(cdk.propertyValidator('parameterGroupName', cdk.validateString)(properties.parameterGroupName));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('snapshotArns', cdk.listValidator(cdk.validateString))(properties.snapshotArns));\n    errors.collect(cdk.propertyValidator('snapshotName', cdk.validateString)(properties.snapshotName));\n    errors.collect(cdk.propertyValidator('snapshotRetentionLimit', cdk.validateNumber)(properties.snapshotRetentionLimit));\n    errors.collect(cdk.propertyValidator('snapshotWindow', cdk.validateString)(properties.snapshotWindow));\n    errors.collect(cdk.propertyValidator('snsTopicArn', cdk.validateString)(properties.snsTopicArn));\n    errors.collect(cdk.propertyValidator('snsTopicStatus', cdk.validateString)(properties.snsTopicStatus));\n    errors.collect(cdk.propertyValidator('subnetGroupName', cdk.validateString)(properties.subnetGroupName));\n    errors.collect(cdk.propertyValidator('tlsEnabled', cdk.validateBoolean)(properties.tlsEnabled));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnClusterProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MemoryDB::Cluster` resource\n *\n * @param properties - the TypeScript properties of a `CfnClusterProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MemoryDB::Cluster` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClusterPropsValidator(properties).assertSuccess();\n    return {\n        ACLName: cdk.stringToCloudFormation(properties.aclName),\n        ClusterName: cdk.stringToCloudFormation(properties.clusterName),\n        NodeType: cdk.stringToCloudFormation(properties.nodeType),\n        AutoMinorVersionUpgrade: cdk.booleanToCloudFormation(properties.autoMinorVersionUpgrade),\n        Description: cdk.stringToCloudFormation(properties.description),\n        EngineVersion: cdk.stringToCloudFormation(properties.engineVersion),\n        FinalSnapshotName: cdk.stringToCloudFormation(properties.finalSnapshotName),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        MaintenanceWindow: cdk.stringToCloudFormation(properties.maintenanceWindow),\n        NumReplicasPerShard: cdk.numberToCloudFormation(properties.numReplicasPerShard),\n        NumShards: cdk.numberToCloudFormation(properties.numShards),\n        ParameterGroupName: cdk.stringToCloudFormation(properties.parameterGroupName),\n        Port: cdk.numberToCloudFormation(properties.port),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SnapshotArns: cdk.listMapper(cdk.stringToCloudFormation)(properties.snapshotArns),\n        SnapshotName: cdk.stringToCloudFormation(properties.snapshotName),\n        SnapshotRetentionLimit: cdk.numberToCloudFormation(properties.snapshotRetentionLimit),\n        SnapshotWindow: cdk.stringToCloudFormation(properties.snapshotWindow),\n        SnsTopicArn: cdk.stringToCloudFormation(properties.snsTopicArn),\n        SnsTopicStatus: cdk.stringToCloudFormation(properties.snsTopicStatus),\n        SubnetGroupName: cdk.stringToCloudFormation(properties.subnetGroupName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TLSEnabled: cdk.booleanToCloudFormation(properties.tlsEnabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClusterProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClusterProps>();\n    ret.addPropertyResult('aclName', 'ACLName', cfn_parse.FromCloudFormation.getString(properties.ACLName));\n    ret.addPropertyResult('clusterName', 'ClusterName', cfn_parse.FromCloudFormation.getString(properties.ClusterName));\n    ret.addPropertyResult('nodeType', 'NodeType', cfn_parse.FromCloudFormation.getString(properties.NodeType));\n    ret.addPropertyResult('autoMinorVersionUpgrade', 'AutoMinorVersionUpgrade', properties.AutoMinorVersionUpgrade != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AutoMinorVersionUpgrade) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('engineVersion', 'EngineVersion', properties.EngineVersion != null ? cfn_parse.FromCloudFormation.getString(properties.EngineVersion) : undefined);\n    ret.addPropertyResult('finalSnapshotName', 'FinalSnapshotName', properties.FinalSnapshotName != null ? cfn_parse.FromCloudFormation.getString(properties.FinalSnapshotName) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('maintenanceWindow', 'MaintenanceWindow', properties.MaintenanceWindow != null ? cfn_parse.FromCloudFormation.getString(properties.MaintenanceWindow) : undefined);\n    ret.addPropertyResult('numReplicasPerShard', 'NumReplicasPerShard', properties.NumReplicasPerShard != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumReplicasPerShard) : undefined);\n    ret.addPropertyResult('numShards', 'NumShards', properties.NumShards != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumShards) : undefined);\n    ret.addPropertyResult('parameterGroupName', 'ParameterGroupName', properties.ParameterGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.ParameterGroupName) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('snapshotArns', 'SnapshotArns', properties.SnapshotArns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SnapshotArns) : undefined);\n    ret.addPropertyResult('snapshotName', 'SnapshotName', properties.SnapshotName != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotName) : undefined);\n    ret.addPropertyResult('snapshotRetentionLimit', 'SnapshotRetentionLimit', properties.SnapshotRetentionLimit != null ? cfn_parse.FromCloudFormation.getNumber(properties.SnapshotRetentionLimit) : undefined);\n    ret.addPropertyResult('snapshotWindow', 'SnapshotWindow', properties.SnapshotWindow != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotWindow) : undefined);\n    ret.addPropertyResult('snsTopicArn', 'SnsTopicArn', properties.SnsTopicArn != null ? cfn_parse.FromCloudFormation.getString(properties.SnsTopicArn) : undefined);\n    ret.addPropertyResult('snsTopicStatus', 'SnsTopicStatus', properties.SnsTopicStatus != null ? cfn_parse.FromCloudFormation.getString(properties.SnsTopicStatus) : undefined);\n    ret.addPropertyResult('subnetGroupName', 'SubnetGroupName', properties.SubnetGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetGroupName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('tlsEnabled', 'TLSEnabled', properties.TLSEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.TLSEnabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                   \nexport class CfnCluster extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::MemoryDB::Cluster\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCluster {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClusterPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCluster(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                   \n    public readonly attrArn: string;\n\n                                                                                                                                    \n    public readonly attrClusterEndpointAddress: string;\n\n                                                                                                                                \n    public readonly attrClusterEndpointPort: number;\n\n                                                                                                                                                                        \n    public readonly attrParameterGroupStatus: string;\n\n                                                                                                                                            \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                            \n    public aclName: string;\n\n                                                                                                                                                                                                      \n    public clusterName: string;\n\n                                                                                                                                                                                                   \n    public nodeType: string;\n\n                                                                                                                                                                                                                                                                                             \n    public autoMinorVersionUpgrade: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                           \n    public description: string | undefined;\n\n                                                                                                                                                                                                                             \n    public engineVersion: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n    public finalSnapshotName: string | undefined;\n\n                                                                                                                                                                                                                             \n    public kmsKeyId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public maintenanceWindow: string | undefined;\n\n                                                                                                                                                                                                                                                                                                           \n    public numReplicasPerShard: number | undefined;\n\n                                                                                                                                                                                                                \n    public numShards: number | undefined;\n\n                                                                                                                                                                                                                                         \n    public parameterGroupName: string | undefined;\n\n                                                                                                                                                                                                    \n    public port: number | undefined;\n\n                                                                                                                                                                                                                                                 \n    public securityGroupIds: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                \n    public snapshotArns: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                       \n    public snapshotName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public snapshotRetentionLimit: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                      \n    public snapshotWindow: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    public snsTopicArn: string | undefined;\n\n                                                                                                                                                                                                                                                \n    public snsTopicStatus: string | undefined;\n\n                                                                                                                                                                                                                                   \n    public subnetGroupName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                   \n    public tlsEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnClusterProps) {\n        super(scope, id, { type: CfnCluster.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'aclName', this);\n        cdk.requireProperty(props, 'clusterName', this);\n        cdk.requireProperty(props, 'nodeType', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('ARN'));\n        this.attrClusterEndpointAddress = cdk.Token.asString(this.getAtt('ClusterEndpoint.Address'));\n        this.attrClusterEndpointPort = cdk.Token.asNumber(this.getAtt('ClusterEndpoint.Port'));\n        this.attrParameterGroupStatus = cdk.Token.asString(this.getAtt('ParameterGroupStatus'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.aclName = props.aclName;\n        this.clusterName = props.clusterName;\n        this.nodeType = props.nodeType;\n        this.autoMinorVersionUpgrade = props.autoMinorVersionUpgrade;\n        this.description = props.description;\n        this.engineVersion = props.engineVersion;\n        this.finalSnapshotName = props.finalSnapshotName;\n        this.kmsKeyId = props.kmsKeyId;\n        this.maintenanceWindow = props.maintenanceWindow;\n        this.numReplicasPerShard = props.numReplicasPerShard;\n        this.numShards = props.numShards;\n        this.parameterGroupName = props.parameterGroupName;\n        this.port = props.port;\n        this.securityGroupIds = props.securityGroupIds;\n        this.snapshotArns = props.snapshotArns;\n        this.snapshotName = props.snapshotName;\n        this.snapshotRetentionLimit = props.snapshotRetentionLimit;\n        this.snapshotWindow = props.snapshotWindow;\n        this.snsTopicArn = props.snsTopicArn;\n        this.snsTopicStatus = props.snsTopicStatus;\n        this.subnetGroupName = props.subnetGroupName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::MemoryDB::Cluster\", props.tags, { tagPropertyName: 'tags' });\n        this.tlsEnabled = props.tlsEnabled;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCluster.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            aclName: this.aclName,\n            clusterName: this.clusterName,\n            nodeType: this.nodeType,\n            autoMinorVersionUpgrade: this.autoMinorVersionUpgrade,\n            description: this.description,\n            engineVersion: this.engineVersion,\n            finalSnapshotName: this.finalSnapshotName,\n            kmsKeyId: this.kmsKeyId,\n            maintenanceWindow: this.maintenanceWindow,\n            numReplicasPerShard: this.numReplicasPerShard,\n            numShards: this.numShards,\n            parameterGroupName: this.parameterGroupName,\n            port: this.port,\n            securityGroupIds: this.securityGroupIds,\n            snapshotArns: this.snapshotArns,\n            snapshotName: this.snapshotName,\n            snapshotRetentionLimit: this.snapshotRetentionLimit,\n            snapshotWindow: this.snapshotWindow,\n            snsTopicArn: this.snsTopicArn,\n            snsTopicStatus: this.snsTopicStatus,\n            subnetGroupName: this.subnetGroupName,\n            tags: this.tags.renderTags(),\n            tlsEnabled: this.tlsEnabled,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClusterPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCluster {\n                                                                                                                                                                                                                                                                                                        \n    export interface EndpointProperty {\n                                                                                                                                                                                                                                              \n        readonly address?: string;\n                                                                                                                                                                                                                                                              \n        readonly port?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EndpointProperty`\n *\n * @param properties - the TypeScript properties of a `EndpointProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_EndpointPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('address', cdk.validateString)(properties.address));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"EndpointProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MemoryDB::Cluster.Endpoint` resource\n *\n * @param properties - the TypeScript properties of a `EndpointProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MemoryDB::Cluster.Endpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterEndpointPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_EndpointPropertyValidator(properties).assertSuccess();\n    return {\n        Address: cdk.stringToCloudFormation(properties.address),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterEndpointPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.EndpointProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.EndpointProperty>();\n    ret.addPropertyResult('address', 'Address', properties.Address != null ? cfn_parse.FromCloudFormation.getString(properties.Address) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                 \nexport interface CfnParameterGroupProps {\n\n                                                                                                                                                                                                                                                                          \n    readonly family: string;\n\n                                                                                                                                                                                                                                  \n    readonly parameterGroupName: string;\n\n                                                                                                                                                                                                                                \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                      \n    readonly parameters?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnParameterGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnParameterGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnParameterGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('family', cdk.requiredValidator)(properties.family));\n    errors.collect(cdk.propertyValidator('family', cdk.validateString)(properties.family));\n    errors.collect(cdk.propertyValidator('parameterGroupName', cdk.requiredValidator)(properties.parameterGroupName));\n    errors.collect(cdk.propertyValidator('parameterGroupName', cdk.validateString)(properties.parameterGroupName));\n    errors.collect(cdk.propertyValidator('parameters', cdk.validateObject)(properties.parameters));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnParameterGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MemoryDB::ParameterGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnParameterGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MemoryDB::ParameterGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnParameterGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnParameterGroupPropsValidator(properties).assertSuccess();\n    return {\n        Family: cdk.stringToCloudFormation(properties.family),\n        ParameterGroupName: cdk.stringToCloudFormation(properties.parameterGroupName),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Parameters: cdk.objectToCloudFormation(properties.parameters),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnParameterGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnParameterGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnParameterGroupProps>();\n    ret.addPropertyResult('family', 'Family', cfn_parse.FromCloudFormation.getString(properties.Family));\n    ret.addPropertyResult('parameterGroupName', 'ParameterGroupName', cfn_parse.FromCloudFormation.getString(properties.ParameterGroupName));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnParameterGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::MemoryDB::ParameterGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnParameterGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnParameterGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnParameterGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                         \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                          \n    public family: string;\n\n                                                                                                                                                                                                                                  \n    public parameterGroupName: string;\n\n                                                                                                                                                                                                                                \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                      \n    public parameters: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnParameterGroupProps) {\n        super(scope, id, { type: CfnParameterGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'family', this);\n        cdk.requireProperty(props, 'parameterGroupName', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('ARN'));\n\n        this.family = props.family;\n        this.parameterGroupName = props.parameterGroupName;\n        this.description = props.description;\n        this.parameters = props.parameters;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::MemoryDB::ParameterGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnParameterGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            family: this.family,\n            parameterGroupName: this.parameterGroupName,\n            description: this.description,\n            parameters: this.parameters,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnParameterGroupPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                           \nexport interface CfnSubnetGroupProps {\n\n                                                                                                                                                                                                                                                  \n    readonly subnetGroupName: string;\n\n                                                                                                                                                                                                                                        \n    readonly subnetIds: string[];\n\n                                                                                                                                                                                                                       \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSubnetGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnSubnetGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSubnetGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('subnetGroupName', cdk.requiredValidator)(properties.subnetGroupName));\n    errors.collect(cdk.propertyValidator('subnetGroupName', cdk.validateString)(properties.subnetGroupName));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.requiredValidator)(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnSubnetGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MemoryDB::SubnetGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnSubnetGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MemoryDB::SubnetGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSubnetGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSubnetGroupPropsValidator(properties).assertSuccess();\n    return {\n        SubnetGroupName: cdk.stringToCloudFormation(properties.subnetGroupName),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSubnetGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSubnetGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSubnetGroupProps>();\n    ret.addPropertyResult('subnetGroupName', 'SubnetGroupName', cfn_parse.FromCloudFormation.getString(properties.SubnetGroupName));\n    ret.addPropertyResult('subnetIds', 'SubnetIds', cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSubnetGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::MemoryDB::SubnetGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSubnetGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSubnetGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSubnetGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                  \n    public subnetGroupName: string;\n\n                                                                                                                                                                                                                                        \n    public subnetIds: string[];\n\n                                                                                                                                                                                                                       \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                      \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnSubnetGroupProps) {\n        super(scope, id, { type: CfnSubnetGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'subnetGroupName', this);\n        cdk.requireProperty(props, 'subnetIds', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('ARN'));\n\n        this.subnetGroupName = props.subnetGroupName;\n        this.subnetIds = props.subnetIds;\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::MemoryDB::SubnetGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSubnetGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            subnetGroupName: this.subnetGroupName,\n            subnetIds: this.subnetIds,\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSubnetGroupPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                             \nexport interface CfnUserProps {\n\n                                                                                                                                                                                                                     \n    readonly accessString: string;\n\n                                                                                                                                                                                                                                           \n    readonly authenticationMode: any | cdk.IResolvable;\n\n                                                                                                                                                                                         \n    readonly userName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessString', cdk.requiredValidator)(properties.accessString));\n    errors.collect(cdk.propertyValidator('accessString', cdk.validateString)(properties.accessString));\n    errors.collect(cdk.propertyValidator('authenticationMode', cdk.requiredValidator)(properties.authenticationMode));\n    errors.collect(cdk.propertyValidator('authenticationMode', cdk.validateObject)(properties.authenticationMode));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('userName', cdk.requiredValidator)(properties.userName));\n    errors.collect(cdk.propertyValidator('userName', cdk.validateString)(properties.userName));\n    return errors.wrap('supplied properties not correct for \"CfnUserProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::MemoryDB::User` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::MemoryDB::User` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPropsValidator(properties).assertSuccess();\n    return {\n        AccessString: cdk.stringToCloudFormation(properties.accessString),\n        AuthenticationMode: cdk.objectToCloudFormation(properties.authenticationMode),\n        UserName: cdk.stringToCloudFormation(properties.userName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProps>();\n    ret.addPropertyResult('accessString', 'AccessString', cfn_parse.FromCloudFormation.getString(properties.AccessString));\n    ret.addPropertyResult('authenticationMode', 'AuthenticationMode', cfn_parse.FromCloudFormation.getAny(properties.AuthenticationMode));\n    ret.addPropertyResult('userName', 'UserName', cfn_parse.FromCloudFormation.getString(properties.UserName));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnUser extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::MemoryDB::User\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUser {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUser(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                       \n    public readonly attrArn: string;\n\n                                                                                                                                                           \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                     \n    public accessString: string;\n\n                                                                                                                                                                                                                                           \n    public authenticationMode: any | cdk.IResolvable;\n\n                                                                                                                                                                                         \n    public userName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnUserProps) {\n        super(scope, id, { type: CfnUser.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'accessString', this);\n        cdk.requireProperty(props, 'authenticationMode', this);\n        cdk.requireProperty(props, 'userName', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.accessString = props.accessString;\n        this.authenticationMode = props.authenticationMode;\n        this.userName = props.userName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::MemoryDB::User\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUser.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            accessString: this.accessString,\n            authenticationMode: this.authenticationMode,\n            userName: this.userName,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
