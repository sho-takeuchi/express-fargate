{
  "version": 3,
  "sources": ["networkmanager.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:32.779Z\",\"fingerprint\":\"Il2+7rIY6hCvTjTmI3gU/xLpuXJq4HIjJk30TKRjjkU=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                                               \nexport interface CfnCustomerGatewayAssociationProps {\n\n                                                                                                                                                                                                                                                                                             \n    readonly customerGatewayArn: string;\n\n                                                                                                                                                                                                                                                 \n    readonly deviceId: string;\n\n                                                                                                                                                                                                                                                                \n    readonly globalNetworkId: string;\n\n                                                                                                                                                                                                                                             \n    readonly linkId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCustomerGatewayAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnCustomerGatewayAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCustomerGatewayAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('customerGatewayArn', cdk.requiredValidator)(properties.customerGatewayArn));\n    errors.collect(cdk.propertyValidator('customerGatewayArn', cdk.validateString)(properties.customerGatewayArn));\n    errors.collect(cdk.propertyValidator('deviceId', cdk.requiredValidator)(properties.deviceId));\n    errors.collect(cdk.propertyValidator('deviceId', cdk.validateString)(properties.deviceId));\n    errors.collect(cdk.propertyValidator('globalNetworkId', cdk.requiredValidator)(properties.globalNetworkId));\n    errors.collect(cdk.propertyValidator('globalNetworkId', cdk.validateString)(properties.globalNetworkId));\n    errors.collect(cdk.propertyValidator('linkId', cdk.validateString)(properties.linkId));\n    return errors.wrap('supplied properties not correct for \"CfnCustomerGatewayAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::NetworkManager::CustomerGatewayAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnCustomerGatewayAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::NetworkManager::CustomerGatewayAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCustomerGatewayAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCustomerGatewayAssociationPropsValidator(properties).assertSuccess();\n    return {\n        CustomerGatewayArn: cdk.stringToCloudFormation(properties.customerGatewayArn),\n        DeviceId: cdk.stringToCloudFormation(properties.deviceId),\n        GlobalNetworkId: cdk.stringToCloudFormation(properties.globalNetworkId),\n        LinkId: cdk.stringToCloudFormation(properties.linkId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCustomerGatewayAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCustomerGatewayAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCustomerGatewayAssociationProps>();\n    ret.addPropertyResult('customerGatewayArn', 'CustomerGatewayArn', cfn_parse.FromCloudFormation.getString(properties.CustomerGatewayArn));\n    ret.addPropertyResult('deviceId', 'DeviceId', cfn_parse.FromCloudFormation.getString(properties.DeviceId));\n    ret.addPropertyResult('globalNetworkId', 'GlobalNetworkId', cfn_parse.FromCloudFormation.getString(properties.GlobalNetworkId));\n    ret.addPropertyResult('linkId', 'LinkId', properties.LinkId != null ? cfn_parse.FromCloudFormation.getString(properties.LinkId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCustomerGatewayAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::NetworkManager::CustomerGatewayAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCustomerGatewayAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCustomerGatewayAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCustomerGatewayAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                             \n    public customerGatewayArn: string;\n\n                                                                                                                                                                                                                                                 \n    public deviceId: string;\n\n                                                                                                                                                                                                                                                                \n    public globalNetworkId: string;\n\n                                                                                                                                                                                                                                             \n    public linkId: string | undefined;\n\n                                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnCustomerGatewayAssociationProps) {\n        super(scope, id, { type: CfnCustomerGatewayAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'customerGatewayArn', this);\n        cdk.requireProperty(props, 'deviceId', this);\n        cdk.requireProperty(props, 'globalNetworkId', this);\n\n        this.customerGatewayArn = props.customerGatewayArn;\n        this.deviceId = props.deviceId;\n        this.globalNetworkId = props.globalNetworkId;\n        this.linkId = props.linkId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCustomerGatewayAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            customerGatewayArn: this.customerGatewayArn,\n            deviceId: this.deviceId,\n            globalNetworkId: this.globalNetworkId,\n            linkId: this.linkId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCustomerGatewayAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                       \nexport interface CfnDeviceProps {\n\n                                                                                                                                                                                                                        \n    readonly globalNetworkId: string;\n\n                                                                                                                                                                                                                                                                                \n    readonly description?: string;\n\n                                                                                                                                                                                                      \n    readonly location?: CfnDevice.LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                      \n    readonly model?: string;\n\n                                                                                                                                                                                                                                                                                     \n    readonly serialNumber?: string;\n\n                                                                                                                                                                                              \n    readonly siteId?: string;\n\n                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                \n    readonly type?: string;\n\n                                                                                                                                                                                                                                                                        \n    readonly vendor?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDeviceProps`\n *\n * @param properties - the TypeScript properties of a `CfnDeviceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDevicePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('globalNetworkId', cdk.requiredValidator)(properties.globalNetworkId));\n    errors.collect(cdk.propertyValidator('globalNetworkId', cdk.validateString)(properties.globalNetworkId));\n    errors.collect(cdk.propertyValidator('location', CfnDevice_LocationPropertyValidator)(properties.location));\n    errors.collect(cdk.propertyValidator('model', cdk.validateString)(properties.model));\n    errors.collect(cdk.propertyValidator('serialNumber', cdk.validateString)(properties.serialNumber));\n    errors.collect(cdk.propertyValidator('siteId', cdk.validateString)(properties.siteId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('vendor', cdk.validateString)(properties.vendor));\n    return errors.wrap('supplied properties not correct for \"CfnDeviceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::NetworkManager::Device` resource\n *\n * @param properties - the TypeScript properties of a `CfnDeviceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::NetworkManager::Device` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDevicePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDevicePropsValidator(properties).assertSuccess();\n    return {\n        GlobalNetworkId: cdk.stringToCloudFormation(properties.globalNetworkId),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Location: cfnDeviceLocationPropertyToCloudFormation(properties.location),\n        Model: cdk.stringToCloudFormation(properties.model),\n        SerialNumber: cdk.stringToCloudFormation(properties.serialNumber),\n        SiteId: cdk.stringToCloudFormation(properties.siteId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Type: cdk.stringToCloudFormation(properties.type),\n        Vendor: cdk.stringToCloudFormation(properties.vendor),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDevicePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeviceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeviceProps>();\n    ret.addPropertyResult('globalNetworkId', 'GlobalNetworkId', cfn_parse.FromCloudFormation.getString(properties.GlobalNetworkId));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('location', 'Location', properties.Location != null ? CfnDeviceLocationPropertyFromCloudFormation(properties.Location) : undefined);\n    ret.addPropertyResult('model', 'Model', properties.Model != null ? cfn_parse.FromCloudFormation.getString(properties.Model) : undefined);\n    ret.addPropertyResult('serialNumber', 'SerialNumber', properties.SerialNumber != null ? cfn_parse.FromCloudFormation.getString(properties.SerialNumber) : undefined);\n    ret.addPropertyResult('siteId', 'SiteId', properties.SiteId != null ? cfn_parse.FromCloudFormation.getString(properties.SiteId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('vendor', 'Vendor', properties.Vendor != null ? cfn_parse.FromCloudFormation.getString(properties.Vendor) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                      \nexport class CfnDevice extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::NetworkManager::Device\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDevice {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDevicePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDevice(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                              \n    public readonly attrDeviceArn: string;\n\n                                                                                                                               \n    public readonly attrDeviceId: string;\n\n                                                                                                                                                                                                                        \n    public globalNetworkId: string;\n\n                                                                                                                                                                                                                                                                                \n    public description: string | undefined;\n\n                                                                                                                                                                                                      \n    public location: CfnDevice.LocationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                      \n    public model: string | undefined;\n\n                                                                                                                                                                                                                                                                                     \n    public serialNumber: string | undefined;\n\n                                                                                                                                                                                              \n    public siteId: string | undefined;\n\n                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                \n    public type: string | undefined;\n\n                                                                                                                                                                                                                                                                        \n    public vendor: string | undefined;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnDeviceProps) {\n        super(scope, id, { type: CfnDevice.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'globalNetworkId', this);\n        this.attrDeviceArn = cdk.Token.asString(this.getAtt('DeviceArn'));\n        this.attrDeviceId = cdk.Token.asString(this.getAtt('DeviceId'));\n\n        this.globalNetworkId = props.globalNetworkId;\n        this.description = props.description;\n        this.location = props.location;\n        this.model = props.model;\n        this.serialNumber = props.serialNumber;\n        this.siteId = props.siteId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::NetworkManager::Device\", props.tags, { tagPropertyName: 'tags' });\n        this.type = props.type;\n        this.vendor = props.vendor;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDevice.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            globalNetworkId: this.globalNetworkId,\n            description: this.description,\n            location: this.location,\n            model: this.model,\n            serialNumber: this.serialNumber,\n            siteId: this.siteId,\n            tags: this.tags.renderTags(),\n            type: this.type,\n            vendor: this.vendor,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDevicePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDevice {\n                                                                                                                                                                                                                                  \n    export interface LocationProperty {\n                                                                                                                                                                                                                                                \n        readonly address?: string;\n                                                                                                                                                                                                                                         \n        readonly latitude?: string;\n                                                                                                                                                                                                                                           \n        readonly longitude?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LocationProperty`\n *\n * @param properties - the TypeScript properties of a `LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDevice_LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('address', cdk.validateString)(properties.address));\n    errors.collect(cdk.propertyValidator('latitude', cdk.validateString)(properties.latitude));\n    errors.collect(cdk.propertyValidator('longitude', cdk.validateString)(properties.longitude));\n    return errors.wrap('supplied properties not correct for \"LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::NetworkManager::Device.Location` resource\n *\n * @param properties - the TypeScript properties of a `LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::NetworkManager::Device.Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeviceLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDevice_LocationPropertyValidator(properties).assertSuccess();\n    return {\n        Address: cdk.stringToCloudFormation(properties.address),\n        Latitude: cdk.stringToCloudFormation(properties.latitude),\n        Longitude: cdk.stringToCloudFormation(properties.longitude),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeviceLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDevice.LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDevice.LocationProperty>();\n    ret.addPropertyResult('address', 'Address', properties.Address != null ? cfn_parse.FromCloudFormation.getString(properties.Address) : undefined);\n    ret.addPropertyResult('latitude', 'Latitude', properties.Latitude != null ? cfn_parse.FromCloudFormation.getString(properties.Latitude) : undefined);\n    ret.addPropertyResult('longitude', 'Longitude', properties.Longitude != null ? cfn_parse.FromCloudFormation.getString(properties.Longitude) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                     \nexport interface CfnGlobalNetworkProps {\n\n                                                                                                                                                                                                                                                                                                      \n    readonly description?: string;\n\n                                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnGlobalNetworkProps`\n *\n * @param properties - the TypeScript properties of a `CfnGlobalNetworkProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnGlobalNetworkPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnGlobalNetworkProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::NetworkManager::GlobalNetwork` resource\n *\n * @param properties - the TypeScript properties of a `CfnGlobalNetworkProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::NetworkManager::GlobalNetwork` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGlobalNetworkPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGlobalNetworkPropsValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGlobalNetworkPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGlobalNetworkProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGlobalNetworkProps>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                            \nexport class CfnGlobalNetwork extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::NetworkManager::GlobalNetwork\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnGlobalNetwork {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnGlobalNetworkPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnGlobalNetwork(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                               \n    public readonly attrArn: string;\n\n                                                                                                                                         \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                      \n    public description: string | undefined;\n\n                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnGlobalNetworkProps = {}) {\n        super(scope, id, { type: CfnGlobalNetwork.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::NetworkManager::GlobalNetwork\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnGlobalNetwork.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnGlobalNetworkPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                   \nexport interface CfnLinkProps {\n\n                                                                                                                                                                                                            \n    readonly bandwidth: CfnLink.BandwidthProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                    \n    readonly globalNetworkId: string;\n\n                                                                                                                                                                                                 \n    readonly siteId: string;\n\n                                                                                                                                                                                                                                                                          \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                     \n    readonly provider?: string;\n\n                                                                                                                                                                                                  \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                             \n    readonly type?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLinkProps`\n *\n * @param properties - the TypeScript properties of a `CfnLinkProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLinkPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bandwidth', cdk.requiredValidator)(properties.bandwidth));\n    errors.collect(cdk.propertyValidator('bandwidth', CfnLink_BandwidthPropertyValidator)(properties.bandwidth));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('globalNetworkId', cdk.requiredValidator)(properties.globalNetworkId));\n    errors.collect(cdk.propertyValidator('globalNetworkId', cdk.validateString)(properties.globalNetworkId));\n    errors.collect(cdk.propertyValidator('provider', cdk.validateString)(properties.provider));\n    errors.collect(cdk.propertyValidator('siteId', cdk.requiredValidator)(properties.siteId));\n    errors.collect(cdk.propertyValidator('siteId', cdk.validateString)(properties.siteId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"CfnLinkProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::NetworkManager::Link` resource\n *\n * @param properties - the TypeScript properties of a `CfnLinkProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::NetworkManager::Link` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLinkPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLinkPropsValidator(properties).assertSuccess();\n    return {\n        Bandwidth: cfnLinkBandwidthPropertyToCloudFormation(properties.bandwidth),\n        GlobalNetworkId: cdk.stringToCloudFormation(properties.globalNetworkId),\n        SiteId: cdk.stringToCloudFormation(properties.siteId),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Provider: cdk.stringToCloudFormation(properties.provider),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLinkPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLinkProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLinkProps>();\n    ret.addPropertyResult('bandwidth', 'Bandwidth', CfnLinkBandwidthPropertyFromCloudFormation(properties.Bandwidth));\n    ret.addPropertyResult('globalNetworkId', 'GlobalNetworkId', cfn_parse.FromCloudFormation.getString(properties.GlobalNetworkId));\n    ret.addPropertyResult('siteId', 'SiteId', cfn_parse.FromCloudFormation.getString(properties.SiteId));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('provider', 'Provider', properties.Provider != null ? cfn_parse.FromCloudFormation.getString(properties.Provider) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                         \nexport class CfnLink extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::NetworkManager::Link\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLink {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLinkPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLink(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                      \n    public readonly attrLinkArn: string;\n\n                                                                                                                         \n    public readonly attrLinkId: string;\n\n                                                                                                                                                                                                            \n    public bandwidth: CfnLink.BandwidthProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                    \n    public globalNetworkId: string;\n\n                                                                                                                                                                                                 \n    public siteId: string;\n\n                                                                                                                                                                                                                                                                          \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                     \n    public provider: string | undefined;\n\n                                                                                                                                                                                                  \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                             \n    public type: string | undefined;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnLinkProps) {\n        super(scope, id, { type: CfnLink.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'bandwidth', this);\n        cdk.requireProperty(props, 'globalNetworkId', this);\n        cdk.requireProperty(props, 'siteId', this);\n        this.attrLinkArn = cdk.Token.asString(this.getAtt('LinkArn'));\n        this.attrLinkId = cdk.Token.asString(this.getAtt('LinkId'));\n\n        this.bandwidth = props.bandwidth;\n        this.globalNetworkId = props.globalNetworkId;\n        this.siteId = props.siteId;\n        this.description = props.description;\n        this.provider = props.provider;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::NetworkManager::Link\", props.tags, { tagPropertyName: 'tags' });\n        this.type = props.type;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLink.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            bandwidth: this.bandwidth,\n            globalNetworkId: this.globalNetworkId,\n            siteId: this.siteId,\n            description: this.description,\n            provider: this.provider,\n            tags: this.tags.renderTags(),\n            type: this.type,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLinkPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnLink {\n                                                                                                                                                                                                                                            \n    export interface BandwidthProperty {\n                                                                                                                                                                                                                                                      \n        readonly downloadSpeed?: number;\n                                                                                                                                                                                                                                                  \n        readonly uploadSpeed?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BandwidthProperty`\n *\n * @param properties - the TypeScript properties of a `BandwidthProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnLink_BandwidthPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('downloadSpeed', cdk.validateNumber)(properties.downloadSpeed));\n    errors.collect(cdk.propertyValidator('uploadSpeed', cdk.validateNumber)(properties.uploadSpeed));\n    return errors.wrap('supplied properties not correct for \"BandwidthProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::NetworkManager::Link.Bandwidth` resource\n *\n * @param properties - the TypeScript properties of a `BandwidthProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::NetworkManager::Link.Bandwidth` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLinkBandwidthPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLink_BandwidthPropertyValidator(properties).assertSuccess();\n    return {\n        DownloadSpeed: cdk.numberToCloudFormation(properties.downloadSpeed),\n        UploadSpeed: cdk.numberToCloudFormation(properties.uploadSpeed),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLinkBandwidthPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLink.BandwidthProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLink.BandwidthProperty>();\n    ret.addPropertyResult('downloadSpeed', 'DownloadSpeed', properties.DownloadSpeed != null ? cfn_parse.FromCloudFormation.getNumber(properties.DownloadSpeed) : undefined);\n    ret.addPropertyResult('uploadSpeed', 'UploadSpeed', properties.UploadSpeed != null ? cfn_parse.FromCloudFormation.getNumber(properties.UploadSpeed) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                         \nexport interface CfnLinkAssociationProps {\n\n                                                                                                                                                                                                                                             \n    readonly deviceId: string;\n\n                                                                                                                                                                                                                                          \n    readonly globalNetworkId: string;\n\n                                                                                                                                                                                                                       \n    readonly linkId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnLinkAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnLinkAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnLinkAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deviceId', cdk.requiredValidator)(properties.deviceId));\n    errors.collect(cdk.propertyValidator('deviceId', cdk.validateString)(properties.deviceId));\n    errors.collect(cdk.propertyValidator('globalNetworkId', cdk.requiredValidator)(properties.globalNetworkId));\n    errors.collect(cdk.propertyValidator('globalNetworkId', cdk.validateString)(properties.globalNetworkId));\n    errors.collect(cdk.propertyValidator('linkId', cdk.requiredValidator)(properties.linkId));\n    errors.collect(cdk.propertyValidator('linkId', cdk.validateString)(properties.linkId));\n    return errors.wrap('supplied properties not correct for \"CfnLinkAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::NetworkManager::LinkAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnLinkAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::NetworkManager::LinkAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnLinkAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnLinkAssociationPropsValidator(properties).assertSuccess();\n    return {\n        DeviceId: cdk.stringToCloudFormation(properties.deviceId),\n        GlobalNetworkId: cdk.stringToCloudFormation(properties.globalNetworkId),\n        LinkId: cdk.stringToCloudFormation(properties.linkId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnLinkAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnLinkAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnLinkAssociationProps>();\n    ret.addPropertyResult('deviceId', 'DeviceId', cfn_parse.FromCloudFormation.getString(properties.DeviceId));\n    ret.addPropertyResult('globalNetworkId', 'GlobalNetworkId', cfn_parse.FromCloudFormation.getString(properties.GlobalNetworkId));\n    ret.addPropertyResult('linkId', 'LinkId', cfn_parse.FromCloudFormation.getString(properties.LinkId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnLinkAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::NetworkManager::LinkAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnLinkAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnLinkAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnLinkAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                             \n    public deviceId: string;\n\n                                                                                                                                                                                                                                          \n    public globalNetworkId: string;\n\n                                                                                                                                                                                                                       \n    public linkId: string;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnLinkAssociationProps) {\n        super(scope, id, { type: CfnLinkAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'deviceId', this);\n        cdk.requireProperty(props, 'globalNetworkId', this);\n        cdk.requireProperty(props, 'linkId', this);\n\n        this.deviceId = props.deviceId;\n        this.globalNetworkId = props.globalNetworkId;\n        this.linkId = props.linkId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnLinkAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            deviceId: this.deviceId,\n            globalNetworkId: this.globalNetworkId,\n            linkId: this.linkId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnLinkAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                   \nexport interface CfnSiteProps {\n\n                                                                                                                                                                                                                    \n    readonly globalNetworkId: string;\n\n                                                                                                                                                                                                                                                                           \n    readonly description?: string;\n\nn    readonly location?: CfnSite.LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                  \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSiteProps`\n *\n * @param properties - the TypeScript properties of a `CfnSiteProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSitePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('globalNetworkId', cdk.requiredValidator)(properties.globalNetworkId));\n    errors.collect(cdk.propertyValidator('globalNetworkId', cdk.validateString)(properties.globalNetworkId));\n    errors.collect(cdk.propertyValidator('location', CfnSite_LocationPropertyValidator)(properties.location));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnSiteProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::NetworkManager::Site` resource\n *\n * @param properties - the TypeScript properties of a `CfnSiteProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::NetworkManager::Site` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSitePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSitePropsValidator(properties).assertSuccess();\n    return {\n        GlobalNetworkId: cdk.stringToCloudFormation(properties.globalNetworkId),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Location: cfnSiteLocationPropertyToCloudFormation(properties.location),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSitePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSiteProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSiteProps>();\n    ret.addPropertyResult('globalNetworkId', 'GlobalNetworkId', cfn_parse.FromCloudFormation.getString(properties.GlobalNetworkId));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('location', 'Location', properties.Location != null ? CfnSiteLocationPropertyFromCloudFormation(properties.Location) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                  \nexport class CfnSite extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::NetworkManager::Site\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSite {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSitePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSite(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                      \n    public readonly attrSiteArn: string;\n\n                                                                                                                         \n    public readonly attrSiteId: string;\n\n                                                                                                                                                                                                                    \n    public globalNetworkId: string;\n\n                                                                                                                                                                                                                                                                           \n    public description: string | undefined;\n\nn    public location: CfnSite.LocationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                  \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnSiteProps) {\n        super(scope, id, { type: CfnSite.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'globalNetworkId', this);\n        this.attrSiteArn = cdk.Token.asString(this.getAtt('SiteArn'));\n        this.attrSiteId = cdk.Token.asString(this.getAtt('SiteId'));\n\n        this.globalNetworkId = props.globalNetworkId;\n        this.description = props.description;\n        this.location = props.location;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::NetworkManager::Site\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSite.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            globalNetworkId: this.globalNetworkId,\n            description: this.description,\n            location: this.location,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSitePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnSite {\n                                                                                                                                                                                                                                \n    export interface LocationProperty {\n                                                                                                                                                                                                                                            \n        readonly address?: string;\n                                                                                                                                                                                                                                     \n        readonly latitude?: string;\n                                                                                                                                                                                                                                       \n        readonly longitude?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LocationProperty`\n *\n * @param properties - the TypeScript properties of a `LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSite_LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('address', cdk.validateString)(properties.address));\n    errors.collect(cdk.propertyValidator('latitude', cdk.validateString)(properties.latitude));\n    errors.collect(cdk.propertyValidator('longitude', cdk.validateString)(properties.longitude));\n    return errors.wrap('supplied properties not correct for \"LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::NetworkManager::Site.Location` resource\n *\n * @param properties - the TypeScript properties of a `LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::NetworkManager::Site.Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSiteLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSite_LocationPropertyValidator(properties).assertSuccess();\n    return {\n        Address: cdk.stringToCloudFormation(properties.address),\n        Latitude: cdk.stringToCloudFormation(properties.latitude),\n        Longitude: cdk.stringToCloudFormation(properties.longitude),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSiteLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSite.LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSite.LocationProperty>();\n    ret.addPropertyResult('address', 'Address', properties.Address != null ? cfn_parse.FromCloudFormation.getString(properties.Address) : undefined);\n    ret.addPropertyResult('latitude', 'Latitude', properties.Latitude != null ? cfn_parse.FromCloudFormation.getString(properties.Latitude) : undefined);\n    ret.addPropertyResult('longitude', 'Longitude', properties.Longitude != null ? cfn_parse.FromCloudFormation.getString(properties.Longitude) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                               \nexport interface CfnTransitGatewayRegistrationProps {\n\n                                                                                                                                                                                                                                                                \n    readonly globalNetworkId: string;\n\n                                                                                                                                                                                                                                                                                           \n    readonly transitGatewayArn: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTransitGatewayRegistrationProps`\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayRegistrationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTransitGatewayRegistrationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('globalNetworkId', cdk.requiredValidator)(properties.globalNetworkId));\n    errors.collect(cdk.propertyValidator('globalNetworkId', cdk.validateString)(properties.globalNetworkId));\n    errors.collect(cdk.propertyValidator('transitGatewayArn', cdk.requiredValidator)(properties.transitGatewayArn));\n    errors.collect(cdk.propertyValidator('transitGatewayArn', cdk.validateString)(properties.transitGatewayArn));\n    return errors.wrap('supplied properties not correct for \"CfnTransitGatewayRegistrationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::NetworkManager::TransitGatewayRegistration` resource\n *\n * @param properties - the TypeScript properties of a `CfnTransitGatewayRegistrationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::NetworkManager::TransitGatewayRegistration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTransitGatewayRegistrationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTransitGatewayRegistrationPropsValidator(properties).assertSuccess();\n    return {\n        GlobalNetworkId: cdk.stringToCloudFormation(properties.globalNetworkId),\n        TransitGatewayArn: cdk.stringToCloudFormation(properties.transitGatewayArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTransitGatewayRegistrationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTransitGatewayRegistrationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTransitGatewayRegistrationProps>();\n    ret.addPropertyResult('globalNetworkId', 'GlobalNetworkId', cfn_parse.FromCloudFormation.getString(properties.GlobalNetworkId));\n    ret.addPropertyResult('transitGatewayArn', 'TransitGatewayArn', cfn_parse.FromCloudFormation.getString(properties.TransitGatewayArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTransitGatewayRegistration extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::NetworkManager::TransitGatewayRegistration\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTransitGatewayRegistration {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTransitGatewayRegistrationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTransitGatewayRegistration(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                \n    public globalNetworkId: string;\n\n                                                                                                                                                                                                                                                                                           \n    public transitGatewayArn: string;\n\n                                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnTransitGatewayRegistrationProps) {\n        super(scope, id, { type: CfnTransitGatewayRegistration.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'globalNetworkId', this);\n        cdk.requireProperty(props, 'transitGatewayArn', this);\n\n        this.globalNetworkId = props.globalNetworkId;\n        this.transitGatewayArn = props.transitGatewayArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTransitGatewayRegistration.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            globalNetworkId: this.globalNetworkId,\n            transitGatewayArn: this.transitGatewayArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTransitGatewayRegistrationPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
