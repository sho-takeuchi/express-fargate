{
  "version": 3,
  "sources": ["quicksight.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:33.032Z\",\"fingerprint\":\"dqB3WhH+VIDhOrt86GkePScd17ZuFRk6L3a+wXpsBfc=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                       \nexport interface CfnAnalysisProps {\n\n                                                                                                                                                                                                                                                                            \n    readonly analysisId: string;\n\n                                                                                                                                                                                                                                                 \n    readonly awsAccountId: string;\n\n                                                                                                                                                                                                                                                                                                                                                    \n    readonly sourceEntity: CfnAnalysis.AnalysisSourceEntityProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                \n    readonly errors?: Array<CfnAnalysis.AnalysisErrorProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                           \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                                          \n    readonly parameters?: CfnAnalysis.ParametersProperty | cdk.IResolvable;\n\nn    readonly permissions?: Array<CfnAnalysis.ResourcePermissionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                             \n    readonly themeArn?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAnalysisProps`\n *\n * @param properties - the TypeScript properties of a `CfnAnalysisProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAnalysisPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('analysisId', cdk.requiredValidator)(properties.analysisId));\n    errors.collect(cdk.propertyValidator('analysisId', cdk.validateString)(properties.analysisId));\n    errors.collect(cdk.propertyValidator('awsAccountId', cdk.requiredValidator)(properties.awsAccountId));\n    errors.collect(cdk.propertyValidator('awsAccountId', cdk.validateString)(properties.awsAccountId));\n    errors.collect(cdk.propertyValidator('errors', cdk.listValidator(CfnAnalysis_AnalysisErrorPropertyValidator))(properties.errors));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('parameters', CfnAnalysis_ParametersPropertyValidator)(properties.parameters));\n    errors.collect(cdk.propertyValidator('permissions', cdk.listValidator(CfnAnalysis_ResourcePermissionPropertyValidator))(properties.permissions));\n    errors.collect(cdk.propertyValidator('sourceEntity', cdk.requiredValidator)(properties.sourceEntity));\n    errors.collect(cdk.propertyValidator('sourceEntity', CfnAnalysis_AnalysisSourceEntityPropertyValidator)(properties.sourceEntity));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('themeArn', cdk.validateString)(properties.themeArn));\n    return errors.wrap('supplied properties not correct for \"CfnAnalysisProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Analysis` resource\n *\n * @param properties - the TypeScript properties of a `CfnAnalysisProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Analysis` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAnalysisPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAnalysisPropsValidator(properties).assertSuccess();\n    return {\n        AnalysisId: cdk.stringToCloudFormation(properties.analysisId),\n        AwsAccountId: cdk.stringToCloudFormation(properties.awsAccountId),\n        SourceEntity: cfnAnalysisAnalysisSourceEntityPropertyToCloudFormation(properties.sourceEntity),\n        Errors: cdk.listMapper(cfnAnalysisAnalysisErrorPropertyToCloudFormation)(properties.errors),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Parameters: cfnAnalysisParametersPropertyToCloudFormation(properties.parameters),\n        Permissions: cdk.listMapper(cfnAnalysisResourcePermissionPropertyToCloudFormation)(properties.permissions),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        ThemeArn: cdk.stringToCloudFormation(properties.themeArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAnalysisPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAnalysisProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAnalysisProps>();\n    ret.addPropertyResult('analysisId', 'AnalysisId', cfn_parse.FromCloudFormation.getString(properties.AnalysisId));\n    ret.addPropertyResult('awsAccountId', 'AwsAccountId', cfn_parse.FromCloudFormation.getString(properties.AwsAccountId));\n    ret.addPropertyResult('sourceEntity', 'SourceEntity', CfnAnalysisAnalysisSourceEntityPropertyFromCloudFormation(properties.SourceEntity));\n    ret.addPropertyResult('errors', 'Errors', properties.Errors != null ? cfn_parse.FromCloudFormation.getArray(CfnAnalysisAnalysisErrorPropertyFromCloudFormation)(properties.Errors) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? CfnAnalysisParametersPropertyFromCloudFormation(properties.Parameters) : undefined);\n    ret.addPropertyResult('permissions', 'Permissions', properties.Permissions != null ? cfn_parse.FromCloudFormation.getArray(CfnAnalysisResourcePermissionPropertyFromCloudFormation)(properties.Permissions) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('themeArn', 'ThemeArn', properties.ThemeArn != null ? cfn_parse.FromCloudFormation.getString(properties.ThemeArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                      \nexport class CfnAnalysis extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::QuickSight::Analysis\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAnalysis {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAnalysisPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAnalysis(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                          \n    public readonly attrArn: string;\n\n                                                                  \n    public readonly attrCreatedTime: string;\n\n                                                                                                            \n    public readonly attrDataSetArns: string[];\n\n                                                                                                                   \n    public readonly attrLastUpdatedTime: string;\n\n                                                             \n    public readonly attrSheets: cdk.IResolvable;\n\n                                                             \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                                                            \n    public analysisId: string;\n\n                                                                                                                                                                                                                                                 \n    public awsAccountId: string;\n\n                                                                                                                                                                                                                                                                                                                                                    \n    public sourceEntity: CfnAnalysis.AnalysisSourceEntityProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                \n    public errors: Array<CfnAnalysis.AnalysisErrorProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                           \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                          \n    public parameters: CfnAnalysis.ParametersProperty | cdk.IResolvable | undefined;\n\nn    public permissions: Array<CfnAnalysis.ResourcePermissionProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                             \n    public themeArn: string | undefined;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnAnalysisProps) {\n        super(scope, id, { type: CfnAnalysis.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'analysisId', this);\n        cdk.requireProperty(props, 'awsAccountId', this);\n        cdk.requireProperty(props, 'sourceEntity', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreatedTime = cdk.Token.asString(this.getAtt('CreatedTime'));\n        this.attrDataSetArns = cdk.Token.asList(this.getAtt('DataSetArns'));\n        this.attrLastUpdatedTime = cdk.Token.asString(this.getAtt('LastUpdatedTime'));\n        this.attrSheets = this.getAtt('Sheets');\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.analysisId = props.analysisId;\n        this.awsAccountId = props.awsAccountId;\n        this.sourceEntity = props.sourceEntity;\n        this.errors = props.errors;\n        this.name = props.name;\n        this.parameters = props.parameters;\n        this.permissions = props.permissions;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::QuickSight::Analysis\", props.tags, { tagPropertyName: 'tags' });\n        this.themeArn = props.themeArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAnalysis.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            analysisId: this.analysisId,\n            awsAccountId: this.awsAccountId,\n            sourceEntity: this.sourceEntity,\n            errors: this.errors,\n            name: this.name,\n            parameters: this.parameters,\n            permissions: this.permissions,\n            tags: this.tags.renderTags(),\n            themeArn: this.themeArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAnalysisPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnAnalysis {\n                                                                                                                                                                                                                               \n    export interface AnalysisErrorProperty {\n                                                                                                                                                                                                                                                                                \n        readonly message?: string;\n                                                                                                                                                                                                                                                             \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AnalysisErrorProperty`\n *\n * @param properties - the TypeScript properties of a `AnalysisErrorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAnalysis_AnalysisErrorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('message', cdk.validateString)(properties.message));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"AnalysisErrorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.AnalysisError` resource\n *\n * @param properties - the TypeScript properties of a `AnalysisErrorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.AnalysisError` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAnalysisAnalysisErrorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAnalysis_AnalysisErrorPropertyValidator(properties).assertSuccess();\n    return {\n        Message: cdk.stringToCloudFormation(properties.message),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAnalysisAnalysisErrorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAnalysis.AnalysisErrorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAnalysis.AnalysisErrorProperty>();\n    ret.addPropertyResult('message', 'Message', properties.Message != null ? cfn_parse.FromCloudFormation.getString(properties.Message) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAnalysis {\n                                                                                                                                                                                                                                                        \n    export interface AnalysisSourceEntityProperty {\n                                                                                                                                                                                                                                                                                                                \n        readonly sourceTemplate?: CfnAnalysis.AnalysisSourceTemplateProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AnalysisSourceEntityProperty`\n *\n * @param properties - the TypeScript properties of a `AnalysisSourceEntityProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAnalysis_AnalysisSourceEntityPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('sourceTemplate', CfnAnalysis_AnalysisSourceTemplatePropertyValidator)(properties.sourceTemplate));\n    return errors.wrap('supplied properties not correct for \"AnalysisSourceEntityProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.AnalysisSourceEntity` resource\n *\n * @param properties - the TypeScript properties of a `AnalysisSourceEntityProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.AnalysisSourceEntity` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAnalysisAnalysisSourceEntityPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAnalysis_AnalysisSourceEntityPropertyValidator(properties).assertSuccess();\n    return {\n        SourceTemplate: cfnAnalysisAnalysisSourceTemplatePropertyToCloudFormation(properties.sourceTemplate),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAnalysisAnalysisSourceEntityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAnalysis.AnalysisSourceEntityProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAnalysis.AnalysisSourceEntityProperty>();\n    ret.addPropertyResult('sourceTemplate', 'SourceTemplate', properties.SourceTemplate != null ? CfnAnalysisAnalysisSourceTemplatePropertyFromCloudFormation(properties.SourceTemplate) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAnalysis {\n                                                                                                                                                                                                                                                            \n    export interface AnalysisSourceTemplateProperty {\n                                                                                                                                                                                                                                                                                                                    \n        readonly arn: string;\n                                                                                                                                                                                                                                                                                                                          \n        readonly dataSetReferences: Array<CfnAnalysis.DataSetReferenceProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AnalysisSourceTemplateProperty`\n *\n * @param properties - the TypeScript properties of a `AnalysisSourceTemplateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAnalysis_AnalysisSourceTemplatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    errors.collect(cdk.propertyValidator('dataSetReferences', cdk.requiredValidator)(properties.dataSetReferences));\n    errors.collect(cdk.propertyValidator('dataSetReferences', cdk.listValidator(CfnAnalysis_DataSetReferencePropertyValidator))(properties.dataSetReferences));\n    return errors.wrap('supplied properties not correct for \"AnalysisSourceTemplateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.AnalysisSourceTemplate` resource\n *\n * @param properties - the TypeScript properties of a `AnalysisSourceTemplateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.AnalysisSourceTemplate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAnalysisAnalysisSourceTemplatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAnalysis_AnalysisSourceTemplatePropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n        DataSetReferences: cdk.listMapper(cfnAnalysisDataSetReferencePropertyToCloudFormation)(properties.dataSetReferences),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAnalysisAnalysisSourceTemplatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAnalysis.AnalysisSourceTemplateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAnalysis.AnalysisSourceTemplateProperty>();\n    ret.addPropertyResult('arn', 'Arn', cfn_parse.FromCloudFormation.getString(properties.Arn));\n    ret.addPropertyResult('dataSetReferences', 'DataSetReferences', cfn_parse.FromCloudFormation.getArray(CfnAnalysisDataSetReferencePropertyFromCloudFormation)(properties.DataSetReferences));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAnalysis {\n                                                                                                                                                                                                                                     \n    export interface DataSetReferenceProperty {\n                                                                                                                                                                                                                                                                             \n        readonly dataSetArn: string;\n                                                                                                                                                                                                                                                                      \n        readonly dataSetPlaceholder: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataSetReferenceProperty`\n *\n * @param properties - the TypeScript properties of a `DataSetReferenceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAnalysis_DataSetReferencePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataSetArn', cdk.requiredValidator)(properties.dataSetArn));\n    errors.collect(cdk.propertyValidator('dataSetArn', cdk.validateString)(properties.dataSetArn));\n    errors.collect(cdk.propertyValidator('dataSetPlaceholder', cdk.requiredValidator)(properties.dataSetPlaceholder));\n    errors.collect(cdk.propertyValidator('dataSetPlaceholder', cdk.validateString)(properties.dataSetPlaceholder));\n    return errors.wrap('supplied properties not correct for \"DataSetReferenceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.DataSetReference` resource\n *\n * @param properties - the TypeScript properties of a `DataSetReferenceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.DataSetReference` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAnalysisDataSetReferencePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAnalysis_DataSetReferencePropertyValidator(properties).assertSuccess();\n    return {\n        DataSetArn: cdk.stringToCloudFormation(properties.dataSetArn),\n        DataSetPlaceholder: cdk.stringToCloudFormation(properties.dataSetPlaceholder),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAnalysisDataSetReferencePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAnalysis.DataSetReferenceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAnalysis.DataSetReferenceProperty>();\n    ret.addPropertyResult('dataSetArn', 'DataSetArn', cfn_parse.FromCloudFormation.getString(properties.DataSetArn));\n    ret.addPropertyResult('dataSetPlaceholder', 'DataSetPlaceholder', cfn_parse.FromCloudFormation.getString(properties.DataSetPlaceholder));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAnalysis {\n                                                                                                                                                                                                                                          \n    export interface DateTimeParameterProperty {\n                                                                                                                                                                                                                                                                                 \n        readonly name: string;\n                                                                                                                                                                                                                                                                               \n        readonly values: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DateTimeParameterProperty`\n *\n * @param properties - the TypeScript properties of a `DateTimeParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAnalysis_DateTimeParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));\n    return errors.wrap('supplied properties not correct for \"DateTimeParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.DateTimeParameter` resource\n *\n * @param properties - the TypeScript properties of a `DateTimeParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.DateTimeParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAnalysisDateTimeParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAnalysis_DateTimeParameterPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAnalysisDateTimeParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAnalysis.DateTimeParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAnalysis.DateTimeParameterProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getStringArray(properties.Values));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAnalysis {\n                                                                                                                                                                                                                                       \n    export interface DecimalParameterProperty {\n                                                                                                                                                                                                                                                                             \n        readonly name: string;\n                                                                                                                                                                                                                                                                           \n        readonly values: number[] | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DecimalParameterProperty`\n *\n * @param properties - the TypeScript properties of a `DecimalParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAnalysis_DecimalParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateNumber))(properties.values));\n    return errors.wrap('supplied properties not correct for \"DecimalParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.DecimalParameter` resource\n *\n * @param properties - the TypeScript properties of a `DecimalParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.DecimalParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAnalysisDecimalParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAnalysis_DecimalParameterPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Values: cdk.listMapper(cdk.numberToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAnalysisDecimalParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAnalysis.DecimalParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAnalysis.DecimalParameterProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getNumber)(properties.Values));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAnalysis {\n                                                                                                                                                                                                                                        \n    export interface IntegerParameterProperty {\n                                                                                                                                                                                                                                                                      \n        readonly name: string;\n                                                                                                                                                                                                                                                                           \n        readonly values: number[] | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IntegerParameterProperty`\n *\n * @param properties - the TypeScript properties of a `IntegerParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAnalysis_IntegerParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateNumber))(properties.values));\n    return errors.wrap('supplied properties not correct for \"IntegerParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.IntegerParameter` resource\n *\n * @param properties - the TypeScript properties of a `IntegerParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.IntegerParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAnalysisIntegerParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAnalysis_IntegerParameterPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Values: cdk.listMapper(cdk.numberToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAnalysisIntegerParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAnalysis.IntegerParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAnalysis.IntegerParameterProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getNumber)(properties.Values));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAnalysis {\n                                                                                                                                                                                                                                                                                   \n    export interface ParametersProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly dateTimeParameters?: Array<CfnAnalysis.DateTimeParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                     \n        readonly decimalParameters?: Array<CfnAnalysis.DecimalParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                     \n        readonly integerParameters?: Array<CfnAnalysis.IntegerParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                   \n        readonly stringParameters?: Array<CfnAnalysis.StringParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ParametersProperty`\n *\n * @param properties - the TypeScript properties of a `ParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAnalysis_ParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dateTimeParameters', cdk.listValidator(CfnAnalysis_DateTimeParameterPropertyValidator))(properties.dateTimeParameters));\n    errors.collect(cdk.propertyValidator('decimalParameters', cdk.listValidator(CfnAnalysis_DecimalParameterPropertyValidator))(properties.decimalParameters));\n    errors.collect(cdk.propertyValidator('integerParameters', cdk.listValidator(CfnAnalysis_IntegerParameterPropertyValidator))(properties.integerParameters));\n    errors.collect(cdk.propertyValidator('stringParameters', cdk.listValidator(CfnAnalysis_StringParameterPropertyValidator))(properties.stringParameters));\n    return errors.wrap('supplied properties not correct for \"ParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.Parameters` resource\n *\n * @param properties - the TypeScript properties of a `ParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.Parameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAnalysisParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAnalysis_ParametersPropertyValidator(properties).assertSuccess();\n    return {\n        DateTimeParameters: cdk.listMapper(cfnAnalysisDateTimeParameterPropertyToCloudFormation)(properties.dateTimeParameters),\n        DecimalParameters: cdk.listMapper(cfnAnalysisDecimalParameterPropertyToCloudFormation)(properties.decimalParameters),\n        IntegerParameters: cdk.listMapper(cfnAnalysisIntegerParameterPropertyToCloudFormation)(properties.integerParameters),\n        StringParameters: cdk.listMapper(cfnAnalysisStringParameterPropertyToCloudFormation)(properties.stringParameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAnalysisParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAnalysis.ParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAnalysis.ParametersProperty>();\n    ret.addPropertyResult('dateTimeParameters', 'DateTimeParameters', properties.DateTimeParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnAnalysisDateTimeParameterPropertyFromCloudFormation)(properties.DateTimeParameters) : undefined);\n    ret.addPropertyResult('decimalParameters', 'DecimalParameters', properties.DecimalParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnAnalysisDecimalParameterPropertyFromCloudFormation)(properties.DecimalParameters) : undefined);\n    ret.addPropertyResult('integerParameters', 'IntegerParameters', properties.IntegerParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnAnalysisIntegerParameterPropertyFromCloudFormation)(properties.IntegerParameters) : undefined);\n    ret.addPropertyResult('stringParameters', 'StringParameters', properties.StringParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnAnalysisStringParameterPropertyFromCloudFormation)(properties.StringParameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAnalysis {\n                                                                                                                                                                                                                                                 \n    export interface ResourcePermissionProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly actions: string[];\nn        readonly principal: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourcePermissionProperty`\n *\n * @param properties - the TypeScript properties of a `ResourcePermissionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAnalysis_ResourcePermissionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.requiredValidator)(properties.actions));\n    errors.collect(cdk.propertyValidator('actions', cdk.listValidator(cdk.validateString))(properties.actions));\n    errors.collect(cdk.propertyValidator('principal', cdk.requiredValidator)(properties.principal));\n    errors.collect(cdk.propertyValidator('principal', cdk.validateString)(properties.principal));\n    return errors.wrap('supplied properties not correct for \"ResourcePermissionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.ResourcePermission` resource\n *\n * @param properties - the TypeScript properties of a `ResourcePermissionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.ResourcePermission` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAnalysisResourcePermissionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAnalysis_ResourcePermissionPropertyValidator(properties).assertSuccess();\n    return {\n        Actions: cdk.listMapper(cdk.stringToCloudFormation)(properties.actions),\n        Principal: cdk.stringToCloudFormation(properties.principal),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAnalysisResourcePermissionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAnalysis.ResourcePermissionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAnalysis.ResourcePermissionProperty>();\n    ret.addPropertyResult('actions', 'Actions', cfn_parse.FromCloudFormation.getStringArray(properties.Actions));\n    ret.addPropertyResult('principal', 'Principal', cfn_parse.FromCloudFormation.getString(properties.Principal));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAnalysis {\nn    export interface SheetProperty {\n                                                                                                                                                                                                                                                                                                              \n        readonly name?: string;\n                                                                                                                                                                                                                                                               \n        readonly sheetId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SheetProperty`\n *\n * @param properties - the TypeScript properties of a `SheetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAnalysis_SheetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('sheetId', cdk.validateString)(properties.sheetId));\n    return errors.wrap('supplied properties not correct for \"SheetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.Sheet` resource\n *\n * @param properties - the TypeScript properties of a `SheetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.Sheet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAnalysisSheetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAnalysis_SheetPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        SheetId: cdk.stringToCloudFormation(properties.sheetId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAnalysisSheetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAnalysis.SheetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAnalysis.SheetProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('sheetId', 'SheetId', properties.SheetId != null ? cfn_parse.FromCloudFormation.getString(properties.SheetId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAnalysis {\n                                                                                                                                                                                                                                     \n    export interface StringParameterProperty {\n                                                                                                                                                                                                                                                                        \n        readonly name: string;\n                                                                                                                                                                                                                                                                     \n        readonly values: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StringParameterProperty`\n *\n * @param properties - the TypeScript properties of a `StringParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAnalysis_StringParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));\n    return errors.wrap('supplied properties not correct for \"StringParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.StringParameter` resource\n *\n * @param properties - the TypeScript properties of a `StringParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Analysis.StringParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAnalysisStringParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAnalysis_StringParameterPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAnalysisStringParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAnalysis.StringParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAnalysis.StringParameterProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getStringArray(properties.Values));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                         \nexport interface CfnDashboardProps {\n\n                                                                                                                                                                                                                                                       \n    readonly awsAccountId: string;\n\n                                                                                                                                                                                                                                            \n    readonly dashboardId: string;\n\nn    readonly sourceEntity: CfnDashboard.DashboardSourceEntityProperty | cdk.IResolvable;\n\nn    readonly dashboardPublishOptions?: CfnDashboard.DashboardPublishOptionsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly parameters?: CfnDashboard.ParametersProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly permissions?: Array<CfnDashboard.ResourcePermissionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly themeArn?: string;\n\n                                                                                                                                                                                                                                                               \n    readonly versionDescription?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDashboardProps`\n *\n * @param properties - the TypeScript properties of a `CfnDashboardProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboardPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('awsAccountId', cdk.requiredValidator)(properties.awsAccountId));\n    errors.collect(cdk.propertyValidator('awsAccountId', cdk.validateString)(properties.awsAccountId));\n    errors.collect(cdk.propertyValidator('dashboardId', cdk.requiredValidator)(properties.dashboardId));\n    errors.collect(cdk.propertyValidator('dashboardId', cdk.validateString)(properties.dashboardId));\n    errors.collect(cdk.propertyValidator('dashboardPublishOptions', CfnDashboard_DashboardPublishOptionsPropertyValidator)(properties.dashboardPublishOptions));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('parameters', CfnDashboard_ParametersPropertyValidator)(properties.parameters));\n    errors.collect(cdk.propertyValidator('permissions', cdk.listValidator(CfnDashboard_ResourcePermissionPropertyValidator))(properties.permissions));\n    errors.collect(cdk.propertyValidator('sourceEntity', cdk.requiredValidator)(properties.sourceEntity));\n    errors.collect(cdk.propertyValidator('sourceEntity', CfnDashboard_DashboardSourceEntityPropertyValidator)(properties.sourceEntity));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('themeArn', cdk.validateString)(properties.themeArn));\n    errors.collect(cdk.propertyValidator('versionDescription', cdk.validateString)(properties.versionDescription));\n    return errors.wrap('supplied properties not correct for \"CfnDashboardProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard` resource\n *\n * @param properties - the TypeScript properties of a `CfnDashboardProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboardPropsValidator(properties).assertSuccess();\n    return {\n        AwsAccountId: cdk.stringToCloudFormation(properties.awsAccountId),\n        DashboardId: cdk.stringToCloudFormation(properties.dashboardId),\n        SourceEntity: cfnDashboardDashboardSourceEntityPropertyToCloudFormation(properties.sourceEntity),\n        DashboardPublishOptions: cfnDashboardDashboardPublishOptionsPropertyToCloudFormation(properties.dashboardPublishOptions),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Parameters: cfnDashboardParametersPropertyToCloudFormation(properties.parameters),\n        Permissions: cdk.listMapper(cfnDashboardResourcePermissionPropertyToCloudFormation)(properties.permissions),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        ThemeArn: cdk.stringToCloudFormation(properties.themeArn),\n        VersionDescription: cdk.stringToCloudFormation(properties.versionDescription),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboardProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboardProps>();\n    ret.addPropertyResult('awsAccountId', 'AwsAccountId', cfn_parse.FromCloudFormation.getString(properties.AwsAccountId));\n    ret.addPropertyResult('dashboardId', 'DashboardId', cfn_parse.FromCloudFormation.getString(properties.DashboardId));\n    ret.addPropertyResult('sourceEntity', 'SourceEntity', CfnDashboardDashboardSourceEntityPropertyFromCloudFormation(properties.SourceEntity));\n    ret.addPropertyResult('dashboardPublishOptions', 'DashboardPublishOptions', properties.DashboardPublishOptions != null ? CfnDashboardDashboardPublishOptionsPropertyFromCloudFormation(properties.DashboardPublishOptions) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? CfnDashboardParametersPropertyFromCloudFormation(properties.Parameters) : undefined);\n    ret.addPropertyResult('permissions', 'Permissions', properties.Permissions != null ? cfn_parse.FromCloudFormation.getArray(CfnDashboardResourcePermissionPropertyFromCloudFormation)(properties.Permissions) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('themeArn', 'ThemeArn', properties.ThemeArn != null ? cfn_parse.FromCloudFormation.getString(properties.ThemeArn) : undefined);\n    ret.addPropertyResult('versionDescription', 'VersionDescription', properties.VersionDescription != null ? cfn_parse.FromCloudFormation.getString(properties.VersionDescription) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDashboard extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::QuickSight::Dashboard\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDashboard {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDashboardPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDashboard(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                           \n    public readonly attrArn: string;\n\n                                                                                                               \n    public readonly attrCreatedTime: string;\n\n                                                                                                                        \n    public readonly attrLastPublishedTime: string;\n\n                                                                                                                    \n    public readonly attrLastUpdatedTime: string;\n\n                                                                                                                                                                                                                                                       \n    public awsAccountId: string;\n\n                                                                                                                                                                                                                                            \n    public dashboardId: string;\n\nn    public sourceEntity: CfnDashboard.DashboardSourceEntityProperty | cdk.IResolvable;\n\nn    public dashboardPublishOptions: CfnDashboard.DashboardPublishOptionsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                            \n    public parameters: CfnDashboard.ParametersProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public permissions: Array<CfnDashboard.ResourcePermissionProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public themeArn: string | undefined;\n\n                                                                                                                                                                                                                                                               \n    public versionDescription: string | undefined;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnDashboardProps) {\n        super(scope, id, { type: CfnDashboard.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'awsAccountId', this);\n        cdk.requireProperty(props, 'dashboardId', this);\n        cdk.requireProperty(props, 'sourceEntity', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreatedTime = cdk.Token.asString(this.getAtt('CreatedTime'));\n        this.attrLastPublishedTime = cdk.Token.asString(this.getAtt('LastPublishedTime'));\n        this.attrLastUpdatedTime = cdk.Token.asString(this.getAtt('LastUpdatedTime'));\n\n        this.awsAccountId = props.awsAccountId;\n        this.dashboardId = props.dashboardId;\n        this.sourceEntity = props.sourceEntity;\n        this.dashboardPublishOptions = props.dashboardPublishOptions;\n        this.name = props.name;\n        this.parameters = props.parameters;\n        this.permissions = props.permissions;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::QuickSight::Dashboard\", props.tags, { tagPropertyName: 'tags' });\n        this.themeArn = props.themeArn;\n        this.versionDescription = props.versionDescription;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDashboard.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            awsAccountId: this.awsAccountId,\n            dashboardId: this.dashboardId,\n            sourceEntity: this.sourceEntity,\n            dashboardPublishOptions: this.dashboardPublishOptions,\n            name: this.name,\n            parameters: this.parameters,\n            permissions: this.permissions,\n            tags: this.tags.renderTags(),\n            themeArn: this.themeArn,\n            versionDescription: this.versionDescription,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDashboardPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDashboard {\n                                                                                                                                                                                                                                                           \n    export interface AdHocFilteringOptionProperty {\n                                                                                                                                                                                                                                                                                \n        readonly availabilityStatus?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AdHocFilteringOptionProperty`\n *\n * @param properties - the TypeScript properties of a `AdHocFilteringOptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboard_AdHocFilteringOptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityStatus', cdk.validateString)(properties.availabilityStatus));\n    return errors.wrap('supplied properties not correct for \"AdHocFilteringOptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.AdHocFilteringOption` resource\n *\n * @param properties - the TypeScript properties of a `AdHocFilteringOptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.AdHocFilteringOption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardAdHocFilteringOptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboard_AdHocFilteringOptionPropertyValidator(properties).assertSuccess();\n    return {\n        AvailabilityStatus: cdk.stringToCloudFormation(properties.availabilityStatus),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardAdHocFilteringOptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboard.AdHocFilteringOptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboard.AdHocFilteringOptionProperty>();\n    ret.addPropertyResult('availabilityStatus', 'AvailabilityStatus', properties.AvailabilityStatus != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityStatus) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDashboard {\n                                                                                                                                                                                                                                                     \n    export interface DashboardPublishOptionsProperty {\n                                                                                                                                                                                                                                                                                                       \n        readonly adHocFilteringOption?: CfnDashboard.AdHocFilteringOptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                       \n        readonly exportToCsvOption?: CfnDashboard.ExportToCSVOptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly sheetControlsOption?: CfnDashboard.SheetControlsOptionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DashboardPublishOptionsProperty`\n *\n * @param properties - the TypeScript properties of a `DashboardPublishOptionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboard_DashboardPublishOptionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('adHocFilteringOption', CfnDashboard_AdHocFilteringOptionPropertyValidator)(properties.adHocFilteringOption));\n    errors.collect(cdk.propertyValidator('exportToCsvOption', CfnDashboard_ExportToCSVOptionPropertyValidator)(properties.exportToCsvOption));\n    errors.collect(cdk.propertyValidator('sheetControlsOption', CfnDashboard_SheetControlsOptionPropertyValidator)(properties.sheetControlsOption));\n    return errors.wrap('supplied properties not correct for \"DashboardPublishOptionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.DashboardPublishOptions` resource\n *\n * @param properties - the TypeScript properties of a `DashboardPublishOptionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.DashboardPublishOptions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardDashboardPublishOptionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboard_DashboardPublishOptionsPropertyValidator(properties).assertSuccess();\n    return {\n        AdHocFilteringOption: cfnDashboardAdHocFilteringOptionPropertyToCloudFormation(properties.adHocFilteringOption),\n        ExportToCSVOption: cfnDashboardExportToCSVOptionPropertyToCloudFormation(properties.exportToCsvOption),\n        SheetControlsOption: cfnDashboardSheetControlsOptionPropertyToCloudFormation(properties.sheetControlsOption),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardDashboardPublishOptionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboard.DashboardPublishOptionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboard.DashboardPublishOptionsProperty>();\n    ret.addPropertyResult('adHocFilteringOption', 'AdHocFilteringOption', properties.AdHocFilteringOption != null ? CfnDashboardAdHocFilteringOptionPropertyFromCloudFormation(properties.AdHocFilteringOption) : undefined);\n    ret.addPropertyResult('exportToCsvOption', 'ExportToCSVOption', properties.ExportToCSVOption != null ? CfnDashboardExportToCSVOptionPropertyFromCloudFormation(properties.ExportToCSVOption) : undefined);\n    ret.addPropertyResult('sheetControlsOption', 'SheetControlsOption', properties.SheetControlsOption != null ? CfnDashboardSheetControlsOptionPropertyFromCloudFormation(properties.SheetControlsOption) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDashboard {\n                                                                                                                                                                                                                                                 \n    export interface DashboardSourceEntityProperty {\n                                                                                                                                                                                                                                                                          \n        readonly sourceTemplate?: CfnDashboard.DashboardSourceTemplateProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DashboardSourceEntityProperty`\n *\n * @param properties - the TypeScript properties of a `DashboardSourceEntityProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboard_DashboardSourceEntityPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('sourceTemplate', CfnDashboard_DashboardSourceTemplatePropertyValidator)(properties.sourceTemplate));\n    return errors.wrap('supplied properties not correct for \"DashboardSourceEntityProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.DashboardSourceEntity` resource\n *\n * @param properties - the TypeScript properties of a `DashboardSourceEntityProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.DashboardSourceEntity` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardDashboardSourceEntityPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboard_DashboardSourceEntityPropertyValidator(properties).assertSuccess();\n    return {\n        SourceTemplate: cfnDashboardDashboardSourceTemplatePropertyToCloudFormation(properties.sourceTemplate),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardDashboardSourceEntityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboard.DashboardSourceEntityProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboard.DashboardSourceEntityProperty>();\n    ret.addPropertyResult('sourceTemplate', 'SourceTemplate', properties.SourceTemplate != null ? CfnDashboardDashboardSourceTemplatePropertyFromCloudFormation(properties.SourceTemplate) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDashboard {\n                                                                                                                                                                                                                                                     \n    export interface DashboardSourceTemplateProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly arn: string;\n                                                                                                                                                                                                                                                                                    \n        readonly dataSetReferences: Array<CfnDashboard.DataSetReferenceProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DashboardSourceTemplateProperty`\n *\n * @param properties - the TypeScript properties of a `DashboardSourceTemplateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboard_DashboardSourceTemplatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    errors.collect(cdk.propertyValidator('dataSetReferences', cdk.requiredValidator)(properties.dataSetReferences));\n    errors.collect(cdk.propertyValidator('dataSetReferences', cdk.listValidator(CfnDashboard_DataSetReferencePropertyValidator))(properties.dataSetReferences));\n    return errors.wrap('supplied properties not correct for \"DashboardSourceTemplateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.DashboardSourceTemplate` resource\n *\n * @param properties - the TypeScript properties of a `DashboardSourceTemplateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.DashboardSourceTemplate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardDashboardSourceTemplatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboard_DashboardSourceTemplatePropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n        DataSetReferences: cdk.listMapper(cfnDashboardDataSetReferencePropertyToCloudFormation)(properties.dataSetReferences),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardDashboardSourceTemplatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboard.DashboardSourceTemplateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboard.DashboardSourceTemplateProperty>();\n    ret.addPropertyResult('arn', 'Arn', cfn_parse.FromCloudFormation.getString(properties.Arn));\n    ret.addPropertyResult('dataSetReferences', 'DataSetReferences', cfn_parse.FromCloudFormation.getArray(CfnDashboardDataSetReferencePropertyFromCloudFormation)(properties.DataSetReferences));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDashboard {\n                                                                                                                                                                                                                                      \n    export interface DataSetReferenceProperty {\n                                                                                                                                                                                                                                                                               \n        readonly dataSetArn: string;\n                                                                                                                                                                                                                                                                        \n        readonly dataSetPlaceholder: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataSetReferenceProperty`\n *\n * @param properties - the TypeScript properties of a `DataSetReferenceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboard_DataSetReferencePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataSetArn', cdk.requiredValidator)(properties.dataSetArn));\n    errors.collect(cdk.propertyValidator('dataSetArn', cdk.validateString)(properties.dataSetArn));\n    errors.collect(cdk.propertyValidator('dataSetPlaceholder', cdk.requiredValidator)(properties.dataSetPlaceholder));\n    errors.collect(cdk.propertyValidator('dataSetPlaceholder', cdk.validateString)(properties.dataSetPlaceholder));\n    return errors.wrap('supplied properties not correct for \"DataSetReferenceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.DataSetReference` resource\n *\n * @param properties - the TypeScript properties of a `DataSetReferenceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.DataSetReference` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardDataSetReferencePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboard_DataSetReferencePropertyValidator(properties).assertSuccess();\n    return {\n        DataSetArn: cdk.stringToCloudFormation(properties.dataSetArn),\n        DataSetPlaceholder: cdk.stringToCloudFormation(properties.dataSetPlaceholder),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardDataSetReferencePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboard.DataSetReferenceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboard.DataSetReferenceProperty>();\n    ret.addPropertyResult('dataSetArn', 'DataSetArn', cfn_parse.FromCloudFormation.getString(properties.DataSetArn));\n    ret.addPropertyResult('dataSetPlaceholder', 'DataSetPlaceholder', cfn_parse.FromCloudFormation.getString(properties.DataSetPlaceholder));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDashboard {\n                                                                                                                                                                                                                                           \n    export interface DateTimeParameterProperty {\n                                                                                                                                                                                                                                                                                   \n        readonly name: string;\n                                                                                                                                                                                                                                                                                 \n        readonly values: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DateTimeParameterProperty`\n *\n * @param properties - the TypeScript properties of a `DateTimeParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboard_DateTimeParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));\n    return errors.wrap('supplied properties not correct for \"DateTimeParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.DateTimeParameter` resource\n *\n * @param properties - the TypeScript properties of a `DateTimeParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.DateTimeParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardDateTimeParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboard_DateTimeParameterPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardDateTimeParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboard.DateTimeParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboard.DateTimeParameterProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getStringArray(properties.Values));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDashboard {\n                                                                                                                                                                                                                                        \n    export interface DecimalParameterProperty {\n                                                                                                                                                                                                                                                                               \n        readonly name: string;\n                                                                                                                                                                                                                                                                             \n        readonly values: number[] | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DecimalParameterProperty`\n *\n * @param properties - the TypeScript properties of a `DecimalParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboard_DecimalParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateNumber))(properties.values));\n    return errors.wrap('supplied properties not correct for \"DecimalParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.DecimalParameter` resource\n *\n * @param properties - the TypeScript properties of a `DecimalParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.DecimalParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardDecimalParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboard_DecimalParameterPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Values: cdk.listMapper(cdk.numberToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardDecimalParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboard.DecimalParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboard.DecimalParameterProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getNumber)(properties.Values));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDashboard {\n                                                                                                                                                                                                                                           \n    export interface ExportToCSVOptionProperty {\n                                                                                                                                                                                                                                                                          \n        readonly availabilityStatus?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ExportToCSVOptionProperty`\n *\n * @param properties - the TypeScript properties of a `ExportToCSVOptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboard_ExportToCSVOptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('availabilityStatus', cdk.validateString)(properties.availabilityStatus));\n    return errors.wrap('supplied properties not correct for \"ExportToCSVOptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.ExportToCSVOption` resource\n *\n * @param properties - the TypeScript properties of a `ExportToCSVOptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.ExportToCSVOption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardExportToCSVOptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboard_ExportToCSVOptionPropertyValidator(properties).assertSuccess();\n    return {\n        AvailabilityStatus: cdk.stringToCloudFormation(properties.availabilityStatus),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardExportToCSVOptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboard.ExportToCSVOptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboard.ExportToCSVOptionProperty>();\n    ret.addPropertyResult('availabilityStatus', 'AvailabilityStatus', properties.AvailabilityStatus != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityStatus) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDashboard {\n                                                                                                                                                                                                                                         \n    export interface IntegerParameterProperty {\n                                                                                                                                                                                                                                                                        \n        readonly name: string;\n                                                                                                                                                                                                                                                                             \n        readonly values: number[] | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IntegerParameterProperty`\n *\n * @param properties - the TypeScript properties of a `IntegerParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboard_IntegerParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateNumber))(properties.values));\n    return errors.wrap('supplied properties not correct for \"IntegerParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.IntegerParameter` resource\n *\n * @param properties - the TypeScript properties of a `IntegerParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.IntegerParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardIntegerParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboard_IntegerParameterPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Values: cdk.listMapper(cdk.numberToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardIntegerParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboard.IntegerParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboard.IntegerParameterProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getNumber)(properties.Values));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDashboard {\n                                                                                                                                                                                                                                                                                    \n    export interface ParametersProperty {\n                                                                                                                                                                                                                                                                                          \n        readonly dateTimeParameters?: Array<CfnDashboard.DateTimeParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                       \n        readonly decimalParameters?: Array<CfnDashboard.DecimalParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                       \n        readonly integerParameters?: Array<CfnDashboard.IntegerParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                     \n        readonly stringParameters?: Array<CfnDashboard.StringParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ParametersProperty`\n *\n * @param properties - the TypeScript properties of a `ParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboard_ParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dateTimeParameters', cdk.listValidator(CfnDashboard_DateTimeParameterPropertyValidator))(properties.dateTimeParameters));\n    errors.collect(cdk.propertyValidator('decimalParameters', cdk.listValidator(CfnDashboard_DecimalParameterPropertyValidator))(properties.decimalParameters));\n    errors.collect(cdk.propertyValidator('integerParameters', cdk.listValidator(CfnDashboard_IntegerParameterPropertyValidator))(properties.integerParameters));\n    errors.collect(cdk.propertyValidator('stringParameters', cdk.listValidator(CfnDashboard_StringParameterPropertyValidator))(properties.stringParameters));\n    return errors.wrap('supplied properties not correct for \"ParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.Parameters` resource\n *\n * @param properties - the TypeScript properties of a `ParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.Parameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboard_ParametersPropertyValidator(properties).assertSuccess();\n    return {\n        DateTimeParameters: cdk.listMapper(cfnDashboardDateTimeParameterPropertyToCloudFormation)(properties.dateTimeParameters),\n        DecimalParameters: cdk.listMapper(cfnDashboardDecimalParameterPropertyToCloudFormation)(properties.decimalParameters),\n        IntegerParameters: cdk.listMapper(cfnDashboardIntegerParameterPropertyToCloudFormation)(properties.integerParameters),\n        StringParameters: cdk.listMapper(cfnDashboardStringParameterPropertyToCloudFormation)(properties.stringParameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboard.ParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboard.ParametersProperty>();\n    ret.addPropertyResult('dateTimeParameters', 'DateTimeParameters', properties.DateTimeParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnDashboardDateTimeParameterPropertyFromCloudFormation)(properties.DateTimeParameters) : undefined);\n    ret.addPropertyResult('decimalParameters', 'DecimalParameters', properties.DecimalParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnDashboardDecimalParameterPropertyFromCloudFormation)(properties.DecimalParameters) : undefined);\n    ret.addPropertyResult('integerParameters', 'IntegerParameters', properties.IntegerParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnDashboardIntegerParameterPropertyFromCloudFormation)(properties.IntegerParameters) : undefined);\n    ret.addPropertyResult('stringParameters', 'StringParameters', properties.StringParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnDashboardStringParameterPropertyFromCloudFormation)(properties.StringParameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDashboard {\n                                                                                                                                                                                                                                                  \n    export interface ResourcePermissionProperty {\n                                                                                                                                                                                                                                                                                              \n        readonly actions: string[];\nn        readonly principal: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourcePermissionProperty`\n *\n * @param properties - the TypeScript properties of a `ResourcePermissionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboard_ResourcePermissionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.requiredValidator)(properties.actions));\n    errors.collect(cdk.propertyValidator('actions', cdk.listValidator(cdk.validateString))(properties.actions));\n    errors.collect(cdk.propertyValidator('principal', cdk.requiredValidator)(properties.principal));\n    errors.collect(cdk.propertyValidator('principal', cdk.validateString)(properties.principal));\n    return errors.wrap('supplied properties not correct for \"ResourcePermissionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.ResourcePermission` resource\n *\n * @param properties - the TypeScript properties of a `ResourcePermissionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.ResourcePermission` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardResourcePermissionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboard_ResourcePermissionPropertyValidator(properties).assertSuccess();\n    return {\n        Actions: cdk.listMapper(cdk.stringToCloudFormation)(properties.actions),\n        Principal: cdk.stringToCloudFormation(properties.principal),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardResourcePermissionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboard.ResourcePermissionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboard.ResourcePermissionProperty>();\n    ret.addPropertyResult('actions', 'Actions', cfn_parse.FromCloudFormation.getStringArray(properties.Actions));\n    ret.addPropertyResult('principal', 'Principal', cfn_parse.FromCloudFormation.getString(properties.Principal));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDashboard {\n                                                                                                                                                                                                                                             \n    export interface SheetControlsOptionProperty {\n                                                                                                                                                                                                                                                                        \n        readonly visibilityState?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SheetControlsOptionProperty`\n *\n * @param properties - the TypeScript properties of a `SheetControlsOptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboard_SheetControlsOptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('visibilityState', cdk.validateString)(properties.visibilityState));\n    return errors.wrap('supplied properties not correct for \"SheetControlsOptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.SheetControlsOption` resource\n *\n * @param properties - the TypeScript properties of a `SheetControlsOptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.SheetControlsOption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardSheetControlsOptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboard_SheetControlsOptionPropertyValidator(properties).assertSuccess();\n    return {\n        VisibilityState: cdk.stringToCloudFormation(properties.visibilityState),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardSheetControlsOptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboard.SheetControlsOptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboard.SheetControlsOptionProperty>();\n    ret.addPropertyResult('visibilityState', 'VisibilityState', properties.VisibilityState != null ? cfn_parse.FromCloudFormation.getString(properties.VisibilityState) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDashboard {\n                                                                                                                                                                                                                                      \n    export interface StringParameterProperty {\n                                                                                                                                                                                                                                                                          \n        readonly name: string;\n                                                                                                                                                                                                                                                                       \n        readonly values: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StringParameterProperty`\n *\n * @param properties - the TypeScript properties of a `StringParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDashboard_StringParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));\n    return errors.wrap('supplied properties not correct for \"StringParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.StringParameter` resource\n *\n * @param properties - the TypeScript properties of a `StringParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Dashboard.StringParameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDashboardStringParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDashboard_StringParameterPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDashboardStringParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDashboard.StringParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDashboard.StringParameterProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getStringArray(properties.Values));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                     \nexport interface CfnDataSetProps {\n\n                                                                                                                                                                                                     \n    readonly awsAccountId?: string;\n\n                                                                                                                                                                                                                                                                                                                   \n    readonly columnGroups?: Array<CfnDataSet.ColumnGroupProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                   \n    readonly columnLevelPermissionRules?: Array<CfnDataSet.ColumnLevelPermissionRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                    \n    readonly dataSetId?: string;\n\n                                                                                                                                                                                                                                                         \n    readonly fieldFolders?: { [key: string]: (CfnDataSet.FieldFolderProperty | cdk.IResolvable) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                         \n    readonly importMode?: string;\n\n                                                                                                                                                                                                                                                                                                                                   \n    readonly ingestionWaitPolicy?: CfnDataSet.IngestionWaitPolicyProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                        \n    readonly logicalTableMap?: { [key: string]: (CfnDataSet.LogicalTableProperty | cdk.IResolvable) } | cdk.IResolvable;\n\n                                                                                                                                                                                                           \n    readonly name?: string;\n\n                                                                                                                                                                                                                               \n    readonly permissions?: Array<CfnDataSet.ResourcePermissionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                     \n    readonly physicalTableMap?: { [key: string]: (CfnDataSet.PhysicalTableProperty | cdk.IResolvable) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                         \n    readonly rowLevelPermissionDataSet?: CfnDataSet.RowLevelPermissionDataSetProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                     \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDataSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnDataSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('awsAccountId', cdk.validateString)(properties.awsAccountId));\n    errors.collect(cdk.propertyValidator('columnGroups', cdk.listValidator(CfnDataSet_ColumnGroupPropertyValidator))(properties.columnGroups));\n    errors.collect(cdk.propertyValidator('columnLevelPermissionRules', cdk.listValidator(CfnDataSet_ColumnLevelPermissionRulePropertyValidator))(properties.columnLevelPermissionRules));\n    errors.collect(cdk.propertyValidator('dataSetId', cdk.validateString)(properties.dataSetId));\n    errors.collect(cdk.propertyValidator('fieldFolders', cdk.hashValidator(CfnDataSet_FieldFolderPropertyValidator))(properties.fieldFolders));\n    errors.collect(cdk.propertyValidator('importMode', cdk.validateString)(properties.importMode));\n    errors.collect(cdk.propertyValidator('ingestionWaitPolicy', CfnDataSet_IngestionWaitPolicyPropertyValidator)(properties.ingestionWaitPolicy));\n    errors.collect(cdk.propertyValidator('logicalTableMap', cdk.hashValidator(CfnDataSet_LogicalTablePropertyValidator))(properties.logicalTableMap));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('permissions', cdk.listValidator(CfnDataSet_ResourcePermissionPropertyValidator))(properties.permissions));\n    errors.collect(cdk.propertyValidator('physicalTableMap', cdk.hashValidator(CfnDataSet_PhysicalTablePropertyValidator))(properties.physicalTableMap));\n    errors.collect(cdk.propertyValidator('rowLevelPermissionDataSet', CfnDataSet_RowLevelPermissionDataSetPropertyValidator)(properties.rowLevelPermissionDataSet));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDataSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnDataSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSetPropsValidator(properties).assertSuccess();\n    return {\n        AwsAccountId: cdk.stringToCloudFormation(properties.awsAccountId),\n        ColumnGroups: cdk.listMapper(cfnDataSetColumnGroupPropertyToCloudFormation)(properties.columnGroups),\n        ColumnLevelPermissionRules: cdk.listMapper(cfnDataSetColumnLevelPermissionRulePropertyToCloudFormation)(properties.columnLevelPermissionRules),\n        DataSetId: cdk.stringToCloudFormation(properties.dataSetId),\n        FieldFolders: cdk.hashMapper(cfnDataSetFieldFolderPropertyToCloudFormation)(properties.fieldFolders),\n        ImportMode: cdk.stringToCloudFormation(properties.importMode),\n        IngestionWaitPolicy: cfnDataSetIngestionWaitPolicyPropertyToCloudFormation(properties.ingestionWaitPolicy),\n        LogicalTableMap: cdk.hashMapper(cfnDataSetLogicalTablePropertyToCloudFormation)(properties.logicalTableMap),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Permissions: cdk.listMapper(cfnDataSetResourcePermissionPropertyToCloudFormation)(properties.permissions),\n        PhysicalTableMap: cdk.hashMapper(cfnDataSetPhysicalTablePropertyToCloudFormation)(properties.physicalTableMap),\n        RowLevelPermissionDataSet: cfnDataSetRowLevelPermissionDataSetPropertyToCloudFormation(properties.rowLevelPermissionDataSet),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSetProps>();\n    ret.addPropertyResult('awsAccountId', 'AwsAccountId', properties.AwsAccountId != null ? cfn_parse.FromCloudFormation.getString(properties.AwsAccountId) : undefined);\n    ret.addPropertyResult('columnGroups', 'ColumnGroups', properties.ColumnGroups != null ? cfn_parse.FromCloudFormation.getArray(CfnDataSetColumnGroupPropertyFromCloudFormation)(properties.ColumnGroups) : undefined);\n    ret.addPropertyResult('columnLevelPermissionRules', 'ColumnLevelPermissionRules', properties.ColumnLevelPermissionRules != null ? cfn_parse.FromCloudFormation.getArray(CfnDataSetColumnLevelPermissionRulePropertyFromCloudFormation)(properties.ColumnLevelPermissionRules) : undefined);\n    ret.addPropertyResult('dataSetId', 'DataSetId', properties.DataSetId != null ? cfn_parse.FromCloudFormation.getString(properties.DataSetId) : undefined);\n    ret.addPropertyResult('fieldFolders', 'FieldFolders', properties.FieldFolders != null ? cfn_parse.FromCloudFormation.getMap(CfnDataSetFieldFolderPropertyFromCloudFormation)(properties.FieldFolders) : undefined);\n    ret.addPropertyResult('importMode', 'ImportMode', properties.ImportMode != null ? cfn_parse.FromCloudFormation.getString(properties.ImportMode) : undefined);\n    ret.addPropertyResult('ingestionWaitPolicy', 'IngestionWaitPolicy', properties.IngestionWaitPolicy != null ? CfnDataSetIngestionWaitPolicyPropertyFromCloudFormation(properties.IngestionWaitPolicy) : undefined);\n    ret.addPropertyResult('logicalTableMap', 'LogicalTableMap', properties.LogicalTableMap != null ? cfn_parse.FromCloudFormation.getMap(CfnDataSetLogicalTablePropertyFromCloudFormation)(properties.LogicalTableMap) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('permissions', 'Permissions', properties.Permissions != null ? cfn_parse.FromCloudFormation.getArray(CfnDataSetResourcePermissionPropertyFromCloudFormation)(properties.Permissions) : undefined);\n    ret.addPropertyResult('physicalTableMap', 'PhysicalTableMap', properties.PhysicalTableMap != null ? cfn_parse.FromCloudFormation.getMap(CfnDataSetPhysicalTablePropertyFromCloudFormation)(properties.PhysicalTableMap) : undefined);\n    ret.addPropertyResult('rowLevelPermissionDataSet', 'RowLevelPermissionDataSet', properties.RowLevelPermissionDataSet != null ? CfnDataSetRowLevelPermissionDataSetPropertyFromCloudFormation(properties.RowLevelPermissionDataSet) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                             \nexport class CfnDataSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::QuickSight::DataSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDataSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDataSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDataSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                         \n    public readonly attrArn: string;\n\n                                                                                   \n    public readonly attrConsumedSpiceCapacityInBytes: cdk.IResolvable;\n\n                                                                                                             \n    public readonly attrCreatedTime: string;\n\n                                                                                                                      \n    public readonly attrLastUpdatedTime: string;\n\n                                                                    \n    public readonly attrOutputColumns: cdk.IResolvable;\n\n                                                                                                                                                                                                     \n    public awsAccountId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                   \n    public columnGroups: Array<CfnDataSet.ColumnGroupProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                   \n    public columnLevelPermissionRules: Array<CfnDataSet.ColumnLevelPermissionRuleProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                    \n    public dataSetId: string | undefined;\n\n                                                                                                                                                                                                                                                         \n    public fieldFolders: { [key: string]: (CfnDataSet.FieldFolderProperty | cdk.IResolvable) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                         \n    public importMode: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                   \n    public ingestionWaitPolicy: CfnDataSet.IngestionWaitPolicyProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                        \n    public logicalTableMap: { [key: string]: (CfnDataSet.LogicalTableProperty | cdk.IResolvable) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                           \n    public name: string | undefined;\n\n                                                                                                                                                                                                                               \n    public permissions: Array<CfnDataSet.ResourcePermissionProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                     \n    public physicalTableMap: { [key: string]: (CfnDataSet.PhysicalTableProperty | cdk.IResolvable) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                         \n    public rowLevelPermissionDataSet: CfnDataSet.RowLevelPermissionDataSetProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                     \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnDataSetProps = {}) {\n        super(scope, id, { type: CfnDataSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrConsumedSpiceCapacityInBytes = this.getAtt('ConsumedSpiceCapacityInBytes');\n        this.attrCreatedTime = cdk.Token.asString(this.getAtt('CreatedTime'));\n        this.attrLastUpdatedTime = cdk.Token.asString(this.getAtt('LastUpdatedTime'));\n        this.attrOutputColumns = this.getAtt('OutputColumns');\n\n        this.awsAccountId = props.awsAccountId;\n        this.columnGroups = props.columnGroups;\n        this.columnLevelPermissionRules = props.columnLevelPermissionRules;\n        this.dataSetId = props.dataSetId;\n        this.fieldFolders = props.fieldFolders;\n        this.importMode = props.importMode;\n        this.ingestionWaitPolicy = props.ingestionWaitPolicy;\n        this.logicalTableMap = props.logicalTableMap;\n        this.name = props.name;\n        this.permissions = props.permissions;\n        this.physicalTableMap = props.physicalTableMap;\n        this.rowLevelPermissionDataSet = props.rowLevelPermissionDataSet;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::QuickSight::DataSet\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDataSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            awsAccountId: this.awsAccountId,\n            columnGroups: this.columnGroups,\n            columnLevelPermissionRules: this.columnLevelPermissionRules,\n            dataSetId: this.dataSetId,\n            fieldFolders: this.fieldFolders,\n            importMode: this.importMode,\n            ingestionWaitPolicy: this.ingestionWaitPolicy,\n            logicalTableMap: this.logicalTableMap,\n            name: this.name,\n            permissions: this.permissions,\n            physicalTableMap: this.physicalTableMap,\n            rowLevelPermissionDataSet: this.rowLevelPermissionDataSet,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDataSetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                    \n    export interface CalculatedColumnProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly columnId: string;\n                                                                                                                                                                                                                                                    \n        readonly columnName: string;\n                                                                                                                                                                                                                                                                                         \n        readonly expression: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CalculatedColumnProperty`\n *\n * @param properties - the TypeScript properties of a `CalculatedColumnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_CalculatedColumnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('columnId', cdk.requiredValidator)(properties.columnId));\n    errors.collect(cdk.propertyValidator('columnId', cdk.validateString)(properties.columnId));\n    errors.collect(cdk.propertyValidator('columnName', cdk.requiredValidator)(properties.columnName));\n    errors.collect(cdk.propertyValidator('columnName', cdk.validateString)(properties.columnName));\n    errors.collect(cdk.propertyValidator('expression', cdk.requiredValidator)(properties.expression));\n    errors.collect(cdk.propertyValidator('expression', cdk.validateString)(properties.expression));\n    return errors.wrap('supplied properties not correct for \"CalculatedColumnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.CalculatedColumn` resource\n *\n * @param properties - the TypeScript properties of a `CalculatedColumnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.CalculatedColumn` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetCalculatedColumnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_CalculatedColumnPropertyValidator(properties).assertSuccess();\n    return {\n        ColumnId: cdk.stringToCloudFormation(properties.columnId),\n        ColumnName: cdk.stringToCloudFormation(properties.columnName),\n        Expression: cdk.stringToCloudFormation(properties.expression),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetCalculatedColumnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.CalculatedColumnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.CalculatedColumnProperty>();\n    ret.addPropertyResult('columnId', 'ColumnId', cfn_parse.FromCloudFormation.getString(properties.ColumnId));\n    ret.addPropertyResult('columnName', 'ColumnName', cfn_parse.FromCloudFormation.getString(properties.ColumnName));\n    ret.addPropertyResult('expression', 'Expression', cfn_parse.FromCloudFormation.getString(properties.Expression));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                       \n    export interface CastColumnTypeOperationProperty {\n                                                                                                                                                                                                                                                                  \n        readonly columnName: string;\n                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly format?: string;\n                                                                                                                                                                                                                                                                              \n        readonly newColumnType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CastColumnTypeOperationProperty`\n *\n * @param properties - the TypeScript properties of a `CastColumnTypeOperationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_CastColumnTypeOperationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('columnName', cdk.requiredValidator)(properties.columnName));\n    errors.collect(cdk.propertyValidator('columnName', cdk.validateString)(properties.columnName));\n    errors.collect(cdk.propertyValidator('format', cdk.validateString)(properties.format));\n    errors.collect(cdk.propertyValidator('newColumnType', cdk.requiredValidator)(properties.newColumnType));\n    errors.collect(cdk.propertyValidator('newColumnType', cdk.validateString)(properties.newColumnType));\n    return errors.wrap('supplied properties not correct for \"CastColumnTypeOperationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.CastColumnTypeOperation` resource\n *\n * @param properties - the TypeScript properties of a `CastColumnTypeOperationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.CastColumnTypeOperation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetCastColumnTypeOperationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_CastColumnTypeOperationPropertyValidator(properties).assertSuccess();\n    return {\n        ColumnName: cdk.stringToCloudFormation(properties.columnName),\n        Format: cdk.stringToCloudFormation(properties.format),\n        NewColumnType: cdk.stringToCloudFormation(properties.newColumnType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetCastColumnTypeOperationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.CastColumnTypeOperationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.CastColumnTypeOperationProperty>();\n    ret.addPropertyResult('columnName', 'ColumnName', cfn_parse.FromCloudFormation.getString(properties.ColumnName));\n    ret.addPropertyResult('format', 'Format', properties.Format != null ? cfn_parse.FromCloudFormation.getString(properties.Format) : undefined);\n    ret.addPropertyResult('newColumnType', 'NewColumnType', cfn_parse.FromCloudFormation.getString(properties.NewColumnType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                     \n    export interface ColumnDescriptionProperty {\n                                                                                                                                                                                                                                                                           \n        readonly text?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ColumnDescriptionProperty`\n *\n * @param properties - the TypeScript properties of a `ColumnDescriptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_ColumnDescriptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('text', cdk.validateString)(properties.text));\n    return errors.wrap('supplied properties not correct for \"ColumnDescriptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.ColumnDescription` resource\n *\n * @param properties - the TypeScript properties of a `ColumnDescriptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.ColumnDescription` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetColumnDescriptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_ColumnDescriptionPropertyValidator(properties).assertSuccess();\n    return {\n        Text: cdk.stringToCloudFormation(properties.text),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetColumnDescriptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.ColumnDescriptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.ColumnDescriptionProperty>();\n    ret.addPropertyResult('text', 'Text', properties.Text != null ? cfn_parse.FromCloudFormation.getString(properties.Text) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface ColumnGroupProperty {\n                                                                                                                                                                                                                                                                                          \n        readonly geoSpatialColumnGroup?: CfnDataSet.GeoSpatialColumnGroupProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ColumnGroupProperty`\n *\n * @param properties - the TypeScript properties of a `ColumnGroupProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_ColumnGroupPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('geoSpatialColumnGroup', CfnDataSet_GeoSpatialColumnGroupPropertyValidator)(properties.geoSpatialColumnGroup));\n    return errors.wrap('supplied properties not correct for \"ColumnGroupProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.ColumnGroup` resource\n *\n * @param properties - the TypeScript properties of a `ColumnGroupProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.ColumnGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetColumnGroupPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_ColumnGroupPropertyValidator(properties).assertSuccess();\n    return {\n        GeoSpatialColumnGroup: cfnDataSetGeoSpatialColumnGroupPropertyToCloudFormation(properties.geoSpatialColumnGroup),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetColumnGroupPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.ColumnGroupProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.ColumnGroupProperty>();\n    ret.addPropertyResult('geoSpatialColumnGroup', 'GeoSpatialColumnGroup', properties.GeoSpatialColumnGroup != null ? CfnDataSetGeoSpatialColumnGroupPropertyFromCloudFormation(properties.GeoSpatialColumnGroup) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\nn    export interface ColumnLevelPermissionRuleProperty {\n                                                                                                                                                                                                                                                                                    \n        readonly columnNames?: string[];\n                                                                                                                                                                                                                                                                                                                                         \n        readonly principals?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ColumnLevelPermissionRuleProperty`\n *\n * @param properties - the TypeScript properties of a `ColumnLevelPermissionRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_ColumnLevelPermissionRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('columnNames', cdk.listValidator(cdk.validateString))(properties.columnNames));\n    errors.collect(cdk.propertyValidator('principals', cdk.listValidator(cdk.validateString))(properties.principals));\n    return errors.wrap('supplied properties not correct for \"ColumnLevelPermissionRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.ColumnLevelPermissionRule` resource\n *\n * @param properties - the TypeScript properties of a `ColumnLevelPermissionRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.ColumnLevelPermissionRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetColumnLevelPermissionRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_ColumnLevelPermissionRulePropertyValidator(properties).assertSuccess();\n    return {\n        ColumnNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.columnNames),\n        Principals: cdk.listMapper(cdk.stringToCloudFormation)(properties.principals),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetColumnLevelPermissionRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.ColumnLevelPermissionRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.ColumnLevelPermissionRuleProperty>();\n    ret.addPropertyResult('columnNames', 'ColumnNames', properties.ColumnNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ColumnNames) : undefined);\n    ret.addPropertyResult('principals', 'Principals', properties.Principals != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Principals) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface ColumnTagProperty {\n                                                                                                                                                                                                                                                            \n        readonly columnDescription?: CfnDataSet.ColumnDescriptionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                   \n        readonly columnGeographicRole?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ColumnTagProperty`\n *\n * @param properties - the TypeScript properties of a `ColumnTagProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_ColumnTagPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('columnDescription', CfnDataSet_ColumnDescriptionPropertyValidator)(properties.columnDescription));\n    errors.collect(cdk.propertyValidator('columnGeographicRole', cdk.validateString)(properties.columnGeographicRole));\n    return errors.wrap('supplied properties not correct for \"ColumnTagProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.ColumnTag` resource\n *\n * @param properties - the TypeScript properties of a `ColumnTagProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.ColumnTag` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetColumnTagPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_ColumnTagPropertyValidator(properties).assertSuccess();\n    return {\n        ColumnDescription: cfnDataSetColumnDescriptionPropertyToCloudFormation(properties.columnDescription),\n        ColumnGeographicRole: cdk.stringToCloudFormation(properties.columnGeographicRole),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetColumnTagPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.ColumnTagProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.ColumnTagProperty>();\n    ret.addPropertyResult('columnDescription', 'ColumnDescription', properties.ColumnDescription != null ? CfnDataSetColumnDescriptionPropertyFromCloudFormation(properties.ColumnDescription) : undefined);\n    ret.addPropertyResult('columnGeographicRole', 'ColumnGeographicRole', properties.ColumnGeographicRole != null ? cfn_parse.FromCloudFormation.getString(properties.ColumnGeographicRole) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                                                                            \n    export interface CreateColumnsOperationProperty {\n                                                                                                                                                                                                                                                                              \n        readonly columns: Array<CfnDataSet.CalculatedColumnProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CreateColumnsOperationProperty`\n *\n * @param properties - the TypeScript properties of a `CreateColumnsOperationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_CreateColumnsOperationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('columns', cdk.requiredValidator)(properties.columns));\n    errors.collect(cdk.propertyValidator('columns', cdk.listValidator(CfnDataSet_CalculatedColumnPropertyValidator))(properties.columns));\n    return errors.wrap('supplied properties not correct for \"CreateColumnsOperationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.CreateColumnsOperation` resource\n *\n * @param properties - the TypeScript properties of a `CreateColumnsOperationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.CreateColumnsOperation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetCreateColumnsOperationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_CreateColumnsOperationPropertyValidator(properties).assertSuccess();\n    return {\n        Columns: cdk.listMapper(cfnDataSetCalculatedColumnPropertyToCloudFormation)(properties.columns),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetCreateColumnsOperationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.CreateColumnsOperationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.CreateColumnsOperationProperty>();\n    ret.addPropertyResult('columns', 'Columns', cfn_parse.FromCloudFormation.getArray(CfnDataSetCalculatedColumnPropertyFromCloudFormation)(properties.Columns));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                \n    export interface CustomSqlProperty {\n                                                                                                                                                                                                                                                                       \n        readonly columns: Array<CfnDataSet.InputColumnProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                               \n        readonly dataSourceArn: string;\n                                                                                                                                                                                                                                                            \n        readonly name: string;\n                                                                                                                                                                                                                                      \n        readonly sqlQuery: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomSqlProperty`\n *\n * @param properties - the TypeScript properties of a `CustomSqlProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_CustomSqlPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('columns', cdk.requiredValidator)(properties.columns));\n    errors.collect(cdk.propertyValidator('columns', cdk.listValidator(CfnDataSet_InputColumnPropertyValidator))(properties.columns));\n    errors.collect(cdk.propertyValidator('dataSourceArn', cdk.requiredValidator)(properties.dataSourceArn));\n    errors.collect(cdk.propertyValidator('dataSourceArn', cdk.validateString)(properties.dataSourceArn));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('sqlQuery', cdk.requiredValidator)(properties.sqlQuery));\n    errors.collect(cdk.propertyValidator('sqlQuery', cdk.validateString)(properties.sqlQuery));\n    return errors.wrap('supplied properties not correct for \"CustomSqlProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.CustomSql` resource\n *\n * @param properties - the TypeScript properties of a `CustomSqlProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.CustomSql` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetCustomSqlPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_CustomSqlPropertyValidator(properties).assertSuccess();\n    return {\n        Columns: cdk.listMapper(cfnDataSetInputColumnPropertyToCloudFormation)(properties.columns),\n        DataSourceArn: cdk.stringToCloudFormation(properties.dataSourceArn),\n        Name: cdk.stringToCloudFormation(properties.name),\n        SqlQuery: cdk.stringToCloudFormation(properties.sqlQuery),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetCustomSqlPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.CustomSqlProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.CustomSqlProperty>();\n    ret.addPropertyResult('columns', 'Columns', cfn_parse.FromCloudFormation.getArray(CfnDataSetInputColumnPropertyFromCloudFormation)(properties.Columns));\n    ret.addPropertyResult('dataSourceArn', 'DataSourceArn', cfn_parse.FromCloudFormation.getString(properties.DataSourceArn));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('sqlQuery', 'SqlQuery', cfn_parse.FromCloudFormation.getString(properties.SqlQuery));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                          \n    export interface FieldFolderProperty {\n                                                                                                                                                                                                                                                                                              \n        readonly columns?: string[];\n                                                                                                                                                                                                                                                                  \n        readonly description?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FieldFolderProperty`\n *\n * @param properties - the TypeScript properties of a `FieldFolderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_FieldFolderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('columns', cdk.listValidator(cdk.validateString))(properties.columns));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    return errors.wrap('supplied properties not correct for \"FieldFolderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.FieldFolder` resource\n *\n * @param properties - the TypeScript properties of a `FieldFolderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.FieldFolder` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetFieldFolderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_FieldFolderPropertyValidator(properties).assertSuccess();\n    return {\n        Columns: cdk.listMapper(cdk.stringToCloudFormation)(properties.columns),\n        Description: cdk.stringToCloudFormation(properties.description),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetFieldFolderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.FieldFolderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.FieldFolderProperty>();\n    ret.addPropertyResult('columns', 'Columns', properties.Columns != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Columns) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                              \n    export interface FilterOperationProperty {\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly conditionExpression: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FilterOperationProperty`\n *\n * @param properties - the TypeScript properties of a `FilterOperationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_FilterOperationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('conditionExpression', cdk.requiredValidator)(properties.conditionExpression));\n    errors.collect(cdk.propertyValidator('conditionExpression', cdk.validateString)(properties.conditionExpression));\n    return errors.wrap('supplied properties not correct for \"FilterOperationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.FilterOperation` resource\n *\n * @param properties - the TypeScript properties of a `FilterOperationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.FilterOperation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetFilterOperationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_FilterOperationPropertyValidator(properties).assertSuccess();\n    return {\n        ConditionExpression: cdk.stringToCloudFormation(properties.conditionExpression),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetFilterOperationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.FilterOperationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.FilterOperationProperty>();\n    ret.addPropertyResult('conditionExpression', 'ConditionExpression', cfn_parse.FromCloudFormation.getString(properties.ConditionExpression));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                        \n    export interface GeoSpatialColumnGroupProperty {\n                                                                                                                                                                                                                                                                         \n        readonly columns: string[];\n                                                                                                                                                                                                                                                                \n        readonly countryCode?: string;\n                                                                                                                                                                                                                                                                             \n        readonly name: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GeoSpatialColumnGroupProperty`\n *\n * @param properties - the TypeScript properties of a `GeoSpatialColumnGroupProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_GeoSpatialColumnGroupPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('columns', cdk.requiredValidator)(properties.columns));\n    errors.collect(cdk.propertyValidator('columns', cdk.listValidator(cdk.validateString))(properties.columns));\n    errors.collect(cdk.propertyValidator('countryCode', cdk.validateString)(properties.countryCode));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"GeoSpatialColumnGroupProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.GeoSpatialColumnGroup` resource\n *\n * @param properties - the TypeScript properties of a `GeoSpatialColumnGroupProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.GeoSpatialColumnGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetGeoSpatialColumnGroupPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_GeoSpatialColumnGroupPropertyValidator(properties).assertSuccess();\n    return {\n        Columns: cdk.listMapper(cdk.stringToCloudFormation)(properties.columns),\n        CountryCode: cdk.stringToCloudFormation(properties.countryCode),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetGeoSpatialColumnGroupPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.GeoSpatialColumnGroupProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.GeoSpatialColumnGroupProperty>();\n    ret.addPropertyResult('columns', 'Columns', cfn_parse.FromCloudFormation.getStringArray(properties.Columns));\n    ret.addPropertyResult('countryCode', 'CountryCode', properties.CountryCode != null ? cfn_parse.FromCloudFormation.getString(properties.CountryCode) : undefined);\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                                                                                               \n    export interface IngestionWaitPolicyProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly ingestionWaitTimeInHours?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly waitForSpiceIngestion?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IngestionWaitPolicyProperty`\n *\n * @param properties - the TypeScript properties of a `IngestionWaitPolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_IngestionWaitPolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ingestionWaitTimeInHours', cdk.validateNumber)(properties.ingestionWaitTimeInHours));\n    errors.collect(cdk.propertyValidator('waitForSpiceIngestion', cdk.validateBoolean)(properties.waitForSpiceIngestion));\n    return errors.wrap('supplied properties not correct for \"IngestionWaitPolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.IngestionWaitPolicy` resource\n *\n * @param properties - the TypeScript properties of a `IngestionWaitPolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.IngestionWaitPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetIngestionWaitPolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_IngestionWaitPolicyPropertyValidator(properties).assertSuccess();\n    return {\n        IngestionWaitTimeInHours: cdk.numberToCloudFormation(properties.ingestionWaitTimeInHours),\n        WaitForSpiceIngestion: cdk.booleanToCloudFormation(properties.waitForSpiceIngestion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetIngestionWaitPolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.IngestionWaitPolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.IngestionWaitPolicyProperty>();\n    ret.addPropertyResult('ingestionWaitTimeInHours', 'IngestionWaitTimeInHours', properties.IngestionWaitTimeInHours != null ? cfn_parse.FromCloudFormation.getNumber(properties.IngestionWaitTimeInHours) : undefined);\n    ret.addPropertyResult('waitForSpiceIngestion', 'WaitForSpiceIngestion', properties.WaitForSpiceIngestion != null ? cfn_parse.FromCloudFormation.getBoolean(properties.WaitForSpiceIngestion) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                      \n    export interface InputColumnProperty {\n                                                                                                                                                                                                                                                                              \n        readonly name: string;\n                                                                                                                                                                                                                                                    \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InputColumnProperty`\n *\n * @param properties - the TypeScript properties of a `InputColumnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_InputColumnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"InputColumnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.InputColumn` resource\n *\n * @param properties - the TypeScript properties of a `InputColumnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.InputColumn` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetInputColumnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_InputColumnPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetInputColumnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.InputColumnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.InputColumnProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                         \n    export interface JoinInstructionProperty {\n                                                                                                                                                                                                                                                                                         \n        readonly leftJoinKeyProperties?: CfnDataSet.JoinKeyPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                              \n        readonly leftOperand: string;\n                                                                                                                                                                                                                                                                                                \n        readonly onClause: string;\n                                                                                                                                                                                                                                                                                           \n        readonly rightJoinKeyProperties?: CfnDataSet.JoinKeyPropertiesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                \n        readonly rightOperand: string;\n                                                                                                                                                                                                                                                            \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `JoinInstructionProperty`\n *\n * @param properties - the TypeScript properties of a `JoinInstructionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_JoinInstructionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('leftJoinKeyProperties', CfnDataSet_JoinKeyPropertiesPropertyValidator)(properties.leftJoinKeyProperties));\n    errors.collect(cdk.propertyValidator('leftOperand', cdk.requiredValidator)(properties.leftOperand));\n    errors.collect(cdk.propertyValidator('leftOperand', cdk.validateString)(properties.leftOperand));\n    errors.collect(cdk.propertyValidator('onClause', cdk.requiredValidator)(properties.onClause));\n    errors.collect(cdk.propertyValidator('onClause', cdk.validateString)(properties.onClause));\n    errors.collect(cdk.propertyValidator('rightJoinKeyProperties', CfnDataSet_JoinKeyPropertiesPropertyValidator)(properties.rightJoinKeyProperties));\n    errors.collect(cdk.propertyValidator('rightOperand', cdk.requiredValidator)(properties.rightOperand));\n    errors.collect(cdk.propertyValidator('rightOperand', cdk.validateString)(properties.rightOperand));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"JoinInstructionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.JoinInstruction` resource\n *\n * @param properties - the TypeScript properties of a `JoinInstructionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.JoinInstruction` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetJoinInstructionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_JoinInstructionPropertyValidator(properties).assertSuccess();\n    return {\n        LeftJoinKeyProperties: cfnDataSetJoinKeyPropertiesPropertyToCloudFormation(properties.leftJoinKeyProperties),\n        LeftOperand: cdk.stringToCloudFormation(properties.leftOperand),\n        OnClause: cdk.stringToCloudFormation(properties.onClause),\n        RightJoinKeyProperties: cfnDataSetJoinKeyPropertiesPropertyToCloudFormation(properties.rightJoinKeyProperties),\n        RightOperand: cdk.stringToCloudFormation(properties.rightOperand),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetJoinInstructionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.JoinInstructionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.JoinInstructionProperty>();\n    ret.addPropertyResult('leftJoinKeyProperties', 'LeftJoinKeyProperties', properties.LeftJoinKeyProperties != null ? CfnDataSetJoinKeyPropertiesPropertyFromCloudFormation(properties.LeftJoinKeyProperties) : undefined);\n    ret.addPropertyResult('leftOperand', 'LeftOperand', cfn_parse.FromCloudFormation.getString(properties.LeftOperand));\n    ret.addPropertyResult('onClause', 'OnClause', cfn_parse.FromCloudFormation.getString(properties.OnClause));\n    ret.addPropertyResult('rightJoinKeyProperties', 'RightJoinKeyProperties', properties.RightJoinKeyProperties != null ? CfnDataSetJoinKeyPropertiesPropertyFromCloudFormation(properties.RightJoinKeyProperties) : undefined);\n    ret.addPropertyResult('rightOperand', 'RightOperand', cfn_parse.FromCloudFormation.getString(properties.RightOperand));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                  \n    export interface JoinKeyPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly uniqueKey?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `JoinKeyPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `JoinKeyPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_JoinKeyPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('uniqueKey', cdk.validateBoolean)(properties.uniqueKey));\n    return errors.wrap('supplied properties not correct for \"JoinKeyPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.JoinKeyProperties` resource\n *\n * @param properties - the TypeScript properties of a `JoinKeyPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.JoinKeyProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetJoinKeyPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_JoinKeyPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        UniqueKey: cdk.booleanToCloudFormation(properties.uniqueKey),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetJoinKeyPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.JoinKeyPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.JoinKeyPropertiesProperty>();\n    ret.addPropertyResult('uniqueKey', 'UniqueKey', properties.UniqueKey != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UniqueKey) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\nn    export interface LogicalTableProperty {\n                                                                                                                                                                                                                                                                \n        readonly alias: string;\n                                                                                                                                                                                                                                                                                        \n        readonly dataTransforms?: Array<CfnDataSet.TransformOperationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                         \n        readonly source: CfnDataSet.LogicalTableSourceProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogicalTableProperty`\n *\n * @param properties - the TypeScript properties of a `LogicalTableProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_LogicalTablePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alias', cdk.requiredValidator)(properties.alias));\n    errors.collect(cdk.propertyValidator('alias', cdk.validateString)(properties.alias));\n    errors.collect(cdk.propertyValidator('dataTransforms', cdk.listValidator(CfnDataSet_TransformOperationPropertyValidator))(properties.dataTransforms));\n    errors.collect(cdk.propertyValidator('source', cdk.requiredValidator)(properties.source));\n    errors.collect(cdk.propertyValidator('source', CfnDataSet_LogicalTableSourcePropertyValidator)(properties.source));\n    return errors.wrap('supplied properties not correct for \"LogicalTableProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.LogicalTable` resource\n *\n * @param properties - the TypeScript properties of a `LogicalTableProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.LogicalTable` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetLogicalTablePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_LogicalTablePropertyValidator(properties).assertSuccess();\n    return {\n        Alias: cdk.stringToCloudFormation(properties.alias),\n        DataTransforms: cdk.listMapper(cfnDataSetTransformOperationPropertyToCloudFormation)(properties.dataTransforms),\n        Source: cfnDataSetLogicalTableSourcePropertyToCloudFormation(properties.source),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetLogicalTablePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.LogicalTableProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.LogicalTableProperty>();\n    ret.addPropertyResult('alias', 'Alias', cfn_parse.FromCloudFormation.getString(properties.Alias));\n    ret.addPropertyResult('dataTransforms', 'DataTransforms', properties.DataTransforms != null ? cfn_parse.FromCloudFormation.getArray(CfnDataSetTransformOperationPropertyFromCloudFormation)(properties.DataTransforms) : undefined);\n    ret.addPropertyResult('source', 'Source', CfnDataSetLogicalTableSourcePropertyFromCloudFormation(properties.Source));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface LogicalTableSourceProperty {\n                                                                                                                                                                                                                                                                                                      \n        readonly joinInstruction?: CfnDataSet.JoinInstructionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                   \n        readonly physicalTableId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogicalTableSourceProperty`\n *\n * @param properties - the TypeScript properties of a `LogicalTableSourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_LogicalTableSourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('joinInstruction', CfnDataSet_JoinInstructionPropertyValidator)(properties.joinInstruction));\n    errors.collect(cdk.propertyValidator('physicalTableId', cdk.validateString)(properties.physicalTableId));\n    return errors.wrap('supplied properties not correct for \"LogicalTableSourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.LogicalTableSource` resource\n *\n * @param properties - the TypeScript properties of a `LogicalTableSourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.LogicalTableSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetLogicalTableSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_LogicalTableSourcePropertyValidator(properties).assertSuccess();\n    return {\n        JoinInstruction: cfnDataSetJoinInstructionPropertyToCloudFormation(properties.joinInstruction),\n        PhysicalTableId: cdk.stringToCloudFormation(properties.physicalTableId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetLogicalTableSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.LogicalTableSourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.LogicalTableSourceProperty>();\n    ret.addPropertyResult('joinInstruction', 'JoinInstruction', properties.JoinInstruction != null ? CfnDataSetJoinInstructionPropertyFromCloudFormation(properties.JoinInstruction) : undefined);\n    ret.addPropertyResult('physicalTableId', 'PhysicalTableId', properties.PhysicalTableId != null ? cfn_parse.FromCloudFormation.getString(properties.PhysicalTableId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                            \n    export interface OutputColumnProperty {\n                                                                                                                                                                                                                                                            \n        readonly description?: string;\n                                                                                                                                                                                                                                                         \n        readonly name?: string;\n                                                                                                                                                                                                                               \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OutputColumnProperty`\n *\n * @param properties - the TypeScript properties of a `OutputColumnProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_OutputColumnPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"OutputColumnProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.OutputColumn` resource\n *\n * @param properties - the TypeScript properties of a `OutputColumnProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.OutputColumn` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetOutputColumnPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_OutputColumnPropertyValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetOutputColumnPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.OutputColumnProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.OutputColumnProperty>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface PhysicalTableProperty {\n                                                                                                                                                                                                                                                                                                      \n        readonly customSql?: CfnDataSet.CustomSqlProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly relationalTable?: CfnDataSet.RelationalTableProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                            \n        readonly s3Source?: CfnDataSet.S3SourceProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PhysicalTableProperty`\n *\n * @param properties - the TypeScript properties of a `PhysicalTableProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_PhysicalTablePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('customSql', CfnDataSet_CustomSqlPropertyValidator)(properties.customSql));\n    errors.collect(cdk.propertyValidator('relationalTable', CfnDataSet_RelationalTablePropertyValidator)(properties.relationalTable));\n    errors.collect(cdk.propertyValidator('s3Source', CfnDataSet_S3SourcePropertyValidator)(properties.s3Source));\n    return errors.wrap('supplied properties not correct for \"PhysicalTableProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.PhysicalTable` resource\n *\n * @param properties - the TypeScript properties of a `PhysicalTableProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.PhysicalTable` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetPhysicalTablePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_PhysicalTablePropertyValidator(properties).assertSuccess();\n    return {\n        CustomSql: cfnDataSetCustomSqlPropertyToCloudFormation(properties.customSql),\n        RelationalTable: cfnDataSetRelationalTablePropertyToCloudFormation(properties.relationalTable),\n        S3Source: cfnDataSetS3SourcePropertyToCloudFormation(properties.s3Source),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetPhysicalTablePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.PhysicalTableProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.PhysicalTableProperty>();\n    ret.addPropertyResult('customSql', 'CustomSql', properties.CustomSql != null ? CfnDataSetCustomSqlPropertyFromCloudFormation(properties.CustomSql) : undefined);\n    ret.addPropertyResult('relationalTable', 'RelationalTable', properties.RelationalTable != null ? CfnDataSetRelationalTablePropertyFromCloudFormation(properties.RelationalTable) : undefined);\n    ret.addPropertyResult('s3Source', 'S3Source', properties.S3Source != null ? CfnDataSetS3SourcePropertyFromCloudFormation(properties.S3Source) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                                                                           \n    export interface ProjectOperationProperty {\n                                                                                                                                                                                                                                                                \n        readonly projectedColumns: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ProjectOperationProperty`\n *\n * @param properties - the TypeScript properties of a `ProjectOperationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_ProjectOperationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('projectedColumns', cdk.requiredValidator)(properties.projectedColumns));\n    errors.collect(cdk.propertyValidator('projectedColumns', cdk.listValidator(cdk.validateString))(properties.projectedColumns));\n    return errors.wrap('supplied properties not correct for \"ProjectOperationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.ProjectOperation` resource\n *\n * @param properties - the TypeScript properties of a `ProjectOperationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.ProjectOperation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetProjectOperationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_ProjectOperationPropertyValidator(properties).assertSuccess();\n    return {\n        ProjectedColumns: cdk.listMapper(cdk.stringToCloudFormation)(properties.projectedColumns),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetProjectOperationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.ProjectOperationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.ProjectOperationProperty>();\n    ret.addPropertyResult('projectedColumns', 'ProjectedColumns', cfn_parse.FromCloudFormation.getStringArray(properties.ProjectedColumns));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                   \n    export interface RelationalTableProperty {\n                                                                                                                                                                                                                                                                               \n        readonly catalog?: string;\n                                                                                                                                                                                                                                                                                            \n        readonly dataSourceArn: string;\n                                                                                                                                                                                                                                                                       \n        readonly inputColumns: Array<CfnDataSet.InputColumnProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                 \n        readonly name: string;\n                                                                                                                                                                                                                                                                                                            \n        readonly schema?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RelationalTableProperty`\n *\n * @param properties - the TypeScript properties of a `RelationalTableProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_RelationalTablePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalog', cdk.validateString)(properties.catalog));\n    errors.collect(cdk.propertyValidator('dataSourceArn', cdk.requiredValidator)(properties.dataSourceArn));\n    errors.collect(cdk.propertyValidator('dataSourceArn', cdk.validateString)(properties.dataSourceArn));\n    errors.collect(cdk.propertyValidator('inputColumns', cdk.requiredValidator)(properties.inputColumns));\n    errors.collect(cdk.propertyValidator('inputColumns', cdk.listValidator(CfnDataSet_InputColumnPropertyValidator))(properties.inputColumns));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('schema', cdk.validateString)(properties.schema));\n    return errors.wrap('supplied properties not correct for \"RelationalTableProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.RelationalTable` resource\n *\n * @param properties - the TypeScript properties of a `RelationalTableProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.RelationalTable` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetRelationalTablePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_RelationalTablePropertyValidator(properties).assertSuccess();\n    return {\n        Catalog: cdk.stringToCloudFormation(properties.catalog),\n        DataSourceArn: cdk.stringToCloudFormation(properties.dataSourceArn),\n        InputColumns: cdk.listMapper(cfnDataSetInputColumnPropertyToCloudFormation)(properties.inputColumns),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Schema: cdk.stringToCloudFormation(properties.schema),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetRelationalTablePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.RelationalTableProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.RelationalTableProperty>();\n    ret.addPropertyResult('catalog', 'Catalog', properties.Catalog != null ? cfn_parse.FromCloudFormation.getString(properties.Catalog) : undefined);\n    ret.addPropertyResult('dataSourceArn', 'DataSourceArn', cfn_parse.FromCloudFormation.getString(properties.DataSourceArn));\n    ret.addPropertyResult('inputColumns', 'InputColumns', cfn_parse.FromCloudFormation.getArray(CfnDataSetInputColumnPropertyFromCloudFormation)(properties.InputColumns));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('schema', 'Schema', properties.Schema != null ? cfn_parse.FromCloudFormation.getString(properties.Schema) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                   \n    export interface RenameColumnOperationProperty {\n                                                                                                                                                                                                                                                                                       \n        readonly columnName: string;\n                                                                                                                                                                                                                                                                                 \n        readonly newColumnName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RenameColumnOperationProperty`\n *\n * @param properties - the TypeScript properties of a `RenameColumnOperationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_RenameColumnOperationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('columnName', cdk.requiredValidator)(properties.columnName));\n    errors.collect(cdk.propertyValidator('columnName', cdk.validateString)(properties.columnName));\n    errors.collect(cdk.propertyValidator('newColumnName', cdk.requiredValidator)(properties.newColumnName));\n    errors.collect(cdk.propertyValidator('newColumnName', cdk.validateString)(properties.newColumnName));\n    return errors.wrap('supplied properties not correct for \"RenameColumnOperationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.RenameColumnOperation` resource\n *\n * @param properties - the TypeScript properties of a `RenameColumnOperationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.RenameColumnOperation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetRenameColumnOperationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_RenameColumnOperationPropertyValidator(properties).assertSuccess();\n    return {\n        ColumnName: cdk.stringToCloudFormation(properties.columnName),\n        NewColumnName: cdk.stringToCloudFormation(properties.newColumnName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetRenameColumnOperationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.RenameColumnOperationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.RenameColumnOperationProperty>();\n    ret.addPropertyResult('columnName', 'ColumnName', cfn_parse.FromCloudFormation.getString(properties.ColumnName));\n    ret.addPropertyResult('newColumnName', 'NewColumnName', cfn_parse.FromCloudFormation.getString(properties.NewColumnName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                \n    export interface ResourcePermissionProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly actions: string[];\nn        readonly principal: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourcePermissionProperty`\n *\n * @param properties - the TypeScript properties of a `ResourcePermissionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_ResourcePermissionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.requiredValidator)(properties.actions));\n    errors.collect(cdk.propertyValidator('actions', cdk.listValidator(cdk.validateString))(properties.actions));\n    errors.collect(cdk.propertyValidator('principal', cdk.requiredValidator)(properties.principal));\n    errors.collect(cdk.propertyValidator('principal', cdk.validateString)(properties.principal));\n    return errors.wrap('supplied properties not correct for \"ResourcePermissionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.ResourcePermission` resource\n *\n * @param properties - the TypeScript properties of a `ResourcePermissionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.ResourcePermission` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetResourcePermissionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_ResourcePermissionPropertyValidator(properties).assertSuccess();\n    return {\n        Actions: cdk.listMapper(cdk.stringToCloudFormation)(properties.actions),\n        Principal: cdk.stringToCloudFormation(properties.principal),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetResourcePermissionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.ResourcePermissionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.ResourcePermissionProperty>();\n    ret.addPropertyResult('actions', 'Actions', cfn_parse.FromCloudFormation.getStringArray(properties.Actions));\n    ret.addPropertyResult('principal', 'Principal', cfn_parse.FromCloudFormation.getString(properties.Principal));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\nn    export interface RowLevelPermissionDataSetProperty {\n                                                                                                                                                                                                                                                                                                                                   \n        readonly arn: string;\nn        readonly formatVersion?: string;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly namespace?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly permissionPolicy: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RowLevelPermissionDataSetProperty`\n *\n * @param properties - the TypeScript properties of a `RowLevelPermissionDataSetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_RowLevelPermissionDataSetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    errors.collect(cdk.propertyValidator('formatVersion', cdk.validateString)(properties.formatVersion));\n    errors.collect(cdk.propertyValidator('namespace', cdk.validateString)(properties.namespace));\n    errors.collect(cdk.propertyValidator('permissionPolicy', cdk.requiredValidator)(properties.permissionPolicy));\n    errors.collect(cdk.propertyValidator('permissionPolicy', cdk.validateString)(properties.permissionPolicy));\n    return errors.wrap('supplied properties not correct for \"RowLevelPermissionDataSetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.RowLevelPermissionDataSet` resource\n *\n * @param properties - the TypeScript properties of a `RowLevelPermissionDataSetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.RowLevelPermissionDataSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetRowLevelPermissionDataSetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_RowLevelPermissionDataSetPropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n        FormatVersion: cdk.stringToCloudFormation(properties.formatVersion),\n        Namespace: cdk.stringToCloudFormation(properties.namespace),\n        PermissionPolicy: cdk.stringToCloudFormation(properties.permissionPolicy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetRowLevelPermissionDataSetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.RowLevelPermissionDataSetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.RowLevelPermissionDataSetProperty>();\n    ret.addPropertyResult('arn', 'Arn', cfn_parse.FromCloudFormation.getString(properties.Arn));\n    ret.addPropertyResult('formatVersion', 'FormatVersion', properties.FormatVersion != null ? cfn_parse.FromCloudFormation.getString(properties.FormatVersion) : undefined);\n    ret.addPropertyResult('namespace', 'Namespace', properties.Namespace != null ? cfn_parse.FromCloudFormation.getString(properties.Namespace) : undefined);\n    ret.addPropertyResult('permissionPolicy', 'PermissionPolicy', cfn_parse.FromCloudFormation.getString(properties.PermissionPolicy));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                      \n    export interface S3SourceProperty {\n                                                                                                                                                                                                                                                                              \n        readonly dataSourceArn: string;\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly inputColumns: Array<CfnDataSet.InputColumnProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly uploadSettings?: CfnDataSet.UploadSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3SourceProperty`\n *\n * @param properties - the TypeScript properties of a `S3SourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_S3SourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataSourceArn', cdk.requiredValidator)(properties.dataSourceArn));\n    errors.collect(cdk.propertyValidator('dataSourceArn', cdk.validateString)(properties.dataSourceArn));\n    errors.collect(cdk.propertyValidator('inputColumns', cdk.requiredValidator)(properties.inputColumns));\n    errors.collect(cdk.propertyValidator('inputColumns', cdk.listValidator(CfnDataSet_InputColumnPropertyValidator))(properties.inputColumns));\n    errors.collect(cdk.propertyValidator('uploadSettings', CfnDataSet_UploadSettingsPropertyValidator)(properties.uploadSettings));\n    return errors.wrap('supplied properties not correct for \"S3SourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.S3Source` resource\n *\n * @param properties - the TypeScript properties of a `S3SourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.S3Source` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetS3SourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_S3SourcePropertyValidator(properties).assertSuccess();\n    return {\n        DataSourceArn: cdk.stringToCloudFormation(properties.dataSourceArn),\n        InputColumns: cdk.listMapper(cfnDataSetInputColumnPropertyToCloudFormation)(properties.inputColumns),\n        UploadSettings: cfnDataSetUploadSettingsPropertyToCloudFormation(properties.uploadSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetS3SourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.S3SourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.S3SourceProperty>();\n    ret.addPropertyResult('dataSourceArn', 'DataSourceArn', cfn_parse.FromCloudFormation.getString(properties.DataSourceArn));\n    ret.addPropertyResult('inputColumns', 'InputColumns', cfn_parse.FromCloudFormation.getArray(CfnDataSetInputColumnPropertyFromCloudFormation)(properties.InputColumns));\n    ret.addPropertyResult('uploadSettings', 'UploadSettings', properties.UploadSettings != null ? CfnDataSetUploadSettingsPropertyFromCloudFormation(properties.UploadSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                         \n    export interface TagColumnOperationProperty {\n                                                                                                                                                                                                                                                                                   \n        readonly columnName: string;\n                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly tags: CfnDataSet.ColumnTagProperty[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagColumnOperationProperty`\n *\n * @param properties - the TypeScript properties of a `TagColumnOperationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_TagColumnOperationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('columnName', cdk.requiredValidator)(properties.columnName));\n    errors.collect(cdk.propertyValidator('columnName', cdk.validateString)(properties.columnName));\n    errors.collect(cdk.propertyValidator('tags', cdk.requiredValidator)(properties.tags));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(CfnDataSet_ColumnTagPropertyValidator))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"TagColumnOperationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.TagColumnOperation` resource\n *\n * @param properties - the TypeScript properties of a `TagColumnOperationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.TagColumnOperation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetTagColumnOperationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_TagColumnOperationPropertyValidator(properties).assertSuccess();\n    return {\n        ColumnName: cdk.stringToCloudFormation(properties.columnName),\n        Tags: cdk.listMapper(cfnDataSetColumnTagPropertyToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetTagColumnOperationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.TagColumnOperationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.TagColumnOperationProperty>();\n    ret.addPropertyResult('columnName', 'ColumnName', cfn_parse.FromCloudFormation.getString(properties.ColumnName));\n    ret.addPropertyResult('tags', 'Tags', cfn_parse.FromCloudFormation.getArray(CfnDataSetColumnTagPropertyFromCloudFormation)(properties.Tags) as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                                                                                                                           \n    export interface TransformOperationProperty {\n                                                                                                                                                                                                                                                                                                                       \n        readonly castColumnTypeOperation?: CfnDataSet.CastColumnTypeOperationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly createColumnsOperation?: CfnDataSet.CreateColumnsOperationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                        \n        readonly filterOperation?: CfnDataSet.FilterOperationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly projectOperation?: CfnDataSet.ProjectOperationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                          \n        readonly renameColumnOperation?: CfnDataSet.RenameColumnOperationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                \n        readonly tagColumnOperation?: CfnDataSet.TagColumnOperationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TransformOperationProperty`\n *\n * @param properties - the TypeScript properties of a `TransformOperationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_TransformOperationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('castColumnTypeOperation', CfnDataSet_CastColumnTypeOperationPropertyValidator)(properties.castColumnTypeOperation));\n    errors.collect(cdk.propertyValidator('createColumnsOperation', CfnDataSet_CreateColumnsOperationPropertyValidator)(properties.createColumnsOperation));\n    errors.collect(cdk.propertyValidator('filterOperation', CfnDataSet_FilterOperationPropertyValidator)(properties.filterOperation));\n    errors.collect(cdk.propertyValidator('projectOperation', CfnDataSet_ProjectOperationPropertyValidator)(properties.projectOperation));\n    errors.collect(cdk.propertyValidator('renameColumnOperation', CfnDataSet_RenameColumnOperationPropertyValidator)(properties.renameColumnOperation));\n    errors.collect(cdk.propertyValidator('tagColumnOperation', CfnDataSet_TagColumnOperationPropertyValidator)(properties.tagColumnOperation));\n    return errors.wrap('supplied properties not correct for \"TransformOperationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.TransformOperation` resource\n *\n * @param properties - the TypeScript properties of a `TransformOperationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.TransformOperation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetTransformOperationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_TransformOperationPropertyValidator(properties).assertSuccess();\n    return {\n        CastColumnTypeOperation: cfnDataSetCastColumnTypeOperationPropertyToCloudFormation(properties.castColumnTypeOperation),\n        CreateColumnsOperation: cfnDataSetCreateColumnsOperationPropertyToCloudFormation(properties.createColumnsOperation),\n        FilterOperation: cfnDataSetFilterOperationPropertyToCloudFormation(properties.filterOperation),\n        ProjectOperation: cfnDataSetProjectOperationPropertyToCloudFormation(properties.projectOperation),\n        RenameColumnOperation: cfnDataSetRenameColumnOperationPropertyToCloudFormation(properties.renameColumnOperation),\n        TagColumnOperation: cfnDataSetTagColumnOperationPropertyToCloudFormation(properties.tagColumnOperation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetTransformOperationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.TransformOperationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.TransformOperationProperty>();\n    ret.addPropertyResult('castColumnTypeOperation', 'CastColumnTypeOperation', properties.CastColumnTypeOperation != null ? CfnDataSetCastColumnTypeOperationPropertyFromCloudFormation(properties.CastColumnTypeOperation) : undefined);\n    ret.addPropertyResult('createColumnsOperation', 'CreateColumnsOperation', properties.CreateColumnsOperation != null ? CfnDataSetCreateColumnsOperationPropertyFromCloudFormation(properties.CreateColumnsOperation) : undefined);\n    ret.addPropertyResult('filterOperation', 'FilterOperation', properties.FilterOperation != null ? CfnDataSetFilterOperationPropertyFromCloudFormation(properties.FilterOperation) : undefined);\n    ret.addPropertyResult('projectOperation', 'ProjectOperation', properties.ProjectOperation != null ? CfnDataSetProjectOperationPropertyFromCloudFormation(properties.ProjectOperation) : undefined);\n    ret.addPropertyResult('renameColumnOperation', 'RenameColumnOperation', properties.RenameColumnOperation != null ? CfnDataSetRenameColumnOperationPropertyFromCloudFormation(properties.RenameColumnOperation) : undefined);\n    ret.addPropertyResult('tagColumnOperation', 'TagColumnOperation', properties.TagColumnOperation != null ? CfnDataSetTagColumnOperationPropertyFromCloudFormation(properties.TagColumnOperation) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSet {\n                                                                                                                                                                                                                                                                        \n    export interface UploadSettingsProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly containsHeader?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                            \n        readonly delimiter?: string;\n                                                                                                                                                                                                                                            \n        readonly format?: string;\n                                                                                                                                                                                                                                                                              \n        readonly startFromRow?: number;\n                                                                                                                                                                                                                                                      \n        readonly textQualifier?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UploadSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `UploadSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSet_UploadSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containsHeader', cdk.validateBoolean)(properties.containsHeader));\n    errors.collect(cdk.propertyValidator('delimiter', cdk.validateString)(properties.delimiter));\n    errors.collect(cdk.propertyValidator('format', cdk.validateString)(properties.format));\n    errors.collect(cdk.propertyValidator('startFromRow', cdk.validateNumber)(properties.startFromRow));\n    errors.collect(cdk.propertyValidator('textQualifier', cdk.validateString)(properties.textQualifier));\n    return errors.wrap('supplied properties not correct for \"UploadSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.UploadSettings` resource\n *\n * @param properties - the TypeScript properties of a `UploadSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSet.UploadSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSetUploadSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSet_UploadSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ContainsHeader: cdk.booleanToCloudFormation(properties.containsHeader),\n        Delimiter: cdk.stringToCloudFormation(properties.delimiter),\n        Format: cdk.stringToCloudFormation(properties.format),\n        StartFromRow: cdk.numberToCloudFormation(properties.startFromRow),\n        TextQualifier: cdk.stringToCloudFormation(properties.textQualifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSetUploadSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSet.UploadSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSet.UploadSettingsProperty>();\n    ret.addPropertyResult('containsHeader', 'ContainsHeader', properties.ContainsHeader != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ContainsHeader) : undefined);\n    ret.addPropertyResult('delimiter', 'Delimiter', properties.Delimiter != null ? cfn_parse.FromCloudFormation.getString(properties.Delimiter) : undefined);\n    ret.addPropertyResult('format', 'Format', properties.Format != null ? cfn_parse.FromCloudFormation.getString(properties.Format) : undefined);\n    ret.addPropertyResult('startFromRow', 'StartFromRow', properties.StartFromRow != null ? cfn_parse.FromCloudFormation.getNumber(properties.StartFromRow) : undefined);\n    ret.addPropertyResult('textQualifier', 'TextQualifier', properties.TextQualifier != null ? cfn_parse.FromCloudFormation.getString(properties.TextQualifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                           \nexport interface CfnDataSourceProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly alternateDataSourceParameters?: Array<CfnDataSource.DataSourceParametersProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                           \n    readonly awsAccountId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                   \n    readonly credentials?: CfnDataSource.DataSourceCredentialsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                         \n    readonly dataSourceId?: string;\n\n                                                                                                                                                                                                                                                                                \n    readonly dataSourceParameters?: CfnDataSource.DataSourceParametersProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                               \n    readonly errorInfo?: CfnDataSource.DataSourceErrorInfoProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                   \n    readonly name?: string;\n\n                                                                                                                                                                                                                                         \n    readonly permissions?: Array<CfnDataSource.ResourcePermissionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                   \n    readonly sslProperties?: CfnDataSource.SslPropertiesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                   \n    readonly type?: string;\n\n                                                                                                                                                                                                                                                                                                                             \n    readonly vpcConnectionProperties?: CfnDataSource.VpcConnectionPropertiesProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDataSourceProps`\n *\n * @param properties - the TypeScript properties of a `CfnDataSourceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSourcePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alternateDataSourceParameters', cdk.listValidator(CfnDataSource_DataSourceParametersPropertyValidator))(properties.alternateDataSourceParameters));\n    errors.collect(cdk.propertyValidator('awsAccountId', cdk.validateString)(properties.awsAccountId));\n    errors.collect(cdk.propertyValidator('credentials', CfnDataSource_DataSourceCredentialsPropertyValidator)(properties.credentials));\n    errors.collect(cdk.propertyValidator('dataSourceId', cdk.validateString)(properties.dataSourceId));\n    errors.collect(cdk.propertyValidator('dataSourceParameters', CfnDataSource_DataSourceParametersPropertyValidator)(properties.dataSourceParameters));\n    errors.collect(cdk.propertyValidator('errorInfo', CfnDataSource_DataSourceErrorInfoPropertyValidator)(properties.errorInfo));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('permissions', cdk.listValidator(CfnDataSource_ResourcePermissionPropertyValidator))(properties.permissions));\n    errors.collect(cdk.propertyValidator('sslProperties', CfnDataSource_SslPropertiesPropertyValidator)(properties.sslProperties));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('vpcConnectionProperties', CfnDataSource_VpcConnectionPropertiesPropertyValidator)(properties.vpcConnectionProperties));\n    return errors.wrap('supplied properties not correct for \"CfnDataSourceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource` resource\n *\n * @param properties - the TypeScript properties of a `CfnDataSourceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourcePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSourcePropsValidator(properties).assertSuccess();\n    return {\n        AlternateDataSourceParameters: cdk.listMapper(cfnDataSourceDataSourceParametersPropertyToCloudFormation)(properties.alternateDataSourceParameters),\n        AwsAccountId: cdk.stringToCloudFormation(properties.awsAccountId),\n        Credentials: cfnDataSourceDataSourceCredentialsPropertyToCloudFormation(properties.credentials),\n        DataSourceId: cdk.stringToCloudFormation(properties.dataSourceId),\n        DataSourceParameters: cfnDataSourceDataSourceParametersPropertyToCloudFormation(properties.dataSourceParameters),\n        ErrorInfo: cfnDataSourceDataSourceErrorInfoPropertyToCloudFormation(properties.errorInfo),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Permissions: cdk.listMapper(cfnDataSourceResourcePermissionPropertyToCloudFormation)(properties.permissions),\n        SslProperties: cfnDataSourceSslPropertiesPropertyToCloudFormation(properties.sslProperties),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Type: cdk.stringToCloudFormation(properties.type),\n        VpcConnectionProperties: cfnDataSourceVpcConnectionPropertiesPropertyToCloudFormation(properties.vpcConnectionProperties),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourcePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSourceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSourceProps>();\n    ret.addPropertyResult('alternateDataSourceParameters', 'AlternateDataSourceParameters', properties.AlternateDataSourceParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnDataSourceDataSourceParametersPropertyFromCloudFormation)(properties.AlternateDataSourceParameters) : undefined);\n    ret.addPropertyResult('awsAccountId', 'AwsAccountId', properties.AwsAccountId != null ? cfn_parse.FromCloudFormation.getString(properties.AwsAccountId) : undefined);\n    ret.addPropertyResult('credentials', 'Credentials', properties.Credentials != null ? CfnDataSourceDataSourceCredentialsPropertyFromCloudFormation(properties.Credentials) : undefined);\n    ret.addPropertyResult('dataSourceId', 'DataSourceId', properties.DataSourceId != null ? cfn_parse.FromCloudFormation.getString(properties.DataSourceId) : undefined);\n    ret.addPropertyResult('dataSourceParameters', 'DataSourceParameters', properties.DataSourceParameters != null ? CfnDataSourceDataSourceParametersPropertyFromCloudFormation(properties.DataSourceParameters) : undefined);\n    ret.addPropertyResult('errorInfo', 'ErrorInfo', properties.ErrorInfo != null ? CfnDataSourceDataSourceErrorInfoPropertyFromCloudFormation(properties.ErrorInfo) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('permissions', 'Permissions', properties.Permissions != null ? cfn_parse.FromCloudFormation.getArray(CfnDataSourceResourcePermissionPropertyFromCloudFormation)(properties.Permissions) : undefined);\n    ret.addPropertyResult('sslProperties', 'SslProperties', properties.SslProperties != null ? CfnDataSourceSslPropertiesPropertyFromCloudFormation(properties.SslProperties) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addPropertyResult('vpcConnectionProperties', 'VpcConnectionProperties', properties.VpcConnectionProperties != null ? CfnDataSourceVpcConnectionPropertiesPropertyFromCloudFormation(properties.VpcConnectionProperties) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                         \nexport class CfnDataSource extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::QuickSight::DataSource\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDataSource {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDataSourcePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDataSource(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                         \n    public readonly attrArn: string;\n\n                                                                                                              \n    public readonly attrCreatedTime: string;\n\n                                                                                                                       \n    public readonly attrLastUpdatedTime: string;\n\n                                                                                             \n    public readonly attrStatus: string;\n\nn    public alternateDataSourceParameters: Array<CfnDataSource.DataSourceParametersProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                           \n    public awsAccountId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                   \n    public credentials: CfnDataSource.DataSourceCredentialsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                         \n    public dataSourceId: string | undefined;\n\n                                                                                                                                                                                                                                                                                \n    public dataSourceParameters: CfnDataSource.DataSourceParametersProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                               \n    public errorInfo: CfnDataSource.DataSourceErrorInfoProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                   \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                         \n    public permissions: Array<CfnDataSource.ResourcePermissionProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                   \n    public sslProperties: CfnDataSource.SslPropertiesProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                   \n    public type: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                             \n    public vpcConnectionProperties: CfnDataSource.VpcConnectionPropertiesProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnDataSourceProps = {}) {\n        super(scope, id, { type: CfnDataSource.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreatedTime = cdk.Token.asString(this.getAtt('CreatedTime'));\n        this.attrLastUpdatedTime = cdk.Token.asString(this.getAtt('LastUpdatedTime'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.alternateDataSourceParameters = props.alternateDataSourceParameters;\n        this.awsAccountId = props.awsAccountId;\n        this.credentials = props.credentials;\n        this.dataSourceId = props.dataSourceId;\n        this.dataSourceParameters = props.dataSourceParameters;\n        this.errorInfo = props.errorInfo;\n        this.name = props.name;\n        this.permissions = props.permissions;\n        this.sslProperties = props.sslProperties;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::QuickSight::DataSource\", props.tags, { tagPropertyName: 'tags' });\n        this.type = props.type;\n        this.vpcConnectionProperties = props.vpcConnectionProperties;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDataSource.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            alternateDataSourceParameters: this.alternateDataSourceParameters,\n            awsAccountId: this.awsAccountId,\n            credentials: this.credentials,\n            dataSourceId: this.dataSourceId,\n            dataSourceParameters: this.dataSourceParameters,\n            errorInfo: this.errorInfo,\n            name: this.name,\n            permissions: this.permissions,\n            sslProperties: this.sslProperties,\n            tags: this.tags.renderTags(),\n            type: this.type,\n            vpcConnectionProperties: this.vpcConnectionProperties,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDataSourcePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                                 \n    export interface AmazonElasticsearchParametersProperty {\n                                                                                                                                                                                                                                                                                          \n        readonly domain: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AmazonElasticsearchParametersProperty`\n *\n * @param properties - the TypeScript properties of a `AmazonElasticsearchParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_AmazonElasticsearchParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('domain', cdk.requiredValidator)(properties.domain));\n    errors.collect(cdk.propertyValidator('domain', cdk.validateString)(properties.domain));\n    return errors.wrap('supplied properties not correct for \"AmazonElasticsearchParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.AmazonElasticsearchParameters` resource\n *\n * @param properties - the TypeScript properties of a `AmazonElasticsearchParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.AmazonElasticsearchParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceAmazonElasticsearchParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_AmazonElasticsearchParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Domain: cdk.stringToCloudFormation(properties.domain),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceAmazonElasticsearchParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.AmazonElasticsearchParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.AmazonElasticsearchParametersProperty>();\n    ret.addPropertyResult('domain', 'Domain', cfn_parse.FromCloudFormation.getString(properties.Domain));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                              \n    export interface AmazonOpenSearchParametersProperty {\n                                                                                                                                                                                                                                                                                    \n        readonly domain: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AmazonOpenSearchParametersProperty`\n *\n * @param properties - the TypeScript properties of a `AmazonOpenSearchParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_AmazonOpenSearchParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('domain', cdk.requiredValidator)(properties.domain));\n    errors.collect(cdk.propertyValidator('domain', cdk.validateString)(properties.domain));\n    return errors.wrap('supplied properties not correct for \"AmazonOpenSearchParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.AmazonOpenSearchParameters` resource\n *\n * @param properties - the TypeScript properties of a `AmazonOpenSearchParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.AmazonOpenSearchParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceAmazonOpenSearchParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_AmazonOpenSearchParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Domain: cdk.stringToCloudFormation(properties.domain),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceAmazonOpenSearchParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.AmazonOpenSearchParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.AmazonOpenSearchParametersProperty>();\n    ret.addPropertyResult('domain', 'Domain', cfn_parse.FromCloudFormation.getString(properties.Domain));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                  \n    export interface AthenaParametersProperty {\n                                                                                                                                                                                                                                                                                   \n        readonly workGroup?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AthenaParametersProperty`\n *\n * @param properties - the TypeScript properties of a `AthenaParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_AthenaParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('workGroup', cdk.validateString)(properties.workGroup));\n    return errors.wrap('supplied properties not correct for \"AthenaParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.AthenaParameters` resource\n *\n * @param properties - the TypeScript properties of a `AthenaParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.AthenaParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceAthenaParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_AthenaParametersPropertyValidator(properties).assertSuccess();\n    return {\n        WorkGroup: cdk.stringToCloudFormation(properties.workGroup),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceAthenaParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.AthenaParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.AthenaParametersProperty>();\n    ret.addPropertyResult('workGroup', 'WorkGroup', properties.WorkGroup != null ? cfn_parse.FromCloudFormation.getString(properties.WorkGroup) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                  \n    export interface AuroraParametersProperty {\n                                                                                                                                                                                                                                                     \n        readonly database: string;\n                                                                                                                                                                                                                                             \n        readonly host: string;\n                                                                                                                                                                                                                                             \n        readonly port: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AuroraParametersProperty`\n *\n * @param properties - the TypeScript properties of a `AuroraParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_AuroraParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('database', cdk.requiredValidator)(properties.database));\n    errors.collect(cdk.propertyValidator('database', cdk.validateString)(properties.database));\n    errors.collect(cdk.propertyValidator('host', cdk.requiredValidator)(properties.host));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('port', cdk.requiredValidator)(properties.port));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"AuroraParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.AuroraParameters` resource\n *\n * @param properties - the TypeScript properties of a `AuroraParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.AuroraParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceAuroraParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_AuroraParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Database: cdk.stringToCloudFormation(properties.database),\n        Host: cdk.stringToCloudFormation(properties.host),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceAuroraParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.AuroraParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.AuroraParametersProperty>();\n    ret.addPropertyResult('database', 'Database', cfn_parse.FromCloudFormation.getString(properties.Database));\n    ret.addPropertyResult('host', 'Host', cfn_parse.FromCloudFormation.getString(properties.Host));\n    ret.addPropertyResult('port', 'Port', cfn_parse.FromCloudFormation.getNumber(properties.Port));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                                                          \n    export interface AuroraPostgreSqlParametersProperty {\n                                                                                                                                                                                                                                                                                                                    \n        readonly database: string;\n                                                                                                                                                                                                                                                                                                                       \n        readonly host: string;\n                                                                                                                                                                                                                                                                                                                   \n        readonly port: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AuroraPostgreSqlParametersProperty`\n *\n * @param properties - the TypeScript properties of a `AuroraPostgreSqlParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_AuroraPostgreSqlParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('database', cdk.requiredValidator)(properties.database));\n    errors.collect(cdk.propertyValidator('database', cdk.validateString)(properties.database));\n    errors.collect(cdk.propertyValidator('host', cdk.requiredValidator)(properties.host));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('port', cdk.requiredValidator)(properties.port));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"AuroraPostgreSqlParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.AuroraPostgreSqlParameters` resource\n *\n * @param properties - the TypeScript properties of a `AuroraPostgreSqlParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.AuroraPostgreSqlParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceAuroraPostgreSqlParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_AuroraPostgreSqlParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Database: cdk.stringToCloudFormation(properties.database),\n        Host: cdk.stringToCloudFormation(properties.host),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceAuroraPostgreSqlParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.AuroraPostgreSqlParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.AuroraPostgreSqlParametersProperty>();\n    ret.addPropertyResult('database', 'Database', cfn_parse.FromCloudFormation.getString(properties.Database));\n    ret.addPropertyResult('host', 'Host', cfn_parse.FromCloudFormation.getString(properties.Host));\n    ret.addPropertyResult('port', 'Port', cfn_parse.FromCloudFormation.getNumber(properties.Port));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                                                          \n    export interface CredentialPairProperty {\nn        readonly alternateDataSourceParameters?: Array<CfnDataSource.DataSourceParametersProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                 \n        readonly password: string;\n                                                                                                                                                                                                                                                  \n        readonly username: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CredentialPairProperty`\n *\n * @param properties - the TypeScript properties of a `CredentialPairProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_CredentialPairPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alternateDataSourceParameters', cdk.listValidator(CfnDataSource_DataSourceParametersPropertyValidator))(properties.alternateDataSourceParameters));\n    errors.collect(cdk.propertyValidator('password', cdk.requiredValidator)(properties.password));\n    errors.collect(cdk.propertyValidator('password', cdk.validateString)(properties.password));\n    errors.collect(cdk.propertyValidator('username', cdk.requiredValidator)(properties.username));\n    errors.collect(cdk.propertyValidator('username', cdk.validateString)(properties.username));\n    return errors.wrap('supplied properties not correct for \"CredentialPairProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.CredentialPair` resource\n *\n * @param properties - the TypeScript properties of a `CredentialPairProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.CredentialPair` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceCredentialPairPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_CredentialPairPropertyValidator(properties).assertSuccess();\n    return {\n        AlternateDataSourceParameters: cdk.listMapper(cfnDataSourceDataSourceParametersPropertyToCloudFormation)(properties.alternateDataSourceParameters),\n        Password: cdk.stringToCloudFormation(properties.password),\n        Username: cdk.stringToCloudFormation(properties.username),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceCredentialPairPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.CredentialPairProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.CredentialPairProperty>();\n    ret.addPropertyResult('alternateDataSourceParameters', 'AlternateDataSourceParameters', properties.AlternateDataSourceParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnDataSourceDataSourceParametersPropertyFromCloudFormation)(properties.AlternateDataSourceParameters) : undefined);\n    ret.addPropertyResult('password', 'Password', cfn_parse.FromCloudFormation.getString(properties.Password));\n    ret.addPropertyResult('username', 'Username', cfn_parse.FromCloudFormation.getString(properties.Username));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                                                                                                                                \n    export interface DataSourceCredentialsProperty {\nn        readonly copySourceArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly credentialPair?: CfnDataSource.CredentialPairProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataSourceCredentialsProperty`\n *\n * @param properties - the TypeScript properties of a `DataSourceCredentialsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_DataSourceCredentialsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('copySourceArn', cdk.validateString)(properties.copySourceArn));\n    errors.collect(cdk.propertyValidator('credentialPair', CfnDataSource_CredentialPairPropertyValidator)(properties.credentialPair));\n    return errors.wrap('supplied properties not correct for \"DataSourceCredentialsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.DataSourceCredentials` resource\n *\n * @param properties - the TypeScript properties of a `DataSourceCredentialsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.DataSourceCredentials` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceDataSourceCredentialsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_DataSourceCredentialsPropertyValidator(properties).assertSuccess();\n    return {\n        CopySourceArn: cdk.stringToCloudFormation(properties.copySourceArn),\n        CredentialPair: cfnDataSourceCredentialPairPropertyToCloudFormation(properties.credentialPair),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceDataSourceCredentialsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.DataSourceCredentialsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.DataSourceCredentialsProperty>();\n    ret.addPropertyResult('copySourceArn', 'CopySourceArn', properties.CopySourceArn != null ? cfn_parse.FromCloudFormation.getString(properties.CopySourceArn) : undefined);\n    ret.addPropertyResult('credentialPair', 'CredentialPair', properties.CredentialPair != null ? CfnDataSourceCredentialPairPropertyFromCloudFormation(properties.CredentialPair) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                                                 \n    export interface DataSourceErrorInfoProperty {\n                                                                                                                                                                                                                                                               \n        readonly message?: string;\n                                                                                                                                                                                                                                                         \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataSourceErrorInfoProperty`\n *\n * @param properties - the TypeScript properties of a `DataSourceErrorInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_DataSourceErrorInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('message', cdk.validateString)(properties.message));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"DataSourceErrorInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.DataSourceErrorInfo` resource\n *\n * @param properties - the TypeScript properties of a `DataSourceErrorInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.DataSourceErrorInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceDataSourceErrorInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_DataSourceErrorInfoPropertyValidator(properties).assertSuccess();\n    return {\n        Message: cdk.stringToCloudFormation(properties.message),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceDataSourceErrorInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.DataSourceErrorInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.DataSourceErrorInfoProperty>();\n    ret.addPropertyResult('message', 'Message', properties.Message != null ? cfn_parse.FromCloudFormation.getString(properties.Message) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface DataSourceParametersProperty {\n                                                                                                                                                                                                                                                                                                        \n        readonly amazonElasticsearchParameters?: CfnDataSource.AmazonElasticsearchParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                     \n        readonly amazonOpenSearchParameters?: CfnDataSource.AmazonOpenSearchParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                             \n        readonly athenaParameters?: CfnDataSource.AthenaParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                   \n        readonly auroraParameters?: CfnDataSource.AuroraParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                       \n        readonly auroraPostgreSqlParameters?: CfnDataSource.AuroraPostgreSqlParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                        \n        readonly mariaDbParameters?: CfnDataSource.MariaDbParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                    \n        readonly mySqlParameters?: CfnDataSource.MySqlParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                              \n        readonly oracleParameters?: CfnDataSource.OracleParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                              \n        readonly postgreSqlParameters?: CfnDataSource.PostgreSqlParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                      \n        readonly prestoParameters?: CfnDataSource.PrestoParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                       \n        readonly rdsParameters?: CfnDataSource.RdsParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                 \n        readonly redshiftParameters?: CfnDataSource.RedshiftParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                              \n        readonly s3Parameters?: CfnDataSource.S3ParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                            \n        readonly snowflakeParameters?: CfnDataSource.SnowflakeParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                    \n        readonly sparkParameters?: CfnDataSource.SparkParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                             \n        readonly sqlServerParameters?: CfnDataSource.SqlServerParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                          \n        readonly teradataParameters?: CfnDataSource.TeradataParametersProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataSourceParametersProperty`\n *\n * @param properties - the TypeScript properties of a `DataSourceParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_DataSourceParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('amazonElasticsearchParameters', CfnDataSource_AmazonElasticsearchParametersPropertyValidator)(properties.amazonElasticsearchParameters));\n    errors.collect(cdk.propertyValidator('amazonOpenSearchParameters', CfnDataSource_AmazonOpenSearchParametersPropertyValidator)(properties.amazonOpenSearchParameters));\n    errors.collect(cdk.propertyValidator('athenaParameters', CfnDataSource_AthenaParametersPropertyValidator)(properties.athenaParameters));\n    errors.collect(cdk.propertyValidator('auroraParameters', CfnDataSource_AuroraParametersPropertyValidator)(properties.auroraParameters));\n    errors.collect(cdk.propertyValidator('auroraPostgreSqlParameters', CfnDataSource_AuroraPostgreSqlParametersPropertyValidator)(properties.auroraPostgreSqlParameters));\n    errors.collect(cdk.propertyValidator('mariaDbParameters', CfnDataSource_MariaDbParametersPropertyValidator)(properties.mariaDbParameters));\n    errors.collect(cdk.propertyValidator('mySqlParameters', CfnDataSource_MySqlParametersPropertyValidator)(properties.mySqlParameters));\n    errors.collect(cdk.propertyValidator('oracleParameters', CfnDataSource_OracleParametersPropertyValidator)(properties.oracleParameters));\n    errors.collect(cdk.propertyValidator('postgreSqlParameters', CfnDataSource_PostgreSqlParametersPropertyValidator)(properties.postgreSqlParameters));\n    errors.collect(cdk.propertyValidator('prestoParameters', CfnDataSource_PrestoParametersPropertyValidator)(properties.prestoParameters));\n    errors.collect(cdk.propertyValidator('rdsParameters', CfnDataSource_RdsParametersPropertyValidator)(properties.rdsParameters));\n    errors.collect(cdk.propertyValidator('redshiftParameters', CfnDataSource_RedshiftParametersPropertyValidator)(properties.redshiftParameters));\n    errors.collect(cdk.propertyValidator('s3Parameters', CfnDataSource_S3ParametersPropertyValidator)(properties.s3Parameters));\n    errors.collect(cdk.propertyValidator('snowflakeParameters', CfnDataSource_SnowflakeParametersPropertyValidator)(properties.snowflakeParameters));\n    errors.collect(cdk.propertyValidator('sparkParameters', CfnDataSource_SparkParametersPropertyValidator)(properties.sparkParameters));\n    errors.collect(cdk.propertyValidator('sqlServerParameters', CfnDataSource_SqlServerParametersPropertyValidator)(properties.sqlServerParameters));\n    errors.collect(cdk.propertyValidator('teradataParameters', CfnDataSource_TeradataParametersPropertyValidator)(properties.teradataParameters));\n    return errors.wrap('supplied properties not correct for \"DataSourceParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.DataSourceParameters` resource\n *\n * @param properties - the TypeScript properties of a `DataSourceParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.DataSourceParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceDataSourceParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_DataSourceParametersPropertyValidator(properties).assertSuccess();\n    return {\n        AmazonElasticsearchParameters: cfnDataSourceAmazonElasticsearchParametersPropertyToCloudFormation(properties.amazonElasticsearchParameters),\n        AmazonOpenSearchParameters: cfnDataSourceAmazonOpenSearchParametersPropertyToCloudFormation(properties.amazonOpenSearchParameters),\n        AthenaParameters: cfnDataSourceAthenaParametersPropertyToCloudFormation(properties.athenaParameters),\n        AuroraParameters: cfnDataSourceAuroraParametersPropertyToCloudFormation(properties.auroraParameters),\n        AuroraPostgreSqlParameters: cfnDataSourceAuroraPostgreSqlParametersPropertyToCloudFormation(properties.auroraPostgreSqlParameters),\n        MariaDbParameters: cfnDataSourceMariaDbParametersPropertyToCloudFormation(properties.mariaDbParameters),\n        MySqlParameters: cfnDataSourceMySqlParametersPropertyToCloudFormation(properties.mySqlParameters),\n        OracleParameters: cfnDataSourceOracleParametersPropertyToCloudFormation(properties.oracleParameters),\n        PostgreSqlParameters: cfnDataSourcePostgreSqlParametersPropertyToCloudFormation(properties.postgreSqlParameters),\n        PrestoParameters: cfnDataSourcePrestoParametersPropertyToCloudFormation(properties.prestoParameters),\n        RdsParameters: cfnDataSourceRdsParametersPropertyToCloudFormation(properties.rdsParameters),\n        RedshiftParameters: cfnDataSourceRedshiftParametersPropertyToCloudFormation(properties.redshiftParameters),\n        S3Parameters: cfnDataSourceS3ParametersPropertyToCloudFormation(properties.s3Parameters),\n        SnowflakeParameters: cfnDataSourceSnowflakeParametersPropertyToCloudFormation(properties.snowflakeParameters),\n        SparkParameters: cfnDataSourceSparkParametersPropertyToCloudFormation(properties.sparkParameters),\n        SqlServerParameters: cfnDataSourceSqlServerParametersPropertyToCloudFormation(properties.sqlServerParameters),\n        TeradataParameters: cfnDataSourceTeradataParametersPropertyToCloudFormation(properties.teradataParameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceDataSourceParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.DataSourceParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.DataSourceParametersProperty>();\n    ret.addPropertyResult('amazonElasticsearchParameters', 'AmazonElasticsearchParameters', properties.AmazonElasticsearchParameters != null ? CfnDataSourceAmazonElasticsearchParametersPropertyFromCloudFormation(properties.AmazonElasticsearchParameters) : undefined);\n    ret.addPropertyResult('amazonOpenSearchParameters', 'AmazonOpenSearchParameters', properties.AmazonOpenSearchParameters != null ? CfnDataSourceAmazonOpenSearchParametersPropertyFromCloudFormation(properties.AmazonOpenSearchParameters) : undefined);\n    ret.addPropertyResult('athenaParameters', 'AthenaParameters', properties.AthenaParameters != null ? CfnDataSourceAthenaParametersPropertyFromCloudFormation(properties.AthenaParameters) : undefined);\n    ret.addPropertyResult('auroraParameters', 'AuroraParameters', properties.AuroraParameters != null ? CfnDataSourceAuroraParametersPropertyFromCloudFormation(properties.AuroraParameters) : undefined);\n    ret.addPropertyResult('auroraPostgreSqlParameters', 'AuroraPostgreSqlParameters', properties.AuroraPostgreSqlParameters != null ? CfnDataSourceAuroraPostgreSqlParametersPropertyFromCloudFormation(properties.AuroraPostgreSqlParameters) : undefined);\n    ret.addPropertyResult('mariaDbParameters', 'MariaDbParameters', properties.MariaDbParameters != null ? CfnDataSourceMariaDbParametersPropertyFromCloudFormation(properties.MariaDbParameters) : undefined);\n    ret.addPropertyResult('mySqlParameters', 'MySqlParameters', properties.MySqlParameters != null ? CfnDataSourceMySqlParametersPropertyFromCloudFormation(properties.MySqlParameters) : undefined);\n    ret.addPropertyResult('oracleParameters', 'OracleParameters', properties.OracleParameters != null ? CfnDataSourceOracleParametersPropertyFromCloudFormation(properties.OracleParameters) : undefined);\n    ret.addPropertyResult('postgreSqlParameters', 'PostgreSqlParameters', properties.PostgreSqlParameters != null ? CfnDataSourcePostgreSqlParametersPropertyFromCloudFormation(properties.PostgreSqlParameters) : undefined);\n    ret.addPropertyResult('prestoParameters', 'PrestoParameters', properties.PrestoParameters != null ? CfnDataSourcePrestoParametersPropertyFromCloudFormation(properties.PrestoParameters) : undefined);\n    ret.addPropertyResult('rdsParameters', 'RdsParameters', properties.RdsParameters != null ? CfnDataSourceRdsParametersPropertyFromCloudFormation(properties.RdsParameters) : undefined);\n    ret.addPropertyResult('redshiftParameters', 'RedshiftParameters', properties.RedshiftParameters != null ? CfnDataSourceRedshiftParametersPropertyFromCloudFormation(properties.RedshiftParameters) : undefined);\n    ret.addPropertyResult('s3Parameters', 'S3Parameters', properties.S3Parameters != null ? CfnDataSourceS3ParametersPropertyFromCloudFormation(properties.S3Parameters) : undefined);\n    ret.addPropertyResult('snowflakeParameters', 'SnowflakeParameters', properties.SnowflakeParameters != null ? CfnDataSourceSnowflakeParametersPropertyFromCloudFormation(properties.SnowflakeParameters) : undefined);\n    ret.addPropertyResult('sparkParameters', 'SparkParameters', properties.SparkParameters != null ? CfnDataSourceSparkParametersPropertyFromCloudFormation(properties.SparkParameters) : undefined);\n    ret.addPropertyResult('sqlServerParameters', 'SqlServerParameters', properties.SqlServerParameters != null ? CfnDataSourceSqlServerParametersPropertyFromCloudFormation(properties.SqlServerParameters) : undefined);\n    ret.addPropertyResult('teradataParameters', 'TeradataParameters', properties.TeradataParameters != null ? CfnDataSourceTeradataParametersPropertyFromCloudFormation(properties.TeradataParameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                          \n    export interface ManifestFileLocationProperty {\n                                                                                                                                                                                                                                                                   \n        readonly bucket: string;\n                                                                                                                                                                                                                                                                                       \n        readonly key: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ManifestFileLocationProperty`\n *\n * @param properties - the TypeScript properties of a `ManifestFileLocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_ManifestFileLocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.requiredValidator)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    return errors.wrap('supplied properties not correct for \"ManifestFileLocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.ManifestFileLocation` resource\n *\n * @param properties - the TypeScript properties of a `ManifestFileLocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.ManifestFileLocation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceManifestFileLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_ManifestFileLocationPropertyValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        Key: cdk.stringToCloudFormation(properties.key),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceManifestFileLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.ManifestFileLocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.ManifestFileLocationProperty>();\n    ret.addPropertyResult('bucket', 'Bucket', cfn_parse.FromCloudFormation.getString(properties.Bucket));\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                 \n    export interface MariaDbParametersProperty {\n                                                                                                                                                                                                                                                       \n        readonly database: string;\n                                                                                                                                                                                                                                               \n        readonly host: string;\n                                                                                                                                                                                                                                               \n        readonly port: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MariaDbParametersProperty`\n *\n * @param properties - the TypeScript properties of a `MariaDbParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_MariaDbParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('database', cdk.requiredValidator)(properties.database));\n    errors.collect(cdk.propertyValidator('database', cdk.validateString)(properties.database));\n    errors.collect(cdk.propertyValidator('host', cdk.requiredValidator)(properties.host));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('port', cdk.requiredValidator)(properties.port));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"MariaDbParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.MariaDbParameters` resource\n *\n * @param properties - the TypeScript properties of a `MariaDbParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.MariaDbParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceMariaDbParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_MariaDbParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Database: cdk.stringToCloudFormation(properties.database),\n        Host: cdk.stringToCloudFormation(properties.host),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceMariaDbParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.MariaDbParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.MariaDbParametersProperty>();\n    ret.addPropertyResult('database', 'Database', cfn_parse.FromCloudFormation.getString(properties.Database));\n    ret.addPropertyResult('host', 'Host', cfn_parse.FromCloudFormation.getString(properties.Host));\n    ret.addPropertyResult('port', 'Port', cfn_parse.FromCloudFormation.getNumber(properties.Port));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                             \n    export interface MySqlParametersProperty {\n                                                                                                                                                                                                                                                   \n        readonly database: string;\n                                                                                                                                                                                                                                           \n        readonly host: string;\n                                                                                                                                                                                                                                           \n        readonly port: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MySqlParametersProperty`\n *\n * @param properties - the TypeScript properties of a `MySqlParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_MySqlParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('database', cdk.requiredValidator)(properties.database));\n    errors.collect(cdk.propertyValidator('database', cdk.validateString)(properties.database));\n    errors.collect(cdk.propertyValidator('host', cdk.requiredValidator)(properties.host));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('port', cdk.requiredValidator)(properties.port));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"MySqlParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.MySqlParameters` resource\n *\n * @param properties - the TypeScript properties of a `MySqlParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.MySqlParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceMySqlParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_MySqlParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Database: cdk.stringToCloudFormation(properties.database),\n        Host: cdk.stringToCloudFormation(properties.host),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceMySqlParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.MySqlParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.MySqlParametersProperty>();\n    ret.addPropertyResult('database', 'Database', cfn_parse.FromCloudFormation.getString(properties.Database));\n    ret.addPropertyResult('host', 'Host', cfn_parse.FromCloudFormation.getString(properties.Host));\n    ret.addPropertyResult('port', 'Port', cfn_parse.FromCloudFormation.getNumber(properties.Port));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                       \n    export interface OracleParametersProperty {\n                                                                                                                                                                                                                                                     \n        readonly database: string;\n                                                                                                                                                                                                                                             \n        readonly host: string;\n                                                                                                                                                                                                                                             \n        readonly port: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OracleParametersProperty`\n *\n * @param properties - the TypeScript properties of a `OracleParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_OracleParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('database', cdk.requiredValidator)(properties.database));\n    errors.collect(cdk.propertyValidator('database', cdk.validateString)(properties.database));\n    errors.collect(cdk.propertyValidator('host', cdk.requiredValidator)(properties.host));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('port', cdk.requiredValidator)(properties.port));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"OracleParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.OracleParameters` resource\n *\n * @param properties - the TypeScript properties of a `OracleParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.OracleParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceOracleParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_OracleParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Database: cdk.stringToCloudFormation(properties.database),\n        Host: cdk.stringToCloudFormation(properties.host),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceOracleParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.OracleParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.OracleParametersProperty>();\n    ret.addPropertyResult('database', 'Database', cfn_parse.FromCloudFormation.getString(properties.Database));\n    ret.addPropertyResult('host', 'Host', cfn_parse.FromCloudFormation.getString(properties.Host));\n    ret.addPropertyResult('port', 'Port', cfn_parse.FromCloudFormation.getNumber(properties.Port));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                       \n    export interface PostgreSqlParametersProperty {\n                                                                                                                                                                                                                                                             \n        readonly database: string;\n                                                                                                                                                                                                                                                     \n        readonly host: string;\n                                                                                                                                                                                                                                                     \n        readonly port: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PostgreSqlParametersProperty`\n *\n * @param properties - the TypeScript properties of a `PostgreSqlParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_PostgreSqlParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('database', cdk.requiredValidator)(properties.database));\n    errors.collect(cdk.propertyValidator('database', cdk.validateString)(properties.database));\n    errors.collect(cdk.propertyValidator('host', cdk.requiredValidator)(properties.host));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('port', cdk.requiredValidator)(properties.port));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"PostgreSqlParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.PostgreSqlParameters` resource\n *\n * @param properties - the TypeScript properties of a `PostgreSqlParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.PostgreSqlParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourcePostgreSqlParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_PostgreSqlParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Database: cdk.stringToCloudFormation(properties.database),\n        Host: cdk.stringToCloudFormation(properties.host),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourcePostgreSqlParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.PostgreSqlParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.PostgreSqlParametersProperty>();\n    ret.addPropertyResult('database', 'Database', cfn_parse.FromCloudFormation.getString(properties.Database));\n    ret.addPropertyResult('host', 'Host', cfn_parse.FromCloudFormation.getString(properties.Host));\n    ret.addPropertyResult('port', 'Port', cfn_parse.FromCloudFormation.getNumber(properties.Port));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                               \n    export interface PrestoParametersProperty {\n                                                                                                                                                                                                                                                   \n        readonly catalog: string;\n                                                                                                                                                                                                                                             \n        readonly host: string;\n                                                                                                                                                                                                                                             \n        readonly port: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PrestoParametersProperty`\n *\n * @param properties - the TypeScript properties of a `PrestoParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_PrestoParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('catalog', cdk.requiredValidator)(properties.catalog));\n    errors.collect(cdk.propertyValidator('catalog', cdk.validateString)(properties.catalog));\n    errors.collect(cdk.propertyValidator('host', cdk.requiredValidator)(properties.host));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('port', cdk.requiredValidator)(properties.port));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"PrestoParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.PrestoParameters` resource\n *\n * @param properties - the TypeScript properties of a `PrestoParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.PrestoParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourcePrestoParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_PrestoParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Catalog: cdk.stringToCloudFormation(properties.catalog),\n        Host: cdk.stringToCloudFormation(properties.host),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourcePrestoParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.PrestoParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.PrestoParametersProperty>();\n    ret.addPropertyResult('catalog', 'Catalog', cfn_parse.FromCloudFormation.getString(properties.Catalog));\n    ret.addPropertyResult('host', 'Host', cfn_parse.FromCloudFormation.getString(properties.Host));\n    ret.addPropertyResult('port', 'Port', cfn_parse.FromCloudFormation.getNumber(properties.Port));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                \n    export interface RdsParametersProperty {\n                                                                                                                                                                                                                                               \n        readonly database: string;\n                                                                                                                                                                                                                                                    \n        readonly instanceId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RdsParametersProperty`\n *\n * @param properties - the TypeScript properties of a `RdsParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_RdsParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('database', cdk.requiredValidator)(properties.database));\n    errors.collect(cdk.propertyValidator('database', cdk.validateString)(properties.database));\n    errors.collect(cdk.propertyValidator('instanceId', cdk.requiredValidator)(properties.instanceId));\n    errors.collect(cdk.propertyValidator('instanceId', cdk.validateString)(properties.instanceId));\n    return errors.wrap('supplied properties not correct for \"RdsParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.RdsParameters` resource\n *\n * @param properties - the TypeScript properties of a `RdsParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.RdsParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceRdsParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_RdsParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Database: cdk.stringToCloudFormation(properties.database),\n        InstanceId: cdk.stringToCloudFormation(properties.instanceId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceRdsParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.RdsParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.RdsParametersProperty>();\n    ret.addPropertyResult('database', 'Database', cfn_parse.FromCloudFormation.getString(properties.Database));\n    ret.addPropertyResult('instanceId', 'InstanceId', cfn_parse.FromCloudFormation.getString(properties.InstanceId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface RedshiftParametersProperty {\n                                                                                                                                                                                                                                                                                                                           \n        readonly clusterId?: string;\n                                                                                                                                                                                                                                                         \n        readonly database: string;\n                                                                                                                                                                                                                                                                                                     \n        readonly host?: string;\n                                                                                                                                                                                                                                                                                                         \n        readonly port?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RedshiftParametersProperty`\n *\n * @param properties - the TypeScript properties of a `RedshiftParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_RedshiftParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterId', cdk.validateString)(properties.clusterId));\n    errors.collect(cdk.propertyValidator('database', cdk.requiredValidator)(properties.database));\n    errors.collect(cdk.propertyValidator('database', cdk.validateString)(properties.database));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"RedshiftParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.RedshiftParameters` resource\n *\n * @param properties - the TypeScript properties of a `RedshiftParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.RedshiftParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceRedshiftParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_RedshiftParametersPropertyValidator(properties).assertSuccess();\n    return {\n        ClusterId: cdk.stringToCloudFormation(properties.clusterId),\n        Database: cdk.stringToCloudFormation(properties.database),\n        Host: cdk.stringToCloudFormation(properties.host),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceRedshiftParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.RedshiftParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.RedshiftParametersProperty>();\n    ret.addPropertyResult('clusterId', 'ClusterId', properties.ClusterId != null ? cfn_parse.FromCloudFormation.getString(properties.ClusterId) : undefined);\n    ret.addPropertyResult('database', 'Database', cfn_parse.FromCloudFormation.getString(properties.Database));\n    ret.addPropertyResult('host', 'Host', properties.Host != null ? cfn_parse.FromCloudFormation.getString(properties.Host) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                   \n    export interface ResourcePermissionProperty {\n                                                                                                                                                                                                                                                                                                \n        readonly actions: string[];\nn        readonly principal: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourcePermissionProperty`\n *\n * @param properties - the TypeScript properties of a `ResourcePermissionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_ResourcePermissionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.requiredValidator)(properties.actions));\n    errors.collect(cdk.propertyValidator('actions', cdk.listValidator(cdk.validateString))(properties.actions));\n    errors.collect(cdk.propertyValidator('principal', cdk.requiredValidator)(properties.principal));\n    errors.collect(cdk.propertyValidator('principal', cdk.validateString)(properties.principal));\n    return errors.wrap('supplied properties not correct for \"ResourcePermissionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.ResourcePermission` resource\n *\n * @param properties - the TypeScript properties of a `ResourcePermissionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.ResourcePermission` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceResourcePermissionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_ResourcePermissionPropertyValidator(properties).assertSuccess();\n    return {\n        Actions: cdk.listMapper(cdk.stringToCloudFormation)(properties.actions),\n        Principal: cdk.stringToCloudFormation(properties.principal),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceResourcePermissionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.ResourcePermissionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.ResourcePermissionProperty>();\n    ret.addPropertyResult('actions', 'Actions', cfn_parse.FromCloudFormation.getStringArray(properties.Actions));\n    ret.addPropertyResult('principal', 'Principal', cfn_parse.FromCloudFormation.getString(properties.Principal));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                       \n    export interface S3ParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly manifestFileLocation: CfnDataSource.ManifestFileLocationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3ParametersProperty`\n *\n * @param properties - the TypeScript properties of a `S3ParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_S3ParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('manifestFileLocation', cdk.requiredValidator)(properties.manifestFileLocation));\n    errors.collect(cdk.propertyValidator('manifestFileLocation', CfnDataSource_ManifestFileLocationPropertyValidator)(properties.manifestFileLocation));\n    return errors.wrap('supplied properties not correct for \"S3ParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.S3Parameters` resource\n *\n * @param properties - the TypeScript properties of a `S3ParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.S3Parameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceS3ParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_S3ParametersPropertyValidator(properties).assertSuccess();\n    return {\n        ManifestFileLocation: cfnDataSourceManifestFileLocationPropertyToCloudFormation(properties.manifestFileLocation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceS3ParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.S3ParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.S3ParametersProperty>();\n    ret.addPropertyResult('manifestFileLocation', 'ManifestFileLocation', CfnDataSourceManifestFileLocationPropertyFromCloudFormation(properties.ManifestFileLocation));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                     \n    export interface SnowflakeParametersProperty {\n                                                                                                                                                                                                                                                           \n        readonly database: string;\n                                                                                                                                                                                                                                                   \n        readonly host: string;\n                                                                                                                                                                                                                                                             \n        readonly warehouse: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SnowflakeParametersProperty`\n *\n * @param properties - the TypeScript properties of a `SnowflakeParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_SnowflakeParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('database', cdk.requiredValidator)(properties.database));\n    errors.collect(cdk.propertyValidator('database', cdk.validateString)(properties.database));\n    errors.collect(cdk.propertyValidator('host', cdk.requiredValidator)(properties.host));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('warehouse', cdk.requiredValidator)(properties.warehouse));\n    errors.collect(cdk.propertyValidator('warehouse', cdk.validateString)(properties.warehouse));\n    return errors.wrap('supplied properties not correct for \"SnowflakeParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.SnowflakeParameters` resource\n *\n * @param properties - the TypeScript properties of a `SnowflakeParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.SnowflakeParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceSnowflakeParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_SnowflakeParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Database: cdk.stringToCloudFormation(properties.database),\n        Host: cdk.stringToCloudFormation(properties.host),\n        Warehouse: cdk.stringToCloudFormation(properties.warehouse),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceSnowflakeParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.SnowflakeParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.SnowflakeParametersProperty>();\n    ret.addPropertyResult('database', 'Database', cfn_parse.FromCloudFormation.getString(properties.Database));\n    ret.addPropertyResult('host', 'Host', cfn_parse.FromCloudFormation.getString(properties.Host));\n    ret.addPropertyResult('warehouse', 'Warehouse', cfn_parse.FromCloudFormation.getString(properties.Warehouse));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                             \n    export interface SparkParametersProperty {\n                                                                                                                                                                                                                                           \n        readonly host: string;\n                                                                                                                                                                                                                                           \n        readonly port: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SparkParametersProperty`\n *\n * @param properties - the TypeScript properties of a `SparkParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_SparkParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('host', cdk.requiredValidator)(properties.host));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('port', cdk.requiredValidator)(properties.port));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"SparkParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.SparkParameters` resource\n *\n * @param properties - the TypeScript properties of a `SparkParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.SparkParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceSparkParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_SparkParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Host: cdk.stringToCloudFormation(properties.host),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceSparkParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.SparkParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.SparkParametersProperty>();\n    ret.addPropertyResult('host', 'Host', cfn_parse.FromCloudFormation.getString(properties.Host));\n    ret.addPropertyResult('port', 'Port', cfn_parse.FromCloudFormation.getNumber(properties.Port));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                      \n    export interface SqlServerParametersProperty {\n                                                                                                                                                                                                                                                           \n        readonly database: string;\n                                                                                                                                                                                                                                                   \n        readonly host: string;\n                                                                                                                                                                                                                                                   \n        readonly port: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SqlServerParametersProperty`\n *\n * @param properties - the TypeScript properties of a `SqlServerParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_SqlServerParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('database', cdk.requiredValidator)(properties.database));\n    errors.collect(cdk.propertyValidator('database', cdk.validateString)(properties.database));\n    errors.collect(cdk.propertyValidator('host', cdk.requiredValidator)(properties.host));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('port', cdk.requiredValidator)(properties.port));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"SqlServerParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.SqlServerParameters` resource\n *\n * @param properties - the TypeScript properties of a `SqlServerParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.SqlServerParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceSqlServerParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_SqlServerParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Database: cdk.stringToCloudFormation(properties.database),\n        Host: cdk.stringToCloudFormation(properties.host),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceSqlServerParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.SqlServerParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.SqlServerParametersProperty>();\n    ret.addPropertyResult('database', 'Database', cfn_parse.FromCloudFormation.getString(properties.Database));\n    ret.addPropertyResult('host', 'Host', cfn_parse.FromCloudFormation.getString(properties.Host));\n    ret.addPropertyResult('port', 'Port', cfn_parse.FromCloudFormation.getNumber(properties.Port));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                                                                                                 \n    export interface SslPropertiesProperty {\n                                                                                                                                                                                                                                                                                                   \n        readonly disableSsl?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SslPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `SslPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_SslPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('disableSsl', cdk.validateBoolean)(properties.disableSsl));\n    return errors.wrap('supplied properties not correct for \"SslPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.SslProperties` resource\n *\n * @param properties - the TypeScript properties of a `SslPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.SslProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceSslPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_SslPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        DisableSsl: cdk.booleanToCloudFormation(properties.disableSsl),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceSslPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.SslPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.SslPropertiesProperty>();\n    ret.addPropertyResult('disableSsl', 'DisableSsl', properties.DisableSsl != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableSsl) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                   \n    export interface TeradataParametersProperty {\n                                                                                                                                                                                                                                                         \n        readonly database: string;\n                                                                                                                                                                                                                                                 \n        readonly host: string;\n                                                                                                                                                                                                                                                 \n        readonly port: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TeradataParametersProperty`\n *\n * @param properties - the TypeScript properties of a `TeradataParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_TeradataParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('database', cdk.requiredValidator)(properties.database));\n    errors.collect(cdk.propertyValidator('database', cdk.validateString)(properties.database));\n    errors.collect(cdk.propertyValidator('host', cdk.requiredValidator)(properties.host));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('port', cdk.requiredValidator)(properties.port));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    return errors.wrap('supplied properties not correct for \"TeradataParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.TeradataParameters` resource\n *\n * @param properties - the TypeScript properties of a `TeradataParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.TeradataParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceTeradataParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_TeradataParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Database: cdk.stringToCloudFormation(properties.database),\n        Host: cdk.stringToCloudFormation(properties.host),\n        Port: cdk.numberToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceTeradataParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.TeradataParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.TeradataParametersProperty>();\n    ret.addPropertyResult('database', 'Database', cfn_parse.FromCloudFormation.getString(properties.Database));\n    ret.addPropertyResult('host', 'Host', cfn_parse.FromCloudFormation.getString(properties.Host));\n    ret.addPropertyResult('port', 'Port', cfn_parse.FromCloudFormation.getNumber(properties.Port));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataSource {\n                                                                                                                                                                                                                                                      \n    export interface VpcConnectionPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly vpcConnectionArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcConnectionPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `VpcConnectionPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataSource_VpcConnectionPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('vpcConnectionArn', cdk.requiredValidator)(properties.vpcConnectionArn));\n    errors.collect(cdk.propertyValidator('vpcConnectionArn', cdk.validateString)(properties.vpcConnectionArn));\n    return errors.wrap('supplied properties not correct for \"VpcConnectionPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.VpcConnectionProperties` resource\n *\n * @param properties - the TypeScript properties of a `VpcConnectionPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::DataSource.VpcConnectionProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataSourceVpcConnectionPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataSource_VpcConnectionPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        VpcConnectionArn: cdk.stringToCloudFormation(properties.vpcConnectionArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataSourceVpcConnectionPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataSource.VpcConnectionPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataSource.VpcConnectionPropertiesProperty>();\n    ret.addPropertyResult('vpcConnectionArn', 'VpcConnectionArn', cfn_parse.FromCloudFormation.getString(properties.VpcConnectionArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                       \nexport interface CfnTemplateProps {\n\n                                                                                                                                                                                                                                                                                                                     \n    readonly awsAccountId: string;\n\nn    readonly sourceEntity: CfnTemplate.TemplateSourceEntityProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                               \n    readonly templateId: string;\n\n                                                                                                                                                                                                            \n    readonly name?: string;\n\n                                                                                                                                                                                                                                            \n    readonly permissions?: Array<CfnTemplate.ResourcePermissionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly versionDescription?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTemplateProps`\n *\n * @param properties - the TypeScript properties of a `CfnTemplateProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTemplatePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('awsAccountId', cdk.requiredValidator)(properties.awsAccountId));\n    errors.collect(cdk.propertyValidator('awsAccountId', cdk.validateString)(properties.awsAccountId));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('permissions', cdk.listValidator(CfnTemplate_ResourcePermissionPropertyValidator))(properties.permissions));\n    errors.collect(cdk.propertyValidator('sourceEntity', cdk.requiredValidator)(properties.sourceEntity));\n    errors.collect(cdk.propertyValidator('sourceEntity', CfnTemplate_TemplateSourceEntityPropertyValidator)(properties.sourceEntity));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('templateId', cdk.requiredValidator)(properties.templateId));\n    errors.collect(cdk.propertyValidator('templateId', cdk.validateString)(properties.templateId));\n    errors.collect(cdk.propertyValidator('versionDescription', cdk.validateString)(properties.versionDescription));\n    return errors.wrap('supplied properties not correct for \"CfnTemplateProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Template` resource\n *\n * @param properties - the TypeScript properties of a `CfnTemplateProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Template` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTemplatePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTemplatePropsValidator(properties).assertSuccess();\n    return {\n        AwsAccountId: cdk.stringToCloudFormation(properties.awsAccountId),\n        SourceEntity: cfnTemplateTemplateSourceEntityPropertyToCloudFormation(properties.sourceEntity),\n        TemplateId: cdk.stringToCloudFormation(properties.templateId),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Permissions: cdk.listMapper(cfnTemplateResourcePermissionPropertyToCloudFormation)(properties.permissions),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VersionDescription: cdk.stringToCloudFormation(properties.versionDescription),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTemplatePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTemplateProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTemplateProps>();\n    ret.addPropertyResult('awsAccountId', 'AwsAccountId', cfn_parse.FromCloudFormation.getString(properties.AwsAccountId));\n    ret.addPropertyResult('sourceEntity', 'SourceEntity', CfnTemplateTemplateSourceEntityPropertyFromCloudFormation(properties.SourceEntity));\n    ret.addPropertyResult('templateId', 'TemplateId', cfn_parse.FromCloudFormation.getString(properties.TemplateId));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('permissions', 'Permissions', properties.Permissions != null ? cfn_parse.FromCloudFormation.getArray(CfnTemplateResourcePermissionPropertyFromCloudFormation)(properties.Permissions) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('versionDescription', 'VersionDescription', properties.VersionDescription != null ? cfn_parse.FromCloudFormation.getString(properties.VersionDescription) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTemplate extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::QuickSight::Template\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTemplate {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTemplatePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTemplate(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                          \n    public readonly attrArn: string;\n\n                                                                                                      \n    public readonly attrCreatedTime: string;\n\n                                                                                                               \n    public readonly attrLastUpdatedTime: string;\n\n                                                                                                                                                                                                                                                                                                                     \n    public awsAccountId: string;\n\nn    public sourceEntity: CfnTemplate.TemplateSourceEntityProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                               \n    public templateId: string;\n\n                                                                                                                                                                                                            \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                            \n    public permissions: Array<CfnTemplate.ResourcePermissionProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public versionDescription: string | undefined;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnTemplateProps) {\n        super(scope, id, { type: CfnTemplate.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'awsAccountId', this);\n        cdk.requireProperty(props, 'sourceEntity', this);\n        cdk.requireProperty(props, 'templateId', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreatedTime = cdk.Token.asString(this.getAtt('CreatedTime'));\n        this.attrLastUpdatedTime = cdk.Token.asString(this.getAtt('LastUpdatedTime'));\n\n        this.awsAccountId = props.awsAccountId;\n        this.sourceEntity = props.sourceEntity;\n        this.templateId = props.templateId;\n        this.name = props.name;\n        this.permissions = props.permissions;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::QuickSight::Template\", props.tags, { tagPropertyName: 'tags' });\n        this.versionDescription = props.versionDescription;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTemplate.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            awsAccountId: this.awsAccountId,\n            sourceEntity: this.sourceEntity,\n            templateId: this.templateId,\n            name: this.name,\n            permissions: this.permissions,\n            tags: this.tags.renderTags(),\n            versionDescription: this.versionDescription,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTemplatePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnTemplate {\n                                                                                                                                                                                                                                     \n    export interface DataSetReferenceProperty {\n                                                                                                                                                                                                                                                                             \n        readonly dataSetArn: string;\n                                                                                                                                                                                                                                                                      \n        readonly dataSetPlaceholder: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataSetReferenceProperty`\n *\n * @param properties - the TypeScript properties of a `DataSetReferenceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTemplate_DataSetReferencePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataSetArn', cdk.requiredValidator)(properties.dataSetArn));\n    errors.collect(cdk.propertyValidator('dataSetArn', cdk.validateString)(properties.dataSetArn));\n    errors.collect(cdk.propertyValidator('dataSetPlaceholder', cdk.requiredValidator)(properties.dataSetPlaceholder));\n    errors.collect(cdk.propertyValidator('dataSetPlaceholder', cdk.validateString)(properties.dataSetPlaceholder));\n    return errors.wrap('supplied properties not correct for \"DataSetReferenceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Template.DataSetReference` resource\n *\n * @param properties - the TypeScript properties of a `DataSetReferenceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Template.DataSetReference` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTemplateDataSetReferencePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTemplate_DataSetReferencePropertyValidator(properties).assertSuccess();\n    return {\n        DataSetArn: cdk.stringToCloudFormation(properties.dataSetArn),\n        DataSetPlaceholder: cdk.stringToCloudFormation(properties.dataSetPlaceholder),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTemplateDataSetReferencePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTemplate.DataSetReferenceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTemplate.DataSetReferenceProperty>();\n    ret.addPropertyResult('dataSetArn', 'DataSetArn', cfn_parse.FromCloudFormation.getString(properties.DataSetArn));\n    ret.addPropertyResult('dataSetPlaceholder', 'DataSetPlaceholder', cfn_parse.FromCloudFormation.getString(properties.DataSetPlaceholder));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTemplate {\n                                                                                                                                                                                                                                                 \n    export interface ResourcePermissionProperty {\n                                                                                                                                                                                                                                                                                            \n        readonly actions: string[];\nn        readonly principal: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourcePermissionProperty`\n *\n * @param properties - the TypeScript properties of a `ResourcePermissionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTemplate_ResourcePermissionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.requiredValidator)(properties.actions));\n    errors.collect(cdk.propertyValidator('actions', cdk.listValidator(cdk.validateString))(properties.actions));\n    errors.collect(cdk.propertyValidator('principal', cdk.requiredValidator)(properties.principal));\n    errors.collect(cdk.propertyValidator('principal', cdk.validateString)(properties.principal));\n    return errors.wrap('supplied properties not correct for \"ResourcePermissionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Template.ResourcePermission` resource\n *\n * @param properties - the TypeScript properties of a `ResourcePermissionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Template.ResourcePermission` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTemplateResourcePermissionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTemplate_ResourcePermissionPropertyValidator(properties).assertSuccess();\n    return {\n        Actions: cdk.listMapper(cdk.stringToCloudFormation)(properties.actions),\n        Principal: cdk.stringToCloudFormation(properties.principal),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTemplateResourcePermissionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTemplate.ResourcePermissionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTemplate.ResourcePermissionProperty>();\n    ret.addPropertyResult('actions', 'Actions', cfn_parse.FromCloudFormation.getStringArray(properties.Actions));\n    ret.addPropertyResult('principal', 'Principal', cfn_parse.FromCloudFormation.getString(properties.Principal));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTemplate {\n                                                                                                                                                                                                                                                             \n    export interface TemplateSourceAnalysisProperty {\n                                                                                                                                                                                                                                                                                              \n        readonly arn: string;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly dataSetReferences: Array<CfnTemplate.DataSetReferenceProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TemplateSourceAnalysisProperty`\n *\n * @param properties - the TypeScript properties of a `TemplateSourceAnalysisProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTemplate_TemplateSourceAnalysisPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    errors.collect(cdk.propertyValidator('dataSetReferences', cdk.requiredValidator)(properties.dataSetReferences));\n    errors.collect(cdk.propertyValidator('dataSetReferences', cdk.listValidator(CfnTemplate_DataSetReferencePropertyValidator))(properties.dataSetReferences));\n    return errors.wrap('supplied properties not correct for \"TemplateSourceAnalysisProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Template.TemplateSourceAnalysis` resource\n *\n * @param properties - the TypeScript properties of a `TemplateSourceAnalysisProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Template.TemplateSourceAnalysis` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTemplateTemplateSourceAnalysisPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTemplate_TemplateSourceAnalysisPropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n        DataSetReferences: cdk.listMapper(cfnTemplateDataSetReferencePropertyToCloudFormation)(properties.dataSetReferences),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTemplateTemplateSourceAnalysisPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTemplate.TemplateSourceAnalysisProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTemplate.TemplateSourceAnalysisProperty>();\n    ret.addPropertyResult('arn', 'Arn', cfn_parse.FromCloudFormation.getString(properties.Arn));\n    ret.addPropertyResult('dataSetReferences', 'DataSetReferences', cfn_parse.FromCloudFormation.getArray(CfnTemplateDataSetReferencePropertyFromCloudFormation)(properties.DataSetReferences));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTemplate {\n                                                                                                                                                                                                                                                         \n    export interface TemplateSourceEntityProperty {\n                                                                                                                                                                                                                                                                                                         \n        readonly sourceAnalysis?: CfnTemplate.TemplateSourceAnalysisProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                         \n        readonly sourceTemplate?: CfnTemplate.TemplateSourceTemplateProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TemplateSourceEntityProperty`\n *\n * @param properties - the TypeScript properties of a `TemplateSourceEntityProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTemplate_TemplateSourceEntityPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('sourceAnalysis', CfnTemplate_TemplateSourceAnalysisPropertyValidator)(properties.sourceAnalysis));\n    errors.collect(cdk.propertyValidator('sourceTemplate', CfnTemplate_TemplateSourceTemplatePropertyValidator)(properties.sourceTemplate));\n    return errors.wrap('supplied properties not correct for \"TemplateSourceEntityProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Template.TemplateSourceEntity` resource\n *\n * @param properties - the TypeScript properties of a `TemplateSourceEntityProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Template.TemplateSourceEntity` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTemplateTemplateSourceEntityPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTemplate_TemplateSourceEntityPropertyValidator(properties).assertSuccess();\n    return {\n        SourceAnalysis: cfnTemplateTemplateSourceAnalysisPropertyToCloudFormation(properties.sourceAnalysis),\n        SourceTemplate: cfnTemplateTemplateSourceTemplatePropertyToCloudFormation(properties.sourceTemplate),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTemplateTemplateSourceEntityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTemplate.TemplateSourceEntityProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTemplate.TemplateSourceEntityProperty>();\n    ret.addPropertyResult('sourceAnalysis', 'SourceAnalysis', properties.SourceAnalysis != null ? CfnTemplateTemplateSourceAnalysisPropertyFromCloudFormation(properties.SourceAnalysis) : undefined);\n    ret.addPropertyResult('sourceTemplate', 'SourceTemplate', properties.SourceTemplate != null ? CfnTemplateTemplateSourceTemplatePropertyFromCloudFormation(properties.SourceTemplate) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTemplate {\n                                                                                                                                                                                                                                                             \n    export interface TemplateSourceTemplateProperty {\n                                                                                                                                                                                                                                                                                              \n        readonly arn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TemplateSourceTemplateProperty`\n *\n * @param properties - the TypeScript properties of a `TemplateSourceTemplateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTemplate_TemplateSourceTemplatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    return errors.wrap('supplied properties not correct for \"TemplateSourceTemplateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Template.TemplateSourceTemplate` resource\n *\n * @param properties - the TypeScript properties of a `TemplateSourceTemplateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Template.TemplateSourceTemplate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTemplateTemplateSourceTemplatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTemplate_TemplateSourceTemplatePropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTemplateTemplateSourceTemplatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTemplate.TemplateSourceTemplateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTemplate.TemplateSourceTemplateProperty>();\n    ret.addPropertyResult('arn', 'Arn', cfn_parse.FromCloudFormation.getString(properties.Arn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                 \nexport interface CfnThemeProps {\n\n                                                                                                                                                                                                                                              \n    readonly awsAccountId: string;\n\n                                                                                                                                                                                                                                                                                \n    readonly themeId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly baseThemeId?: string;\n\n                                                                                                                                                                                                                                                    \n    readonly configuration?: CfnTheme.ThemeConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                   \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                \n    readonly permissions?: Array<CfnTheme.ResourcePermissionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                     \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly versionDescription?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnThemeProps`\n *\n * @param properties - the TypeScript properties of a `CfnThemeProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnThemePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('awsAccountId', cdk.requiredValidator)(properties.awsAccountId));\n    errors.collect(cdk.propertyValidator('awsAccountId', cdk.validateString)(properties.awsAccountId));\n    errors.collect(cdk.propertyValidator('baseThemeId', cdk.validateString)(properties.baseThemeId));\n    errors.collect(cdk.propertyValidator('configuration', CfnTheme_ThemeConfigurationPropertyValidator)(properties.configuration));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('permissions', cdk.listValidator(CfnTheme_ResourcePermissionPropertyValidator))(properties.permissions));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('themeId', cdk.requiredValidator)(properties.themeId));\n    errors.collect(cdk.propertyValidator('themeId', cdk.validateString)(properties.themeId));\n    errors.collect(cdk.propertyValidator('versionDescription', cdk.validateString)(properties.versionDescription));\n    return errors.wrap('supplied properties not correct for \"CfnThemeProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Theme` resource\n *\n * @param properties - the TypeScript properties of a `CfnThemeProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Theme` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnThemePropsValidator(properties).assertSuccess();\n    return {\n        AwsAccountId: cdk.stringToCloudFormation(properties.awsAccountId),\n        ThemeId: cdk.stringToCloudFormation(properties.themeId),\n        BaseThemeId: cdk.stringToCloudFormation(properties.baseThemeId),\n        Configuration: cfnThemeThemeConfigurationPropertyToCloudFormation(properties.configuration),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Permissions: cdk.listMapper(cfnThemeResourcePermissionPropertyToCloudFormation)(properties.permissions),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VersionDescription: cdk.stringToCloudFormation(properties.versionDescription),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnThemeProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnThemeProps>();\n    ret.addPropertyResult('awsAccountId', 'AwsAccountId', cfn_parse.FromCloudFormation.getString(properties.AwsAccountId));\n    ret.addPropertyResult('themeId', 'ThemeId', cfn_parse.FromCloudFormation.getString(properties.ThemeId));\n    ret.addPropertyResult('baseThemeId', 'BaseThemeId', properties.BaseThemeId != null ? cfn_parse.FromCloudFormation.getString(properties.BaseThemeId) : undefined);\n    ret.addPropertyResult('configuration', 'Configuration', properties.Configuration != null ? CfnThemeThemeConfigurationPropertyFromCloudFormation(properties.Configuration) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('permissions', 'Permissions', properties.Permissions != null ? cfn_parse.FromCloudFormation.getArray(CfnThemeResourcePermissionPropertyFromCloudFormation)(properties.Permissions) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('versionDescription', 'VersionDescription', properties.VersionDescription != null ? cfn_parse.FromCloudFormation.getString(properties.VersionDescription) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTheme extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::QuickSight::Theme\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTheme {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnThemePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTheme(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                       \n    public readonly attrArn: string;\n\n                                                                                                  \n    public readonly attrCreatedTime: string;\n\n                                                                                                           \n    public readonly attrLastUpdatedTime: string;\n\n                                                                       \n    public readonly attrType: string;\n\n                                                                                                                                                                                                                                              \n    public awsAccountId: string;\n\n                                                                                                                                                                                                                                                                                \n    public themeId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public baseThemeId: string | undefined;\n\n                                                                                                                                                                                                                                                    \n    public configuration: CfnTheme.ThemeConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                   \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                \n    public permissions: Array<CfnTheme.ResourcePermissionProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                     \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public versionDescription: string | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnThemeProps) {\n        super(scope, id, { type: CfnTheme.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'awsAccountId', this);\n        cdk.requireProperty(props, 'themeId', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreatedTime = cdk.Token.asString(this.getAtt('CreatedTime'));\n        this.attrLastUpdatedTime = cdk.Token.asString(this.getAtt('LastUpdatedTime'));\n        this.attrType = cdk.Token.asString(this.getAtt('Type'));\n\n        this.awsAccountId = props.awsAccountId;\n        this.themeId = props.themeId;\n        this.baseThemeId = props.baseThemeId;\n        this.configuration = props.configuration;\n        this.name = props.name;\n        this.permissions = props.permissions;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::QuickSight::Theme\", props.tags, { tagPropertyName: 'tags' });\n        this.versionDescription = props.versionDescription;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTheme.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            awsAccountId: this.awsAccountId,\n            themeId: this.themeId,\n            baseThemeId: this.baseThemeId,\n            configuration: this.configuration,\n            name: this.name,\n            permissions: this.permissions,\n            tags: this.tags.renderTags(),\n            versionDescription: this.versionDescription,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnThemePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnTheme {\n                                                                                                                                                                                                                                                            \n    export interface BorderStyleProperty {\n                                                                                                                                                                                                                                                                        \n        readonly show?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BorderStyleProperty`\n *\n * @param properties - the TypeScript properties of a `BorderStyleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_BorderStylePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('show', cdk.validateBoolean)(properties.show));\n    return errors.wrap('supplied properties not correct for \"BorderStyleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Theme.BorderStyle` resource\n *\n * @param properties - the TypeScript properties of a `BorderStyleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Theme.BorderStyle` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeBorderStylePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_BorderStylePropertyValidator(properties).assertSuccess();\n    return {\n        Show: cdk.booleanToCloudFormation(properties.show),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeBorderStylePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.BorderStyleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.BorderStyleProperty>();\n    ret.addPropertyResult('show', 'Show', properties.Show != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Show) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTheme {\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface DataColorPaletteProperty {\n                                                                                                                                                                                                                                                                     \n        readonly colors?: string[];\n                                                                                                                                                                                                                                                                                                                                   \n        readonly emptyFillColor?: string;\n                                                                                                                                                                                                                                                                                                                 \n        readonly minMaxGradient?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataColorPaletteProperty`\n *\n * @param properties - the TypeScript properties of a `DataColorPaletteProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_DataColorPalettePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('colors', cdk.listValidator(cdk.validateString))(properties.colors));\n    errors.collect(cdk.propertyValidator('emptyFillColor', cdk.validateString)(properties.emptyFillColor));\n    errors.collect(cdk.propertyValidator('minMaxGradient', cdk.listValidator(cdk.validateString))(properties.minMaxGradient));\n    return errors.wrap('supplied properties not correct for \"DataColorPaletteProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Theme.DataColorPalette` resource\n *\n * @param properties - the TypeScript properties of a `DataColorPaletteProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Theme.DataColorPalette` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeDataColorPalettePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_DataColorPalettePropertyValidator(properties).assertSuccess();\n    return {\n        Colors: cdk.listMapper(cdk.stringToCloudFormation)(properties.colors),\n        EmptyFillColor: cdk.stringToCloudFormation(properties.emptyFillColor),\n        MinMaxGradient: cdk.listMapper(cdk.stringToCloudFormation)(properties.minMaxGradient),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeDataColorPalettePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.DataColorPaletteProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.DataColorPaletteProperty>();\n    ret.addPropertyResult('colors', 'Colors', properties.Colors != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Colors) : undefined);\n    ret.addPropertyResult('emptyFillColor', 'EmptyFillColor', properties.EmptyFillColor != null ? cfn_parse.FromCloudFormation.getString(properties.EmptyFillColor) : undefined);\n    ret.addPropertyResult('minMaxGradient', 'MinMaxGradient', properties.MinMaxGradient != null ? cfn_parse.FromCloudFormation.getStringArray(properties.MinMaxGradient) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTheme {\n                                                                                                                                                                                                   \n    export interface FontProperty {\n                                                                                                                                                                                                                                              \n        readonly fontFamily?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FontProperty`\n *\n * @param properties - the TypeScript properties of a `FontProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_FontPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('fontFamily', cdk.validateString)(properties.fontFamily));\n    return errors.wrap('supplied properties not correct for \"FontProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Theme.Font` resource\n *\n * @param properties - the TypeScript properties of a `FontProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Theme.Font` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeFontPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_FontPropertyValidator(properties).assertSuccess();\n    return {\n        FontFamily: cdk.stringToCloudFormation(properties.fontFamily),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeFontPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.FontProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.FontProperty>();\n    ret.addPropertyResult('fontFamily', 'FontFamily', properties.FontFamily != null ? cfn_parse.FromCloudFormation.getString(properties.FontFamily) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTheme {\n                                                                                                                                                                                                                                                                           \n    export interface GutterStyleProperty {\n                                                                                                                                                                                                                                                                                                      \n        readonly show?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GutterStyleProperty`\n *\n * @param properties - the TypeScript properties of a `GutterStyleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_GutterStylePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('show', cdk.validateBoolean)(properties.show));\n    return errors.wrap('supplied properties not correct for \"GutterStyleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Theme.GutterStyle` resource\n *\n * @param properties - the TypeScript properties of a `GutterStyleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Theme.GutterStyle` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeGutterStylePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_GutterStylePropertyValidator(properties).assertSuccess();\n    return {\n        Show: cdk.booleanToCloudFormation(properties.show),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeGutterStylePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.GutterStyleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.GutterStyleProperty>();\n    ret.addPropertyResult('show', 'Show', properties.Show != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Show) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTheme {\n                                                                                                                                                                                                                                                                             \n    export interface MarginStyleProperty {\n                                                                                                                                                                                                                                                                                 \n        readonly show?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MarginStyleProperty`\n *\n * @param properties - the TypeScript properties of a `MarginStyleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_MarginStylePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('show', cdk.validateBoolean)(properties.show));\n    return errors.wrap('supplied properties not correct for \"MarginStyleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Theme.MarginStyle` resource\n *\n * @param properties - the TypeScript properties of a `MarginStyleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Theme.MarginStyle` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeMarginStylePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_MarginStylePropertyValidator(properties).assertSuccess();\n    return {\n        Show: cdk.booleanToCloudFormation(properties.show),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeMarginStylePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.MarginStyleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.MarginStyleProperty>();\n    ret.addPropertyResult('show', 'Show', properties.Show != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Show) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTheme {\n                                                                                                                                                                                                                                              \n    export interface ResourcePermissionProperty {\n                                                                                                                                                                                                                                                                                      \n        readonly actions: string[];\nn        readonly principal: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourcePermissionProperty`\n *\n * @param properties - the TypeScript properties of a `ResourcePermissionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_ResourcePermissionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.requiredValidator)(properties.actions));\n    errors.collect(cdk.propertyValidator('actions', cdk.listValidator(cdk.validateString))(properties.actions));\n    errors.collect(cdk.propertyValidator('principal', cdk.requiredValidator)(properties.principal));\n    errors.collect(cdk.propertyValidator('principal', cdk.validateString)(properties.principal));\n    return errors.wrap('supplied properties not correct for \"ResourcePermissionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Theme.ResourcePermission` resource\n *\n * @param properties - the TypeScript properties of a `ResourcePermissionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Theme.ResourcePermission` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeResourcePermissionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_ResourcePermissionPropertyValidator(properties).assertSuccess();\n    return {\n        Actions: cdk.listMapper(cdk.stringToCloudFormation)(properties.actions),\n        Principal: cdk.stringToCloudFormation(properties.principal),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeResourcePermissionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.ResourcePermissionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.ResourcePermissionProperty>();\n    ret.addPropertyResult('actions', 'Actions', cfn_parse.FromCloudFormation.getStringArray(properties.Actions));\n    ret.addPropertyResult('principal', 'Principal', cfn_parse.FromCloudFormation.getString(properties.Principal));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTheme {\n                                                                                                                                                                                                                                               \n    export interface SheetStyleProperty {\n                                                                                                                                                                                                                                                \n        readonly tile?: CfnTheme.TileStyleProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                     \n        readonly tileLayout?: CfnTheme.TileLayoutStyleProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SheetStyleProperty`\n *\n * @param properties - the TypeScript properties of a `SheetStyleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_SheetStylePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('tile', CfnTheme_TileStylePropertyValidator)(properties.tile));\n    errors.collect(cdk.propertyValidator('tileLayout', CfnTheme_TileLayoutStylePropertyValidator)(properties.tileLayout));\n    return errors.wrap('supplied properties not correct for \"SheetStyleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Theme.SheetStyle` resource\n *\n * @param properties - the TypeScript properties of a `SheetStyleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Theme.SheetStyle` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeSheetStylePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_SheetStylePropertyValidator(properties).assertSuccess();\n    return {\n        Tile: cfnThemeTileStylePropertyToCloudFormation(properties.tile),\n        TileLayout: cfnThemeTileLayoutStylePropertyToCloudFormation(properties.tileLayout),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeSheetStylePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.SheetStyleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.SheetStyleProperty>();\n    ret.addPropertyResult('tile', 'Tile', properties.Tile != null ? CfnThemeTileStylePropertyFromCloudFormation(properties.Tile) : undefined);\n    ret.addPropertyResult('tileLayout', 'TileLayout', properties.TileLayout != null ? CfnThemeTileLayoutStylePropertyFromCloudFormation(properties.TileLayout) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTheme {\n                                                                                                                                                                                                                                                                                                                 \n    export interface ThemeConfigurationProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly dataColorPalette?: CfnTheme.DataColorPaletteProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                     \n        readonly sheet?: CfnTheme.SheetStyleProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                        \n        readonly typography?: CfnTheme.TypographyProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                         \n        readonly uiColorPalette?: CfnTheme.UIColorPaletteProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ThemeConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ThemeConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_ThemeConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataColorPalette', CfnTheme_DataColorPalettePropertyValidator)(properties.dataColorPalette));\n    errors.collect(cdk.propertyValidator('sheet', CfnTheme_SheetStylePropertyValidator)(properties.sheet));\n    errors.collect(cdk.propertyValidator('typography', CfnTheme_TypographyPropertyValidator)(properties.typography));\n    errors.collect(cdk.propertyValidator('uiColorPalette', CfnTheme_UIColorPalettePropertyValidator)(properties.uiColorPalette));\n    return errors.wrap('supplied properties not correct for \"ThemeConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Theme.ThemeConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ThemeConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Theme.ThemeConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeThemeConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_ThemeConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        DataColorPalette: cfnThemeDataColorPalettePropertyToCloudFormation(properties.dataColorPalette),\n        Sheet: cfnThemeSheetStylePropertyToCloudFormation(properties.sheet),\n        Typography: cfnThemeTypographyPropertyToCloudFormation(properties.typography),\n        UIColorPalette: cfnThemeUIColorPalettePropertyToCloudFormation(properties.uiColorPalette),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeThemeConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.ThemeConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.ThemeConfigurationProperty>();\n    ret.addPropertyResult('dataColorPalette', 'DataColorPalette', properties.DataColorPalette != null ? CfnThemeDataColorPalettePropertyFromCloudFormation(properties.DataColorPalette) : undefined);\n    ret.addPropertyResult('sheet', 'Sheet', properties.Sheet != null ? CfnThemeSheetStylePropertyFromCloudFormation(properties.Sheet) : undefined);\n    ret.addPropertyResult('typography', 'Typography', properties.Typography != null ? CfnThemeTypographyPropertyFromCloudFormation(properties.Typography) : undefined);\n    ret.addPropertyResult('uiColorPalette', 'UIColorPalette', properties.UIColorPalette != null ? CfnThemeUIColorPalettePropertyFromCloudFormation(properties.UIColorPalette) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTheme {\n                                                                                                                                                                                                                                                                      \n    export interface TileLayoutStyleProperty {\n                                                                                                                                                                                                                                                                           \n        readonly gutter?: CfnTheme.GutterStyleProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                               \n        readonly margin?: CfnTheme.MarginStyleProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TileLayoutStyleProperty`\n *\n * @param properties - the TypeScript properties of a `TileLayoutStyleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_TileLayoutStylePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('gutter', CfnTheme_GutterStylePropertyValidator)(properties.gutter));\n    errors.collect(cdk.propertyValidator('margin', CfnTheme_MarginStylePropertyValidator)(properties.margin));\n    return errors.wrap('supplied properties not correct for \"TileLayoutStyleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Theme.TileLayoutStyle` resource\n *\n * @param properties - the TypeScript properties of a `TileLayoutStyleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Theme.TileLayoutStyle` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeTileLayoutStylePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_TileLayoutStylePropertyValidator(properties).assertSuccess();\n    return {\n        Gutter: cfnThemeGutterStylePropertyToCloudFormation(properties.gutter),\n        Margin: cfnThemeMarginStylePropertyToCloudFormation(properties.margin),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeTileLayoutStylePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.TileLayoutStyleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.TileLayoutStyleProperty>();\n    ret.addPropertyResult('gutter', 'Gutter', properties.Gutter != null ? CfnThemeGutterStylePropertyFromCloudFormation(properties.Gutter) : undefined);\n    ret.addPropertyResult('margin', 'Margin', properties.Margin != null ? CfnThemeMarginStylePropertyFromCloudFormation(properties.Margin) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTheme {\n                                                                                                                                                                                                                                                     \n    export interface TileStyleProperty {\n                                                                                                                                                                                                                                           \n        readonly border?: CfnTheme.BorderStyleProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TileStyleProperty`\n *\n * @param properties - the TypeScript properties of a `TileStyleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_TileStylePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('border', CfnTheme_BorderStylePropertyValidator)(properties.border));\n    return errors.wrap('supplied properties not correct for \"TileStyleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Theme.TileStyle` resource\n *\n * @param properties - the TypeScript properties of a `TileStyleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Theme.TileStyle` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeTileStylePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_TileStylePropertyValidator(properties).assertSuccess();\n    return {\n        Border: cfnThemeBorderStylePropertyToCloudFormation(properties.border),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeTileStylePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.TileStyleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.TileStyleProperty>();\n    ret.addPropertyResult('border', 'Border', properties.Border != null ? CfnThemeBorderStylePropertyFromCloudFormation(properties.Border) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTheme {\n                                                                                                                                                                                                         \n    export interface TypographyProperty {\n                                                                                                                                                                                                                                                                    \n        readonly fontFamilies?: Array<CfnTheme.FontProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TypographyProperty`\n *\n * @param properties - the TypeScript properties of a `TypographyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_TypographyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('fontFamilies', cdk.listValidator(CfnTheme_FontPropertyValidator))(properties.fontFamilies));\n    return errors.wrap('supplied properties not correct for \"TypographyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Theme.Typography` resource\n *\n * @param properties - the TypeScript properties of a `TypographyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Theme.Typography` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeTypographyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_TypographyPropertyValidator(properties).assertSuccess();\n    return {\n        FontFamilies: cdk.listMapper(cfnThemeFontPropertyToCloudFormation)(properties.fontFamilies),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeTypographyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.TypographyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.TypographyProperty>();\n    ret.addPropertyResult('fontFamilies', 'FontFamilies', properties.FontFamilies != null ? cfn_parse.FromCloudFormation.getArray(CfnThemeFontPropertyFromCloudFormation)(properties.FontFamilies) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnTheme {\nn    export interface UIColorPaletteProperty {\n                                                                                                                                                                                                                                                                                      \n        readonly accent?: string;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly accentForeground?: string;\n                                                                                                                                                                                                                                                                     \n        readonly danger?: string;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly dangerForeground?: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly dimension?: string;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly dimensionForeground?: string;\n                                                                                                                                                                                                                                                                                                           \n        readonly measure?: string;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly measureForeground?: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly primaryBackground?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly primaryForeground?: string;\n                                                                                                                                                                                                                                                                                                                      \n        readonly secondaryBackground?: string;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly secondaryForeground?: string;\n                                                                                                                                                                                                                                                                                                                              \n        readonly success?: string;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly successForeground?: string;\n                                                                                                                                                                                                                                                                                           \n        readonly warning?: string;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly warningForeground?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UIColorPaletteProperty`\n *\n * @param properties - the TypeScript properties of a `UIColorPaletteProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTheme_UIColorPalettePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accent', cdk.validateString)(properties.accent));\n    errors.collect(cdk.propertyValidator('accentForeground', cdk.validateString)(properties.accentForeground));\n    errors.collect(cdk.propertyValidator('danger', cdk.validateString)(properties.danger));\n    errors.collect(cdk.propertyValidator('dangerForeground', cdk.validateString)(properties.dangerForeground));\n    errors.collect(cdk.propertyValidator('dimension', cdk.validateString)(properties.dimension));\n    errors.collect(cdk.propertyValidator('dimensionForeground', cdk.validateString)(properties.dimensionForeground));\n    errors.collect(cdk.propertyValidator('measure', cdk.validateString)(properties.measure));\n    errors.collect(cdk.propertyValidator('measureForeground', cdk.validateString)(properties.measureForeground));\n    errors.collect(cdk.propertyValidator('primaryBackground', cdk.validateString)(properties.primaryBackground));\n    errors.collect(cdk.propertyValidator('primaryForeground', cdk.validateString)(properties.primaryForeground));\n    errors.collect(cdk.propertyValidator('secondaryBackground', cdk.validateString)(properties.secondaryBackground));\n    errors.collect(cdk.propertyValidator('secondaryForeground', cdk.validateString)(properties.secondaryForeground));\n    errors.collect(cdk.propertyValidator('success', cdk.validateString)(properties.success));\n    errors.collect(cdk.propertyValidator('successForeground', cdk.validateString)(properties.successForeground));\n    errors.collect(cdk.propertyValidator('warning', cdk.validateString)(properties.warning));\n    errors.collect(cdk.propertyValidator('warningForeground', cdk.validateString)(properties.warningForeground));\n    return errors.wrap('supplied properties not correct for \"UIColorPaletteProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::QuickSight::Theme.UIColorPalette` resource\n *\n * @param properties - the TypeScript properties of a `UIColorPaletteProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::QuickSight::Theme.UIColorPalette` resource.\n */\n// @ts-ignore TS6133\nfunction cfnThemeUIColorPalettePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTheme_UIColorPalettePropertyValidator(properties).assertSuccess();\n    return {\n        Accent: cdk.stringToCloudFormation(properties.accent),\n        AccentForeground: cdk.stringToCloudFormation(properties.accentForeground),\n        Danger: cdk.stringToCloudFormation(properties.danger),\n        DangerForeground: cdk.stringToCloudFormation(properties.dangerForeground),\n        Dimension: cdk.stringToCloudFormation(properties.dimension),\n        DimensionForeground: cdk.stringToCloudFormation(properties.dimensionForeground),\n        Measure: cdk.stringToCloudFormation(properties.measure),\n        MeasureForeground: cdk.stringToCloudFormation(properties.measureForeground),\n        PrimaryBackground: cdk.stringToCloudFormation(properties.primaryBackground),\n        PrimaryForeground: cdk.stringToCloudFormation(properties.primaryForeground),\n        SecondaryBackground: cdk.stringToCloudFormation(properties.secondaryBackground),\n        SecondaryForeground: cdk.stringToCloudFormation(properties.secondaryForeground),\n        Success: cdk.stringToCloudFormation(properties.success),\n        SuccessForeground: cdk.stringToCloudFormation(properties.successForeground),\n        Warning: cdk.stringToCloudFormation(properties.warning),\n        WarningForeground: cdk.stringToCloudFormation(properties.warningForeground),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnThemeUIColorPalettePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTheme.UIColorPaletteProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTheme.UIColorPaletteProperty>();\n    ret.addPropertyResult('accent', 'Accent', properties.Accent != null ? cfn_parse.FromCloudFormation.getString(properties.Accent) : undefined);\n    ret.addPropertyResult('accentForeground', 'AccentForeground', properties.AccentForeground != null ? cfn_parse.FromCloudFormation.getString(properties.AccentForeground) : undefined);\n    ret.addPropertyResult('danger', 'Danger', properties.Danger != null ? cfn_parse.FromCloudFormation.getString(properties.Danger) : undefined);\n    ret.addPropertyResult('dangerForeground', 'DangerForeground', properties.DangerForeground != null ? cfn_parse.FromCloudFormation.getString(properties.DangerForeground) : undefined);\n    ret.addPropertyResult('dimension', 'Dimension', properties.Dimension != null ? cfn_parse.FromCloudFormation.getString(properties.Dimension) : undefined);\n    ret.addPropertyResult('dimensionForeground', 'DimensionForeground', properties.DimensionForeground != null ? cfn_parse.FromCloudFormation.getString(properties.DimensionForeground) : undefined);\n    ret.addPropertyResult('measure', 'Measure', properties.Measure != null ? cfn_parse.FromCloudFormation.getString(properties.Measure) : undefined);\n    ret.addPropertyResult('measureForeground', 'MeasureForeground', properties.MeasureForeground != null ? cfn_parse.FromCloudFormation.getString(properties.MeasureForeground) : undefined);\n    ret.addPropertyResult('primaryBackground', 'PrimaryBackground', properties.PrimaryBackground != null ? cfn_parse.FromCloudFormation.getString(properties.PrimaryBackground) : undefined);\n    ret.addPropertyResult('primaryForeground', 'PrimaryForeground', properties.PrimaryForeground != null ? cfn_parse.FromCloudFormation.getString(properties.PrimaryForeground) : undefined);\n    ret.addPropertyResult('secondaryBackground', 'SecondaryBackground', properties.SecondaryBackground != null ? cfn_parse.FromCloudFormation.getString(properties.SecondaryBackground) : undefined);\n    ret.addPropertyResult('secondaryForeground', 'SecondaryForeground', properties.SecondaryForeground != null ? cfn_parse.FromCloudFormation.getString(properties.SecondaryForeground) : undefined);\n    ret.addPropertyResult('success', 'Success', properties.Success != null ? cfn_parse.FromCloudFormation.getString(properties.Success) : undefined);\n    ret.addPropertyResult('successForeground', 'SuccessForeground', properties.SuccessForeground != null ? cfn_parse.FromCloudFormation.getString(properties.SuccessForeground) : undefined);\n    ret.addPropertyResult('warning', 'Warning', properties.Warning != null ? cfn_parse.FromCloudFormation.getString(properties.Warning) : undefined);\n    ret.addPropertyResult('warningForeground', 'WarningForeground', properties.WarningForeground != null ? cfn_parse.FromCloudFormation.getString(properties.WarningForeground) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
