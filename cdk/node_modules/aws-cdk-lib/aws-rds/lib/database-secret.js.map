{
  "version": 3,
  "sources": ["database-secret.ts"],
  "sourcesContent": ["import * as crypto from 'crypto';\nimport * as kms from '../../aws-kms';\nimport * as secretsmanager from '../../aws-secretsmanager';\nimport { Aws, Names } from '../../core';\nimport { Construct } from 'constructs';\nimport { DEFAULT_PASSWORD_EXCLUDE_CHARS } from './private/util';\n\n                                                        \nexport interface DatabaseSecretProps {\n                              \n  readonly username: string;\n\n                                                                                                   \n  readonly secretName?: string;\n\n                                                                                                \n  readonly encryptionKey?: kms.IKey;\n\n                                                                                                                                               \n  readonly masterSecret?: secretsmanager.ISecret;\n\n                                                                                                                        \n  readonly excludeCharacters?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n  readonly replaceOnPasswordCriteriaChanges?: boolean;\n\n                                                                                                                \n  readonly replicaRegions?: secretsmanager.ReplicaRegion[];\n}\n\n                                                                         \nexport class DatabaseSecret extends secretsmanager.Secret {\n  constructor(scope: Construct, id: string, props: DatabaseSecretProps) {\n    const excludeCharacters = props.excludeCharacters ?? DEFAULT_PASSWORD_EXCLUDE_CHARS;\n\n    super(scope, id, {\n      encryptionKey: props.encryptionKey,\n      description: `Generated by the CDK for stack: ${Aws.STACK_NAME}`,\n      secretName: props.secretName,\n      generateSecretString: {\n        passwordLength: 30, // Oracle password cannot have more than 30 characters\n        secretStringTemplate: JSON.stringify({\n          username: props.username,\n          masterarn: props.masterSecret?.secretArn,\n        }),\n        generateStringKey: 'password',\n        excludeCharacters,\n      },\n      replicaRegions: props.replicaRegions,\n    });\n\n    if (props.replaceOnPasswordCriteriaChanges) {\n      const hash = crypto.createHash('md5');\n      hash.update(JSON.stringify({\n        // Use here the options that influence the password generation.\n        // If at some point we add other password customization options\n        // they sould be added here below (e.g. `passwordLength`).\n        excludeCharacters,\n      }));\n      const logicalId = `${Names.uniqueId(this)}${hash.digest('hex')}`;\n\n      const secret = this.node.defaultChild as secretsmanager.CfnSecret;\n      secret.overrideLogicalId(logicalId.slice(-255)); // Take last 255 chars\n    }\n  }\n}\n"],
  "mappings": "qNAAA,OAAA,QAAA,UAEA,eAAA,QAAA,4BACA,OAAA,QAAA,cAEA,OAAA,QAAA,kBA2BA,4BAAoC,gBAAe,MAAM,CACvD,YAAY,MAAkB,GAAY,MAA0B,kFAClE,KAAM,mBAAiB,IAAG,MAAM,qBAAiB,MAAA,KAAA,OAAA,GAAI,OAAA,+BAErD,MAAM,MAAO,GAAI,CACf,cAAe,MAAM,cACrB,YAAa,mCAAmC,OAAA,IAAI,aACpD,WAAY,MAAM,WAClB,qBAAsB,CACpB,eAAgB,GAChB,qBAAsB,KAAK,UAAU,CACnC,SAAU,MAAM,SAChB,UAAS,IAAE,MAAM,gBAAY,MAAA,KAAA,OAAA,OAAA,GAAE,YAEjC,kBAAmB,WACnB,mBAEF,eAAgB,MAAM,iBAGxB,GAAI,MAAM,iCAAkC,CAC1C,KAAM,MAAO,OAAO,WAAW,OAC/B,KAAK,OAAO,KAAK,UAAU,CAIzB,qBAEF,KAAM,WAAY,GAAG,OAAA,MAAM,SAAS,QAAQ,KAAK,OAAO,SAGxD,AADe,KAAK,KAAK,aAClB,kBAAkB,UAAU,MAAM,SA/B/C,QAAA,eAAA",
  "names": []
}
