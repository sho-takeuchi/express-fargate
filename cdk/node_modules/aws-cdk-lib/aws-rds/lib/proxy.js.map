{
  "version": 3,
  "sources": ["proxy.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as iam from '../../aws-iam';\nimport * as secretsmanager from '../../aws-secretsmanager';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { IDatabaseCluster } from './cluster-ref';\nimport { IEngine } from './engine';\nimport { IDatabaseInstance } from './instance';\nimport { engineDescription } from './private/util';\nimport { CfnDBProxy, CfnDBProxyTargetGroup } from './rds.generated';\n\n                                                                                                                                  \nexport class SessionPinningFilter {\n                                                                                                                                                                        \n  public static readonly EXCLUDE_VARIABLE_SETS = new SessionPinningFilter('EXCLUDE_VARIABLE_SETS');\n\n                              \n  public static of(filterName: string): SessionPinningFilter {\n    return new SessionPinningFilter(filterName);\n  }\n\n  private constructor(\n    /**\n     * Filter name\n     */\n    public readonly filterName: string,\n  ) {}\n}\n\n                                                                                                                                                                                                          \nexport class ProxyTarget {\n                                                                              \n  public static fromInstance(instance: IDatabaseInstance): ProxyTarget {\n    return new ProxyTarget(instance, undefined);\n  }\n\n                                                                           \n  public static fromCluster(cluster: IDatabaseCluster): ProxyTarget {\n    return new ProxyTarget(undefined, cluster);\n  }\n\n  private constructor(\n    private readonly dbInstance: IDatabaseInstance | undefined,\n    private readonly dbCluster: IDatabaseCluster | undefined) {\n  }\n\n                                                                  \n  public bind(proxy: DatabaseProxy): ProxyTargetConfig {\n    const engine: IEngine | undefined = this.dbInstance?.engine ?? this.dbCluster?.engine;\n\n    if (!engine) {\n      const errorResource = this.dbCluster ?? this.dbInstance;\n      throw new Error(`Could not determine engine for proxy target '${errorResource?.node.path}'. ` +\n        'Please provide it explicitly when importing the resource');\n    }\n\n    const engineFamily = engine.engineFamily;\n    if (!engineFamily) {\n      throw new Error(`Engine '${engineDescription(engine)}' does not support proxies`);\n    }\n\n    // allow connecting to the Cluster/Instance from the Proxy\n    this.dbCluster?.connections.allowDefaultPortFrom(proxy, 'Allow connections to the database Cluster from the Proxy');\n    this.dbInstance?.connections.allowDefaultPortFrom(proxy, 'Allow connections to the database Instance from the Proxy');\n\n    return {\n      engineFamily,\n      dbClusters: this.dbCluster ? [this.dbCluster] : undefined,\n      dbInstances: this.dbInstance ? [this.dbInstance] : undefined,\n    };\n  }\n}\n\n                                                                      \nexport interface ProxyTargetConfig {\n                                                                                                \n  readonly engineFamily: string;\n\n                                                                                                                                                                                                 \n  readonly dbInstances?: IDatabaseInstance[];\n\n                                                                                                                                                                                                  \n  readonly dbClusters?: IDatabaseCluster[];\n}\n\n                                          \nexport interface DatabaseProxyOptions {\n                                                                                                                                                                                                                                                                                                                                                                                            \n  readonly dbProxyName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n  readonly borrowTimeout?: cdk.Duration;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n  readonly initQuery?: string;\n\n                                                                                                                                                                                                                                                                                                    \n  readonly maxConnectionsPercent?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n  readonly maxIdleConnectionsPercent?: number;\n\n                                                                                                                                                                                                                                                                                                                                                                \n  readonly sessionPinningFilters?: SessionPinningFilter[];\n\nn  readonly debugLogging?: boolean;\n\n                                                                                                                                                              \n  readonly iamAuth?: boolean;\n\n                                                                                                                                                                                                                                                                             \n  readonly idleClientTimeout?: cdk.Duration;\n\n                                                                                                                                                                                                                                                              \n  readonly requireTLS?: boolean;\n\n                                                                                                                                                 \n  readonly role?: iam.IRole;\n\n                                                                                                                                                                                                                \n  readonly secrets: secretsmanager.ISecret[];\n\n                                                                                                                         \n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n                                                                                                               \n  readonly vpcSubnets?: ec2.SubnetSelection;\n\n                                                         \n  readonly vpc: ec2.IVpc;\n}\n\n                                                      \nexport interface DatabaseProxyProps extends DatabaseProxyOptions {\n                                                     \n  readonly proxyTarget: ProxyTarget\n}\n\n                                                        \nexport interface DatabaseProxyAttributes {\n                              \n  readonly dbProxyName: string;\n\n                             \n  readonly dbProxyArn: string;\n\n                         \n  readonly endpoint: string;\n\n                                                     \n  readonly securityGroups: ec2.ISecurityGroup[];\n}\n\n                   \nexport interface IDatabaseProxy extends cdk.IResource {\n                                                   \n  readonly dbProxyName: string;\n\n                                                  \n  readonly dbProxyArn: string;\n\n                                              \n  readonly endpoint: string;\n\n                                                                                                                                                                                                                                                                                                                                                           \n  grantConnect(grantee: iam.IGrantable, dbUser?: string): iam.Grant;\n}\n\n/**\n * Represents an RDS Database Proxy.\n *\n */\nabstract class DatabaseProxyBase extends cdk.Resource implements IDatabaseProxy {\n  public abstract readonly dbProxyName: string;\n  public abstract readonly dbProxyArn: string;\n  public abstract readonly endpoint: string;\n\n  public grantConnect(grantee: iam.IGrantable, dbUser?: string): iam.Grant {\n    if (!dbUser) {\n      throw new Error('For imported Database Proxies, the dbUser is required in grantConnect()');\n    }\n    const scopeStack = cdk.Stack.of(this);\n    const proxyGeneratedId = scopeStack.splitArn(this.dbProxyArn, cdk.ArnFormat.COLON_RESOURCE_NAME).resourceName;\n    const userArn = scopeStack.formatArn({\n      service: 'rds-db',\n      resource: 'dbuser',\n      resourceName: `${proxyGeneratedId}/${dbUser}`,\n      arnFormat: cdk.ArnFormat.COLON_RESOURCE_NAME,\n    });\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: ['rds-db:connect'],\n      resourceArns: [userArn],\n    });\n  }\n}\n\n                                                               \nexport class DatabaseProxy extends DatabaseProxyBase\n  implements ec2.IConnectable, secretsmanager.ISecretAttachmentTarget {\n                                                   \n  public static fromDatabaseProxyAttributes(\n    scope: Construct,\n    id: string,\n    attrs: DatabaseProxyAttributes,\n  ): IDatabaseProxy {\n    class Import extends DatabaseProxyBase {\n      public readonly dbProxyName = attrs.dbProxyName;\n      public readonly dbProxyArn = attrs.dbProxyArn;\n      public readonly endpoint = attrs.endpoint;\n    }\n    return new Import(scope, id);\n  }\n\n                                                   \n  public readonly dbProxyName: string;\n\n                                                  \n  public readonly dbProxyArn: string;\n\n                                              \n  public readonly endpoint: string;\n\n                                               \n  public readonly connections: ec2.Connections;\n\n  private readonly secrets: secretsmanager.ISecret[];\n  private readonly resource: CfnDBProxy;\n\n  constructor(scope: Construct, id: string, props: DatabaseProxyProps) {\n    super(scope, id, { physicalName: props.dbProxyName || id });\n\n    const role = props.role || new iam.Role(this, 'IAMRole', {\n      assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n    });\n\n    for (const secret of props.secrets) {\n      secret.grantRead(role);\n    }\n\n    const securityGroups = props.securityGroups ?? [\n      new ec2.SecurityGroup(this, 'ProxySecurityGroup', {\n        description: 'SecurityGroup for Database Proxy',\n        vpc: props.vpc,\n      }),\n    ];\n    this.connections = new ec2.Connections({ securityGroups });\n\n    const bindResult = props.proxyTarget.bind(this);\n\n    if (props.secrets.length < 1) {\n      throw new Error('One or more secrets are required.');\n    }\n    this.secrets = props.secrets;\n\n    this.resource = new CfnDBProxy(this, 'Resource', {\n      auth: props.secrets.map(_ => {\n        return {\n          authScheme: 'SECRETS',\n          iamAuth: props.iamAuth ? 'REQUIRED' : 'DISABLED',\n          secretArn: _.secretArn,\n        };\n      }),\n      dbProxyName: this.physicalName,\n      debugLogging: props.debugLogging,\n      engineFamily: bindResult.engineFamily,\n      idleClientTimeout: props.idleClientTimeout?.toSeconds(),\n      requireTls: props.requireTLS ?? true,\n      roleArn: role.roleArn,\n      vpcSecurityGroupIds: cdk.Lazy.list({ produce: () => this.connections.securityGroups.map(_ => _.securityGroupId) }),\n      vpcSubnetIds: props.vpc.selectSubnets(props.vpcSubnets).subnetIds,\n    });\n\n    this.dbProxyName = this.resource.ref;\n    this.dbProxyArn = this.resource.attrDbProxyArn;\n    this.endpoint = this.resource.attrEndpoint;\n\n    let dbInstanceIdentifiers: string[] | undefined;\n    if (bindResult.dbInstances) {\n      // support for only single instance\n      dbInstanceIdentifiers = [bindResult.dbInstances[0].instanceIdentifier];\n    }\n\n    let dbClusterIdentifiers: string[] | undefined;\n    if (bindResult.dbClusters) {\n      dbClusterIdentifiers = bindResult.dbClusters.map((c) => c.clusterIdentifier);\n    }\n\n    if (!!dbInstanceIdentifiers && !!dbClusterIdentifiers) {\n      throw new Error('Cannot specify both dbInstanceIdentifiers and dbClusterIdentifiers');\n    }\n\n    const proxyTargetGroup = new CfnDBProxyTargetGroup(this, 'ProxyTargetGroup', {\n      targetGroupName: 'default',\n      dbProxyName: this.dbProxyName,\n      dbInstanceIdentifiers,\n      dbClusterIdentifiers,\n      connectionPoolConfigurationInfo: toConnectionPoolConfigurationInfo(props),\n    });\n\n    bindResult.dbClusters?.forEach((c) => proxyTargetGroup.node.addDependency(c));\n  }\n\n                                                                     \n  public asSecretAttachmentTarget(): secretsmanager.SecretAttachmentTargetProps {\n    return {\n      targetId: this.dbProxyName,\n      targetType: secretsmanager.AttachmentTargetType.RDS_DB_PROXY,\n    };\n  }\n\n  public grantConnect(grantee: iam.IGrantable, dbUser?: string): iam.Grant {\n    if (!dbUser) {\n      if (this.secrets.length > 1) {\n        throw new Error('When the Proxy contains multiple Secrets, you must pass a dbUser explicitly to grantConnect()');\n      }\n      // 'username' is the field RDS uses here,\n      // see https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-proxy.html#rds-proxy-secrets-arns\n      dbUser = this.secrets[0].secretValueFromJson('username').toString();\n    }\n    return super.grantConnect(grantee, dbUser);\n  }\n}\n\n/**\n * ConnectionPoolConfiguration (L2 => L1)\n */\nfunction toConnectionPoolConfigurationInfo(\n  props: DatabaseProxyProps,\n): CfnDBProxyTargetGroup.ConnectionPoolConfigurationInfoFormatProperty {\n  return {\n    connectionBorrowTimeout: props.borrowTimeout?.toSeconds(),\n    initQuery: props.initQuery,\n    maxConnectionsPercent: props.maxConnectionsPercent,\n    maxIdleConnectionsPercent: props.maxIdleConnectionsPercent,\n    sessionPinningFilters: props.sessionPinningFilters?.map(_ => _.filterName),\n  };\n}\n"],
  "mappings": "2QAAA,IAAA,QAAA,iBACA,IAAA,QAAA,iBACA,eAAA,QAAA,4BACA,IAAA,QAAA,cAKA,OAAA,QAAA,kBACA,gBAAA,QAAA,mBAGA,0BAAiC,CAS/B,YAIkB,WAAkB,CAAlB,KAAA,WAAA,iBARJ,IAAG,WAAkB,CACjC,MAAO,IAAI,sBAAqB,aANpC,QAAA,qBAAA,sIAEyB,qBAAA,sBAAwB,GAAI,sBAAqB,yBAgB1E,iBAAwB,CAWtB,YACmB,WACA,UAAuC,CADvC,KAAA,WAAA,WACA,KAAA,UAAA,gBAXL,cAAa,SAA2B,gFAC7C,GAAI,aAAY,SAAU,cAIrB,aAAY,QAAyB,8EAC1C,GAAI,aAAY,OAAW,SAS7B,KAAK,MAAoB,wFAC9B,KAAM,QAAM,IAAA,IAAwB,KAAK,cAAU,MAAA,KAAA,OAAA,OAAA,GAAE,UAAM,MAAA,KAAA,OAAA,GAAA,IAAI,KAAK,aAAS,MAAA,KAAA,OAAA,OAAA,GAAE,OAE/E,GAAI,CAAC,OAAQ,CACX,KAAM,eAAa,IAAG,KAAK,aAAS,MAAA,KAAA,OAAA,GAAI,KAAK,WAC7C,KAAM,IAAI,OAAM,gDAAgD,eAAa,KAAA,OAAb,cAAe,KAAK,mEAItF,KAAM,cAAe,OAAO,aAC5B,GAAI,CAAC,aACH,KAAM,IAAI,OAAM,WAAW,OAAA,kBAAkB,qCAI/C,MAAA,IAAA,KAAK,aAAS,MAAA,KAAA,QAAA,GAAE,YAAY,qBAAqB,MAAO,4DACxD,IAAA,KAAK,cAAU,MAAA,KAAA,QAAA,GAAE,YAAY,qBAAqB,MAAO,6DAElD,CACL,aACA,WAAY,KAAK,UAAY,CAAC,KAAK,WAAa,OAChD,YAAa,KAAK,WAAa,CAAC,KAAK,YAAc,SAtCzD,QAAA,YAAA,2GA+IA,+BAAyC,KAAI,QAAQ,CAK5C,aAAa,QAAyB,OAAe,CAC1D,GAAI,CAAC,OACH,KAAM,IAAI,OAAM,2EAElB,KAAM,YAAa,IAAI,MAAM,GAAG,MAC1B,iBAAmB,WAAW,SAAS,KAAK,WAAY,IAAI,UAAU,qBAAqB,aAC3F,QAAU,WAAW,UAAU,CACnC,QAAS,SACT,SAAU,SACV,aAAc,GAAG,oBAAoB,SACrC,UAAW,IAAI,UAAU,sBAE3B,MAAO,KAAI,MAAM,eAAe,CAC9B,QACA,QAAS,CAAC,kBACV,aAAc,CAAC,YAMrB,2BAAmC,kBAAiB,CA+BlD,YAAY,MAAkB,GAAY,MAAyB,iBACjE,MAAM,MAAO,GAAI,CAAE,aAAc,MAAM,aAAe,2EAEtD,KAAM,MAAO,MAAM,MAAQ,GAAI,KAAI,KAAK,KAAM,UAAW,CACvD,UAAW,GAAI,KAAI,iBAAiB,uBAGtC,SAAW,UAAU,OAAM,QACzB,OAAO,UAAU,MAGnB,KAAM,gBAAc,IAAG,MAAM,kBAAc,MAAA,KAAA,OAAA,GAAI,CAC7C,GAAI,KAAI,cAAc,KAAM,qBAAsB,CAChD,YAAa,mCACb,IAAK,MAAM,OAGf,KAAK,YAAc,GAAI,KAAI,YAAY,CAAE,iBAEzC,KAAM,YAAa,MAAM,YAAY,KAAK,MAE1C,GAAI,MAAM,QAAQ,OAAS,EACzB,KAAM,IAAI,OAAM,qCAElB,KAAK,QAAU,MAAM,QAErB,KAAK,SAAW,GAAI,iBAAA,WAAW,KAAM,WAAY,CAC/C,KAAM,MAAM,QAAQ,IAAI,GACf,EACL,WAAY,UACZ,QAAS,MAAM,QAAU,WAAa,WACtC,UAAW,EAAE,aAGjB,YAAa,KAAK,aAClB,aAAc,MAAM,aACpB,aAAc,WAAW,aACzB,kBAAiB,IAAE,MAAM,qBAAiB,MAAA,KAAA,OAAA,OAAA,GAAE,YAC5C,WAAU,IAAE,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,GAChC,QAAS,KAAK,QACd,oBAAqB,IAAI,KAAK,KAAK,CAAE,QAAS,IAAM,KAAK,YAAY,eAAe,IAAI,GAAK,EAAE,mBAC/F,aAAc,MAAM,IAAI,cAAc,MAAM,YAAY,YAG1D,KAAK,YAAc,KAAK,SAAS,IACjC,KAAK,WAAa,KAAK,SAAS,eAChC,KAAK,SAAW,KAAK,SAAS,aAE9B,GAAI,uBACJ,AAAI,WAAW,aAEb,uBAAwB,CAAC,WAAW,YAAY,GAAG,qBAGrD,GAAI,sBAKJ,GAJI,WAAW,YACb,sBAAuB,WAAW,WAAW,IAAI,AAAC,GAAM,EAAE,oBAGxD,CAAC,CAAC,uBAAyB,CAAC,CAAC,qBAC/B,KAAM,IAAI,OAAM,sEAGlB,KAAM,kBAAmB,GAAI,iBAAA,sBAAsB,KAAM,mBAAoB,CAC3E,gBAAiB,UACjB,YAAa,KAAK,YAClB,sBACA,qBACA,gCAAiC,kCAAkC,SAGrE,AAAA,IAAA,WAAW,cAAU,MAAA,KAAA,QAAA,GAAE,QAAQ,AAAC,GAAM,iBAAiB,KAAK,cAAc,UAnG9D,6BACZ,MACA,GACA,MAA8B,4EAE9B,oBAAqB,kBAAiB,CAAtC,aAAA,qBACkB,KAAA,YAAc,MAAM,YACpB,KAAA,WAAa,MAAM,WACnB,KAAA,SAAW,MAAM,UAEnC,MAAO,IAAI,QAAO,MAAO,IA6FpB,0BAAwB,CAC7B,MAAO,CACL,SAAU,KAAK,YACf,WAAY,eAAe,qBAAqB,cAI7C,aAAa,QAAyB,OAAe,CAC1D,mEAAI,CAAC,OAAQ,CACX,GAAI,KAAK,QAAQ,OAAS,EACxB,KAAM,IAAI,OAAM,iGAIlB,OAAS,KAAK,QAAQ,GAAG,oBAAoB,YAAY,WAE3D,MAAO,OAAM,aAAa,QAAS,SA1HvC,QAAA,cAAA,iHAiIA,2CACE,MAAyB,WAEzB,MAAO,CACL,wBAAuB,IAAE,MAAM,iBAAa,MAAA,KAAA,OAAA,OAAA,GAAE,YAC9C,UAAW,MAAM,UACjB,sBAAuB,MAAM,sBAC7B,0BAA2B,MAAM,0BACjC,sBAAqB,IAAE,MAAM,yBAAqB,MAAA,KAAA,OAAA,OAAA,GAAE,IAAI,GAAK,EAAE",
  "names": []
}
