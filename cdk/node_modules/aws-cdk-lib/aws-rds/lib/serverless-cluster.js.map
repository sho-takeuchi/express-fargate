{
  "version": 3,
  "sources": ["serverless-cluster.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport * as secretsmanager from '../../aws-secretsmanager';\nimport { Resource, Duration, Token, Annotations, RemovalPolicy, IResource, Stack, Lazy, FeatureFlags, ArnFormat } from '../../core';\nimport * as cxapi from '../../cx-api';\nimport { Construct } from 'constructs';\nimport { IClusterEngine } from './cluster-engine';\nimport { DatabaseSecret } from './database-secret';\nimport { Endpoint } from './endpoint';\nimport { IParameterGroup } from './parameter-group';\nimport { DATA_API_ACTIONS } from './perms';\nimport { defaultDeletionProtection, DEFAULT_PASSWORD_EXCLUDE_CHARS, renderCredentials } from './private/util';\nimport { Credentials, RotationMultiUserOptions, RotationSingleUserOptions, SnapshotCredentials } from './props';\nimport { CfnDBCluster, CfnDBClusterProps } from './rds.generated';\nimport { ISubnetGroup, SubnetGroup } from './subnet-group';\n\n                                                                     \nexport interface IServerlessCluster extends IResource, ec2.IConnectable, secretsmanager.ISecretAttachmentTarget {\n                                          \n  readonly clusterIdentifier: string;\n\n                                       \n  readonly clusterArn: string;\n\n                                                                                                           \n  readonly clusterEndpoint: Endpoint;\n\n                                                                                                            \n  readonly clusterReadEndpoint: Endpoint;\n\n                                                                                                                              \n  grantDataApiAccess(grantee: iam.IGrantable): iam.Grant\n}\n/**\n *  Common Properties to configure new Aurora Serverless Cluster or Aurora Serverless Cluster from snapshot\n */\ninterface ServerlessClusterNewProps {\n                                               \n  readonly engine: IClusterEngine;\n\n                                                                                                               \n  readonly clusterIdentifier?: string;\n\n                                                                                                                                                                                                                                                \n  readonly backupRetention?: Duration;\n\n                                                                                                                                              \n  readonly defaultDatabaseName?: string;\n\n                                                                                                                                                                \n  readonly deletionProtection?: boolean;\n\n                                                                                                                                                                    \n  readonly enableDataApi?: boolean;\n\n                                                                                 \n  readonly vpc: ec2.IVpc;\n\n                                                                                                                            \n  readonly vpcSubnets?: ec2.SubnetSelection;\n\n                                                                                                                                                                                                                                              \n  readonly scaling?: ServerlessScalingOptions;\n\n                                                                                                                                                                                                                                                               \n  readonly removalPolicy?: RemovalPolicy;\n\n                                                                                      \n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n                                                                                                              \n  readonly parameterGroup?: IParameterGroup;\n\n                                                                                                                \n  readonly subnetGroup?: ISubnetGroup;\n}\n\n                                                                   \nexport interface ServerlessClusterAttributes {\n                                           \n  readonly clusterIdentifier: string;\n\n                                                            \n  readonly port?: number;\n\n                                                                                                    \n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n                                                                                  \n  readonly clusterEndpointAddress?: string;\n\n                                                                               \n  readonly readerEndpointAddress?: string;\n\n                                                                                           \n  readonly secret?: secretsmanager.ISecret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                   \nexport enum AuroraCapacityUnit {\n                               \n  ACU_1 = 1,\n                                \n  ACU_2 = 2,\n                                \n  ACU_4 = 4,\n                                \n  ACU_8 = 8,\n                                 \n  ACU_16 = 16,\n                                 \n  ACU_32 = 32,\n                                 \n  ACU_64 = 64,\n                                  \n  ACU_128 = 128,\n                                  \n  ACU_192 = 192,\n                                  \n  ACU_256 = 256,\n                                  \n  ACU_384 = 384\n}\n\n                                                                             \nexport interface ServerlessScalingOptions {\n                                                                                                                                                   \n  readonly minCapacity?: AuroraCapacityUnit;\n\n                                                                                                                                                   \n  readonly maxCapacity?: AuroraCapacityUnit;\n\nn  readonly autoPause?: Duration;\n}\n\n/**\n * New or imported Serverless Cluster\n */\nabstract class ServerlessClusterBase extends Resource implements IServerlessCluster {\n  /**\n   * Identifier of the cluster\n   */\n  public abstract readonly clusterIdentifier: string;\n\n  /**\n   * The endpoint to use for read/write operations\n   */\n  public abstract readonly clusterEndpoint: Endpoint;\n\n  /**\n   * The endpoint to use for read/write operations\n   */\n  public abstract readonly clusterReadEndpoint: Endpoint;\n\n  /**\n   * Access to the network connections\n   */\n  public abstract readonly connections: ec2.Connections;\n\n  /**\n   * The secret attached to this cluster\n   */\n  public abstract readonly secret?: secretsmanager.ISecret\n\n  protected abstract enableDataApi?: boolean;\n\n                                       \n  public get clusterArn(): string {\n    return Stack.of(this).formatArn({\n      service: 'rds',\n      resource: 'cluster',\n      arnFormat: ArnFormat.COLON_RESOURCE_NAME,\n      resourceName: this.clusterIdentifier,\n    });\n  }\n\n                                                                                                                                                                                                     \n  public grantDataApiAccess(grantee: iam.IGrantable): iam.Grant {\n    if (this.enableDataApi === false) {\n      throw new Error('Cannot grant Data API access when the Data API is disabled');\n    }\n\n    this.enableDataApi = true;\n    const ret = iam.Grant.addToPrincipal({\n      grantee,\n      actions: DATA_API_ACTIONS,\n      resourceArns: ['*'],\n      scope: this,\n    });\n    this.secret?.grantRead(grantee);\n    return ret;\n  }\n\n                                                                     \n  public asSecretAttachmentTarget(): secretsmanager.SecretAttachmentTargetProps {\n    return {\n      targetId: this.clusterIdentifier,\n      targetType: secretsmanager.AttachmentTargetType.RDS_DB_CLUSTER,\n    };\n  }\n}\n\n/**\n * Create an Aurora Serverless Cluster\n *\n * @resource AWS::RDS::DBCluster\n */\nabstract class ServerlessClusterNew extends ServerlessClusterBase {\n  public readonly connections: ec2.Connections;\n  protected readonly newCfnProps: CfnDBClusterProps;\n  protected readonly securityGroups: ec2.ISecurityGroup[];\n  protected enableDataApi?: boolean;\n\n  constructor(scope: Construct, id: string, props: ServerlessClusterNewProps) {\n    super(scope, id);\n\n    const { subnetIds } = props.vpc.selectSubnets(props.vpcSubnets);\n\n    // Cannot test whether the subnets are in different AZs, but at least we can test the amount.\n    if (subnetIds.length < 2) {\n      Annotations.of(this).addError(`Cluster requires at least 2 subnets, got ${subnetIds.length}`);\n    }\n\n    const subnetGroup = props.subnetGroup ?? new SubnetGroup(this, 'Subnets', {\n      description: `Subnets for ${id} database`,\n      vpc: props.vpc,\n      vpcSubnets: props.vpcSubnets,\n      removalPolicy: props.removalPolicy === RemovalPolicy.RETAIN ? props.removalPolicy : undefined,\n    });\n\n    if (props.backupRetention) {\n      const backupRetentionDays = props.backupRetention.toDays();\n      if (backupRetentionDays < 1 || backupRetentionDays > 35) {\n        throw new Error(`backup retention period must be between 1 and 35 days. received: ${backupRetentionDays}`);\n      }\n    }\n\n    // bind the engine to the Cluster\n    const clusterEngineBindConfig = props.engine.bindToCluster(this, {\n      parameterGroup: props.parameterGroup,\n    });\n    const clusterParameterGroup = props.parameterGroup ?? clusterEngineBindConfig.parameterGroup;\n    const clusterParameterGroupConfig = clusterParameterGroup?.bindToCluster({});\n\n    this.securityGroups = props.securityGroups ?? [\n      new ec2.SecurityGroup(this, 'SecurityGroup', {\n        description: 'RDS security group',\n        vpc: props.vpc,\n      }),\n    ];\n\n    const clusterIdentifier = FeatureFlags.of(this).isEnabled(cxapi.RDS_LOWERCASE_DB_IDENTIFIER)\n      ? props.clusterIdentifier?.toLowerCase()\n      : props.clusterIdentifier;\n\n    this.newCfnProps = {\n      backupRetentionPeriod: props.backupRetention?.toDays(),\n      databaseName: props.defaultDatabaseName,\n      dbClusterIdentifier: clusterIdentifier,\n      dbClusterParameterGroupName: clusterParameterGroupConfig?.parameterGroupName,\n      dbSubnetGroupName: subnetGroup.subnetGroupName,\n      deletionProtection: defaultDeletionProtection(props.deletionProtection, props.removalPolicy),\n      engine: props.engine.engineType,\n      engineVersion: props.engine.engineVersion?.fullVersion,\n      engineMode: 'serverless',\n      enableHttpEndpoint: Lazy.any({ produce: () => this.enableDataApi }),\n      scalingConfiguration: props.scaling ? this.renderScalingConfiguration(props.scaling) : undefined,\n      storageEncrypted: true,\n      vpcSecurityGroupIds: this.securityGroups.map(sg => sg.securityGroupId),\n    };\n\n    this.connections = new ec2.Connections({\n      securityGroups: this.securityGroups,\n      defaultPort: ec2.Port.tcp(Lazy.number({ produce: () => this.clusterEndpoint.port })),\n    });\n  }\n\n  private renderScalingConfiguration(options: ServerlessScalingOptions): CfnDBCluster.ScalingConfigurationProperty {\n    const minCapacity = options.minCapacity;\n    const maxCapacity = options.maxCapacity;\n\n    if (minCapacity && maxCapacity && minCapacity > maxCapacity) {\n      throw new Error('maximum capacity must be greater than or equal to minimum capacity.');\n    }\n\n    const secondsToAutoPause = options.autoPause?.toSeconds();\n    if (secondsToAutoPause && (secondsToAutoPause < 300 || secondsToAutoPause > 86400)) {\n      throw new Error('auto pause time must be between 5 minutes and 1 day.');\n    }\n\n    return {\n      autoPause: (secondsToAutoPause === 0) ? false : true,\n      minCapacity: options.minCapacity,\n      maxCapacity: options.maxCapacity,\n      secondsUntilAutoPause: (secondsToAutoPause === 0) ? undefined : secondsToAutoPause,\n    };\n  }\n}\n\n                                                         \nexport interface ServerlessClusterProps extends ServerlessClusterNewProps {\n                                                                                                                                         \n  readonly credentials?: Credentials;\n\n                                                                                                                                    \n  readonly storageEncryptionKey?: kms.IKey;\n}\n\n                                                                                     \nexport class ServerlessCluster extends ServerlessClusterNew {\n                                                                   \n  public static fromServerlessClusterAttributes(\n    scope: Construct, id: string, attrs: ServerlessClusterAttributes,\n  ): IServerlessCluster {\n\n    return new ImportedServerlessCluster(scope, id, attrs);\n  }\n\n  public readonly clusterIdentifier: string;\n  public readonly clusterEndpoint: Endpoint;\n  public readonly clusterReadEndpoint: Endpoint;\n\n  public readonly secret?: secretsmanager.ISecret;\n\n  private readonly vpc: ec2.IVpc;\n  private readonly vpcSubnets?: ec2.SubnetSelection;\n\n  private readonly singleUserRotationApplication: secretsmanager.SecretRotationApplication;\n  private readonly multiUserRotationApplication: secretsmanager.SecretRotationApplication;\n\n  constructor(scope: Construct, id: string, props: ServerlessClusterProps) {\n    super(scope, id, props);\n\n    this.vpc = props.vpc;\n    this.vpcSubnets = props.vpcSubnets;\n\n    this.singleUserRotationApplication = props.engine.singleUserRotationApplication;\n    this.multiUserRotationApplication = props.engine.multiUserRotationApplication;\n\n    this.enableDataApi = props.enableDataApi;\n\n    const credentials = renderCredentials(this, props.engine, props.credentials);\n    const secret = credentials.secret;\n\n    const cluster = new CfnDBCluster(this, 'Resource', {\n      ...this.newCfnProps,\n      masterUsername: credentials.username,\n      masterUserPassword: credentials.password?.toString(),\n      kmsKeyId: props.storageEncryptionKey?.keyArn,\n    });\n\n    this.clusterIdentifier = cluster.ref;\n\n    // create a number token that represents the port of the cluster\n    const portAttribute = Token.asNumber(cluster.attrEndpointPort);\n    this.clusterEndpoint = new Endpoint(cluster.attrEndpointAddress, portAttribute);\n    this.clusterReadEndpoint = new Endpoint(cluster.attrReadEndpointAddress, portAttribute);\n\n    cluster.applyRemovalPolicy(props.removalPolicy ?? RemovalPolicy.SNAPSHOT);\n\n    if (secret) {\n      this.secret = secret.attach(this);\n    }\n  }\n\n                                                                                      \n  public addRotationSingleUser(options: RotationSingleUserOptions = {}): secretsmanager.SecretRotation {\n    if (!this.secret) {\n      throw new Error('Cannot add single user rotation for a cluster without secret.');\n    }\n\n    const id = 'RotationSingleUser';\n    const existing = this.node.tryFindChild(id);\n    if (existing) {\n      throw new Error('A single user rotation was already added to this cluster.');\n    }\n\n    return new secretsmanager.SecretRotation(this, id, {\n      secret: this.secret,\n      application: this.singleUserRotationApplication,\n      vpc: this.vpc,\n      vpcSubnets: this.vpcSubnets,\n      target: this,\n      ...options,\n      excludeCharacters: options.excludeCharacters ?? DEFAULT_PASSWORD_EXCLUDE_CHARS,\n    });\n  }\n\n                                                              \n  public addRotationMultiUser(id: string, options: RotationMultiUserOptions): secretsmanager.SecretRotation {\n    if (!this.secret) {\n      throw new Error('Cannot add multi user rotation for a cluster without secret.');\n    }\n    return new secretsmanager.SecretRotation(this, id, {\n      ...options,\n      excludeCharacters: options.excludeCharacters ?? DEFAULT_PASSWORD_EXCLUDE_CHARS,\n      masterSecret: this.secret,\n      application: this.multiUserRotationApplication,\n      vpc: this.vpc,\n      vpcSubnets: this.vpcSubnets,\n      target: this,\n    });\n  }\n}\n\n/**\n * Represents an imported database cluster.\n */\nclass ImportedServerlessCluster extends ServerlessClusterBase implements IServerlessCluster {\n  public readonly clusterIdentifier: string;\n  public readonly connections: ec2.Connections;\n\n  public readonly secret?: secretsmanager.ISecret;\n\n  protected readonly enableDataApi = true\n\n  private readonly _clusterEndpoint?: Endpoint;\n  private readonly _clusterReadEndpoint?: Endpoint;\n\n  constructor(scope: Construct, id: string, attrs: ServerlessClusterAttributes) {\n    super(scope, id);\n\n    this.clusterIdentifier = attrs.clusterIdentifier;\n\n    const defaultPort = attrs.port ? ec2.Port.tcp(attrs.port) : undefined;\n    this.connections = new ec2.Connections({\n      securityGroups: attrs.securityGroups,\n      defaultPort,\n    });\n\n    this.secret = attrs.secret;\n\n    this._clusterEndpoint = (attrs.clusterEndpointAddress && attrs.port) ? new Endpoint(attrs.clusterEndpointAddress, attrs.port) : undefined;\n    this._clusterReadEndpoint = (attrs.readerEndpointAddress && attrs.port) ? new Endpoint(attrs.readerEndpointAddress, attrs.port) : undefined;\n  }\n\n  public get clusterEndpoint() {\n    if (!this._clusterEndpoint) {\n      throw new Error('Cannot access `clusterEndpoint` of an imported cluster without an endpoint address and port');\n    }\n    return this._clusterEndpoint;\n  }\n\n  public get clusterReadEndpoint() {\n    if (!this._clusterReadEndpoint) {\n      throw new Error('Cannot access `clusterReadEndpoint` of an imported cluster without a readerEndpointAddress and port');\n    }\n    return this._clusterReadEndpoint;\n  }\n}\n\n                                                           \nexport interface ServerlessClusterFromSnapshotProps extends ServerlessClusterNewProps {\n                                                                                                                                                                                                                                                                                   \n  readonly snapshotIdentifier: string;\n\n                                                                                                                                                                                                                                                                                         \n  readonly credentials?: SnapshotCredentials;\n}\n\n                                                                                                    \nexport class ServerlessClusterFromSnapshot extends ServerlessClusterNew {\n  public readonly clusterIdentifier: string;\n  public readonly clusterEndpoint: Endpoint;\n  public readonly clusterReadEndpoint: Endpoint;\n  public readonly secret?: secretsmanager.ISecret;\n\n  constructor(scope: Construct, id: string, props: ServerlessClusterFromSnapshotProps) {\n    super(scope, id, props);\n\n    this.enableDataApi = props.enableDataApi;\n\n    let credentials = props.credentials;\n    let secret = credentials?.secret;\n    if (!secret && credentials?.generatePassword) {\n      if (!credentials.username) {\n        throw new Error('`credentials` `username` must be specified when `generatePassword` is set to true');\n      }\n\n      secret = new DatabaseSecret(this, 'Secret', {\n        username: credentials.username,\n        encryptionKey: credentials.encryptionKey,\n        excludeCharacters: credentials.excludeCharacters,\n        replaceOnPasswordCriteriaChanges: credentials.replaceOnPasswordCriteriaChanges,\n        replicaRegions: credentials.replicaRegions,\n      });\n    }\n\n    const cluster = new CfnDBCluster(this, 'Resource', {\n      ...this.newCfnProps,\n      snapshotIdentifier: props.snapshotIdentifier,\n      masterUserPassword: secret?.secretValueFromJson('password')?.toString() ?? credentials?.password?.toString(),\n    });\n\n    this.clusterIdentifier = cluster.ref;\n\n    // create a number token that represents the port of the cluster\n    const portAttribute = Token.asNumber(cluster.attrEndpointPort);\n    this.clusterEndpoint = new Endpoint(cluster.attrEndpointAddress, portAttribute);\n    this.clusterReadEndpoint = new Endpoint(cluster.attrReadEndpointAddress, portAttribute);\n\n    cluster.applyRemovalPolicy(props.removalPolicy ?? RemovalPolicy.SNAPSHOT);\n\n    if (secret) {\n      this.secret = secret.attach(this);\n    }\n  }\n}"],
  "mappings": "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",
  "names": []
}
