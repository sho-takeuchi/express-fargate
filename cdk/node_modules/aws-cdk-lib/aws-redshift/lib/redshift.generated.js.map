{
  "version": 3,
  "sources": ["redshift.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:33.213Z\",\"fingerprint\":\"YwONc7x1B0kTcvaRYoVex09WXzX1qo2h1UturMWqCJU=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                   \nexport interface CfnClusterProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly clusterType: string;\n\nn    readonly dbName: string;\n\nn    readonly masterUsername: string;\n\nn    readonly masterUserPassword: string;\n\nn    readonly nodeType: string;\n\nn    readonly allowVersionUpgrade?: boolean | cdk.IResolvable;\n\nn    readonly aquaConfigurationStatus?: string;\n\nn    readonly automatedSnapshotRetentionPeriod?: number;\n\nn    readonly availabilityZone?: string;\n\n                                                                                                                                                                                                                                                                                                                   \n    readonly availabilityZoneRelocation?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                     \n    readonly availabilityZoneRelocationStatus?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    readonly classic?: boolean | cdk.IResolvable;\n\nn    readonly clusterIdentifier?: string;\n\nn    readonly clusterParameterGroupName?: string;\n\n                                                                                                                                                                                                                                                                                                                                   \n    readonly clusterSecurityGroups?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly clusterSubnetGroupName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly clusterVersion?: string;\n\n                                                                                                                                                                                                                           \n    readonly deferMaintenance?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                           \n    readonly deferMaintenanceDuration?: number;\n\n                                                                                                                                                                                                                                         \n    readonly deferMaintenanceEndTime?: string;\n\n                                                                                                                                                                                                                                             \n    readonly deferMaintenanceStartTime?: string;\n\n                                                                                                                                                                                                                                                                                                \n    readonly destinationRegion?: string;\n\nn    readonly elasticIp?: string;\n\n                                                                                                                                                                                                                                                                 \n    readonly encrypted?: boolean | cdk.IResolvable;\n\nn    readonly enhancedVpcRouting?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                        \n    readonly hsmClientCertificateIdentifier?: string;\n\n                                                                                                                                                                                                                                                                                                                                               \n    readonly hsmConfigurationIdentifier?: string;\n\nn    readonly iamRoles?: string[];\n\n                                                                                                                                                                                                                                                                                                \n    readonly kmsKeyId?: string;\n\n                                                                                                                                                                                                                                                                                                     \n    readonly loggingProperties?: CfnCluster.LoggingPropertiesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    readonly maintenanceTrackName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly manualSnapshotRetentionPeriod?: number;\n\nn    readonly numberOfNodes?: number;\n\n                                                                                                                                                                                                                                                                                                                             \n    readonly ownerAccount?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly port?: number;\n\nn    readonly preferredMaintenanceWindow?: string;\n\n                                                                                                                                                                                                                                                  \n    readonly publiclyAccessible?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                       \n    readonly resourceAction?: string;\n\n                                                                                                                                                                                                                       \n    readonly revisionTarget?: string;\n\n                                                                                                                                                                                                                                 \n    readonly rotateEncryptionKey?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly snapshotClusterIdentifier?: string;\n\n                                                                                                                                                                                                                           \n    readonly snapshotCopyGrantName?: string;\n\n                                                                                                                                                                                                                               \n    readonly snapshotCopyManual?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                 \n    readonly snapshotCopyRetentionPeriod?: number;\n\n                                                                                                                                                                                                                                                                                                                               \n    readonly snapshotIdentifier?: string;\n\n                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    readonly vpcSecurityGroupIds?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClusterProps`\n *\n * @param properties - the TypeScript properties of a `CfnClusterProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClusterPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowVersionUpgrade', cdk.validateBoolean)(properties.allowVersionUpgrade));\n    errors.collect(cdk.propertyValidator('aquaConfigurationStatus', cdk.validateString)(properties.aquaConfigurationStatus));\n    errors.collect(cdk.propertyValidator('automatedSnapshotRetentionPeriod', cdk.validateNumber)(properties.automatedSnapshotRetentionPeriod));\n    errors.collect(cdk.propertyValidator('availabilityZone', cdk.validateString)(properties.availabilityZone));\n    errors.collect(cdk.propertyValidator('availabilityZoneRelocation', cdk.validateBoolean)(properties.availabilityZoneRelocation));\n    errors.collect(cdk.propertyValidator('availabilityZoneRelocationStatus', cdk.validateString)(properties.availabilityZoneRelocationStatus));\n    errors.collect(cdk.propertyValidator('classic', cdk.validateBoolean)(properties.classic));\n    errors.collect(cdk.propertyValidator('clusterIdentifier', cdk.validateString)(properties.clusterIdentifier));\n    errors.collect(cdk.propertyValidator('clusterParameterGroupName', cdk.validateString)(properties.clusterParameterGroupName));\n    errors.collect(cdk.propertyValidator('clusterSecurityGroups', cdk.listValidator(cdk.validateString))(properties.clusterSecurityGroups));\n    errors.collect(cdk.propertyValidator('clusterSubnetGroupName', cdk.validateString)(properties.clusterSubnetGroupName));\n    errors.collect(cdk.propertyValidator('clusterType', cdk.requiredValidator)(properties.clusterType));\n    errors.collect(cdk.propertyValidator('clusterType', cdk.validateString)(properties.clusterType));\n    errors.collect(cdk.propertyValidator('clusterVersion', cdk.validateString)(properties.clusterVersion));\n    errors.collect(cdk.propertyValidator('dbName', cdk.requiredValidator)(properties.dbName));\n    errors.collect(cdk.propertyValidator('dbName', cdk.validateString)(properties.dbName));\n    errors.collect(cdk.propertyValidator('deferMaintenance', cdk.validateBoolean)(properties.deferMaintenance));\n    errors.collect(cdk.propertyValidator('deferMaintenanceDuration', cdk.validateNumber)(properties.deferMaintenanceDuration));\n    errors.collect(cdk.propertyValidator('deferMaintenanceEndTime', cdk.validateString)(properties.deferMaintenanceEndTime));\n    errors.collect(cdk.propertyValidator('deferMaintenanceStartTime', cdk.validateString)(properties.deferMaintenanceStartTime));\n    errors.collect(cdk.propertyValidator('destinationRegion', cdk.validateString)(properties.destinationRegion));\n    errors.collect(cdk.propertyValidator('elasticIp', cdk.validateString)(properties.elasticIp));\n    errors.collect(cdk.propertyValidator('encrypted', cdk.validateBoolean)(properties.encrypted));\n    errors.collect(cdk.propertyValidator('enhancedVpcRouting', cdk.validateBoolean)(properties.enhancedVpcRouting));\n    errors.collect(cdk.propertyValidator('hsmClientCertificateIdentifier', cdk.validateString)(properties.hsmClientCertificateIdentifier));\n    errors.collect(cdk.propertyValidator('hsmConfigurationIdentifier', cdk.validateString)(properties.hsmConfigurationIdentifier));\n    errors.collect(cdk.propertyValidator('iamRoles', cdk.listValidator(cdk.validateString))(properties.iamRoles));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('loggingProperties', CfnCluster_LoggingPropertiesPropertyValidator)(properties.loggingProperties));\n    errors.collect(cdk.propertyValidator('maintenanceTrackName', cdk.validateString)(properties.maintenanceTrackName));\n    errors.collect(cdk.propertyValidator('manualSnapshotRetentionPeriod', cdk.validateNumber)(properties.manualSnapshotRetentionPeriod));\n    errors.collect(cdk.propertyValidator('masterUserPassword', cdk.requiredValidator)(properties.masterUserPassword));\n    errors.collect(cdk.propertyValidator('masterUserPassword', cdk.validateString)(properties.masterUserPassword));\n    errors.collect(cdk.propertyValidator('masterUsername', cdk.requiredValidator)(properties.masterUsername));\n    errors.collect(cdk.propertyValidator('masterUsername', cdk.validateString)(properties.masterUsername));\n    errors.collect(cdk.propertyValidator('nodeType', cdk.requiredValidator)(properties.nodeType));\n    errors.collect(cdk.propertyValidator('nodeType', cdk.validateString)(properties.nodeType));\n    errors.collect(cdk.propertyValidator('numberOfNodes', cdk.validateNumber)(properties.numberOfNodes));\n    errors.collect(cdk.propertyValidator('ownerAccount', cdk.validateString)(properties.ownerAccount));\n    errors.collect(cdk.propertyValidator('port', cdk.validateNumber)(properties.port));\n    errors.collect(cdk.propertyValidator('preferredMaintenanceWindow', cdk.validateString)(properties.preferredMaintenanceWindow));\n    errors.collect(cdk.propertyValidator('publiclyAccessible', cdk.validateBoolean)(properties.publiclyAccessible));\n    errors.collect(cdk.propertyValidator('resourceAction', cdk.validateString)(properties.resourceAction));\n    errors.collect(cdk.propertyValidator('revisionTarget', cdk.validateString)(properties.revisionTarget));\n    errors.collect(cdk.propertyValidator('rotateEncryptionKey', cdk.validateBoolean)(properties.rotateEncryptionKey));\n    errors.collect(cdk.propertyValidator('snapshotClusterIdentifier', cdk.validateString)(properties.snapshotClusterIdentifier));\n    errors.collect(cdk.propertyValidator('snapshotCopyGrantName', cdk.validateString)(properties.snapshotCopyGrantName));\n    errors.collect(cdk.propertyValidator('snapshotCopyManual', cdk.validateBoolean)(properties.snapshotCopyManual));\n    errors.collect(cdk.propertyValidator('snapshotCopyRetentionPeriod', cdk.validateNumber)(properties.snapshotCopyRetentionPeriod));\n    errors.collect(cdk.propertyValidator('snapshotIdentifier', cdk.validateString)(properties.snapshotIdentifier));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcSecurityGroupIds', cdk.listValidator(cdk.validateString))(properties.vpcSecurityGroupIds));\n    return errors.wrap('supplied properties not correct for \"CfnClusterProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::Cluster` resource\n *\n * @param properties - the TypeScript properties of a `CfnClusterProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::Cluster` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClusterPropsValidator(properties).assertSuccess();\n    return {\n        ClusterType: cdk.stringToCloudFormation(properties.clusterType),\n        DBName: cdk.stringToCloudFormation(properties.dbName),\n        MasterUsername: cdk.stringToCloudFormation(properties.masterUsername),\n        MasterUserPassword: cdk.stringToCloudFormation(properties.masterUserPassword),\n        NodeType: cdk.stringToCloudFormation(properties.nodeType),\n        AllowVersionUpgrade: cdk.booleanToCloudFormation(properties.allowVersionUpgrade),\n        AquaConfigurationStatus: cdk.stringToCloudFormation(properties.aquaConfigurationStatus),\n        AutomatedSnapshotRetentionPeriod: cdk.numberToCloudFormation(properties.automatedSnapshotRetentionPeriod),\n        AvailabilityZone: cdk.stringToCloudFormation(properties.availabilityZone),\n        AvailabilityZoneRelocation: cdk.booleanToCloudFormation(properties.availabilityZoneRelocation),\n        AvailabilityZoneRelocationStatus: cdk.stringToCloudFormation(properties.availabilityZoneRelocationStatus),\n        Classic: cdk.booleanToCloudFormation(properties.classic),\n        ClusterIdentifier: cdk.stringToCloudFormation(properties.clusterIdentifier),\n        ClusterParameterGroupName: cdk.stringToCloudFormation(properties.clusterParameterGroupName),\n        ClusterSecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.clusterSecurityGroups),\n        ClusterSubnetGroupName: cdk.stringToCloudFormation(properties.clusterSubnetGroupName),\n        ClusterVersion: cdk.stringToCloudFormation(properties.clusterVersion),\n        DeferMaintenance: cdk.booleanToCloudFormation(properties.deferMaintenance),\n        DeferMaintenanceDuration: cdk.numberToCloudFormation(properties.deferMaintenanceDuration),\n        DeferMaintenanceEndTime: cdk.stringToCloudFormation(properties.deferMaintenanceEndTime),\n        DeferMaintenanceStartTime: cdk.stringToCloudFormation(properties.deferMaintenanceStartTime),\n        DestinationRegion: cdk.stringToCloudFormation(properties.destinationRegion),\n        ElasticIp: cdk.stringToCloudFormation(properties.elasticIp),\n        Encrypted: cdk.booleanToCloudFormation(properties.encrypted),\n        EnhancedVpcRouting: cdk.booleanToCloudFormation(properties.enhancedVpcRouting),\n        HsmClientCertificateIdentifier: cdk.stringToCloudFormation(properties.hsmClientCertificateIdentifier),\n        HsmConfigurationIdentifier: cdk.stringToCloudFormation(properties.hsmConfigurationIdentifier),\n        IamRoles: cdk.listMapper(cdk.stringToCloudFormation)(properties.iamRoles),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        LoggingProperties: cfnClusterLoggingPropertiesPropertyToCloudFormation(properties.loggingProperties),\n        MaintenanceTrackName: cdk.stringToCloudFormation(properties.maintenanceTrackName),\n        ManualSnapshotRetentionPeriod: cdk.numberToCloudFormation(properties.manualSnapshotRetentionPeriod),\n        NumberOfNodes: cdk.numberToCloudFormation(properties.numberOfNodes),\n        OwnerAccount: cdk.stringToCloudFormation(properties.ownerAccount),\n        Port: cdk.numberToCloudFormation(properties.port),\n        PreferredMaintenanceWindow: cdk.stringToCloudFormation(properties.preferredMaintenanceWindow),\n        PubliclyAccessible: cdk.booleanToCloudFormation(properties.publiclyAccessible),\n        ResourceAction: cdk.stringToCloudFormation(properties.resourceAction),\n        RevisionTarget: cdk.stringToCloudFormation(properties.revisionTarget),\n        RotateEncryptionKey: cdk.booleanToCloudFormation(properties.rotateEncryptionKey),\n        SnapshotClusterIdentifier: cdk.stringToCloudFormation(properties.snapshotClusterIdentifier),\n        SnapshotCopyGrantName: cdk.stringToCloudFormation(properties.snapshotCopyGrantName),\n        SnapshotCopyManual: cdk.booleanToCloudFormation(properties.snapshotCopyManual),\n        SnapshotCopyRetentionPeriod: cdk.numberToCloudFormation(properties.snapshotCopyRetentionPeriod),\n        SnapshotIdentifier: cdk.stringToCloudFormation(properties.snapshotIdentifier),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VpcSecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.vpcSecurityGroupIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClusterProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClusterProps>();\n    ret.addPropertyResult('clusterType', 'ClusterType', cfn_parse.FromCloudFormation.getString(properties.ClusterType));\n    ret.addPropertyResult('dbName', 'DBName', cfn_parse.FromCloudFormation.getString(properties.DBName));\n    ret.addPropertyResult('masterUsername', 'MasterUsername', cfn_parse.FromCloudFormation.getString(properties.MasterUsername));\n    ret.addPropertyResult('masterUserPassword', 'MasterUserPassword', cfn_parse.FromCloudFormation.getString(properties.MasterUserPassword));\n    ret.addPropertyResult('nodeType', 'NodeType', cfn_parse.FromCloudFormation.getString(properties.NodeType));\n    ret.addPropertyResult('allowVersionUpgrade', 'AllowVersionUpgrade', properties.AllowVersionUpgrade != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AllowVersionUpgrade) : undefined);\n    ret.addPropertyResult('aquaConfigurationStatus', 'AquaConfigurationStatus', properties.AquaConfigurationStatus != null ? cfn_parse.FromCloudFormation.getString(properties.AquaConfigurationStatus) : undefined);\n    ret.addPropertyResult('automatedSnapshotRetentionPeriod', 'AutomatedSnapshotRetentionPeriod', properties.AutomatedSnapshotRetentionPeriod != null ? cfn_parse.FromCloudFormation.getNumber(properties.AutomatedSnapshotRetentionPeriod) : undefined);\n    ret.addPropertyResult('availabilityZone', 'AvailabilityZone', properties.AvailabilityZone != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone) : undefined);\n    ret.addPropertyResult('availabilityZoneRelocation', 'AvailabilityZoneRelocation', properties.AvailabilityZoneRelocation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AvailabilityZoneRelocation) : undefined);\n    ret.addPropertyResult('availabilityZoneRelocationStatus', 'AvailabilityZoneRelocationStatus', properties.AvailabilityZoneRelocationStatus != null ? cfn_parse.FromCloudFormation.getString(properties.AvailabilityZoneRelocationStatus) : undefined);\n    ret.addPropertyResult('classic', 'Classic', properties.Classic != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Classic) : undefined);\n    ret.addPropertyResult('clusterIdentifier', 'ClusterIdentifier', properties.ClusterIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.ClusterIdentifier) : undefined);\n    ret.addPropertyResult('clusterParameterGroupName', 'ClusterParameterGroupName', properties.ClusterParameterGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.ClusterParameterGroupName) : undefined);\n    ret.addPropertyResult('clusterSecurityGroups', 'ClusterSecurityGroups', properties.ClusterSecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ClusterSecurityGroups) : undefined);\n    ret.addPropertyResult('clusterSubnetGroupName', 'ClusterSubnetGroupName', properties.ClusterSubnetGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.ClusterSubnetGroupName) : undefined);\n    ret.addPropertyResult('clusterVersion', 'ClusterVersion', properties.ClusterVersion != null ? cfn_parse.FromCloudFormation.getString(properties.ClusterVersion) : undefined);\n    ret.addPropertyResult('deferMaintenance', 'DeferMaintenance', properties.DeferMaintenance != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DeferMaintenance) : undefined);\n    ret.addPropertyResult('deferMaintenanceDuration', 'DeferMaintenanceDuration', properties.DeferMaintenanceDuration != null ? cfn_parse.FromCloudFormation.getNumber(properties.DeferMaintenanceDuration) : undefined);\n    ret.addPropertyResult('deferMaintenanceEndTime', 'DeferMaintenanceEndTime', properties.DeferMaintenanceEndTime != null ? cfn_parse.FromCloudFormation.getString(properties.DeferMaintenanceEndTime) : undefined);\n    ret.addPropertyResult('deferMaintenanceStartTime', 'DeferMaintenanceStartTime', properties.DeferMaintenanceStartTime != null ? cfn_parse.FromCloudFormation.getString(properties.DeferMaintenanceStartTime) : undefined);\n    ret.addPropertyResult('destinationRegion', 'DestinationRegion', properties.DestinationRegion != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationRegion) : undefined);\n    ret.addPropertyResult('elasticIp', 'ElasticIp', properties.ElasticIp != null ? cfn_parse.FromCloudFormation.getString(properties.ElasticIp) : undefined);\n    ret.addPropertyResult('encrypted', 'Encrypted', properties.Encrypted != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Encrypted) : undefined);\n    ret.addPropertyResult('enhancedVpcRouting', 'EnhancedVpcRouting', properties.EnhancedVpcRouting != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnhancedVpcRouting) : undefined);\n    ret.addPropertyResult('hsmClientCertificateIdentifier', 'HsmClientCertificateIdentifier', properties.HsmClientCertificateIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.HsmClientCertificateIdentifier) : undefined);\n    ret.addPropertyResult('hsmConfigurationIdentifier', 'HsmConfigurationIdentifier', properties.HsmConfigurationIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.HsmConfigurationIdentifier) : undefined);\n    ret.addPropertyResult('iamRoles', 'IamRoles', properties.IamRoles != null ? cfn_parse.FromCloudFormation.getStringArray(properties.IamRoles) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('loggingProperties', 'LoggingProperties', properties.LoggingProperties != null ? CfnClusterLoggingPropertiesPropertyFromCloudFormation(properties.LoggingProperties) : undefined);\n    ret.addPropertyResult('maintenanceTrackName', 'MaintenanceTrackName', properties.MaintenanceTrackName != null ? cfn_parse.FromCloudFormation.getString(properties.MaintenanceTrackName) : undefined);\n    ret.addPropertyResult('manualSnapshotRetentionPeriod', 'ManualSnapshotRetentionPeriod', properties.ManualSnapshotRetentionPeriod != null ? cfn_parse.FromCloudFormation.getNumber(properties.ManualSnapshotRetentionPeriod) : undefined);\n    ret.addPropertyResult('numberOfNodes', 'NumberOfNodes', properties.NumberOfNodes != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumberOfNodes) : undefined);\n    ret.addPropertyResult('ownerAccount', 'OwnerAccount', properties.OwnerAccount != null ? cfn_parse.FromCloudFormation.getString(properties.OwnerAccount) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getNumber(properties.Port) : undefined);\n    ret.addPropertyResult('preferredMaintenanceWindow', 'PreferredMaintenanceWindow', properties.PreferredMaintenanceWindow != null ? cfn_parse.FromCloudFormation.getString(properties.PreferredMaintenanceWindow) : undefined);\n    ret.addPropertyResult('publiclyAccessible', 'PubliclyAccessible', properties.PubliclyAccessible != null ? cfn_parse.FromCloudFormation.getBoolean(properties.PubliclyAccessible) : undefined);\n    ret.addPropertyResult('resourceAction', 'ResourceAction', properties.ResourceAction != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceAction) : undefined);\n    ret.addPropertyResult('revisionTarget', 'RevisionTarget', properties.RevisionTarget != null ? cfn_parse.FromCloudFormation.getString(properties.RevisionTarget) : undefined);\n    ret.addPropertyResult('rotateEncryptionKey', 'RotateEncryptionKey', properties.RotateEncryptionKey != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RotateEncryptionKey) : undefined);\n    ret.addPropertyResult('snapshotClusterIdentifier', 'SnapshotClusterIdentifier', properties.SnapshotClusterIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotClusterIdentifier) : undefined);\n    ret.addPropertyResult('snapshotCopyGrantName', 'SnapshotCopyGrantName', properties.SnapshotCopyGrantName != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotCopyGrantName) : undefined);\n    ret.addPropertyResult('snapshotCopyManual', 'SnapshotCopyManual', properties.SnapshotCopyManual != null ? cfn_parse.FromCloudFormation.getBoolean(properties.SnapshotCopyManual) : undefined);\n    ret.addPropertyResult('snapshotCopyRetentionPeriod', 'SnapshotCopyRetentionPeriod', properties.SnapshotCopyRetentionPeriod != null ? cfn_parse.FromCloudFormation.getNumber(properties.SnapshotCopyRetentionPeriod) : undefined);\n    ret.addPropertyResult('snapshotIdentifier', 'SnapshotIdentifier', properties.SnapshotIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.SnapshotIdentifier) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('vpcSecurityGroupIds', 'VpcSecurityGroupIds', properties.VpcSecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.VpcSecurityGroupIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \nexport class CfnCluster extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Redshift::Cluster\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCluster {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClusterPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCluster(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                 \n    public readonly attrDeferMaintenanceIdentifier: string;\n\n                                                                                                                                                                                                              \n    public readonly attrEndpointAddress: string;\n\n                                                                                                                                                                    \n    public readonly attrEndpointPort: string;\n\n                                                                                                                                                                                                                                                                                                                         \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public clusterType: string;\n\nn    public dbName: string;\n\nn    public masterUsername: string;\n\nn    public masterUserPassword: string;\n\nn    public nodeType: string;\n\nn    public allowVersionUpgrade: boolean | cdk.IResolvable | undefined;\n\nn    public aquaConfigurationStatus: string | undefined;\n\nn    public automatedSnapshotRetentionPeriod: number | undefined;\n\nn    public availabilityZone: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                   \n    public availabilityZoneRelocation: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                     \n    public availabilityZoneRelocationStatus: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    public classic: boolean | cdk.IResolvable | undefined;\n\nn    public clusterIdentifier: string | undefined;\n\nn    public clusterParameterGroupName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                   \n    public clusterSecurityGroups: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    public clusterSubnetGroupName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public clusterVersion: string | undefined;\n\n                                                                                                                                                                                                                           \n    public deferMaintenance: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                           \n    public deferMaintenanceDuration: number | undefined;\n\n                                                                                                                                                                                                                                         \n    public deferMaintenanceEndTime: string | undefined;\n\n                                                                                                                                                                                                                                             \n    public deferMaintenanceStartTime: string | undefined;\n\n                                                                                                                                                                                                                                                                                                \n    public destinationRegion: string | undefined;\n\nn    public elasticIp: string | undefined;\n\n                                                                                                                                                                                                                                                                 \n    public encrypted: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public enhancedVpcRouting: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                        \n    public hsmClientCertificateIdentifier: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                               \n    public hsmConfigurationIdentifier: string | undefined;\n\nn    public iamRoles: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                \n    public kmsKeyId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                     \n    public loggingProperties: CfnCluster.LoggingPropertiesProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                 \n    public maintenanceTrackName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    public manualSnapshotRetentionPeriod: number | undefined;\n\nn    public numberOfNodes: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                             \n    public ownerAccount: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public port: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public preferredMaintenanceWindow: string | undefined;\n\n                                                                                                                                                                                                                                                  \n    public publiclyAccessible: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                       \n    public resourceAction: string | undefined;\n\n                                                                                                                                                                                                                       \n    public revisionTarget: string | undefined;\n\n                                                                                                                                                                                                                                 \n    public rotateEncryptionKey: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public snapshotClusterIdentifier: string | undefined;\n\n                                                                                                                                                                                                                           \n    public snapshotCopyGrantName: string | undefined;\n\n                                                                                                                                                                                                                               \n    public snapshotCopyManual: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                 \n    public snapshotCopyRetentionPeriod: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                               \n    public snapshotIdentifier: string | undefined;\n\n                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                   \n    public vpcSecurityGroupIds: string[] | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnClusterProps) {\n        super(scope, id, { type: CfnCluster.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'clusterType', this);\n        cdk.requireProperty(props, 'dbName', this);\n        cdk.requireProperty(props, 'masterUserPassword', this);\n        cdk.requireProperty(props, 'masterUsername', this);\n        cdk.requireProperty(props, 'nodeType', this);\n        this.attrDeferMaintenanceIdentifier = cdk.Token.asString(this.getAtt('DeferMaintenanceIdentifier'));\n        this.attrEndpointAddress = cdk.Token.asString(this.getAtt('Endpoint.Address'));\n        this.attrEndpointPort = cdk.Token.asString(this.getAtt('Endpoint.Port'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.clusterType = props.clusterType;\n        this.dbName = props.dbName;\n        this.masterUsername = props.masterUsername;\n        this.masterUserPassword = props.masterUserPassword;\n        this.nodeType = props.nodeType;\n        this.allowVersionUpgrade = props.allowVersionUpgrade;\n        this.aquaConfigurationStatus = props.aquaConfigurationStatus;\n        this.automatedSnapshotRetentionPeriod = props.automatedSnapshotRetentionPeriod;\n        this.availabilityZone = props.availabilityZone;\n        this.availabilityZoneRelocation = props.availabilityZoneRelocation;\n        this.availabilityZoneRelocationStatus = props.availabilityZoneRelocationStatus;\n        this.classic = props.classic;\n        this.clusterIdentifier = props.clusterIdentifier;\n        this.clusterParameterGroupName = props.clusterParameterGroupName;\n        this.clusterSecurityGroups = props.clusterSecurityGroups;\n        this.clusterSubnetGroupName = props.clusterSubnetGroupName;\n        this.clusterVersion = props.clusterVersion;\n        this.deferMaintenance = props.deferMaintenance;\n        this.deferMaintenanceDuration = props.deferMaintenanceDuration;\n        this.deferMaintenanceEndTime = props.deferMaintenanceEndTime;\n        this.deferMaintenanceStartTime = props.deferMaintenanceStartTime;\n        this.destinationRegion = props.destinationRegion;\n        this.elasticIp = props.elasticIp;\n        this.encrypted = props.encrypted;\n        this.enhancedVpcRouting = props.enhancedVpcRouting;\n        this.hsmClientCertificateIdentifier = props.hsmClientCertificateIdentifier;\n        this.hsmConfigurationIdentifier = props.hsmConfigurationIdentifier;\n        this.iamRoles = props.iamRoles;\n        this.kmsKeyId = props.kmsKeyId;\n        this.loggingProperties = props.loggingProperties;\n        this.maintenanceTrackName = props.maintenanceTrackName;\n        this.manualSnapshotRetentionPeriod = props.manualSnapshotRetentionPeriod;\n        this.numberOfNodes = props.numberOfNodes;\n        this.ownerAccount = props.ownerAccount;\n        this.port = props.port;\n        this.preferredMaintenanceWindow = props.preferredMaintenanceWindow;\n        this.publiclyAccessible = props.publiclyAccessible;\n        this.resourceAction = props.resourceAction;\n        this.revisionTarget = props.revisionTarget;\n        this.rotateEncryptionKey = props.rotateEncryptionKey;\n        this.snapshotClusterIdentifier = props.snapshotClusterIdentifier;\n        this.snapshotCopyGrantName = props.snapshotCopyGrantName;\n        this.snapshotCopyManual = props.snapshotCopyManual;\n        this.snapshotCopyRetentionPeriod = props.snapshotCopyRetentionPeriod;\n        this.snapshotIdentifier = props.snapshotIdentifier;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Redshift::Cluster\", props.tags, { tagPropertyName: 'tags' });\n        this.vpcSecurityGroupIds = props.vpcSecurityGroupIds;\n        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {\n            this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === undefined\n              ? ['\\'AWS::Redshift::Cluster\\' is a stateful resource type, and you must specify a Removal Policy for it. Call \\'resource.applyRemovalPolicy()\\'.']\n              : [] });\n        }\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCluster.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            clusterType: this.clusterType,\n            dbName: this.dbName,\n            masterUsername: this.masterUsername,\n            masterUserPassword: this.masterUserPassword,\n            nodeType: this.nodeType,\n            allowVersionUpgrade: this.allowVersionUpgrade,\n            aquaConfigurationStatus: this.aquaConfigurationStatus,\n            automatedSnapshotRetentionPeriod: this.automatedSnapshotRetentionPeriod,\n            availabilityZone: this.availabilityZone,\n            availabilityZoneRelocation: this.availabilityZoneRelocation,\n            availabilityZoneRelocationStatus: this.availabilityZoneRelocationStatus,\n            classic: this.classic,\n            clusterIdentifier: this.clusterIdentifier,\n            clusterParameterGroupName: this.clusterParameterGroupName,\n            clusterSecurityGroups: this.clusterSecurityGroups,\n            clusterSubnetGroupName: this.clusterSubnetGroupName,\n            clusterVersion: this.clusterVersion,\n            deferMaintenance: this.deferMaintenance,\n            deferMaintenanceDuration: this.deferMaintenanceDuration,\n            deferMaintenanceEndTime: this.deferMaintenanceEndTime,\n            deferMaintenanceStartTime: this.deferMaintenanceStartTime,\n            destinationRegion: this.destinationRegion,\n            elasticIp: this.elasticIp,\n            encrypted: this.encrypted,\n            enhancedVpcRouting: this.enhancedVpcRouting,\n            hsmClientCertificateIdentifier: this.hsmClientCertificateIdentifier,\n            hsmConfigurationIdentifier: this.hsmConfigurationIdentifier,\n            iamRoles: this.iamRoles,\n            kmsKeyId: this.kmsKeyId,\n            loggingProperties: this.loggingProperties,\n            maintenanceTrackName: this.maintenanceTrackName,\n            manualSnapshotRetentionPeriod: this.manualSnapshotRetentionPeriod,\n            numberOfNodes: this.numberOfNodes,\n            ownerAccount: this.ownerAccount,\n            port: this.port,\n            preferredMaintenanceWindow: this.preferredMaintenanceWindow,\n            publiclyAccessible: this.publiclyAccessible,\n            resourceAction: this.resourceAction,\n            revisionTarget: this.revisionTarget,\n            rotateEncryptionKey: this.rotateEncryptionKey,\n            snapshotClusterIdentifier: this.snapshotClusterIdentifier,\n            snapshotCopyGrantName: this.snapshotCopyGrantName,\n            snapshotCopyManual: this.snapshotCopyManual,\n            snapshotCopyRetentionPeriod: this.snapshotCopyRetentionPeriod,\n            snapshotIdentifier: this.snapshotIdentifier,\n            tags: this.tags.renderTags(),\n            vpcSecurityGroupIds: this.vpcSecurityGroupIds,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClusterPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCluster {\n                                                                                                                                                                                                                                        \n    export interface EndpointProperty {\n                                                                                                                                                                                                                                                \n        readonly address?: string;\n                                                                                                                                                                                                                                                                \n        readonly port?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EndpointProperty`\n *\n * @param properties - the TypeScript properties of a `EndpointProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_EndpointPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('address', cdk.validateString)(properties.address));\n    errors.collect(cdk.propertyValidator('port', cdk.validateString)(properties.port));\n    return errors.wrap('supplied properties not correct for \"EndpointProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::Cluster.Endpoint` resource\n *\n * @param properties - the TypeScript properties of a `EndpointProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::Cluster.Endpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterEndpointPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_EndpointPropertyValidator(properties).assertSuccess();\n    return {\n        Address: cdk.stringToCloudFormation(properties.address),\n        Port: cdk.stringToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterEndpointPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.EndpointProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.EndpointProperty>();\n    ret.addPropertyResult('address', 'Address', properties.Address != null ? cfn_parse.FromCloudFormation.getString(properties.Address) : undefined);\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getString(properties.Port) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnCluster {\n                                                                                                                                                                                                                                                                                                                                   \n    export interface LoggingPropertiesProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly bucketName: string;\nn        readonly s3KeyPrefix?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoggingPropertiesProperty`\n *\n * @param properties - the TypeScript properties of a `LoggingPropertiesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_LoggingPropertiesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketName', cdk.requiredValidator)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('s3KeyPrefix', cdk.validateString)(properties.s3KeyPrefix));\n    return errors.wrap('supplied properties not correct for \"LoggingPropertiesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::Cluster.LoggingProperties` resource\n *\n * @param properties - the TypeScript properties of a `LoggingPropertiesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::Cluster.LoggingProperties` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterLoggingPropertiesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_LoggingPropertiesPropertyValidator(properties).assertSuccess();\n    return {\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        S3KeyPrefix: cdk.stringToCloudFormation(properties.s3KeyPrefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterLoggingPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.LoggingPropertiesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.LoggingPropertiesProperty>();\n    ret.addPropertyResult('bucketName', 'BucketName', cfn_parse.FromCloudFormation.getString(properties.BucketName));\n    ret.addPropertyResult('s3KeyPrefix', 'S3KeyPrefix', properties.S3KeyPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.S3KeyPrefix) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                               \nexport interface CfnClusterParameterGroupProps {\n\n                                                                                                                                                                                                                                                \n    readonly description: string;\n\n                                                                                                                                                                                                                                                                                                                      \n    readonly parameterGroupFamily: string;\n\nn    readonly parameters?: Array<CfnClusterParameterGroup.ParameterProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                   \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClusterParameterGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnClusterParameterGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClusterParameterGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.requiredValidator)(properties.description));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('parameterGroupFamily', cdk.requiredValidator)(properties.parameterGroupFamily));\n    errors.collect(cdk.propertyValidator('parameterGroupFamily', cdk.validateString)(properties.parameterGroupFamily));\n    errors.collect(cdk.propertyValidator('parameters', cdk.listValidator(CfnClusterParameterGroup_ParameterPropertyValidator))(properties.parameters));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnClusterParameterGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::ClusterParameterGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnClusterParameterGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::ClusterParameterGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterParameterGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClusterParameterGroupPropsValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        ParameterGroupFamily: cdk.stringToCloudFormation(properties.parameterGroupFamily),\n        Parameters: cdk.listMapper(cfnClusterParameterGroupParameterPropertyToCloudFormation)(properties.parameters),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterParameterGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClusterParameterGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClusterParameterGroupProps>();\n    ret.addPropertyResult('description', 'Description', cfn_parse.FromCloudFormation.getString(properties.Description));\n    ret.addPropertyResult('parameterGroupFamily', 'ParameterGroupFamily', cfn_parse.FromCloudFormation.getString(properties.ParameterGroupFamily));\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getArray(CfnClusterParameterGroupParameterPropertyFromCloudFormation)(properties.Parameters) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                          \nexport class CfnClusterParameterGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Redshift::ClusterParameterGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnClusterParameterGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClusterParameterGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnClusterParameterGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                \n    public description: string;\n\n                                                                                                                                                                                                                                                                                                                      \n    public parameterGroupFamily: string;\n\nn    public parameters: Array<CfnClusterParameterGroup.ParameterProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                   \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnClusterParameterGroupProps) {\n        super(scope, id, { type: CfnClusterParameterGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'description', this);\n        cdk.requireProperty(props, 'parameterGroupFamily', this);\n\n        this.description = props.description;\n        this.parameterGroupFamily = props.parameterGroupFamily;\n        this.parameters = props.parameters;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Redshift::ClusterParameterGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnClusterParameterGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            description: this.description,\n            parameterGroupFamily: this.parameterGroupFamily,\n            parameters: this.parameters,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClusterParameterGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnClusterParameterGroup {\n                                                                                                                                                                                                                                                                        \n    export interface ParameterProperty {\n                                                                                                                                                                                                                                                                             \n        readonly parameterName: string;\n                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly parameterValue: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ParameterProperty`\n *\n * @param properties - the TypeScript properties of a `ParameterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnClusterParameterGroup_ParameterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('parameterName', cdk.requiredValidator)(properties.parameterName));\n    errors.collect(cdk.propertyValidator('parameterName', cdk.validateString)(properties.parameterName));\n    errors.collect(cdk.propertyValidator('parameterValue', cdk.requiredValidator)(properties.parameterValue));\n    errors.collect(cdk.propertyValidator('parameterValue', cdk.validateString)(properties.parameterValue));\n    return errors.wrap('supplied properties not correct for \"ParameterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::ClusterParameterGroup.Parameter` resource\n *\n * @param properties - the TypeScript properties of a `ParameterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::ClusterParameterGroup.Parameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterParameterGroupParameterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClusterParameterGroup_ParameterPropertyValidator(properties).assertSuccess();\n    return {\n        ParameterName: cdk.stringToCloudFormation(properties.parameterName),\n        ParameterValue: cdk.stringToCloudFormation(properties.parameterValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterParameterGroupParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClusterParameterGroup.ParameterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClusterParameterGroup.ParameterProperty>();\n    ret.addPropertyResult('parameterName', 'ParameterName', cfn_parse.FromCloudFormation.getString(properties.ParameterName));\n    ret.addPropertyResult('parameterValue', 'ParameterValue', cfn_parse.FromCloudFormation.getString(properties.ParameterValue));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                             \nexport interface CfnClusterSecurityGroupProps {\n\n                                                                                                                                                                                                                                            \n    readonly description: string;\n\n                                                                                                                                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClusterSecurityGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnClusterSecurityGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClusterSecurityGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.requiredValidator)(properties.description));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnClusterSecurityGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::ClusterSecurityGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnClusterSecurityGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::ClusterSecurityGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterSecurityGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClusterSecurityGroupPropsValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterSecurityGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClusterSecurityGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClusterSecurityGroupProps>();\n    ret.addPropertyResult('description', 'Description', cfn_parse.FromCloudFormation.getString(properties.Description));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnClusterSecurityGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Redshift::ClusterSecurityGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnClusterSecurityGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClusterSecurityGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnClusterSecurityGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                            \n    public description: string;\n\n                                                                                                                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnClusterSecurityGroupProps) {\n        super(scope, id, { type: CfnClusterSecurityGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'description', this);\n\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Redshift::ClusterSecurityGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnClusterSecurityGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClusterSecurityGroupPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                           \nexport interface CfnClusterSecurityGroupIngressProps {\n\n                                                                                                                                                                                                                                                                                                    \n    readonly clusterSecurityGroupName: string;\n\n                                                                                                                                                                                                                                                                            \n    readonly cidrip?: string;\n\n                                                                                                                                                                                                                                                                                                    \n    readonly ec2SecurityGroupName?: string;\n\nn    readonly ec2SecurityGroupOwnerId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClusterSecurityGroupIngressProps`\n *\n * @param properties - the TypeScript properties of a `CfnClusterSecurityGroupIngressProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClusterSecurityGroupIngressPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidrip', cdk.validateString)(properties.cidrip));\n    errors.collect(cdk.propertyValidator('clusterSecurityGroupName', cdk.requiredValidator)(properties.clusterSecurityGroupName));\n    errors.collect(cdk.propertyValidator('clusterSecurityGroupName', cdk.validateString)(properties.clusterSecurityGroupName));\n    errors.collect(cdk.propertyValidator('ec2SecurityGroupName', cdk.validateString)(properties.ec2SecurityGroupName));\n    errors.collect(cdk.propertyValidator('ec2SecurityGroupOwnerId', cdk.validateString)(properties.ec2SecurityGroupOwnerId));\n    return errors.wrap('supplied properties not correct for \"CfnClusterSecurityGroupIngressProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::ClusterSecurityGroupIngress` resource\n *\n * @param properties - the TypeScript properties of a `CfnClusterSecurityGroupIngressProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::ClusterSecurityGroupIngress` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterSecurityGroupIngressPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClusterSecurityGroupIngressPropsValidator(properties).assertSuccess();\n    return {\n        ClusterSecurityGroupName: cdk.stringToCloudFormation(properties.clusterSecurityGroupName),\n        CIDRIP: cdk.stringToCloudFormation(properties.cidrip),\n        EC2SecurityGroupName: cdk.stringToCloudFormation(properties.ec2SecurityGroupName),\n        EC2SecurityGroupOwnerId: cdk.stringToCloudFormation(properties.ec2SecurityGroupOwnerId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterSecurityGroupIngressPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClusterSecurityGroupIngressProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClusterSecurityGroupIngressProps>();\n    ret.addPropertyResult('clusterSecurityGroupName', 'ClusterSecurityGroupName', cfn_parse.FromCloudFormation.getString(properties.ClusterSecurityGroupName));\n    ret.addPropertyResult('cidrip', 'CIDRIP', properties.CIDRIP != null ? cfn_parse.FromCloudFormation.getString(properties.CIDRIP) : undefined);\n    ret.addPropertyResult('ec2SecurityGroupName', 'EC2SecurityGroupName', properties.EC2SecurityGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.EC2SecurityGroupName) : undefined);\n    ret.addPropertyResult('ec2SecurityGroupOwnerId', 'EC2SecurityGroupOwnerId', properties.EC2SecurityGroupOwnerId != null ? cfn_parse.FromCloudFormation.getString(properties.EC2SecurityGroupOwnerId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnClusterSecurityGroupIngress extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Redshift::ClusterSecurityGroupIngress\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnClusterSecurityGroupIngress {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClusterSecurityGroupIngressPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnClusterSecurityGroupIngress(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                    \n    public clusterSecurityGroupName: string;\n\n                                                                                                                                                                                                                                                                            \n    public cidrip: string | undefined;\n\n                                                                                                                                                                                                                                                                                                    \n    public ec2SecurityGroupName: string | undefined;\n\nn    public ec2SecurityGroupOwnerId: string | undefined;\n\n                                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnClusterSecurityGroupIngressProps) {\n        super(scope, id, { type: CfnClusterSecurityGroupIngress.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'clusterSecurityGroupName', this);\n\n        this.clusterSecurityGroupName = props.clusterSecurityGroupName;\n        this.cidrip = props.cidrip;\n        this.ec2SecurityGroupName = props.ec2SecurityGroupName;\n        this.ec2SecurityGroupOwnerId = props.ec2SecurityGroupOwnerId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnClusterSecurityGroupIngress.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            clusterSecurityGroupName: this.clusterSecurityGroupName,\n            cidrip: this.cidrip,\n            ec2SecurityGroupName: this.ec2SecurityGroupName,\n            ec2SecurityGroupOwnerId: this.ec2SecurityGroupOwnerId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClusterSecurityGroupIngressPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                         \nexport interface CfnClusterSubnetGroupProps {\n\n                                                                                                                                                                                                                                      \n    readonly description: string;\n\n                                                                                                                                                                                                                                                                                         \n    readonly subnetIds: string[];\n\n                                                                                                                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClusterSubnetGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnClusterSubnetGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClusterSubnetGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.requiredValidator)(properties.description));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.requiredValidator)(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnClusterSubnetGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::ClusterSubnetGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnClusterSubnetGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::ClusterSubnetGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterSubnetGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClusterSubnetGroupPropsValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterSubnetGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClusterSubnetGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClusterSubnetGroupProps>();\n    ret.addPropertyResult('description', 'Description', cfn_parse.FromCloudFormation.getString(properties.Description));\n    ret.addPropertyResult('subnetIds', 'SubnetIds', cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnClusterSubnetGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Redshift::ClusterSubnetGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnClusterSubnetGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClusterSubnetGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnClusterSubnetGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                      \n    public description: string;\n\n                                                                                                                                                                                                                                                                                         \n    public subnetIds: string[];\n\n                                                                                                                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnClusterSubnetGroupProps) {\n        super(scope, id, { type: CfnClusterSubnetGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'description', this);\n        cdk.requireProperty(props, 'subnetIds', this);\n\n        this.description = props.description;\n        this.subnetIds = props.subnetIds;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Redshift::ClusterSubnetGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnClusterSubnetGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            description: this.description,\n            subnetIds: this.subnetIds,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClusterSubnetGroupPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                 \nexport interface CfnEndpointAccessProps {\n\n                                                                                                                                                                                                                     \n    readonly endpointName: string;\n\n                                                                                                                                                                                                                                                                                                                                     \n    readonly vpcSecurityGroupIds: string[];\n\n                                                                                                                                                                                                                                                                    \n    readonly clusterIdentifier?: string;\n\n                                                                                                                                                                                                                                            \n    readonly resourceOwner?: string;\n\n                                                                                                                                                                                                                                                                          \n    readonly subnetGroupName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEndpointAccessProps`\n *\n * @param properties - the TypeScript properties of a `CfnEndpointAccessProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointAccessPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterIdentifier', cdk.validateString)(properties.clusterIdentifier));\n    errors.collect(cdk.propertyValidator('endpointName', cdk.requiredValidator)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('endpointName', cdk.validateString)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('resourceOwner', cdk.validateString)(properties.resourceOwner));\n    errors.collect(cdk.propertyValidator('subnetGroupName', cdk.validateString)(properties.subnetGroupName));\n    errors.collect(cdk.propertyValidator('vpcSecurityGroupIds', cdk.requiredValidator)(properties.vpcSecurityGroupIds));\n    errors.collect(cdk.propertyValidator('vpcSecurityGroupIds', cdk.listValidator(cdk.validateString))(properties.vpcSecurityGroupIds));\n    return errors.wrap('supplied properties not correct for \"CfnEndpointAccessProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::EndpointAccess` resource\n *\n * @param properties - the TypeScript properties of a `CfnEndpointAccessProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::EndpointAccess` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointAccessPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointAccessPropsValidator(properties).assertSuccess();\n    return {\n        EndpointName: cdk.stringToCloudFormation(properties.endpointName),\n        VpcSecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.vpcSecurityGroupIds),\n        ClusterIdentifier: cdk.stringToCloudFormation(properties.clusterIdentifier),\n        ResourceOwner: cdk.stringToCloudFormation(properties.resourceOwner),\n        SubnetGroupName: cdk.stringToCloudFormation(properties.subnetGroupName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointAccessPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointAccessProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointAccessProps>();\n    ret.addPropertyResult('endpointName', 'EndpointName', cfn_parse.FromCloudFormation.getString(properties.EndpointName));\n    ret.addPropertyResult('vpcSecurityGroupIds', 'VpcSecurityGroupIds', cfn_parse.FromCloudFormation.getStringArray(properties.VpcSecurityGroupIds));\n    ret.addPropertyResult('clusterIdentifier', 'ClusterIdentifier', properties.ClusterIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.ClusterIdentifier) : undefined);\n    ret.addPropertyResult('resourceOwner', 'ResourceOwner', properties.ResourceOwner != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceOwner) : undefined);\n    ret.addPropertyResult('subnetGroupName', 'SubnetGroupName', properties.SubnetGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetGroupName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                 \nexport class CfnEndpointAccess extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Redshift::EndpointAccess\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEndpointAccess {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEndpointAccessPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEndpointAccess(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                               \n    public readonly attrAddress: string;\n\n                                                                                                                       \n    public readonly attrEndpointCreateTime: string;\n\n                                                                                                 \n    public readonly attrEndpointStatus: string;\n\n                                                                                                                              \n    public readonly attrPort: number;\n\n                                                                        \n    public readonly attrVpcSecurityGroups: cdk.IResolvable;\n\n                                                                                                                                                                                                                     \n    public endpointName: string;\n\n                                                                                                                                                                                                                                                                                                                                     \n    public vpcSecurityGroupIds: string[];\n\n                                                                                                                                                                                                                                                                    \n    public clusterIdentifier: string | undefined;\n\n                                                                                                                                                                                                                                            \n    public resourceOwner: string | undefined;\n\n                                                                                                                                                                                                                                                                          \n    public subnetGroupName: string | undefined;\n\n                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnEndpointAccessProps) {\n        super(scope, id, { type: CfnEndpointAccess.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'endpointName', this);\n        cdk.requireProperty(props, 'vpcSecurityGroupIds', this);\n        this.attrAddress = cdk.Token.asString(this.getAtt('Address'));\n        this.attrEndpointCreateTime = cdk.Token.asString(this.getAtt('EndpointCreateTime'));\n        this.attrEndpointStatus = cdk.Token.asString(this.getAtt('EndpointStatus'));\n        this.attrPort = cdk.Token.asNumber(this.getAtt('Port'));\n        this.attrVpcSecurityGroups = this.getAtt('VpcSecurityGroups');\n\n        this.endpointName = props.endpointName;\n        this.vpcSecurityGroupIds = props.vpcSecurityGroupIds;\n        this.clusterIdentifier = props.clusterIdentifier;\n        this.resourceOwner = props.resourceOwner;\n        this.subnetGroupName = props.subnetGroupName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEndpointAccess.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            endpointName: this.endpointName,\n            vpcSecurityGroupIds: this.vpcSecurityGroupIds,\n            clusterIdentifier: this.clusterIdentifier,\n            resourceOwner: this.resourceOwner,\n            subnetGroupName: this.subnetGroupName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEndpointAccessPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnEndpointAccess {\n                                                                                                                                                                                                                                                                        \n    export interface VpcSecurityGroupProperty {\n                                                                                                                                                                                                                                                                         \n        readonly status?: string;\n                                                                                                                                                                                                                                                                                                   \n        readonly vpcSecurityGroupId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcSecurityGroupProperty`\n *\n * @param properties - the TypeScript properties of a `VpcSecurityGroupProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointAccess_VpcSecurityGroupPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    errors.collect(cdk.propertyValidator('vpcSecurityGroupId', cdk.validateString)(properties.vpcSecurityGroupId));\n    return errors.wrap('supplied properties not correct for \"VpcSecurityGroupProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::EndpointAccess.VpcSecurityGroup` resource\n *\n * @param properties - the TypeScript properties of a `VpcSecurityGroupProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::EndpointAccess.VpcSecurityGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointAccessVpcSecurityGroupPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointAccess_VpcSecurityGroupPropertyValidator(properties).assertSuccess();\n    return {\n        Status: cdk.stringToCloudFormation(properties.status),\n        VpcSecurityGroupId: cdk.stringToCloudFormation(properties.vpcSecurityGroupId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointAccessVpcSecurityGroupPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointAccess.VpcSecurityGroupProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointAccess.VpcSecurityGroupProperty>();\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addPropertyResult('vpcSecurityGroupId', 'VpcSecurityGroupId', properties.VpcSecurityGroupId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcSecurityGroupId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                               \nexport interface CfnEndpointAuthorizationProps {\n\n                                                                                                                                                                                                                                                                                                                                                       \n    readonly account: string;\n\n                                                                                                                                                                                                                                      \n    readonly clusterIdentifier: string;\n\n                                                                                                                                                                                                                                                                                                                                                         \n    readonly force?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                   \n    readonly vpcIds?: string[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEndpointAuthorizationProps`\n *\n * @param properties - the TypeScript properties of a `CfnEndpointAuthorizationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointAuthorizationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('account', cdk.requiredValidator)(properties.account));\n    errors.collect(cdk.propertyValidator('account', cdk.validateString)(properties.account));\n    errors.collect(cdk.propertyValidator('clusterIdentifier', cdk.requiredValidator)(properties.clusterIdentifier));\n    errors.collect(cdk.propertyValidator('clusterIdentifier', cdk.validateString)(properties.clusterIdentifier));\n    errors.collect(cdk.propertyValidator('force', cdk.validateBoolean)(properties.force));\n    errors.collect(cdk.propertyValidator('vpcIds', cdk.listValidator(cdk.validateString))(properties.vpcIds));\n    return errors.wrap('supplied properties not correct for \"CfnEndpointAuthorizationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::EndpointAuthorization` resource\n *\n * @param properties - the TypeScript properties of a `CfnEndpointAuthorizationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::EndpointAuthorization` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointAuthorizationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointAuthorizationPropsValidator(properties).assertSuccess();\n    return {\n        Account: cdk.stringToCloudFormation(properties.account),\n        ClusterIdentifier: cdk.stringToCloudFormation(properties.clusterIdentifier),\n        Force: cdk.booleanToCloudFormation(properties.force),\n        VpcIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.vpcIds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointAuthorizationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointAuthorizationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointAuthorizationProps>();\n    ret.addPropertyResult('account', 'Account', cfn_parse.FromCloudFormation.getString(properties.Account));\n    ret.addPropertyResult('clusterIdentifier', 'ClusterIdentifier', cfn_parse.FromCloudFormation.getString(properties.ClusterIdentifier));\n    ret.addPropertyResult('force', 'Force', properties.Force != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Force) : undefined);\n    ret.addPropertyResult('vpcIds', 'VpcIds', properties.VpcIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.VpcIds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                         \nexport class CfnEndpointAuthorization extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Redshift::EndpointAuthorization\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEndpointAuthorization {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEndpointAuthorizationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEndpointAuthorization(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                          \n    public readonly attrAllowedAllVpCs: cdk.IResolvable;\n\n                                                                                                          \n    public readonly attrAllowedVpCs: string[];\n\n                                                                                                                       \n    public readonly attrAuthorizeTime: string;\n\n                                                                                               \n    public readonly attrClusterStatus: string;\n\n                                                                                                                                                \n    public readonly attrEndpointCount: number;\n\n                                                                                                                \n    public readonly attrGrantee: string;\n\n                                                                                                       \n    public readonly attrGrantor: string;\n\n                                                                                                     \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                                                                                                                                       \n    public account: string;\n\n                                                                                                                                                                                                                                      \n    public clusterIdentifier: string;\n\n                                                                                                                                                                                                                                                                                                                                                         \n    public force: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                   \n    public vpcIds: string[] | undefined;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnEndpointAuthorizationProps) {\n        super(scope, id, { type: CfnEndpointAuthorization.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'account', this);\n        cdk.requireProperty(props, 'clusterIdentifier', this);\n        this.attrAllowedAllVpCs = this.getAtt('AllowedAllVPCs');\n        this.attrAllowedVpCs = cdk.Token.asList(this.getAtt('AllowedVPCs'));\n        this.attrAuthorizeTime = cdk.Token.asString(this.getAtt('AuthorizeTime'));\n        this.attrClusterStatus = cdk.Token.asString(this.getAtt('ClusterStatus'));\n        this.attrEndpointCount = cdk.Token.asNumber(this.getAtt('EndpointCount'));\n        this.attrGrantee = cdk.Token.asString(this.getAtt('Grantee'));\n        this.attrGrantor = cdk.Token.asString(this.getAtt('Grantor'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.account = props.account;\n        this.clusterIdentifier = props.clusterIdentifier;\n        this.force = props.force;\n        this.vpcIds = props.vpcIds;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEndpointAuthorization.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            account: this.account,\n            clusterIdentifier: this.clusterIdentifier,\n            force: this.force,\n            vpcIds: this.vpcIds,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEndpointAuthorizationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                       \nexport interface CfnEventSubscriptionProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly subscriptionName: string;\n\n                                                                                                                                                                                                                                                                                                                            \n    readonly enabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly eventCategories?: string[];\n\n                                                                                                                                                                                                                                                                                                                                    \n    readonly severity?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n    readonly snsTopicArn?: string;\n\nn    readonly sourceIds?: string[];\n\nn    readonly sourceType?: string;\n\n                                                                                                                                                                                                                  \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEventSubscriptionProps`\n *\n * @param properties - the TypeScript properties of a `CfnEventSubscriptionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEventSubscriptionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('eventCategories', cdk.listValidator(cdk.validateString))(properties.eventCategories));\n    errors.collect(cdk.propertyValidator('severity', cdk.validateString)(properties.severity));\n    errors.collect(cdk.propertyValidator('snsTopicArn', cdk.validateString)(properties.snsTopicArn));\n    errors.collect(cdk.propertyValidator('sourceIds', cdk.listValidator(cdk.validateString))(properties.sourceIds));\n    errors.collect(cdk.propertyValidator('sourceType', cdk.validateString)(properties.sourceType));\n    errors.collect(cdk.propertyValidator('subscriptionName', cdk.requiredValidator)(properties.subscriptionName));\n    errors.collect(cdk.propertyValidator('subscriptionName', cdk.validateString)(properties.subscriptionName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnEventSubscriptionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::EventSubscription` resource\n *\n * @param properties - the TypeScript properties of a `CfnEventSubscriptionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::EventSubscription` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEventSubscriptionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEventSubscriptionPropsValidator(properties).assertSuccess();\n    return {\n        SubscriptionName: cdk.stringToCloudFormation(properties.subscriptionName),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        EventCategories: cdk.listMapper(cdk.stringToCloudFormation)(properties.eventCategories),\n        Severity: cdk.stringToCloudFormation(properties.severity),\n        SnsTopicArn: cdk.stringToCloudFormation(properties.snsTopicArn),\n        SourceIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.sourceIds),\n        SourceType: cdk.stringToCloudFormation(properties.sourceType),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEventSubscriptionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEventSubscriptionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEventSubscriptionProps>();\n    ret.addPropertyResult('subscriptionName', 'SubscriptionName', cfn_parse.FromCloudFormation.getString(properties.SubscriptionName));\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('eventCategories', 'EventCategories', properties.EventCategories != null ? cfn_parse.FromCloudFormation.getStringArray(properties.EventCategories) : undefined);\n    ret.addPropertyResult('severity', 'Severity', properties.Severity != null ? cfn_parse.FromCloudFormation.getString(properties.Severity) : undefined);\n    ret.addPropertyResult('snsTopicArn', 'SnsTopicArn', properties.SnsTopicArn != null ? cfn_parse.FromCloudFormation.getString(properties.SnsTopicArn) : undefined);\n    ret.addPropertyResult('sourceIds', 'SourceIds', properties.SourceIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SourceIds) : undefined);\n    ret.addPropertyResult('sourceType', 'SourceType', properties.SourceType != null ? cfn_parse.FromCloudFormation.getString(properties.SourceType) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                 \nexport class CfnEventSubscription extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Redshift::EventSubscription\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEventSubscription {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEventSubscriptionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEventSubscription(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                          \n    public readonly attrCustSubscriptionId: string;\n\n                                                                                                                                                         \n    public readonly attrCustomerAwsId: string;\n\n                                                                                                                                                                                                                                                        \n    public readonly attrEventCategoriesList: string[];\n\n                                                                                                                                                                      \n    public readonly attrSourceIdsList: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public readonly attrStatus: string;\n\n                                                                                                                                                                  \n    public readonly attrSubscriptionCreationTime: string;\n\nn    public subscriptionName: string;\n\n                                                                                                                                                                                                                                                                                                                            \n    public enabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    public eventCategories: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                    \n    public severity: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n    public snsTopicArn: string | undefined;\n\nn    public sourceIds: string[] | undefined;\n\nn    public sourceType: string | undefined;\n\n                                                                                                                                                                                                                  \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnEventSubscriptionProps) {\n        super(scope, id, { type: CfnEventSubscription.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'subscriptionName', this);\n        this.attrCustSubscriptionId = cdk.Token.asString(this.getAtt('CustSubscriptionId'));\n        this.attrCustomerAwsId = cdk.Token.asString(this.getAtt('CustomerAwsId'));\n        this.attrEventCategoriesList = cdk.Token.asList(this.getAtt('EventCategoriesList'));\n        this.attrSourceIdsList = cdk.Token.asList(this.getAtt('SourceIdsList'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n        this.attrSubscriptionCreationTime = cdk.Token.asString(this.getAtt('SubscriptionCreationTime'));\n\n        this.subscriptionName = props.subscriptionName;\n        this.enabled = props.enabled;\n        this.eventCategories = props.eventCategories;\n        this.severity = props.severity;\n        this.snsTopicArn = props.snsTopicArn;\n        this.sourceIds = props.sourceIds;\n        this.sourceType = props.sourceType;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Redshift::EventSubscription\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEventSubscription.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            subscriptionName: this.subscriptionName,\n            enabled: this.enabled,\n            eventCategories: this.eventCategories,\n            severity: this.severity,\n            snsTopicArn: this.snsTopicArn,\n            sourceIds: this.sourceIds,\n            sourceType: this.sourceType,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEventSubscriptionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                   \nexport interface CfnScheduledActionProps {\n\n                                                                                                                                                                                                                                      \n    readonly scheduledActionName: string;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    readonly enable?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                           \n    readonly endTime?: string;\n\nn    readonly iamRole?: string;\n\nn    readonly schedule?: string;\n\n                                                                                                                                                                                                                                                    \n    readonly scheduledActionDescription?: string;\n\n                                                                                                                                                                                                                                                                                                      \n    readonly startTime?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly targetAction?: CfnScheduledAction.ScheduledActionTypeProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnScheduledActionProps`\n *\n * @param properties - the TypeScript properties of a `CfnScheduledActionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledActionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enable', cdk.validateBoolean)(properties.enable));\n    errors.collect(cdk.propertyValidator('endTime', cdk.validateString)(properties.endTime));\n    errors.collect(cdk.propertyValidator('iamRole', cdk.validateString)(properties.iamRole));\n    errors.collect(cdk.propertyValidator('schedule', cdk.validateString)(properties.schedule));\n    errors.collect(cdk.propertyValidator('scheduledActionDescription', cdk.validateString)(properties.scheduledActionDescription));\n    errors.collect(cdk.propertyValidator('scheduledActionName', cdk.requiredValidator)(properties.scheduledActionName));\n    errors.collect(cdk.propertyValidator('scheduledActionName', cdk.validateString)(properties.scheduledActionName));\n    errors.collect(cdk.propertyValidator('startTime', cdk.validateString)(properties.startTime));\n    errors.collect(cdk.propertyValidator('targetAction', CfnScheduledAction_ScheduledActionTypePropertyValidator)(properties.targetAction));\n    return errors.wrap('supplied properties not correct for \"CfnScheduledActionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::ScheduledAction` resource\n *\n * @param properties - the TypeScript properties of a `CfnScheduledActionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::ScheduledAction` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledActionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledActionPropsValidator(properties).assertSuccess();\n    return {\n        ScheduledActionName: cdk.stringToCloudFormation(properties.scheduledActionName),\n        Enable: cdk.booleanToCloudFormation(properties.enable),\n        EndTime: cdk.stringToCloudFormation(properties.endTime),\n        IamRole: cdk.stringToCloudFormation(properties.iamRole),\n        Schedule: cdk.stringToCloudFormation(properties.schedule),\n        ScheduledActionDescription: cdk.stringToCloudFormation(properties.scheduledActionDescription),\n        StartTime: cdk.stringToCloudFormation(properties.startTime),\n        TargetAction: cfnScheduledActionScheduledActionTypePropertyToCloudFormation(properties.targetAction),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledActionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledActionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledActionProps>();\n    ret.addPropertyResult('scheduledActionName', 'ScheduledActionName', cfn_parse.FromCloudFormation.getString(properties.ScheduledActionName));\n    ret.addPropertyResult('enable', 'Enable', properties.Enable != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enable) : undefined);\n    ret.addPropertyResult('endTime', 'EndTime', properties.EndTime != null ? cfn_parse.FromCloudFormation.getString(properties.EndTime) : undefined);\n    ret.addPropertyResult('iamRole', 'IamRole', properties.IamRole != null ? cfn_parse.FromCloudFormation.getString(properties.IamRole) : undefined);\n    ret.addPropertyResult('schedule', 'Schedule', properties.Schedule != null ? cfn_parse.FromCloudFormation.getString(properties.Schedule) : undefined);\n    ret.addPropertyResult('scheduledActionDescription', 'ScheduledActionDescription', properties.ScheduledActionDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ScheduledActionDescription) : undefined);\n    ret.addPropertyResult('startTime', 'StartTime', properties.StartTime != null ? cfn_parse.FromCloudFormation.getString(properties.StartTime) : undefined);\n    ret.addPropertyResult('targetAction', 'TargetAction', properties.TargetAction != null ? CfnScheduledActionScheduledActionTypePropertyFromCloudFormation(properties.TargetAction) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \nexport class CfnScheduledAction extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Redshift::ScheduledAction\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnScheduledAction {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnScheduledActionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnScheduledAction(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                        \n    public readonly attrNextInvocations: string[];\n\n                                                                                                                         \n    public readonly attrState: string;\n\n                                                                                                                                                                                                                                      \n    public scheduledActionName: string;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    public enable: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                           \n    public endTime: string | undefined;\n\nn    public iamRole: string | undefined;\n\nn    public schedule: string | undefined;\n\n                                                                                                                                                                                                                                                    \n    public scheduledActionDescription: string | undefined;\n\n                                                                                                                                                                                                                                                                                                      \n    public startTime: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public targetAction: CfnScheduledAction.ScheduledActionTypeProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnScheduledActionProps) {\n        super(scope, id, { type: CfnScheduledAction.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'scheduledActionName', this);\n        this.attrNextInvocations = cdk.Token.asList(this.getAtt('NextInvocations'));\n        this.attrState = cdk.Token.asString(this.getAtt('State'));\n\n        this.scheduledActionName = props.scheduledActionName;\n        this.enable = props.enable;\n        this.endTime = props.endTime;\n        this.iamRole = props.iamRole;\n        this.schedule = props.schedule;\n        this.scheduledActionDescription = props.scheduledActionDescription;\n        this.startTime = props.startTime;\n        this.targetAction = props.targetAction;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnScheduledAction.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            scheduledActionName: this.scheduledActionName,\n            enable: this.enable,\n            endTime: this.endTime,\n            iamRole: this.iamRole,\n            schedule: this.schedule,\n            scheduledActionDescription: this.scheduledActionDescription,\n            startTime: this.startTime,\n            targetAction: this.targetAction,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnScheduledActionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnScheduledAction {\n                                                                                                                                                                                                                                                                                                                                        \n    export interface PauseClusterMessageProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly clusterIdentifier: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PauseClusterMessageProperty`\n *\n * @param properties - the TypeScript properties of a `PauseClusterMessageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledAction_PauseClusterMessagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterIdentifier', cdk.requiredValidator)(properties.clusterIdentifier));\n    errors.collect(cdk.propertyValidator('clusterIdentifier', cdk.validateString)(properties.clusterIdentifier));\n    return errors.wrap('supplied properties not correct for \"PauseClusterMessageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::ScheduledAction.PauseClusterMessage` resource\n *\n * @param properties - the TypeScript properties of a `PauseClusterMessageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::ScheduledAction.PauseClusterMessage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledActionPauseClusterMessagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledAction_PauseClusterMessagePropertyValidator(properties).assertSuccess();\n    return {\n        ClusterIdentifier: cdk.stringToCloudFormation(properties.clusterIdentifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledActionPauseClusterMessagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledAction.PauseClusterMessageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledAction.PauseClusterMessageProperty>();\n    ret.addPropertyResult('clusterIdentifier', 'ClusterIdentifier', cfn_parse.FromCloudFormation.getString(properties.ClusterIdentifier));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnScheduledAction {\n                                                                                                                                                                                                                                                                                                                                           \n    export interface ResizeClusterMessageProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly classic?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                   \n        readonly clusterIdentifier: string;\n                                                                                                                                                                                                                                                                                                            \n        readonly clusterType?: string;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly nodeType?: string;\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly numberOfNodes?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResizeClusterMessageProperty`\n *\n * @param properties - the TypeScript properties of a `ResizeClusterMessageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledAction_ResizeClusterMessagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('classic', cdk.validateBoolean)(properties.classic));\n    errors.collect(cdk.propertyValidator('clusterIdentifier', cdk.requiredValidator)(properties.clusterIdentifier));\n    errors.collect(cdk.propertyValidator('clusterIdentifier', cdk.validateString)(properties.clusterIdentifier));\n    errors.collect(cdk.propertyValidator('clusterType', cdk.validateString)(properties.clusterType));\n    errors.collect(cdk.propertyValidator('nodeType', cdk.validateString)(properties.nodeType));\n    errors.collect(cdk.propertyValidator('numberOfNodes', cdk.validateNumber)(properties.numberOfNodes));\n    return errors.wrap('supplied properties not correct for \"ResizeClusterMessageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::ScheduledAction.ResizeClusterMessage` resource\n *\n * @param properties - the TypeScript properties of a `ResizeClusterMessageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::ScheduledAction.ResizeClusterMessage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledActionResizeClusterMessagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledAction_ResizeClusterMessagePropertyValidator(properties).assertSuccess();\n    return {\n        Classic: cdk.booleanToCloudFormation(properties.classic),\n        ClusterIdentifier: cdk.stringToCloudFormation(properties.clusterIdentifier),\n        ClusterType: cdk.stringToCloudFormation(properties.clusterType),\n        NodeType: cdk.stringToCloudFormation(properties.nodeType),\n        NumberOfNodes: cdk.numberToCloudFormation(properties.numberOfNodes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledActionResizeClusterMessagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledAction.ResizeClusterMessageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledAction.ResizeClusterMessageProperty>();\n    ret.addPropertyResult('classic', 'Classic', properties.Classic != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Classic) : undefined);\n    ret.addPropertyResult('clusterIdentifier', 'ClusterIdentifier', cfn_parse.FromCloudFormation.getString(properties.ClusterIdentifier));\n    ret.addPropertyResult('clusterType', 'ClusterType', properties.ClusterType != null ? cfn_parse.FromCloudFormation.getString(properties.ClusterType) : undefined);\n    ret.addPropertyResult('nodeType', 'NodeType', properties.NodeType != null ? cfn_parse.FromCloudFormation.getString(properties.NodeType) : undefined);\n    ret.addPropertyResult('numberOfNodes', 'NumberOfNodes', properties.NumberOfNodes != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumberOfNodes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnScheduledAction {\n                                                                                                                                                                                                                                                                                                                                           \n    export interface ResumeClusterMessageProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly clusterIdentifier: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResumeClusterMessageProperty`\n *\n * @param properties - the TypeScript properties of a `ResumeClusterMessageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledAction_ResumeClusterMessagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterIdentifier', cdk.requiredValidator)(properties.clusterIdentifier));\n    errors.collect(cdk.propertyValidator('clusterIdentifier', cdk.validateString)(properties.clusterIdentifier));\n    return errors.wrap('supplied properties not correct for \"ResumeClusterMessageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::ScheduledAction.ResumeClusterMessage` resource\n *\n * @param properties - the TypeScript properties of a `ResumeClusterMessageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::ScheduledAction.ResumeClusterMessage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledActionResumeClusterMessagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledAction_ResumeClusterMessagePropertyValidator(properties).assertSuccess();\n    return {\n        ClusterIdentifier: cdk.stringToCloudFormation(properties.clusterIdentifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledActionResumeClusterMessagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledAction.ResumeClusterMessageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledAction.ResumeClusterMessageProperty>();\n    ret.addPropertyResult('clusterIdentifier', 'ClusterIdentifier', cfn_parse.FromCloudFormation.getString(properties.ClusterIdentifier));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnScheduledAction {\n                                                                                                                                                                                                                                                                                                                                              \n    export interface ScheduledActionTypeProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly pauseCluster?: CfnScheduledAction.PauseClusterMessageProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly resizeCluster?: CfnScheduledAction.ResizeClusterMessageProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly resumeCluster?: CfnScheduledAction.ResumeClusterMessageProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ScheduledActionTypeProperty`\n *\n * @param properties - the TypeScript properties of a `ScheduledActionTypeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledAction_ScheduledActionTypePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('pauseCluster', CfnScheduledAction_PauseClusterMessagePropertyValidator)(properties.pauseCluster));\n    errors.collect(cdk.propertyValidator('resizeCluster', CfnScheduledAction_ResizeClusterMessagePropertyValidator)(properties.resizeCluster));\n    errors.collect(cdk.propertyValidator('resumeCluster', CfnScheduledAction_ResumeClusterMessagePropertyValidator)(properties.resumeCluster));\n    return errors.wrap('supplied properties not correct for \"ScheduledActionTypeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Redshift::ScheduledAction.ScheduledActionType` resource\n *\n * @param properties - the TypeScript properties of a `ScheduledActionTypeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Redshift::ScheduledAction.ScheduledActionType` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledActionScheduledActionTypePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledAction_ScheduledActionTypePropertyValidator(properties).assertSuccess();\n    return {\n        PauseCluster: cfnScheduledActionPauseClusterMessagePropertyToCloudFormation(properties.pauseCluster),\n        ResizeCluster: cfnScheduledActionResizeClusterMessagePropertyToCloudFormation(properties.resizeCluster),\n        ResumeCluster: cfnScheduledActionResumeClusterMessagePropertyToCloudFormation(properties.resumeCluster),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledActionScheduledActionTypePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledAction.ScheduledActionTypeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledAction.ScheduledActionTypeProperty>();\n    ret.addPropertyResult('pauseCluster', 'PauseCluster', properties.PauseCluster != null ? CfnScheduledActionPauseClusterMessagePropertyFromCloudFormation(properties.PauseCluster) : undefined);\n    ret.addPropertyResult('resizeCluster', 'ResizeCluster', properties.ResizeCluster != null ? CfnScheduledActionResizeClusterMessagePropertyFromCloudFormation(properties.ResizeCluster) : undefined);\n    ret.addPropertyResult('resumeCluster', 'ResumeCluster', properties.ResumeCluster != null ? CfnScheduledActionResumeClusterMessagePropertyFromCloudFormation(properties.ResumeCluster) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
