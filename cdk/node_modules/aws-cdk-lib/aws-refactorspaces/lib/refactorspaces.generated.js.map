{
  "version": 3,
  "sources": ["refactorspaces.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:33.251Z\",\"fingerprint\":\"YzO7fvlVTcY77RIYXzouh59d3mLOEqDF2nDTkt5sD3M=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                 \nexport interface CfnApplicationProps {\n\n                                                                                                                                                                                                                                                      \n    readonly apiGatewayProxy?: CfnApplication.ApiGatewayProxyInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                    \n    readonly environmentIdentifier?: string;\n\n                                                                                                                                                                                                                      \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                          \n    readonly proxyType?: string;\n\n                                                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                     \n    readonly vpcId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApplicationProps`\n *\n * @param properties - the TypeScript properties of a `CfnApplicationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('apiGatewayProxy', CfnApplication_ApiGatewayProxyInputPropertyValidator)(properties.apiGatewayProxy));\n    errors.collect(cdk.propertyValidator('environmentIdentifier', cdk.validateString)(properties.environmentIdentifier));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('proxyType', cdk.validateString)(properties.proxyType));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnApplicationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::RefactorSpaces::Application` resource\n *\n * @param properties - the TypeScript properties of a `CfnApplicationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::RefactorSpaces::Application` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationPropsValidator(properties).assertSuccess();\n    return {\n        ApiGatewayProxy: cfnApplicationApiGatewayProxyInputPropertyToCloudFormation(properties.apiGatewayProxy),\n        EnvironmentIdentifier: cdk.stringToCloudFormation(properties.environmentIdentifier),\n        Name: cdk.stringToCloudFormation(properties.name),\n        ProxyType: cdk.stringToCloudFormation(properties.proxyType),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationProps>();\n    ret.addPropertyResult('apiGatewayProxy', 'ApiGatewayProxy', properties.ApiGatewayProxy != null ? CfnApplicationApiGatewayProxyInputPropertyFromCloudFormation(properties.ApiGatewayProxy) : undefined);\n    ret.addPropertyResult('environmentIdentifier', 'EnvironmentIdentifier', properties.EnvironmentIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.EnvironmentIdentifier) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('proxyType', 'ProxyType', properties.ProxyType != null ? cfn_parse.FromCloudFormation.getString(properties.ProxyType) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('vpcId', 'VpcId', properties.VpcId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnApplication extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::RefactorSpaces::Application\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApplication {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApplicationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApplication(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                     \n    public readonly attrApiGatewayId: string;\n\n                                                                                                                      \n    public readonly attrApplicationIdentifier: string;\n\n                                                                                                             \n    public readonly attrArn: string;\n\n                                                                                                                           \n    public readonly attrNlbArn: string;\n\n                                                                                                                                         \n    public readonly attrNlbName: string;\n\n                                                                                                                 \n    public readonly attrProxyUrl: string;\n\n                                                                                                                                 \n    public readonly attrStageName: string;\n\n                                                                                                           \n    public readonly attrVpcLinkId: string;\n\n                                                                                                                                                                                                                                                      \n    public apiGatewayProxy: CfnApplication.ApiGatewayProxyInputProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                    \n    public environmentIdentifier: string | undefined;\n\n                                                                                                                                                                                                                      \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                          \n    public proxyType: string | undefined;\n\n                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                     \n    public vpcId: string | undefined;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnApplicationProps = {}) {\n        super(scope, id, { type: CfnApplication.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrApiGatewayId = cdk.Token.asString(this.getAtt('ApiGatewayId'));\n        this.attrApplicationIdentifier = cdk.Token.asString(this.getAtt('ApplicationIdentifier'));\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrNlbArn = cdk.Token.asString(this.getAtt('NlbArn'));\n        this.attrNlbName = cdk.Token.asString(this.getAtt('NlbName'));\n        this.attrProxyUrl = cdk.Token.asString(this.getAtt('ProxyUrl'));\n        this.attrStageName = cdk.Token.asString(this.getAtt('StageName'));\n        this.attrVpcLinkId = cdk.Token.asString(this.getAtt('VpcLinkId'));\n\n        this.apiGatewayProxy = props.apiGatewayProxy;\n        this.environmentIdentifier = props.environmentIdentifier;\n        this.name = props.name;\n        this.proxyType = props.proxyType;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::RefactorSpaces::Application\", props.tags, { tagPropertyName: 'tags' });\n        this.vpcId = props.vpcId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApplication.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            apiGatewayProxy: this.apiGatewayProxy,\n            environmentIdentifier: this.environmentIdentifier,\n            name: this.name,\n            proxyType: this.proxyType,\n            tags: this.tags.renderTags(),\n            vpcId: this.vpcId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApplicationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnApplication {\n                                                                                                                                                                                                                                                                                             \n    export interface ApiGatewayProxyInputProperty {\nn        readonly endpointType?: string;\n                                                                                                                                                                                                                                                                                                                               \n        readonly stageName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ApiGatewayProxyInputProperty`\n *\n * @param properties - the TypeScript properties of a `ApiGatewayProxyInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplication_ApiGatewayProxyInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointType', cdk.validateString)(properties.endpointType));\n    errors.collect(cdk.propertyValidator('stageName', cdk.validateString)(properties.stageName));\n    return errors.wrap('supplied properties not correct for \"ApiGatewayProxyInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::RefactorSpaces::Application.ApiGatewayProxyInput` resource\n *\n * @param properties - the TypeScript properties of a `ApiGatewayProxyInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::RefactorSpaces::Application.ApiGatewayProxyInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationApiGatewayProxyInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplication_ApiGatewayProxyInputPropertyValidator(properties).assertSuccess();\n    return {\n        EndpointType: cdk.stringToCloudFormation(properties.endpointType),\n        StageName: cdk.stringToCloudFormation(properties.stageName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationApiGatewayProxyInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplication.ApiGatewayProxyInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplication.ApiGatewayProxyInputProperty>();\n    ret.addPropertyResult('endpointType', 'EndpointType', properties.EndpointType != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointType) : undefined);\n    ret.addPropertyResult('stageName', 'StageName', properties.StageName != null ? cfn_parse.FromCloudFormation.getString(properties.StageName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                 \nexport interface CfnEnvironmentProps {\n\n                                                                                                                                                                                                                                  \n    readonly description?: string;\n\n                                                                                                                                                                                                                      \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                  \n    readonly networkFabricType?: string;\n\n                                                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEnvironmentProps`\n *\n * @param properties - the TypeScript properties of a `CfnEnvironmentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEnvironmentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('networkFabricType', cdk.validateString)(properties.networkFabricType));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnEnvironmentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::RefactorSpaces::Environment` resource\n *\n * @param properties - the TypeScript properties of a `CfnEnvironmentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::RefactorSpaces::Environment` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEnvironmentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEnvironmentPropsValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        Name: cdk.stringToCloudFormation(properties.name),\n        NetworkFabricType: cdk.stringToCloudFormation(properties.networkFabricType),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEnvironmentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEnvironmentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEnvironmentProps>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('networkFabricType', 'NetworkFabricType', properties.NetworkFabricType != null ? cfn_parse.FromCloudFormation.getString(properties.NetworkFabricType) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnEnvironment extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::RefactorSpaces::Environment\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEnvironment {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEnvironmentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEnvironment(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                             \n    public readonly attrArn: string;\n\n                                                                                                                      \n    public readonly attrEnvironmentIdentifier: string;\n\n                                                                                                                                    \n    public readonly attrTransitGatewayId: string;\n\n                                                                                                                                                                                                                                  \n    public description: string | undefined;\n\n                                                                                                                                                                                                                      \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                  \n    public networkFabricType: string | undefined;\n\n                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnEnvironmentProps = {}) {\n        super(scope, id, { type: CfnEnvironment.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrEnvironmentIdentifier = cdk.Token.asString(this.getAtt('EnvironmentIdentifier'));\n        this.attrTransitGatewayId = cdk.Token.asString(this.getAtt('TransitGatewayId'));\n\n        this.description = props.description;\n        this.name = props.name;\n        this.networkFabricType = props.networkFabricType;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::RefactorSpaces::Environment\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEnvironment.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            description: this.description,\n            name: this.name,\n            networkFabricType: this.networkFabricType,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEnvironmentPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                     \nexport interface CfnRouteProps {\n\n                                                                                                                                                                                                                                        \n    readonly applicationIdentifier: string;\n\n                                                                                                                                                                                                                                        \n    readonly environmentIdentifier: string;\n\n                                                                                                                                                                                                                                \n    readonly serviceIdentifier: string;\n\n                                                                                                                                                                                                               \n    readonly routeType?: string;\n\n                                                                                                                                                                                                             \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                    \n    readonly uriPathRoute?: CfnRoute.UriPathRouteInputProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRouteProps`\n *\n * @param properties - the TypeScript properties of a `CfnRouteProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRoutePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applicationIdentifier', cdk.requiredValidator)(properties.applicationIdentifier));\n    errors.collect(cdk.propertyValidator('applicationIdentifier', cdk.validateString)(properties.applicationIdentifier));\n    errors.collect(cdk.propertyValidator('environmentIdentifier', cdk.requiredValidator)(properties.environmentIdentifier));\n    errors.collect(cdk.propertyValidator('environmentIdentifier', cdk.validateString)(properties.environmentIdentifier));\n    errors.collect(cdk.propertyValidator('routeType', cdk.validateString)(properties.routeType));\n    errors.collect(cdk.propertyValidator('serviceIdentifier', cdk.requiredValidator)(properties.serviceIdentifier));\n    errors.collect(cdk.propertyValidator('serviceIdentifier', cdk.validateString)(properties.serviceIdentifier));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('uriPathRoute', CfnRoute_UriPathRouteInputPropertyValidator)(properties.uriPathRoute));\n    return errors.wrap('supplied properties not correct for \"CfnRouteProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::RefactorSpaces::Route` resource\n *\n * @param properties - the TypeScript properties of a `CfnRouteProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::RefactorSpaces::Route` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRoutePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRoutePropsValidator(properties).assertSuccess();\n    return {\n        ApplicationIdentifier: cdk.stringToCloudFormation(properties.applicationIdentifier),\n        EnvironmentIdentifier: cdk.stringToCloudFormation(properties.environmentIdentifier),\n        ServiceIdentifier: cdk.stringToCloudFormation(properties.serviceIdentifier),\n        RouteType: cdk.stringToCloudFormation(properties.routeType),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        UriPathRoute: cfnRouteUriPathRouteInputPropertyToCloudFormation(properties.uriPathRoute),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRoutePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRouteProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRouteProps>();\n    ret.addPropertyResult('applicationIdentifier', 'ApplicationIdentifier', cfn_parse.FromCloudFormation.getString(properties.ApplicationIdentifier));\n    ret.addPropertyResult('environmentIdentifier', 'EnvironmentIdentifier', cfn_parse.FromCloudFormation.getString(properties.EnvironmentIdentifier));\n    ret.addPropertyResult('serviceIdentifier', 'ServiceIdentifier', cfn_parse.FromCloudFormation.getString(properties.ServiceIdentifier));\n    ret.addPropertyResult('routeType', 'RouteType', properties.RouteType != null ? cfn_parse.FromCloudFormation.getString(properties.RouteType) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('uriPathRoute', 'UriPathRoute', properties.UriPathRoute != null ? CfnRouteUriPathRouteInputPropertyFromCloudFormation(properties.UriPathRoute) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnRoute extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::RefactorSpaces::Route\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRoute {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRoutePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRoute(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                       \n    public readonly attrArn: string;\n\n                                                                                                                                       \n    public readonly attrPathResourceToId: string;\n\n                                                                                                          \n    public readonly attrRouteIdentifier: string;\n\n                                                                                                                                                                                                                                        \n    public applicationIdentifier: string;\n\n                                                                                                                                                                                                                                        \n    public environmentIdentifier: string;\n\n                                                                                                                                                                                                                                \n    public serviceIdentifier: string;\n\n                                                                                                                                                                                                               \n    public routeType: string | undefined;\n\n                                                                                                                                                                                                             \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                    \n    public uriPathRoute: CfnRoute.UriPathRouteInputProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnRouteProps) {\n        super(scope, id, { type: CfnRoute.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'applicationIdentifier', this);\n        cdk.requireProperty(props, 'environmentIdentifier', this);\n        cdk.requireProperty(props, 'serviceIdentifier', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrPathResourceToId = cdk.Token.asString(this.getAtt('PathResourceToId'));\n        this.attrRouteIdentifier = cdk.Token.asString(this.getAtt('RouteIdentifier'));\n\n        this.applicationIdentifier = props.applicationIdentifier;\n        this.environmentIdentifier = props.environmentIdentifier;\n        this.serviceIdentifier = props.serviceIdentifier;\n        this.routeType = props.routeType;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::RefactorSpaces::Route\", props.tags, { tagPropertyName: 'tags' });\n        this.uriPathRoute = props.uriPathRoute;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRoute.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            applicationIdentifier: this.applicationIdentifier,\n            environmentIdentifier: this.environmentIdentifier,\n            serviceIdentifier: this.serviceIdentifier,\n            routeType: this.routeType,\n            tags: this.tags.renderTags(),\n            uriPathRoute: this.uriPathRoute,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRoutePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnRoute {\n                                                                                                                                                                                                                                                                   \n    export interface UriPathRouteInputProperty {\n                                                                                                                                                                                                                                                                                                                                             \n        readonly activationState: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly includeChildPaths?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly methods?: string[];\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly sourcePath?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UriPathRouteInputProperty`\n *\n * @param properties - the TypeScript properties of a `UriPathRouteInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRoute_UriPathRouteInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('activationState', cdk.requiredValidator)(properties.activationState));\n    errors.collect(cdk.propertyValidator('activationState', cdk.validateString)(properties.activationState));\n    errors.collect(cdk.propertyValidator('includeChildPaths', cdk.validateBoolean)(properties.includeChildPaths));\n    errors.collect(cdk.propertyValidator('methods', cdk.listValidator(cdk.validateString))(properties.methods));\n    errors.collect(cdk.propertyValidator('sourcePath', cdk.validateString)(properties.sourcePath));\n    return errors.wrap('supplied properties not correct for \"UriPathRouteInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::RefactorSpaces::Route.UriPathRouteInput` resource\n *\n * @param properties - the TypeScript properties of a `UriPathRouteInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::RefactorSpaces::Route.UriPathRouteInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRouteUriPathRouteInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRoute_UriPathRouteInputPropertyValidator(properties).assertSuccess();\n    return {\n        ActivationState: cdk.stringToCloudFormation(properties.activationState),\n        IncludeChildPaths: cdk.booleanToCloudFormation(properties.includeChildPaths),\n        Methods: cdk.listMapper(cdk.stringToCloudFormation)(properties.methods),\n        SourcePath: cdk.stringToCloudFormation(properties.sourcePath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRouteUriPathRouteInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRoute.UriPathRouteInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRoute.UriPathRouteInputProperty>();\n    ret.addPropertyResult('activationState', 'ActivationState', cfn_parse.FromCloudFormation.getString(properties.ActivationState));\n    ret.addPropertyResult('includeChildPaths', 'IncludeChildPaths', properties.IncludeChildPaths != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeChildPaths) : undefined);\n    ret.addPropertyResult('methods', 'Methods', properties.Methods != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Methods) : undefined);\n    ret.addPropertyResult('sourcePath', 'SourcePath', properties.SourcePath != null ? cfn_parse.FromCloudFormation.getString(properties.SourcePath) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                         \nexport interface CfnServiceProps {\n\n                                                                                                                                                                                                                                            \n    readonly applicationIdentifier: string;\n\n                                                                                                                                                                                                                                            \n    readonly environmentIdentifier: string;\n\n                                                                                                                                                                                                                      \n    readonly description?: string;\n\n                                                                                                                                                                                                                           \n    readonly endpointType?: string;\n\n                                                                                                                                                                                                                                                            \n    readonly lambdaEndpoint?: CfnService.LambdaEndpointInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                          \n    readonly name?: string;\n\n                                                                                                                                                                                                                   \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                    \n    readonly urlEndpoint?: CfnService.UrlEndpointInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                             \n    readonly vpcId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnServiceProps`\n *\n * @param properties - the TypeScript properties of a `CfnServiceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnServicePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applicationIdentifier', cdk.requiredValidator)(properties.applicationIdentifier));\n    errors.collect(cdk.propertyValidator('applicationIdentifier', cdk.validateString)(properties.applicationIdentifier));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('endpointType', cdk.validateString)(properties.endpointType));\n    errors.collect(cdk.propertyValidator('environmentIdentifier', cdk.requiredValidator)(properties.environmentIdentifier));\n    errors.collect(cdk.propertyValidator('environmentIdentifier', cdk.validateString)(properties.environmentIdentifier));\n    errors.collect(cdk.propertyValidator('lambdaEndpoint', CfnService_LambdaEndpointInputPropertyValidator)(properties.lambdaEndpoint));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('urlEndpoint', CfnService_UrlEndpointInputPropertyValidator)(properties.urlEndpoint));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnServiceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::RefactorSpaces::Service` resource\n *\n * @param properties - the TypeScript properties of a `CfnServiceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::RefactorSpaces::Service` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServicePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnServicePropsValidator(properties).assertSuccess();\n    return {\n        ApplicationIdentifier: cdk.stringToCloudFormation(properties.applicationIdentifier),\n        EnvironmentIdentifier: cdk.stringToCloudFormation(properties.environmentIdentifier),\n        Description: cdk.stringToCloudFormation(properties.description),\n        EndpointType: cdk.stringToCloudFormation(properties.endpointType),\n        LambdaEndpoint: cfnServiceLambdaEndpointInputPropertyToCloudFormation(properties.lambdaEndpoint),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        UrlEndpoint: cfnServiceUrlEndpointInputPropertyToCloudFormation(properties.urlEndpoint),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServicePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnServiceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnServiceProps>();\n    ret.addPropertyResult('applicationIdentifier', 'ApplicationIdentifier', cfn_parse.FromCloudFormation.getString(properties.ApplicationIdentifier));\n    ret.addPropertyResult('environmentIdentifier', 'EnvironmentIdentifier', cfn_parse.FromCloudFormation.getString(properties.EnvironmentIdentifier));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('endpointType', 'EndpointType', properties.EndpointType != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointType) : undefined);\n    ret.addPropertyResult('lambdaEndpoint', 'LambdaEndpoint', properties.LambdaEndpoint != null ? CfnServiceLambdaEndpointInputPropertyFromCloudFormation(properties.LambdaEndpoint) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('urlEndpoint', 'UrlEndpoint', properties.UrlEndpoint != null ? CfnServiceUrlEndpointInputPropertyFromCloudFormation(properties.UrlEndpoint) : undefined);\n    ret.addPropertyResult('vpcId', 'VpcId', properties.VpcId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnService extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::RefactorSpaces::Service\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnService {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnServicePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnService(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                         \n    public readonly attrArn: string;\n\n                                                                                                              \n    public readonly attrServiceIdentifier: string;\n\n                                                                                                                                                                                                                                            \n    public applicationIdentifier: string;\n\n                                                                                                                                                                                                                                            \n    public environmentIdentifier: string;\n\n                                                                                                                                                                                                                      \n    public description: string | undefined;\n\n                                                                                                                                                                                                                           \n    public endpointType: string | undefined;\n\n                                                                                                                                                                                                                                                            \n    public lambdaEndpoint: CfnService.LambdaEndpointInputProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                          \n    public name: string | undefined;\n\n                                                                                                                                                                                                                   \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                    \n    public urlEndpoint: CfnService.UrlEndpointInputProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    public vpcId: string | undefined;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnServiceProps) {\n        super(scope, id, { type: CfnService.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'applicationIdentifier', this);\n        cdk.requireProperty(props, 'environmentIdentifier', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrServiceIdentifier = cdk.Token.asString(this.getAtt('ServiceIdentifier'));\n\n        this.applicationIdentifier = props.applicationIdentifier;\n        this.environmentIdentifier = props.environmentIdentifier;\n        this.description = props.description;\n        this.endpointType = props.endpointType;\n        this.lambdaEndpoint = props.lambdaEndpoint;\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::RefactorSpaces::Service\", props.tags, { tagPropertyName: 'tags' });\n        this.urlEndpoint = props.urlEndpoint;\n        this.vpcId = props.vpcId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnService.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            applicationIdentifier: this.applicationIdentifier,\n            environmentIdentifier: this.environmentIdentifier,\n            description: this.description,\n            endpointType: this.endpointType,\n            lambdaEndpoint: this.lambdaEndpoint,\n            name: this.name,\n            tags: this.tags.renderTags(),\n            urlEndpoint: this.urlEndpoint,\n            vpcId: this.vpcId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnServicePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                    \n    export interface LambdaEndpointInputProperty {\n                                                                                                                                                                                                                                                                                                     \n        readonly arn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaEndpointInputProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaEndpointInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_LambdaEndpointInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    return errors.wrap('supplied properties not correct for \"LambdaEndpointInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::RefactorSpaces::Service.LambdaEndpointInput` resource\n *\n * @param properties - the TypeScript properties of a `LambdaEndpointInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::RefactorSpaces::Service.LambdaEndpointInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceLambdaEndpointInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_LambdaEndpointInputPropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceLambdaEndpointInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.LambdaEndpointInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.LambdaEndpointInputProperty>();\n    ret.addPropertyResult('arn', 'Arn', cfn_parse.FromCloudFormation.getString(properties.Arn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnService {\n                                                                                                                                                                                                                                                                  \n    export interface UrlEndpointInputProperty {\nn        readonly healthUrl?: string;\nn        readonly url: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UrlEndpointInputProperty`\n *\n * @param properties - the TypeScript properties of a `UrlEndpointInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnService_UrlEndpointInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('healthUrl', cdk.validateString)(properties.healthUrl));\n    errors.collect(cdk.propertyValidator('url', cdk.requiredValidator)(properties.url));\n    errors.collect(cdk.propertyValidator('url', cdk.validateString)(properties.url));\n    return errors.wrap('supplied properties not correct for \"UrlEndpointInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::RefactorSpaces::Service.UrlEndpointInput` resource\n *\n * @param properties - the TypeScript properties of a `UrlEndpointInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::RefactorSpaces::Service.UrlEndpointInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServiceUrlEndpointInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnService_UrlEndpointInputPropertyValidator(properties).assertSuccess();\n    return {\n        HealthUrl: cdk.stringToCloudFormation(properties.healthUrl),\n        Url: cdk.stringToCloudFormation(properties.url),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServiceUrlEndpointInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnService.UrlEndpointInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnService.UrlEndpointInputProperty>();\n    ret.addPropertyResult('healthUrl', 'HealthUrl', properties.HealthUrl != null ? cfn_parse.FromCloudFormation.getString(properties.HealthUrl) : undefined);\n    ret.addPropertyResult('url', 'Url', cfn_parse.FromCloudFormation.getString(properties.Url));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
