{
  "version": 3,
  "sources": ["hosted-zone.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as iam from '../../aws-iam';\nimport * as cxschema from '../../cloud-assembly-schema';\nimport { ContextProvider, Duration, Lazy, Resource, Stack } from '../../core';\nimport { Construct } from 'constructs';\nimport { HostedZoneProviderProps } from './hosted-zone-provider';\nimport { HostedZoneAttributes, IHostedZone } from './hosted-zone-ref';\nimport { CaaAmazonRecord, ZoneDelegationRecord } from './record-set';\nimport { CfnHostedZone } from './route53.generated';\nimport { makeHostedZoneArn, validateZoneName } from './util';\n\n                                                             \nexport interface CommonHostedZoneProps {\n                                                                                                                                          \n  readonly zoneName: string;\n\n                                                                                                     \n  readonly comment?: string;\n\n                                                                                                                                                  \n  readonly queryLogsLogGroupArn?: string;\n}\n\n                                          \nexport interface HostedZoneProps extends CommonHostedZoneProps {\n                                                                                                                                                                                                                                                                                         \n  readonly vpcs?: ec2.IVpc[];\n}\n\n                                                                                                                                                                                                    \nexport class HostedZone extends Resource implements IHostedZone {\n  public get hostedZoneArn(): string {\n    return makeHostedZoneArn(this, this.hostedZoneId);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                              \n  public static fromHostedZoneId(scope: Construct, id: string, hostedZoneId: string): IHostedZone {\n    class Import extends Resource implements IHostedZone {\n      public readonly hostedZoneId = hostedZoneId;\n      public get zoneName(): string {\n        throw new Error('HostedZone.fromHostedZoneId doesn\\'t support \"zoneName\"');\n      }\n      public get hostedZoneArn(): string {\n        return makeHostedZoneArn(this, this.hostedZoneId);\n      }\n    }\n\n    return new Import(scope, id);\n  }\n\n                                                                                                                                                                                                                                                                                                                                    \n  public static fromHostedZoneAttributes(scope: Construct, id: string, attrs: HostedZoneAttributes): IHostedZone {\n    class Import extends Resource implements IHostedZone {\n      public readonly hostedZoneId = attrs.hostedZoneId;\n      public readonly zoneName = attrs.zoneName;\n      public get hostedZoneArn(): string {\n        return makeHostedZoneArn(this, this.hostedZoneId);\n      }\n    }\n\n    return new Import(scope, id);\n  }\n\n                                                                                                                                                                                                                                                                                       \n  public static fromLookup(scope: Construct, id: string, query: HostedZoneProviderProps): IHostedZone {\n    const DEFAULT_HOSTED_ZONE: HostedZoneContextResponse = {\n      Id: 'DUMMY',\n      Name: query.domainName,\n    };\n\n    interface HostedZoneContextResponse {\n      Id: string;\n      Name: string;\n    }\n\n    const response: HostedZoneContextResponse = ContextProvider.getValue(scope, {\n      provider: cxschema.ContextProvider.HOSTED_ZONE_PROVIDER,\n      dummyValue: DEFAULT_HOSTED_ZONE,\n      props: query,\n    }).value;\n\n    // CDK handles the '.' at the end, so remove it here\n    if (response.Name.endsWith('.')) {\n      response.Name = response.Name.substring(0, response.Name.length - 1);\n    }\n\n    response.Id = response.Id.replace('/hostedzone/', '');\n\n    return HostedZone.fromHostedZoneAttributes(scope, id, {\n      hostedZoneId: response.Id,\n      zoneName: response.Name,\n    });\n  }\n\n  public readonly hostedZoneId: string;\n  public readonly zoneName: string;\n  public readonly hostedZoneNameServers?: string[];\n\n                                                             \n  protected readonly vpcs = new Array<CfnHostedZone.VPCProperty>();\n\n  constructor(scope: Construct, id: string, props: HostedZoneProps) {\n    super(scope, id);\n\n    validateZoneName(props.zoneName);\n\n    const resource = new CfnHostedZone(this, 'Resource', {\n      name: props.zoneName + '.',\n      hostedZoneConfig: props.comment ? { comment: props.comment } : undefined,\n      queryLoggingConfig: props.queryLogsLogGroupArn ? { cloudWatchLogsLogGroupArn: props.queryLogsLogGroupArn } : undefined,\n      vpcs: Lazy.any({ produce: () => this.vpcs.length === 0 ? undefined : this.vpcs }),\n    });\n\n    this.hostedZoneId = resource.ref;\n    this.hostedZoneNameServers = resource.attrNameServers;\n    this.zoneName = props.zoneName;\n\n    for (const vpc of props.vpcs || []) {\n      this.addVpc(vpc);\n    }\n  }\n\n                                                                                                        \n  public addVpc(vpc: ec2.IVpc) {\n    this.vpcs.push({ vpcId: vpc.vpcId, vpcRegion: Stack.of(vpc).region });\n  }\n}\n\n                                                          \nexport interface PublicHostedZoneProps extends CommonHostedZoneProps {\n                                                                                                                                                                               \n  readonly caaAmazon?: boolean;\n\n                                                                                                                                   \n  readonly crossAccountZoneDelegationPrincipal?: iam.IPrincipal;\n\n                                                                                                                                      \n  readonly crossAccountZoneDelegationRoleName?: string;\n}\n\n                                                   \nexport interface IPublicHostedZone extends IHostedZone { }\n\n                                                                                        \nexport class PublicHostedZone extends HostedZone implements IPublicHostedZone {\n\n                                                                                                                                                                                                                                                                                                            \n  public static fromPublicHostedZoneId(scope: Construct, id: string, publicHostedZoneId: string): IPublicHostedZone {\n    class Import extends Resource implements IPublicHostedZone {\n      public readonly hostedZoneId = publicHostedZoneId;\n      public get zoneName(): string { throw new Error('cannot retrieve \"zoneName\" from an an imported hosted zone'); }\n      public get hostedZoneArn(): string {\n        return makeHostedZoneArn(this, this.hostedZoneId);\n      }\n    }\n    return new Import(scope, id);\n  }\n\n                                                       \n  public readonly crossAccountZoneDelegationRole?: iam.Role;\n\n  constructor(scope: Construct, id: string, props: PublicHostedZoneProps) {\n    super(scope, id, props);\n\n    if (props.caaAmazon) {\n      new CaaAmazonRecord(this, 'CaaAmazon', {\n        zone: this,\n      });\n    }\n\n    if (!props.crossAccountZoneDelegationPrincipal && props.crossAccountZoneDelegationRoleName) {\n      throw Error('crossAccountZoneDelegationRoleName property is not supported without crossAccountZoneDelegationPrincipal');\n    }\n\n    if (props.crossAccountZoneDelegationPrincipal) {\n      this.crossAccountZoneDelegationRole = new iam.Role(this, 'CrossAccountZoneDelegationRole', {\n        roleName: props.crossAccountZoneDelegationRoleName,\n        assumedBy: props.crossAccountZoneDelegationPrincipal,\n        inlinePolicies: {\n          delegation: new iam.PolicyDocument({\n            statements: [\n              new iam.PolicyStatement({\n                actions: ['route53:ChangeResourceRecordSets'],\n                resources: [this.hostedZoneArn],\n              }),\n              new iam.PolicyStatement({\n                actions: ['route53:ListHostedZonesByName'],\n                resources: ['*'],\n              }),\n            ],\n          }),\n        },\n      });\n    }\n  }\n\n  public addVpc(_vpc: ec2.IVpc) {\n    throw new Error('Cannot associate public hosted zones with a VPC');\n  }\n\n                                                                                                                                                                                                \n  public addDelegation(delegate: IPublicHostedZone, opts: ZoneDelegationOptions = {}): void {\n    new ZoneDelegationRecord(this, `${this.zoneName} -> ${delegate.zoneName}`, {\n      zone: this,\n      recordName: delegate.zoneName,\n      nameServers: delegate.hostedZoneNameServers!, // PublicHostedZones always have name servers!\n      comment: opts.comment,\n      ttl: opts.ttl,\n    });\n  }\n}\n\n                                                                                                          \nexport interface ZoneDelegationOptions {\n                                                                                                                  \n  readonly comment?: string;\n\n                                                                                                             \n  readonly ttl?: Duration;\n}\n\n                                                              \nexport interface PrivateHostedZoneProps extends CommonHostedZoneProps {\n                                                                                                                                                                                                              \n  readonly vpc: ec2.IVpc;\n}\n\n                                                    \nexport interface IPrivateHostedZone extends IHostedZone {}\n\n                                                                                                                                                                                                                                                                    \nexport class PrivateHostedZone extends HostedZone implements IPrivateHostedZone {\n\n                                                                                                                                                                                                                                                                                                               \n  public static fromPrivateHostedZoneId(scope: Construct, id: string, privateHostedZoneId: string): IPrivateHostedZone {\n    class Import extends Resource implements IPrivateHostedZone {\n      public readonly hostedZoneId = privateHostedZoneId;\n      public get zoneName(): string { throw new Error('cannot retrieve \"zoneName\" from an an imported hosted zone'); }\n      public get hostedZoneArn(): string {\n        return makeHostedZoneArn(this, this.hostedZoneId);\n      }\n    }\n    return new Import(scope, id);\n  }\n\n  constructor(scope: Construct, id: string, props: PrivateHostedZoneProps) {\n    super(scope, id, props);\n\n    this.addVpc(props.vpc);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
