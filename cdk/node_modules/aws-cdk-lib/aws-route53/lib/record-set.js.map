{
  "version": 3,
  "sources": ["record-set.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as iam from '../../aws-iam';\nimport { CustomResource, CustomResourceProvider, CustomResourceProviderRuntime, Duration, IResource, RemovalPolicy, Resource, Token } from '../../core';\nimport { Construct } from 'constructs';\nimport { IAliasRecordTarget } from './alias-record-target';\nimport { IHostedZone } from './hosted-zone-ref';\nimport { CfnRecordSet } from './route53.generated';\nimport { determineFullyQualifiedDomainName } from './util';\n\nconst CROSS_ACCOUNT_ZONE_DELEGATION_RESOURCE_TYPE = 'Custom::CrossAccountZoneDelegation';\n\n                       \nexport interface IRecordSet extends IResource {\n                                              \n  readonly domainName: string;\n}\n\n                           \nexport enum RecordType {\n                                                                                                                                                                                                                                   \n  A = 'A',\n\n                                                                                                                                                                                                                                                 \n  AAAA = 'AAAA',\n\n                                                                                                                                                                                                                                                        \n  CAA = 'CAA',\n\n                                                                                                                                                                                                                                                                                                                                       \n  CNAME = 'CNAME',\n\n                                                                                                                                                                                                             \n  DS = 'DS',\n\n                                                                                                                                                                                                                                                     \n  MX = 'MX',\n\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n  NAPTR = 'NAPTR',\n\n                                                                                                                                                                                        \n  NS = 'NS',\n\n                                                                                                                                                                                              \n  PTR = 'PTR',\n\n                                                                                                                                                                                                                                                         \n  SOA = 'SOA',\n\n                                                                                                                                                                                                                                                                                                                                \n  SPF = 'SPF',\n\n                                                                                                                                                                                                                                                                                                                             \n  SRV = 'SRV',\n\n                                                                                                                                                                                                                       \n  TXT = 'TXT'\n}\n\n                                   \nexport interface RecordSetOptions {\n                                                                   \n  readonly zone: IHostedZone;\n\n                                                                              \n  readonly recordName?: string;\n\n                                                                                                      \n  readonly ttl?: Duration;\n\n                                                                              \n  readonly comment?: string;\n}\n\n                                                                         \nexport class RecordTarget {\n                                             \n  public static fromValues(...values: string[]) {\n    return new RecordTarget(values);\n  }\n\n                                        \n  public static fromAlias(aliasTarget: IAliasRecordTarget) {\n    return new RecordTarget(undefined, aliasTarget);\n  }\n\n                                            \n  public static fromIpAddresses(...ipAddresses: string[]) {\n    return RecordTarget.fromValues(...ipAddresses);\n  }\n\n                                                                                                                                                                                                                              \n  protected constructor(public readonly values?: string[], public readonly aliasTarget?: IAliasRecordTarget) {\n  }\n}\n\n                                                   \nexport interface RecordSetProps extends RecordSetOptions {\n                                 \n  readonly recordType: RecordType;\n\n                                                                                                                   \n  readonly target: RecordTarget;\n}\n\n                        \nexport class RecordSet extends Resource implements IRecordSet {\n  public readonly domainName: string;\n\n  constructor(scope: Construct, id: string, props: RecordSetProps) {\n    super(scope, id);\n\n    const ttl = props.target.aliasTarget ? undefined : ((props.ttl && props.ttl.toSeconds()) ?? 1800).toString();\n\n    const recordSet = new CfnRecordSet(this, 'Resource', {\n      hostedZoneId: props.zone.hostedZoneId,\n      name: determineFullyQualifiedDomainName(props.recordName || props.zone.zoneName, props.zone),\n      type: props.recordType,\n      resourceRecords: props.target.values,\n      aliasTarget: props.target.aliasTarget && props.target.aliasTarget.bind(this, props.zone),\n      ttl,\n      comment: props.comment,\n    });\n\n    this.domainName = recordSet.ref;\n  }\n}\n\n                                                                       \nexport class AddressRecordTarget extends RecordTarget {\n}\n\n                                                 \nexport interface ARecordProps extends RecordSetOptions {\n                            \n  readonly target: RecordTarget;\n}\n\n                                                                 \nexport class ARecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: ARecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.A,\n      target: props.target,\n    });\n  }\n}\n\n                                                    \nexport interface AaaaRecordProps extends RecordSetOptions {\n                            \n  readonly target: RecordTarget;\n}\n\n                                                                    \nexport class AaaaRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: AaaaRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.AAAA,\n      target: props.target,\n    });\n  }\n}\n\n                                                     \nexport interface CnameRecordProps extends RecordSetOptions {\n                                 \n  readonly domainName: string;\n}\n\n                                                                     \nexport class CnameRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: CnameRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.CNAME,\n      target: RecordTarget.fromValues(props.domainName),\n    });\n  }\n}\n\n                                                   \nexport interface TxtRecordProps extends RecordSetOptions {\n                                 \n  readonly values: string[];\n}\n\n                                                                   \nexport class TxtRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: TxtRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.TXT,\n      target: RecordTarget.fromValues(...props.values.map(v => formatTxt(v))),\n    });\n  }\n}\n\n/**\n * Formats a text value for use in a TXT record\n *\n * Use `JSON.stringify` to correctly escape and enclose in double quotes (\"\").\n *\n * DNS TXT records can contain up to 255 characters in a single string. TXT\n * record strings over 255 characters must be split into multiple text strings\n * within the same record.\n *\n * @see https://aws.amazon.com/premiumsupport/knowledge-center/route53-resolve-dkim-text-record-error/\n */\nfunction formatTxt(string: string): string {\n  const result = [];\n  let idx = 0;\n  while (idx < string.length) {\n    result.push(string.slice(idx, idx += 255)); // chunks of 255 characters long\n  }\n  return result.map(r => JSON.stringify(r)).join('');\n}\n\n                                             \nexport interface SrvRecordValue {\n                              \n  readonly priority: number;\n\n                            \n  readonly weight: number;\n\n                          \n  readonly port: number;\n\n                                      \n  readonly hostName: string;\n}\n                                                   \nexport interface SrvRecordProps extends RecordSetOptions {\n                            \n  readonly values: SrvRecordValue[];\n}\n\n                                                                   \nexport class SrvRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: SrvRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.SRV,\n      target: RecordTarget.fromValues(...props.values.map(v => `${v.priority} ${v.weight} ${v.port} ${v.hostName}`)),\n    });\n  }\n}\n\n                       \nexport enum CaaTag {\n                                                                                                                             \n  ISSUE = 'issue',\n\n                                                                                                                                               \n  ISSUEWILD = 'issuewild',\n\n                                                                                                    \n  IODEF = 'iodef',\n}\n\n                                             \nexport interface CaaRecordValue {\n                          \n  readonly flag: number;\n\n                         \n  readonly tag: CaaTag;\n\n                                                   \n  readonly value: string;\n}\n\n                                                   \nexport interface CaaRecordProps extends RecordSetOptions {\n                            \n  readonly values: CaaRecordValue[];\n}\n\n                                                                   \nexport class CaaRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: CaaRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.CAA,\n      target: RecordTarget.fromValues(...props.values.map(v => `${v.flag} ${v.tag} \"${v.value}\"`)),\n    });\n  }\n}\n\n                                                         \nexport interface CaaAmazonRecordProps extends RecordSetOptions {}\n\n                                                                                                                                                                                                \nexport class CaaAmazonRecord extends CaaRecord {\n  constructor(scope: Construct, id: string, props: CaaAmazonRecordProps) {\n    super(scope, id, {\n      ...props,\n      values: [\n        {\n          flag: 0,\n          tag: CaaTag.ISSUE,\n          value: 'amazon.com',\n        },\n      ],\n    });\n  }\n}\n\n                                            \nexport interface MxRecordValue {\n                              \n  readonly priority: number;\n\n                                           \n  readonly hostName: string;\n}\n\n                                                  \nexport interface MxRecordProps extends RecordSetOptions {\n                            \n  readonly values: MxRecordValue[];\n}\n\n                                                                  \nexport class MxRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: MxRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.MX,\n      target: RecordTarget.fromValues(...props.values.map(v => `${v.priority} ${v.hostName}`)),\n    });\n  }\n}\n\n                                                  \nexport interface NsRecordProps extends RecordSetOptions {\n                               \n  readonly values: string[];\n}\n\n                                                                  \nexport class NsRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: NsRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.NS,\n      target: RecordTarget.fromValues(...props.values),\n    });\n  }\n}\n\n                                                  \nexport interface DsRecordProps extends RecordSetOptions {\n                               \n  readonly values: string[];\n}\n\n                                                                  \nexport class DsRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: DsRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.DS,\n      target: RecordTarget.fromValues(...props.values),\n    });\n  }\n}\n\n                                                             \nexport interface ZoneDelegationRecordProps extends RecordSetOptions {\n                                                                      \n  readonly nameServers: string[];\n}\n\n                                                                                   \nexport class ZoneDelegationRecord extends RecordSet {\n  constructor(scope: Construct, id: string, props: ZoneDelegationRecordProps) {\n    super(scope, id, {\n      ...props,\n      recordType: RecordType.NS,\n      target: RecordTarget.fromValues(...Token.isUnresolved(props.nameServers)\n        ? props.nameServers // Can't map a string-array token!\n        : props.nameServers.map(ns => (Token.isUnresolved(ns) || ns.endsWith('.')) ? ns : `${ns}.`),\n      ),\n      ttl: props.ttl || Duration.days(2),\n    });\n  }\n}\n\n                                                                         \nexport interface CrossAccountZoneDelegationRecordProps {\n                                         \n  readonly delegatedZone: IHostedZone;\n\n                                                                                             \n  readonly parentHostedZoneName?: string;\n\n                                                                                         \n  readonly parentHostedZoneId?: string;\n\n                                                          \n  readonly delegationRole: iam.IRole;\n\n                                                                                                  \n  readonly ttl?: Duration;\n\n                                                                                                        \n  readonly removalPolicy?: RemovalPolicy;\n}\n\n                                                 \nexport class CrossAccountZoneDelegationRecord extends Construct {\n  constructor(scope: Construct, id: string, props: CrossAccountZoneDelegationRecordProps) {\n    super(scope, id);\n\n    if (!props.parentHostedZoneName && !props.parentHostedZoneId) {\n      throw Error('At least one of parentHostedZoneName or parentHostedZoneId is required');\n    }\n\n    if (props.parentHostedZoneName && props.parentHostedZoneId) {\n      throw Error('Only one of parentHostedZoneName and parentHostedZoneId is supported');\n    }\n\n    const provider = CustomResourceProvider.getOrCreateProvider(this, CROSS_ACCOUNT_ZONE_DELEGATION_RESOURCE_TYPE, {\n      codeDirectory: path.join(__dirname, 'cross-account-zone-delegation-handler'),\n      runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n    });\n\n    const role = iam.Role.fromRoleArn(this, 'cross-account-zone-delegation-handler-role', provider.roleArn);\n\n    role.addToPrincipalPolicy(new iam.PolicyStatement({\n      effect: iam.Effect.ALLOW,\n      actions: ['sts:AssumeRole'],\n      resources: [props.delegationRole.roleArn],\n    }));\n\n    new CustomResource(this, 'CrossAccountZoneDelegationCustomResource', {\n      resourceType: CROSS_ACCOUNT_ZONE_DELEGATION_RESOURCE_TYPE,\n      serviceToken: provider.serviceToken,\n      removalPolicy: props.removalPolicy,\n      properties: {\n        AssumeRoleArn: props.delegationRole.roleArn,\n        ParentZoneName: props.parentHostedZoneName,\n        ParentZoneId: props.parentHostedZoneId,\n        DelegatedZoneName: props.delegatedZone.zoneName,\n        DelegatedZoneNameServers: props.delegatedZone.hostedZoneNameServers!,\n        TTL: (props.ttl || Duration.days(2)).toSeconds(),\n      },\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
