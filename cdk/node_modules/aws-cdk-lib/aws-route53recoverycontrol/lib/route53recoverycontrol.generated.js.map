{
  "version": 3,
  "sources": ["route53recoverycontrol.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:33.354Z\",\"fingerprint\":\"SJTbkRIsOADkyafYAekUv0H61HxM2EnAB1WrtqcXXCw=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                 \nexport interface CfnClusterProps {\n\n                                                                                                                                                                                                                                                                             \n    readonly name?: string;\n\n                                                                                                                                                                                                                      \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnClusterProps`\n *\n * @param properties - the TypeScript properties of a `CfnClusterProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnClusterPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnClusterProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::Cluster` resource\n *\n * @param properties - the TypeScript properties of a `CfnClusterProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::Cluster` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnClusterPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnClusterProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnClusterProps>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnCluster extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53RecoveryControl::Cluster\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCluster {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnClusterPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCluster(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                \n    public readonly attrClusterArn: string;\n\n                                                                                                  \n    public readonly attrClusterEndpoints: cdk.IResolvable;\n\n                                                                                                                                                                       \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                                                             \n    public name: string | undefined;\n\n                                                                                                                                                                                                                      \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnClusterProps = {}) {\n        super(scope, id, { type: CfnCluster.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrClusterArn = cdk.Token.asString(this.getAtt('ClusterArn'));\n        this.attrClusterEndpoints = this.getAtt('ClusterEndpoints');\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Route53RecoveryControl::Cluster\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCluster.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnClusterPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCluster {\n                                                                                                                                                                                                                                                                                                                                             \n    export interface ClusterEndpointProperty {\nn        readonly endpoint?: string;\n                                                                                                                                                                                                                                                                                                \n        readonly region?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClusterEndpointProperty`\n *\n * @param properties - the TypeScript properties of a `ClusterEndpointProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCluster_ClusterEndpointPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpoint', cdk.validateString)(properties.endpoint));\n    errors.collect(cdk.propertyValidator('region', cdk.validateString)(properties.region));\n    return errors.wrap('supplied properties not correct for \"ClusterEndpointProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::Cluster.ClusterEndpoint` resource\n *\n * @param properties - the TypeScript properties of a `ClusterEndpointProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::Cluster.ClusterEndpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnClusterClusterEndpointPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCluster_ClusterEndpointPropertyValidator(properties).assertSuccess();\n    return {\n        Endpoint: cdk.stringToCloudFormation(properties.endpoint),\n        Region: cdk.stringToCloudFormation(properties.region),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnClusterClusterEndpointPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCluster.ClusterEndpointProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCluster.ClusterEndpointProperty>();\n    ret.addPropertyResult('endpoint', 'Endpoint', properties.Endpoint != null ? cfn_parse.FromCloudFormation.getString(properties.Endpoint) : undefined);\n    ret.addPropertyResult('region', 'Region', properties.Region != null ? cfn_parse.FromCloudFormation.getString(properties.Region) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                           \nexport interface CfnControlPanelProps {\n\n                                                                                                                                                                                                                                                                                                 \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                      \n    readonly clusterArn?: string;\n\n                                                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnControlPanelProps`\n *\n * @param properties - the TypeScript properties of a `CfnControlPanelProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnControlPanelPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterArn', cdk.validateString)(properties.clusterArn));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnControlPanelProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::ControlPanel` resource\n *\n * @param properties - the TypeScript properties of a `CfnControlPanelProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::ControlPanel` resource.\n */\n// @ts-ignore TS6133\nfunction cfnControlPanelPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnControlPanelPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        ClusterArn: cdk.stringToCloudFormation(properties.clusterArn),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnControlPanelPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnControlPanelProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnControlPanelProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('clusterArn', 'ClusterArn', properties.ClusterArn != null ? cfn_parse.FromCloudFormation.getString(properties.ClusterArn) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnControlPanel extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53RecoveryControl::ControlPanel\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnControlPanel {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnControlPanelPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnControlPanel(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                           \n    public readonly attrControlPanelArn: string;\n\n                                                                                                                                                             \n    public readonly attrDefaultControlPanel: cdk.IResolvable;\n\n                                                                                                                               \n    public readonly attrRoutingControlCount: number;\n\n                                                                                                                                                                              \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                                                                                 \n    public name: string;\n\n                                                                                                                                                                                                                                                                                      \n    public clusterArn: string | undefined;\n\n                                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnControlPanelProps) {\n        super(scope, id, { type: CfnControlPanel.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        this.attrControlPanelArn = cdk.Token.asString(this.getAtt('ControlPanelArn'));\n        this.attrDefaultControlPanel = this.getAtt('DefaultControlPanel');\n        this.attrRoutingControlCount = cdk.Token.asNumber(this.getAtt('RoutingControlCount'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.name = props.name;\n        this.clusterArn = props.clusterArn;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Route53RecoveryControl::ControlPanel\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnControlPanel.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            clusterArn: this.clusterArn,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnControlPanelPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                               \nexport interface CfnRoutingControlProps {\n\n                                                                                                                                                                                                                                                                                                       \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                      \n    readonly clusterArn?: string;\n\n                                                                                                                                                                                                                                                                                                                 \n    readonly controlPanelArn?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRoutingControlProps`\n *\n * @param properties - the TypeScript properties of a `CfnRoutingControlProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRoutingControlPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterArn', cdk.validateString)(properties.clusterArn));\n    errors.collect(cdk.propertyValidator('controlPanelArn', cdk.validateString)(properties.controlPanelArn));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CfnRoutingControlProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::RoutingControl` resource\n *\n * @param properties - the TypeScript properties of a `CfnRoutingControlProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::RoutingControl` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRoutingControlPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRoutingControlPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        ClusterArn: cdk.stringToCloudFormation(properties.clusterArn),\n        ControlPanelArn: cdk.stringToCloudFormation(properties.controlPanelArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRoutingControlPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRoutingControlProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRoutingControlProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('clusterArn', 'ClusterArn', properties.ClusterArn != null ? cfn_parse.FromCloudFormation.getString(properties.ClusterArn) : undefined);\n    ret.addPropertyResult('controlPanelArn', 'ControlPanelArn', properties.ControlPanelArn != null ? cfn_parse.FromCloudFormation.getString(properties.ControlPanelArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \nexport class CfnRoutingControl extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53RecoveryControl::RoutingControl\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRoutingControl {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRoutingControlPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRoutingControl(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                               \n    public readonly attrRoutingControlArn: string;\n\n                                                                                                                                                                                    \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                                                                                       \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                      \n    public clusterArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                 \n    public controlPanelArn: string | undefined;\n\n                                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnRoutingControlProps) {\n        super(scope, id, { type: CfnRoutingControl.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        this.attrRoutingControlArn = cdk.Token.asString(this.getAtt('RoutingControlArn'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.name = props.name;\n        this.clusterArn = props.clusterArn;\n        this.controlPanelArn = props.controlPanelArn;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRoutingControl.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            clusterArn: this.clusterArn,\n            controlPanelArn: this.controlPanelArn,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRoutingControlPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                       \nexport interface CfnSafetyRuleProps {\n\n                                                                                                                                                                                                                                                                        \n    readonly controlPanelArn: string;\n\n                                                                                                                                                                                                                                                                                                                                              \n    readonly name: string;\n\nn    readonly ruleConfig: CfnSafetyRule.RuleConfigProperty | cdk.IResolvable;\n\nn    readonly assertionRule?: CfnSafetyRule.AssertionRuleProperty | cdk.IResolvable;\n\nn    readonly gatingRule?: CfnSafetyRule.GatingRuleProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSafetyRuleProps`\n *\n * @param properties - the TypeScript properties of a `CfnSafetyRuleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSafetyRulePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('assertionRule', CfnSafetyRule_AssertionRulePropertyValidator)(properties.assertionRule));\n    errors.collect(cdk.propertyValidator('controlPanelArn', cdk.requiredValidator)(properties.controlPanelArn));\n    errors.collect(cdk.propertyValidator('controlPanelArn', cdk.validateString)(properties.controlPanelArn));\n    errors.collect(cdk.propertyValidator('gatingRule', CfnSafetyRule_GatingRulePropertyValidator)(properties.gatingRule));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('ruleConfig', cdk.requiredValidator)(properties.ruleConfig));\n    errors.collect(cdk.propertyValidator('ruleConfig', CfnSafetyRule_RuleConfigPropertyValidator)(properties.ruleConfig));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnSafetyRuleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::SafetyRule` resource\n *\n * @param properties - the TypeScript properties of a `CfnSafetyRuleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::SafetyRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSafetyRulePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSafetyRulePropsValidator(properties).assertSuccess();\n    return {\n        ControlPanelArn: cdk.stringToCloudFormation(properties.controlPanelArn),\n        Name: cdk.stringToCloudFormation(properties.name),\n        RuleConfig: cfnSafetyRuleRuleConfigPropertyToCloudFormation(properties.ruleConfig),\n        AssertionRule: cfnSafetyRuleAssertionRulePropertyToCloudFormation(properties.assertionRule),\n        GatingRule: cfnSafetyRuleGatingRulePropertyToCloudFormation(properties.gatingRule),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSafetyRulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSafetyRuleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSafetyRuleProps>();\n    ret.addPropertyResult('controlPanelArn', 'ControlPanelArn', cfn_parse.FromCloudFormation.getString(properties.ControlPanelArn));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('ruleConfig', 'RuleConfig', CfnSafetyRuleRuleConfigPropertyFromCloudFormation(properties.RuleConfig));\n    ret.addPropertyResult('assertionRule', 'AssertionRule', properties.AssertionRule != null ? CfnSafetyRuleAssertionRulePropertyFromCloudFormation(properties.AssertionRule) : undefined);\n    ret.addPropertyResult('gatingRule', 'GatingRule', properties.GatingRule != null ? CfnSafetyRuleGatingRulePropertyFromCloudFormation(properties.GatingRule) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \nexport class CfnSafetyRule extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53RecoveryControl::SafetyRule\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSafetyRule {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSafetyRulePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSafetyRule(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                       \n    public readonly attrSafetyRuleArn: string;\n\n                                                             \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                                                        \n    public controlPanelArn: string;\n\n                                                                                                                                                                                                                                                                                                                                              \n    public name: string;\n\nn    public ruleConfig: CfnSafetyRule.RuleConfigProperty | cdk.IResolvable;\n\nn    public assertionRule: CfnSafetyRule.AssertionRuleProperty | cdk.IResolvable | undefined;\n\nn    public gatingRule: CfnSafetyRule.GatingRuleProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnSafetyRuleProps) {\n        super(scope, id, { type: CfnSafetyRule.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'controlPanelArn', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'ruleConfig', this);\n        this.attrSafetyRuleArn = cdk.Token.asString(this.getAtt('SafetyRuleArn'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.controlPanelArn = props.controlPanelArn;\n        this.name = props.name;\n        this.ruleConfig = props.ruleConfig;\n        this.assertionRule = props.assertionRule;\n        this.gatingRule = props.gatingRule;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Route53RecoveryControl::SafetyRule\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSafetyRule.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            controlPanelArn: this.controlPanelArn,\n            name: this.name,\n            ruleConfig: this.ruleConfig,\n            assertionRule: this.assertionRule,\n            gatingRule: this.gatingRule,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSafetyRulePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnSafetyRule {\nn    export interface AssertionRuleProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly assertedControls: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly waitPeriodMs: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AssertionRuleProperty`\n *\n * @param properties - the TypeScript properties of a `AssertionRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSafetyRule_AssertionRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('assertedControls', cdk.requiredValidator)(properties.assertedControls));\n    errors.collect(cdk.propertyValidator('assertedControls', cdk.listValidator(cdk.validateString))(properties.assertedControls));\n    errors.collect(cdk.propertyValidator('waitPeriodMs', cdk.requiredValidator)(properties.waitPeriodMs));\n    errors.collect(cdk.propertyValidator('waitPeriodMs', cdk.validateNumber)(properties.waitPeriodMs));\n    return errors.wrap('supplied properties not correct for \"AssertionRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::SafetyRule.AssertionRule` resource\n *\n * @param properties - the TypeScript properties of a `AssertionRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::SafetyRule.AssertionRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSafetyRuleAssertionRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSafetyRule_AssertionRulePropertyValidator(properties).assertSuccess();\n    return {\n        AssertedControls: cdk.listMapper(cdk.stringToCloudFormation)(properties.assertedControls),\n        WaitPeriodMs: cdk.numberToCloudFormation(properties.waitPeriodMs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSafetyRuleAssertionRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSafetyRule.AssertionRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSafetyRule.AssertionRuleProperty>();\n    ret.addPropertyResult('assertedControls', 'AssertedControls', cfn_parse.FromCloudFormation.getStringArray(properties.AssertedControls));\n    ret.addPropertyResult('waitPeriodMs', 'WaitPeriodMs', cfn_parse.FromCloudFormation.getNumber(properties.WaitPeriodMs));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSafetyRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface GatingRuleProperty {\nn        readonly gatingControls: string[];\nn        readonly targetControls: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly waitPeriodMs: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GatingRuleProperty`\n *\n * @param properties - the TypeScript properties of a `GatingRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSafetyRule_GatingRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('gatingControls', cdk.requiredValidator)(properties.gatingControls));\n    errors.collect(cdk.propertyValidator('gatingControls', cdk.listValidator(cdk.validateString))(properties.gatingControls));\n    errors.collect(cdk.propertyValidator('targetControls', cdk.requiredValidator)(properties.targetControls));\n    errors.collect(cdk.propertyValidator('targetControls', cdk.listValidator(cdk.validateString))(properties.targetControls));\n    errors.collect(cdk.propertyValidator('waitPeriodMs', cdk.requiredValidator)(properties.waitPeriodMs));\n    errors.collect(cdk.propertyValidator('waitPeriodMs', cdk.validateNumber)(properties.waitPeriodMs));\n    return errors.wrap('supplied properties not correct for \"GatingRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::SafetyRule.GatingRule` resource\n *\n * @param properties - the TypeScript properties of a `GatingRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::SafetyRule.GatingRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSafetyRuleGatingRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSafetyRule_GatingRulePropertyValidator(properties).assertSuccess();\n    return {\n        GatingControls: cdk.listMapper(cdk.stringToCloudFormation)(properties.gatingControls),\n        TargetControls: cdk.listMapper(cdk.stringToCloudFormation)(properties.targetControls),\n        WaitPeriodMs: cdk.numberToCloudFormation(properties.waitPeriodMs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSafetyRuleGatingRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSafetyRule.GatingRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSafetyRule.GatingRuleProperty>();\n    ret.addPropertyResult('gatingControls', 'GatingControls', cfn_parse.FromCloudFormation.getStringArray(properties.GatingControls));\n    ret.addPropertyResult('targetControls', 'TargetControls', cfn_parse.FromCloudFormation.getStringArray(properties.TargetControls));\n    ret.addPropertyResult('waitPeriodMs', 'WaitPeriodMs', cfn_parse.FromCloudFormation.getNumber(properties.WaitPeriodMs));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSafetyRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface RuleConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                       \n        readonly inverted: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly threshold: number;\n                                                                                                                                                                                                                                                                                                                     \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RuleConfigProperty`\n *\n * @param properties - the TypeScript properties of a `RuleConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSafetyRule_RuleConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('inverted', cdk.requiredValidator)(properties.inverted));\n    errors.collect(cdk.propertyValidator('inverted', cdk.validateBoolean)(properties.inverted));\n    errors.collect(cdk.propertyValidator('threshold', cdk.requiredValidator)(properties.threshold));\n    errors.collect(cdk.propertyValidator('threshold', cdk.validateNumber)(properties.threshold));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"RuleConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::SafetyRule.RuleConfig` resource\n *\n * @param properties - the TypeScript properties of a `RuleConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53RecoveryControl::SafetyRule.RuleConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSafetyRuleRuleConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSafetyRule_RuleConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Inverted: cdk.booleanToCloudFormation(properties.inverted),\n        Threshold: cdk.numberToCloudFormation(properties.threshold),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSafetyRuleRuleConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSafetyRule.RuleConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSafetyRule.RuleConfigProperty>();\n    ret.addPropertyResult('inverted', 'Inverted', cfn_parse.FromCloudFormation.getBoolean(properties.Inverted));\n    ret.addPropertyResult('threshold', 'Threshold', cfn_parse.FromCloudFormation.getNumber(properties.Threshold));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
