{
  "version": 3,
  "sources": ["route53resolver.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:33.385Z\",\"fingerprint\":\"vjKmR27ZOPRsAm4ZC3O8XYzMDl/Nyy4438GSyvfeiC4=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                                \nexport interface CfnFirewallDomainListProps {\n\nn    readonly domainFileUrl?: string;\n\n                                                                                                                                                                                                                                                              \n    readonly domains?: string[];\n\n                                                                                                                                                                                                                                      \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFirewallDomainListProps`\n *\n * @param properties - the TypeScript properties of a `CfnFirewallDomainListProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFirewallDomainListPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('domainFileUrl', cdk.validateString)(properties.domainFileUrl));\n    errors.collect(cdk.propertyValidator('domains', cdk.listValidator(cdk.validateString))(properties.domains));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnFirewallDomainListProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53Resolver::FirewallDomainList` resource\n *\n * @param properties - the TypeScript properties of a `CfnFirewallDomainListProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53Resolver::FirewallDomainList` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFirewallDomainListPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFirewallDomainListPropsValidator(properties).assertSuccess();\n    return {\n        DomainFileUrl: cdk.stringToCloudFormation(properties.domainFileUrl),\n        Domains: cdk.listMapper(cdk.stringToCloudFormation)(properties.domains),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFirewallDomainListPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFirewallDomainListProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFirewallDomainListProps>();\n    ret.addPropertyResult('domainFileUrl', 'DomainFileUrl', properties.DomainFileUrl != null ? cfn_parse.FromCloudFormation.getString(properties.DomainFileUrl) : undefined);\n    ret.addPropertyResult('domains', 'Domains', properties.Domains != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Domains) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnFirewallDomainList extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53Resolver::FirewallDomainList\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFirewallDomainList {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFirewallDomainListPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFirewallDomainList(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                      \n    public readonly attrArn: string;\n\n                                                                                                                                                                                 \n    public readonly attrCreationTime: string;\n\n                                                                                                                                                                                                                                                                                  \n    public readonly attrCreatorRequestId: string;\n\n                                                                                                                                    \n    public readonly attrDomainCount: number;\n\n                                                                                    \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                       \n    public readonly attrManagedOwnerName: string;\n\n                                                                                                                                                                                           \n    public readonly attrModificationTime: string;\n\n                                                                                            \n    public readonly attrStatus: string;\n\n                                                                                                                                       \n    public readonly attrStatusMessage: string;\n\nn    public domainFileUrl: string | undefined;\n\n                                                                                                                                                                                                                                                              \n    public domains: string[] | undefined;\n\n                                                                                                                                                                                                                                      \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnFirewallDomainListProps = {}) {\n        super(scope, id, { type: CfnFirewallDomainList.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrCreatorRequestId = cdk.Token.asString(this.getAtt('CreatorRequestId'));\n        this.attrDomainCount = cdk.Token.asNumber(this.getAtt('DomainCount'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrManagedOwnerName = cdk.Token.asString(this.getAtt('ManagedOwnerName'));\n        this.attrModificationTime = cdk.Token.asString(this.getAtt('ModificationTime'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n        this.attrStatusMessage = cdk.Token.asString(this.getAtt('StatusMessage'));\n\n        this.domainFileUrl = props.domainFileUrl;\n        this.domains = props.domains;\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Route53Resolver::FirewallDomainList\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFirewallDomainList.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            domainFileUrl: this.domainFileUrl,\n            domains: this.domains,\n            name: this.name,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFirewallDomainListPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                              \nexport interface CfnFirewallRuleGroupProps {\n\n                                                                                                                                                                                                                                                           \n    readonly firewallRules?: Array<CfnFirewallRuleGroup.FirewallRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                   \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                         \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFirewallRuleGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnFirewallRuleGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFirewallRuleGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('firewallRules', cdk.listValidator(CfnFirewallRuleGroup_FirewallRulePropertyValidator))(properties.firewallRules));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnFirewallRuleGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53Resolver::FirewallRuleGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnFirewallRuleGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53Resolver::FirewallRuleGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFirewallRuleGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFirewallRuleGroupPropsValidator(properties).assertSuccess();\n    return {\n        FirewallRules: cdk.listMapper(cfnFirewallRuleGroupFirewallRulePropertyToCloudFormation)(properties.firewallRules),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFirewallRuleGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFirewallRuleGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFirewallRuleGroupProps>();\n    ret.addPropertyResult('firewallRules', 'FirewallRules', properties.FirewallRules != null ? cfn_parse.FromCloudFormation.getArray(CfnFirewallRuleGroupFirewallRulePropertyFromCloudFormation)(properties.FirewallRules) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnFirewallRuleGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53Resolver::FirewallRuleGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFirewallRuleGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFirewallRuleGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFirewallRuleGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                            \n    public readonly attrArn: string;\n\n                                                                                                                                                                                \n    public readonly attrCreationTime: string;\n\n                                                                                                                                                                                                                                                                                  \n    public readonly attrCreatorRequestId: string;\n\n                                                                                   \n    public readonly attrId: string;\n\n                                                                                                                                                                                          \n    public readonly attrModificationTime: string;\n\n                                                                                                                                                                                                                                          \n    public readonly attrOwnerId: string;\n\n                                                                                                       \n    public readonly attrRuleCount: number;\n\n                                                                                                                                                                                                                                                                    \n    public readonly attrShareStatus: string;\n\n                                                                                            \n    public readonly attrStatus: string;\n\n                                                                                                                                             \n    public readonly attrStatusMessage: string;\n\n                                                                                                                                                                                                                                                           \n    public firewallRules: Array<CfnFirewallRuleGroup.FirewallRuleProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                   \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                         \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnFirewallRuleGroupProps = {}) {\n        super(scope, id, { type: CfnFirewallRuleGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrCreatorRequestId = cdk.Token.asString(this.getAtt('CreatorRequestId'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrModificationTime = cdk.Token.asString(this.getAtt('ModificationTime'));\n        this.attrOwnerId = cdk.Token.asString(this.getAtt('OwnerId'));\n        this.attrRuleCount = cdk.Token.asNumber(this.getAtt('RuleCount'));\n        this.attrShareStatus = cdk.Token.asString(this.getAtt('ShareStatus'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n        this.attrStatusMessage = cdk.Token.asString(this.getAtt('StatusMessage'));\n\n        this.firewallRules = props.firewallRules;\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Route53Resolver::FirewallRuleGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFirewallRuleGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            firewallRules: this.firewallRules,\n            name: this.name,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFirewallRuleGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnFirewallRuleGroup {\n                                                                                                                                                                                                                                                                    \n    export interface FirewallRuleProperty {\nn        readonly action: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly blockOverrideDnsType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly blockOverrideDomain?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly blockOverrideTtl?: number;\nn        readonly blockResponse?: string;\n                                                                                                                                                                                                                                                                                                                          \n        readonly firewallDomainListId: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly priority: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FirewallRuleProperty`\n *\n * @param properties - the TypeScript properties of a `FirewallRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFirewallRuleGroup_FirewallRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('action', cdk.requiredValidator)(properties.action));\n    errors.collect(cdk.propertyValidator('action', cdk.validateString)(properties.action));\n    errors.collect(cdk.propertyValidator('blockOverrideDnsType', cdk.validateString)(properties.blockOverrideDnsType));\n    errors.collect(cdk.propertyValidator('blockOverrideDomain', cdk.validateString)(properties.blockOverrideDomain));\n    errors.collect(cdk.propertyValidator('blockOverrideTtl', cdk.validateNumber)(properties.blockOverrideTtl));\n    errors.collect(cdk.propertyValidator('blockResponse', cdk.validateString)(properties.blockResponse));\n    errors.collect(cdk.propertyValidator('firewallDomainListId', cdk.requiredValidator)(properties.firewallDomainListId));\n    errors.collect(cdk.propertyValidator('firewallDomainListId', cdk.validateString)(properties.firewallDomainListId));\n    errors.collect(cdk.propertyValidator('priority', cdk.requiredValidator)(properties.priority));\n    errors.collect(cdk.propertyValidator('priority', cdk.validateNumber)(properties.priority));\n    return errors.wrap('supplied properties not correct for \"FirewallRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53Resolver::FirewallRuleGroup.FirewallRule` resource\n *\n * @param properties - the TypeScript properties of a `FirewallRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53Resolver::FirewallRuleGroup.FirewallRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFirewallRuleGroupFirewallRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFirewallRuleGroup_FirewallRulePropertyValidator(properties).assertSuccess();\n    return {\n        Action: cdk.stringToCloudFormation(properties.action),\n        BlockOverrideDnsType: cdk.stringToCloudFormation(properties.blockOverrideDnsType),\n        BlockOverrideDomain: cdk.stringToCloudFormation(properties.blockOverrideDomain),\n        BlockOverrideTtl: cdk.numberToCloudFormation(properties.blockOverrideTtl),\n        BlockResponse: cdk.stringToCloudFormation(properties.blockResponse),\n        FirewallDomainListId: cdk.stringToCloudFormation(properties.firewallDomainListId),\n        Priority: cdk.numberToCloudFormation(properties.priority),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFirewallRuleGroupFirewallRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFirewallRuleGroup.FirewallRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFirewallRuleGroup.FirewallRuleProperty>();\n    ret.addPropertyResult('action', 'Action', cfn_parse.FromCloudFormation.getString(properties.Action));\n    ret.addPropertyResult('blockOverrideDnsType', 'BlockOverrideDnsType', properties.BlockOverrideDnsType != null ? cfn_parse.FromCloudFormation.getString(properties.BlockOverrideDnsType) : undefined);\n    ret.addPropertyResult('blockOverrideDomain', 'BlockOverrideDomain', properties.BlockOverrideDomain != null ? cfn_parse.FromCloudFormation.getString(properties.BlockOverrideDomain) : undefined);\n    ret.addPropertyResult('blockOverrideTtl', 'BlockOverrideTtl', properties.BlockOverrideTtl != null ? cfn_parse.FromCloudFormation.getNumber(properties.BlockOverrideTtl) : undefined);\n    ret.addPropertyResult('blockResponse', 'BlockResponse', properties.BlockResponse != null ? cfn_parse.FromCloudFormation.getString(properties.BlockResponse) : undefined);\n    ret.addPropertyResult('firewallDomainListId', 'FirewallDomainListId', cfn_parse.FromCloudFormation.getString(properties.FirewallDomainListId));\n    ret.addPropertyResult('priority', 'Priority', cfn_parse.FromCloudFormation.getNumber(properties.Priority));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                    \nexport interface CfnFirewallRuleGroupAssociationProps {\n\n                                                                                                                                                                                                                                                                                              \n    readonly firewallRuleGroupId: string;\n\nn    readonly priority: number;\n\n                                                                                                                                                                                                                                                                                                       \n    readonly vpcId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly mutationProtection?: string;\n\n                                                                                                                                                                                                                                                          \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFirewallRuleGroupAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnFirewallRuleGroupAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFirewallRuleGroupAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('firewallRuleGroupId', cdk.requiredValidator)(properties.firewallRuleGroupId));\n    errors.collect(cdk.propertyValidator('firewallRuleGroupId', cdk.validateString)(properties.firewallRuleGroupId));\n    errors.collect(cdk.propertyValidator('mutationProtection', cdk.validateString)(properties.mutationProtection));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('priority', cdk.requiredValidator)(properties.priority));\n    errors.collect(cdk.propertyValidator('priority', cdk.validateNumber)(properties.priority));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnFirewallRuleGroupAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53Resolver::FirewallRuleGroupAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnFirewallRuleGroupAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53Resolver::FirewallRuleGroupAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFirewallRuleGroupAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFirewallRuleGroupAssociationPropsValidator(properties).assertSuccess();\n    return {\n        FirewallRuleGroupId: cdk.stringToCloudFormation(properties.firewallRuleGroupId),\n        Priority: cdk.numberToCloudFormation(properties.priority),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n        MutationProtection: cdk.stringToCloudFormation(properties.mutationProtection),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFirewallRuleGroupAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFirewallRuleGroupAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFirewallRuleGroupAssociationProps>();\n    ret.addPropertyResult('firewallRuleGroupId', 'FirewallRuleGroupId', cfn_parse.FromCloudFormation.getString(properties.FirewallRuleGroupId));\n    ret.addPropertyResult('priority', 'Priority', cfn_parse.FromCloudFormation.getNumber(properties.Priority));\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addPropertyResult('mutationProtection', 'MutationProtection', properties.MutationProtection != null ? cfn_parse.FromCloudFormation.getString(properties.MutationProtection) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \nexport class CfnFirewallRuleGroupAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53Resolver::FirewallRuleGroupAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFirewallRuleGroupAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFirewallRuleGroupAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFirewallRuleGroupAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                 \n    public readonly attrArn: string;\n\n                                                                                                                                                                                 \n    public readonly attrCreationTime: string;\n\n                                                                                                                                                                                                                                                                                  \n    public readonly attrCreatorRequestId: string;\n\n                                                                                             \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                   \n    public readonly attrManagedOwnerName: string;\n\n                                                                                                                                                                                           \n    public readonly attrModificationTime: string;\n\n                                                                                                    \n    public readonly attrStatus: string;\n\n                                                                                                                                           \n    public readonly attrStatusMessage: string;\n\n                                                                                                                                                                                                                                                                                              \n    public firewallRuleGroupId: string;\n\nn    public priority: number;\n\n                                                                                                                                                                                                                                                                                                       \n    public vpcId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    public mutationProtection: string | undefined;\n\n                                                                                                                                                                                                                                                          \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnFirewallRuleGroupAssociationProps) {\n        super(scope, id, { type: CfnFirewallRuleGroupAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'firewallRuleGroupId', this);\n        cdk.requireProperty(props, 'priority', this);\n        cdk.requireProperty(props, 'vpcId', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrCreatorRequestId = cdk.Token.asString(this.getAtt('CreatorRequestId'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrManagedOwnerName = cdk.Token.asString(this.getAtt('ManagedOwnerName'));\n        this.attrModificationTime = cdk.Token.asString(this.getAtt('ModificationTime'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n        this.attrStatusMessage = cdk.Token.asString(this.getAtt('StatusMessage'));\n\n        this.firewallRuleGroupId = props.firewallRuleGroupId;\n        this.priority = props.priority;\n        this.vpcId = props.vpcId;\n        this.mutationProtection = props.mutationProtection;\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Route53Resolver::FirewallRuleGroupAssociation\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFirewallRuleGroupAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            firewallRuleGroupId: this.firewallRuleGroupId,\n            priority: this.priority,\n            vpcId: this.vpcId,\n            mutationProtection: this.mutationProtection,\n            name: this.name,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFirewallRuleGroupAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                        \nexport interface CfnResolverConfigProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly autodefinedReverseFlag: string;\n\n                                                                                                                                                                                                                                                                                            \n    readonly resourceId: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResolverConfigProps`\n *\n * @param properties - the TypeScript properties of a `CfnResolverConfigProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResolverConfigPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autodefinedReverseFlag', cdk.requiredValidator)(properties.autodefinedReverseFlag));\n    errors.collect(cdk.propertyValidator('autodefinedReverseFlag', cdk.validateString)(properties.autodefinedReverseFlag));\n    errors.collect(cdk.propertyValidator('resourceId', cdk.requiredValidator)(properties.resourceId));\n    errors.collect(cdk.propertyValidator('resourceId', cdk.validateString)(properties.resourceId));\n    return errors.wrap('supplied properties not correct for \"CfnResolverConfigProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverConfig` resource\n *\n * @param properties - the TypeScript properties of a `CfnResolverConfigProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResolverConfigPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResolverConfigPropsValidator(properties).assertSuccess();\n    return {\n        AutodefinedReverseFlag: cdk.stringToCloudFormation(properties.autodefinedReverseFlag),\n        ResourceId: cdk.stringToCloudFormation(properties.resourceId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResolverConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResolverConfigProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResolverConfigProps>();\n    ret.addPropertyResult('autodefinedReverseFlag', 'AutodefinedReverseFlag', cfn_parse.FromCloudFormation.getString(properties.AutodefinedReverseFlag));\n    ret.addPropertyResult('resourceId', 'ResourceId', cfn_parse.FromCloudFormation.getString(properties.ResourceId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                \nexport class CfnResolverConfig extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53Resolver::ResolverConfig\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResolverConfig {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResolverConfigPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResolverConfig(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                               \n    public readonly attrAutodefinedReverse: string;\n\n                                                                                                     \n    public readonly attrId: string;\n\n                                                                                                                            \n    public readonly attrOwnerId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public autodefinedReverseFlag: string;\n\n                                                                                                                                                                                                                                                                                            \n    public resourceId: string;\n\n                                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnResolverConfigProps) {\n        super(scope, id, { type: CfnResolverConfig.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'autodefinedReverseFlag', this);\n        cdk.requireProperty(props, 'resourceId', this);\n        this.attrAutodefinedReverse = cdk.Token.asString(this.getAtt('AutodefinedReverse'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrOwnerId = cdk.Token.asString(this.getAtt('OwnerId'));\n\n        this.autodefinedReverseFlag = props.autodefinedReverseFlag;\n        this.resourceId = props.resourceId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResolverConfig.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            autodefinedReverseFlag: this.autodefinedReverseFlag,\n            resourceId: this.resourceId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResolverConfigPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                    \nexport interface CfnResolverDNSSECConfigProps {\n\n                                                                                                                                                                                                                                                                                                                       \n    readonly resourceId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResolverDNSSECConfigProps`\n *\n * @param properties - the TypeScript properties of a `CfnResolverDNSSECConfigProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResolverDNSSECConfigPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resourceId', cdk.validateString)(properties.resourceId));\n    return errors.wrap('supplied properties not correct for \"CfnResolverDNSSECConfigProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverDNSSECConfig` resource\n *\n * @param properties - the TypeScript properties of a `CfnResolverDNSSECConfigProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverDNSSECConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResolverDNSSECConfigPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResolverDNSSECConfigPropsValidator(properties).assertSuccess();\n    return {\n        ResourceId: cdk.stringToCloudFormation(properties.resourceId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResolverDNSSECConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResolverDNSSECConfigProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResolverDNSSECConfigProps>();\n    ret.addPropertyResult('resourceId', 'ResourceId', properties.ResourceId != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \nexport class CfnResolverDNSSECConfig extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53Resolver::ResolverDNSSECConfig\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResolverDNSSECConfig {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResolverDNSSECConfigPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResolverDNSSECConfig(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                \n    public readonly attrId: string;\n\n                                                                                                                          \n    public readonly attrOwnerId: string;\n\n                                                                                                                                                            \n    public readonly attrValidationStatus: string;\n\n                                                                                                                                                                                                                                                                                                                       \n    public resourceId: string | undefined;\n\n                                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnResolverDNSSECConfigProps = {}) {\n        super(scope, id, { type: CfnResolverDNSSECConfig.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrOwnerId = cdk.Token.asString(this.getAtt('OwnerId'));\n        this.attrValidationStatus = cdk.Token.asString(this.getAtt('ValidationStatus'));\n\n        this.resourceId = props.resourceId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResolverDNSSECConfig.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            resourceId: this.resourceId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResolverDNSSECConfigPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                            \nexport interface CfnResolverEndpointProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly direction: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly ipAddresses: Array<CfnResolverEndpoint.IpAddressRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly securityGroupIds: string[];\n\n                                                                                                                                                                                                                                                                                                                  \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                             \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResolverEndpointProps`\n *\n * @param properties - the TypeScript properties of a `CfnResolverEndpointProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResolverEndpointPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('direction', cdk.requiredValidator)(properties.direction));\n    errors.collect(cdk.propertyValidator('direction', cdk.validateString)(properties.direction));\n    errors.collect(cdk.propertyValidator('ipAddresses', cdk.requiredValidator)(properties.ipAddresses));\n    errors.collect(cdk.propertyValidator('ipAddresses', cdk.listValidator(CfnResolverEndpoint_IpAddressRequestPropertyValidator))(properties.ipAddresses));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.requiredValidator)(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnResolverEndpointProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverEndpoint` resource\n *\n * @param properties - the TypeScript properties of a `CfnResolverEndpointProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverEndpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResolverEndpointPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResolverEndpointPropsValidator(properties).assertSuccess();\n    return {\n        Direction: cdk.stringToCloudFormation(properties.direction),\n        IpAddresses: cdk.listMapper(cfnResolverEndpointIpAddressRequestPropertyToCloudFormation)(properties.ipAddresses),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResolverEndpointPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResolverEndpointProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResolverEndpointProps>();\n    ret.addPropertyResult('direction', 'Direction', cfn_parse.FromCloudFormation.getString(properties.Direction));\n    ret.addPropertyResult('ipAddresses', 'IpAddresses', cfn_parse.FromCloudFormation.getArray(CfnResolverEndpointIpAddressRequestPropertyFromCloudFormation)(properties.IpAddresses));\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnResolverEndpoint extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53Resolver::ResolverEndpoint\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResolverEndpoint {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResolverEndpointPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResolverEndpoint(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                         \n    public readonly attrArn: string;\n\n                                                                                                                                                \n    public readonly attrDirection: string;\n\n                                                                                                                                    \n    public readonly attrHostVpcId: string;\n\n                                                                                                                                                    \n    public readonly attrIpAddressCount: string;\n\n                                                                                                                                              \n    public readonly attrName: string;\n\n                                                                                                          \n    public readonly attrResolverEndpointId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public direction: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public ipAddresses: Array<CfnResolverEndpoint.IpAddressRequestProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    public securityGroupIds: string[];\n\n                                                                                                                                                                                                                                                                                                                  \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                             \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnResolverEndpointProps) {\n        super(scope, id, { type: CfnResolverEndpoint.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'direction', this);\n        cdk.requireProperty(props, 'ipAddresses', this);\n        cdk.requireProperty(props, 'securityGroupIds', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrDirection = cdk.Token.asString(this.getAtt('Direction'));\n        this.attrHostVpcId = cdk.Token.asString(this.getAtt('HostVPCId'));\n        this.attrIpAddressCount = cdk.Token.asString(this.getAtt('IpAddressCount'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n        this.attrResolverEndpointId = cdk.Token.asString(this.getAtt('ResolverEndpointId'));\n\n        this.direction = props.direction;\n        this.ipAddresses = props.ipAddresses;\n        this.securityGroupIds = props.securityGroupIds;\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Route53Resolver::ResolverEndpoint\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResolverEndpoint.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            direction: this.direction,\n            ipAddresses: this.ipAddresses,\n            securityGroupIds: this.securityGroupIds,\n            name: this.name,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResolverEndpointPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnResolverEndpoint {\nn    export interface IpAddressRequestProperty {\n                                                                                                                                                                                                                                                                                                                \n        readonly ip?: string;\n                                                                                                                                                                                                                                                                                                                    \n        readonly subnetId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IpAddressRequestProperty`\n *\n * @param properties - the TypeScript properties of a `IpAddressRequestProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResolverEndpoint_IpAddressRequestPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ip', cdk.validateString)(properties.ip));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.requiredValidator)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    return errors.wrap('supplied properties not correct for \"IpAddressRequestProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverEndpoint.IpAddressRequest` resource\n *\n * @param properties - the TypeScript properties of a `IpAddressRequestProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverEndpoint.IpAddressRequest` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResolverEndpointIpAddressRequestPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResolverEndpoint_IpAddressRequestPropertyValidator(properties).assertSuccess();\n    return {\n        Ip: cdk.stringToCloudFormation(properties.ip),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResolverEndpointIpAddressRequestPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResolverEndpoint.IpAddressRequestProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResolverEndpoint.IpAddressRequestProperty>();\n    ret.addPropertyResult('ip', 'Ip', properties.Ip != null ? cfn_parse.FromCloudFormation.getString(properties.Ip) : undefined);\n    ret.addPropertyResult('subnetId', 'SubnetId', cfn_parse.FromCloudFormation.getString(properties.SubnetId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                \nexport interface CfnResolverQueryLoggingConfigProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly destinationArn?: string;\n\n                                                                                                                                                                                                                                                                      \n    readonly name?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResolverQueryLoggingConfigProps`\n *\n * @param properties - the TypeScript properties of a `CfnResolverQueryLoggingConfigProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResolverQueryLoggingConfigPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationArn', cdk.validateString)(properties.destinationArn));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CfnResolverQueryLoggingConfigProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverQueryLoggingConfig` resource\n *\n * @param properties - the TypeScript properties of a `CfnResolverQueryLoggingConfigProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverQueryLoggingConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResolverQueryLoggingConfigPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResolverQueryLoggingConfigPropsValidator(properties).assertSuccess();\n    return {\n        DestinationArn: cdk.stringToCloudFormation(properties.destinationArn),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResolverQueryLoggingConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResolverQueryLoggingConfigProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResolverQueryLoggingConfigProps>();\n    ret.addPropertyResult('destinationArn', 'DestinationArn', properties.DestinationArn != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationArn) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \nexport class CfnResolverQueryLoggingConfig extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53Resolver::ResolverQueryLoggingConfig\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResolverQueryLoggingConfig {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResolverQueryLoggingConfigPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResolverQueryLoggingConfig(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                              \n    public readonly attrArn: string;\n\n                                                                                                                                                    \n    public readonly attrAssociationCount: number;\n\n                                                                                                                                                                                                 \n    public readonly attrCreationTime: string;\n\n                                                                                                                                                                                                                                                                              \n    public readonly attrCreatorRequestId: string;\n\n                                                                                                     \n    public readonly attrId: string;\n\n                                                                                                                                               \n    public readonly attrOwnerId: string;\n\n                                                                                                                                                                                                                                                                                                      \n    public readonly attrShareStatus: string;\n\nn    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                    \n    public destinationArn: string | undefined;\n\n                                                                                                                                                                                                                                                                      \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnResolverQueryLoggingConfigProps = {}) {\n        super(scope, id, { type: CfnResolverQueryLoggingConfig.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrAssociationCount = cdk.Token.asNumber(this.getAtt('AssociationCount'));\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrCreatorRequestId = cdk.Token.asString(this.getAtt('CreatorRequestId'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrOwnerId = cdk.Token.asString(this.getAtt('OwnerId'));\n        this.attrShareStatus = cdk.Token.asString(this.getAtt('ShareStatus'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.destinationArn = props.destinationArn;\n        this.name = props.name;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResolverQueryLoggingConfig.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            destinationArn: this.destinationArn,\n            name: this.name,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResolverQueryLoggingConfigPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                                                      \nexport interface CfnResolverQueryLoggingConfigAssociationProps {\n\n                                                                                                                                                                                                                                                                                                                                            \n    readonly resolverQueryLogConfigId?: string;\n\n                                                                                                                                                                                                                                                                                                                                       \n    readonly resourceId?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResolverQueryLoggingConfigAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnResolverQueryLoggingConfigAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResolverQueryLoggingConfigAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('resolverQueryLogConfigId', cdk.validateString)(properties.resolverQueryLogConfigId));\n    errors.collect(cdk.propertyValidator('resourceId', cdk.validateString)(properties.resourceId));\n    return errors.wrap('supplied properties not correct for \"CfnResolverQueryLoggingConfigAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnResolverQueryLoggingConfigAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResolverQueryLoggingConfigAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResolverQueryLoggingConfigAssociationPropsValidator(properties).assertSuccess();\n    return {\n        ResolverQueryLogConfigId: cdk.stringToCloudFormation(properties.resolverQueryLogConfigId),\n        ResourceId: cdk.stringToCloudFormation(properties.resourceId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResolverQueryLoggingConfigAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResolverQueryLoggingConfigAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResolverQueryLoggingConfigAssociationProps>();\n    ret.addPropertyResult('resolverQueryLogConfigId', 'ResolverQueryLogConfigId', properties.ResolverQueryLogConfigId != null ? cfn_parse.FromCloudFormation.getString(properties.ResolverQueryLogConfigId) : undefined);\n    ret.addPropertyResult('resourceId', 'ResourceId', properties.ResourceId != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnResolverQueryLoggingConfigAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResolverQueryLoggingConfigAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResolverQueryLoggingConfigAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResolverQueryLoggingConfigAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                 \n    public readonly attrCreationTime: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public readonly attrError: string;\n\n                                                                                                                                                                                               \n    public readonly attrErrorMessage: string;\n\n                                                                                                  \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public readonly attrStatus: string;\n\n                                                                                                                                                                                                                                                                                                                                            \n    public resolverQueryLogConfigId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                       \n    public resourceId: string | undefined;\n\n                                                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnResolverQueryLoggingConfigAssociationProps = {}) {\n        super(scope, id, { type: CfnResolverQueryLoggingConfigAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrError = cdk.Token.asString(this.getAtt('Error'));\n        this.attrErrorMessage = cdk.Token.asString(this.getAtt('ErrorMessage'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrStatus = cdk.Token.asString(this.getAtt('Status'));\n\n        this.resolverQueryLogConfigId = props.resolverQueryLogConfigId;\n        this.resourceId = props.resourceId;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResolverQueryLoggingConfigAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            resolverQueryLogConfigId: this.resolverQueryLogConfigId,\n            resourceId: this.resourceId,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResolverQueryLoggingConfigAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                    \nexport interface CfnResolverRuleProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly domainName: string;\n\nn    readonly ruleType: string;\n\n                                                                                                                                                                                                                                                                                     \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly resolverEndpointId?: string;\n\n                                                                                                                                                                                                                                                                     \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly targetIps?: Array<CfnResolverRule.TargetAddressProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResolverRuleProps`\n *\n * @param properties - the TypeScript properties of a `CfnResolverRuleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResolverRulePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('domainName', cdk.requiredValidator)(properties.domainName));\n    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('resolverEndpointId', cdk.validateString)(properties.resolverEndpointId));\n    errors.collect(cdk.propertyValidator('ruleType', cdk.requiredValidator)(properties.ruleType));\n    errors.collect(cdk.propertyValidator('ruleType', cdk.validateString)(properties.ruleType));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('targetIps', cdk.listValidator(CfnResolverRule_TargetAddressPropertyValidator))(properties.targetIps));\n    return errors.wrap('supplied properties not correct for \"CfnResolverRuleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverRule` resource\n *\n * @param properties - the TypeScript properties of a `CfnResolverRuleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResolverRulePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResolverRulePropsValidator(properties).assertSuccess();\n    return {\n        DomainName: cdk.stringToCloudFormation(properties.domainName),\n        RuleType: cdk.stringToCloudFormation(properties.ruleType),\n        Name: cdk.stringToCloudFormation(properties.name),\n        ResolverEndpointId: cdk.stringToCloudFormation(properties.resolverEndpointId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TargetIps: cdk.listMapper(cfnResolverRuleTargetAddressPropertyToCloudFormation)(properties.targetIps),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResolverRulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResolverRuleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResolverRuleProps>();\n    ret.addPropertyResult('domainName', 'DomainName', cfn_parse.FromCloudFormation.getString(properties.DomainName));\n    ret.addPropertyResult('ruleType', 'RuleType', cfn_parse.FromCloudFormation.getString(properties.RuleType));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('resolverEndpointId', 'ResolverEndpointId', properties.ResolverEndpointId != null ? cfn_parse.FromCloudFormation.getString(properties.ResolverEndpointId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('targetIps', 'TargetIps', properties.TargetIps != null ? cfn_parse.FromCloudFormation.getArray(CfnResolverRuleTargetAddressPropertyFromCloudFormation)(properties.TargetIps) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnResolverRule extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53Resolver::ResolverRule\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResolverRule {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResolverRulePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResolverRule(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                             \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                              \n    public readonly attrDomainName: string;\n\n                                                                                                                                                               \n    public readonly attrName: string;\n\n                                                                                                                                                                                   \n    public readonly attrResolverEndpointId: string;\n\n                                                                                                                                                                                                                                                                                          \n    public readonly attrResolverRuleId: string;\n\n                                                                                                                                                                                                                                                                                                         \n    public readonly attrTargetIps: cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n    public domainName: string;\n\nn    public ruleType: string;\n\n                                                                                                                                                                                                                                                                                     \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                    \n    public resolverEndpointId: string | undefined;\n\n                                                                                                                                                                                                                                                                     \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public targetIps: Array<CfnResolverRule.TargetAddressProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnResolverRuleProps) {\n        super(scope, id, { type: CfnResolverRule.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'domainName', this);\n        cdk.requireProperty(props, 'ruleType', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrDomainName = cdk.Token.asString(this.getAtt('DomainName'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n        this.attrResolverEndpointId = cdk.Token.asString(this.getAtt('ResolverEndpointId'));\n        this.attrResolverRuleId = cdk.Token.asString(this.getAtt('ResolverRuleId'));\n        this.attrTargetIps = this.getAtt('TargetIps');\n\n        this.domainName = props.domainName;\n        this.ruleType = props.ruleType;\n        this.name = props.name;\n        this.resolverEndpointId = props.resolverEndpointId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Route53Resolver::ResolverRule\", props.tags, { tagPropertyName: 'tags' });\n        this.targetIps = props.targetIps;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResolverRule.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            domainName: this.domainName,\n            ruleType: this.ruleType,\n            name: this.name,\n            resolverEndpointId: this.resolverEndpointId,\n            tags: this.tags.renderTags(),\n            targetIps: this.targetIps,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResolverRulePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnResolverRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface TargetAddressProperty {\n                                                                                                                                                                                                                                                                                                                                          \n        readonly ip: string;\n                                                                                                                                                                                                                                                                                                         \n        readonly port?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetAddressProperty`\n *\n * @param properties - the TypeScript properties of a `TargetAddressProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResolverRule_TargetAddressPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ip', cdk.requiredValidator)(properties.ip));\n    errors.collect(cdk.propertyValidator('ip', cdk.validateString)(properties.ip));\n    errors.collect(cdk.propertyValidator('port', cdk.validateString)(properties.port));\n    return errors.wrap('supplied properties not correct for \"TargetAddressProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverRule.TargetAddress` resource\n *\n * @param properties - the TypeScript properties of a `TargetAddressProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverRule.TargetAddress` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResolverRuleTargetAddressPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResolverRule_TargetAddressPropertyValidator(properties).assertSuccess();\n    return {\n        Ip: cdk.stringToCloudFormation(properties.ip),\n        Port: cdk.stringToCloudFormation(properties.port),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResolverRuleTargetAddressPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResolverRule.TargetAddressProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResolverRule.TargetAddressProperty>();\n    ret.addPropertyResult('ip', 'Ip', cfn_parse.FromCloudFormation.getString(properties.Ip));\n    ret.addPropertyResult('port', 'Port', properties.Port != null ? cfn_parse.FromCloudFormation.getString(properties.Port) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                          \nexport interface CfnResolverRuleAssociationProps {\n\n                                                                                                                                                                                                                                                                                                                         \n    readonly resolverRuleId: string;\n\n                                                                                                                                                                                                                                                                                  \n    readonly vpcId: string;\n\n                                                                                                                                                                                                                                                                                 \n    readonly name?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResolverRuleAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnResolverRuleAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResolverRuleAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('resolverRuleId', cdk.requiredValidator)(properties.resolverRuleId));\n    errors.collect(cdk.propertyValidator('resolverRuleId', cdk.validateString)(properties.resolverRuleId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnResolverRuleAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverRuleAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnResolverRuleAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Route53Resolver::ResolverRuleAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResolverRuleAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResolverRuleAssociationPropsValidator(properties).assertSuccess();\n    return {\n        ResolverRuleId: cdk.stringToCloudFormation(properties.resolverRuleId),\n        VPCId: cdk.stringToCloudFormation(properties.vpcId),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResolverRuleAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResolverRuleAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResolverRuleAssociationProps>();\n    ret.addPropertyResult('resolverRuleId', 'ResolverRuleId', cfn_parse.FromCloudFormation.getString(properties.ResolverRuleId));\n    ret.addPropertyResult('vpcId', 'VPCId', cfn_parse.FromCloudFormation.getString(properties.VPCId));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnResolverRuleAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Route53Resolver::ResolverRuleAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResolverRuleAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResolverRuleAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResolverRuleAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                  \n    public readonly attrName: string;\n\n                                                                                                                                                                                                            \n    public readonly attrResolverRuleAssociationId: string;\n\n                                                                                                                                                                                                       \n    public readonly attrResolverRuleId: string;\n\n                                                                                                                                                            \n    public readonly attrVpcId: string;\n\n                                                                                                                                                                                                                                                                                                                         \n    public resolverRuleId: string;\n\n                                                                                                                                                                                                                                                                                  \n    public vpcId: string;\n\n                                                                                                                                                                                                                                                                                 \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                   \n    constructor(scope: constructs.Construct, id: string, props: CfnResolverRuleAssociationProps) {\n        super(scope, id, { type: CfnResolverRuleAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'resolverRuleId', this);\n        cdk.requireProperty(props, 'vpcId', this);\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n        this.attrResolverRuleAssociationId = cdk.Token.asString(this.getAtt('ResolverRuleAssociationId'));\n        this.attrResolverRuleId = cdk.Token.asString(this.getAtt('ResolverRuleId'));\n        this.attrVpcId = cdk.Token.asString(this.getAtt('VPCId'));\n\n        this.resolverRuleId = props.resolverRuleId;\n        this.vpcId = props.vpcId;\n        this.name = props.name;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResolverRuleAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            resolverRuleId: this.resolverRuleId,\n            vpcId: this.vpcId,\n            name: this.name,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResolverRuleAssociationPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
