{
  "version": 3,
  "sources": ["asset.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport * as s3 from '../../aws-s3';\nimport * as cdk from '../../core';\nimport * as cxapi from '../../cx-api';\nimport { Construct } from 'constructs';\nimport { toSymlinkFollow } from './compat';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { CopyOptions } from '../../assets';\n\nexport interface AssetOptions extends CopyOptions, cdk.FileCopyOptions, cdk.AssetOptions {\n                                                                                                                                                                                                                                 \n  readonly readers?: iam.IGrantable[];\n\nn  readonly sourceHash?: string;\n}\n\nexport interface AssetProps extends AssetOptions {\n                                                                                                                                                                                                                                                                                               \n  readonly path: string;\n}\n\n                                                                                                                                                       \nexport class Asset extends Construct implements cdk.IAsset {\n                                                                                       \n  public readonly s3BucketName: string;\n\n                                                                            \n  public readonly s3ObjectKey: string;\n\n                                                                                                    \n  public readonly s3Url: string;\n\n                                                                                                                                            \n  public readonly httpUrl: string;\n\n                                                                                                         \n  public readonly s3ObjectUrl: string;\n\n                                                                                                                                                                                                                        \n  public readonly assetPath: string;\n\n                                                           \n  public readonly bucket: s3.IBucket;\n\n                                                                                                                                \n  public readonly isFile: boolean;\n\n                                                                                                                                \n  public readonly isZipArchive: boolean;\n\n                                                                                         \n  public readonly sourceHash: string;\n\n  public readonly assetHash: string;\n\n  /**\n   * Indicates if this asset got bundled before staged, or not.\n   */\n  private readonly isBundled: boolean;\n\n  constructor(scope: Construct, id: string, props: AssetProps) {\n    super(scope, id);\n\n    this.isBundled = props.bundling != null;\n\n    // stage the asset source (conditionally).\n    const staging = new cdk.AssetStaging(this, 'Stage', {\n      ...props,\n      sourcePath: path.resolve(props.path),\n      follow: props.followSymlinks ?? toSymlinkFollow(props.follow),\n      assetHash: props.assetHash ?? props.sourceHash,\n    });\n\n    this.assetHash = staging.assetHash;\n    this.sourceHash = this.assetHash;\n\n    const stack = cdk.Stack.of(this);\n\n    this.assetPath = staging.relativeStagedPath(stack);\n\n    this.isFile = staging.packaging === cdk.FileAssetPackaging.FILE;\n\n    this.isZipArchive = staging.isArchive;\n\n    const location = stack.synthesizer.addFileAsset({\n      packaging: staging.packaging,\n      sourceHash: this.sourceHash,\n      fileName: this.assetPath,\n    });\n\n    this.s3BucketName = location.bucketName;\n    this.s3ObjectKey = location.objectKey;\n    this.s3ObjectUrl = location.s3ObjectUrl;\n    this.httpUrl = location.httpUrl;\n    this.s3Url = location.httpUrl; // for backwards compatibility\n\n    const kmsKey = location.kmsKeyArn ? kms.Key.fromKeyArn(this, 'Key', location.kmsKeyArn) : undefined;\n\n    this.bucket = s3.Bucket.fromBucketAttributes(this, 'AssetBucket', {\n      bucketName: this.s3BucketName,\n      encryptionKey: kmsKey,\n    });\n\n    for (const reader of (props.readers ?? [])) {\n      this.grantRead(reader);\n    }\n  }\n\nn  public addResourceMetadata(resource: cdk.CfnResource, resourceProperty: string) {\n    if (!this.node.tryGetContext(cxapi.ASSET_RESOURCE_METADATA_ENABLED_CONTEXT)) {\n      return; // not enabled\n    }\n\n    // tell tools such as SAM CLI that the \"Code\" property of this resource\n    // points to a local path in order to enable local invocation of this function.\n    resource.cfnOptions.metadata = resource.cfnOptions.metadata || { };\n    resource.cfnOptions.metadata[cxapi.ASSET_RESOURCE_METADATA_PATH_KEY] = this.assetPath;\n    resource.cfnOptions.metadata[cxapi.ASSET_RESOURCE_METADATA_IS_BUNDLED_KEY] = this.isBundled;\n    resource.cfnOptions.metadata[cxapi.ASSET_RESOURCE_METADATA_PROPERTY_KEY] = resourceProperty;\n  }\n\n                                                                               \n  public grantRead(grantee: iam.IGrantable) {\n    // we give permissions on all files in the bucket since we don't want to\n    // accidentally revoke permission on old versions when deploying a new\n    // version (for example, when using Lambda traffic shifting).\n    this.bucket.grantRead(grantee);\n  }\n}\n"],
  "mappings": "4MAAA,KAAA,QAAA,QAEA,IAAA,QAAA,iBACA,GAAA,QAAA,gBACA,IAAA,QAAA,cACA,MAAA,QAAA,gBACA,aAAA,QAAA,cACA,SAAA,QAAA,YAoBA,mBAA2B,cAAA,SAAS,CAsClC,YAAY,MAAkB,GAAY,MAAiB,cACzD,MAAM,MAAO,wEAEb,KAAK,UAAY,MAAM,UAAY,KAGnC,KAAM,SAAU,GAAI,KAAI,aAAa,KAAM,QAAS,IAC/C,MACH,WAAY,KAAK,QAAQ,MAAM,MAC/B,OAAM,IAAE,MAAM,kBAAc,MAAA,KAAA,OAAA,GAAI,SAAA,gBAAgB,MAAM,QACtD,UAAS,IAAE,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,MAAM,aAGtC,KAAK,UAAY,QAAQ,UACzB,KAAK,WAAa,KAAK,UAEvB,KAAM,OAAQ,IAAI,MAAM,GAAG,MAE3B,KAAK,UAAY,QAAQ,mBAAmB,OAE5C,KAAK,OAAS,QAAQ,YAAc,IAAI,mBAAmB,KAE3D,KAAK,aAAe,QAAQ,UAE5B,KAAM,UAAW,MAAM,YAAY,aAAa,CAC9C,UAAW,QAAQ,UACnB,WAAY,KAAK,WACjB,SAAU,KAAK,YAGjB,KAAK,aAAe,SAAS,WAC7B,KAAK,YAAc,SAAS,UAC5B,KAAK,YAAc,SAAS,YAC5B,KAAK,QAAU,SAAS,QACxB,KAAK,MAAQ,SAAS,QAEtB,KAAM,QAAS,SAAS,UAAY,IAAI,IAAI,WAAW,KAAM,MAAO,SAAS,WAAa,OAE1F,KAAK,OAAS,GAAG,OAAO,qBAAqB,KAAM,cAAe,CAChE,WAAY,KAAK,aACjB,cAAe,SAGjB,SAAW,UAAU,IAAC,MAAM,WAAO,MAAA,KAAA,OAAA,GAAI,GACrC,KAAK,UAAU,QAKZ,oBAAoB,SAA2B,iBAAwB,CAC5E,0DAAI,EAAC,KAAK,KAAK,cAAc,MAAM,0CAMnC,UAAS,WAAW,SAAW,SAAS,WAAW,UAAY,GAC/D,SAAS,WAAW,SAAS,MAAM,kCAAoC,KAAK,UAC5E,SAAS,WAAW,SAAS,MAAM,wCAA0C,KAAK,UAClF,SAAS,WAAW,SAAS,MAAM,sCAAwC,kBAItE,UAAU,QAAuB,iEAItC,KAAK,OAAO,UAAU,UAzG1B,QAAA,MAAA",
  "names": []
}
