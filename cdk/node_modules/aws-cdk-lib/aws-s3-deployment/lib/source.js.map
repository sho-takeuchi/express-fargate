{
  "version": 3,
  "sources": ["source.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as s3 from '../../aws-s3';\nimport * as s3_assets from '../../aws-s3-assets';\nimport { Construct } from 'constructs';\n\n                              \nexport interface SourceConfig {\n                                                  \n  readonly bucket: s3.IBucket;\n\n                                                                                 \n  readonly zipObjectKey: string;\n}\n\n                                    \nexport interface DeploymentSourceContext {\n                                         \n  readonly handlerRole: iam.IRole;\n}\n\n                                                      \nexport interface ISource {\n                                                                                                       \n  bind(scope: Construct, context?: DeploymentSourceContext): SourceConfig;\n}\n\n                                                                                                                                                                                                    \nexport class Source {\n                                                                                                                                                                                                                                                                                     \n  public static bucket(bucket: s3.IBucket, zipObjectKey: string): ISource {\n    return {\n      bind: (_: Construct, context?: DeploymentSourceContext) => {\n        if (!context) {\n          throw new Error('To use a Source.bucket(), context must be provided');\n        }\n\n        bucket.grantRead(context.handlerRole);\n        return { bucket, zipObjectKey };\n      },\n    };\n  }\n\n                                                                                                                                                                                                                                      \n  public static asset(path: string, options?: s3_assets.AssetOptions): ISource {\n    return {\n      bind(scope: Construct, context?: DeploymentSourceContext): SourceConfig {\n        if (!context) {\n          throw new Error('To use a Source.asset(), context must be provided');\n        }\n\n        let id = 1;\n        while (scope.node.tryFindChild(`Asset${id}`)) {\n          id++;\n        }\n        const asset = new s3_assets.Asset(scope, `Asset${id}`, {\n          path,\n          ...options,\n        });\n        if (!asset.isZipArchive) {\n          throw new Error('Asset path must be either a .zip file or a directory');\n        }\n        asset.grantRead(context.handlerRole);\n\n        return {\n          bucket: asset.bucket,\n          zipObjectKey: asset.s3ObjectKey,\n        };\n      },\n    };\n  }\n\n  private constructor() { }\n}\n"],
  "mappings": "6MAEA,UAAA,QAAA,uBAyBA,YAAmB,CA4CjB,aAAA,QA1Cc,QAAO,OAAoB,aAAoB,mEACpD,CACL,KAAM,CAAC,EAAc,UAAqC,CACxD,GAAI,CAAC,QACH,KAAM,IAAI,OAAM,sDAGlB,cAAO,UAAU,QAAQ,aAClB,CAAE,OAAQ,sBAMT,OAAM,KAAc,QAAgC,gFACzD,CACL,KAAK,MAAkB,QAAiC,CACtD,GAAI,CAAC,QACH,KAAM,IAAI,OAAM,qDAGlB,GAAI,IAAK,EACT,KAAO,MAAM,KAAK,aAAa,QAAQ,OACrC,KAEF,KAAM,OAAQ,GAAI,WAAU,MAAM,MAAO,QAAQ,KAAM,CACrD,QACG,UAEL,GAAI,CAAC,MAAM,aACT,KAAM,IAAI,OAAM,wDAElB,aAAM,UAAU,QAAQ,aAEjB,CACL,OAAQ,MAAM,OACd,aAAc,MAAM,gBAtC9B,QAAA,OAAA",
  "names": []
}
