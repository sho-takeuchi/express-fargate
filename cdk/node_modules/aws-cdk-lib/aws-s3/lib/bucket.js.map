{
  "version": 3,
  "sources": ["bucket.ts"],
  "sourcesContent": ["import { EOL } from 'os';\nimport * as path from 'path';\nimport * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport {\n  Fn, IResource, Lazy, RemovalPolicy, Resource, ResourceProps, Stack, Token,\n  CustomResource, CustomResourceProvider, CustomResourceProviderRuntime, FeatureFlags, Tags, Duration,\n} from '../../core';\nimport * as cxapi from '../../cx-api';\nimport { Construct } from 'constructs';\nimport { BucketPolicy } from './bucket-policy';\nimport { IBucketNotificationDestination } from './destination';\nimport { BucketNotifications } from './notifications-resource';\nimport * as perms from './perms';\nimport { LifecycleRule } from './rule';\nimport { CfnBucket } from './s3.generated';\nimport { parseBucketArn, parseBucketName } from './util';\n\nconst AUTO_DELETE_OBJECTS_RESOURCE_TYPE = 'Custom::S3AutoDeleteObjects';\nconst AUTO_DELETE_OBJECTS_TAG = 'aws-cdk:auto-delete-objects';\n\nexport interface IBucket extends IResource {\n                                                       \n  readonly bucketArn: string;\n\n                                                        \n  readonly bucketName: string;\n\n                                                               \n  readonly bucketWebsiteUrl: string;\n\n                                                                       \n  readonly bucketWebsiteDomainName: string;\n\n                                                                           \n  readonly bucketDomainName: string;\n\n                                                                           \n  readonly bucketDualStackDomainName: string;\n\n                                                                                  \n  readonly bucketRegionalDomainName: string;\n\n                                                                               \n  readonly isWebsite?: boolean;\n\n                                                                         \n  readonly encryptionKey?: kms.IKey;\n\n                                                                                                                                                                                               \n  policy?: BucketPolicy;\n\nn  addToResourcePolicy(permission: iam.PolicyStatement): iam.AddToResourcePolicyResult;\n\n                                                                                                                                                                                                                                                                                                                                                                                              \n  urlForObject(key?: string): string;\n\nn  transferAccelerationUrlForObject(key?: string, options?: TransferAccelerationUrlOptions): string;\n\nn  virtualHostedUrlForObject(key?: string, options?: VirtualHostedStyleUrlOptions): string;\n\n                                                                                                                                                                                                                                                          \n  s3UrlForObject(key?: string): string;\n\n                                                                                                                                                                \n  arnForObjects(keyPattern: string): string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                            \n  grantRead(identity: iam.IGrantable, objectsKeyPattern?: any): iam.Grant;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n  grantWrite(identity: iam.IGrantable, objectsKeyPattern?: any): iam.Grant;\n\n                                                                                                                                                                                                                                                                                                                                                                                         \n  grantPut(identity: iam.IGrantable, objectsKeyPattern?: any): iam.Grant;\n\nn  grantPutAcl(identity: iam.IGrantable, objectsKeyPattern?: string): iam.Grant;\n\n                                                                                                                                                                                                                                             \n  grantDelete(identity: iam.IGrantable, objectsKeyPattern?: any): iam.Grant;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n  grantReadWrite(identity: iam.IGrantable, objectsKeyPattern?: any): iam.Grant;\n\nn  grantPublicAccess(keyPrefix?: string, ...allowedActions: string[]): iam.Grant;\n\n                                                                                                                                                                                                                                                                                                                                              \n  onCloudTrailEvent(id: string, options?: OnCloudTrailBucketEventOptions): events.Rule;\n\nn  onCloudTrailPutObject(id: string, options?: OnCloudTrailBucketEventOptions): events.Rule;\n\nn  onCloudTrailWriteObject(id: string, options?: OnCloudTrailBucketEventOptions): events.Rule;\n\nn  addEventNotification(event: EventType, dest: IBucketNotificationDestination, ...filters: NotificationKeyFilter[]): void;\n\n                                                                                                                                                                                                                                                                                                     \n  addObjectCreatedNotification(dest: IBucketNotificationDestination, ...filters: NotificationKeyFilter[]): void\n\n                                                                                                                                                                                                                                                                                                    \n  addObjectRemovedNotification(dest: IBucketNotificationDestination, ...filters: NotificationKeyFilter[]): void;\n}\n\n                                                     \nexport interface BucketAttributes {\n                                                                                                                                         \n  readonly bucketArn?: string;\n\n                                                                                                                                                                                                                                                                            \n  readonly bucketName?: string;\n\n                                                                                            \n  readonly bucketDomainName?: string;\n\n                                                                                                                               \n  readonly bucketWebsiteUrl?: string;\n\n                                                                  \n  readonly bucketRegionalDomainName?: string;\n\n                                                           \n  readonly bucketDualStackDomainName?: string;\n\n                                                                                                                                                \n  readonly bucketWebsiteNewUrlFormat?: boolean;\n\n  readonly encryptionKey?: kms.IKey;\n\n                                                                                                        \n  readonly isWebsite?: boolean;\n\n                                                                                                                                                                            \n  readonly account?: string;\n\n                                                                                                                                                                \n  readonly region?: string;\n\n                                                                                                                  \n  readonly notificationsHandlerRole?: iam.IRole;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                             \nexport abstract class BucketBase extends Resource implements IBucket {\n  public abstract readonly bucketArn: string;\n  public abstract readonly bucketName: string;\n  public abstract readonly bucketDomainName: string;\n  public abstract readonly bucketWebsiteUrl: string;\n  public abstract readonly bucketWebsiteDomainName: string;\n  public abstract readonly bucketRegionalDomainName: string;\n  public abstract readonly bucketDualStackDomainName: string;\n\n                                                                         \n  public abstract readonly encryptionKey?: kms.IKey;\n\n                                                                               \n  public abstract readonly isWebsite?: boolean;\n\n                                                                                                                                                                                               \n  public abstract policy?: BucketPolicy;\n\n                                                                                                                                      \n  protected abstract autoCreatePolicy: boolean;\n\n                                                  \n  protected abstract disallowPublicAccess?: boolean;\n\n  private notifications?: BucketNotifications;\n\n  protected notificationsHandlerRole?: iam.IRole;\n\n  constructor(scope: Construct, id: string, props: ResourceProps = {}) {\n    super(scope, id, props);\n\n    this.node.addValidation({ validate: () => this.policy?.document.validateForResourcePolicy() ?? [] });\n  }\n\n                                                                                                                                                                                                                                                                                                                                                 \n  public onCloudTrailEvent(id: string, options: OnCloudTrailBucketEventOptions = {}): events.Rule {\n    const rule = new events.Rule(this, id, options);\n    rule.addTarget(options.target);\n    rule.addEventPattern({\n      source: ['aws.s3'],\n      detailType: ['AWS API Call via CloudTrail'],\n      detail: {\n        resources: {\n          ARN: options.paths?.map(p => this.arnForObjects(p)) ?? [this.bucketArn],\n        },\n      },\n    });\n    return rule;\n  }\n\nn  public onCloudTrailPutObject(id: string, options: OnCloudTrailBucketEventOptions = {}): events.Rule {\n    const rule = this.onCloudTrailEvent(id, options);\n    rule.addEventPattern({\n      detail: {\n        eventName: ['PutObject'],\n      },\n    });\n    return rule;\n  }\n\nn  public onCloudTrailWriteObject(id: string, options: OnCloudTrailBucketEventOptions = {}): events.Rule {\n    const rule = this.onCloudTrailEvent(id, options);\n    rule.addEventPattern({\n      detail: {\n        eventName: [\n          'CompleteMultipartUpload',\n          'CopyObject',\n          'PutObject',\n        ],\n        requestParameters: {\n          bucketName: [this.bucketName],\n          key: options.paths,\n        },\n      },\n    });\n    return rule;\n  }\n\nn  public addToResourcePolicy(permission: iam.PolicyStatement): iam.AddToResourcePolicyResult {\n    if (!this.policy && this.autoCreatePolicy) {\n      this.policy = new BucketPolicy(this, 'Policy', { bucket: this });\n    }\n\n    if (this.policy) {\n      this.policy.document.addStatements(permission);\n      return { statementAdded: true, policyDependable: this.policy };\n    }\n\n    return { statementAdded: false };\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n  public urlForObject(key?: string): string {\n    const stack = Stack.of(this);\n    const prefix = `https://s3.${this.env.region}.${stack.urlSuffix}/`;\n    if (typeof key !== 'string') {\n      return this.urlJoin(prefix, this.bucketName);\n    }\n    return this.urlJoin(prefix, this.bucketName, key);\n  }\n\nn  public transferAccelerationUrlForObject(key?: string, options?: TransferAccelerationUrlOptions): string {\n    const dualStack = options?.dualStack ? '.dualstack' : '';\n    const prefix = `https://${this.bucketName}.s3-accelerate${dualStack}.amazonaws.com/`;\n    if (typeof key !== 'string') {\n      return this.urlJoin(prefix);\n    }\n    return this.urlJoin(prefix, key);\n  }\n\nn  public virtualHostedUrlForObject(key?: string, options?: VirtualHostedStyleUrlOptions): string {\n    const domainName = options?.regional ?? true ? this.bucketRegionalDomainName : this.bucketDomainName;\n    const prefix = `https://${domainName}`;\n    if (typeof key !== 'string') {\n      return prefix;\n    }\n    return this.urlJoin(prefix, key);\n  }\n\n                                                                                                                                                                                                                                                                    \n  public s3UrlForObject(key?: string): string {\n    const prefix = 's3://';\n    if (typeof key !== 'string') {\n      return this.urlJoin(prefix, this.bucketName);\n    }\n    return this.urlJoin(prefix, this.bucketName, key);\n  }\n\n                                                                                                                                                                                                                                                                                                                                              \n  public arnForObjects(keyPattern: string): string {\n    return `${this.bucketArn}/${keyPattern}`;\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                            \n  public grantRead(identity: iam.IGrantable, objectsKeyPattern: any = '*') {\n    return this.grant(identity, perms.BUCKET_READ_ACTIONS, perms.KEY_READ_ACTIONS,\n      this.bucketArn,\n      this.arnForObjects(objectsKeyPattern));\n  }\n\n  public grantWrite(identity: iam.IGrantable, objectsKeyPattern: any = '*') {\n    return this.grant(identity, this.writeActions, perms.KEY_WRITE_ACTIONS,\n      this.bucketArn,\n      this.arnForObjects(objectsKeyPattern));\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                         \n  public grantPut(identity: iam.IGrantable, objectsKeyPattern: any = '*') {\n    return this.grant(identity, this.putActions, perms.KEY_WRITE_ACTIONS,\n      this.arnForObjects(objectsKeyPattern));\n  }\n\n  public grantPutAcl(identity: iam.IGrantable, objectsKeyPattern: string = '*') {\n    return this.grant(identity, perms.BUCKET_PUT_ACL_ACTIONS, [],\n      this.arnForObjects(objectsKeyPattern));\n  }\n\n                                                                                                                                                                                                                                             \n  public grantDelete(identity: iam.IGrantable, objectsKeyPattern: any = '*') {\n    return this.grant(identity, perms.BUCKET_DELETE_ACTIONS, [],\n      this.arnForObjects(objectsKeyPattern));\n  }\n\n  public grantReadWrite(identity: iam.IGrantable, objectsKeyPattern: any = '*') {\n    const bucketActions = perms.BUCKET_READ_ACTIONS.concat(this.writeActions);\n    // we need unique permissions because some permissions are common between read and write key actions\n    const keyActions = [...new Set([...perms.KEY_READ_ACTIONS, ...perms.KEY_WRITE_ACTIONS])];\n\n    return this.grant(identity,\n      bucketActions,\n      keyActions,\n      this.bucketArn,\n      this.arnForObjects(objectsKeyPattern));\n  }\n\nn  public grantPublicAccess(keyPrefix = '*', ...allowedActions: string[]) {\n    if (this.disallowPublicAccess) {\n      throw new Error(\"Cannot grant public access when 'blockPublicPolicy' is enabled\");\n    }\n\n    allowedActions = allowedActions.length > 0 ? allowedActions : ['s3:GetObject'];\n\n    return iam.Grant.addToPrincipalOrResource({\n      actions: allowedActions,\n      resourceArns: [this.arnForObjects(keyPrefix)],\n      grantee: new iam.AnyPrincipal(),\n      resource: this,\n    });\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n  public addEventNotification(event: EventType, dest: IBucketNotificationDestination, ...filters: NotificationKeyFilter[]) {\n    this.withNotifications(notifications => notifications.addNotification(event, dest, ...filters));\n  }\n\n  private withNotifications(cb: (notifications: BucketNotifications) => void) {\n    if (!this.notifications) {\n      this.notifications = new BucketNotifications(this, 'Notifications', {\n        bucket: this,\n        handlerRole: this.notificationsHandlerRole,\n      });\n    }\n    cb(this.notifications);\n  }\n\n                                                                                                                                                                                                                                                                                                  \n  public addObjectCreatedNotification(dest: IBucketNotificationDestination, ...filters: NotificationKeyFilter[]) {\n    return this.addEventNotification(EventType.OBJECT_CREATED, dest, ...filters);\n  }\n\n                                                                                                                                                                                                                                                                                                    \n  public addObjectRemovedNotification(dest: IBucketNotificationDestination, ...filters: NotificationKeyFilter[]) {\n    return this.addEventNotification(EventType.OBJECT_REMOVED, dest, ...filters);\n  }\n\n  private get writeActions(): string[] {\n    return [\n      ...perms.BUCKET_DELETE_ACTIONS,\n      ...this.putActions,\n    ];\n  }\n\n  private get putActions(): string[] {\n    return FeatureFlags.of(this).isEnabled(cxapi.S3_GRANT_WRITE_WITHOUT_ACL)\n      ? perms.BUCKET_PUT_ACTIONS\n      : perms.LEGACY_BUCKET_PUT_ACTIONS;\n  }\n\n  private urlJoin(...components: string[]): string {\n    return components.reduce((result, component) => {\n      if (result.endsWith('/')) {\n        result = result.slice(0, -1);\n      }\n      if (component.startsWith('/')) {\n        component = component.slice(1);\n      }\n      return `${result}/${component}`;\n    });\n  }\n\n  private grant(\n    grantee: iam.IGrantable,\n    bucketActions: string[],\n    keyActions: string[],\n    resourceArn: string, ...otherResourceArns: string[]) {\n    const resources = [resourceArn, ...otherResourceArns];\n\n    const ret = iam.Grant.addToPrincipalOrResource({\n      grantee,\n      actions: bucketActions,\n      resourceArns: resources,\n      resource: this,\n    });\n\n    if (this.encryptionKey && keyActions && keyActions.length !== 0) {\n      this.encryptionKey.grant(grantee, ...keyActions);\n    }\n\n    return ret;\n  }\n}\n\nexport interface BlockPublicAccessOptions {\n                                                                                                                                                                                               \n  readonly blockPublicAcls?: boolean;\n\n                                                                                                                                                                                                 \n  readonly blockPublicPolicy?: boolean;\n\n                                                                                                                                                                                                \n  readonly ignorePublicAcls?: boolean;\n\n                                                                                                                                                                                                    \n  readonly restrictPublicBuckets?: boolean;\n}\n\nexport class BlockPublicAccess {\n  public static readonly BLOCK_ALL = new BlockPublicAccess({\n    blockPublicAcls: true,\n    blockPublicPolicy: true,\n    ignorePublicAcls: true,\n    restrictPublicBuckets: true,\n  });\n\n  public static readonly BLOCK_ACLS = new BlockPublicAccess({\n    blockPublicAcls: true,\n    ignorePublicAcls: true,\n  });\n\n  public blockPublicAcls: boolean | undefined;\n  public blockPublicPolicy: boolean | undefined;\n  public ignorePublicAcls: boolean | undefined;\n  public restrictPublicBuckets: boolean | undefined;\n\n  constructor(options: BlockPublicAccessOptions) {\n    this.blockPublicAcls = options.blockPublicAcls;\n    this.blockPublicPolicy = options.blockPublicPolicy;\n    this.ignorePublicAcls = options.ignorePublicAcls;\n    this.restrictPublicBuckets = options.restrictPublicBuckets;\n  }\n}\n\n                                                                                                         \nexport interface BucketMetrics {\n                                                                   \n  readonly id: string;\n                                                                                           \n  readonly prefix?: string;\n                                                                                                                                                                                \n  readonly tagFilters?: { [tag: string]: any };\n}\n\n                                   \nexport enum HttpMethods {\n                                                                                    \n  GET = 'GET',\n                                                                                                                     \n  PUT = 'PUT',\n                                                                                                                       \n  HEAD = 'HEAD',\n                                                                                                                                                      \n  POST = 'POST',\n                                                                  \n  DELETE = 'DELETE',\n}\n\n                                                                        \nexport interface CorsRule {\n                                                                                         \n  readonly id?: string;\n                                                                                                                                                      \n  readonly maxAge?: number;\n                                                                                                                                  \n  readonly allowedHeaders?: string[];\n                                                                     \n  readonly allowedMethods: HttpMethods[];\n                                                                                             \n  readonly allowedOrigins: string[];\n                                                                                                                                                                   \n  readonly exposedHeaders?: string[];\n}\n\n                                   \nexport enum RedirectProtocol {\n  HTTP = 'http',\n  HTTPS = 'https',\n}\n\n                                                                                           \nexport interface RedirectTarget {\n                                                               \n  readonly hostName: string;\n\n                                                                                                                          \n  readonly protocol?: RedirectProtocol;\n}\n\n                                                \nexport enum InventoryFormat {\n                                                    \n  CSV = 'CSV',\n                                                        \n  PARQUET = 'Parquet',\n                                                        \n  ORC = 'ORC',\n}\n\n                                               \nexport enum InventoryFrequency {\n                                                 \n  DAILY = 'Daily',\n                                                                                            \n  WEEKLY = 'Weekly'\n}\n\n                                     \nexport enum InventoryObjectVersion {\n                                                                    \n  ALL = 'All',\n                                                                                \n  CURRENT = 'Current',\n}\n\n                                            \nexport interface InventoryDestination {\n                                                               \n  readonly bucket: IBucket;\n                                                                                                 \n  readonly prefix?: string;\n                                                                                                                                                                                                                                                                                                         \n  readonly bucketOwner?: string;\n}\n\n                                                                                                                                                   \nexport interface Inventory {\n                                                  \n  readonly destination: InventoryDestination;\n                                                                                                                                     \n  readonly objectsPrefix?: string;\n                                                                                    \n  readonly format?: InventoryFormat;\n                                                                                      \n  readonly enabled?: boolean;\n                                                                                   \n  readonly inventoryId?: string;\n                                                                                                                   \n  readonly frequency?: InventoryFrequency;\n                                                                                                                                               \n  readonly includeObjectVersions?: InventoryObjectVersion;\n                                                                                                                           \n  readonly optionalFields?: string[];\n}\n                                                                                                                                                 \nexport enum ObjectOwnership {\n                                                                                                                                                                                                                                                               \n  BUCKET_OWNER_ENFORCED = 'BucketOwnerEnforced',\n                                                                                      \n  BUCKET_OWNER_PREFERRED = 'BucketOwnerPreferred',\n                                                           \n  OBJECT_WRITER = 'ObjectWriter',\n}\n                                                 \nexport interface IntelligentTieringConfiguration {\n                                   \n  readonly name: string;\n\n\n                                                                                                                                                                             \n  readonly prefix?: string;\n\n                                                                                                                                                   \n  readonly tags?: Tag[];\n\n                                                                                                                                                                                                                           \n  readonly archiveAccessTierTime?: Duration;\n\n                                                                                                                                                                                                                                                  \n  readonly deepArchiveAccessTierTime?: Duration;\n}\n\nexport interface BucketProps {\n                                                                                                                                                                                                                                                                                                                              \n  readonly encryption?: BucketEncryption;\n\n                                                                                                                                                                                                                                                                                                                                                                                               \n  readonly encryptionKey?: kms.IKey;\n\n                                                                                                                                                                                                                                      \n  readonly enforceSSL?: boolean;\n\n                                                                                                                                                                                                                                                                       \n  readonly bucketKeyEnabled?: boolean;\n\n                                                                                                             \n  readonly bucketName?: string;\n\n                                                                                                                              \n  readonly removalPolicy?: RemovalPolicy;\n\nn  readonly autoDeleteObjects?: boolean;\n\n                                                                                                      \n  readonly versioned?: boolean;\n\n                                                                                                                                \n  readonly lifecycleRules?: LifecycleRule[];\n\n                                                                                                                                                                                 \n  readonly websiteIndexDocument?: string;\n\n                                                                                                                                                                                       \n  readonly websiteErrorDocument?: string;\n\n                                                                                                                                                                                                                                                                              \n  readonly websiteRedirect?: RedirectTarget;\n\n                                                                                                                                  \n  readonly websiteRoutingRules?: RoutingRule[];\n\n                                                                                                                                        \n  readonly accessControl?: BucketAccessControl;\n\n                                                                                                                                                      \n  readonly publicReadAccess?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                                \n  readonly blockPublicAccess?: BlockPublicAccess;\n\n                                                                                                                                                                                                                                          \n  readonly metrics?: BucketMetrics[];\n\n                                                                                                                                                                                                                    \n  readonly cors?: CorsRule[];\n\n                                                                                                                                                                                \n  readonly serverAccessLogsBucket?: IBucket;\n\n                                                                                                                                                                                                                           \n  readonly serverAccessLogsPrefix?: string;\n\n                                                                                                                                                                                                 \n  readonly inventories?: Inventory[];\n                                                                                                                                                                                                                                                 \n  readonly objectOwnership?: ObjectOwnership;\n\n                                                                                                                 \n  readonly transferAcceleration?: boolean;\n\n                                                                                                                  \n  readonly notificationsHandlerRole?: iam.IRole;\n\n                                                                                                                                                                                                           \n  readonly intelligentTieringConfigurations?: IntelligentTieringConfiguration[];\n}\n\n\n              \nexport interface Tag {\n\n                                \n  readonly key: string;\n                                 \n  readonly value: string;\n}\n\n                                                                                                                                                         \nexport class Bucket extends BucketBase {\n\n  public static fromBucketArn(scope: Construct, id: string, bucketArn: string): IBucket {\n    return Bucket.fromBucketAttributes(scope, id, { bucketArn });\n  }\n\n  public static fromBucketName(scope: Construct, id: string, bucketName: string): IBucket {\n    return Bucket.fromBucketAttributes(scope, id, { bucketName });\n  }\n\n                                                                                                                                                                                                                                                                                                                     \n  public static fromBucketAttributes(scope: Construct, id: string, attrs: BucketAttributes): IBucket {\n    const stack = Stack.of(scope);\n    const region = attrs.region ?? stack.region;\n    const urlSuffix = stack.urlSuffix;\n\n    const bucketName = parseBucketName(scope, attrs);\n    if (!bucketName) {\n      throw new Error('Bucket name is required');\n    }\n    Bucket.validateBucketName(bucketName);\n\n    const newUrlFormat = attrs.bucketWebsiteNewUrlFormat === undefined\n      ? false\n      : attrs.bucketWebsiteNewUrlFormat;\n\n    const websiteDomain = newUrlFormat\n      ? `${bucketName}.s3-website.${region}.${urlSuffix}`\n      : `${bucketName}.s3-website-${region}.${urlSuffix}`;\n\n    class Import extends BucketBase {\n      public readonly bucketName = bucketName!;\n      public readonly bucketArn = parseBucketArn(scope, attrs);\n      public readonly bucketDomainName = attrs.bucketDomainName || `${bucketName}.s3.${urlSuffix}`;\n      public readonly bucketWebsiteUrl = attrs.bucketWebsiteUrl || `http://${websiteDomain}`;\n      public readonly bucketWebsiteDomainName = attrs.bucketWebsiteUrl ? Fn.select(2, Fn.split('/', attrs.bucketWebsiteUrl)) : websiteDomain;\n      public readonly bucketRegionalDomainName = attrs.bucketRegionalDomainName || `${bucketName}.s3.${region}.${urlSuffix}`;\n      public readonly bucketDualStackDomainName = attrs.bucketDualStackDomainName || `${bucketName}.s3.dualstack.${region}.${urlSuffix}`;\n      public readonly bucketWebsiteNewUrlFormat = newUrlFormat;\n      public readonly encryptionKey = attrs.encryptionKey;\n      public readonly isWebsite = attrs.isWebsite ?? false;\n      public policy?: BucketPolicy = undefined;\n      protected autoCreatePolicy = false;\n      protected disallowPublicAccess = false;\n      protected notificationsHandlerRole = attrs.notificationsHandlerRole;\n\n      /**\n       * Exports this bucket from the stack.\n       */\n      public export() {\n        return attrs;\n      }\n    }\n\n    return new Import(scope, id, {\n      account: attrs.account,\n      region: attrs.region,\n    });\n  }\n\n                                                                                                                             \n  public static validateBucketName(physicalName: string): void {\n    const bucketName = physicalName;\n    if (!bucketName || Token.isUnresolved(bucketName)) {\n      // the name is a late-bound value, not a defined string,\n      // so skip validation\n      return;\n    }\n\n    const errors: string[] = [];\n\n    // Rules codified from https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\n    if (bucketName.length < 3 || bucketName.length > 63) {\n      errors.push('Bucket name must be at least 3 and no more than 63 characters');\n    }\n    const charsetMatch = bucketName.match(/[^a-z0-9.-]/);\n    if (charsetMatch) {\n      errors.push('Bucket name must only contain lowercase characters and the symbols, period (.) and dash (-) '\n        + `(offset: ${charsetMatch.index})`);\n    }\n    if (!/[a-z0-9]/.test(bucketName.charAt(0))) {\n      errors.push('Bucket name must start and end with a lowercase character or number '\n        + '(offset: 0)');\n    }\n    if (!/[a-z0-9]/.test(bucketName.charAt(bucketName.length - 1))) {\n      errors.push('Bucket name must start and end with a lowercase character or number '\n        + `(offset: ${bucketName.length - 1})`);\n    }\n    const consecSymbolMatch = bucketName.match(/\\.-|-\\.|\\.\\./);\n    if (consecSymbolMatch) {\n      errors.push('Bucket name must not have dash next to period, or period next to dash, or consecutive periods '\n        + `(offset: ${consecSymbolMatch.index})`);\n    }\n    if (/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/.test(bucketName)) {\n      errors.push('Bucket name must not resemble an IP address');\n    }\n\n    if (errors.length > 0) {\n      throw new Error(`Invalid S3 bucket name (value: ${bucketName})${EOL}${errors.join(EOL)}`);\n    }\n  }\n\n  public readonly bucketArn: string;\n  public readonly bucketName: string;\n  public readonly bucketDomainName: string;\n  public readonly bucketWebsiteUrl: string;\n  public readonly bucketWebsiteDomainName: string;\n  public readonly bucketDualStackDomainName: string;\n  public readonly bucketRegionalDomainName: string;\n\n  public readonly encryptionKey?: kms.IKey;\n  public readonly isWebsite?: boolean;\n  public policy?: BucketPolicy;\n  protected autoCreatePolicy = true;\n  protected disallowPublicAccess?: boolean;\n  private accessControl?: BucketAccessControl;\n  private readonly lifecycleRules: LifecycleRule[] = [];\n  private readonly versioned?: boolean;\n  private readonly metrics: BucketMetrics[] = [];\n  private readonly cors: CorsRule[] = [];\n  private readonly inventories: Inventory[] = [];\n  private readonly _resource: CfnBucket;\n\n  constructor(scope: Construct, id: string, props: BucketProps = {}) {\n    super(scope, id, {\n      physicalName: props.bucketName,\n    });\n\n    this.notificationsHandlerRole = props.notificationsHandlerRole;\n\n    const { bucketEncryption, encryptionKey } = this.parseEncryption(props);\n\n    Bucket.validateBucketName(this.physicalName);\n\n    const websiteConfiguration = this.renderWebsiteConfiguration(props);\n    this.isWebsite = (websiteConfiguration !== undefined);\n\n    const resource = new CfnBucket(this, 'Resource', {\n      bucketName: this.physicalName,\n      bucketEncryption,\n      versioningConfiguration: props.versioned ? { status: 'Enabled' } : undefined,\n      lifecycleConfiguration: Lazy.any({ produce: () => this.parseLifecycleConfiguration() }),\n      websiteConfiguration,\n      publicAccessBlockConfiguration: props.blockPublicAccess,\n      metricsConfigurations: Lazy.any({ produce: () => this.parseMetricConfiguration() }),\n      corsConfiguration: Lazy.any({ produce: () => this.parseCorsConfiguration() }),\n      accessControl: Lazy.string({ produce: () => this.accessControl }),\n      loggingConfiguration: this.parseServerAccessLogs(props),\n      inventoryConfigurations: Lazy.any({ produce: () => this.parseInventoryConfiguration() }),\n      ownershipControls: this.parseOwnershipControls(props),\n      accelerateConfiguration: props.transferAcceleration ? { accelerationStatus: 'Enabled' } : undefined,\n      intelligentTieringConfigurations: this.parseTieringConfig(props),\n    });\n    this._resource = resource;\n\n    resource.applyRemovalPolicy(props.removalPolicy);\n\n    this.versioned = props.versioned;\n    this.encryptionKey = encryptionKey;\n\n    this.bucketName = this.getResourceNameAttribute(resource.ref);\n    this.bucketArn = this.getResourceArnAttribute(resource.attrArn, {\n      region: '',\n      account: '',\n      service: 's3',\n      resource: this.physicalName,\n    });\n\n    this.bucketDomainName = resource.attrDomainName;\n    this.bucketWebsiteUrl = resource.attrWebsiteUrl;\n    this.bucketWebsiteDomainName = Fn.select(2, Fn.split('/', this.bucketWebsiteUrl));\n    this.bucketDualStackDomainName = resource.attrDualStackDomainName;\n    this.bucketRegionalDomainName = resource.attrRegionalDomainName;\n\n    this.disallowPublicAccess = props.blockPublicAccess && props.blockPublicAccess.blockPublicPolicy;\n    this.accessControl = props.accessControl;\n\n    // Enforce AWS Foundational Security Best Practice\n    if (props.enforceSSL) {\n      this.enforceSSLStatement();\n    }\n\n    if (props.serverAccessLogsBucket instanceof Bucket) {\n      props.serverAccessLogsBucket.allowLogDelivery();\n    }\n\n    for (const inventory of props.inventories ?? []) {\n      this.addInventory(inventory);\n    }\n\n    // Add all bucket metric configurations rules\n    (props.metrics || []).forEach(this.addMetric.bind(this));\n    // Add all cors configuration rules\n    (props.cors || []).forEach(this.addCorsRule.bind(this));\n\n    // Add all lifecycle rules\n    (props.lifecycleRules || []).forEach(this.addLifecycleRule.bind(this));\n\n    if (props.publicReadAccess) {\n      this.grantPublicAccess();\n    }\n\n    if (props.autoDeleteObjects) {\n      if (props.removalPolicy !== RemovalPolicy.DESTROY) {\n        throw new Error('Cannot use \\'autoDeleteObjects\\' property on a bucket without setting removal policy to \\'DESTROY\\'.');\n      }\n\n      this.enableAutoDeleteObjects();\n    }\n  }\n\n                                                                                         \n  public addLifecycleRule(rule: LifecycleRule) {\n    if ((rule.noncurrentVersionExpiration !== undefined\n      || (rule.noncurrentVersionTransitions && rule.noncurrentVersionTransitions.length > 0))\n      && !this.versioned) {\n      throw new Error(\"Cannot use 'noncurrent' rules on a nonversioned bucket\");\n    }\n\n    this.lifecycleRules.push(rule);\n  }\n\n                                                                                                                                                         \n  public addMetric(metric: BucketMetrics) {\n    this.metrics.push(metric);\n  }\n\n                                                                                                                                                     \n  public addCorsRule(rule: CorsRule) {\n    this.cors.push(rule);\n  }\n\n                                                                                                \n  public addInventory(inventory: Inventory): void {\n    this.inventories.push(inventory);\n  }\n\n  /**\n   * Adds an iam statement to enforce SSL requests only.\n   */\n  private enforceSSLStatement() {\n    const statement = new iam.PolicyStatement({\n      actions: ['s3:*'],\n      conditions: {\n        Bool: { 'aws:SecureTransport': 'false' },\n      },\n      effect: iam.Effect.DENY,\n      resources: [\n        this.bucketArn,\n        this.arnForObjects('*'),\n      ],\n      principals: [new iam.AnyPrincipal()],\n    });\n    this.addToResourcePolicy(statement);\n  }\n\n  /**\n   * Set up key properties and return the Bucket encryption property from the\n   * user's configuration.\n   */\n  private parseEncryption(props: BucketProps): {\n    bucketEncryption?: CfnBucket.BucketEncryptionProperty,\n    encryptionKey?: kms.IKey\n  } {\n\n    // default based on whether encryptionKey is specified\n    let encryptionType = props.encryption;\n    if (encryptionType === undefined) {\n      encryptionType = props.encryptionKey ? BucketEncryption.KMS : BucketEncryption.UNENCRYPTED;\n    }\n\n    // if encryption key is set, encryption must be set to KMS.\n    if (encryptionType !== BucketEncryption.KMS && props.encryptionKey) {\n      throw new Error(`encryptionKey is specified, so 'encryption' must be set to KMS (value: ${encryptionType})`);\n    }\n\n    // if bucketKeyEnabled is set, encryption must be set to KMS.\n    if (props.bucketKeyEnabled && encryptionType !== BucketEncryption.KMS) {\n      throw new Error(`bucketKeyEnabled is specified, so 'encryption' must be set to KMS (value: ${encryptionType})`);\n    }\n\n    if (encryptionType === BucketEncryption.UNENCRYPTED) {\n      return { bucketEncryption: undefined, encryptionKey: undefined };\n    }\n\n    if (encryptionType === BucketEncryption.KMS) {\n      const encryptionKey = props.encryptionKey || new kms.Key(this, 'Key', {\n        description: `Created by ${this.node.path}`,\n      });\n\n      const bucketEncryption = {\n        serverSideEncryptionConfiguration: [\n          {\n            bucketKeyEnabled: props.bucketKeyEnabled,\n            serverSideEncryptionByDefault: {\n              sseAlgorithm: 'aws:kms',\n              kmsMasterKeyId: encryptionKey.keyArn,\n            },\n          },\n        ],\n      };\n      return { encryptionKey, bucketEncryption };\n    }\n\n    if (encryptionType === BucketEncryption.S3_MANAGED) {\n      const bucketEncryption = {\n        serverSideEncryptionConfiguration: [\n          { serverSideEncryptionByDefault: { sseAlgorithm: 'AES256' } },\n        ],\n      };\n\n      return { bucketEncryption };\n    }\n\n    if (encryptionType === BucketEncryption.KMS_MANAGED) {\n      const bucketEncryption = {\n        serverSideEncryptionConfiguration: [\n          { serverSideEncryptionByDefault: { sseAlgorithm: 'aws:kms' } },\n        ],\n      };\n      return { bucketEncryption };\n    }\n\n    throw new Error(`Unexpected 'encryptionType': ${encryptionType}`);\n  }\n\n  /**\n   * Parse the lifecycle configuration out of the bucket props\n   * @param props Par\n   */\n  private parseLifecycleConfiguration(): CfnBucket.LifecycleConfigurationProperty | undefined {\n    if (!this.lifecycleRules || this.lifecycleRules.length === 0) {\n      return undefined;\n    }\n\n    const self = this;\n\n    return { rules: this.lifecycleRules.map(parseLifecycleRule) };\n\n    function parseLifecycleRule(rule: LifecycleRule): CfnBucket.RuleProperty {\n      const enabled = rule.enabled ?? true;\n\n      const x: CfnBucket.RuleProperty = {\n        // eslint-disable-next-line max-len\n        abortIncompleteMultipartUpload: rule.abortIncompleteMultipartUploadAfter !== undefined ? { daysAfterInitiation: rule.abortIncompleteMultipartUploadAfter.toDays() } : undefined,\n        expirationDate: rule.expirationDate,\n        expirationInDays: rule.expiration?.toDays(),\n        id: rule.id,\n        noncurrentVersionExpirationInDays: rule.noncurrentVersionExpiration && rule.noncurrentVersionExpiration.toDays(),\n        noncurrentVersionTransitions: mapOrUndefined(rule.noncurrentVersionTransitions, t => ({\n          storageClass: t.storageClass.value,\n          transitionInDays: t.transitionAfter.toDays(),\n          newerNoncurrentVersions: t.noncurrentVersionsToRetain,\n        })),\n        prefix: rule.prefix,\n        status: enabled ? 'Enabled' : 'Disabled',\n        transitions: mapOrUndefined(rule.transitions, t => ({\n          storageClass: t.storageClass.value,\n          transitionDate: t.transitionDate,\n          transitionInDays: t.transitionAfter && t.transitionAfter.toDays(),\n        })),\n        expiredObjectDeleteMarker: rule.expiredObjectDeleteMarker,\n        tagFilters: self.parseTagFilters(rule.tagFilters),\n      };\n\n      return x;\n    }\n  }\n\n  private parseServerAccessLogs(props: BucketProps): CfnBucket.LoggingConfigurationProperty | undefined {\n    if (!props.serverAccessLogsBucket && !props.serverAccessLogsPrefix) {\n      return undefined;\n    }\n\n    return {\n      destinationBucketName: props.serverAccessLogsBucket?.bucketName,\n      logFilePrefix: props.serverAccessLogsPrefix,\n    };\n  }\n\n  private parseMetricConfiguration(): CfnBucket.MetricsConfigurationProperty[] | undefined {\n    if (!this.metrics || this.metrics.length === 0) {\n      return undefined;\n    }\n\n    const self = this;\n\n    return this.metrics.map(parseMetric);\n\n    function parseMetric(metric: BucketMetrics): CfnBucket.MetricsConfigurationProperty {\n      return {\n        id: metric.id,\n        prefix: metric.prefix,\n        tagFilters: self.parseTagFilters(metric.tagFilters),\n      };\n    }\n  }\n\n  private parseCorsConfiguration(): CfnBucket.CorsConfigurationProperty | undefined {\n    if (!this.cors || this.cors.length === 0) {\n      return undefined;\n    }\n\n    return { corsRules: this.cors.map(parseCors) };\n\n    function parseCors(rule: CorsRule): CfnBucket.CorsRuleProperty {\n      return {\n        id: rule.id,\n        maxAge: rule.maxAge,\n        allowedHeaders: rule.allowedHeaders,\n        allowedMethods: rule.allowedMethods,\n        allowedOrigins: rule.allowedOrigins,\n        exposedHeaders: rule.exposedHeaders,\n      };\n    }\n  }\n\n  private parseTagFilters(tagFilters?: { [tag: string]: any }) {\n    if (!tagFilters || tagFilters.length === 0) {\n      return undefined;\n    }\n\n    return Object.keys(tagFilters).map(tag => ({\n      key: tag,\n      value: tagFilters[tag],\n    }));\n  }\n\n  private parseOwnershipControls({ objectOwnership }: BucketProps): CfnBucket.OwnershipControlsProperty | undefined {\n    if (!objectOwnership) {\n      return undefined;\n    }\n    return {\n      rules: [{\n        objectOwnership,\n      }],\n    };\n  }\n\n  private parseTieringConfig({ intelligentTieringConfigurations }: BucketProps): CfnBucket.IntelligentTieringConfigurationProperty[] | undefined {\n    if (!intelligentTieringConfigurations) {\n      return undefined;\n    }\n\n    return intelligentTieringConfigurations.map(config => {\n      const tierings = [];\n      if (config.archiveAccessTierTime) {\n        tierings.push({\n          accessTier: 'ARCHIVE_ACCESS',\n          days: config.archiveAccessTierTime.toDays({ integral: true }),\n        });\n      }\n      if (config.deepArchiveAccessTierTime) {\n        tierings.push({\n          accessTier: 'DEEP_ARCHIVE_ACCESS',\n          days: config.deepArchiveAccessTierTime.toDays({ integral: true }),\n        });\n      }\n      return {\n        id: config.name,\n        prefix: config.prefix,\n        status: 'Enabled',\n        tagFilters: config.tags,\n        tierings: tierings,\n      };\n    });\n  }\n\n  private renderWebsiteConfiguration(props: BucketProps): CfnBucket.WebsiteConfigurationProperty | undefined {\n    if (!props.websiteErrorDocument && !props.websiteIndexDocument && !props.websiteRedirect && !props.websiteRoutingRules) {\n      return undefined;\n    }\n\n    if (props.websiteErrorDocument && !props.websiteIndexDocument) {\n      throw new Error('\"websiteIndexDocument\" is required if \"websiteErrorDocument\" is set');\n    }\n\n    if (props.websiteRedirect && (props.websiteErrorDocument || props.websiteIndexDocument || props.websiteRoutingRules)) {\n      throw new Error('\"websiteIndexDocument\", \"websiteErrorDocument\" and, \"websiteRoutingRules\" cannot be set if \"websiteRedirect\" is used');\n    }\n\n    const routingRules = props.websiteRoutingRules ? props.websiteRoutingRules.map<CfnBucket.RoutingRuleProperty>((rule) => {\n      if (rule.condition && !rule.condition.httpErrorCodeReturnedEquals && !rule.condition.keyPrefixEquals) {\n        throw new Error('The condition property cannot be an empty object');\n      }\n\n      return {\n        redirectRule: {\n          hostName: rule.hostName,\n          httpRedirectCode: rule.httpRedirectCode,\n          protocol: rule.protocol,\n          replaceKeyWith: rule.replaceKey && rule.replaceKey.withKey,\n          replaceKeyPrefixWith: rule.replaceKey && rule.replaceKey.prefixWithKey,\n        },\n        routingRuleCondition: rule.condition,\n      };\n    }) : undefined;\n\n    return {\n      indexDocument: props.websiteIndexDocument,\n      errorDocument: props.websiteErrorDocument,\n      redirectAllRequestsTo: props.websiteRedirect,\n      routingRules,\n    };\n  }\n\n  /**\n   * Allows the LogDelivery group to write, fails if ACL was set differently.\n   *\n   * @see\n   * https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl\n   */\n  private allowLogDelivery() {\n    if (this.accessControl && this.accessControl !== BucketAccessControl.LOG_DELIVERY_WRITE) {\n      throw new Error(\"Cannot enable log delivery to this bucket because the bucket's ACL has been set and can't be changed\");\n    }\n\n    this.accessControl = BucketAccessControl.LOG_DELIVERY_WRITE;\n  }\n\n  private parseInventoryConfiguration(): CfnBucket.InventoryConfigurationProperty[] | undefined {\n    if (!this.inventories || this.inventories.length === 0) {\n      return undefined;\n    }\n\n    return this.inventories.map((inventory, index) => {\n      const format = inventory.format ?? InventoryFormat.CSV;\n      const frequency = inventory.frequency ?? InventoryFrequency.WEEKLY;\n      const id = inventory.inventoryId ?? `${this.node.id}Inventory${index}`;\n\n      if (inventory.destination.bucket instanceof Bucket) {\n        inventory.destination.bucket.addToResourcePolicy(new iam.PolicyStatement({\n          effect: iam.Effect.ALLOW,\n          actions: ['s3:PutObject'],\n          resources: [\n            inventory.destination.bucket.bucketArn,\n            inventory.destination.bucket.arnForObjects(`${inventory.destination.prefix ?? ''}*`),\n          ],\n          principals: [new iam.ServicePrincipal('s3.amazonaws.com')],\n          conditions: {\n            ArnLike: {\n              'aws:SourceArn': this.bucketArn,\n            },\n          },\n        }));\n      }\n\n      return {\n        id,\n        destination: {\n          bucketArn: inventory.destination.bucket.bucketArn,\n          bucketAccountId: inventory.destination.bucketOwner,\n          prefix: inventory.destination.prefix,\n          format,\n        },\n        enabled: inventory.enabled ?? true,\n        includedObjectVersions: inventory.includeObjectVersions ?? InventoryObjectVersion.ALL,\n        scheduleFrequency: frequency,\n        optionalFields: inventory.optionalFields,\n        prefix: inventory.objectsPrefix,\n      };\n    });\n  }\n\n  private enableAutoDeleteObjects() {\n    const provider = CustomResourceProvider.getOrCreateProvider(this, AUTO_DELETE_OBJECTS_RESOURCE_TYPE, {\n      codeDirectory: path.join(__dirname, 'auto-delete-objects-handler'),\n      runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n      description: `Lambda function for auto-deleting objects in ${this.bucketName} S3 bucket.`,\n    });\n\n    // Use a bucket policy to allow the custom resource to delete\n    // objects in the bucket\n    this.addToResourcePolicy(new iam.PolicyStatement({\n      actions: [\n        // list objects\n        ...perms.BUCKET_READ_METADATA_ACTIONS,\n        ...perms.BUCKET_DELETE_ACTIONS, // and then delete them\n      ],\n      resources: [\n        this.bucketArn,\n        this.arnForObjects('*'),\n      ],\n      principals: [new iam.ArnPrincipal(provider.roleArn)],\n    }));\n\n    const customResource = new CustomResource(this, 'AutoDeleteObjectsCustomResource', {\n      resourceType: AUTO_DELETE_OBJECTS_RESOURCE_TYPE,\n      serviceToken: provider.serviceToken,\n      properties: {\n        BucketName: this.bucketName,\n      },\n    });\n\n    // Ensure bucket policy is deleted AFTER the custom resource otherwise\n    // we don't have permissions to list and delete in the bucket.\n    // (add a `if` to make TS happy)\n    if (this.policy) {\n      customResource.node.addDependency(this.policy);\n    }\n\n    // We also tag the bucket to record the fact that we want it autodeleted.\n    // The custom resource will check this tag before actually doing the delete.\n    // Because tagging and untagging will ALWAYS happen before the CR is deleted,\n    // we can set `autoDeleteObjects: false` without the removal of the CR emptying\n    // the bucket as a side effect.\n    Tags.of(this._resource).add(AUTO_DELETE_OBJECTS_TAG, 'true');\n  }\n}\n\n                                                                      \nexport enum BucketEncryption {\n                                                         \n  UNENCRYPTED = 'NONE',\n\n                                                                             \n  KMS_MANAGED = 'MANAGED',\n\n                                                                        \n  S3_MANAGED = 'S3MANAGED',\n\n                                                                                                                                                                        \n  KMS = 'KMS',\n}\n\n                                                                                                                                                                                            \nexport enum EventType {\n                                                                                                                                                                                                                                                                                                                                            \n  OBJECT_CREATED = 's3:ObjectCreated:*',\n\n                                                                                                                                                                                                                                                                                                                                            \n  OBJECT_CREATED_PUT = 's3:ObjectCreated:Put',\n\n                                                                                                                                                                                                                                                                                                                                            \n  OBJECT_CREATED_POST = 's3:ObjectCreated:Post',\n\n                                                                                                                                                                                                                                                                                                                                            \n  OBJECT_CREATED_COPY = 's3:ObjectCreated:Copy',\n\n                                                                                                                                                                                                                                                                                                                                            \n  OBJECT_CREATED_COMPLETE_MULTIPART_UPLOAD = 's3:ObjectCreated:CompleteMultipartUpload',\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n  OBJECT_REMOVED = 's3:ObjectRemoved:*',\n\nn  OBJECT_REMOVED_DELETE = 's3:ObjectRemoved:Delete',\n\nn  OBJECT_REMOVED_DELETE_MARKER_CREATED = 's3:ObjectRemoved:DeleteMarkerCreated',\n\n                                                                                                                                                                                                                                                                                        \n  OBJECT_RESTORE_POST = 's3:ObjectRestore:Post',\n\n                                                                                                                                                                                                                                                                                      \n  OBJECT_RESTORE_COMPLETED = 's3:ObjectRestore:Completed',\n\n                                                                                                                                                                                  \n  REDUCED_REDUNDANCY_LOST_OBJECT = 's3:ReducedRedundancyLostObject',\n\n                                                                                                                                                                        \n  REPLICATION_OPERATION_FAILED_REPLICATION = 's3:Replication:OperationFailedReplication',\n\n                                                                                                                                                                                                          \n  REPLICATION_OPERATION_MISSED_THRESHOLD = 's3:Replication:OperationMissedThreshold',\n\n                                                                                                                                                                                                             \n  REPLICATION_OPERATION_REPLICATED_AFTER_THRESHOLD = 's3:Replication:OperationReplicatedAfterThreshold',\n\n                                                                                                                                                                                                        \n  REPLICATION_OPERATION_NOT_TRACKED = 's3:Replication:OperationNotTracked',\n\n                                                                                                                                                                             \n  LIFECYCLE_EXPIRATION = 's3:LifecycleExpiration:*',\n\n                                                                                                                                                                                                                                                  \n  LIFECYCLE_EXPIRATION_DELETE = 's3:LifecycleExpiration:Delete',\n\n                                                                                                                                                                                                               \n  LIFECYCLE_EXPIRATION_DELETE_MARKER_CREATED = 's3:LifecycleExpiration:DeleteMarkerCreated',\n\n                                                                                                                                                             \n  LIFECYCLE_TRANSITION = 's3:LifecycleTransition',\n\n                                                                                                                                                                                           \n  INTELLIGENT_TIERING = 's3:IntelligentTiering',\n\n                                                                                                                                                \n  OBJECT_TAGGING = 's3:ObjectTagging:*',\n\n                                                                                                                                     \n  OBJECT_TAGGING_PUT = 's3:ObjectTagging:Put',\n\n                                                                                                               \n  OBJECT_TAGGING_DELETE = 's3:ObjectTagging:Delete',\n\n                                                                                                                                                                                                                         \n  OBJECT_ACL_PUT = 's3:ObjectAcl:Put',\n}\n\nexport interface NotificationKeyFilter {\n                                                        \n  readonly prefix?: string;\n\n                                                        \n  readonly suffix?: string;\n}\n\n                                                       \nexport interface OnCloudTrailBucketEventOptions extends events.OnEventOptions {\n                                                                                                           \n  readonly paths?: string[];\n}\n\n                                                                                                                            \nexport enum BucketAccessControl {\n                                                                        \n  PRIVATE = 'Private',\n\n                                                                              \n  PUBLIC_READ = 'PublicRead',\n\n                                                                                                                                                     \n  PUBLIC_READ_WRITE = 'PublicReadWrite',\n\n                                                                                        \n  AUTHENTICATED_READ = 'AuthenticatedRead',\n\n                                                                                                                                                                   \n  LOG_DELIVERY_WRITE = 'LogDeliveryWrite',\n\n                                                                                                                                                                 \n  BUCKET_OWNER_READ = 'BucketOwnerRead',\n\n                                                                                                                                                                               \n  BUCKET_OWNER_FULL_CONTROL = 'BucketOwnerFullControl',\n\n                                                                                                                                 \n  AWS_EXEC_READ = 'AwsExecRead',\n}\n\nexport interface RoutingRuleCondition {\n                                                                                                                                                                                                                                                                                                                                                        \n  readonly httpErrorCodeReturnedEquals?: string;\n\n                                                                                                                                                                                                                                              \n  readonly keyPrefixEquals?: string;\n}\n\nexport class ReplaceKey {\n                                                                       \n  public static with(keyReplacement: string) {\n    return new this(keyReplacement);\n  }\n\n                                                                     \n  public static prefixWith(keyReplacement: string) {\n    return new this(undefined, keyReplacement);\n  }\n\n  private constructor(public readonly withKey?: string, public readonly prefixWithKey?: string) {\n  }\n}\n\n                                                                                                                                                                      \nexport interface RoutingRule {\n                                                                                                                              \n  readonly hostName?: string;\n\n                                                                                                           \n  readonly httpRedirectCode?: string;\n\n                                                                                                                          \n  readonly protocol?: RedirectProtocol;\n\n                                                                                                                                 \n  readonly replaceKey?: ReplaceKey;\n\n                                                                                                                              \n  readonly condition?: RoutingRuleCondition;\n}\n\n                                                         \nexport interface VirtualHostedStyleUrlOptions {\n                                                                                 \n  readonly regional?: boolean;\n}\n\n                                                            \nexport interface TransferAccelerationUrlOptions {\n                                                                                                  \n  readonly dualStack?: boolean;\n}\n\nfunction mapOrUndefined<T, U>(list: T[] | undefined, callback: (element: T) => U): U[] | undefined {\n  if (!list || list.length === 0) {\n    return undefined;\n  }\n\n  return list.map(callback);\n}\n"],
  "mappings": "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",
  "names": []
}
