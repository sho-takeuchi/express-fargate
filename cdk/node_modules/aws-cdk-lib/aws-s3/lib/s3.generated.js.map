{
  "version": 3,
  "sources": ["s3.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:53:56.965Z\",\"fingerprint\":\"W9Eg82XL1qgcq93e4bidYoHYzjEnfVrSVS7+JITWhU8=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                     \nexport interface CfnAccessPointProps {\n\n                                                                                                                                                                                                                             \n    readonly bucket: string;\n\n                                                                                                                                                                                                                                                                                                                  \n    readonly name?: string;\n\n                                                                                                                                                                                                                              \n    readonly policy?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                             \n    readonly policyStatus?: any | cdk.IResolvable;\n\nn    readonly publicAccessBlockConfiguration?: CfnAccessPoint.PublicAccessBlockConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                 \n    readonly vpcConfiguration?: CfnAccessPoint.VpcConfigurationProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAccessPointProps`\n *\n * @param properties - the TypeScript properties of a `CfnAccessPointProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAccessPointPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.requiredValidator)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('policy', cdk.validateObject)(properties.policy));\n    errors.collect(cdk.propertyValidator('policyStatus', cdk.validateObject)(properties.policyStatus));\n    errors.collect(cdk.propertyValidator('publicAccessBlockConfiguration', CfnAccessPoint_PublicAccessBlockConfigurationPropertyValidator)(properties.publicAccessBlockConfiguration));\n    errors.collect(cdk.propertyValidator('vpcConfiguration', CfnAccessPoint_VpcConfigurationPropertyValidator)(properties.vpcConfiguration));\n    return errors.wrap('supplied properties not correct for \"CfnAccessPointProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::AccessPoint` resource\n *\n * @param properties - the TypeScript properties of a `CfnAccessPointProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::AccessPoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAccessPointPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAccessPointPropsValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Policy: cdk.objectToCloudFormation(properties.policy),\n        PolicyStatus: cdk.objectToCloudFormation(properties.policyStatus),\n        PublicAccessBlockConfiguration: cfnAccessPointPublicAccessBlockConfigurationPropertyToCloudFormation(properties.publicAccessBlockConfiguration),\n        VpcConfiguration: cfnAccessPointVpcConfigurationPropertyToCloudFormation(properties.vpcConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAccessPointPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAccessPointProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAccessPointProps>();\n    ret.addPropertyResult('bucket', 'Bucket', cfn_parse.FromCloudFormation.getString(properties.Bucket));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('policy', 'Policy', properties.Policy != null ? cfn_parse.FromCloudFormation.getAny(properties.Policy) : undefined);\n    ret.addPropertyResult('policyStatus', 'PolicyStatus', properties.PolicyStatus != null ? cfn_parse.FromCloudFormation.getAny(properties.PolicyStatus) : undefined);\n    ret.addPropertyResult('publicAccessBlockConfiguration', 'PublicAccessBlockConfiguration', properties.PublicAccessBlockConfiguration != null ? CfnAccessPointPublicAccessBlockConfigurationPropertyFromCloudFormation(properties.PublicAccessBlockConfiguration) : undefined);\n    ret.addPropertyResult('vpcConfiguration', 'VpcConfiguration', properties.VpcConfiguration != null ? CfnAccessPointVpcConfigurationPropertyFromCloudFormation(properties.VpcConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnAccessPoint extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::S3::AccessPoint\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAccessPoint {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAccessPointPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAccessPoint(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                             \n    public readonly attrAlias: string;\n\n                                                                                                                              \n    public readonly attrArn: string;\n\n                                                                                          \n    public readonly attrName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public readonly attrNetworkOrigin: string;\n\n                                                                                                                                                                                                                             \n    public bucket: string;\n\n                                                                                                                                                                                                                                                                                                                  \n    public name: string | undefined;\n\n                                                                                                                                                                                                                              \n    public policy: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                             \n    public policyStatus: any | cdk.IResolvable | undefined;\n\nn    public publicAccessBlockConfiguration: CfnAccessPoint.PublicAccessBlockConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                 \n    public vpcConfiguration: CfnAccessPoint.VpcConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnAccessPointProps) {\n        super(scope, id, { type: CfnAccessPoint.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'bucket', this);\n        this.attrAlias = cdk.Token.asString(this.getAtt('Alias'));\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n        this.attrNetworkOrigin = cdk.Token.asString(this.getAtt('NetworkOrigin'));\n\n        this.bucket = props.bucket;\n        this.name = props.name;\n        this.policy = props.policy;\n        this.policyStatus = props.policyStatus;\n        this.publicAccessBlockConfiguration = props.publicAccessBlockConfiguration;\n        this.vpcConfiguration = props.vpcConfiguration;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAccessPoint.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            bucket: this.bucket,\n            name: this.name,\n            policy: this.policy,\n            policyStatus: this.policyStatus,\n            publicAccessBlockConfiguration: this.publicAccessBlockConfiguration,\n            vpcConfiguration: this.vpcConfiguration,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAccessPointPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnAccessPoint {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface PublicAccessBlockConfigurationProperty {\nn        readonly blockPublicAcls?: boolean | cdk.IResolvable;\nn        readonly blockPublicPolicy?: boolean | cdk.IResolvable;\nn        readonly ignorePublicAcls?: boolean | cdk.IResolvable;\nn        readonly restrictPublicBuckets?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PublicAccessBlockConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `PublicAccessBlockConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAccessPoint_PublicAccessBlockConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('blockPublicAcls', cdk.validateBoolean)(properties.blockPublicAcls));\n    errors.collect(cdk.propertyValidator('blockPublicPolicy', cdk.validateBoolean)(properties.blockPublicPolicy));\n    errors.collect(cdk.propertyValidator('ignorePublicAcls', cdk.validateBoolean)(properties.ignorePublicAcls));\n    errors.collect(cdk.propertyValidator('restrictPublicBuckets', cdk.validateBoolean)(properties.restrictPublicBuckets));\n    return errors.wrap('supplied properties not correct for \"PublicAccessBlockConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::AccessPoint.PublicAccessBlockConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `PublicAccessBlockConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::AccessPoint.PublicAccessBlockConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAccessPointPublicAccessBlockConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAccessPoint_PublicAccessBlockConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        BlockPublicAcls: cdk.booleanToCloudFormation(properties.blockPublicAcls),\n        BlockPublicPolicy: cdk.booleanToCloudFormation(properties.blockPublicPolicy),\n        IgnorePublicAcls: cdk.booleanToCloudFormation(properties.ignorePublicAcls),\n        RestrictPublicBuckets: cdk.booleanToCloudFormation(properties.restrictPublicBuckets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAccessPointPublicAccessBlockConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAccessPoint.PublicAccessBlockConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAccessPoint.PublicAccessBlockConfigurationProperty>();\n    ret.addPropertyResult('blockPublicAcls', 'BlockPublicAcls', properties.BlockPublicAcls != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BlockPublicAcls) : undefined);\n    ret.addPropertyResult('blockPublicPolicy', 'BlockPublicPolicy', properties.BlockPublicPolicy != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BlockPublicPolicy) : undefined);\n    ret.addPropertyResult('ignorePublicAcls', 'IgnorePublicAcls', properties.IgnorePublicAcls != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IgnorePublicAcls) : undefined);\n    ret.addPropertyResult('restrictPublicBuckets', 'RestrictPublicBuckets', properties.RestrictPublicBuckets != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RestrictPublicBuckets) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAccessPoint {\n                                                                                                                                                                                                                                                                                  \n    export interface VpcConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                              \n        readonly vpcId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `VpcConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAccessPoint_VpcConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"VpcConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::AccessPoint.VpcConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `VpcConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::AccessPoint.VpcConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAccessPointVpcConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAccessPoint_VpcConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAccessPointVpcConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAccessPoint.VpcConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAccessPoint.VpcConfigurationProperty>();\n    ret.addPropertyResult('vpcId', 'VpcId', properties.VpcId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                             \nexport interface CfnBucketProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly accelerateConfiguration?: CfnBucket.AccelerateConfigurationProperty | cdk.IResolvable;\n\nn    readonly accessControl?: string;\n\n                                                                                                                                                                                                                                                                          \n    readonly analyticsConfigurations?: Array<CfnBucket.AnalyticsConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly bucketEncryption?: CfnBucket.BucketEncryptionProperty | cdk.IResolvable;\n\nn    readonly bucketName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly corsConfiguration?: CfnBucket.CorsConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                \n    readonly intelligentTieringConfigurations?: Array<CfnBucket.IntelligentTieringConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly inventoryConfigurations?: Array<CfnBucket.InventoryConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly lifecycleConfiguration?: CfnBucket.LifecycleConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                              \n    readonly loggingConfiguration?: CfnBucket.LoggingConfigurationProperty | cdk.IResolvable;\n\nn    readonly metricsConfigurations?: Array<CfnBucket.MetricsConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                        \n    readonly notificationConfiguration?: CfnBucket.NotificationConfigurationProperty | cdk.IResolvable;\n\nn    readonly objectLockConfiguration?: CfnBucket.ObjectLockConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                               \n    readonly objectLockEnabled?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                               \n    readonly ownershipControls?: CfnBucket.OwnershipControlsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                   \n    readonly publicAccessBlockConfiguration?: CfnBucket.PublicAccessBlockConfigurationProperty | cdk.IResolvable;\n\nn    readonly replicationConfiguration?: CfnBucket.ReplicationConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly versioningConfiguration?: CfnBucket.VersioningConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    readonly websiteConfiguration?: CfnBucket.WebsiteConfigurationProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnBucketProps`\n *\n * @param properties - the TypeScript properties of a `CfnBucketProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucketPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accelerateConfiguration', CfnBucket_AccelerateConfigurationPropertyValidator)(properties.accelerateConfiguration));\n    errors.collect(cdk.propertyValidator('accessControl', cdk.validateString)(properties.accessControl));\n    errors.collect(cdk.propertyValidator('analyticsConfigurations', cdk.listValidator(CfnBucket_AnalyticsConfigurationPropertyValidator))(properties.analyticsConfigurations));\n    errors.collect(cdk.propertyValidator('bucketEncryption', CfnBucket_BucketEncryptionPropertyValidator)(properties.bucketEncryption));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('corsConfiguration', CfnBucket_CorsConfigurationPropertyValidator)(properties.corsConfiguration));\n    errors.collect(cdk.propertyValidator('intelligentTieringConfigurations', cdk.listValidator(CfnBucket_IntelligentTieringConfigurationPropertyValidator))(properties.intelligentTieringConfigurations));\n    errors.collect(cdk.propertyValidator('inventoryConfigurations', cdk.listValidator(CfnBucket_InventoryConfigurationPropertyValidator))(properties.inventoryConfigurations));\n    errors.collect(cdk.propertyValidator('lifecycleConfiguration', CfnBucket_LifecycleConfigurationPropertyValidator)(properties.lifecycleConfiguration));\n    errors.collect(cdk.propertyValidator('loggingConfiguration', CfnBucket_LoggingConfigurationPropertyValidator)(properties.loggingConfiguration));\n    errors.collect(cdk.propertyValidator('metricsConfigurations', cdk.listValidator(CfnBucket_MetricsConfigurationPropertyValidator))(properties.metricsConfigurations));\n    errors.collect(cdk.propertyValidator('notificationConfiguration', CfnBucket_NotificationConfigurationPropertyValidator)(properties.notificationConfiguration));\n    errors.collect(cdk.propertyValidator('objectLockConfiguration', CfnBucket_ObjectLockConfigurationPropertyValidator)(properties.objectLockConfiguration));\n    errors.collect(cdk.propertyValidator('objectLockEnabled', cdk.validateBoolean)(properties.objectLockEnabled));\n    errors.collect(cdk.propertyValidator('ownershipControls', CfnBucket_OwnershipControlsPropertyValidator)(properties.ownershipControls));\n    errors.collect(cdk.propertyValidator('publicAccessBlockConfiguration', CfnBucket_PublicAccessBlockConfigurationPropertyValidator)(properties.publicAccessBlockConfiguration));\n    errors.collect(cdk.propertyValidator('replicationConfiguration', CfnBucket_ReplicationConfigurationPropertyValidator)(properties.replicationConfiguration));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('versioningConfiguration', CfnBucket_VersioningConfigurationPropertyValidator)(properties.versioningConfiguration));\n    errors.collect(cdk.propertyValidator('websiteConfiguration', CfnBucket_WebsiteConfigurationPropertyValidator)(properties.websiteConfiguration));\n    return errors.wrap('supplied properties not correct for \"CfnBucketProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket` resource\n *\n * @param properties - the TypeScript properties of a `CfnBucketProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucketPropsValidator(properties).assertSuccess();\n    return {\n        AccelerateConfiguration: cfnBucketAccelerateConfigurationPropertyToCloudFormation(properties.accelerateConfiguration),\n        AccessControl: cdk.stringToCloudFormation(properties.accessControl),\n        AnalyticsConfigurations: cdk.listMapper(cfnBucketAnalyticsConfigurationPropertyToCloudFormation)(properties.analyticsConfigurations),\n        BucketEncryption: cfnBucketBucketEncryptionPropertyToCloudFormation(properties.bucketEncryption),\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        CorsConfiguration: cfnBucketCorsConfigurationPropertyToCloudFormation(properties.corsConfiguration),\n        IntelligentTieringConfigurations: cdk.listMapper(cfnBucketIntelligentTieringConfigurationPropertyToCloudFormation)(properties.intelligentTieringConfigurations),\n        InventoryConfigurations: cdk.listMapper(cfnBucketInventoryConfigurationPropertyToCloudFormation)(properties.inventoryConfigurations),\n        LifecycleConfiguration: cfnBucketLifecycleConfigurationPropertyToCloudFormation(properties.lifecycleConfiguration),\n        LoggingConfiguration: cfnBucketLoggingConfigurationPropertyToCloudFormation(properties.loggingConfiguration),\n        MetricsConfigurations: cdk.listMapper(cfnBucketMetricsConfigurationPropertyToCloudFormation)(properties.metricsConfigurations),\n        NotificationConfiguration: cfnBucketNotificationConfigurationPropertyToCloudFormation(properties.notificationConfiguration),\n        ObjectLockConfiguration: cfnBucketObjectLockConfigurationPropertyToCloudFormation(properties.objectLockConfiguration),\n        ObjectLockEnabled: cdk.booleanToCloudFormation(properties.objectLockEnabled),\n        OwnershipControls: cfnBucketOwnershipControlsPropertyToCloudFormation(properties.ownershipControls),\n        PublicAccessBlockConfiguration: cfnBucketPublicAccessBlockConfigurationPropertyToCloudFormation(properties.publicAccessBlockConfiguration),\n        ReplicationConfiguration: cfnBucketReplicationConfigurationPropertyToCloudFormation(properties.replicationConfiguration),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VersioningConfiguration: cfnBucketVersioningConfigurationPropertyToCloudFormation(properties.versioningConfiguration),\n        WebsiteConfiguration: cfnBucketWebsiteConfigurationPropertyToCloudFormation(properties.websiteConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucketProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucketProps>();\n    ret.addPropertyResult('accelerateConfiguration', 'AccelerateConfiguration', properties.AccelerateConfiguration != null ? CfnBucketAccelerateConfigurationPropertyFromCloudFormation(properties.AccelerateConfiguration) : undefined);\n    ret.addPropertyResult('accessControl', 'AccessControl', properties.AccessControl != null ? cfn_parse.FromCloudFormation.getString(properties.AccessControl) : undefined);\n    ret.addPropertyResult('analyticsConfigurations', 'AnalyticsConfigurations', properties.AnalyticsConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketAnalyticsConfigurationPropertyFromCloudFormation)(properties.AnalyticsConfigurations) : undefined);\n    ret.addPropertyResult('bucketEncryption', 'BucketEncryption', properties.BucketEncryption != null ? CfnBucketBucketEncryptionPropertyFromCloudFormation(properties.BucketEncryption) : undefined);\n    ret.addPropertyResult('bucketName', 'BucketName', properties.BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.BucketName) : undefined);\n    ret.addPropertyResult('corsConfiguration', 'CorsConfiguration', properties.CorsConfiguration != null ? CfnBucketCorsConfigurationPropertyFromCloudFormation(properties.CorsConfiguration) : undefined);\n    ret.addPropertyResult('intelligentTieringConfigurations', 'IntelligentTieringConfigurations', properties.IntelligentTieringConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketIntelligentTieringConfigurationPropertyFromCloudFormation)(properties.IntelligentTieringConfigurations) : undefined);\n    ret.addPropertyResult('inventoryConfigurations', 'InventoryConfigurations', properties.InventoryConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketInventoryConfigurationPropertyFromCloudFormation)(properties.InventoryConfigurations) : undefined);\n    ret.addPropertyResult('lifecycleConfiguration', 'LifecycleConfiguration', properties.LifecycleConfiguration != null ? CfnBucketLifecycleConfigurationPropertyFromCloudFormation(properties.LifecycleConfiguration) : undefined);\n    ret.addPropertyResult('loggingConfiguration', 'LoggingConfiguration', properties.LoggingConfiguration != null ? CfnBucketLoggingConfigurationPropertyFromCloudFormation(properties.LoggingConfiguration) : undefined);\n    ret.addPropertyResult('metricsConfigurations', 'MetricsConfigurations', properties.MetricsConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketMetricsConfigurationPropertyFromCloudFormation)(properties.MetricsConfigurations) : undefined);\n    ret.addPropertyResult('notificationConfiguration', 'NotificationConfiguration', properties.NotificationConfiguration != null ? CfnBucketNotificationConfigurationPropertyFromCloudFormation(properties.NotificationConfiguration) : undefined);\n    ret.addPropertyResult('objectLockConfiguration', 'ObjectLockConfiguration', properties.ObjectLockConfiguration != null ? CfnBucketObjectLockConfigurationPropertyFromCloudFormation(properties.ObjectLockConfiguration) : undefined);\n    ret.addPropertyResult('objectLockEnabled', 'ObjectLockEnabled', properties.ObjectLockEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ObjectLockEnabled) : undefined);\n    ret.addPropertyResult('ownershipControls', 'OwnershipControls', properties.OwnershipControls != null ? CfnBucketOwnershipControlsPropertyFromCloudFormation(properties.OwnershipControls) : undefined);\n    ret.addPropertyResult('publicAccessBlockConfiguration', 'PublicAccessBlockConfiguration', properties.PublicAccessBlockConfiguration != null ? CfnBucketPublicAccessBlockConfigurationPropertyFromCloudFormation(properties.PublicAccessBlockConfiguration) : undefined);\n    ret.addPropertyResult('replicationConfiguration', 'ReplicationConfiguration', properties.ReplicationConfiguration != null ? CfnBucketReplicationConfigurationPropertyFromCloudFormation(properties.ReplicationConfiguration) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('versioningConfiguration', 'VersioningConfiguration', properties.VersioningConfiguration != null ? CfnBucketVersioningConfigurationPropertyFromCloudFormation(properties.VersioningConfiguration) : undefined);\n    ret.addPropertyResult('websiteConfiguration', 'WebsiteConfiguration', properties.WebsiteConfiguration != null ? CfnBucketWebsiteConfigurationPropertyFromCloudFormation(properties.WebsiteConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnBucket extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::S3::Bucket\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnBucket {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnBucketPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnBucket(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                   \n    public readonly attrArn: string;\n\n                                                                                                                                                                                 \n    public readonly attrDomainName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                     \n    public readonly attrDualStackDomainName: string;\n\n                                                                                                                                                                                                          \n    public readonly attrRegionalDomainName: string;\n\n                                                                                                                                                                                                                                                                                                                              \n    public readonly attrWebsiteUrl: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public accelerateConfiguration: CfnBucket.AccelerateConfigurationProperty | cdk.IResolvable | undefined;\n\nn    public accessControl: string | undefined;\n\n                                                                                                                                                                                                                                                                          \n    public analyticsConfigurations: Array<CfnBucket.AnalyticsConfigurationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public bucketEncryption: CfnBucket.BucketEncryptionProperty | cdk.IResolvable | undefined;\n\nn    public bucketName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public corsConfiguration: CfnBucket.CorsConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                \n    public intelligentTieringConfigurations: Array<CfnBucket.IntelligentTieringConfigurationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public inventoryConfigurations: Array<CfnBucket.InventoryConfigurationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public lifecycleConfiguration: CfnBucket.LifecycleConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                              \n    public loggingConfiguration: CfnBucket.LoggingConfigurationProperty | cdk.IResolvable | undefined;\n\nn    public metricsConfigurations: Array<CfnBucket.MetricsConfigurationProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                        \n    public notificationConfiguration: CfnBucket.NotificationConfigurationProperty | cdk.IResolvable | undefined;\n\nn    public objectLockConfiguration: CfnBucket.ObjectLockConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                               \n    public objectLockEnabled: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                               \n    public ownershipControls: CfnBucket.OwnershipControlsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                   \n    public publicAccessBlockConfiguration: CfnBucket.PublicAccessBlockConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public replicationConfiguration: CfnBucket.ReplicationConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                              \n    public versioningConfiguration: CfnBucket.VersioningConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    public websiteConfiguration: CfnBucket.WebsiteConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnBucketProps = {}) {\n        super(scope, id, { type: CfnBucket.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrDomainName = cdk.Token.asString(this.getAtt('DomainName'));\n        this.attrDualStackDomainName = cdk.Token.asString(this.getAtt('DualStackDomainName'));\n        this.attrRegionalDomainName = cdk.Token.asString(this.getAtt('RegionalDomainName'));\n        this.attrWebsiteUrl = cdk.Token.asString(this.getAtt('WebsiteURL'));\n\n        this.accelerateConfiguration = props.accelerateConfiguration;\n        this.accessControl = props.accessControl;\n        this.analyticsConfigurations = props.analyticsConfigurations;\n        this.bucketEncryption = props.bucketEncryption;\n        this.bucketName = props.bucketName;\n        this.corsConfiguration = props.corsConfiguration;\n        this.intelligentTieringConfigurations = props.intelligentTieringConfigurations;\n        this.inventoryConfigurations = props.inventoryConfigurations;\n        this.lifecycleConfiguration = props.lifecycleConfiguration;\n        this.loggingConfiguration = props.loggingConfiguration;\n        this.metricsConfigurations = props.metricsConfigurations;\n        this.notificationConfiguration = props.notificationConfiguration;\n        this.objectLockConfiguration = props.objectLockConfiguration;\n        this.objectLockEnabled = props.objectLockEnabled;\n        this.ownershipControls = props.ownershipControls;\n        this.publicAccessBlockConfiguration = props.publicAccessBlockConfiguration;\n        this.replicationConfiguration = props.replicationConfiguration;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::S3::Bucket\", props.tags, { tagPropertyName: 'tags' });\n        this.versioningConfiguration = props.versioningConfiguration;\n        this.websiteConfiguration = props.websiteConfiguration;\n        if (this.node.scope && cdk.Resource.isResource(this.node.scope)) {\n            this.node.addValidation({ validate: () => this.cfnOptions.deletionPolicy === undefined\n              ? ['\\'AWS::S3::Bucket\\' is a stateful resource type, and you must specify a Removal Policy for it. Call \\'resource.applyRemovalPolicy()\\'.']\n              : [] });\n        }\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnBucket.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            accelerateConfiguration: this.accelerateConfiguration,\n            accessControl: this.accessControl,\n            analyticsConfigurations: this.analyticsConfigurations,\n            bucketEncryption: this.bucketEncryption,\n            bucketName: this.bucketName,\n            corsConfiguration: this.corsConfiguration,\n            intelligentTieringConfigurations: this.intelligentTieringConfigurations,\n            inventoryConfigurations: this.inventoryConfigurations,\n            lifecycleConfiguration: this.lifecycleConfiguration,\n            loggingConfiguration: this.loggingConfiguration,\n            metricsConfigurations: this.metricsConfigurations,\n            notificationConfiguration: this.notificationConfiguration,\n            objectLockConfiguration: this.objectLockConfiguration,\n            objectLockEnabled: this.objectLockEnabled,\n            ownershipControls: this.ownershipControls,\n            publicAccessBlockConfiguration: this.publicAccessBlockConfiguration,\n            replicationConfiguration: this.replicationConfiguration,\n            tags: this.tags.renderTags(),\n            versioningConfiguration: this.versioningConfiguration,\n            websiteConfiguration: this.websiteConfiguration,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnBucketPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnBucket {\nn    export interface AbortIncompleteMultipartUploadProperty {\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly daysAfterInitiation: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AbortIncompleteMultipartUploadProperty`\n *\n * @param properties - the TypeScript properties of a `AbortIncompleteMultipartUploadProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_AbortIncompleteMultipartUploadPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('daysAfterInitiation', cdk.requiredValidator)(properties.daysAfterInitiation));\n    errors.collect(cdk.propertyValidator('daysAfterInitiation', cdk.validateNumber)(properties.daysAfterInitiation));\n    return errors.wrap('supplied properties not correct for \"AbortIncompleteMultipartUploadProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.AbortIncompleteMultipartUpload` resource\n *\n * @param properties - the TypeScript properties of a `AbortIncompleteMultipartUploadProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.AbortIncompleteMultipartUpload` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketAbortIncompleteMultipartUploadPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_AbortIncompleteMultipartUploadPropertyValidator(properties).assertSuccess();\n    return {\n        DaysAfterInitiation: cdk.numberToCloudFormation(properties.daysAfterInitiation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketAbortIncompleteMultipartUploadPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.AbortIncompleteMultipartUploadProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.AbortIncompleteMultipartUploadProperty>();\n    ret.addPropertyResult('daysAfterInitiation', 'DaysAfterInitiation', cfn_parse.FromCloudFormation.getNumber(properties.DaysAfterInitiation));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface AccelerateConfigurationProperty {\n                                                                                                                                                                                                                                                                                                     \n        readonly accelerationStatus: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccelerateConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `AccelerateConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_AccelerateConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accelerationStatus', cdk.requiredValidator)(properties.accelerationStatus));\n    errors.collect(cdk.propertyValidator('accelerationStatus', cdk.validateString)(properties.accelerationStatus));\n    return errors.wrap('supplied properties not correct for \"AccelerateConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.AccelerateConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `AccelerateConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.AccelerateConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketAccelerateConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_AccelerateConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AccelerationStatus: cdk.stringToCloudFormation(properties.accelerationStatus),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketAccelerateConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.AccelerateConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.AccelerateConfigurationProperty>();\n    ret.addPropertyResult('accelerationStatus', 'AccelerationStatus', cfn_parse.FromCloudFormation.getString(properties.AccelerationStatus));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface AccessControlTranslationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly owner: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccessControlTranslationProperty`\n *\n * @param properties - the TypeScript properties of a `AccessControlTranslationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_AccessControlTranslationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('owner', cdk.requiredValidator)(properties.owner));\n    errors.collect(cdk.propertyValidator('owner', cdk.validateString)(properties.owner));\n    return errors.wrap('supplied properties not correct for \"AccessControlTranslationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.AccessControlTranslation` resource\n *\n * @param properties - the TypeScript properties of a `AccessControlTranslationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.AccessControlTranslation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketAccessControlTranslationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_AccessControlTranslationPropertyValidator(properties).assertSuccess();\n    return {\n        Owner: cdk.stringToCloudFormation(properties.owner),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketAccessControlTranslationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.AccessControlTranslationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.AccessControlTranslationProperty>();\n    ret.addPropertyResult('owner', 'Owner', cfn_parse.FromCloudFormation.getString(properties.Owner));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                            \n    export interface AnalyticsConfigurationProperty {\n                                                                                                                                                                                                                                                                             \n        readonly id: string;\n                                                                                                                                                                                                                                                                                                          \n        readonly prefix?: string;\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly storageClassAnalysis: CfnBucket.StorageClassAnalysisProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly tagFilters?: Array<CfnBucket.TagFilterProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AnalyticsConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `AnalyticsConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_AnalyticsConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('prefix', cdk.validateString)(properties.prefix));\n    errors.collect(cdk.propertyValidator('storageClassAnalysis', cdk.requiredValidator)(properties.storageClassAnalysis));\n    errors.collect(cdk.propertyValidator('storageClassAnalysis', CfnBucket_StorageClassAnalysisPropertyValidator)(properties.storageClassAnalysis));\n    errors.collect(cdk.propertyValidator('tagFilters', cdk.listValidator(CfnBucket_TagFilterPropertyValidator))(properties.tagFilters));\n    return errors.wrap('supplied properties not correct for \"AnalyticsConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.AnalyticsConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `AnalyticsConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.AnalyticsConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketAnalyticsConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_AnalyticsConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n        Prefix: cdk.stringToCloudFormation(properties.prefix),\n        StorageClassAnalysis: cfnBucketStorageClassAnalysisPropertyToCloudFormation(properties.storageClassAnalysis),\n        TagFilters: cdk.listMapper(cfnBucketTagFilterPropertyToCloudFormation)(properties.tagFilters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketAnalyticsConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.AnalyticsConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.AnalyticsConfigurationProperty>();\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('prefix', 'Prefix', properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : undefined);\n    ret.addPropertyResult('storageClassAnalysis', 'StorageClassAnalysis', CfnBucketStorageClassAnalysisPropertyFromCloudFormation(properties.StorageClassAnalysis));\n    ret.addPropertyResult('tagFilters', 'TagFilters', properties.TagFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTagFilterPropertyFromCloudFormation)(properties.TagFilters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface BucketEncryptionProperty {\n                                                                                                                                                                                                                                                                                                        \n        readonly serverSideEncryptionConfiguration: Array<CfnBucket.ServerSideEncryptionRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BucketEncryptionProperty`\n *\n * @param properties - the TypeScript properties of a `BucketEncryptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_BucketEncryptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('serverSideEncryptionConfiguration', cdk.requiredValidator)(properties.serverSideEncryptionConfiguration));\n    errors.collect(cdk.propertyValidator('serverSideEncryptionConfiguration', cdk.listValidator(CfnBucket_ServerSideEncryptionRulePropertyValidator))(properties.serverSideEncryptionConfiguration));\n    return errors.wrap('supplied properties not correct for \"BucketEncryptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.BucketEncryption` resource\n *\n * @param properties - the TypeScript properties of a `BucketEncryptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.BucketEncryption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketBucketEncryptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_BucketEncryptionPropertyValidator(properties).assertSuccess();\n    return {\n        ServerSideEncryptionConfiguration: cdk.listMapper(cfnBucketServerSideEncryptionRulePropertyToCloudFormation)(properties.serverSideEncryptionConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketBucketEncryptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.BucketEncryptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.BucketEncryptionProperty>();\n    ret.addPropertyResult('serverSideEncryptionConfiguration', 'ServerSideEncryptionConfiguration', cfn_parse.FromCloudFormation.getArray(CfnBucketServerSideEncryptionRulePropertyFromCloudFormation)(properties.ServerSideEncryptionConfiguration));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface CorsConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly corsRules: Array<CfnBucket.CorsRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CorsConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `CorsConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_CorsConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('corsRules', cdk.requiredValidator)(properties.corsRules));\n    errors.collect(cdk.propertyValidator('corsRules', cdk.listValidator(CfnBucket_CorsRulePropertyValidator))(properties.corsRules));\n    return errors.wrap('supplied properties not correct for \"CorsConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.CorsConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `CorsConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.CorsConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketCorsConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_CorsConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        CorsRules: cdk.listMapper(cfnBucketCorsRulePropertyToCloudFormation)(properties.corsRules),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketCorsConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.CorsConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.CorsConfigurationProperty>();\n    ret.addPropertyResult('corsRules', 'CorsRules', cfn_parse.FromCloudFormation.getArray(CfnBucketCorsRulePropertyFromCloudFormation)(properties.CorsRules));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                   \n    export interface CorsRuleProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly allowedHeaders?: string[];\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly allowedMethods: string[];\n                                                                                                                                                                                                                                                                                                \n        readonly allowedOrigins: string[];\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly exposedHeaders?: string[];\n                                                                                                                                                                                                                                                                                         \n        readonly id?: string;\n                                                                                                                                                                                                                                                                                                                \n        readonly maxAge?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CorsRuleProperty`\n *\n * @param properties - the TypeScript properties of a `CorsRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_CorsRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowedHeaders', cdk.listValidator(cdk.validateString))(properties.allowedHeaders));\n    errors.collect(cdk.propertyValidator('allowedMethods', cdk.requiredValidator)(properties.allowedMethods));\n    errors.collect(cdk.propertyValidator('allowedMethods', cdk.listValidator(cdk.validateString))(properties.allowedMethods));\n    errors.collect(cdk.propertyValidator('allowedOrigins', cdk.requiredValidator)(properties.allowedOrigins));\n    errors.collect(cdk.propertyValidator('allowedOrigins', cdk.listValidator(cdk.validateString))(properties.allowedOrigins));\n    errors.collect(cdk.propertyValidator('exposedHeaders', cdk.listValidator(cdk.validateString))(properties.exposedHeaders));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('maxAge', cdk.validateNumber)(properties.maxAge));\n    return errors.wrap('supplied properties not correct for \"CorsRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.CorsRule` resource\n *\n * @param properties - the TypeScript properties of a `CorsRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.CorsRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketCorsRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_CorsRulePropertyValidator(properties).assertSuccess();\n    return {\n        AllowedHeaders: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedHeaders),\n        AllowedMethods: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedMethods),\n        AllowedOrigins: cdk.listMapper(cdk.stringToCloudFormation)(properties.allowedOrigins),\n        ExposedHeaders: cdk.listMapper(cdk.stringToCloudFormation)(properties.exposedHeaders),\n        Id: cdk.stringToCloudFormation(properties.id),\n        MaxAge: cdk.numberToCloudFormation(properties.maxAge),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketCorsRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.CorsRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.CorsRuleProperty>();\n    ret.addPropertyResult('allowedHeaders', 'AllowedHeaders', properties.AllowedHeaders != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AllowedHeaders) : undefined);\n    ret.addPropertyResult('allowedMethods', 'AllowedMethods', cfn_parse.FromCloudFormation.getStringArray(properties.AllowedMethods));\n    ret.addPropertyResult('allowedOrigins', 'AllowedOrigins', cfn_parse.FromCloudFormation.getStringArray(properties.AllowedOrigins));\n    ret.addPropertyResult('exposedHeaders', 'ExposedHeaders', properties.ExposedHeaders != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ExposedHeaders) : undefined);\n    ret.addPropertyResult('id', 'Id', properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : undefined);\n    ret.addPropertyResult('maxAge', 'MaxAge', properties.MaxAge != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxAge) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                       \n    export interface DataExportProperty {\n                                                                                                                                                                                                                                                       \n        readonly destination: CfnBucket.DestinationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                               \n        readonly outputSchemaVersion: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataExportProperty`\n *\n * @param properties - the TypeScript properties of a `DataExportProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_DataExportPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destination', cdk.requiredValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('destination', CfnBucket_DestinationPropertyValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('outputSchemaVersion', cdk.requiredValidator)(properties.outputSchemaVersion));\n    errors.collect(cdk.propertyValidator('outputSchemaVersion', cdk.validateString)(properties.outputSchemaVersion));\n    return errors.wrap('supplied properties not correct for \"DataExportProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.DataExport` resource\n *\n * @param properties - the TypeScript properties of a `DataExportProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.DataExport` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketDataExportPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_DataExportPropertyValidator(properties).assertSuccess();\n    return {\n        Destination: cfnBucketDestinationPropertyToCloudFormation(properties.destination),\n        OutputSchemaVersion: cdk.stringToCloudFormation(properties.outputSchemaVersion),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketDataExportPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.DataExportProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.DataExportProperty>();\n    ret.addPropertyResult('destination', 'Destination', CfnBucketDestinationPropertyFromCloudFormation(properties.Destination));\n    ret.addPropertyResult('outputSchemaVersion', 'OutputSchemaVersion', cfn_parse.FromCloudFormation.getString(properties.OutputSchemaVersion));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface DefaultRetentionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly days?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly mode?: string;\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly years?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DefaultRetentionProperty`\n *\n * @param properties - the TypeScript properties of a `DefaultRetentionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_DefaultRetentionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('days', cdk.validateNumber)(properties.days));\n    errors.collect(cdk.propertyValidator('mode', cdk.validateString)(properties.mode));\n    errors.collect(cdk.propertyValidator('years', cdk.validateNumber)(properties.years));\n    return errors.wrap('supplied properties not correct for \"DefaultRetentionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.DefaultRetention` resource\n *\n * @param properties - the TypeScript properties of a `DefaultRetentionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.DefaultRetention` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketDefaultRetentionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_DefaultRetentionPropertyValidator(properties).assertSuccess();\n    return {\n        Days: cdk.numberToCloudFormation(properties.days),\n        Mode: cdk.stringToCloudFormation(properties.mode),\n        Years: cdk.numberToCloudFormation(properties.years),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketDefaultRetentionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.DefaultRetentionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.DefaultRetentionProperty>();\n    ret.addPropertyResult('days', 'Days', properties.Days != null ? cfn_parse.FromCloudFormation.getNumber(properties.Days) : undefined);\n    ret.addPropertyResult('mode', 'Mode', properties.Mode != null ? cfn_parse.FromCloudFormation.getString(properties.Mode) : undefined);\n    ret.addPropertyResult('years', 'Years', properties.Years != null ? cfn_parse.FromCloudFormation.getNumber(properties.Years) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface DeleteMarkerReplicationProperty {\n                                                                                                                                                                                                                                                                                                   \n        readonly status?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeleteMarkerReplicationProperty`\n *\n * @param properties - the TypeScript properties of a `DeleteMarkerReplicationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_DeleteMarkerReplicationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"DeleteMarkerReplicationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.DeleteMarkerReplication` resource\n *\n * @param properties - the TypeScript properties of a `DeleteMarkerReplicationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.DeleteMarkerReplication` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketDeleteMarkerReplicationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_DeleteMarkerReplicationPropertyValidator(properties).assertSuccess();\n    return {\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketDeleteMarkerReplicationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.DeleteMarkerReplicationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.DeleteMarkerReplicationProperty>();\n    ret.addPropertyResult('status', 'Status', properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                           \n    export interface DestinationProperty {\nn        readonly bucketAccountId?: string;\n                                                                                                                                                                                                                                                                                  \n        readonly bucketArn: string;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly format: string;\n                                                                                                                                                                                                                                                                                      \n        readonly prefix?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DestinationProperty`\n *\n * @param properties - the TypeScript properties of a `DestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_DestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketAccountId', cdk.validateString)(properties.bucketAccountId));\n    errors.collect(cdk.propertyValidator('bucketArn', cdk.requiredValidator)(properties.bucketArn));\n    errors.collect(cdk.propertyValidator('bucketArn', cdk.validateString)(properties.bucketArn));\n    errors.collect(cdk.propertyValidator('format', cdk.requiredValidator)(properties.format));\n    errors.collect(cdk.propertyValidator('format', cdk.validateString)(properties.format));\n    errors.collect(cdk.propertyValidator('prefix', cdk.validateString)(properties.prefix));\n    return errors.wrap('supplied properties not correct for \"DestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.Destination` resource\n *\n * @param properties - the TypeScript properties of a `DestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.Destination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_DestinationPropertyValidator(properties).assertSuccess();\n    return {\n        BucketAccountId: cdk.stringToCloudFormation(properties.bucketAccountId),\n        BucketArn: cdk.stringToCloudFormation(properties.bucketArn),\n        Format: cdk.stringToCloudFormation(properties.format),\n        Prefix: cdk.stringToCloudFormation(properties.prefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.DestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.DestinationProperty>();\n    ret.addPropertyResult('bucketAccountId', 'BucketAccountId', properties.BucketAccountId != null ? cfn_parse.FromCloudFormation.getString(properties.BucketAccountId) : undefined);\n    ret.addPropertyResult('bucketArn', 'BucketArn', cfn_parse.FromCloudFormation.getString(properties.BucketArn));\n    ret.addPropertyResult('format', 'Format', cfn_parse.FromCloudFormation.getString(properties.Format));\n    ret.addPropertyResult('prefix', 'Prefix', properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                              \n    export interface EncryptionConfigurationProperty {\nn        readonly replicaKmsKeyId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EncryptionConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `EncryptionConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_EncryptionConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('replicaKmsKeyId', cdk.requiredValidator)(properties.replicaKmsKeyId));\n    errors.collect(cdk.propertyValidator('replicaKmsKeyId', cdk.validateString)(properties.replicaKmsKeyId));\n    return errors.wrap('supplied properties not correct for \"EncryptionConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.EncryptionConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `EncryptionConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.EncryptionConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketEncryptionConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_EncryptionConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ReplicaKmsKeyID: cdk.stringToCloudFormation(properties.replicaKmsKeyId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketEncryptionConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.EncryptionConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.EncryptionConfigurationProperty>();\n    ret.addPropertyResult('replicaKmsKeyId', 'ReplicaKmsKeyID', cfn_parse.FromCloudFormation.getString(properties.ReplicaKmsKeyID));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface EventBridgeConfigurationProperty {\n                                                                                                                                                                                                                                                                                                           \n        readonly eventBridgeEnabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EventBridgeConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `EventBridgeConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_EventBridgeConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('eventBridgeEnabled', cdk.validateBoolean)(properties.eventBridgeEnabled));\n    return errors.wrap('supplied properties not correct for \"EventBridgeConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.EventBridgeConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `EventBridgeConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.EventBridgeConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketEventBridgeConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_EventBridgeConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        EventBridgeEnabled: cdk.booleanToCloudFormation(properties.eventBridgeEnabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketEventBridgeConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.EventBridgeConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.EventBridgeConfigurationProperty>();\n    ret.addPropertyResult('eventBridgeEnabled', 'EventBridgeEnabled', properties.EventBridgeEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EventBridgeEnabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                               \n    export interface FilterRuleProperty {\nn        readonly name: string;\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FilterRuleProperty`\n *\n * @param properties - the TypeScript properties of a `FilterRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_FilterRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"FilterRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.FilterRule` resource\n *\n * @param properties - the TypeScript properties of a `FilterRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.FilterRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketFilterRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_FilterRulePropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketFilterRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.FilterRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.FilterRuleProperty>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface IntelligentTieringConfigurationProperty {\n                                                                                                                                                                                                                                                                                                             \n        readonly id: string;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly prefix?: string;\n                                                                                                                                                                                                                                                                                          \n        readonly status: string;\n                                                                                                                                                                                                                                                                                     \n        readonly tagFilters?: Array<CfnBucket.TagFilterProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly tierings: Array<CfnBucket.TieringProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IntelligentTieringConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `IntelligentTieringConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_IntelligentTieringConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('prefix', cdk.validateString)(properties.prefix));\n    errors.collect(cdk.propertyValidator('status', cdk.requiredValidator)(properties.status));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    errors.collect(cdk.propertyValidator('tagFilters', cdk.listValidator(CfnBucket_TagFilterPropertyValidator))(properties.tagFilters));\n    errors.collect(cdk.propertyValidator('tierings', cdk.requiredValidator)(properties.tierings));\n    errors.collect(cdk.propertyValidator('tierings', cdk.listValidator(CfnBucket_TieringPropertyValidator))(properties.tierings));\n    return errors.wrap('supplied properties not correct for \"IntelligentTieringConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.IntelligentTieringConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `IntelligentTieringConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.IntelligentTieringConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketIntelligentTieringConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_IntelligentTieringConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Id: cdk.stringToCloudFormation(properties.id),\n        Prefix: cdk.stringToCloudFormation(properties.prefix),\n        Status: cdk.stringToCloudFormation(properties.status),\n        TagFilters: cdk.listMapper(cfnBucketTagFilterPropertyToCloudFormation)(properties.tagFilters),\n        Tierings: cdk.listMapper(cfnBucketTieringPropertyToCloudFormation)(properties.tierings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketIntelligentTieringConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.IntelligentTieringConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.IntelligentTieringConfigurationProperty>();\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('prefix', 'Prefix', properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : undefined);\n    ret.addPropertyResult('status', 'Status', cfn_parse.FromCloudFormation.getString(properties.Status));\n    ret.addPropertyResult('tagFilters', 'TagFilters', properties.TagFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTagFilterPropertyFromCloudFormation)(properties.TagFilters) : undefined);\n    ret.addPropertyResult('tierings', 'Tierings', cfn_parse.FromCloudFormation.getArray(CfnBucketTieringPropertyFromCloudFormation)(properties.Tierings));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface InventoryConfigurationProperty {\n                                                                                                                                                                                                                                                                                                     \n        readonly destination: CfnBucket.DestinationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly enabled: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                              \n        readonly id: string;\nn        readonly includedObjectVersions: string;\nn        readonly optionalFields?: string[];\n                                                                                                                                                                                                                                                                    \n        readonly prefix?: string;\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly scheduleFrequency: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InventoryConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `InventoryConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_InventoryConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destination', cdk.requiredValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('destination', CfnBucket_DestinationPropertyValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('includedObjectVersions', cdk.requiredValidator)(properties.includedObjectVersions));\n    errors.collect(cdk.propertyValidator('includedObjectVersions', cdk.validateString)(properties.includedObjectVersions));\n    errors.collect(cdk.propertyValidator('optionalFields', cdk.listValidator(cdk.validateString))(properties.optionalFields));\n    errors.collect(cdk.propertyValidator('prefix', cdk.validateString)(properties.prefix));\n    errors.collect(cdk.propertyValidator('scheduleFrequency', cdk.requiredValidator)(properties.scheduleFrequency));\n    errors.collect(cdk.propertyValidator('scheduleFrequency', cdk.validateString)(properties.scheduleFrequency));\n    return errors.wrap('supplied properties not correct for \"InventoryConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.InventoryConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `InventoryConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.InventoryConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketInventoryConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_InventoryConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Destination: cfnBucketDestinationPropertyToCloudFormation(properties.destination),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        Id: cdk.stringToCloudFormation(properties.id),\n        IncludedObjectVersions: cdk.stringToCloudFormation(properties.includedObjectVersions),\n        OptionalFields: cdk.listMapper(cdk.stringToCloudFormation)(properties.optionalFields),\n        Prefix: cdk.stringToCloudFormation(properties.prefix),\n        ScheduleFrequency: cdk.stringToCloudFormation(properties.scheduleFrequency),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketInventoryConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.InventoryConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.InventoryConfigurationProperty>();\n    ret.addPropertyResult('destination', 'Destination', CfnBucketDestinationPropertyFromCloudFormation(properties.Destination));\n    ret.addPropertyResult('enabled', 'Enabled', cfn_parse.FromCloudFormation.getBoolean(properties.Enabled));\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('includedObjectVersions', 'IncludedObjectVersions', cfn_parse.FromCloudFormation.getString(properties.IncludedObjectVersions));\n    ret.addPropertyResult('optionalFields', 'OptionalFields', properties.OptionalFields != null ? cfn_parse.FromCloudFormation.getStringArray(properties.OptionalFields) : undefined);\n    ret.addPropertyResult('prefix', 'Prefix', properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : undefined);\n    ret.addPropertyResult('scheduleFrequency', 'ScheduleFrequency', cfn_parse.FromCloudFormation.getString(properties.ScheduleFrequency));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                             \n    export interface LambdaConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly event: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly filter?: CfnBucket.NotificationFilterProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                        \n        readonly function: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_LambdaConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('event', cdk.requiredValidator)(properties.event));\n    errors.collect(cdk.propertyValidator('event', cdk.validateString)(properties.event));\n    errors.collect(cdk.propertyValidator('filter', CfnBucket_NotificationFilterPropertyValidator)(properties.filter));\n    errors.collect(cdk.propertyValidator('function', cdk.requiredValidator)(properties.function));\n    errors.collect(cdk.propertyValidator('function', cdk.validateString)(properties.function));\n    return errors.wrap('supplied properties not correct for \"LambdaConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.LambdaConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `LambdaConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.LambdaConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketLambdaConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_LambdaConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Event: cdk.stringToCloudFormation(properties.event),\n        Filter: cfnBucketNotificationFilterPropertyToCloudFormation(properties.filter),\n        Function: cdk.stringToCloudFormation(properties.function),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketLambdaConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.LambdaConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.LambdaConfigurationProperty>();\n    ret.addPropertyResult('event', 'Event', cfn_parse.FromCloudFormation.getString(properties.Event));\n    ret.addPropertyResult('filter', 'Filter', properties.Filter != null ? CfnBucketNotificationFilterPropertyFromCloudFormation(properties.Filter) : undefined);\n    ret.addPropertyResult('function', 'Function', cfn_parse.FromCloudFormation.getString(properties.Function));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface LifecycleConfigurationProperty {\n                                                                                                                                                                                                                                                                              \n        readonly rules: Array<CfnBucket.RuleProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LifecycleConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `LifecycleConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_LifecycleConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('rules', cdk.requiredValidator)(properties.rules));\n    errors.collect(cdk.propertyValidator('rules', cdk.listValidator(CfnBucket_RulePropertyValidator))(properties.rules));\n    return errors.wrap('supplied properties not correct for \"LifecycleConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.LifecycleConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `LifecycleConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.LifecycleConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketLifecycleConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_LifecycleConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Rules: cdk.listMapper(cfnBucketRulePropertyToCloudFormation)(properties.rules),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketLifecycleConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.LifecycleConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.LifecycleConfigurationProperty>();\n    ret.addPropertyResult('rules', 'Rules', cfn_parse.FromCloudFormation.getArray(CfnBucketRulePropertyFromCloudFormation)(properties.Rules));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface LoggingConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly destinationBucketName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly logFilePrefix?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoggingConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `LoggingConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_LoggingConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinationBucketName', cdk.validateString)(properties.destinationBucketName));\n    errors.collect(cdk.propertyValidator('logFilePrefix', cdk.validateString)(properties.logFilePrefix));\n    return errors.wrap('supplied properties not correct for \"LoggingConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.LoggingConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `LoggingConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.LoggingConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketLoggingConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_LoggingConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        DestinationBucketName: cdk.stringToCloudFormation(properties.destinationBucketName),\n        LogFilePrefix: cdk.stringToCloudFormation(properties.logFilePrefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketLoggingConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.LoggingConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.LoggingConfigurationProperty>();\n    ret.addPropertyResult('destinationBucketName', 'DestinationBucketName', properties.DestinationBucketName != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationBucketName) : undefined);\n    ret.addPropertyResult('logFilePrefix', 'LogFilePrefix', properties.LogFilePrefix != null ? cfn_parse.FromCloudFormation.getString(properties.LogFilePrefix) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                    \n    export interface MetricsProperty {\n                                                                                                                                                                                                                                                                                                                   \n        readonly eventThreshold?: CfnBucket.ReplicationTimeValueProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                      \n        readonly status: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MetricsProperty`\n *\n * @param properties - the TypeScript properties of a `MetricsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_MetricsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('eventThreshold', CfnBucket_ReplicationTimeValuePropertyValidator)(properties.eventThreshold));\n    errors.collect(cdk.propertyValidator('status', cdk.requiredValidator)(properties.status));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"MetricsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.Metrics` resource\n *\n * @param properties - the TypeScript properties of a `MetricsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.Metrics` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketMetricsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_MetricsPropertyValidator(properties).assertSuccess();\n    return {\n        EventThreshold: cfnBucketReplicationTimeValuePropertyToCloudFormation(properties.eventThreshold),\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketMetricsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.MetricsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.MetricsProperty>();\n    ret.addPropertyResult('eventThreshold', 'EventThreshold', properties.EventThreshold != null ? CfnBucketReplicationTimeValuePropertyFromCloudFormation(properties.EventThreshold) : undefined);\n    ret.addPropertyResult('status', 'Status', cfn_parse.FromCloudFormation.getString(properties.Status));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface MetricsConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly accessPointArn?: string;\n                                                                                                                                                                                                                                                                                                                                                             \n        readonly id: string;\n                                                                                                                                                                                                                                                                                                    \n        readonly prefix?: string;\n                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly tagFilters?: Array<CfnBucket.TagFilterProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MetricsConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `MetricsConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_MetricsConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessPointArn', cdk.validateString)(properties.accessPointArn));\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('prefix', cdk.validateString)(properties.prefix));\n    errors.collect(cdk.propertyValidator('tagFilters', cdk.listValidator(CfnBucket_TagFilterPropertyValidator))(properties.tagFilters));\n    return errors.wrap('supplied properties not correct for \"MetricsConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.MetricsConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `MetricsConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.MetricsConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketMetricsConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_MetricsConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AccessPointArn: cdk.stringToCloudFormation(properties.accessPointArn),\n        Id: cdk.stringToCloudFormation(properties.id),\n        Prefix: cdk.stringToCloudFormation(properties.prefix),\n        TagFilters: cdk.listMapper(cfnBucketTagFilterPropertyToCloudFormation)(properties.tagFilters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketMetricsConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.MetricsConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.MetricsConfigurationProperty>();\n    ret.addPropertyResult('accessPointArn', 'AccessPointArn', properties.AccessPointArn != null ? cfn_parse.FromCloudFormation.getString(properties.AccessPointArn) : undefined);\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('prefix', 'Prefix', properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : undefined);\n    ret.addPropertyResult('tagFilters', 'TagFilters', properties.TagFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTagFilterPropertyFromCloudFormation)(properties.TagFilters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface NoncurrentVersionExpirationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly newerNoncurrentVersions?: number;\nn        readonly noncurrentDays: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NoncurrentVersionExpirationProperty`\n *\n * @param properties - the TypeScript properties of a `NoncurrentVersionExpirationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_NoncurrentVersionExpirationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('newerNoncurrentVersions', cdk.validateNumber)(properties.newerNoncurrentVersions));\n    errors.collect(cdk.propertyValidator('noncurrentDays', cdk.requiredValidator)(properties.noncurrentDays));\n    errors.collect(cdk.propertyValidator('noncurrentDays', cdk.validateNumber)(properties.noncurrentDays));\n    return errors.wrap('supplied properties not correct for \"NoncurrentVersionExpirationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.NoncurrentVersionExpiration` resource\n *\n * @param properties - the TypeScript properties of a `NoncurrentVersionExpirationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.NoncurrentVersionExpiration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketNoncurrentVersionExpirationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_NoncurrentVersionExpirationPropertyValidator(properties).assertSuccess();\n    return {\n        NewerNoncurrentVersions: cdk.numberToCloudFormation(properties.newerNoncurrentVersions),\n        NoncurrentDays: cdk.numberToCloudFormation(properties.noncurrentDays),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketNoncurrentVersionExpirationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.NoncurrentVersionExpirationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.NoncurrentVersionExpirationProperty>();\n    ret.addPropertyResult('newerNoncurrentVersions', 'NewerNoncurrentVersions', properties.NewerNoncurrentVersions != null ? cfn_parse.FromCloudFormation.getNumber(properties.NewerNoncurrentVersions) : undefined);\n    ret.addPropertyResult('noncurrentDays', 'NoncurrentDays', cfn_parse.FromCloudFormation.getNumber(properties.NoncurrentDays));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface NoncurrentVersionTransitionProperty {\nn        readonly newerNoncurrentVersions?: number;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly storageClass: string;\nn        readonly transitionInDays: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NoncurrentVersionTransitionProperty`\n *\n * @param properties - the TypeScript properties of a `NoncurrentVersionTransitionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_NoncurrentVersionTransitionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('newerNoncurrentVersions', cdk.validateNumber)(properties.newerNoncurrentVersions));\n    errors.collect(cdk.propertyValidator('storageClass', cdk.requiredValidator)(properties.storageClass));\n    errors.collect(cdk.propertyValidator('storageClass', cdk.validateString)(properties.storageClass));\n    errors.collect(cdk.propertyValidator('transitionInDays', cdk.requiredValidator)(properties.transitionInDays));\n    errors.collect(cdk.propertyValidator('transitionInDays', cdk.validateNumber)(properties.transitionInDays));\n    return errors.wrap('supplied properties not correct for \"NoncurrentVersionTransitionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.NoncurrentVersionTransition` resource\n *\n * @param properties - the TypeScript properties of a `NoncurrentVersionTransitionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.NoncurrentVersionTransition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketNoncurrentVersionTransitionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_NoncurrentVersionTransitionPropertyValidator(properties).assertSuccess();\n    return {\n        NewerNoncurrentVersions: cdk.numberToCloudFormation(properties.newerNoncurrentVersions),\n        StorageClass: cdk.stringToCloudFormation(properties.storageClass),\n        TransitionInDays: cdk.numberToCloudFormation(properties.transitionInDays),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketNoncurrentVersionTransitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.NoncurrentVersionTransitionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.NoncurrentVersionTransitionProperty>();\n    ret.addPropertyResult('newerNoncurrentVersions', 'NewerNoncurrentVersions', properties.NewerNoncurrentVersions != null ? cfn_parse.FromCloudFormation.getNumber(properties.NewerNoncurrentVersions) : undefined);\n    ret.addPropertyResult('storageClass', 'StorageClass', cfn_parse.FromCloudFormation.getString(properties.StorageClass));\n    ret.addPropertyResult('transitionInDays', 'TransitionInDays', cfn_parse.FromCloudFormation.getNumber(properties.TransitionInDays));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface NotificationConfigurationProperty {\n                                                                                                                                                                                                                                                                                  \n        readonly eventBridgeConfiguration?: CfnBucket.EventBridgeConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly lambdaConfigurations?: Array<CfnBucket.LambdaConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly queueConfigurations?: Array<CfnBucket.QueueConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                          \n        readonly topicConfigurations?: Array<CfnBucket.TopicConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NotificationConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `NotificationConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_NotificationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('eventBridgeConfiguration', CfnBucket_EventBridgeConfigurationPropertyValidator)(properties.eventBridgeConfiguration));\n    errors.collect(cdk.propertyValidator('lambdaConfigurations', cdk.listValidator(CfnBucket_LambdaConfigurationPropertyValidator))(properties.lambdaConfigurations));\n    errors.collect(cdk.propertyValidator('queueConfigurations', cdk.listValidator(CfnBucket_QueueConfigurationPropertyValidator))(properties.queueConfigurations));\n    errors.collect(cdk.propertyValidator('topicConfigurations', cdk.listValidator(CfnBucket_TopicConfigurationPropertyValidator))(properties.topicConfigurations));\n    return errors.wrap('supplied properties not correct for \"NotificationConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.NotificationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `NotificationConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.NotificationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketNotificationConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_NotificationConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        EventBridgeConfiguration: cfnBucketEventBridgeConfigurationPropertyToCloudFormation(properties.eventBridgeConfiguration),\n        LambdaConfigurations: cdk.listMapper(cfnBucketLambdaConfigurationPropertyToCloudFormation)(properties.lambdaConfigurations),\n        QueueConfigurations: cdk.listMapper(cfnBucketQueueConfigurationPropertyToCloudFormation)(properties.queueConfigurations),\n        TopicConfigurations: cdk.listMapper(cfnBucketTopicConfigurationPropertyToCloudFormation)(properties.topicConfigurations),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketNotificationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.NotificationConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.NotificationConfigurationProperty>();\n    ret.addPropertyResult('eventBridgeConfiguration', 'EventBridgeConfiguration', properties.EventBridgeConfiguration != null ? CfnBucketEventBridgeConfigurationPropertyFromCloudFormation(properties.EventBridgeConfiguration) : undefined);\n    ret.addPropertyResult('lambdaConfigurations', 'LambdaConfigurations', properties.LambdaConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketLambdaConfigurationPropertyFromCloudFormation)(properties.LambdaConfigurations) : undefined);\n    ret.addPropertyResult('queueConfigurations', 'QueueConfigurations', properties.QueueConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketQueueConfigurationPropertyFromCloudFormation)(properties.QueueConfigurations) : undefined);\n    ret.addPropertyResult('topicConfigurations', 'TopicConfigurations', properties.TopicConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTopicConfigurationPropertyFromCloudFormation)(properties.TopicConfigurations) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface NotificationFilterProperty {\n                                                                                                                                                                                                                                                                                                                                 \n        readonly s3Key: CfnBucket.S3KeyFilterProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NotificationFilterProperty`\n *\n * @param properties - the TypeScript properties of a `NotificationFilterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_NotificationFilterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Key', cdk.requiredValidator)(properties.s3Key));\n    errors.collect(cdk.propertyValidator('s3Key', CfnBucket_S3KeyFilterPropertyValidator)(properties.s3Key));\n    return errors.wrap('supplied properties not correct for \"NotificationFilterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.NotificationFilter` resource\n *\n * @param properties - the TypeScript properties of a `NotificationFilterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.NotificationFilter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketNotificationFilterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_NotificationFilterPropertyValidator(properties).assertSuccess();\n    return {\n        S3Key: cfnBucketS3KeyFilterPropertyToCloudFormation(properties.s3Key),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketNotificationFilterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.NotificationFilterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.NotificationFilterProperty>();\n    ret.addPropertyResult('s3Key', 'S3Key', CfnBucketS3KeyFilterPropertyFromCloudFormation(properties.S3Key));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface ObjectLockConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly objectLockEnabled?: string;\nn        readonly rule?: CfnBucket.ObjectLockRuleProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ObjectLockConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ObjectLockConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_ObjectLockConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('objectLockEnabled', cdk.validateString)(properties.objectLockEnabled));\n    errors.collect(cdk.propertyValidator('rule', CfnBucket_ObjectLockRulePropertyValidator)(properties.rule));\n    return errors.wrap('supplied properties not correct for \"ObjectLockConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.ObjectLockConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ObjectLockConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.ObjectLockConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketObjectLockConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_ObjectLockConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ObjectLockEnabled: cdk.stringToCloudFormation(properties.objectLockEnabled),\n        Rule: cfnBucketObjectLockRulePropertyToCloudFormation(properties.rule),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketObjectLockConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.ObjectLockConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.ObjectLockConfigurationProperty>();\n    ret.addPropertyResult('objectLockEnabled', 'ObjectLockEnabled', properties.ObjectLockEnabled != null ? cfn_parse.FromCloudFormation.getString(properties.ObjectLockEnabled) : undefined);\n    ret.addPropertyResult('rule', 'Rule', properties.Rule != null ? CfnBucketObjectLockRulePropertyFromCloudFormation(properties.Rule) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                          \n    export interface ObjectLockRuleProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly defaultRetention?: CfnBucket.DefaultRetentionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ObjectLockRuleProperty`\n *\n * @param properties - the TypeScript properties of a `ObjectLockRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_ObjectLockRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultRetention', CfnBucket_DefaultRetentionPropertyValidator)(properties.defaultRetention));\n    return errors.wrap('supplied properties not correct for \"ObjectLockRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.ObjectLockRule` resource\n *\n * @param properties - the TypeScript properties of a `ObjectLockRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.ObjectLockRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketObjectLockRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_ObjectLockRulePropertyValidator(properties).assertSuccess();\n    return {\n        DefaultRetention: cfnBucketDefaultRetentionPropertyToCloudFormation(properties.defaultRetention),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketObjectLockRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.ObjectLockRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.ObjectLockRuleProperty>();\n    ret.addPropertyResult('defaultRetention', 'DefaultRetention', properties.DefaultRetention != null ? CfnBucketDefaultRetentionPropertyFromCloudFormation(properties.DefaultRetention) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface OwnershipControlsProperty {\n                                                                                                                                                                                                                                                                              \n        readonly rules: Array<CfnBucket.OwnershipControlsRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OwnershipControlsProperty`\n *\n * @param properties - the TypeScript properties of a `OwnershipControlsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_OwnershipControlsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('rules', cdk.requiredValidator)(properties.rules));\n    errors.collect(cdk.propertyValidator('rules', cdk.listValidator(CfnBucket_OwnershipControlsRulePropertyValidator))(properties.rules));\n    return errors.wrap('supplied properties not correct for \"OwnershipControlsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.OwnershipControls` resource\n *\n * @param properties - the TypeScript properties of a `OwnershipControlsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.OwnershipControls` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketOwnershipControlsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_OwnershipControlsPropertyValidator(properties).assertSuccess();\n    return {\n        Rules: cdk.listMapper(cfnBucketOwnershipControlsRulePropertyToCloudFormation)(properties.rules),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketOwnershipControlsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.OwnershipControlsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.OwnershipControlsProperty>();\n    ret.addPropertyResult('rules', 'Rules', cfn_parse.FromCloudFormation.getArray(CfnBucketOwnershipControlsRulePropertyFromCloudFormation)(properties.Rules));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface OwnershipControlsRuleProperty {\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly objectOwnership?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `OwnershipControlsRuleProperty`\n *\n * @param properties - the TypeScript properties of a `OwnershipControlsRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_OwnershipControlsRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('objectOwnership', cdk.validateString)(properties.objectOwnership));\n    return errors.wrap('supplied properties not correct for \"OwnershipControlsRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.OwnershipControlsRule` resource\n *\n * @param properties - the TypeScript properties of a `OwnershipControlsRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.OwnershipControlsRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketOwnershipControlsRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_OwnershipControlsRulePropertyValidator(properties).assertSuccess();\n    return {\n        ObjectOwnership: cdk.stringToCloudFormation(properties.objectOwnership),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketOwnershipControlsRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.OwnershipControlsRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.OwnershipControlsRuleProperty>();\n    ret.addPropertyResult('objectOwnership', 'ObjectOwnership', properties.ObjectOwnership != null ? cfn_parse.FromCloudFormation.getString(properties.ObjectOwnership) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface PublicAccessBlockConfigurationProperty {\nn        readonly blockPublicAcls?: boolean | cdk.IResolvable;\nn        readonly blockPublicPolicy?: boolean | cdk.IResolvable;\nn        readonly ignorePublicAcls?: boolean | cdk.IResolvable;\nn        readonly restrictPublicBuckets?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PublicAccessBlockConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `PublicAccessBlockConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_PublicAccessBlockConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('blockPublicAcls', cdk.validateBoolean)(properties.blockPublicAcls));\n    errors.collect(cdk.propertyValidator('blockPublicPolicy', cdk.validateBoolean)(properties.blockPublicPolicy));\n    errors.collect(cdk.propertyValidator('ignorePublicAcls', cdk.validateBoolean)(properties.ignorePublicAcls));\n    errors.collect(cdk.propertyValidator('restrictPublicBuckets', cdk.validateBoolean)(properties.restrictPublicBuckets));\n    return errors.wrap('supplied properties not correct for \"PublicAccessBlockConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.PublicAccessBlockConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `PublicAccessBlockConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.PublicAccessBlockConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketPublicAccessBlockConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_PublicAccessBlockConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        BlockPublicAcls: cdk.booleanToCloudFormation(properties.blockPublicAcls),\n        BlockPublicPolicy: cdk.booleanToCloudFormation(properties.blockPublicPolicy),\n        IgnorePublicAcls: cdk.booleanToCloudFormation(properties.ignorePublicAcls),\n        RestrictPublicBuckets: cdk.booleanToCloudFormation(properties.restrictPublicBuckets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketPublicAccessBlockConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.PublicAccessBlockConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.PublicAccessBlockConfigurationProperty>();\n    ret.addPropertyResult('blockPublicAcls', 'BlockPublicAcls', properties.BlockPublicAcls != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BlockPublicAcls) : undefined);\n    ret.addPropertyResult('blockPublicPolicy', 'BlockPublicPolicy', properties.BlockPublicPolicy != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BlockPublicPolicy) : undefined);\n    ret.addPropertyResult('ignorePublicAcls', 'IgnorePublicAcls', properties.IgnorePublicAcls != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IgnorePublicAcls) : undefined);\n    ret.addPropertyResult('restrictPublicBuckets', 'RestrictPublicBuckets', properties.RestrictPublicBuckets != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RestrictPublicBuckets) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                        \n    export interface QueueConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly event: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly filter?: CfnBucket.NotificationFilterProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly queue: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `QueueConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `QueueConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_QueueConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('event', cdk.requiredValidator)(properties.event));\n    errors.collect(cdk.propertyValidator('event', cdk.validateString)(properties.event));\n    errors.collect(cdk.propertyValidator('filter', CfnBucket_NotificationFilterPropertyValidator)(properties.filter));\n    errors.collect(cdk.propertyValidator('queue', cdk.requiredValidator)(properties.queue));\n    errors.collect(cdk.propertyValidator('queue', cdk.validateString)(properties.queue));\n    return errors.wrap('supplied properties not correct for \"QueueConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.QueueConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `QueueConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.QueueConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketQueueConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_QueueConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Event: cdk.stringToCloudFormation(properties.event),\n        Filter: cfnBucketNotificationFilterPropertyToCloudFormation(properties.filter),\n        Queue: cdk.stringToCloudFormation(properties.queue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketQueueConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.QueueConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.QueueConfigurationProperty>();\n    ret.addPropertyResult('event', 'Event', cfn_parse.FromCloudFormation.getString(properties.Event));\n    ret.addPropertyResult('filter', 'Filter', properties.Filter != null ? CfnBucketNotificationFilterPropertyFromCloudFormation(properties.Filter) : undefined);\n    ret.addPropertyResult('queue', 'Queue', cfn_parse.FromCloudFormation.getString(properties.Queue));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                         \n    export interface RedirectAllRequestsToProperty {\n                                                                                                                                                                                                                                                                                                         \n        readonly hostName: string;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly protocol?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RedirectAllRequestsToProperty`\n *\n * @param properties - the TypeScript properties of a `RedirectAllRequestsToProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_RedirectAllRequestsToPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('hostName', cdk.requiredValidator)(properties.hostName));\n    errors.collect(cdk.propertyValidator('hostName', cdk.validateString)(properties.hostName));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    return errors.wrap('supplied properties not correct for \"RedirectAllRequestsToProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.RedirectAllRequestsTo` resource\n *\n * @param properties - the TypeScript properties of a `RedirectAllRequestsToProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.RedirectAllRequestsTo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketRedirectAllRequestsToPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_RedirectAllRequestsToPropertyValidator(properties).assertSuccess();\n    return {\n        HostName: cdk.stringToCloudFormation(properties.hostName),\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketRedirectAllRequestsToPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.RedirectAllRequestsToProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.RedirectAllRequestsToProperty>();\n    ret.addPropertyResult('hostName', 'HostName', cfn_parse.FromCloudFormation.getString(properties.HostName));\n    ret.addPropertyResult('protocol', 'Protocol', properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                  \n    export interface RedirectRuleProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly hostName?: string;\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly httpRedirectCode?: string;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly protocol?: string;\nn        readonly replaceKeyPrefixWith?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly replaceKeyWith?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RedirectRuleProperty`\n *\n * @param properties - the TypeScript properties of a `RedirectRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_RedirectRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('hostName', cdk.validateString)(properties.hostName));\n    errors.collect(cdk.propertyValidator('httpRedirectCode', cdk.validateString)(properties.httpRedirectCode));\n    errors.collect(cdk.propertyValidator('protocol', cdk.validateString)(properties.protocol));\n    errors.collect(cdk.propertyValidator('replaceKeyPrefixWith', cdk.validateString)(properties.replaceKeyPrefixWith));\n    errors.collect(cdk.propertyValidator('replaceKeyWith', cdk.validateString)(properties.replaceKeyWith));\n    return errors.wrap('supplied properties not correct for \"RedirectRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.RedirectRule` resource\n *\n * @param properties - the TypeScript properties of a `RedirectRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.RedirectRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketRedirectRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_RedirectRulePropertyValidator(properties).assertSuccess();\n    return {\n        HostName: cdk.stringToCloudFormation(properties.hostName),\n        HttpRedirectCode: cdk.stringToCloudFormation(properties.httpRedirectCode),\n        Protocol: cdk.stringToCloudFormation(properties.protocol),\n        ReplaceKeyPrefixWith: cdk.stringToCloudFormation(properties.replaceKeyPrefixWith),\n        ReplaceKeyWith: cdk.stringToCloudFormation(properties.replaceKeyWith),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketRedirectRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.RedirectRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.RedirectRuleProperty>();\n    ret.addPropertyResult('hostName', 'HostName', properties.HostName != null ? cfn_parse.FromCloudFormation.getString(properties.HostName) : undefined);\n    ret.addPropertyResult('httpRedirectCode', 'HttpRedirectCode', properties.HttpRedirectCode != null ? cfn_parse.FromCloudFormation.getString(properties.HttpRedirectCode) : undefined);\n    ret.addPropertyResult('protocol', 'Protocol', properties.Protocol != null ? cfn_parse.FromCloudFormation.getString(properties.Protocol) : undefined);\n    ret.addPropertyResult('replaceKeyPrefixWith', 'ReplaceKeyPrefixWith', properties.ReplaceKeyPrefixWith != null ? cfn_parse.FromCloudFormation.getString(properties.ReplaceKeyPrefixWith) : undefined);\n    ret.addPropertyResult('replaceKeyWith', 'ReplaceKeyWith', properties.ReplaceKeyWith != null ? cfn_parse.FromCloudFormation.getString(properties.ReplaceKeyWith) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                       \n    export interface ReplicaModificationsProperty {\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly status: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReplicaModificationsProperty`\n *\n * @param properties - the TypeScript properties of a `ReplicaModificationsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_ReplicaModificationsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('status', cdk.requiredValidator)(properties.status));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"ReplicaModificationsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicaModifications` resource\n *\n * @param properties - the TypeScript properties of a `ReplicaModificationsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicaModifications` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketReplicaModificationsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_ReplicaModificationsPropertyValidator(properties).assertSuccess();\n    return {\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketReplicaModificationsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.ReplicaModificationsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.ReplicaModificationsProperty>();\n    ret.addPropertyResult('status', 'Status', cfn_parse.FromCloudFormation.getString(properties.Status));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                           \n    export interface ReplicationConfigurationProperty {\nn        readonly role: string;\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly rules: Array<CfnBucket.ReplicationRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReplicationConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ReplicationConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_ReplicationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('role', cdk.requiredValidator)(properties.role));\n    errors.collect(cdk.propertyValidator('role', cdk.validateString)(properties.role));\n    errors.collect(cdk.propertyValidator('rules', cdk.requiredValidator)(properties.rules));\n    errors.collect(cdk.propertyValidator('rules', cdk.listValidator(CfnBucket_ReplicationRulePropertyValidator))(properties.rules));\n    return errors.wrap('supplied properties not correct for \"ReplicationConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ReplicationConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketReplicationConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_ReplicationConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Role: cdk.stringToCloudFormation(properties.role),\n        Rules: cdk.listMapper(cfnBucketReplicationRulePropertyToCloudFormation)(properties.rules),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketReplicationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.ReplicationConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.ReplicationConfigurationProperty>();\n    ret.addPropertyResult('role', 'Role', cfn_parse.FromCloudFormation.getString(properties.Role));\n    ret.addPropertyResult('rules', 'Rules', cfn_parse.FromCloudFormation.getArray(CfnBucketReplicationRulePropertyFromCloudFormation)(properties.Rules));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface ReplicationDestinationProperty {\nn        readonly accessControlTranslation?: CfnBucket.AccessControlTranslationProperty | cdk.IResolvable;\nn        readonly account?: string;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly bucket: string;\n                                                                                                                                                                                                                                                                                                            \n        readonly encryptionConfiguration?: CfnBucket.EncryptionConfigurationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly metrics?: CfnBucket.MetricsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly replicationTime?: CfnBucket.ReplicationTimeProperty | cdk.IResolvable;\nn        readonly storageClass?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReplicationDestinationProperty`\n *\n * @param properties - the TypeScript properties of a `ReplicationDestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_ReplicationDestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessControlTranslation', CfnBucket_AccessControlTranslationPropertyValidator)(properties.accessControlTranslation));\n    errors.collect(cdk.propertyValidator('account', cdk.validateString)(properties.account));\n    errors.collect(cdk.propertyValidator('bucket', cdk.requiredValidator)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('encryptionConfiguration', CfnBucket_EncryptionConfigurationPropertyValidator)(properties.encryptionConfiguration));\n    errors.collect(cdk.propertyValidator('metrics', CfnBucket_MetricsPropertyValidator)(properties.metrics));\n    errors.collect(cdk.propertyValidator('replicationTime', CfnBucket_ReplicationTimePropertyValidator)(properties.replicationTime));\n    errors.collect(cdk.propertyValidator('storageClass', cdk.validateString)(properties.storageClass));\n    return errors.wrap('supplied properties not correct for \"ReplicationDestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationDestination` resource\n *\n * @param properties - the TypeScript properties of a `ReplicationDestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketReplicationDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_ReplicationDestinationPropertyValidator(properties).assertSuccess();\n    return {\n        AccessControlTranslation: cfnBucketAccessControlTranslationPropertyToCloudFormation(properties.accessControlTranslation),\n        Account: cdk.stringToCloudFormation(properties.account),\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        EncryptionConfiguration: cfnBucketEncryptionConfigurationPropertyToCloudFormation(properties.encryptionConfiguration),\n        Metrics: cfnBucketMetricsPropertyToCloudFormation(properties.metrics),\n        ReplicationTime: cfnBucketReplicationTimePropertyToCloudFormation(properties.replicationTime),\n        StorageClass: cdk.stringToCloudFormation(properties.storageClass),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketReplicationDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.ReplicationDestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.ReplicationDestinationProperty>();\n    ret.addPropertyResult('accessControlTranslation', 'AccessControlTranslation', properties.AccessControlTranslation != null ? CfnBucketAccessControlTranslationPropertyFromCloudFormation(properties.AccessControlTranslation) : undefined);\n    ret.addPropertyResult('account', 'Account', properties.Account != null ? cfn_parse.FromCloudFormation.getString(properties.Account) : undefined);\n    ret.addPropertyResult('bucket', 'Bucket', cfn_parse.FromCloudFormation.getString(properties.Bucket));\n    ret.addPropertyResult('encryptionConfiguration', 'EncryptionConfiguration', properties.EncryptionConfiguration != null ? CfnBucketEncryptionConfigurationPropertyFromCloudFormation(properties.EncryptionConfiguration) : undefined);\n    ret.addPropertyResult('metrics', 'Metrics', properties.Metrics != null ? CfnBucketMetricsPropertyFromCloudFormation(properties.Metrics) : undefined);\n    ret.addPropertyResult('replicationTime', 'ReplicationTime', properties.ReplicationTime != null ? CfnBucketReplicationTimePropertyFromCloudFormation(properties.ReplicationTime) : undefined);\n    ret.addPropertyResult('storageClass', 'StorageClass', properties.StorageClass != null ? cfn_parse.FromCloudFormation.getString(properties.StorageClass) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                      \n    export interface ReplicationRuleProperty {\nn        readonly deleteMarkerReplication?: CfnBucket.DeleteMarkerReplicationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly destination: CfnBucket.ReplicationDestinationProperty | cdk.IResolvable;\nn        readonly filter?: CfnBucket.ReplicationRuleFilterProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly id?: string;\nn        readonly prefix?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly priority?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly sourceSelectionCriteria?: CfnBucket.SourceSelectionCriteriaProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                    \n        readonly status: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReplicationRuleProperty`\n *\n * @param properties - the TypeScript properties of a `ReplicationRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_ReplicationRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deleteMarkerReplication', CfnBucket_DeleteMarkerReplicationPropertyValidator)(properties.deleteMarkerReplication));\n    errors.collect(cdk.propertyValidator('destination', cdk.requiredValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('destination', CfnBucket_ReplicationDestinationPropertyValidator)(properties.destination));\n    errors.collect(cdk.propertyValidator('filter', CfnBucket_ReplicationRuleFilterPropertyValidator)(properties.filter));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('prefix', cdk.validateString)(properties.prefix));\n    errors.collect(cdk.propertyValidator('priority', cdk.validateNumber)(properties.priority));\n    errors.collect(cdk.propertyValidator('sourceSelectionCriteria', CfnBucket_SourceSelectionCriteriaPropertyValidator)(properties.sourceSelectionCriteria));\n    errors.collect(cdk.propertyValidator('status', cdk.requiredValidator)(properties.status));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"ReplicationRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationRule` resource\n *\n * @param properties - the TypeScript properties of a `ReplicationRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketReplicationRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_ReplicationRulePropertyValidator(properties).assertSuccess();\n    return {\n        DeleteMarkerReplication: cfnBucketDeleteMarkerReplicationPropertyToCloudFormation(properties.deleteMarkerReplication),\n        Destination: cfnBucketReplicationDestinationPropertyToCloudFormation(properties.destination),\n        Filter: cfnBucketReplicationRuleFilterPropertyToCloudFormation(properties.filter),\n        Id: cdk.stringToCloudFormation(properties.id),\n        Prefix: cdk.stringToCloudFormation(properties.prefix),\n        Priority: cdk.numberToCloudFormation(properties.priority),\n        SourceSelectionCriteria: cfnBucketSourceSelectionCriteriaPropertyToCloudFormation(properties.sourceSelectionCriteria),\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketReplicationRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.ReplicationRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.ReplicationRuleProperty>();\n    ret.addPropertyResult('deleteMarkerReplication', 'DeleteMarkerReplication', properties.DeleteMarkerReplication != null ? CfnBucketDeleteMarkerReplicationPropertyFromCloudFormation(properties.DeleteMarkerReplication) : undefined);\n    ret.addPropertyResult('destination', 'Destination', CfnBucketReplicationDestinationPropertyFromCloudFormation(properties.Destination));\n    ret.addPropertyResult('filter', 'Filter', properties.Filter != null ? CfnBucketReplicationRuleFilterPropertyFromCloudFormation(properties.Filter) : undefined);\n    ret.addPropertyResult('id', 'Id', properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : undefined);\n    ret.addPropertyResult('prefix', 'Prefix', properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : undefined);\n    ret.addPropertyResult('priority', 'Priority', properties.Priority != null ? cfn_parse.FromCloudFormation.getNumber(properties.Priority) : undefined);\n    ret.addPropertyResult('sourceSelectionCriteria', 'SourceSelectionCriteria', properties.SourceSelectionCriteria != null ? CfnBucketSourceSelectionCriteriaPropertyFromCloudFormation(properties.SourceSelectionCriteria) : undefined);\n    ret.addPropertyResult('status', 'Status', cfn_parse.FromCloudFormation.getString(properties.Status));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface ReplicationRuleAndOperatorProperty {\n                                                                                                                                                                                                                                                                                                                                \n        readonly prefix?: string;\n                                                                                                                                                                                                                                                                                          \n        readonly tagFilters?: Array<CfnBucket.TagFilterProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReplicationRuleAndOperatorProperty`\n *\n * @param properties - the TypeScript properties of a `ReplicationRuleAndOperatorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_ReplicationRuleAndOperatorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('prefix', cdk.validateString)(properties.prefix));\n    errors.collect(cdk.propertyValidator('tagFilters', cdk.listValidator(CfnBucket_TagFilterPropertyValidator))(properties.tagFilters));\n    return errors.wrap('supplied properties not correct for \"ReplicationRuleAndOperatorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationRuleAndOperator` resource\n *\n * @param properties - the TypeScript properties of a `ReplicationRuleAndOperatorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationRuleAndOperator` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketReplicationRuleAndOperatorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_ReplicationRuleAndOperatorPropertyValidator(properties).assertSuccess();\n    return {\n        Prefix: cdk.stringToCloudFormation(properties.prefix),\n        TagFilters: cdk.listMapper(cfnBucketTagFilterPropertyToCloudFormation)(properties.tagFilters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketReplicationRuleAndOperatorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.ReplicationRuleAndOperatorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.ReplicationRuleAndOperatorProperty>();\n    ret.addPropertyResult('prefix', 'Prefix', properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : undefined);\n    ret.addPropertyResult('tagFilters', 'TagFilters', properties.TagFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTagFilterPropertyFromCloudFormation)(properties.TagFilters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface ReplicationRuleFilterProperty {\nn        readonly and?: CfnBucket.ReplicationRuleAndOperatorProperty | cdk.IResolvable;\nn        readonly prefix?: string;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly tagFilter?: CfnBucket.TagFilterProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReplicationRuleFilterProperty`\n *\n * @param properties - the TypeScript properties of a `ReplicationRuleFilterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_ReplicationRuleFilterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('and', CfnBucket_ReplicationRuleAndOperatorPropertyValidator)(properties.and));\n    errors.collect(cdk.propertyValidator('prefix', cdk.validateString)(properties.prefix));\n    errors.collect(cdk.propertyValidator('tagFilter', CfnBucket_TagFilterPropertyValidator)(properties.tagFilter));\n    return errors.wrap('supplied properties not correct for \"ReplicationRuleFilterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationRuleFilter` resource\n *\n * @param properties - the TypeScript properties of a `ReplicationRuleFilterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationRuleFilter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketReplicationRuleFilterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_ReplicationRuleFilterPropertyValidator(properties).assertSuccess();\n    return {\n        And: cfnBucketReplicationRuleAndOperatorPropertyToCloudFormation(properties.and),\n        Prefix: cdk.stringToCloudFormation(properties.prefix),\n        TagFilter: cfnBucketTagFilterPropertyToCloudFormation(properties.tagFilter),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketReplicationRuleFilterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.ReplicationRuleFilterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.ReplicationRuleFilterProperty>();\n    ret.addPropertyResult('and', 'And', properties.And != null ? CfnBucketReplicationRuleAndOperatorPropertyFromCloudFormation(properties.And) : undefined);\n    ret.addPropertyResult('prefix', 'Prefix', properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : undefined);\n    ret.addPropertyResult('tagFilter', 'TagFilter', properties.TagFilter != null ? CfnBucketTagFilterPropertyFromCloudFormation(properties.TagFilter) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface ReplicationTimeProperty {\n                                                                                                                                                                                                                                                                  \n        readonly status: string;\n                                                                                                                                                                                                                                                                                                                                \n        readonly time: CfnBucket.ReplicationTimeValueProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReplicationTimeProperty`\n *\n * @param properties - the TypeScript properties of a `ReplicationTimeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_ReplicationTimePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('status', cdk.requiredValidator)(properties.status));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    errors.collect(cdk.propertyValidator('time', cdk.requiredValidator)(properties.time));\n    errors.collect(cdk.propertyValidator('time', CfnBucket_ReplicationTimeValuePropertyValidator)(properties.time));\n    return errors.wrap('supplied properties not correct for \"ReplicationTimeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationTime` resource\n *\n * @param properties - the TypeScript properties of a `ReplicationTimeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationTime` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketReplicationTimePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_ReplicationTimePropertyValidator(properties).assertSuccess();\n    return {\n        Status: cdk.stringToCloudFormation(properties.status),\n        Time: cfnBucketReplicationTimeValuePropertyToCloudFormation(properties.time),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketReplicationTimePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.ReplicationTimeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.ReplicationTimeProperty>();\n    ret.addPropertyResult('status', 'Status', cfn_parse.FromCloudFormation.getString(properties.Status));\n    ret.addPropertyResult('time', 'Time', CfnBucketReplicationTimeValuePropertyFromCloudFormation(properties.Time));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                      \n    export interface ReplicationTimeValueProperty {\n                                                                                                                                                                                                                                                                                                                \n        readonly minutes: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ReplicationTimeValueProperty`\n *\n * @param properties - the TypeScript properties of a `ReplicationTimeValueProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_ReplicationTimeValuePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('minutes', cdk.requiredValidator)(properties.minutes));\n    errors.collect(cdk.propertyValidator('minutes', cdk.validateNumber)(properties.minutes));\n    return errors.wrap('supplied properties not correct for \"ReplicationTimeValueProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationTimeValue` resource\n *\n * @param properties - the TypeScript properties of a `ReplicationTimeValueProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.ReplicationTimeValue` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketReplicationTimeValuePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_ReplicationTimeValuePropertyValidator(properties).assertSuccess();\n    return {\n        Minutes: cdk.numberToCloudFormation(properties.minutes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketReplicationTimeValuePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.ReplicationTimeValueProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.ReplicationTimeValueProperty>();\n    ret.addPropertyResult('minutes', 'Minutes', cfn_parse.FromCloudFormation.getNumber(properties.Minutes));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface RoutingRuleProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly redirectRule: CfnBucket.RedirectRuleProperty | cdk.IResolvable;\nn        readonly routingRuleCondition?: CfnBucket.RoutingRuleConditionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RoutingRuleProperty`\n *\n * @param properties - the TypeScript properties of a `RoutingRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_RoutingRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('redirectRule', cdk.requiredValidator)(properties.redirectRule));\n    errors.collect(cdk.propertyValidator('redirectRule', CfnBucket_RedirectRulePropertyValidator)(properties.redirectRule));\n    errors.collect(cdk.propertyValidator('routingRuleCondition', CfnBucket_RoutingRuleConditionPropertyValidator)(properties.routingRuleCondition));\n    return errors.wrap('supplied properties not correct for \"RoutingRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.RoutingRule` resource\n *\n * @param properties - the TypeScript properties of a `RoutingRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.RoutingRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketRoutingRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_RoutingRulePropertyValidator(properties).assertSuccess();\n    return {\n        RedirectRule: cfnBucketRedirectRulePropertyToCloudFormation(properties.redirectRule),\n        RoutingRuleCondition: cfnBucketRoutingRuleConditionPropertyToCloudFormation(properties.routingRuleCondition),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketRoutingRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.RoutingRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.RoutingRuleProperty>();\n    ret.addPropertyResult('redirectRule', 'RedirectRule', CfnBucketRedirectRulePropertyFromCloudFormation(properties.RedirectRule));\n    ret.addPropertyResult('routingRuleCondition', 'RoutingRuleCondition', properties.RoutingRuleCondition != null ? CfnBucketRoutingRuleConditionPropertyFromCloudFormation(properties.RoutingRuleCondition) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface RoutingRuleConditionProperty {\nn        readonly httpErrorCodeReturnedEquals?: string;\nn        readonly keyPrefixEquals?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RoutingRuleConditionProperty`\n *\n * @param properties - the TypeScript properties of a `RoutingRuleConditionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_RoutingRuleConditionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('httpErrorCodeReturnedEquals', cdk.validateString)(properties.httpErrorCodeReturnedEquals));\n    errors.collect(cdk.propertyValidator('keyPrefixEquals', cdk.validateString)(properties.keyPrefixEquals));\n    return errors.wrap('supplied properties not correct for \"RoutingRuleConditionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.RoutingRuleCondition` resource\n *\n * @param properties - the TypeScript properties of a `RoutingRuleConditionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.RoutingRuleCondition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketRoutingRuleConditionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_RoutingRuleConditionPropertyValidator(properties).assertSuccess();\n    return {\n        HttpErrorCodeReturnedEquals: cdk.stringToCloudFormation(properties.httpErrorCodeReturnedEquals),\n        KeyPrefixEquals: cdk.stringToCloudFormation(properties.keyPrefixEquals),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketRoutingRuleConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.RoutingRuleConditionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.RoutingRuleConditionProperty>();\n    ret.addPropertyResult('httpErrorCodeReturnedEquals', 'HttpErrorCodeReturnedEquals', properties.HttpErrorCodeReturnedEquals != null ? cfn_parse.FromCloudFormation.getString(properties.HttpErrorCodeReturnedEquals) : undefined);\n    ret.addPropertyResult('keyPrefixEquals', 'KeyPrefixEquals', properties.KeyPrefixEquals != null ? cfn_parse.FromCloudFormation.getString(properties.KeyPrefixEquals) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface RuleProperty {\n                                                                                                                                                                                                                                                                                                                            \n        readonly abortIncompleteMultipartUpload?: CfnBucket.AbortIncompleteMultipartUploadProperty | cdk.IResolvable;\nn        readonly expirationDate?: Date | cdk.IResolvable;\nn        readonly expirationInDays?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly expiredObjectDeleteMarker?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                    \n        readonly id?: string;\nn        readonly noncurrentVersionExpiration?: CfnBucket.NoncurrentVersionExpirationProperty | cdk.IResolvable;\nn        readonly noncurrentVersionExpirationInDays?: number;\nn        readonly noncurrentVersionTransition?: CfnBucket.NoncurrentVersionTransitionProperty | cdk.IResolvable;\nn        readonly noncurrentVersionTransitions?: Array<CfnBucket.NoncurrentVersionTransitionProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly objectSizeGreaterThan?: number;\nn        readonly objectSizeLessThan?: number;\nn        readonly prefix?: string;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly status: string;\n                                                                                                                                                                                                                                                                                              \n        readonly tagFilters?: Array<CfnBucket.TagFilterProperty | cdk.IResolvable> | cdk.IResolvable;\nn        readonly transition?: CfnBucket.TransitionProperty | cdk.IResolvable;\nn        readonly transitions?: Array<CfnBucket.TransitionProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RuleProperty`\n *\n * @param properties - the TypeScript properties of a `RuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_RulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('abortIncompleteMultipartUpload', CfnBucket_AbortIncompleteMultipartUploadPropertyValidator)(properties.abortIncompleteMultipartUpload));\n    errors.collect(cdk.propertyValidator('expirationDate', cdk.validateDate)(properties.expirationDate));\n    errors.collect(cdk.propertyValidator('expirationInDays', cdk.validateNumber)(properties.expirationInDays));\n    errors.collect(cdk.propertyValidator('expiredObjectDeleteMarker', cdk.validateBoolean)(properties.expiredObjectDeleteMarker));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('noncurrentVersionExpiration', CfnBucket_NoncurrentVersionExpirationPropertyValidator)(properties.noncurrentVersionExpiration));\n    errors.collect(cdk.propertyValidator('noncurrentVersionExpirationInDays', cdk.validateNumber)(properties.noncurrentVersionExpirationInDays));\n    errors.collect(cdk.propertyValidator('noncurrentVersionTransition', CfnBucket_NoncurrentVersionTransitionPropertyValidator)(properties.noncurrentVersionTransition));\n    errors.collect(cdk.propertyValidator('noncurrentVersionTransitions', cdk.listValidator(CfnBucket_NoncurrentVersionTransitionPropertyValidator))(properties.noncurrentVersionTransitions));\n    errors.collect(cdk.propertyValidator('objectSizeGreaterThan', cdk.validateNumber)(properties.objectSizeGreaterThan));\n    errors.collect(cdk.propertyValidator('objectSizeLessThan', cdk.validateNumber)(properties.objectSizeLessThan));\n    errors.collect(cdk.propertyValidator('prefix', cdk.validateString)(properties.prefix));\n    errors.collect(cdk.propertyValidator('status', cdk.requiredValidator)(properties.status));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    errors.collect(cdk.propertyValidator('tagFilters', cdk.listValidator(CfnBucket_TagFilterPropertyValidator))(properties.tagFilters));\n    errors.collect(cdk.propertyValidator('transition', CfnBucket_TransitionPropertyValidator)(properties.transition));\n    errors.collect(cdk.propertyValidator('transitions', cdk.listValidator(CfnBucket_TransitionPropertyValidator))(properties.transitions));\n    return errors.wrap('supplied properties not correct for \"RuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.Rule` resource\n *\n * @param properties - the TypeScript properties of a `RuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.Rule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_RulePropertyValidator(properties).assertSuccess();\n    return {\n        AbortIncompleteMultipartUpload: cfnBucketAbortIncompleteMultipartUploadPropertyToCloudFormation(properties.abortIncompleteMultipartUpload),\n        ExpirationDate: cdk.dateToCloudFormation(properties.expirationDate),\n        ExpirationInDays: cdk.numberToCloudFormation(properties.expirationInDays),\n        ExpiredObjectDeleteMarker: cdk.booleanToCloudFormation(properties.expiredObjectDeleteMarker),\n        Id: cdk.stringToCloudFormation(properties.id),\n        NoncurrentVersionExpiration: cfnBucketNoncurrentVersionExpirationPropertyToCloudFormation(properties.noncurrentVersionExpiration),\n        NoncurrentVersionExpirationInDays: cdk.numberToCloudFormation(properties.noncurrentVersionExpirationInDays),\n        NoncurrentVersionTransition: cfnBucketNoncurrentVersionTransitionPropertyToCloudFormation(properties.noncurrentVersionTransition),\n        NoncurrentVersionTransitions: cdk.listMapper(cfnBucketNoncurrentVersionTransitionPropertyToCloudFormation)(properties.noncurrentVersionTransitions),\n        ObjectSizeGreaterThan: cdk.numberToCloudFormation(properties.objectSizeGreaterThan),\n        ObjectSizeLessThan: cdk.numberToCloudFormation(properties.objectSizeLessThan),\n        Prefix: cdk.stringToCloudFormation(properties.prefix),\n        Status: cdk.stringToCloudFormation(properties.status),\n        TagFilters: cdk.listMapper(cfnBucketTagFilterPropertyToCloudFormation)(properties.tagFilters),\n        Transition: cfnBucketTransitionPropertyToCloudFormation(properties.transition),\n        Transitions: cdk.listMapper(cfnBucketTransitionPropertyToCloudFormation)(properties.transitions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.RuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.RuleProperty>();\n    ret.addPropertyResult('abortIncompleteMultipartUpload', 'AbortIncompleteMultipartUpload', properties.AbortIncompleteMultipartUpload != null ? CfnBucketAbortIncompleteMultipartUploadPropertyFromCloudFormation(properties.AbortIncompleteMultipartUpload) : undefined);\n    ret.addPropertyResult('expirationDate', 'ExpirationDate', properties.ExpirationDate != null ? cfn_parse.FromCloudFormation.getDate(properties.ExpirationDate) : undefined);\n    ret.addPropertyResult('expirationInDays', 'ExpirationInDays', properties.ExpirationInDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.ExpirationInDays) : undefined);\n    ret.addPropertyResult('expiredObjectDeleteMarker', 'ExpiredObjectDeleteMarker', properties.ExpiredObjectDeleteMarker != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ExpiredObjectDeleteMarker) : undefined);\n    ret.addPropertyResult('id', 'Id', properties.Id != null ? cfn_parse.FromCloudFormation.getString(properties.Id) : undefined);\n    ret.addPropertyResult('noncurrentVersionExpiration', 'NoncurrentVersionExpiration', properties.NoncurrentVersionExpiration != null ? CfnBucketNoncurrentVersionExpirationPropertyFromCloudFormation(properties.NoncurrentVersionExpiration) : undefined);\n    ret.addPropertyResult('noncurrentVersionExpirationInDays', 'NoncurrentVersionExpirationInDays', properties.NoncurrentVersionExpirationInDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.NoncurrentVersionExpirationInDays) : undefined);\n    ret.addPropertyResult('noncurrentVersionTransition', 'NoncurrentVersionTransition', properties.NoncurrentVersionTransition != null ? CfnBucketNoncurrentVersionTransitionPropertyFromCloudFormation(properties.NoncurrentVersionTransition) : undefined);\n    ret.addPropertyResult('noncurrentVersionTransitions', 'NoncurrentVersionTransitions', properties.NoncurrentVersionTransitions != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketNoncurrentVersionTransitionPropertyFromCloudFormation)(properties.NoncurrentVersionTransitions) : undefined);\n    ret.addPropertyResult('objectSizeGreaterThan', 'ObjectSizeGreaterThan', properties.ObjectSizeGreaterThan != null ? cfn_parse.FromCloudFormation.getNumber(properties.ObjectSizeGreaterThan) : undefined);\n    ret.addPropertyResult('objectSizeLessThan', 'ObjectSizeLessThan', properties.ObjectSizeLessThan != null ? cfn_parse.FromCloudFormation.getNumber(properties.ObjectSizeLessThan) : undefined);\n    ret.addPropertyResult('prefix', 'Prefix', properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : undefined);\n    ret.addPropertyResult('status', 'Status', cfn_parse.FromCloudFormation.getString(properties.Status));\n    ret.addPropertyResult('tagFilters', 'TagFilters', properties.TagFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTagFilterPropertyFromCloudFormation)(properties.TagFilters) : undefined);\n    ret.addPropertyResult('transition', 'Transition', properties.Transition != null ? CfnBucketTransitionPropertyFromCloudFormation(properties.Transition) : undefined);\n    ret.addPropertyResult('transitions', 'Transitions', properties.Transitions != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketTransitionPropertyFromCloudFormation)(properties.Transitions) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface S3KeyFilterProperty {\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly rules: Array<CfnBucket.FilterRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3KeyFilterProperty`\n *\n * @param properties - the TypeScript properties of a `S3KeyFilterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_S3KeyFilterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('rules', cdk.requiredValidator)(properties.rules));\n    errors.collect(cdk.propertyValidator('rules', cdk.listValidator(CfnBucket_FilterRulePropertyValidator))(properties.rules));\n    return errors.wrap('supplied properties not correct for \"S3KeyFilterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.S3KeyFilter` resource\n *\n * @param properties - the TypeScript properties of a `S3KeyFilterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.S3KeyFilter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketS3KeyFilterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_S3KeyFilterPropertyValidator(properties).assertSuccess();\n    return {\n        Rules: cdk.listMapper(cfnBucketFilterRulePropertyToCloudFormation)(properties.rules),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketS3KeyFilterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.S3KeyFilterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.S3KeyFilterProperty>();\n    ret.addPropertyResult('rules', 'Rules', cfn_parse.FromCloudFormation.getArray(CfnBucketFilterRulePropertyFromCloudFormation)(properties.Rules));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface ServerSideEncryptionByDefaultProperty {\nn        readonly kmsMasterKeyId?: string;\n                                                                                                                                                                                                                                                                                                                     \n        readonly sseAlgorithm: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ServerSideEncryptionByDefaultProperty`\n *\n * @param properties - the TypeScript properties of a `ServerSideEncryptionByDefaultProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_ServerSideEncryptionByDefaultPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsMasterKeyId', cdk.validateString)(properties.kmsMasterKeyId));\n    errors.collect(cdk.propertyValidator('sseAlgorithm', cdk.requiredValidator)(properties.sseAlgorithm));\n    errors.collect(cdk.propertyValidator('sseAlgorithm', cdk.validateString)(properties.sseAlgorithm));\n    return errors.wrap('supplied properties not correct for \"ServerSideEncryptionByDefaultProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.ServerSideEncryptionByDefault` resource\n *\n * @param properties - the TypeScript properties of a `ServerSideEncryptionByDefaultProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.ServerSideEncryptionByDefault` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketServerSideEncryptionByDefaultPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_ServerSideEncryptionByDefaultPropertyValidator(properties).assertSuccess();\n    return {\n        KMSMasterKeyID: cdk.stringToCloudFormation(properties.kmsMasterKeyId),\n        SSEAlgorithm: cdk.stringToCloudFormation(properties.sseAlgorithm),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketServerSideEncryptionByDefaultPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.ServerSideEncryptionByDefaultProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.ServerSideEncryptionByDefaultProperty>();\n    ret.addPropertyResult('kmsMasterKeyId', 'KMSMasterKeyID', properties.KMSMasterKeyID != null ? cfn_parse.FromCloudFormation.getString(properties.KMSMasterKeyID) : undefined);\n    ret.addPropertyResult('sseAlgorithm', 'SSEAlgorithm', cfn_parse.FromCloudFormation.getString(properties.SSEAlgorithm));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                            \n    export interface ServerSideEncryptionRuleProperty {\nn        readonly bucketKeyEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly serverSideEncryptionByDefault?: CfnBucket.ServerSideEncryptionByDefaultProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ServerSideEncryptionRuleProperty`\n *\n * @param properties - the TypeScript properties of a `ServerSideEncryptionRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_ServerSideEncryptionRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketKeyEnabled', cdk.validateBoolean)(properties.bucketKeyEnabled));\n    errors.collect(cdk.propertyValidator('serverSideEncryptionByDefault', CfnBucket_ServerSideEncryptionByDefaultPropertyValidator)(properties.serverSideEncryptionByDefault));\n    return errors.wrap('supplied properties not correct for \"ServerSideEncryptionRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.ServerSideEncryptionRule` resource\n *\n * @param properties - the TypeScript properties of a `ServerSideEncryptionRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.ServerSideEncryptionRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketServerSideEncryptionRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_ServerSideEncryptionRulePropertyValidator(properties).assertSuccess();\n    return {\n        BucketKeyEnabled: cdk.booleanToCloudFormation(properties.bucketKeyEnabled),\n        ServerSideEncryptionByDefault: cfnBucketServerSideEncryptionByDefaultPropertyToCloudFormation(properties.serverSideEncryptionByDefault),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketServerSideEncryptionRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.ServerSideEncryptionRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.ServerSideEncryptionRuleProperty>();\n    ret.addPropertyResult('bucketKeyEnabled', 'BucketKeyEnabled', properties.BucketKeyEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BucketKeyEnabled) : undefined);\n    ret.addPropertyResult('serverSideEncryptionByDefault', 'ServerSideEncryptionByDefault', properties.ServerSideEncryptionByDefault != null ? CfnBucketServerSideEncryptionByDefaultPropertyFromCloudFormation(properties.ServerSideEncryptionByDefault) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface SourceSelectionCriteriaProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly replicaModifications?: CfnBucket.ReplicaModificationsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly sseKmsEncryptedObjects?: CfnBucket.SseKmsEncryptedObjectsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SourceSelectionCriteriaProperty`\n *\n * @param properties - the TypeScript properties of a `SourceSelectionCriteriaProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_SourceSelectionCriteriaPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('replicaModifications', CfnBucket_ReplicaModificationsPropertyValidator)(properties.replicaModifications));\n    errors.collect(cdk.propertyValidator('sseKmsEncryptedObjects', CfnBucket_SseKmsEncryptedObjectsPropertyValidator)(properties.sseKmsEncryptedObjects));\n    return errors.wrap('supplied properties not correct for \"SourceSelectionCriteriaProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.SourceSelectionCriteria` resource\n *\n * @param properties - the TypeScript properties of a `SourceSelectionCriteriaProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.SourceSelectionCriteria` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketSourceSelectionCriteriaPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_SourceSelectionCriteriaPropertyValidator(properties).assertSuccess();\n    return {\n        ReplicaModifications: cfnBucketReplicaModificationsPropertyToCloudFormation(properties.replicaModifications),\n        SseKmsEncryptedObjects: cfnBucketSseKmsEncryptedObjectsPropertyToCloudFormation(properties.sseKmsEncryptedObjects),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketSourceSelectionCriteriaPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.SourceSelectionCriteriaProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.SourceSelectionCriteriaProperty>();\n    ret.addPropertyResult('replicaModifications', 'ReplicaModifications', properties.ReplicaModifications != null ? CfnBucketReplicaModificationsPropertyFromCloudFormation(properties.ReplicaModifications) : undefined);\n    ret.addPropertyResult('sseKmsEncryptedObjects', 'SseKmsEncryptedObjects', properties.SseKmsEncryptedObjects != null ? CfnBucketSseKmsEncryptedObjectsPropertyFromCloudFormation(properties.SseKmsEncryptedObjects) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                         \n    export interface SseKmsEncryptedObjectsProperty {\n                                                                                                                                                                                                                                                                                                                                                                           \n        readonly status: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SseKmsEncryptedObjectsProperty`\n *\n * @param properties - the TypeScript properties of a `SseKmsEncryptedObjectsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_SseKmsEncryptedObjectsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('status', cdk.requiredValidator)(properties.status));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"SseKmsEncryptedObjectsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.SseKmsEncryptedObjects` resource\n *\n * @param properties - the TypeScript properties of a `SseKmsEncryptedObjectsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.SseKmsEncryptedObjects` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketSseKmsEncryptedObjectsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_SseKmsEncryptedObjectsPropertyValidator(properties).assertSuccess();\n    return {\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketSseKmsEncryptedObjectsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.SseKmsEncryptedObjectsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.SseKmsEncryptedObjectsProperty>();\n    ret.addPropertyResult('status', 'Status', cfn_parse.FromCloudFormation.getString(properties.Status));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                             \n    export interface StorageClassAnalysisProperty {\n                                                                                                                                                                                                                                                                                                                                  \n        readonly dataExport?: CfnBucket.DataExportProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StorageClassAnalysisProperty`\n *\n * @param properties - the TypeScript properties of a `StorageClassAnalysisProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_StorageClassAnalysisPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataExport', CfnBucket_DataExportPropertyValidator)(properties.dataExport));\n    return errors.wrap('supplied properties not correct for \"StorageClassAnalysisProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.StorageClassAnalysis` resource\n *\n * @param properties - the TypeScript properties of a `StorageClassAnalysisProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.StorageClassAnalysis` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketStorageClassAnalysisPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_StorageClassAnalysisPropertyValidator(properties).assertSuccess();\n    return {\n        DataExport: cfnBucketDataExportPropertyToCloudFormation(properties.dataExport),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketStorageClassAnalysisPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.StorageClassAnalysisProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.StorageClassAnalysisProperty>();\n    ret.addPropertyResult('dataExport', 'DataExport', properties.DataExport != null ? CfnBucketDataExportPropertyFromCloudFormation(properties.DataExport) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                \n    export interface TagFilterProperty {\n                                                                                                                                                                                                             \n        readonly key: string;\n                                                                                                                                                                                                                 \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagFilterProperty`\n *\n * @param properties - the TypeScript properties of a `TagFilterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_TagFilterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"TagFilterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.TagFilter` resource\n *\n * @param properties - the TypeScript properties of a `TagFilterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.TagFilter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketTagFilterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_TagFilterPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketTagFilterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.TagFilterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.TagFilterProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface TieringProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly accessTier: string;\nn        readonly days: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TieringProperty`\n *\n * @param properties - the TypeScript properties of a `TieringProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_TieringPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accessTier', cdk.requiredValidator)(properties.accessTier));\n    errors.collect(cdk.propertyValidator('accessTier', cdk.validateString)(properties.accessTier));\n    errors.collect(cdk.propertyValidator('days', cdk.requiredValidator)(properties.days));\n    errors.collect(cdk.propertyValidator('days', cdk.validateNumber)(properties.days));\n    return errors.wrap('supplied properties not correct for \"TieringProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.Tiering` resource\n *\n * @param properties - the TypeScript properties of a `TieringProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.Tiering` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketTieringPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_TieringPropertyValidator(properties).assertSuccess();\n    return {\n        AccessTier: cdk.stringToCloudFormation(properties.accessTier),\n        Days: cdk.numberToCloudFormation(properties.days),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketTieringPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.TieringProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.TieringProperty>();\n    ret.addPropertyResult('accessTier', 'AccessTier', cfn_parse.FromCloudFormation.getString(properties.AccessTier));\n    ret.addPropertyResult('days', 'Days', cfn_parse.FromCloudFormation.getNumber(properties.Days));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface TopicConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly event: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly filter?: CfnBucket.NotificationFilterProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly topic: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TopicConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `TopicConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_TopicConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('event', cdk.requiredValidator)(properties.event));\n    errors.collect(cdk.propertyValidator('event', cdk.validateString)(properties.event));\n    errors.collect(cdk.propertyValidator('filter', CfnBucket_NotificationFilterPropertyValidator)(properties.filter));\n    errors.collect(cdk.propertyValidator('topic', cdk.requiredValidator)(properties.topic));\n    errors.collect(cdk.propertyValidator('topic', cdk.validateString)(properties.topic));\n    return errors.wrap('supplied properties not correct for \"TopicConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.TopicConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `TopicConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.TopicConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketTopicConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_TopicConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Event: cdk.stringToCloudFormation(properties.event),\n        Filter: cfnBucketNotificationFilterPropertyToCloudFormation(properties.filter),\n        Topic: cdk.stringToCloudFormation(properties.topic),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketTopicConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.TopicConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.TopicConfigurationProperty>();\n    ret.addPropertyResult('event', 'Event', cfn_parse.FromCloudFormation.getString(properties.Event));\n    ret.addPropertyResult('filter', 'Filter', properties.Filter != null ? CfnBucketNotificationFilterPropertyFromCloudFormation(properties.Filter) : undefined);\n    ret.addPropertyResult('topic', 'Topic', cfn_parse.FromCloudFormation.getString(properties.Topic));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\nn    export interface TransitionProperty {\n                                                                                                                                                                                                                                                                                                                   \n        readonly storageClass: string;\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly transitionDate?: Date | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly transitionInDays?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TransitionProperty`\n *\n * @param properties - the TypeScript properties of a `TransitionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_TransitionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('storageClass', cdk.requiredValidator)(properties.storageClass));\n    errors.collect(cdk.propertyValidator('storageClass', cdk.validateString)(properties.storageClass));\n    errors.collect(cdk.propertyValidator('transitionDate', cdk.validateDate)(properties.transitionDate));\n    errors.collect(cdk.propertyValidator('transitionInDays', cdk.validateNumber)(properties.transitionInDays));\n    return errors.wrap('supplied properties not correct for \"TransitionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.Transition` resource\n *\n * @param properties - the TypeScript properties of a `TransitionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.Transition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketTransitionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_TransitionPropertyValidator(properties).assertSuccess();\n    return {\n        StorageClass: cdk.stringToCloudFormation(properties.storageClass),\n        TransitionDate: cdk.dateToCloudFormation(properties.transitionDate),\n        TransitionInDays: cdk.numberToCloudFormation(properties.transitionInDays),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketTransitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.TransitionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.TransitionProperty>();\n    ret.addPropertyResult('storageClass', 'StorageClass', cfn_parse.FromCloudFormation.getString(properties.StorageClass));\n    ret.addPropertyResult('transitionDate', 'TransitionDate', properties.TransitionDate != null ? cfn_parse.FromCloudFormation.getDate(properties.TransitionDate) : undefined);\n    ret.addPropertyResult('transitionInDays', 'TransitionInDays', properties.TransitionInDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.TransitionInDays) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    export interface VersioningConfigurationProperty {\n                                                                                                                                                                                                                                                     \n        readonly status: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VersioningConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `VersioningConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_VersioningConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('status', cdk.requiredValidator)(properties.status));\n    errors.collect(cdk.propertyValidator('status', cdk.validateString)(properties.status));\n    return errors.wrap('supplied properties not correct for \"VersioningConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.VersioningConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `VersioningConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.VersioningConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketVersioningConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_VersioningConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Status: cdk.stringToCloudFormation(properties.status),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketVersioningConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.VersioningConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.VersioningConfigurationProperty>();\n    ret.addPropertyResult('status', 'Status', cfn_parse.FromCloudFormation.getString(properties.Status));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnBucket {\n                                                                                                                                                                                                                                                                         \n    export interface WebsiteConfigurationProperty {\n                                                                                                                                                                                                                                                                  \n        readonly errorDocument?: string;\n                                                                                                                                                                                                                                                                  \n        readonly indexDocument?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly redirectAllRequestsTo?: CfnBucket.RedirectAllRequestsToProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                         \n        readonly routingRules?: Array<CfnBucket.RoutingRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `WebsiteConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `WebsiteConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucket_WebsiteConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('errorDocument', cdk.validateString)(properties.errorDocument));\n    errors.collect(cdk.propertyValidator('indexDocument', cdk.validateString)(properties.indexDocument));\n    errors.collect(cdk.propertyValidator('redirectAllRequestsTo', CfnBucket_RedirectAllRequestsToPropertyValidator)(properties.redirectAllRequestsTo));\n    errors.collect(cdk.propertyValidator('routingRules', cdk.listValidator(CfnBucket_RoutingRulePropertyValidator))(properties.routingRules));\n    return errors.wrap('supplied properties not correct for \"WebsiteConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::Bucket.WebsiteConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `WebsiteConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::Bucket.WebsiteConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketWebsiteConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucket_WebsiteConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ErrorDocument: cdk.stringToCloudFormation(properties.errorDocument),\n        IndexDocument: cdk.stringToCloudFormation(properties.indexDocument),\n        RedirectAllRequestsTo: cfnBucketRedirectAllRequestsToPropertyToCloudFormation(properties.redirectAllRequestsTo),\n        RoutingRules: cdk.listMapper(cfnBucketRoutingRulePropertyToCloudFormation)(properties.routingRules),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketWebsiteConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucket.WebsiteConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucket.WebsiteConfigurationProperty>();\n    ret.addPropertyResult('errorDocument', 'ErrorDocument', properties.ErrorDocument != null ? cfn_parse.FromCloudFormation.getString(properties.ErrorDocument) : undefined);\n    ret.addPropertyResult('indexDocument', 'IndexDocument', properties.IndexDocument != null ? cfn_parse.FromCloudFormation.getString(properties.IndexDocument) : undefined);\n    ret.addPropertyResult('redirectAllRequestsTo', 'RedirectAllRequestsTo', properties.RedirectAllRequestsTo != null ? CfnBucketRedirectAllRequestsToPropertyFromCloudFormation(properties.RedirectAllRequestsTo) : undefined);\n    ret.addPropertyResult('routingRules', 'RoutingRules', properties.RoutingRules != null ? cfn_parse.FromCloudFormation.getArray(CfnBucketRoutingRulePropertyFromCloudFormation)(properties.RoutingRules) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                   \nexport interface CfnBucketPolicyProps {\n\n                                                                                                                                                                                                                                    \n    readonly bucket: string;\n\nn    readonly policyDocument: any | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnBucketPolicyProps`\n *\n * @param properties - the TypeScript properties of a `CfnBucketPolicyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnBucketPolicyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.requiredValidator)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('policyDocument', cdk.requiredValidator)(properties.policyDocument));\n    errors.collect(cdk.propertyValidator('policyDocument', cdk.validateObject)(properties.policyDocument));\n    return errors.wrap('supplied properties not correct for \"CfnBucketPolicyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::BucketPolicy` resource\n *\n * @param properties - the TypeScript properties of a `CfnBucketPolicyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::BucketPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnBucketPolicyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnBucketPolicyPropsValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        PolicyDocument: cdk.objectToCloudFormation(properties.policyDocument),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnBucketPolicyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnBucketPolicyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnBucketPolicyProps>();\n    ret.addPropertyResult('bucket', 'Bucket', cfn_parse.FromCloudFormation.getString(properties.Bucket));\n    ret.addPropertyResult('policyDocument', 'PolicyDocument', cfn_parse.FromCloudFormation.getAny(properties.PolicyDocument));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \nexport class CfnBucketPolicy extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::S3::BucketPolicy\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnBucketPolicy {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnBucketPolicyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnBucketPolicy(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                    \n    public bucket: string;\n\nn    public policyDocument: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnBucketPolicyProps) {\n        super(scope, id, { type: CfnBucketPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'bucket', this);\n        cdk.requireProperty(props, 'policyDocument', this);\n\n        this.bucket = props.bucket;\n        this.policyDocument = props.policyDocument;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnBucketPolicy.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            bucket: this.bucket,\n            policyDocument: this.policyDocument,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnBucketPolicyPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                           \nexport interface CfnMultiRegionAccessPointProps {\n\n                                                                                                                                                                                                                                                                                 \n    readonly regions: Array<CfnMultiRegionAccessPoint.RegionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                  \n    readonly name?: string;\n\nn    readonly publicAccessBlockConfiguration?: CfnMultiRegionAccessPoint.PublicAccessBlockConfigurationProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMultiRegionAccessPointProps`\n *\n * @param properties - the TypeScript properties of a `CfnMultiRegionAccessPointProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMultiRegionAccessPointPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('publicAccessBlockConfiguration', CfnMultiRegionAccessPoint_PublicAccessBlockConfigurationPropertyValidator)(properties.publicAccessBlockConfiguration));\n    errors.collect(cdk.propertyValidator('regions', cdk.requiredValidator)(properties.regions));\n    errors.collect(cdk.propertyValidator('regions', cdk.listValidator(CfnMultiRegionAccessPoint_RegionPropertyValidator))(properties.regions));\n    return errors.wrap('supplied properties not correct for \"CfnMultiRegionAccessPointProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::MultiRegionAccessPoint` resource\n *\n * @param properties - the TypeScript properties of a `CfnMultiRegionAccessPointProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::MultiRegionAccessPoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMultiRegionAccessPointPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMultiRegionAccessPointPropsValidator(properties).assertSuccess();\n    return {\n        Regions: cdk.listMapper(cfnMultiRegionAccessPointRegionPropertyToCloudFormation)(properties.regions),\n        Name: cdk.stringToCloudFormation(properties.name),\n        PublicAccessBlockConfiguration: cfnMultiRegionAccessPointPublicAccessBlockConfigurationPropertyToCloudFormation(properties.publicAccessBlockConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMultiRegionAccessPointPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMultiRegionAccessPointProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMultiRegionAccessPointProps>();\n    ret.addPropertyResult('regions', 'Regions', cfn_parse.FromCloudFormation.getArray(CfnMultiRegionAccessPointRegionPropertyFromCloudFormation)(properties.Regions));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('publicAccessBlockConfiguration', 'PublicAccessBlockConfiguration', properties.PublicAccessBlockConfiguration != null ? CfnMultiRegionAccessPointPublicAccessBlockConfigurationPropertyFromCloudFormation(properties.PublicAccessBlockConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnMultiRegionAccessPoint extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::S3::MultiRegionAccessPoint\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMultiRegionAccessPoint {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMultiRegionAccessPointPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMultiRegionAccessPoint(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public readonly attrAlias: string;\n\n                                                                                                                                \n    public readonly attrCreatedAt: string;\n\n                                                                                                                                                                                                                                                                                 \n    public regions: Array<CfnMultiRegionAccessPoint.RegionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                  \n    public name: string | undefined;\n\nn    public publicAccessBlockConfiguration: CfnMultiRegionAccessPoint.PublicAccessBlockConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnMultiRegionAccessPointProps) {\n        super(scope, id, { type: CfnMultiRegionAccessPoint.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'regions', this);\n        this.attrAlias = cdk.Token.asString(this.getAtt('Alias'));\n        this.attrCreatedAt = cdk.Token.asString(this.getAtt('CreatedAt'));\n\n        this.regions = props.regions;\n        this.name = props.name;\n        this.publicAccessBlockConfiguration = props.publicAccessBlockConfiguration;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMultiRegionAccessPoint.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            regions: this.regions,\n            name: this.name,\n            publicAccessBlockConfiguration: this.publicAccessBlockConfiguration,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMultiRegionAccessPointPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnMultiRegionAccessPoint {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    export interface PublicAccessBlockConfigurationProperty {\nn        readonly blockPublicAcls?: boolean | cdk.IResolvable;\nn        readonly blockPublicPolicy?: boolean | cdk.IResolvable;\nn        readonly ignorePublicAcls?: boolean | cdk.IResolvable;\nn        readonly restrictPublicBuckets?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PublicAccessBlockConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `PublicAccessBlockConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMultiRegionAccessPoint_PublicAccessBlockConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('blockPublicAcls', cdk.validateBoolean)(properties.blockPublicAcls));\n    errors.collect(cdk.propertyValidator('blockPublicPolicy', cdk.validateBoolean)(properties.blockPublicPolicy));\n    errors.collect(cdk.propertyValidator('ignorePublicAcls', cdk.validateBoolean)(properties.ignorePublicAcls));\n    errors.collect(cdk.propertyValidator('restrictPublicBuckets', cdk.validateBoolean)(properties.restrictPublicBuckets));\n    return errors.wrap('supplied properties not correct for \"PublicAccessBlockConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::MultiRegionAccessPoint.PublicAccessBlockConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `PublicAccessBlockConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::MultiRegionAccessPoint.PublicAccessBlockConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMultiRegionAccessPointPublicAccessBlockConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMultiRegionAccessPoint_PublicAccessBlockConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        BlockPublicAcls: cdk.booleanToCloudFormation(properties.blockPublicAcls),\n        BlockPublicPolicy: cdk.booleanToCloudFormation(properties.blockPublicPolicy),\n        IgnorePublicAcls: cdk.booleanToCloudFormation(properties.ignorePublicAcls),\n        RestrictPublicBuckets: cdk.booleanToCloudFormation(properties.restrictPublicBuckets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMultiRegionAccessPointPublicAccessBlockConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMultiRegionAccessPoint.PublicAccessBlockConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMultiRegionAccessPoint.PublicAccessBlockConfigurationProperty>();\n    ret.addPropertyResult('blockPublicAcls', 'BlockPublicAcls', properties.BlockPublicAcls != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BlockPublicAcls) : undefined);\n    ret.addPropertyResult('blockPublicPolicy', 'BlockPublicPolicy', properties.BlockPublicPolicy != null ? cfn_parse.FromCloudFormation.getBoolean(properties.BlockPublicPolicy) : undefined);\n    ret.addPropertyResult('ignorePublicAcls', 'IgnorePublicAcls', properties.IgnorePublicAcls != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IgnorePublicAcls) : undefined);\n    ret.addPropertyResult('restrictPublicBuckets', 'RestrictPublicBuckets', properties.RestrictPublicBuckets != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RestrictPublicBuckets) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMultiRegionAccessPoint {\n                                                                                                                                                                                                                                                                                                   \n    export interface RegionProperty {\n                                                                                                                                                                                                                                                                               \n        readonly bucket: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RegionProperty`\n *\n * @param properties - the TypeScript properties of a `RegionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMultiRegionAccessPoint_RegionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.requiredValidator)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    return errors.wrap('supplied properties not correct for \"RegionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::MultiRegionAccessPoint.Region` resource\n *\n * @param properties - the TypeScript properties of a `RegionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::MultiRegionAccessPoint.Region` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMultiRegionAccessPointRegionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMultiRegionAccessPoint_RegionPropertyValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMultiRegionAccessPointRegionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMultiRegionAccessPoint.RegionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMultiRegionAccessPoint.RegionProperty>();\n    ret.addPropertyResult('bucket', 'Bucket', cfn_parse.FromCloudFormation.getString(properties.Bucket));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                       \nexport interface CfnMultiRegionAccessPointPolicyProps {\n\n                                                                                                                                                                                                                                                  \n    readonly mrapName: string;\n\n                                                                                                                                                                                                                                                                      \n    readonly policy: any | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMultiRegionAccessPointPolicyProps`\n *\n * @param properties - the TypeScript properties of a `CfnMultiRegionAccessPointPolicyProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMultiRegionAccessPointPolicyPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('mrapName', cdk.requiredValidator)(properties.mrapName));\n    errors.collect(cdk.propertyValidator('mrapName', cdk.validateString)(properties.mrapName));\n    errors.collect(cdk.propertyValidator('policy', cdk.requiredValidator)(properties.policy));\n    errors.collect(cdk.propertyValidator('policy', cdk.validateObject)(properties.policy));\n    return errors.wrap('supplied properties not correct for \"CfnMultiRegionAccessPointPolicyProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::MultiRegionAccessPointPolicy` resource\n *\n * @param properties - the TypeScript properties of a `CfnMultiRegionAccessPointPolicyProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::MultiRegionAccessPointPolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMultiRegionAccessPointPolicyPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMultiRegionAccessPointPolicyPropsValidator(properties).assertSuccess();\n    return {\n        MrapName: cdk.stringToCloudFormation(properties.mrapName),\n        Policy: cdk.objectToCloudFormation(properties.policy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMultiRegionAccessPointPolicyPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMultiRegionAccessPointPolicyProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMultiRegionAccessPointPolicyProps>();\n    ret.addPropertyResult('mrapName', 'MrapName', cfn_parse.FromCloudFormation.getString(properties.MrapName));\n    ret.addPropertyResult('policy', 'Policy', cfn_parse.FromCloudFormation.getAny(properties.Policy));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnMultiRegionAccessPointPolicy extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::S3::MultiRegionAccessPointPolicy\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMultiRegionAccessPointPolicy {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMultiRegionAccessPointPolicyPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMultiRegionAccessPointPolicy(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                  \n    public mrapName: string;\n\n                                                                                                                                                                                                                                                                      \n    public policy: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnMultiRegionAccessPointPolicyProps) {\n        super(scope, id, { type: CfnMultiRegionAccessPointPolicy.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'mrapName', this);\n        cdk.requireProperty(props, 'policy', this);\n\n        this.mrapName = props.mrapName;\n        this.policy = props.policy;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMultiRegionAccessPointPolicy.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            mrapName: this.mrapName,\n            policy: this.policy,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMultiRegionAccessPointPolicyPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                     \nexport interface CfnStorageLensProps {\n\n                                                                                                                                                                                                                                                              \n    readonly storageLensConfiguration: CfnStorageLens.StorageLensConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                   \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStorageLensProps`\n *\n * @param properties - the TypeScript properties of a `CfnStorageLensProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStorageLensPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('storageLensConfiguration', cdk.requiredValidator)(properties.storageLensConfiguration));\n    errors.collect(cdk.propertyValidator('storageLensConfiguration', CfnStorageLens_StorageLensConfigurationPropertyValidator)(properties.storageLensConfiguration));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnStorageLensProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::StorageLens` resource\n *\n * @param properties - the TypeScript properties of a `CfnStorageLensProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::StorageLens` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStorageLensPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStorageLensPropsValidator(properties).assertSuccess();\n    return {\n        StorageLensConfiguration: cfnStorageLensStorageLensConfigurationPropertyToCloudFormation(properties.storageLensConfiguration),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStorageLensPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStorageLensProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStorageLensProps>();\n    ret.addPropertyResult('storageLensConfiguration', 'StorageLensConfiguration', CfnStorageLensStorageLensConfigurationPropertyFromCloudFormation(properties.StorageLensConfiguration));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                               \nexport class CfnStorageLens extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::S3::StorageLens\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStorageLens {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStorageLensPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStorageLens(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                              \n    public readonly attrStorageLensConfigurationStorageLensArn: string;\n\n                                                                                                                                                                                                                                                              \n    public storageLensConfiguration: CfnStorageLens.StorageLensConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                   \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                          \n    constructor(scope: constructs.Construct, id: string, props: CfnStorageLensProps) {\n        super(scope, id, { type: CfnStorageLens.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'storageLensConfiguration', this);\n        this.attrStorageLensConfigurationStorageLensArn = cdk.Token.asString(this.getAtt('StorageLensConfiguration.StorageLensArn'));\n\n        this.storageLensConfiguration = props.storageLensConfiguration;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::S3::StorageLens\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStorageLens.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            storageLensConfiguration: this.storageLensConfiguration,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStorageLensPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnStorageLens {\n                                                                                                                                                                                                                                                                                                     \n    export interface AccountLevelProperty {\n                                                                                                                                                                                                                                                                                                                                 \n        readonly activityMetrics?: CfnStorageLens.ActivityMetricsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly bucketLevel: CfnStorageLens.BucketLevelProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AccountLevelProperty`\n *\n * @param properties - the TypeScript properties of a `AccountLevelProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStorageLens_AccountLevelPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('activityMetrics', CfnStorageLens_ActivityMetricsPropertyValidator)(properties.activityMetrics));\n    errors.collect(cdk.propertyValidator('bucketLevel', cdk.requiredValidator)(properties.bucketLevel));\n    errors.collect(cdk.propertyValidator('bucketLevel', CfnStorageLens_BucketLevelPropertyValidator)(properties.bucketLevel));\n    return errors.wrap('supplied properties not correct for \"AccountLevelProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::StorageLens.AccountLevel` resource\n *\n * @param properties - the TypeScript properties of a `AccountLevelProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::StorageLens.AccountLevel` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStorageLensAccountLevelPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStorageLens_AccountLevelPropertyValidator(properties).assertSuccess();\n    return {\n        ActivityMetrics: cfnStorageLensActivityMetricsPropertyToCloudFormation(properties.activityMetrics),\n        BucketLevel: cfnStorageLensBucketLevelPropertyToCloudFormation(properties.bucketLevel),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStorageLensAccountLevelPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStorageLens.AccountLevelProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStorageLens.AccountLevelProperty>();\n    ret.addPropertyResult('activityMetrics', 'ActivityMetrics', properties.ActivityMetrics != null ? CfnStorageLensActivityMetricsPropertyFromCloudFormation(properties.ActivityMetrics) : undefined);\n    ret.addPropertyResult('bucketLevel', 'BucketLevel', CfnStorageLensBucketLevelPropertyFromCloudFormation(properties.BucketLevel));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStorageLens {\n                                                                                                                                                                                                                                                                                                   \n    export interface ActivityMetricsProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly isEnabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ActivityMetricsProperty`\n *\n * @param properties - the TypeScript properties of a `ActivityMetricsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStorageLens_ActivityMetricsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('isEnabled', cdk.validateBoolean)(properties.isEnabled));\n    return errors.wrap('supplied properties not correct for \"ActivityMetricsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::StorageLens.ActivityMetrics` resource\n *\n * @param properties - the TypeScript properties of a `ActivityMetricsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::StorageLens.ActivityMetrics` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStorageLensActivityMetricsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStorageLens_ActivityMetricsPropertyValidator(properties).assertSuccess();\n    return {\n        IsEnabled: cdk.booleanToCloudFormation(properties.isEnabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStorageLensActivityMetricsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStorageLens.ActivityMetricsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStorageLens.ActivityMetricsProperty>();\n    ret.addPropertyResult('isEnabled', 'IsEnabled', properties.IsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsEnabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStorageLens {\n                                                                                                                                                                                                                                                                                          \n    export interface AwsOrgProperty {\n                                                                                                                                                                                                                                                            \n        readonly arn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AwsOrgProperty`\n *\n * @param properties - the TypeScript properties of a `AwsOrgProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStorageLens_AwsOrgPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    return errors.wrap('supplied properties not correct for \"AwsOrgProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::StorageLens.AwsOrg` resource\n *\n * @param properties - the TypeScript properties of a `AwsOrgProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::StorageLens.AwsOrg` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStorageLensAwsOrgPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStorageLens_AwsOrgPropertyValidator(properties).assertSuccess();\n    return {\n        Arn: cdk.stringToCloudFormation(properties.arn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStorageLensAwsOrgPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStorageLens.AwsOrgProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStorageLens.AwsOrgProperty>();\n    ret.addPropertyResult('arn', 'Arn', cfn_parse.FromCloudFormation.getString(properties.Arn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStorageLens {\n                                                                                                                                                                                                                                                                                    \n    export interface BucketLevelProperty {\n                                                                                                                                                                                                                                                                                                       \n        readonly activityMetrics?: CfnStorageLens.ActivityMetricsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                        \n        readonly prefixLevel?: CfnStorageLens.PrefixLevelProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BucketLevelProperty`\n *\n * @param properties - the TypeScript properties of a `BucketLevelProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStorageLens_BucketLevelPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('activityMetrics', CfnStorageLens_ActivityMetricsPropertyValidator)(properties.activityMetrics));\n    errors.collect(cdk.propertyValidator('prefixLevel', CfnStorageLens_PrefixLevelPropertyValidator)(properties.prefixLevel));\n    return errors.wrap('supplied properties not correct for \"BucketLevelProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::StorageLens.BucketLevel` resource\n *\n * @param properties - the TypeScript properties of a `BucketLevelProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::StorageLens.BucketLevel` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStorageLensBucketLevelPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStorageLens_BucketLevelPropertyValidator(properties).assertSuccess();\n    return {\n        ActivityMetrics: cfnStorageLensActivityMetricsPropertyToCloudFormation(properties.activityMetrics),\n        PrefixLevel: cfnStorageLensPrefixLevelPropertyToCloudFormation(properties.prefixLevel),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStorageLensBucketLevelPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStorageLens.BucketLevelProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStorageLens.BucketLevelProperty>();\n    ret.addPropertyResult('activityMetrics', 'ActivityMetrics', properties.ActivityMetrics != null ? CfnStorageLensActivityMetricsPropertyFromCloudFormation(properties.ActivityMetrics) : undefined);\n    ret.addPropertyResult('prefixLevel', 'PrefixLevel', properties.PrefixLevel != null ? CfnStorageLensPrefixLevelPropertyFromCloudFormation(properties.PrefixLevel) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStorageLens {\n                                                                                                                                                                                                                                                                                                                          \n    export interface BucketsAndRegionsProperty {\nn        readonly buckets?: string[];\n                                                                                                                                                                                                                                                                                                                       \n        readonly regions?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BucketsAndRegionsProperty`\n *\n * @param properties - the TypeScript properties of a `BucketsAndRegionsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStorageLens_BucketsAndRegionsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('buckets', cdk.listValidator(cdk.validateString))(properties.buckets));\n    errors.collect(cdk.propertyValidator('regions', cdk.listValidator(cdk.validateString))(properties.regions));\n    return errors.wrap('supplied properties not correct for \"BucketsAndRegionsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::StorageLens.BucketsAndRegions` resource\n *\n * @param properties - the TypeScript properties of a `BucketsAndRegionsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::StorageLens.BucketsAndRegions` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStorageLensBucketsAndRegionsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStorageLens_BucketsAndRegionsPropertyValidator(properties).assertSuccess();\n    return {\n        Buckets: cdk.listMapper(cdk.stringToCloudFormation)(properties.buckets),\n        Regions: cdk.listMapper(cdk.stringToCloudFormation)(properties.regions),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStorageLensBucketsAndRegionsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStorageLens.BucketsAndRegionsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStorageLens.BucketsAndRegionsProperty>();\n    ret.addPropertyResult('buckets', 'Buckets', properties.Buckets != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Buckets) : undefined);\n    ret.addPropertyResult('regions', 'Regions', properties.Regions != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Regions) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStorageLens {\nn    export interface CloudWatchMetricsProperty {\n                                                                                                                                                                                                                                                                                                                                  \n        readonly isEnabled: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CloudWatchMetricsProperty`\n *\n * @param properties - the TypeScript properties of a `CloudWatchMetricsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStorageLens_CloudWatchMetricsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('isEnabled', cdk.requiredValidator)(properties.isEnabled));\n    errors.collect(cdk.propertyValidator('isEnabled', cdk.validateBoolean)(properties.isEnabled));\n    return errors.wrap('supplied properties not correct for \"CloudWatchMetricsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::StorageLens.CloudWatchMetrics` resource\n *\n * @param properties - the TypeScript properties of a `CloudWatchMetricsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::StorageLens.CloudWatchMetrics` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStorageLensCloudWatchMetricsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStorageLens_CloudWatchMetricsPropertyValidator(properties).assertSuccess();\n    return {\n        IsEnabled: cdk.booleanToCloudFormation(properties.isEnabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStorageLensCloudWatchMetricsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStorageLens.CloudWatchMetricsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStorageLens.CloudWatchMetricsProperty>();\n    ret.addPropertyResult('isEnabled', 'IsEnabled', cfn_parse.FromCloudFormation.getBoolean(properties.IsEnabled));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStorageLens {\n                                                                                                                                                                                                                                                                                        \n    export interface DataExportProperty {\n                                                                                                                                                                                                                                                                                                                     \n        readonly cloudWatchMetrics?: CfnStorageLens.CloudWatchMetricsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly s3BucketDestination?: CfnStorageLens.S3BucketDestinationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataExportProperty`\n *\n * @param properties - the TypeScript properties of a `DataExportProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStorageLens_DataExportPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchMetrics', CfnStorageLens_CloudWatchMetricsPropertyValidator)(properties.cloudWatchMetrics));\n    errors.collect(cdk.propertyValidator('s3BucketDestination', CfnStorageLens_S3BucketDestinationPropertyValidator)(properties.s3BucketDestination));\n    return errors.wrap('supplied properties not correct for \"DataExportProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::StorageLens.DataExport` resource\n *\n * @param properties - the TypeScript properties of a `DataExportProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::StorageLens.DataExport` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStorageLensDataExportPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStorageLens_DataExportPropertyValidator(properties).assertSuccess();\n    return {\n        CloudWatchMetrics: cfnStorageLensCloudWatchMetricsPropertyToCloudFormation(properties.cloudWatchMetrics),\n        S3BucketDestination: cfnStorageLensS3BucketDestinationPropertyToCloudFormation(properties.s3BucketDestination),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStorageLensDataExportPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStorageLens.DataExportProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStorageLens.DataExportProperty>();\n    ret.addPropertyResult('cloudWatchMetrics', 'CloudWatchMetrics', properties.CloudWatchMetrics != null ? CfnStorageLensCloudWatchMetricsPropertyFromCloudFormation(properties.CloudWatchMetrics) : undefined);\n    ret.addPropertyResult('s3BucketDestination', 'S3BucketDestination', properties.S3BucketDestination != null ? CfnStorageLensS3BucketDestinationPropertyFromCloudFormation(properties.S3BucketDestination) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStorageLens {\n                                                                                                                                                                                                                                                                                              \n    export interface PrefixLevelProperty {\n                                                                                                                                                                                                                                                                                                     \n        readonly storageMetrics: CfnStorageLens.PrefixLevelStorageMetricsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PrefixLevelProperty`\n *\n * @param properties - the TypeScript properties of a `PrefixLevelProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStorageLens_PrefixLevelPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('storageMetrics', cdk.requiredValidator)(properties.storageMetrics));\n    errors.collect(cdk.propertyValidator('storageMetrics', CfnStorageLens_PrefixLevelStorageMetricsPropertyValidator)(properties.storageMetrics));\n    return errors.wrap('supplied properties not correct for \"PrefixLevelProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::StorageLens.PrefixLevel` resource\n *\n * @param properties - the TypeScript properties of a `PrefixLevelProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::StorageLens.PrefixLevel` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStorageLensPrefixLevelPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStorageLens_PrefixLevelPropertyValidator(properties).assertSuccess();\n    return {\n        StorageMetrics: cfnStorageLensPrefixLevelStorageMetricsPropertyToCloudFormation(properties.storageMetrics),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStorageLensPrefixLevelPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStorageLens.PrefixLevelProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStorageLens.PrefixLevelProperty>();\n    ret.addPropertyResult('storageMetrics', 'StorageMetrics', CfnStorageLensPrefixLevelStorageMetricsPropertyFromCloudFormation(properties.StorageMetrics));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStorageLens {\n                                                                                                                                                                                                                                                                                                                         \n    export interface PrefixLevelStorageMetricsProperty {\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly isEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly selectionCriteria?: CfnStorageLens.SelectionCriteriaProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PrefixLevelStorageMetricsProperty`\n *\n * @param properties - the TypeScript properties of a `PrefixLevelStorageMetricsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStorageLens_PrefixLevelStorageMetricsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('isEnabled', cdk.validateBoolean)(properties.isEnabled));\n    errors.collect(cdk.propertyValidator('selectionCriteria', CfnStorageLens_SelectionCriteriaPropertyValidator)(properties.selectionCriteria));\n    return errors.wrap('supplied properties not correct for \"PrefixLevelStorageMetricsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::StorageLens.PrefixLevelStorageMetrics` resource\n *\n * @param properties - the TypeScript properties of a `PrefixLevelStorageMetricsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::StorageLens.PrefixLevelStorageMetrics` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStorageLensPrefixLevelStorageMetricsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStorageLens_PrefixLevelStorageMetricsPropertyValidator(properties).assertSuccess();\n    return {\n        IsEnabled: cdk.booleanToCloudFormation(properties.isEnabled),\n        SelectionCriteria: cfnStorageLensSelectionCriteriaPropertyToCloudFormation(properties.selectionCriteria),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStorageLensPrefixLevelStorageMetricsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStorageLens.PrefixLevelStorageMetricsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStorageLens.PrefixLevelStorageMetricsProperty>();\n    ret.addPropertyResult('isEnabled', 'IsEnabled', properties.IsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IsEnabled) : undefined);\n    ret.addPropertyResult('selectionCriteria', 'SelectionCriteria', properties.SelectionCriteria != null ? CfnStorageLensSelectionCriteriaPropertyFromCloudFormation(properties.SelectionCriteria) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStorageLens {\n                                                                                                                                                                                                                                                                                                                                 \n    export interface S3BucketDestinationProperty {\n                                                                                                                                                                                                                                                                                                                                               \n        readonly accountId: string;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly arn: string;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly encryption?: any | cdk.IResolvable | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                    \n        readonly format: string;\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly outputSchemaVersion: string;\n                                                                                                                                                                                                                                                                                                                                            \n        readonly prefix?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3BucketDestinationProperty`\n *\n * @param properties - the TypeScript properties of a `S3BucketDestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStorageLens_S3BucketDestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accountId', cdk.requiredValidator)(properties.accountId));\n    errors.collect(cdk.propertyValidator('accountId', cdk.validateString)(properties.accountId));\n    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));\n    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));\n    errors.collect(cdk.propertyValidator('encryption', cdk.validateObject)(properties.encryption));\n    errors.collect(cdk.propertyValidator('format', cdk.requiredValidator)(properties.format));\n    errors.collect(cdk.propertyValidator('format', cdk.validateString)(properties.format));\n    errors.collect(cdk.propertyValidator('outputSchemaVersion', cdk.requiredValidator)(properties.outputSchemaVersion));\n    errors.collect(cdk.propertyValidator('outputSchemaVersion', cdk.validateString)(properties.outputSchemaVersion));\n    errors.collect(cdk.propertyValidator('prefix', cdk.validateString)(properties.prefix));\n    return errors.wrap('supplied properties not correct for \"S3BucketDestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::StorageLens.S3BucketDestination` resource\n *\n * @param properties - the TypeScript properties of a `S3BucketDestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::StorageLens.S3BucketDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStorageLensS3BucketDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStorageLens_S3BucketDestinationPropertyValidator(properties).assertSuccess();\n    return {\n        AccountId: cdk.stringToCloudFormation(properties.accountId),\n        Arn: cdk.stringToCloudFormation(properties.arn),\n        Encryption: cdk.objectToCloudFormation(properties.encryption),\n        Format: cdk.stringToCloudFormation(properties.format),\n        OutputSchemaVersion: cdk.stringToCloudFormation(properties.outputSchemaVersion),\n        Prefix: cdk.stringToCloudFormation(properties.prefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStorageLensS3BucketDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStorageLens.S3BucketDestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStorageLens.S3BucketDestinationProperty>();\n    ret.addPropertyResult('accountId', 'AccountId', cfn_parse.FromCloudFormation.getString(properties.AccountId));\n    ret.addPropertyResult('arn', 'Arn', cfn_parse.FromCloudFormation.getString(properties.Arn));\n    ret.addPropertyResult('encryption', 'Encryption', properties.Encryption != null ? cfn_parse.FromCloudFormation.getAny(properties.Encryption) : undefined);\n    ret.addPropertyResult('format', 'Format', cfn_parse.FromCloudFormation.getString(properties.Format));\n    ret.addPropertyResult('outputSchemaVersion', 'OutputSchemaVersion', cfn_parse.FromCloudFormation.getString(properties.OutputSchemaVersion));\n    ret.addPropertyResult('prefix', 'Prefix', properties.Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.Prefix) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStorageLens {\n                                                                                                                                                                                                                                                                                                   \n    export interface SelectionCriteriaProperty {\n                                                                                                                                                                                                                                                                                                                \n        readonly delimiter?: string;\n                                                                                                                                                                                                                                                                                                                                    \n        readonly maxDepth?: number;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly minStorageBytesPercentage?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SelectionCriteriaProperty`\n *\n * @param properties - the TypeScript properties of a `SelectionCriteriaProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStorageLens_SelectionCriteriaPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('delimiter', cdk.validateString)(properties.delimiter));\n    errors.collect(cdk.propertyValidator('maxDepth', cdk.validateNumber)(properties.maxDepth));\n    errors.collect(cdk.propertyValidator('minStorageBytesPercentage', cdk.validateNumber)(properties.minStorageBytesPercentage));\n    return errors.wrap('supplied properties not correct for \"SelectionCriteriaProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::StorageLens.SelectionCriteria` resource\n *\n * @param properties - the TypeScript properties of a `SelectionCriteriaProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::StorageLens.SelectionCriteria` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStorageLensSelectionCriteriaPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStorageLens_SelectionCriteriaPropertyValidator(properties).assertSuccess();\n    return {\n        Delimiter: cdk.stringToCloudFormation(properties.delimiter),\n        MaxDepth: cdk.numberToCloudFormation(properties.maxDepth),\n        MinStorageBytesPercentage: cdk.numberToCloudFormation(properties.minStorageBytesPercentage),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStorageLensSelectionCriteriaPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStorageLens.SelectionCriteriaProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStorageLens.SelectionCriteriaProperty>();\n    ret.addPropertyResult('delimiter', 'Delimiter', properties.Delimiter != null ? cfn_parse.FromCloudFormation.getString(properties.Delimiter) : undefined);\n    ret.addPropertyResult('maxDepth', 'MaxDepth', properties.MaxDepth != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxDepth) : undefined);\n    ret.addPropertyResult('minStorageBytesPercentage', 'MinStorageBytesPercentage', properties.MinStorageBytesPercentage != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinStorageBytesPercentage) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStorageLens {\n                                                                                                                                                                                                                                                                                       \n    export interface StorageLensConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly accountLevel: CfnStorageLens.AccountLevelProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly awsOrg?: CfnStorageLens.AwsOrgProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly dataExport?: CfnStorageLens.DataExportProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly exclude?: CfnStorageLens.BucketsAndRegionsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                          \n        readonly id: string;\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly include?: CfnStorageLens.BucketsAndRegionsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly isEnabled: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly storageLensArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StorageLensConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `StorageLensConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStorageLens_StorageLensConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('accountLevel', cdk.requiredValidator)(properties.accountLevel));\n    errors.collect(cdk.propertyValidator('accountLevel', CfnStorageLens_AccountLevelPropertyValidator)(properties.accountLevel));\n    errors.collect(cdk.propertyValidator('awsOrg', CfnStorageLens_AwsOrgPropertyValidator)(properties.awsOrg));\n    errors.collect(cdk.propertyValidator('dataExport', CfnStorageLens_DataExportPropertyValidator)(properties.dataExport));\n    errors.collect(cdk.propertyValidator('exclude', CfnStorageLens_BucketsAndRegionsPropertyValidator)(properties.exclude));\n    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));\n    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));\n    errors.collect(cdk.propertyValidator('include', CfnStorageLens_BucketsAndRegionsPropertyValidator)(properties.include));\n    errors.collect(cdk.propertyValidator('isEnabled', cdk.requiredValidator)(properties.isEnabled));\n    errors.collect(cdk.propertyValidator('isEnabled', cdk.validateBoolean)(properties.isEnabled));\n    errors.collect(cdk.propertyValidator('storageLensArn', cdk.validateString)(properties.storageLensArn));\n    return errors.wrap('supplied properties not correct for \"StorageLensConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::S3::StorageLens.StorageLensConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `StorageLensConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::S3::StorageLens.StorageLensConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStorageLensStorageLensConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStorageLens_StorageLensConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        AccountLevel: cfnStorageLensAccountLevelPropertyToCloudFormation(properties.accountLevel),\n        AwsOrg: cfnStorageLensAwsOrgPropertyToCloudFormation(properties.awsOrg),\n        DataExport: cfnStorageLensDataExportPropertyToCloudFormation(properties.dataExport),\n        Exclude: cfnStorageLensBucketsAndRegionsPropertyToCloudFormation(properties.exclude),\n        Id: cdk.stringToCloudFormation(properties.id),\n        Include: cfnStorageLensBucketsAndRegionsPropertyToCloudFormation(properties.include),\n        IsEnabled: cdk.booleanToCloudFormation(properties.isEnabled),\n        StorageLensArn: cdk.stringToCloudFormation(properties.storageLensArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStorageLensStorageLensConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStorageLens.StorageLensConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStorageLens.StorageLensConfigurationProperty>();\n    ret.addPropertyResult('accountLevel', 'AccountLevel', CfnStorageLensAccountLevelPropertyFromCloudFormation(properties.AccountLevel));\n    ret.addPropertyResult('awsOrg', 'AwsOrg', properties.AwsOrg != null ? CfnStorageLensAwsOrgPropertyFromCloudFormation(properties.AwsOrg) : undefined);\n    ret.addPropertyResult('dataExport', 'DataExport', properties.DataExport != null ? CfnStorageLensDataExportPropertyFromCloudFormation(properties.DataExport) : undefined);\n    ret.addPropertyResult('exclude', 'Exclude', properties.Exclude != null ? CfnStorageLensBucketsAndRegionsPropertyFromCloudFormation(properties.Exclude) : undefined);\n    ret.addPropertyResult('id', 'Id', cfn_parse.FromCloudFormation.getString(properties.Id));\n    ret.addPropertyResult('include', 'Include', properties.Include != null ? CfnStorageLensBucketsAndRegionsPropertyFromCloudFormation(properties.Include) : undefined);\n    ret.addPropertyResult('isEnabled', 'IsEnabled', cfn_parse.FromCloudFormation.getBoolean(properties.IsEnabled));\n    ret.addPropertyResult('storageLensArn', 'StorageLensArn', properties.StorageLensArn != null ? cfn_parse.FromCloudFormation.getString(properties.StorageLensArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
