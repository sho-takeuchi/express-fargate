{
  "version": 3,
  "sources": ["sagemaker.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:33.549Z\",\"fingerprint\":\"V42pyvp2Qfc/T2j8fQe2BnJLQdVdAU9WQJYlYfjeIEk=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                            \nexport interface CfnAppProps {\n\n                                                                                                                                                                                       \n    readonly appName: string;\n\n                                                                                                                                                                                   \n    readonly appType: string;\n\n                                                                                                                                                                                  \n    readonly domainId: string;\n\n                                                                                                                                                                                                 \n    readonly userProfileName: string;\n\n                                                                                                                                                                                                                                                                                             \n    readonly resourceSpec?: CfnApp.ResourceSpecProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAppProps`\n *\n * @param properties - the TypeScript properties of a `CfnAppProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAppPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('appName', cdk.requiredValidator)(properties.appName));\n    errors.collect(cdk.propertyValidator('appName', cdk.validateString)(properties.appName));\n    errors.collect(cdk.propertyValidator('appType', cdk.requiredValidator)(properties.appType));\n    errors.collect(cdk.propertyValidator('appType', cdk.validateString)(properties.appType));\n    errors.collect(cdk.propertyValidator('domainId', cdk.requiredValidator)(properties.domainId));\n    errors.collect(cdk.propertyValidator('domainId', cdk.validateString)(properties.domainId));\n    errors.collect(cdk.propertyValidator('resourceSpec', CfnApp_ResourceSpecPropertyValidator)(properties.resourceSpec));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('userProfileName', cdk.requiredValidator)(properties.userProfileName));\n    errors.collect(cdk.propertyValidator('userProfileName', cdk.validateString)(properties.userProfileName));\n    return errors.wrap('supplied properties not correct for \"CfnAppProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::App` resource\n *\n * @param properties - the TypeScript properties of a `CfnAppProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::App` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAppPropsValidator(properties).assertSuccess();\n    return {\n        AppName: cdk.stringToCloudFormation(properties.appName),\n        AppType: cdk.stringToCloudFormation(properties.appType),\n        DomainId: cdk.stringToCloudFormation(properties.domainId),\n        UserProfileName: cdk.stringToCloudFormation(properties.userProfileName),\n        ResourceSpec: cfnAppResourceSpecPropertyToCloudFormation(properties.resourceSpec),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAppProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppProps>();\n    ret.addPropertyResult('appName', 'AppName', cfn_parse.FromCloudFormation.getString(properties.AppName));\n    ret.addPropertyResult('appType', 'AppType', cfn_parse.FromCloudFormation.getString(properties.AppType));\n    ret.addPropertyResult('domainId', 'DomainId', cfn_parse.FromCloudFormation.getString(properties.DomainId));\n    ret.addPropertyResult('userProfileName', 'UserProfileName', cfn_parse.FromCloudFormation.getString(properties.UserProfileName));\n    ret.addPropertyResult('resourceSpec', 'ResourceSpec', properties.ResourceSpec != null ? CfnAppResourceSpecPropertyFromCloudFormation(properties.ResourceSpec) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnApp extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::App\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApp {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAppPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApp(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                           \n    public readonly attrAppArn: string;\n\n                                                                                                                                                                                       \n    public appName: string;\n\n                                                                                                                                                                                   \n    public appType: string;\n\n                                                                                                                                                                                  \n    public domainId: string;\n\n                                                                                                                                                                                                 \n    public userProfileName: string;\n\n                                                                                                                                                                                                                                                                                             \n    public resourceSpec: CfnApp.ResourceSpecProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnAppProps) {\n        super(scope, id, { type: CfnApp.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'appName', this);\n        cdk.requireProperty(props, 'appType', this);\n        cdk.requireProperty(props, 'domainId', this);\n        cdk.requireProperty(props, 'userProfileName', this);\n        this.attrAppArn = cdk.Token.asString(this.getAtt('AppArn'));\n\n        this.appName = props.appName;\n        this.appType = props.appType;\n        this.domainId = props.domainId;\n        this.userProfileName = props.userProfileName;\n        this.resourceSpec = props.resourceSpec;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::App\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApp.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            appName: this.appName,\n            appType: this.appType,\n            domainId: this.domainId,\n            userProfileName: this.userProfileName,\n            resourceSpec: this.resourceSpec,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAppPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnApp {\n                                                                                                                                                                                                                                                                                                                              \n    export interface ResourceSpecProperty {\n                                                                                                                                                                                                                                                                         \n        readonly instanceType?: string;\n                                                                                                                                                                                                                                                                                              \n        readonly sageMakerImageArn?: string;\n                                                                                                                                                                                                                                                                                         \n        readonly sageMakerImageVersionArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourceSpecProperty`\n *\n * @param properties - the TypeScript properties of a `ResourceSpecProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnApp_ResourceSpecPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('sageMakerImageArn', cdk.validateString)(properties.sageMakerImageArn));\n    errors.collect(cdk.propertyValidator('sageMakerImageVersionArn', cdk.validateString)(properties.sageMakerImageVersionArn));\n    return errors.wrap('supplied properties not correct for \"ResourceSpecProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::App.ResourceSpec` resource\n *\n * @param properties - the TypeScript properties of a `ResourceSpecProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::App.ResourceSpec` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppResourceSpecPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApp_ResourceSpecPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        SageMakerImageArn: cdk.stringToCloudFormation(properties.sageMakerImageArn),\n        SageMakerImageVersionArn: cdk.stringToCloudFormation(properties.sageMakerImageVersionArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppResourceSpecPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApp.ResourceSpecProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApp.ResourceSpecProperty>();\n    ret.addPropertyResult('instanceType', 'InstanceType', properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined);\n    ret.addPropertyResult('sageMakerImageArn', 'SageMakerImageArn', properties.SageMakerImageArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageArn) : undefined);\n    ret.addPropertyResult('sageMakerImageVersionArn', 'SageMakerImageVersionArn', properties.SageMakerImageVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageVersionArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                  \nexport interface CfnAppImageConfigProps {\n\n                                                                                                                                                                                                                                                                   \n    readonly appImageConfigName: string;\n\n                                                                                                                                                                                                                                                                                   \n    readonly kernelGatewayImageConfig?: CfnAppImageConfig.KernelGatewayImageConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAppImageConfigProps`\n *\n * @param properties - the TypeScript properties of a `CfnAppImageConfigProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAppImageConfigPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('appImageConfigName', cdk.requiredValidator)(properties.appImageConfigName));\n    errors.collect(cdk.propertyValidator('appImageConfigName', cdk.validateString)(properties.appImageConfigName));\n    errors.collect(cdk.propertyValidator('kernelGatewayImageConfig', CfnAppImageConfig_KernelGatewayImageConfigPropertyValidator)(properties.kernelGatewayImageConfig));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnAppImageConfigProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::AppImageConfig` resource\n *\n * @param properties - the TypeScript properties of a `CfnAppImageConfigProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::AppImageConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppImageConfigPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAppImageConfigPropsValidator(properties).assertSuccess();\n    return {\n        AppImageConfigName: cdk.stringToCloudFormation(properties.appImageConfigName),\n        KernelGatewayImageConfig: cfnAppImageConfigKernelGatewayImageConfigPropertyToCloudFormation(properties.kernelGatewayImageConfig),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppImageConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAppImageConfigProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppImageConfigProps>();\n    ret.addPropertyResult('appImageConfigName', 'AppImageConfigName', cfn_parse.FromCloudFormation.getString(properties.AppImageConfigName));\n    ret.addPropertyResult('kernelGatewayImageConfig', 'KernelGatewayImageConfig', properties.KernelGatewayImageConfig != null ? CfnAppImageConfigKernelGatewayImageConfigPropertyFromCloudFormation(properties.KernelGatewayImageConfig) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \nexport class CfnAppImageConfig extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::AppImageConfig\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAppImageConfig {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAppImageConfigPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAppImageConfig(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                           \n    public readonly attrAppImageConfigArn: string;\n\n                                                                                                                                                                                                                                                                   \n    public appImageConfigName: string;\n\n                                                                                                                                                                                                                                                                                   \n    public kernelGatewayImageConfig: CfnAppImageConfig.KernelGatewayImageConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnAppImageConfigProps) {\n        super(scope, id, { type: CfnAppImageConfig.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'appImageConfigName', this);\n        this.attrAppImageConfigArn = cdk.Token.asString(this.getAtt('AppImageConfigArn'));\n\n        this.appImageConfigName = props.appImageConfigName;\n        this.kernelGatewayImageConfig = props.kernelGatewayImageConfig;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::AppImageConfig\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAppImageConfig.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            appImageConfigName: this.appImageConfigName,\n            kernelGatewayImageConfig: this.kernelGatewayImageConfig,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAppImageConfigPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnAppImageConfig {\n                                                                                                                                                                                                                                                                                                         \n    export interface FileSystemConfigProperty {\n                                                                                                                                                                                                                                                                                                                           \n        readonly defaultGid?: number;\n                                                                                                                                                                                                                                                                                                                           \n        readonly defaultUid?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly mountPath?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FileSystemConfigProperty`\n *\n * @param properties - the TypeScript properties of a `FileSystemConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAppImageConfig_FileSystemConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultGid', cdk.validateNumber)(properties.defaultGid));\n    errors.collect(cdk.propertyValidator('defaultUid', cdk.validateNumber)(properties.defaultUid));\n    errors.collect(cdk.propertyValidator('mountPath', cdk.validateString)(properties.mountPath));\n    return errors.wrap('supplied properties not correct for \"FileSystemConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::AppImageConfig.FileSystemConfig` resource\n *\n * @param properties - the TypeScript properties of a `FileSystemConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::AppImageConfig.FileSystemConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppImageConfigFileSystemConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAppImageConfig_FileSystemConfigPropertyValidator(properties).assertSuccess();\n    return {\n        DefaultGid: cdk.numberToCloudFormation(properties.defaultGid),\n        DefaultUid: cdk.numberToCloudFormation(properties.defaultUid),\n        MountPath: cdk.stringToCloudFormation(properties.mountPath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppImageConfigFileSystemConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAppImageConfig.FileSystemConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppImageConfig.FileSystemConfigProperty>();\n    ret.addPropertyResult('defaultGid', 'DefaultGid', properties.DefaultGid != null ? cfn_parse.FromCloudFormation.getNumber(properties.DefaultGid) : undefined);\n    ret.addPropertyResult('defaultUid', 'DefaultUid', properties.DefaultUid != null ? cfn_parse.FromCloudFormation.getNumber(properties.DefaultUid) : undefined);\n    ret.addPropertyResult('mountPath', 'MountPath', properties.MountPath != null ? cfn_parse.FromCloudFormation.getString(properties.MountPath) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAppImageConfig {\n                                                                                                                                                                                                                                                                                                                                      \n    export interface KernelGatewayImageConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly fileSystemConfig?: CfnAppImageConfig.FileSystemConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                           \n        readonly kernelSpecs: Array<CfnAppImageConfig.KernelSpecProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KernelGatewayImageConfigProperty`\n *\n * @param properties - the TypeScript properties of a `KernelGatewayImageConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAppImageConfig_KernelGatewayImageConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('fileSystemConfig', CfnAppImageConfig_FileSystemConfigPropertyValidator)(properties.fileSystemConfig));\n    errors.collect(cdk.propertyValidator('kernelSpecs', cdk.requiredValidator)(properties.kernelSpecs));\n    errors.collect(cdk.propertyValidator('kernelSpecs', cdk.listValidator(CfnAppImageConfig_KernelSpecPropertyValidator))(properties.kernelSpecs));\n    return errors.wrap('supplied properties not correct for \"KernelGatewayImageConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::AppImageConfig.KernelGatewayImageConfig` resource\n *\n * @param properties - the TypeScript properties of a `KernelGatewayImageConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::AppImageConfig.KernelGatewayImageConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppImageConfigKernelGatewayImageConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAppImageConfig_KernelGatewayImageConfigPropertyValidator(properties).assertSuccess();\n    return {\n        FileSystemConfig: cfnAppImageConfigFileSystemConfigPropertyToCloudFormation(properties.fileSystemConfig),\n        KernelSpecs: cdk.listMapper(cfnAppImageConfigKernelSpecPropertyToCloudFormation)(properties.kernelSpecs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppImageConfigKernelGatewayImageConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAppImageConfig.KernelGatewayImageConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppImageConfig.KernelGatewayImageConfigProperty>();\n    ret.addPropertyResult('fileSystemConfig', 'FileSystemConfig', properties.FileSystemConfig != null ? CfnAppImageConfigFileSystemConfigPropertyFromCloudFormation(properties.FileSystemConfig) : undefined);\n    ret.addPropertyResult('kernelSpecs', 'KernelSpecs', cfn_parse.FromCloudFormation.getArray(CfnAppImageConfigKernelSpecPropertyFromCloudFormation)(properties.KernelSpecs));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAppImageConfig {\n                                                                                                                                                                                                                                                        \n    export interface KernelSpecProperty {\n                                                                                                                                                                                                                                                                        \n        readonly displayName?: string;\n                                                                                                                                                                                                                                                                                                            \n        readonly name: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KernelSpecProperty`\n *\n * @param properties - the TypeScript properties of a `KernelSpecProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAppImageConfig_KernelSpecPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('displayName', cdk.validateString)(properties.displayName));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"KernelSpecProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::AppImageConfig.KernelSpec` resource\n *\n * @param properties - the TypeScript properties of a `KernelSpecProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::AppImageConfig.KernelSpec` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAppImageConfigKernelSpecPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAppImageConfig_KernelSpecPropertyValidator(properties).assertSuccess();\n    return {\n        DisplayName: cdk.stringToCloudFormation(properties.displayName),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAppImageConfigKernelSpecPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAppImageConfig.KernelSpecProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppImageConfig.KernelSpecProperty>();\n    ret.addPropertyResult('displayName', 'DisplayName', properties.DisplayName != null ? cfn_parse.FromCloudFormation.getString(properties.DisplayName) : undefined);\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                  \nexport interface CfnCodeRepositoryProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly gitConfig: CfnCodeRepository.GitConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                   \n    readonly codeRepositoryName?: string;\n\n                                                                                                                                                                                                                       \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnCodeRepositoryProps`\n *\n * @param properties - the TypeScript properties of a `CfnCodeRepositoryProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnCodeRepositoryPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('codeRepositoryName', cdk.validateString)(properties.codeRepositoryName));\n    errors.collect(cdk.propertyValidator('gitConfig', cdk.requiredValidator)(properties.gitConfig));\n    errors.collect(cdk.propertyValidator('gitConfig', CfnCodeRepository_GitConfigPropertyValidator)(properties.gitConfig));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnCodeRepositoryProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::CodeRepository` resource\n *\n * @param properties - the TypeScript properties of a `CfnCodeRepositoryProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::CodeRepository` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCodeRepositoryPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCodeRepositoryPropsValidator(properties).assertSuccess();\n    return {\n        GitConfig: cfnCodeRepositoryGitConfigPropertyToCloudFormation(properties.gitConfig),\n        CodeRepositoryName: cdk.stringToCloudFormation(properties.codeRepositoryName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCodeRepositoryPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCodeRepositoryProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCodeRepositoryProps>();\n    ret.addPropertyResult('gitConfig', 'GitConfig', CfnCodeRepositoryGitConfigPropertyFromCloudFormation(properties.GitConfig));\n    ret.addPropertyResult('codeRepositoryName', 'CodeRepositoryName', properties.CodeRepositoryName != null ? cfn_parse.FromCloudFormation.getString(properties.CodeRepositoryName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnCodeRepository extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::CodeRepository\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCodeRepository {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnCodeRepositoryPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnCodeRepository(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                 \n    public readonly attrCodeRepositoryName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                         \n    public gitConfig: CfnCodeRepository.GitConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                   \n    public codeRepositoryName: string | undefined;\n\n                                                                                                                                                                                                                       \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnCodeRepositoryProps) {\n        super(scope, id, { type: CfnCodeRepository.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'gitConfig', this);\n        this.attrCodeRepositoryName = cdk.Token.asString(this.getAtt('CodeRepositoryName'));\n\n        this.gitConfig = props.gitConfig;\n        this.codeRepositoryName = props.codeRepositoryName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::CodeRepository\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnCodeRepository.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            gitConfig: this.gitConfig,\n            codeRepositoryName: this.codeRepositoryName,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnCodeRepositoryPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnCodeRepository {\n                                                                                                                                                                                                                                                                                          \n    export interface GitConfigProperty {\n                                                                                                                                                                                                                                                                            \n        readonly branch?: string;\n                                                                                                                                                                                                                                                                                     \n        readonly repositoryUrl: string;\nn        readonly secretArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `GitConfigProperty`\n *\n * @param properties - the TypeScript properties of a `GitConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnCodeRepository_GitConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('branch', cdk.validateString)(properties.branch));\n    errors.collect(cdk.propertyValidator('repositoryUrl', cdk.requiredValidator)(properties.repositoryUrl));\n    errors.collect(cdk.propertyValidator('repositoryUrl', cdk.validateString)(properties.repositoryUrl));\n    errors.collect(cdk.propertyValidator('secretArn', cdk.validateString)(properties.secretArn));\n    return errors.wrap('supplied properties not correct for \"GitConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::CodeRepository.GitConfig` resource\n *\n * @param properties - the TypeScript properties of a `GitConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::CodeRepository.GitConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnCodeRepositoryGitConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnCodeRepository_GitConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Branch: cdk.stringToCloudFormation(properties.branch),\n        RepositoryUrl: cdk.stringToCloudFormation(properties.repositoryUrl),\n        SecretArn: cdk.stringToCloudFormation(properties.secretArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnCodeRepositoryGitConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCodeRepository.GitConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCodeRepository.GitConfigProperty>();\n    ret.addPropertyResult('branch', 'Branch', properties.Branch != null ? cfn_parse.FromCloudFormation.getString(properties.Branch) : undefined);\n    ret.addPropertyResult('repositoryUrl', 'RepositoryUrl', cfn_parse.FromCloudFormation.getString(properties.RepositoryUrl));\n    ret.addPropertyResult('secretArn', 'SecretArn', properties.SecretArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                      \nexport interface CfnDataQualityJobDefinitionProps {\n\n                                                                                                                                                                                                                                                                                      \n    readonly dataQualityAppSpecification: CfnDataQualityJobDefinition.DataQualityAppSpecificationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                         \n    readonly dataQualityJobInput: CfnDataQualityJobDefinition.DataQualityJobInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                             \n    readonly dataQualityJobOutputConfig: CfnDataQualityJobDefinition.MonitoringOutputConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                          \n    readonly jobResources: CfnDataQualityJobDefinition.MonitoringResourcesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                            \n    readonly roleArn: string;\n\n                                                                                                                                                                                                                                                                                               \n    readonly dataQualityBaselineConfig?: CfnDataQualityJobDefinition.DataQualityBaselineConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                  \n    readonly jobDefinitionName?: string;\n\n                                                                                                                                                                                                                                                                             \n    readonly networkConfig?: CfnDataQualityJobDefinition.NetworkConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                      \n    readonly stoppingCondition?: CfnDataQualityJobDefinition.StoppingConditionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDataQualityJobDefinitionProps`\n *\n * @param properties - the TypeScript properties of a `CfnDataQualityJobDefinitionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinitionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataQualityAppSpecification', cdk.requiredValidator)(properties.dataQualityAppSpecification));\n    errors.collect(cdk.propertyValidator('dataQualityAppSpecification', CfnDataQualityJobDefinition_DataQualityAppSpecificationPropertyValidator)(properties.dataQualityAppSpecification));\n    errors.collect(cdk.propertyValidator('dataQualityBaselineConfig', CfnDataQualityJobDefinition_DataQualityBaselineConfigPropertyValidator)(properties.dataQualityBaselineConfig));\n    errors.collect(cdk.propertyValidator('dataQualityJobInput', cdk.requiredValidator)(properties.dataQualityJobInput));\n    errors.collect(cdk.propertyValidator('dataQualityJobInput', CfnDataQualityJobDefinition_DataQualityJobInputPropertyValidator)(properties.dataQualityJobInput));\n    errors.collect(cdk.propertyValidator('dataQualityJobOutputConfig', cdk.requiredValidator)(properties.dataQualityJobOutputConfig));\n    errors.collect(cdk.propertyValidator('dataQualityJobOutputConfig', CfnDataQualityJobDefinition_MonitoringOutputConfigPropertyValidator)(properties.dataQualityJobOutputConfig));\n    errors.collect(cdk.propertyValidator('jobDefinitionName', cdk.validateString)(properties.jobDefinitionName));\n    errors.collect(cdk.propertyValidator('jobResources', cdk.requiredValidator)(properties.jobResources));\n    errors.collect(cdk.propertyValidator('jobResources', CfnDataQualityJobDefinition_MonitoringResourcesPropertyValidator)(properties.jobResources));\n    errors.collect(cdk.propertyValidator('networkConfig', CfnDataQualityJobDefinition_NetworkConfigPropertyValidator)(properties.networkConfig));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('stoppingCondition', CfnDataQualityJobDefinition_StoppingConditionPropertyValidator)(properties.stoppingCondition));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDataQualityJobDefinitionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition` resource\n *\n * @param properties - the TypeScript properties of a `CfnDataQualityJobDefinitionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinitionPropsValidator(properties).assertSuccess();\n    return {\n        DataQualityAppSpecification: cfnDataQualityJobDefinitionDataQualityAppSpecificationPropertyToCloudFormation(properties.dataQualityAppSpecification),\n        DataQualityJobInput: cfnDataQualityJobDefinitionDataQualityJobInputPropertyToCloudFormation(properties.dataQualityJobInput),\n        DataQualityJobOutputConfig: cfnDataQualityJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties.dataQualityJobOutputConfig),\n        JobResources: cfnDataQualityJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties.jobResources),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        DataQualityBaselineConfig: cfnDataQualityJobDefinitionDataQualityBaselineConfigPropertyToCloudFormation(properties.dataQualityBaselineConfig),\n        JobDefinitionName: cdk.stringToCloudFormation(properties.jobDefinitionName),\n        NetworkConfig: cfnDataQualityJobDefinitionNetworkConfigPropertyToCloudFormation(properties.networkConfig),\n        StoppingCondition: cfnDataQualityJobDefinitionStoppingConditionPropertyToCloudFormation(properties.stoppingCondition),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinitionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinitionProps>();\n    ret.addPropertyResult('dataQualityAppSpecification', 'DataQualityAppSpecification', CfnDataQualityJobDefinitionDataQualityAppSpecificationPropertyFromCloudFormation(properties.DataQualityAppSpecification));\n    ret.addPropertyResult('dataQualityJobInput', 'DataQualityJobInput', CfnDataQualityJobDefinitionDataQualityJobInputPropertyFromCloudFormation(properties.DataQualityJobInput));\n    ret.addPropertyResult('dataQualityJobOutputConfig', 'DataQualityJobOutputConfig', CfnDataQualityJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties.DataQualityJobOutputConfig));\n    ret.addPropertyResult('jobResources', 'JobResources', CfnDataQualityJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties.JobResources));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('dataQualityBaselineConfig', 'DataQualityBaselineConfig', properties.DataQualityBaselineConfig != null ? CfnDataQualityJobDefinitionDataQualityBaselineConfigPropertyFromCloudFormation(properties.DataQualityBaselineConfig) : undefined);\n    ret.addPropertyResult('jobDefinitionName', 'JobDefinitionName', properties.JobDefinitionName != null ? cfn_parse.FromCloudFormation.getString(properties.JobDefinitionName) : undefined);\n    ret.addPropertyResult('networkConfig', 'NetworkConfig', properties.NetworkConfig != null ? CfnDataQualityJobDefinitionNetworkConfigPropertyFromCloudFormation(properties.NetworkConfig) : undefined);\n    ret.addPropertyResult('stoppingCondition', 'StoppingCondition', properties.StoppingCondition != null ? CfnDataQualityJobDefinitionStoppingConditionPropertyFromCloudFormation(properties.StoppingCondition) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDataQualityJobDefinition extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::DataQualityJobDefinition\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDataQualityJobDefinition {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDataQualityJobDefinitionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDataQualityJobDefinition(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                 \n    public readonly attrCreationTime: string;\n\n                                                                                                                             \n    public readonly attrJobDefinitionArn: string;\n\n                                                                                                                                                                                                                                                                                      \n    public dataQualityAppSpecification: CfnDataQualityJobDefinition.DataQualityAppSpecificationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                         \n    public dataQualityJobInput: CfnDataQualityJobDefinition.DataQualityJobInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                             \n    public dataQualityJobOutputConfig: CfnDataQualityJobDefinition.MonitoringOutputConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                          \n    public jobResources: CfnDataQualityJobDefinition.MonitoringResourcesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                            \n    public roleArn: string;\n\n                                                                                                                                                                                                                                                                                               \n    public dataQualityBaselineConfig: CfnDataQualityJobDefinition.DataQualityBaselineConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                  \n    public jobDefinitionName: string | undefined;\n\n                                                                                                                                                                                                                                                                             \n    public networkConfig: CfnDataQualityJobDefinition.NetworkConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                      \n    public stoppingCondition: CfnDataQualityJobDefinition.StoppingConditionProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnDataQualityJobDefinitionProps) {\n        super(scope, id, { type: CfnDataQualityJobDefinition.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'dataQualityAppSpecification', this);\n        cdk.requireProperty(props, 'dataQualityJobInput', this);\n        cdk.requireProperty(props, 'dataQualityJobOutputConfig', this);\n        cdk.requireProperty(props, 'jobResources', this);\n        cdk.requireProperty(props, 'roleArn', this);\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrJobDefinitionArn = cdk.Token.asString(this.getAtt('JobDefinitionArn'));\n\n        this.dataQualityAppSpecification = props.dataQualityAppSpecification;\n        this.dataQualityJobInput = props.dataQualityJobInput;\n        this.dataQualityJobOutputConfig = props.dataQualityJobOutputConfig;\n        this.jobResources = props.jobResources;\n        this.roleArn = props.roleArn;\n        this.dataQualityBaselineConfig = props.dataQualityBaselineConfig;\n        this.jobDefinitionName = props.jobDefinitionName;\n        this.networkConfig = props.networkConfig;\n        this.stoppingCondition = props.stoppingCondition;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::DataQualityJobDefinition\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDataQualityJobDefinition.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            dataQualityAppSpecification: this.dataQualityAppSpecification,\n            dataQualityJobInput: this.dataQualityJobInput,\n            dataQualityJobOutputConfig: this.dataQualityJobOutputConfig,\n            jobResources: this.jobResources,\n            roleArn: this.roleArn,\n            dataQualityBaselineConfig: this.dataQualityBaselineConfig,\n            jobDefinitionName: this.jobDefinitionName,\n            networkConfig: this.networkConfig,\n            stoppingCondition: this.stoppingCondition,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDataQualityJobDefinitionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDataQualityJobDefinition {\n                                                                                                                                                                                                                                                                                                             \n    export interface ClusterConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly instanceCount: number;\n                                                                                                                                                                                                                                                                                                                                    \n        readonly instanceType: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly volumeKmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly volumeSizeInGb: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClusterConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ClusterConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_ClusterConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceCount', cdk.requiredValidator)(properties.instanceCount));\n    errors.collect(cdk.propertyValidator('instanceCount', cdk.validateNumber)(properties.instanceCount));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.requiredValidator)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('volumeKmsKeyId', cdk.validateString)(properties.volumeKmsKeyId));\n    errors.collect(cdk.propertyValidator('volumeSizeInGb', cdk.requiredValidator)(properties.volumeSizeInGb));\n    errors.collect(cdk.propertyValidator('volumeSizeInGb', cdk.validateNumber)(properties.volumeSizeInGb));\n    return errors.wrap('supplied properties not correct for \"ClusterConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.ClusterConfig` resource\n *\n * @param properties - the TypeScript properties of a `ClusterConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.ClusterConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionClusterConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_ClusterConfigPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceCount: cdk.numberToCloudFormation(properties.instanceCount),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        VolumeKmsKeyId: cdk.stringToCloudFormation(properties.volumeKmsKeyId),\n        VolumeSizeInGB: cdk.numberToCloudFormation(properties.volumeSizeInGb),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionClusterConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.ClusterConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.ClusterConfigProperty>();\n    ret.addPropertyResult('instanceCount', 'InstanceCount', cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount));\n    ret.addPropertyResult('instanceType', 'InstanceType', cfn_parse.FromCloudFormation.getString(properties.InstanceType));\n    ret.addPropertyResult('volumeKmsKeyId', 'VolumeKmsKeyId', properties.VolumeKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeKmsKeyId) : undefined);\n    ret.addPropertyResult('volumeSizeInGb', 'VolumeSizeInGB', cfn_parse.FromCloudFormation.getNumber(properties.VolumeSizeInGB));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataQualityJobDefinition {\n                                                                                                                                                                                                                                                                                   \n    export interface ConstraintsResourceProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly s3Uri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConstraintsResourceProperty`\n *\n * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_ConstraintsResourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"ConstraintsResourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.ConstraintsResource` resource\n *\n * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.ConstraintsResource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionConstraintsResourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_ConstraintsResourcePropertyValidator(properties).assertSuccess();\n    return {\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.ConstraintsResourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.ConstraintsResourceProperty>();\n    ret.addPropertyResult('s3Uri', 'S3Uri', properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataQualityJobDefinition {\n                                                                                                                                                                                                                                                                                                                     \n    export interface DataQualityAppSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly containerArguments?: string[];\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly containerEntrypoint?: string[];\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly environment?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly imageUri: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly postAnalyticsProcessorSourceUri?: string;\nn        readonly recordPreprocessorSourceUri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataQualityAppSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `DataQualityAppSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_DataQualityAppSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerArguments', cdk.listValidator(cdk.validateString))(properties.containerArguments));\n    errors.collect(cdk.propertyValidator('containerEntrypoint', cdk.listValidator(cdk.validateString))(properties.containerEntrypoint));\n    errors.collect(cdk.propertyValidator('environment', cdk.hashValidator(cdk.validateString))(properties.environment));\n    errors.collect(cdk.propertyValidator('imageUri', cdk.requiredValidator)(properties.imageUri));\n    errors.collect(cdk.propertyValidator('imageUri', cdk.validateString)(properties.imageUri));\n    errors.collect(cdk.propertyValidator('postAnalyticsProcessorSourceUri', cdk.validateString)(properties.postAnalyticsProcessorSourceUri));\n    errors.collect(cdk.propertyValidator('recordPreprocessorSourceUri', cdk.validateString)(properties.recordPreprocessorSourceUri));\n    return errors.wrap('supplied properties not correct for \"DataQualityAppSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.DataQualityAppSpecification` resource\n *\n * @param properties - the TypeScript properties of a `DataQualityAppSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.DataQualityAppSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionDataQualityAppSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_DataQualityAppSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerArguments: cdk.listMapper(cdk.stringToCloudFormation)(properties.containerArguments),\n        ContainerEntrypoint: cdk.listMapper(cdk.stringToCloudFormation)(properties.containerEntrypoint),\n        Environment: cdk.hashMapper(cdk.stringToCloudFormation)(properties.environment),\n        ImageUri: cdk.stringToCloudFormation(properties.imageUri),\n        PostAnalyticsProcessorSourceUri: cdk.stringToCloudFormation(properties.postAnalyticsProcessorSourceUri),\n        RecordPreprocessorSourceUri: cdk.stringToCloudFormation(properties.recordPreprocessorSourceUri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionDataQualityAppSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.DataQualityAppSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.DataQualityAppSpecificationProperty>();\n    ret.addPropertyResult('containerArguments', 'ContainerArguments', properties.ContainerArguments != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ContainerArguments) : undefined);\n    ret.addPropertyResult('containerEntrypoint', 'ContainerEntrypoint', properties.ContainerEntrypoint != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ContainerEntrypoint) : undefined);\n    ret.addPropertyResult('environment', 'Environment', properties.Environment != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Environment) : undefined);\n    ret.addPropertyResult('imageUri', 'ImageUri', cfn_parse.FromCloudFormation.getString(properties.ImageUri));\n    ret.addPropertyResult('postAnalyticsProcessorSourceUri', 'PostAnalyticsProcessorSourceUri', properties.PostAnalyticsProcessorSourceUri != null ? cfn_parse.FromCloudFormation.getString(properties.PostAnalyticsProcessorSourceUri) : undefined);\n    ret.addPropertyResult('recordPreprocessorSourceUri', 'RecordPreprocessorSourceUri', properties.RecordPreprocessorSourceUri != null ? cfn_parse.FromCloudFormation.getString(properties.RecordPreprocessorSourceUri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataQualityJobDefinition {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface DataQualityBaselineConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly baseliningJobName?: string;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly constraintsResource?: CfnDataQualityJobDefinition.ConstraintsResourceProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly statisticsResource?: CfnDataQualityJobDefinition.StatisticsResourceProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataQualityBaselineConfigProperty`\n *\n * @param properties - the TypeScript properties of a `DataQualityBaselineConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_DataQualityBaselineConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('baseliningJobName', cdk.validateString)(properties.baseliningJobName));\n    errors.collect(cdk.propertyValidator('constraintsResource', CfnDataQualityJobDefinition_ConstraintsResourcePropertyValidator)(properties.constraintsResource));\n    errors.collect(cdk.propertyValidator('statisticsResource', CfnDataQualityJobDefinition_StatisticsResourcePropertyValidator)(properties.statisticsResource));\n    return errors.wrap('supplied properties not correct for \"DataQualityBaselineConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.DataQualityBaselineConfig` resource\n *\n * @param properties - the TypeScript properties of a `DataQualityBaselineConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.DataQualityBaselineConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionDataQualityBaselineConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_DataQualityBaselineConfigPropertyValidator(properties).assertSuccess();\n    return {\n        BaseliningJobName: cdk.stringToCloudFormation(properties.baseliningJobName),\n        ConstraintsResource: cfnDataQualityJobDefinitionConstraintsResourcePropertyToCloudFormation(properties.constraintsResource),\n        StatisticsResource: cfnDataQualityJobDefinitionStatisticsResourcePropertyToCloudFormation(properties.statisticsResource),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionDataQualityBaselineConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.DataQualityBaselineConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.DataQualityBaselineConfigProperty>();\n    ret.addPropertyResult('baseliningJobName', 'BaseliningJobName', properties.BaseliningJobName != null ? cfn_parse.FromCloudFormation.getString(properties.BaseliningJobName) : undefined);\n    ret.addPropertyResult('constraintsResource', 'ConstraintsResource', properties.ConstraintsResource != null ? CfnDataQualityJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties.ConstraintsResource) : undefined);\n    ret.addPropertyResult('statisticsResource', 'StatisticsResource', properties.StatisticsResource != null ? CfnDataQualityJobDefinitionStatisticsResourcePropertyFromCloudFormation(properties.StatisticsResource) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataQualityJobDefinition {\n                                                                                                                                                                                                                                                                                                                                \n    export interface DataQualityJobInputProperty {\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly endpointInput: CfnDataQualityJobDefinition.EndpointInputProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataQualityJobInputProperty`\n *\n * @param properties - the TypeScript properties of a `DataQualityJobInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_DataQualityJobInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointInput', cdk.requiredValidator)(properties.endpointInput));\n    errors.collect(cdk.propertyValidator('endpointInput', CfnDataQualityJobDefinition_EndpointInputPropertyValidator)(properties.endpointInput));\n    return errors.wrap('supplied properties not correct for \"DataQualityJobInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.DataQualityJobInput` resource\n *\n * @param properties - the TypeScript properties of a `DataQualityJobInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.DataQualityJobInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionDataQualityJobInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_DataQualityJobInputPropertyValidator(properties).assertSuccess();\n    return {\n        EndpointInput: cfnDataQualityJobDefinitionEndpointInputPropertyToCloudFormation(properties.endpointInput),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionDataQualityJobInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.DataQualityJobInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.DataQualityJobInputProperty>();\n    ret.addPropertyResult('endpointInput', 'EndpointInput', CfnDataQualityJobDefinitionEndpointInputPropertyFromCloudFormation(properties.EndpointInput));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataQualityJobDefinition {\n                                                                                                                                                                                                                                                            \n    export interface EndpointInputProperty {\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly endpointName: string;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly localPath: string;\n                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly s3DataDistributionType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly s3InputMode?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EndpointInputProperty`\n *\n * @param properties - the TypeScript properties of a `EndpointInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_EndpointInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointName', cdk.requiredValidator)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('endpointName', cdk.validateString)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('localPath', cdk.requiredValidator)(properties.localPath));\n    errors.collect(cdk.propertyValidator('localPath', cdk.validateString)(properties.localPath));\n    errors.collect(cdk.propertyValidator('s3DataDistributionType', cdk.validateString)(properties.s3DataDistributionType));\n    errors.collect(cdk.propertyValidator('s3InputMode', cdk.validateString)(properties.s3InputMode));\n    return errors.wrap('supplied properties not correct for \"EndpointInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.EndpointInput` resource\n *\n * @param properties - the TypeScript properties of a `EndpointInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.EndpointInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionEndpointInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_EndpointInputPropertyValidator(properties).assertSuccess();\n    return {\n        EndpointName: cdk.stringToCloudFormation(properties.endpointName),\n        LocalPath: cdk.stringToCloudFormation(properties.localPath),\n        S3DataDistributionType: cdk.stringToCloudFormation(properties.s3DataDistributionType),\n        S3InputMode: cdk.stringToCloudFormation(properties.s3InputMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionEndpointInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.EndpointInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.EndpointInputProperty>();\n    ret.addPropertyResult('endpointName', 'EndpointName', cfn_parse.FromCloudFormation.getString(properties.EndpointName));\n    ret.addPropertyResult('localPath', 'LocalPath', cfn_parse.FromCloudFormation.getString(properties.LocalPath));\n    ret.addPropertyResult('s3DataDistributionType', 'S3DataDistributionType', properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined);\n    ret.addPropertyResult('s3InputMode', 'S3InputMode', properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataQualityJobDefinition {\n                                                                                                                                                                                                                                                                         \n    export interface MonitoringOutputProperty {\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly s3Output: CfnDataQualityJobDefinition.S3OutputProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringOutputProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_MonitoringOutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Output', cdk.requiredValidator)(properties.s3Output));\n    errors.collect(cdk.propertyValidator('s3Output', CfnDataQualityJobDefinition_S3OutputPropertyValidator)(properties.s3Output));\n    return errors.wrap('supplied properties not correct for \"MonitoringOutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.MonitoringOutput` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.MonitoringOutput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionMonitoringOutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_MonitoringOutputPropertyValidator(properties).assertSuccess();\n    return {\n        S3Output: cfnDataQualityJobDefinitionS3OutputPropertyToCloudFormation(properties.s3Output),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionMonitoringOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.MonitoringOutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.MonitoringOutputProperty>();\n    ret.addPropertyResult('s3Output', 'S3Output', CfnDataQualityJobDefinitionS3OutputPropertyFromCloudFormation(properties.S3Output));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataQualityJobDefinition {\n                                                                                                                                                                                                                                                                                     \n    export interface MonitoringOutputConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly monitoringOutputs: Array<CfnDataQualityJobDefinition.MonitoringOutputProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringOutputConfigProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_MonitoringOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('monitoringOutputs', cdk.requiredValidator)(properties.monitoringOutputs));\n    errors.collect(cdk.propertyValidator('monitoringOutputs', cdk.listValidator(CfnDataQualityJobDefinition_MonitoringOutputPropertyValidator))(properties.monitoringOutputs));\n    return errors.wrap('supplied properties not correct for \"MonitoringOutputConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.MonitoringOutputConfig` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.MonitoringOutputConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_MonitoringOutputConfigPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        MonitoringOutputs: cdk.listMapper(cfnDataQualityJobDefinitionMonitoringOutputPropertyToCloudFormation)(properties.monitoringOutputs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.MonitoringOutputConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.MonitoringOutputConfigProperty>();\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('monitoringOutputs', 'MonitoringOutputs', cfn_parse.FromCloudFormation.getArray(CfnDataQualityJobDefinitionMonitoringOutputPropertyFromCloudFormation)(properties.MonitoringOutputs));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataQualityJobDefinition {\n                                                                                                                                                                                                                                                                                             \n    export interface MonitoringResourcesProperty {\n                                                                                                                                                                                                                                                                                                                                                            \n        readonly clusterConfig: CfnDataQualityJobDefinition.ClusterConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringResourcesProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_MonitoringResourcesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterConfig', cdk.requiredValidator)(properties.clusterConfig));\n    errors.collect(cdk.propertyValidator('clusterConfig', CfnDataQualityJobDefinition_ClusterConfigPropertyValidator)(properties.clusterConfig));\n    return errors.wrap('supplied properties not correct for \"MonitoringResourcesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.MonitoringResources` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.MonitoringResources` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_MonitoringResourcesPropertyValidator(properties).assertSuccess();\n    return {\n        ClusterConfig: cfnDataQualityJobDefinitionClusterConfigPropertyToCloudFormation(properties.clusterConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.MonitoringResourcesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.MonitoringResourcesProperty>();\n    ret.addPropertyResult('clusterConfig', 'ClusterConfig', CfnDataQualityJobDefinitionClusterConfigPropertyFromCloudFormation(properties.ClusterConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataQualityJobDefinition {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface NetworkConfigProperty {\nn        readonly enableInterContainerTrafficEncryption?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly enableNetworkIsolation?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly vpcConfig?: CfnDataQualityJobDefinition.VpcConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkConfigProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_NetworkConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enableInterContainerTrafficEncryption', cdk.validateBoolean)(properties.enableInterContainerTrafficEncryption));\n    errors.collect(cdk.propertyValidator('enableNetworkIsolation', cdk.validateBoolean)(properties.enableNetworkIsolation));\n    errors.collect(cdk.propertyValidator('vpcConfig', CfnDataQualityJobDefinition_VpcConfigPropertyValidator)(properties.vpcConfig));\n    return errors.wrap('supplied properties not correct for \"NetworkConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.NetworkConfig` resource\n *\n * @param properties - the TypeScript properties of a `NetworkConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.NetworkConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionNetworkConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_NetworkConfigPropertyValidator(properties).assertSuccess();\n    return {\n        EnableInterContainerTrafficEncryption: cdk.booleanToCloudFormation(properties.enableInterContainerTrafficEncryption),\n        EnableNetworkIsolation: cdk.booleanToCloudFormation(properties.enableNetworkIsolation),\n        VpcConfig: cfnDataQualityJobDefinitionVpcConfigPropertyToCloudFormation(properties.vpcConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionNetworkConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.NetworkConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.NetworkConfigProperty>();\n    ret.addPropertyResult('enableInterContainerTrafficEncryption', 'EnableInterContainerTrafficEncryption', properties.EnableInterContainerTrafficEncryption != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableInterContainerTrafficEncryption) : undefined);\n    ret.addPropertyResult('enableNetworkIsolation', 'EnableNetworkIsolation', properties.EnableNetworkIsolation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNetworkIsolation) : undefined);\n    ret.addPropertyResult('vpcConfig', 'VpcConfig', properties.VpcConfig != null ? CfnDataQualityJobDefinitionVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataQualityJobDefinition {\n                                                                                                                                                                                                                                                                                                         \n    export interface S3OutputProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly localPath: string;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly s3UploadMode?: string;\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly s3Uri: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3OutputProperty`\n *\n * @param properties - the TypeScript properties of a `S3OutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_S3OutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('localPath', cdk.requiredValidator)(properties.localPath));\n    errors.collect(cdk.propertyValidator('localPath', cdk.validateString)(properties.localPath));\n    errors.collect(cdk.propertyValidator('s3UploadMode', cdk.validateString)(properties.s3UploadMode));\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.requiredValidator)(properties.s3Uri));\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"S3OutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.S3Output` resource\n *\n * @param properties - the TypeScript properties of a `S3OutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.S3Output` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionS3OutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_S3OutputPropertyValidator(properties).assertSuccess();\n    return {\n        LocalPath: cdk.stringToCloudFormation(properties.localPath),\n        S3UploadMode: cdk.stringToCloudFormation(properties.s3UploadMode),\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionS3OutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.S3OutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.S3OutputProperty>();\n    ret.addPropertyResult('localPath', 'LocalPath', cfn_parse.FromCloudFormation.getString(properties.LocalPath));\n    ret.addPropertyResult('s3UploadMode', 'S3UploadMode', properties.S3UploadMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3UploadMode) : undefined);\n    ret.addPropertyResult('s3Uri', 'S3Uri', cfn_parse.FromCloudFormation.getString(properties.S3Uri));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataQualityJobDefinition {\n                                                                                                                                                                                                                                                                                 \n    export interface StatisticsResourceProperty {\n                                                                                                                                                                                                                                                                                                                     \n        readonly s3Uri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StatisticsResourceProperty`\n *\n * @param properties - the TypeScript properties of a `StatisticsResourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_StatisticsResourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"StatisticsResourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.StatisticsResource` resource\n *\n * @param properties - the TypeScript properties of a `StatisticsResourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.StatisticsResource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionStatisticsResourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_StatisticsResourcePropertyValidator(properties).assertSuccess();\n    return {\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionStatisticsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.StatisticsResourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.StatisticsResourceProperty>();\n    ret.addPropertyResult('s3Uri', 'S3Uri', properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataQualityJobDefinition {\nn    export interface StoppingConditionProperty {\nn        readonly maxRuntimeInSeconds: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StoppingConditionProperty`\n *\n * @param properties - the TypeScript properties of a `StoppingConditionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_StoppingConditionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxRuntimeInSeconds', cdk.requiredValidator)(properties.maxRuntimeInSeconds));\n    errors.collect(cdk.propertyValidator('maxRuntimeInSeconds', cdk.validateNumber)(properties.maxRuntimeInSeconds));\n    return errors.wrap('supplied properties not correct for \"StoppingConditionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.StoppingCondition` resource\n *\n * @param properties - the TypeScript properties of a `StoppingConditionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.StoppingCondition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionStoppingConditionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_StoppingConditionPropertyValidator(properties).assertSuccess();\n    return {\n        MaxRuntimeInSeconds: cdk.numberToCloudFormation(properties.maxRuntimeInSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionStoppingConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.StoppingConditionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.StoppingConditionProperty>();\n    ret.addPropertyResult('maxRuntimeInSeconds', 'MaxRuntimeInSeconds', cfn_parse.FromCloudFormation.getNumber(properties.MaxRuntimeInSeconds));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDataQualityJobDefinition {\nn    export interface VpcConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly securityGroupIds: string[];\nn        readonly subnets: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcConfigProperty`\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDataQualityJobDefinition_VpcConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.requiredValidator)(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnets', cdk.requiredValidator)(properties.subnets));\n    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));\n    return errors.wrap('supplied properties not correct for \"VpcConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.VpcConfig` resource\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DataQualityJobDefinition.VpcConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDataQualityJobDefinitionVpcConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDataQualityJobDefinition_VpcConfigPropertyValidator(properties).assertSuccess();\n    return {\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDataQualityJobDefinitionVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.VpcConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.VpcConfigProperty>();\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds));\n    ret.addPropertyResult('subnets', 'Subnets', cfn_parse.FromCloudFormation.getStringArray(properties.Subnets));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                  \nexport interface CfnDeviceProps {\n\n                                                                                                                                                                                                                             \n    readonly deviceFleetName: string;\n\n                                                                                                                                                                                                       \n    readonly device?: CfnDevice.DeviceProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDeviceProps`\n *\n * @param properties - the TypeScript properties of a `CfnDeviceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDevicePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('device', CfnDevice_DevicePropertyValidator)(properties.device));\n    errors.collect(cdk.propertyValidator('deviceFleetName', cdk.requiredValidator)(properties.deviceFleetName));\n    errors.collect(cdk.propertyValidator('deviceFleetName', cdk.validateString)(properties.deviceFleetName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDeviceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Device` resource\n *\n * @param properties - the TypeScript properties of a `CfnDeviceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Device` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDevicePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDevicePropsValidator(properties).assertSuccess();\n    return {\n        DeviceFleetName: cdk.stringToCloudFormation(properties.deviceFleetName),\n        Device: cfnDeviceDevicePropertyToCloudFormation(properties.device),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDevicePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeviceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeviceProps>();\n    ret.addPropertyResult('deviceFleetName', 'DeviceFleetName', cfn_parse.FromCloudFormation.getString(properties.DeviceFleetName));\n    ret.addPropertyResult('device', 'Device', properties.Device != null ? CfnDeviceDevicePropertyFromCloudFormation(properties.Device) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnDevice extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::Device\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDevice {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDevicePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDevice(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                             \n    public deviceFleetName: string;\n\n                                                                                                                                                                                                       \n    public device: CfnDevice.DeviceProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnDeviceProps) {\n        super(scope, id, { type: CfnDevice.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'deviceFleetName', this);\n\n        this.deviceFleetName = props.deviceFleetName;\n        this.device = props.device;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::Device\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDevice.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            deviceFleetName: this.deviceFleetName,\n            device: this.device,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDevicePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDevice {\n                                                                                                                                                                                                                                         \n    export interface DeviceProperty {\n                                                                                                                                                                                                                                           \n        readonly description?: string;\n                                                                                                                                                                                                                                       \n        readonly deviceName: string;\n                                                                                                                                                                                                                                                           \n        readonly iotThingName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeviceProperty`\n *\n * @param properties - the TypeScript properties of a `DeviceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDevice_DevicePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('deviceName', cdk.requiredValidator)(properties.deviceName));\n    errors.collect(cdk.propertyValidator('deviceName', cdk.validateString)(properties.deviceName));\n    errors.collect(cdk.propertyValidator('iotThingName', cdk.validateString)(properties.iotThingName));\n    return errors.wrap('supplied properties not correct for \"DeviceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Device.Device` resource\n *\n * @param properties - the TypeScript properties of a `DeviceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Device.Device` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeviceDevicePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDevice_DevicePropertyValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        DeviceName: cdk.stringToCloudFormation(properties.deviceName),\n        IotThingName: cdk.stringToCloudFormation(properties.iotThingName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeviceDevicePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDevice.DeviceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDevice.DeviceProperty>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('deviceName', 'DeviceName', cfn_parse.FromCloudFormation.getString(properties.DeviceName));\n    ret.addPropertyResult('iotThingName', 'IotThingName', properties.IotThingName != null ? cfn_parse.FromCloudFormation.getString(properties.IotThingName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnDeviceFleetProps {\n\n                                                                                                                                                                                                                    \n    readonly deviceFleetName: string;\n\n                                                                                                                                                                                                                                                                \n    readonly outputConfig: CfnDeviceFleet.EdgeOutputConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                  \n    readonly roleArn: string;\n\n                                                                                                                                                                                                                  \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDeviceFleetProps`\n *\n * @param properties - the TypeScript properties of a `CfnDeviceFleetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeviceFleetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('deviceFleetName', cdk.requiredValidator)(properties.deviceFleetName));\n    errors.collect(cdk.propertyValidator('deviceFleetName', cdk.validateString)(properties.deviceFleetName));\n    errors.collect(cdk.propertyValidator('outputConfig', cdk.requiredValidator)(properties.outputConfig));\n    errors.collect(cdk.propertyValidator('outputConfig', CfnDeviceFleet_EdgeOutputConfigPropertyValidator)(properties.outputConfig));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDeviceFleetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DeviceFleet` resource\n *\n * @param properties - the TypeScript properties of a `CfnDeviceFleetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DeviceFleet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeviceFleetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeviceFleetPropsValidator(properties).assertSuccess();\n    return {\n        DeviceFleetName: cdk.stringToCloudFormation(properties.deviceFleetName),\n        OutputConfig: cfnDeviceFleetEdgeOutputConfigPropertyToCloudFormation(properties.outputConfig),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeviceFleetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeviceFleetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeviceFleetProps>();\n    ret.addPropertyResult('deviceFleetName', 'DeviceFleetName', cfn_parse.FromCloudFormation.getString(properties.DeviceFleetName));\n    ret.addPropertyResult('outputConfig', 'OutputConfig', CfnDeviceFleetEdgeOutputConfigPropertyFromCloudFormation(properties.OutputConfig));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnDeviceFleet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::DeviceFleet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDeviceFleet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDeviceFleetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDeviceFleet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                    \n    public deviceFleetName: string;\n\n                                                                                                                                                                                                                                                                \n    public outputConfig: CfnDeviceFleet.EdgeOutputConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                  \n    public roleArn: string;\n\n                                                                                                                                                                                                                  \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnDeviceFleetProps) {\n        super(scope, id, { type: CfnDeviceFleet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'deviceFleetName', this);\n        cdk.requireProperty(props, 'outputConfig', this);\n        cdk.requireProperty(props, 'roleArn', this);\n\n        this.deviceFleetName = props.deviceFleetName;\n        this.outputConfig = props.outputConfig;\n        this.roleArn = props.roleArn;\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::DeviceFleet\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDeviceFleet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            deviceFleetName: this.deviceFleetName,\n            outputConfig: this.outputConfig,\n            roleArn: this.roleArn,\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDeviceFleetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDeviceFleet {\n                                                                                                                                                                                                                                                                                             \n    export interface EdgeOutputConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                                              \n        readonly s3OutputLocation: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EdgeOutputConfigProperty`\n *\n * @param properties - the TypeScript properties of a `EdgeOutputConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDeviceFleet_EdgeOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('s3OutputLocation', cdk.requiredValidator)(properties.s3OutputLocation));\n    errors.collect(cdk.propertyValidator('s3OutputLocation', cdk.validateString)(properties.s3OutputLocation));\n    return errors.wrap('supplied properties not correct for \"EdgeOutputConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::DeviceFleet.EdgeOutputConfig` resource\n *\n * @param properties - the TypeScript properties of a `EdgeOutputConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::DeviceFleet.EdgeOutputConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDeviceFleetEdgeOutputConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDeviceFleet_EdgeOutputConfigPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        S3OutputLocation: cdk.stringToCloudFormation(properties.s3OutputLocation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDeviceFleetEdgeOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeviceFleet.EdgeOutputConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeviceFleet.EdgeOutputConfigProperty>();\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('s3OutputLocation', 'S3OutputLocation', cfn_parse.FromCloudFormation.getString(properties.S3OutputLocation));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                  \nexport interface CfnDomainProps {\n\n                                                                                                                                                                                                                                                                                      \n    readonly authMode: string;\n\n                                                                                                                                                                                                               \n    readonly defaultUserSettings: CfnDomain.UserSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                            \n    readonly domainName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly subnetIds: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                \n    readonly vpcId: string;\n\nn    readonly appNetworkAccessType?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly kmsKeyId?: string;\n\nn    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDomainProps`\n *\n * @param properties - the TypeScript properties of a `CfnDomainProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomainPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('appNetworkAccessType', cdk.validateString)(properties.appNetworkAccessType));\n    errors.collect(cdk.propertyValidator('authMode', cdk.requiredValidator)(properties.authMode));\n    errors.collect(cdk.propertyValidator('authMode', cdk.validateString)(properties.authMode));\n    errors.collect(cdk.propertyValidator('defaultUserSettings', cdk.requiredValidator)(properties.defaultUserSettings));\n    errors.collect(cdk.propertyValidator('defaultUserSettings', CfnDomain_UserSettingsPropertyValidator)(properties.defaultUserSettings));\n    errors.collect(cdk.propertyValidator('domainName', cdk.requiredValidator)(properties.domainName));\n    errors.collect(cdk.propertyValidator('domainName', cdk.validateString)(properties.domainName));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.requiredValidator)(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.requiredValidator)(properties.vpcId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"CfnDomainProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Domain` resource\n *\n * @param properties - the TypeScript properties of a `CfnDomainProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Domain` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomainPropsValidator(properties).assertSuccess();\n    return {\n        AuthMode: cdk.stringToCloudFormation(properties.authMode),\n        DefaultUserSettings: cfnDomainUserSettingsPropertyToCloudFormation(properties.defaultUserSettings),\n        DomainName: cdk.stringToCloudFormation(properties.domainName),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n        AppNetworkAccessType: cdk.stringToCloudFormation(properties.appNetworkAccessType),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomainProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomainProps>();\n    ret.addPropertyResult('authMode', 'AuthMode', cfn_parse.FromCloudFormation.getString(properties.AuthMode));\n    ret.addPropertyResult('defaultUserSettings', 'DefaultUserSettings', CfnDomainUserSettingsPropertyFromCloudFormation(properties.DefaultUserSettings));\n    ret.addPropertyResult('domainName', 'DomainName', cfn_parse.FromCloudFormation.getString(properties.DomainName));\n    ret.addPropertyResult('subnetIds', 'SubnetIds', cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds));\n    ret.addPropertyResult('vpcId', 'VpcId', cfn_parse.FromCloudFormation.getString(properties.VpcId));\n    ret.addPropertyResult('appNetworkAccessType', 'AppNetworkAccessType', properties.AppNetworkAccessType != null ? cfn_parse.FromCloudFormation.getString(properties.AppNetworkAccessType) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDomain extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::Domain\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDomain {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDomainPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDomain(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                       \n    public readonly attrDomainArn: string;\n\n                                                                              \n    public readonly attrDomainId: string;\n\n                                                                                                                                                 \n    public readonly attrHomeEfsFileSystemId: string;\n\n                                                                                                                                            \n    public readonly attrSingleSignOnManagedApplicationInstanceId: string;\n\n                                                                                  \n    public readonly attrUrl: string;\n\n                                                                                                                                                                                                                                                                                      \n    public authMode: string;\n\n                                                                                                                                                                                                               \n    public defaultUserSettings: CfnDomain.UserSettingsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                            \n    public domainName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public subnetIds: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                \n    public vpcId: string;\n\nn    public appNetworkAccessType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public kmsKeyId: string | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnDomainProps) {\n        super(scope, id, { type: CfnDomain.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'authMode', this);\n        cdk.requireProperty(props, 'defaultUserSettings', this);\n        cdk.requireProperty(props, 'domainName', this);\n        cdk.requireProperty(props, 'subnetIds', this);\n        cdk.requireProperty(props, 'vpcId', this);\n        this.attrDomainArn = cdk.Token.asString(this.getAtt('DomainArn'));\n        this.attrDomainId = cdk.Token.asString(this.getAtt('DomainId'));\n        this.attrHomeEfsFileSystemId = cdk.Token.asString(this.getAtt('HomeEfsFileSystemId'));\n        this.attrSingleSignOnManagedApplicationInstanceId = cdk.Token.asString(this.getAtt('SingleSignOnManagedApplicationInstanceId'));\n        this.attrUrl = cdk.Token.asString(this.getAtt('Url'));\n\n        this.authMode = props.authMode;\n        this.defaultUserSettings = props.defaultUserSettings;\n        this.domainName = props.domainName;\n        this.subnetIds = props.subnetIds;\n        this.vpcId = props.vpcId;\n        this.appNetworkAccessType = props.appNetworkAccessType;\n        this.kmsKeyId = props.kmsKeyId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::Domain\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDomain.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            authMode: this.authMode,\n            defaultUserSettings: this.defaultUserSettings,\n            domainName: this.domainName,\n            subnetIds: this.subnetIds,\n            vpcId: this.vpcId,\n            appNetworkAccessType: this.appNetworkAccessType,\n            kmsKeyId: this.kmsKeyId,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDomainPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDomain {\n                                                                                                                                                                                                                                                                                                                                                                   \n    export interface CustomImageProperty {\n                                                                                                                                                                                                                                                                 \n        readonly appImageConfigName: string;\n                                                                                                                                                                                                                                                                                     \n        readonly imageName: string;\n                                                                                                                                                                                                                                                                        \n        readonly imageVersionNumber?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomImageProperty`\n *\n * @param properties - the TypeScript properties of a `CustomImageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_CustomImagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('appImageConfigName', cdk.requiredValidator)(properties.appImageConfigName));\n    errors.collect(cdk.propertyValidator('appImageConfigName', cdk.validateString)(properties.appImageConfigName));\n    errors.collect(cdk.propertyValidator('imageName', cdk.requiredValidator)(properties.imageName));\n    errors.collect(cdk.propertyValidator('imageName', cdk.validateString)(properties.imageName));\n    errors.collect(cdk.propertyValidator('imageVersionNumber', cdk.validateNumber)(properties.imageVersionNumber));\n    return errors.wrap('supplied properties not correct for \"CustomImageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Domain.CustomImage` resource\n *\n * @param properties - the TypeScript properties of a `CustomImageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Domain.CustomImage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainCustomImagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_CustomImagePropertyValidator(properties).assertSuccess();\n    return {\n        AppImageConfigName: cdk.stringToCloudFormation(properties.appImageConfigName),\n        ImageName: cdk.stringToCloudFormation(properties.imageName),\n        ImageVersionNumber: cdk.numberToCloudFormation(properties.imageVersionNumber),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainCustomImagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.CustomImageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.CustomImageProperty>();\n    ret.addPropertyResult('appImageConfigName', 'AppImageConfigName', cfn_parse.FromCloudFormation.getString(properties.AppImageConfigName));\n    ret.addPropertyResult('imageName', 'ImageName', cfn_parse.FromCloudFormation.getString(properties.ImageName));\n    ret.addPropertyResult('imageVersionNumber', 'ImageVersionNumber', properties.ImageVersionNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.ImageVersionNumber) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\n                                                                                                                                                                                                                                                       \n    export interface JupyterServerAppSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly defaultResourceSpec?: CfnDomain.ResourceSpecProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `JupyterServerAppSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `JupyterServerAppSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_JupyterServerAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultResourceSpec', CfnDomain_ResourceSpecPropertyValidator)(properties.defaultResourceSpec));\n    return errors.wrap('supplied properties not correct for \"JupyterServerAppSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Domain.JupyterServerAppSettings` resource\n *\n * @param properties - the TypeScript properties of a `JupyterServerAppSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Domain.JupyterServerAppSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainJupyterServerAppSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_JupyterServerAppSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        DefaultResourceSpec: cfnDomainResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainJupyterServerAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.JupyterServerAppSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.JupyterServerAppSettingsProperty>();\n    ret.addPropertyResult('defaultResourceSpec', 'DefaultResourceSpec', properties.DefaultResourceSpec != null ? CfnDomainResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\n                                                                                                                                                                                                                                                       \n    export interface KernelGatewayAppSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                          \n        readonly customImages?: Array<CfnDomain.CustomImageProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly defaultResourceSpec?: CfnDomain.ResourceSpecProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KernelGatewayAppSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `KernelGatewayAppSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_KernelGatewayAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('customImages', cdk.listValidator(CfnDomain_CustomImagePropertyValidator))(properties.customImages));\n    errors.collect(cdk.propertyValidator('defaultResourceSpec', CfnDomain_ResourceSpecPropertyValidator)(properties.defaultResourceSpec));\n    return errors.wrap('supplied properties not correct for \"KernelGatewayAppSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Domain.KernelGatewayAppSettings` resource\n *\n * @param properties - the TypeScript properties of a `KernelGatewayAppSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Domain.KernelGatewayAppSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainKernelGatewayAppSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_KernelGatewayAppSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        CustomImages: cdk.listMapper(cfnDomainCustomImagePropertyToCloudFormation)(properties.customImages),\n        DefaultResourceSpec: cfnDomainResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainKernelGatewayAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.KernelGatewayAppSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.KernelGatewayAppSettingsProperty>();\n    ret.addPropertyResult('customImages', 'CustomImages', properties.CustomImages != null ? cfn_parse.FromCloudFormation.getArray(CfnDomainCustomImagePropertyFromCloudFormation)(properties.CustomImages) : undefined);\n    ret.addPropertyResult('defaultResourceSpec', 'DefaultResourceSpec', properties.DefaultResourceSpec != null ? CfnDomainResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\n                                                                                                                                                                                                                                                                                                                                 \n    export interface ResourceSpecProperty {\n                                                                                                                                                                                                                                                                               \n        readonly instanceType?: string;\n                                                                                                                                                                                                                                                                                                    \n        readonly sageMakerImageArn?: string;\n                                                                                                                                                                                                                                                                                               \n        readonly sageMakerImageVersionArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourceSpecProperty`\n *\n * @param properties - the TypeScript properties of a `ResourceSpecProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_ResourceSpecPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('sageMakerImageArn', cdk.validateString)(properties.sageMakerImageArn));\n    errors.collect(cdk.propertyValidator('sageMakerImageVersionArn', cdk.validateString)(properties.sageMakerImageVersionArn));\n    return errors.wrap('supplied properties not correct for \"ResourceSpecProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Domain.ResourceSpec` resource\n *\n * @param properties - the TypeScript properties of a `ResourceSpecProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Domain.ResourceSpec` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainResourceSpecPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_ResourceSpecPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        SageMakerImageArn: cdk.stringToCloudFormation(properties.sageMakerImageArn),\n        SageMakerImageVersionArn: cdk.stringToCloudFormation(properties.sageMakerImageVersionArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainResourceSpecPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.ResourceSpecProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.ResourceSpecProperty>();\n    ret.addPropertyResult('instanceType', 'InstanceType', properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined);\n    ret.addPropertyResult('sageMakerImageArn', 'SageMakerImageArn', properties.SageMakerImageArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageArn) : undefined);\n    ret.addPropertyResult('sageMakerImageVersionArn', 'SageMakerImageVersionArn', properties.SageMakerImageVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageVersionArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface SharingSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                              \n        readonly notebookOutputOption?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly s3KmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly s3OutputPath?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SharingSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `SharingSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_SharingSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('notebookOutputOption', cdk.validateString)(properties.notebookOutputOption));\n    errors.collect(cdk.propertyValidator('s3KmsKeyId', cdk.validateString)(properties.s3KmsKeyId));\n    errors.collect(cdk.propertyValidator('s3OutputPath', cdk.validateString)(properties.s3OutputPath));\n    return errors.wrap('supplied properties not correct for \"SharingSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Domain.SharingSettings` resource\n *\n * @param properties - the TypeScript properties of a `SharingSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Domain.SharingSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainSharingSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_SharingSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        NotebookOutputOption: cdk.stringToCloudFormation(properties.notebookOutputOption),\n        S3KmsKeyId: cdk.stringToCloudFormation(properties.s3KmsKeyId),\n        S3OutputPath: cdk.stringToCloudFormation(properties.s3OutputPath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainSharingSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.SharingSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.SharingSettingsProperty>();\n    ret.addPropertyResult('notebookOutputOption', 'NotebookOutputOption', properties.NotebookOutputOption != null ? cfn_parse.FromCloudFormation.getString(properties.NotebookOutputOption) : undefined);\n    ret.addPropertyResult('s3KmsKeyId', 'S3KmsKeyId', properties.S3KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.S3KmsKeyId) : undefined);\n    ret.addPropertyResult('s3OutputPath', 'S3OutputPath', properties.S3OutputPath != null ? cfn_parse.FromCloudFormation.getString(properties.S3OutputPath) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDomain {\nn    export interface UserSettingsProperty {\n                                                                                                                                                                                                                                                               \n        readonly executionRole?: string;\n                                                                                                                                                                                                                                                                            \n        readonly jupyterServerAppSettings?: CfnDomain.JupyterServerAppSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                          \n        readonly kernelGatewayAppSettings?: CfnDomain.KernelGatewayAppSettingsProperty | cdk.IResolvable;\nn        readonly securityGroups?: string[];\n                                                                                                                                                                                                                                                                                          \n        readonly sharingSettings?: CfnDomain.SharingSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UserSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `UserSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDomain_UserSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('executionRole', cdk.validateString)(properties.executionRole));\n    errors.collect(cdk.propertyValidator('jupyterServerAppSettings', CfnDomain_JupyterServerAppSettingsPropertyValidator)(properties.jupyterServerAppSettings));\n    errors.collect(cdk.propertyValidator('kernelGatewayAppSettings', CfnDomain_KernelGatewayAppSettingsPropertyValidator)(properties.kernelGatewayAppSettings));\n    errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(cdk.validateString))(properties.securityGroups));\n    errors.collect(cdk.propertyValidator('sharingSettings', CfnDomain_SharingSettingsPropertyValidator)(properties.sharingSettings));\n    return errors.wrap('supplied properties not correct for \"UserSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Domain.UserSettings` resource\n *\n * @param properties - the TypeScript properties of a `UserSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Domain.UserSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDomainUserSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDomain_UserSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ExecutionRole: cdk.stringToCloudFormation(properties.executionRole),\n        JupyterServerAppSettings: cfnDomainJupyterServerAppSettingsPropertyToCloudFormation(properties.jupyterServerAppSettings),\n        KernelGatewayAppSettings: cfnDomainKernelGatewayAppSettingsPropertyToCloudFormation(properties.kernelGatewayAppSettings),\n        SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),\n        SharingSettings: cfnDomainSharingSettingsPropertyToCloudFormation(properties.sharingSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDomainUserSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.UserSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.UserSettingsProperty>();\n    ret.addPropertyResult('executionRole', 'ExecutionRole', properties.ExecutionRole != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRole) : undefined);\n    ret.addPropertyResult('jupyterServerAppSettings', 'JupyterServerAppSettings', properties.JupyterServerAppSettings != null ? CfnDomainJupyterServerAppSettingsPropertyFromCloudFormation(properties.JupyterServerAppSettings) : undefined);\n    ret.addPropertyResult('kernelGatewayAppSettings', 'KernelGatewayAppSettings', properties.KernelGatewayAppSettings != null ? CfnDomainKernelGatewayAppSettingsPropertyFromCloudFormation(properties.KernelGatewayAppSettings) : undefined);\n    ret.addPropertyResult('securityGroups', 'SecurityGroups', properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroups) : undefined);\n    ret.addPropertyResult('sharingSettings', 'SharingSettings', properties.SharingSettings != null ? CfnDomainSharingSettingsPropertyFromCloudFormation(properties.SharingSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                      \nexport interface CfnEndpointProps {\n\nn    readonly endpointConfigName: string;\n\n                                                                                                                                                                                                                                                                                                               \n    readonly deploymentConfig?: CfnEndpoint.DeploymentConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly endpointName?: string;\n\nn    readonly excludeRetainedVariantProperties?: Array<CfnEndpoint.VariantPropertyProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly retainAllVariantProperties?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                       \n    readonly retainDeploymentConfig?: boolean | cdk.IResolvable;\n\nn    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEndpointProps`\n *\n * @param properties - the TypeScript properties of a `CfnEndpointProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deploymentConfig', CfnEndpoint_DeploymentConfigPropertyValidator)(properties.deploymentConfig));\n    errors.collect(cdk.propertyValidator('endpointConfigName', cdk.requiredValidator)(properties.endpointConfigName));\n    errors.collect(cdk.propertyValidator('endpointConfigName', cdk.validateString)(properties.endpointConfigName));\n    errors.collect(cdk.propertyValidator('endpointName', cdk.validateString)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('excludeRetainedVariantProperties', cdk.listValidator(CfnEndpoint_VariantPropertyPropertyValidator))(properties.excludeRetainedVariantProperties));\n    errors.collect(cdk.propertyValidator('retainAllVariantProperties', cdk.validateBoolean)(properties.retainAllVariantProperties));\n    errors.collect(cdk.propertyValidator('retainDeploymentConfig', cdk.validateBoolean)(properties.retainDeploymentConfig));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnEndpointProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint` resource\n *\n * @param properties - the TypeScript properties of a `CfnEndpointProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointPropsValidator(properties).assertSuccess();\n    return {\n        EndpointConfigName: cdk.stringToCloudFormation(properties.endpointConfigName),\n        DeploymentConfig: cfnEndpointDeploymentConfigPropertyToCloudFormation(properties.deploymentConfig),\n        EndpointName: cdk.stringToCloudFormation(properties.endpointName),\n        ExcludeRetainedVariantProperties: cdk.listMapper(cfnEndpointVariantPropertyPropertyToCloudFormation)(properties.excludeRetainedVariantProperties),\n        RetainAllVariantProperties: cdk.booleanToCloudFormation(properties.retainAllVariantProperties),\n        RetainDeploymentConfig: cdk.booleanToCloudFormation(properties.retainDeploymentConfig),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointProps>();\n    ret.addPropertyResult('endpointConfigName', 'EndpointConfigName', cfn_parse.FromCloudFormation.getString(properties.EndpointConfigName));\n    ret.addPropertyResult('deploymentConfig', 'DeploymentConfig', properties.DeploymentConfig != null ? CfnEndpointDeploymentConfigPropertyFromCloudFormation(properties.DeploymentConfig) : undefined);\n    ret.addPropertyResult('endpointName', 'EndpointName', properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined);\n    ret.addPropertyResult('excludeRetainedVariantProperties', 'ExcludeRetainedVariantProperties', properties.ExcludeRetainedVariantProperties != null ? cfn_parse.FromCloudFormation.getArray(CfnEndpointVariantPropertyPropertyFromCloudFormation)(properties.ExcludeRetainedVariantProperties) : undefined);\n    ret.addPropertyResult('retainAllVariantProperties', 'RetainAllVariantProperties', properties.RetainAllVariantProperties != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RetainAllVariantProperties) : undefined);\n    ret.addPropertyResult('retainDeploymentConfig', 'RetainDeploymentConfig', properties.RetainDeploymentConfig != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RetainDeploymentConfig) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnEndpoint extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::Endpoint\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEndpoint {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEndpointPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEndpoint(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                    \n    public readonly attrEndpointName: string;\n\nn    public endpointConfigName: string;\n\n                                                                                                                                                                                                                                                                                                               \n    public deploymentConfig: CfnEndpoint.DeploymentConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public endpointName: string | undefined;\n\nn    public excludeRetainedVariantProperties: Array<CfnEndpoint.VariantPropertyProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public retainAllVariantProperties: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                       \n    public retainDeploymentConfig: boolean | cdk.IResolvable | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnEndpointProps) {\n        super(scope, id, { type: CfnEndpoint.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'endpointConfigName', this);\n        this.attrEndpointName = cdk.Token.asString(this.getAtt('EndpointName'));\n\n        this.endpointConfigName = props.endpointConfigName;\n        this.deploymentConfig = props.deploymentConfig;\n        this.endpointName = props.endpointName;\n        this.excludeRetainedVariantProperties = props.excludeRetainedVariantProperties;\n        this.retainAllVariantProperties = props.retainAllVariantProperties;\n        this.retainDeploymentConfig = props.retainDeploymentConfig;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::Endpoint\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEndpoint.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            endpointConfigName: this.endpointConfigName,\n            deploymentConfig: this.deploymentConfig,\n            endpointName: this.endpointName,\n            excludeRetainedVariantProperties: this.excludeRetainedVariantProperties,\n            retainAllVariantProperties: this.retainAllVariantProperties,\n            retainDeploymentConfig: this.retainDeploymentConfig,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEndpointPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                                               \n    export interface AlarmProperty {\n                                                                                                                                                                                                                                                                \n        readonly alarmName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AlarmProperty`\n *\n * @param properties - the TypeScript properties of a `AlarmProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_AlarmPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alarmName', cdk.requiredValidator)(properties.alarmName));\n    errors.collect(cdk.propertyValidator('alarmName', cdk.validateString)(properties.alarmName));\n    return errors.wrap('supplied properties not correct for \"AlarmProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.Alarm` resource\n *\n * @param properties - the TypeScript properties of a `AlarmProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.Alarm` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointAlarmPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_AlarmPropertyValidator(properties).assertSuccess();\n    return {\n        AlarmName: cdk.stringToCloudFormation(properties.alarmName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointAlarmPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.AlarmProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.AlarmProperty>();\n    ret.addPropertyResult('alarmName', 'AlarmName', cfn_parse.FromCloudFormation.getString(properties.AlarmName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                                                                            \n    export interface AutoRollbackConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly alarms: Array<CfnEndpoint.AlarmProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AutoRollbackConfigProperty`\n *\n * @param properties - the TypeScript properties of a `AutoRollbackConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_AutoRollbackConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('alarms', cdk.requiredValidator)(properties.alarms));\n    errors.collect(cdk.propertyValidator('alarms', cdk.listValidator(CfnEndpoint_AlarmPropertyValidator))(properties.alarms));\n    return errors.wrap('supplied properties not correct for \"AutoRollbackConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.AutoRollbackConfig` resource\n *\n * @param properties - the TypeScript properties of a `AutoRollbackConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.AutoRollbackConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointAutoRollbackConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_AutoRollbackConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Alarms: cdk.listMapper(cfnEndpointAlarmPropertyToCloudFormation)(properties.alarms),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointAutoRollbackConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.AutoRollbackConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.AutoRollbackConfigProperty>();\n    ret.addPropertyResult('alarms', 'Alarms', cfn_parse.FromCloudFormation.getArray(CfnEndpointAlarmPropertyFromCloudFormation)(properties.Alarms));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\nn    export interface BlueGreenUpdatePolicyProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly maximumExecutionTimeoutInSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly terminationWaitInSeconds?: number;\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly trafficRoutingConfiguration: CfnEndpoint.TrafficRoutingConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BlueGreenUpdatePolicyProperty`\n *\n * @param properties - the TypeScript properties of a `BlueGreenUpdatePolicyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_BlueGreenUpdatePolicyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maximumExecutionTimeoutInSeconds', cdk.validateNumber)(properties.maximumExecutionTimeoutInSeconds));\n    errors.collect(cdk.propertyValidator('terminationWaitInSeconds', cdk.validateNumber)(properties.terminationWaitInSeconds));\n    errors.collect(cdk.propertyValidator('trafficRoutingConfiguration', cdk.requiredValidator)(properties.trafficRoutingConfiguration));\n    errors.collect(cdk.propertyValidator('trafficRoutingConfiguration', CfnEndpoint_TrafficRoutingConfigPropertyValidator)(properties.trafficRoutingConfiguration));\n    return errors.wrap('supplied properties not correct for \"BlueGreenUpdatePolicyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.BlueGreenUpdatePolicy` resource\n *\n * @param properties - the TypeScript properties of a `BlueGreenUpdatePolicyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.BlueGreenUpdatePolicy` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointBlueGreenUpdatePolicyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_BlueGreenUpdatePolicyPropertyValidator(properties).assertSuccess();\n    return {\n        MaximumExecutionTimeoutInSeconds: cdk.numberToCloudFormation(properties.maximumExecutionTimeoutInSeconds),\n        TerminationWaitInSeconds: cdk.numberToCloudFormation(properties.terminationWaitInSeconds),\n        TrafficRoutingConfiguration: cfnEndpointTrafficRoutingConfigPropertyToCloudFormation(properties.trafficRoutingConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointBlueGreenUpdatePolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.BlueGreenUpdatePolicyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.BlueGreenUpdatePolicyProperty>();\n    ret.addPropertyResult('maximumExecutionTimeoutInSeconds', 'MaximumExecutionTimeoutInSeconds', properties.MaximumExecutionTimeoutInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumExecutionTimeoutInSeconds) : undefined);\n    ret.addPropertyResult('terminationWaitInSeconds', 'TerminationWaitInSeconds', properties.TerminationWaitInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.TerminationWaitInSeconds) : undefined);\n    ret.addPropertyResult('trafficRoutingConfiguration', 'TrafficRoutingConfiguration', CfnEndpointTrafficRoutingConfigPropertyFromCloudFormation(properties.TrafficRoutingConfiguration));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                                         \n    export interface CapacitySizeProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly type: string;\n                                                                                                                                                                                                                                                                                                               \n        readonly value: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CapacitySizeProperty`\n *\n * @param properties - the TypeScript properties of a `CapacitySizeProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_CapacitySizePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateNumber)(properties.value));\n    return errors.wrap('supplied properties not correct for \"CapacitySizeProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.CapacitySize` resource\n *\n * @param properties - the TypeScript properties of a `CapacitySizeProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.CapacitySize` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointCapacitySizePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_CapacitySizePropertyValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n        Value: cdk.numberToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointCapacitySizePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.CapacitySizeProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.CapacitySizeProperty>();\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getNumber(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                                                                                                           \n    export interface DeploymentConfigProperty {\n                                                                                                                                                                                                                                                                                                                                               \n        readonly autoRollbackConfiguration?: CfnEndpoint.AutoRollbackConfigProperty | cdk.IResolvable;\nn        readonly blueGreenUpdatePolicy: CfnEndpoint.BlueGreenUpdatePolicyProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DeploymentConfigProperty`\n *\n * @param properties - the TypeScript properties of a `DeploymentConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_DeploymentConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('autoRollbackConfiguration', CfnEndpoint_AutoRollbackConfigPropertyValidator)(properties.autoRollbackConfiguration));\n    errors.collect(cdk.propertyValidator('blueGreenUpdatePolicy', cdk.requiredValidator)(properties.blueGreenUpdatePolicy));\n    errors.collect(cdk.propertyValidator('blueGreenUpdatePolicy', CfnEndpoint_BlueGreenUpdatePolicyPropertyValidator)(properties.blueGreenUpdatePolicy));\n    return errors.wrap('supplied properties not correct for \"DeploymentConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.DeploymentConfig` resource\n *\n * @param properties - the TypeScript properties of a `DeploymentConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.DeploymentConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointDeploymentConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_DeploymentConfigPropertyValidator(properties).assertSuccess();\n    return {\n        AutoRollbackConfiguration: cfnEndpointAutoRollbackConfigPropertyToCloudFormation(properties.autoRollbackConfiguration),\n        BlueGreenUpdatePolicy: cfnEndpointBlueGreenUpdatePolicyPropertyToCloudFormation(properties.blueGreenUpdatePolicy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointDeploymentConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.DeploymentConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.DeploymentConfigProperty>();\n    ret.addPropertyResult('autoRollbackConfiguration', 'AutoRollbackConfiguration', properties.AutoRollbackConfiguration != null ? CfnEndpointAutoRollbackConfigPropertyFromCloudFormation(properties.AutoRollbackConfiguration) : undefined);\n    ret.addPropertyResult('blueGreenUpdatePolicy', 'BlueGreenUpdatePolicy', CfnEndpointBlueGreenUpdatePolicyPropertyFromCloudFormation(properties.BlueGreenUpdatePolicy));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\n                                                                                                                                                                                                                                                                                                                                              \n    export interface TrafficRoutingConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly canarySize?: CfnEndpoint.CapacitySizeProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly linearStepSize?: CfnEndpoint.CapacitySizeProperty | cdk.IResolvable;\nn        readonly type: string;\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly waitIntervalInSeconds?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TrafficRoutingConfigProperty`\n *\n * @param properties - the TypeScript properties of a `TrafficRoutingConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_TrafficRoutingConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('canarySize', CfnEndpoint_CapacitySizePropertyValidator)(properties.canarySize));\n    errors.collect(cdk.propertyValidator('linearStepSize', CfnEndpoint_CapacitySizePropertyValidator)(properties.linearStepSize));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('waitIntervalInSeconds', cdk.validateNumber)(properties.waitIntervalInSeconds));\n    return errors.wrap('supplied properties not correct for \"TrafficRoutingConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.TrafficRoutingConfig` resource\n *\n * @param properties - the TypeScript properties of a `TrafficRoutingConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.TrafficRoutingConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointTrafficRoutingConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_TrafficRoutingConfigPropertyValidator(properties).assertSuccess();\n    return {\n        CanarySize: cfnEndpointCapacitySizePropertyToCloudFormation(properties.canarySize),\n        LinearStepSize: cfnEndpointCapacitySizePropertyToCloudFormation(properties.linearStepSize),\n        Type: cdk.stringToCloudFormation(properties.type),\n        WaitIntervalInSeconds: cdk.numberToCloudFormation(properties.waitIntervalInSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointTrafficRoutingConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.TrafficRoutingConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.TrafficRoutingConfigProperty>();\n    ret.addPropertyResult('canarySize', 'CanarySize', properties.CanarySize != null ? CfnEndpointCapacitySizePropertyFromCloudFormation(properties.CanarySize) : undefined);\n    ret.addPropertyResult('linearStepSize', 'LinearStepSize', properties.LinearStepSize != null ? CfnEndpointCapacitySizePropertyFromCloudFormation(properties.LinearStepSize) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('waitIntervalInSeconds', 'WaitIntervalInSeconds', properties.WaitIntervalInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.WaitIntervalInSeconds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpoint {\nn    export interface VariantPropertyProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly variantPropertyType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VariantPropertyProperty`\n *\n * @param properties - the TypeScript properties of a `VariantPropertyProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpoint_VariantPropertyPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('variantPropertyType', cdk.validateString)(properties.variantPropertyType));\n    return errors.wrap('supplied properties not correct for \"VariantPropertyProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.VariantProperty` resource\n *\n * @param properties - the TypeScript properties of a `VariantPropertyProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Endpoint.VariantProperty` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointVariantPropertyPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpoint_VariantPropertyPropertyValidator(properties).assertSuccess();\n    return {\n        VariantPropertyType: cdk.stringToCloudFormation(properties.variantPropertyType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointVariantPropertyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.VariantPropertyProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.VariantPropertyProperty>();\n    ret.addPropertyResult('variantPropertyType', 'VariantPropertyType', properties.VariantPropertyType != null ? cfn_parse.FromCloudFormation.getString(properties.VariantPropertyType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                  \nexport interface CfnEndpointConfigProps {\n\n                                                                                                                                                                                                                                                                                                     \n    readonly productionVariants: Array<CfnEndpointConfig.ProductionVariantProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                  \n    readonly asyncInferenceConfig?: CfnEndpointConfig.AsyncInferenceConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    readonly dataCaptureConfig?: CfnEndpointConfig.DataCaptureConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                           \n    readonly endpointConfigName?: string;\n\nn    readonly kmsKeyId?: string;\n\nn    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnEndpointConfigProps`\n *\n * @param properties - the TypeScript properties of a `CfnEndpointConfigProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointConfigPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('asyncInferenceConfig', CfnEndpointConfig_AsyncInferenceConfigPropertyValidator)(properties.asyncInferenceConfig));\n    errors.collect(cdk.propertyValidator('dataCaptureConfig', CfnEndpointConfig_DataCaptureConfigPropertyValidator)(properties.dataCaptureConfig));\n    errors.collect(cdk.propertyValidator('endpointConfigName', cdk.validateString)(properties.endpointConfigName));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('productionVariants', cdk.requiredValidator)(properties.productionVariants));\n    errors.collect(cdk.propertyValidator('productionVariants', cdk.listValidator(CfnEndpointConfig_ProductionVariantPropertyValidator))(properties.productionVariants));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnEndpointConfigProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig` resource\n *\n * @param properties - the TypeScript properties of a `CfnEndpointConfigProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointConfigPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointConfigPropsValidator(properties).assertSuccess();\n    return {\n        ProductionVariants: cdk.listMapper(cfnEndpointConfigProductionVariantPropertyToCloudFormation)(properties.productionVariants),\n        AsyncInferenceConfig: cfnEndpointConfigAsyncInferenceConfigPropertyToCloudFormation(properties.asyncInferenceConfig),\n        DataCaptureConfig: cfnEndpointConfigDataCaptureConfigPropertyToCloudFormation(properties.dataCaptureConfig),\n        EndpointConfigName: cdk.stringToCloudFormation(properties.endpointConfigName),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfigProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfigProps>();\n    ret.addPropertyResult('productionVariants', 'ProductionVariants', cfn_parse.FromCloudFormation.getArray(CfnEndpointConfigProductionVariantPropertyFromCloudFormation)(properties.ProductionVariants));\n    ret.addPropertyResult('asyncInferenceConfig', 'AsyncInferenceConfig', properties.AsyncInferenceConfig != null ? CfnEndpointConfigAsyncInferenceConfigPropertyFromCloudFormation(properties.AsyncInferenceConfig) : undefined);\n    ret.addPropertyResult('dataCaptureConfig', 'DataCaptureConfig', properties.DataCaptureConfig != null ? CfnEndpointConfigDataCaptureConfigPropertyFromCloudFormation(properties.DataCaptureConfig) : undefined);\n    ret.addPropertyResult('endpointConfigName', 'EndpointConfigName', properties.EndpointConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointConfigName) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnEndpointConfig extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::EndpointConfig\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEndpointConfig {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnEndpointConfigPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnEndpointConfig(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                     \n    public readonly attrEndpointConfigName: string;\n\n                                                                                                                                                                                                                                                                                                     \n    public productionVariants: Array<CfnEndpointConfig.ProductionVariantProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                  \n    public asyncInferenceConfig: CfnEndpointConfig.AsyncInferenceConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    public dataCaptureConfig: CfnEndpointConfig.DataCaptureConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                           \n    public endpointConfigName: string | undefined;\n\nn    public kmsKeyId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnEndpointConfigProps) {\n        super(scope, id, { type: CfnEndpointConfig.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'productionVariants', this);\n        this.attrEndpointConfigName = cdk.Token.asString(this.getAtt('EndpointConfigName'));\n\n        this.productionVariants = props.productionVariants;\n        this.asyncInferenceConfig = props.asyncInferenceConfig;\n        this.dataCaptureConfig = props.dataCaptureConfig;\n        this.endpointConfigName = props.endpointConfigName;\n        this.kmsKeyId = props.kmsKeyId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::EndpointConfig\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnEndpointConfig.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            productionVariants: this.productionVariants,\n            asyncInferenceConfig: this.asyncInferenceConfig,\n            dataCaptureConfig: this.dataCaptureConfig,\n            endpointConfigName: this.endpointConfigName,\n            kmsKeyId: this.kmsKeyId,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnEndpointConfigPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnEndpointConfig {\n                                                                                                                                                                                                                                                                                                                                                             \n    export interface AsyncInferenceClientConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly maxConcurrentInvocationsPerInstance?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AsyncInferenceClientConfigProperty`\n *\n * @param properties - the TypeScript properties of a `AsyncInferenceClientConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointConfig_AsyncInferenceClientConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxConcurrentInvocationsPerInstance', cdk.validateNumber)(properties.maxConcurrentInvocationsPerInstance));\n    return errors.wrap('supplied properties not correct for \"AsyncInferenceClientConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.AsyncInferenceClientConfig` resource\n *\n * @param properties - the TypeScript properties of a `AsyncInferenceClientConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.AsyncInferenceClientConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointConfigAsyncInferenceClientConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointConfig_AsyncInferenceClientConfigPropertyValidator(properties).assertSuccess();\n    return {\n        MaxConcurrentInvocationsPerInstance: cdk.numberToCloudFormation(properties.maxConcurrentInvocationsPerInstance),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointConfigAsyncInferenceClientConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.AsyncInferenceClientConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.AsyncInferenceClientConfigProperty>();\n    ret.addPropertyResult('maxConcurrentInvocationsPerInstance', 'MaxConcurrentInvocationsPerInstance', properties.MaxConcurrentInvocationsPerInstance != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxConcurrentInvocationsPerInstance) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpointConfig {\n                                                                                                                                                                                                                                                                                                        \n    export interface AsyncInferenceConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly clientConfig?: CfnEndpointConfig.AsyncInferenceClientConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly outputConfig: CfnEndpointConfig.AsyncInferenceOutputConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AsyncInferenceConfigProperty`\n *\n * @param properties - the TypeScript properties of a `AsyncInferenceConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointConfig_AsyncInferenceConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clientConfig', CfnEndpointConfig_AsyncInferenceClientConfigPropertyValidator)(properties.clientConfig));\n    errors.collect(cdk.propertyValidator('outputConfig', cdk.requiredValidator)(properties.outputConfig));\n    errors.collect(cdk.propertyValidator('outputConfig', CfnEndpointConfig_AsyncInferenceOutputConfigPropertyValidator)(properties.outputConfig));\n    return errors.wrap('supplied properties not correct for \"AsyncInferenceConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.AsyncInferenceConfig` resource\n *\n * @param properties - the TypeScript properties of a `AsyncInferenceConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.AsyncInferenceConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointConfigAsyncInferenceConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointConfig_AsyncInferenceConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ClientConfig: cfnEndpointConfigAsyncInferenceClientConfigPropertyToCloudFormation(properties.clientConfig),\n        OutputConfig: cfnEndpointConfigAsyncInferenceOutputConfigPropertyToCloudFormation(properties.outputConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointConfigAsyncInferenceConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.AsyncInferenceConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.AsyncInferenceConfigProperty>();\n    ret.addPropertyResult('clientConfig', 'ClientConfig', properties.ClientConfig != null ? CfnEndpointConfigAsyncInferenceClientConfigPropertyFromCloudFormation(properties.ClientConfig) : undefined);\n    ret.addPropertyResult('outputConfig', 'OutputConfig', CfnEndpointConfigAsyncInferenceOutputConfigPropertyFromCloudFormation(properties.OutputConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpointConfig {\n                                                                                                                                                                                                                                                                                                                                      \n    export interface AsyncInferenceNotificationConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly errorTopic?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly successTopic?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AsyncInferenceNotificationConfigProperty`\n *\n * @param properties - the TypeScript properties of a `AsyncInferenceNotificationConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointConfig_AsyncInferenceNotificationConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('errorTopic', cdk.validateString)(properties.errorTopic));\n    errors.collect(cdk.propertyValidator('successTopic', cdk.validateString)(properties.successTopic));\n    return errors.wrap('supplied properties not correct for \"AsyncInferenceNotificationConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.AsyncInferenceNotificationConfig` resource\n *\n * @param properties - the TypeScript properties of a `AsyncInferenceNotificationConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.AsyncInferenceNotificationConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointConfigAsyncInferenceNotificationConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointConfig_AsyncInferenceNotificationConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ErrorTopic: cdk.stringToCloudFormation(properties.errorTopic),\n        SuccessTopic: cdk.stringToCloudFormation(properties.successTopic),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointConfigAsyncInferenceNotificationConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.AsyncInferenceNotificationConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.AsyncInferenceNotificationConfigProperty>();\n    ret.addPropertyResult('errorTopic', 'ErrorTopic', properties.ErrorTopic != null ? cfn_parse.FromCloudFormation.getString(properties.ErrorTopic) : undefined);\n    ret.addPropertyResult('successTopic', 'SuccessTopic', properties.SuccessTopic != null ? cfn_parse.FromCloudFormation.getString(properties.SuccessTopic) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpointConfig {\n                                                                                                                                                                                                                                                                                                            \n    export interface AsyncInferenceOutputConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly notificationConfig?: CfnEndpointConfig.AsyncInferenceNotificationConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly s3OutputPath: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AsyncInferenceOutputConfigProperty`\n *\n * @param properties - the TypeScript properties of a `AsyncInferenceOutputConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointConfig_AsyncInferenceOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('notificationConfig', CfnEndpointConfig_AsyncInferenceNotificationConfigPropertyValidator)(properties.notificationConfig));\n    errors.collect(cdk.propertyValidator('s3OutputPath', cdk.requiredValidator)(properties.s3OutputPath));\n    errors.collect(cdk.propertyValidator('s3OutputPath', cdk.validateString)(properties.s3OutputPath));\n    return errors.wrap('supplied properties not correct for \"AsyncInferenceOutputConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.AsyncInferenceOutputConfig` resource\n *\n * @param properties - the TypeScript properties of a `AsyncInferenceOutputConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.AsyncInferenceOutputConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointConfigAsyncInferenceOutputConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointConfig_AsyncInferenceOutputConfigPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        NotificationConfig: cfnEndpointConfigAsyncInferenceNotificationConfigPropertyToCloudFormation(properties.notificationConfig),\n        S3OutputPath: cdk.stringToCloudFormation(properties.s3OutputPath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointConfigAsyncInferenceOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.AsyncInferenceOutputConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.AsyncInferenceOutputConfigProperty>();\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('notificationConfig', 'NotificationConfig', properties.NotificationConfig != null ? CfnEndpointConfigAsyncInferenceNotificationConfigPropertyFromCloudFormation(properties.NotificationConfig) : undefined);\n    ret.addPropertyResult('s3OutputPath', 'S3OutputPath', cfn_parse.FromCloudFormation.getString(properties.S3OutputPath));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpointConfig {\n                                                                                                                                                                                                                                                                                                                                  \n    export interface CaptureContentTypeHeaderProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly csvContentTypes?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly jsonContentTypes?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CaptureContentTypeHeaderProperty`\n *\n * @param properties - the TypeScript properties of a `CaptureContentTypeHeaderProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointConfig_CaptureContentTypeHeaderPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('csvContentTypes', cdk.listValidator(cdk.validateString))(properties.csvContentTypes));\n    errors.collect(cdk.propertyValidator('jsonContentTypes', cdk.listValidator(cdk.validateString))(properties.jsonContentTypes));\n    return errors.wrap('supplied properties not correct for \"CaptureContentTypeHeaderProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.CaptureContentTypeHeader` resource\n *\n * @param properties - the TypeScript properties of a `CaptureContentTypeHeaderProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.CaptureContentTypeHeader` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointConfigCaptureContentTypeHeaderPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointConfig_CaptureContentTypeHeaderPropertyValidator(properties).assertSuccess();\n    return {\n        CsvContentTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.csvContentTypes),\n        JsonContentTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.jsonContentTypes),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointConfigCaptureContentTypeHeaderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.CaptureContentTypeHeaderProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.CaptureContentTypeHeaderProperty>();\n    ret.addPropertyResult('csvContentTypes', 'CsvContentTypes', properties.CsvContentTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CsvContentTypes) : undefined);\n    ret.addPropertyResult('jsonContentTypes', 'JsonContentTypes', properties.JsonContentTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.JsonContentTypes) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpointConfig {\n                                                                                                                                                                                                                                                                                       \n    export interface CaptureOptionProperty {\n                                                                                                                                                                                                                                                                                                                 \n        readonly captureMode: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CaptureOptionProperty`\n *\n * @param properties - the TypeScript properties of a `CaptureOptionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointConfig_CaptureOptionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('captureMode', cdk.requiredValidator)(properties.captureMode));\n    errors.collect(cdk.propertyValidator('captureMode', cdk.validateString)(properties.captureMode));\n    return errors.wrap('supplied properties not correct for \"CaptureOptionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.CaptureOption` resource\n *\n * @param properties - the TypeScript properties of a `CaptureOptionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.CaptureOption` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointConfigCaptureOptionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointConfig_CaptureOptionPropertyValidator(properties).assertSuccess();\n    return {\n        CaptureMode: cdk.stringToCloudFormation(properties.captureMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointConfigCaptureOptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.CaptureOptionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.CaptureOptionProperty>();\n    ret.addPropertyResult('captureMode', 'CaptureMode', cfn_parse.FromCloudFormation.getString(properties.CaptureMode));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpointConfig {\n                                                                                                                                                                                                                                                                                                     \n    export interface DataCaptureConfigProperty {\n                                                                                                                                                                                                                                                                                                                                       \n        readonly captureContentTypeHeader?: CfnEndpointConfig.CaptureContentTypeHeaderProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly captureOptions: Array<CfnEndpointConfig.CaptureOptionProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                   \n        readonly destinationS3Uri: string;\n                                                                                                                                                                                                                                                                                              \n        readonly enableCapture?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                       \n        readonly initialSamplingPercentage: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly kmsKeyId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DataCaptureConfigProperty`\n *\n * @param properties - the TypeScript properties of a `DataCaptureConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointConfig_DataCaptureConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('captureContentTypeHeader', CfnEndpointConfig_CaptureContentTypeHeaderPropertyValidator)(properties.captureContentTypeHeader));\n    errors.collect(cdk.propertyValidator('captureOptions', cdk.requiredValidator)(properties.captureOptions));\n    errors.collect(cdk.propertyValidator('captureOptions', cdk.listValidator(CfnEndpointConfig_CaptureOptionPropertyValidator))(properties.captureOptions));\n    errors.collect(cdk.propertyValidator('destinationS3Uri', cdk.requiredValidator)(properties.destinationS3Uri));\n    errors.collect(cdk.propertyValidator('destinationS3Uri', cdk.validateString)(properties.destinationS3Uri));\n    errors.collect(cdk.propertyValidator('enableCapture', cdk.validateBoolean)(properties.enableCapture));\n    errors.collect(cdk.propertyValidator('initialSamplingPercentage', cdk.requiredValidator)(properties.initialSamplingPercentage));\n    errors.collect(cdk.propertyValidator('initialSamplingPercentage', cdk.validateNumber)(properties.initialSamplingPercentage));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    return errors.wrap('supplied properties not correct for \"DataCaptureConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.DataCaptureConfig` resource\n *\n * @param properties - the TypeScript properties of a `DataCaptureConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.DataCaptureConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointConfigDataCaptureConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointConfig_DataCaptureConfigPropertyValidator(properties).assertSuccess();\n    return {\n        CaptureContentTypeHeader: cfnEndpointConfigCaptureContentTypeHeaderPropertyToCloudFormation(properties.captureContentTypeHeader),\n        CaptureOptions: cdk.listMapper(cfnEndpointConfigCaptureOptionPropertyToCloudFormation)(properties.captureOptions),\n        DestinationS3Uri: cdk.stringToCloudFormation(properties.destinationS3Uri),\n        EnableCapture: cdk.booleanToCloudFormation(properties.enableCapture),\n        InitialSamplingPercentage: cdk.numberToCloudFormation(properties.initialSamplingPercentage),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointConfigDataCaptureConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.DataCaptureConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.DataCaptureConfigProperty>();\n    ret.addPropertyResult('captureContentTypeHeader', 'CaptureContentTypeHeader', properties.CaptureContentTypeHeader != null ? CfnEndpointConfigCaptureContentTypeHeaderPropertyFromCloudFormation(properties.CaptureContentTypeHeader) : undefined);\n    ret.addPropertyResult('captureOptions', 'CaptureOptions', cfn_parse.FromCloudFormation.getArray(CfnEndpointConfigCaptureOptionPropertyFromCloudFormation)(properties.CaptureOptions));\n    ret.addPropertyResult('destinationS3Uri', 'DestinationS3Uri', cfn_parse.FromCloudFormation.getString(properties.DestinationS3Uri));\n    ret.addPropertyResult('enableCapture', 'EnableCapture', properties.EnableCapture != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableCapture) : undefined);\n    ret.addPropertyResult('initialSamplingPercentage', 'InitialSamplingPercentage', cfn_parse.FromCloudFormation.getNumber(properties.InitialSamplingPercentage));\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpointConfig {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface ProductionVariantProperty {\nn        readonly acceleratorType?: string;\n                                                                                                                                                                                                                                                                                                        \n        readonly initialInstanceCount?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly initialVariantWeight: number;\n                                                                                                                                                                                                                                                                                     \n        readonly instanceType?: string;\n                                                                                                                                                                                                                                                                                                                                                              \n        readonly modelName: string;\nn        readonly serverlessConfig?: CfnEndpointConfig.ServerlessConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                          \n        readonly variantName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ProductionVariantProperty`\n *\n * @param properties - the TypeScript properties of a `ProductionVariantProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointConfig_ProductionVariantPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('acceleratorType', cdk.validateString)(properties.acceleratorType));\n    errors.collect(cdk.propertyValidator('initialInstanceCount', cdk.validateNumber)(properties.initialInstanceCount));\n    errors.collect(cdk.propertyValidator('initialVariantWeight', cdk.requiredValidator)(properties.initialVariantWeight));\n    errors.collect(cdk.propertyValidator('initialVariantWeight', cdk.validateNumber)(properties.initialVariantWeight));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('modelName', cdk.requiredValidator)(properties.modelName));\n    errors.collect(cdk.propertyValidator('modelName', cdk.validateString)(properties.modelName));\n    errors.collect(cdk.propertyValidator('serverlessConfig', CfnEndpointConfig_ServerlessConfigPropertyValidator)(properties.serverlessConfig));\n    errors.collect(cdk.propertyValidator('variantName', cdk.requiredValidator)(properties.variantName));\n    errors.collect(cdk.propertyValidator('variantName', cdk.validateString)(properties.variantName));\n    return errors.wrap('supplied properties not correct for \"ProductionVariantProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.ProductionVariant` resource\n *\n * @param properties - the TypeScript properties of a `ProductionVariantProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.ProductionVariant` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointConfigProductionVariantPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointConfig_ProductionVariantPropertyValidator(properties).assertSuccess();\n    return {\n        AcceleratorType: cdk.stringToCloudFormation(properties.acceleratorType),\n        InitialInstanceCount: cdk.numberToCloudFormation(properties.initialInstanceCount),\n        InitialVariantWeight: cdk.numberToCloudFormation(properties.initialVariantWeight),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        ModelName: cdk.stringToCloudFormation(properties.modelName),\n        ServerlessConfig: cfnEndpointConfigServerlessConfigPropertyToCloudFormation(properties.serverlessConfig),\n        VariantName: cdk.stringToCloudFormation(properties.variantName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointConfigProductionVariantPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.ProductionVariantProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.ProductionVariantProperty>();\n    ret.addPropertyResult('acceleratorType', 'AcceleratorType', properties.AcceleratorType != null ? cfn_parse.FromCloudFormation.getString(properties.AcceleratorType) : undefined);\n    ret.addPropertyResult('initialInstanceCount', 'InitialInstanceCount', properties.InitialInstanceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InitialInstanceCount) : undefined);\n    ret.addPropertyResult('initialVariantWeight', 'InitialVariantWeight', cfn_parse.FromCloudFormation.getNumber(properties.InitialVariantWeight));\n    ret.addPropertyResult('instanceType', 'InstanceType', properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined);\n    ret.addPropertyResult('modelName', 'ModelName', cfn_parse.FromCloudFormation.getString(properties.ModelName));\n    ret.addPropertyResult('serverlessConfig', 'ServerlessConfig', properties.ServerlessConfig != null ? CfnEndpointConfigServerlessConfigPropertyFromCloudFormation(properties.ServerlessConfig) : undefined);\n    ret.addPropertyResult('variantName', 'VariantName', cfn_parse.FromCloudFormation.getString(properties.VariantName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnEndpointConfig {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface ServerlessConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly maxConcurrency: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly memorySizeInMb: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ServerlessConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ServerlessConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnEndpointConfig_ServerlessConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxConcurrency', cdk.requiredValidator)(properties.maxConcurrency));\n    errors.collect(cdk.propertyValidator('maxConcurrency', cdk.validateNumber)(properties.maxConcurrency));\n    errors.collect(cdk.propertyValidator('memorySizeInMb', cdk.requiredValidator)(properties.memorySizeInMb));\n    errors.collect(cdk.propertyValidator('memorySizeInMb', cdk.validateNumber)(properties.memorySizeInMb));\n    return errors.wrap('supplied properties not correct for \"ServerlessConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.ServerlessConfig` resource\n *\n * @param properties - the TypeScript properties of a `ServerlessConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::EndpointConfig.ServerlessConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnEndpointConfigServerlessConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnEndpointConfig_ServerlessConfigPropertyValidator(properties).assertSuccess();\n    return {\n        MaxConcurrency: cdk.numberToCloudFormation(properties.maxConcurrency),\n        MemorySizeInMB: cdk.numberToCloudFormation(properties.memorySizeInMb),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnEndpointConfigServerlessConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.ServerlessConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.ServerlessConfigProperty>();\n    ret.addPropertyResult('maxConcurrency', 'MaxConcurrency', cfn_parse.FromCloudFormation.getNumber(properties.MaxConcurrency));\n    ret.addPropertyResult('memorySizeInMb', 'MemorySizeInMB', cfn_parse.FromCloudFormation.getNumber(properties.MemorySizeInMB));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                              \nexport interface CfnFeatureGroupProps {\n\nn    readonly eventTimeFeatureName: string;\n\nn    readonly featureDefinitions: Array<CfnFeatureGroup.FeatureDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                              \n    readonly featureGroupName: string;\n\n                                                                                                                                                                                                                                                                                                                                  \n    readonly recordIdentifierFeatureName: string;\n\n                                                                                                                                                                                                                                      \n    readonly description?: string;\n\n                                                                                                                                                                                                                                        \n    readonly offlineStoreConfig?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                      \n    readonly onlineStoreConfig?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                               \n    readonly roleArn?: string;\n\n                                                                                                                                                                                                                        \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnFeatureGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnFeatureGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnFeatureGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('eventTimeFeatureName', cdk.requiredValidator)(properties.eventTimeFeatureName));\n    errors.collect(cdk.propertyValidator('eventTimeFeatureName', cdk.validateString)(properties.eventTimeFeatureName));\n    errors.collect(cdk.propertyValidator('featureDefinitions', cdk.requiredValidator)(properties.featureDefinitions));\n    errors.collect(cdk.propertyValidator('featureDefinitions', cdk.listValidator(CfnFeatureGroup_FeatureDefinitionPropertyValidator))(properties.featureDefinitions));\n    errors.collect(cdk.propertyValidator('featureGroupName', cdk.requiredValidator)(properties.featureGroupName));\n    errors.collect(cdk.propertyValidator('featureGroupName', cdk.validateString)(properties.featureGroupName));\n    errors.collect(cdk.propertyValidator('offlineStoreConfig', cdk.validateObject)(properties.offlineStoreConfig));\n    errors.collect(cdk.propertyValidator('onlineStoreConfig', cdk.validateObject)(properties.onlineStoreConfig));\n    errors.collect(cdk.propertyValidator('recordIdentifierFeatureName', cdk.requiredValidator)(properties.recordIdentifierFeatureName));\n    errors.collect(cdk.propertyValidator('recordIdentifierFeatureName', cdk.validateString)(properties.recordIdentifierFeatureName));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnFeatureGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::FeatureGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnFeatureGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::FeatureGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFeatureGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFeatureGroupPropsValidator(properties).assertSuccess();\n    return {\n        EventTimeFeatureName: cdk.stringToCloudFormation(properties.eventTimeFeatureName),\n        FeatureDefinitions: cdk.listMapper(cfnFeatureGroupFeatureDefinitionPropertyToCloudFormation)(properties.featureDefinitions),\n        FeatureGroupName: cdk.stringToCloudFormation(properties.featureGroupName),\n        RecordIdentifierFeatureName: cdk.stringToCloudFormation(properties.recordIdentifierFeatureName),\n        Description: cdk.stringToCloudFormation(properties.description),\n        OfflineStoreConfig: cdk.objectToCloudFormation(properties.offlineStoreConfig),\n        OnlineStoreConfig: cdk.objectToCloudFormation(properties.onlineStoreConfig),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFeatureGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFeatureGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFeatureGroupProps>();\n    ret.addPropertyResult('eventTimeFeatureName', 'EventTimeFeatureName', cfn_parse.FromCloudFormation.getString(properties.EventTimeFeatureName));\n    ret.addPropertyResult('featureDefinitions', 'FeatureDefinitions', cfn_parse.FromCloudFormation.getArray(CfnFeatureGroupFeatureDefinitionPropertyFromCloudFormation)(properties.FeatureDefinitions));\n    ret.addPropertyResult('featureGroupName', 'FeatureGroupName', cfn_parse.FromCloudFormation.getString(properties.FeatureGroupName));\n    ret.addPropertyResult('recordIdentifierFeatureName', 'RecordIdentifierFeatureName', cfn_parse.FromCloudFormation.getString(properties.RecordIdentifierFeatureName));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('offlineStoreConfig', 'OfflineStoreConfig', properties.OfflineStoreConfig != null ? cfn_parse.FromCloudFormation.getAny(properties.OfflineStoreConfig) : undefined);\n    ret.addPropertyResult('onlineStoreConfig', 'OnlineStoreConfig', properties.OnlineStoreConfig != null ? cfn_parse.FromCloudFormation.getAny(properties.OnlineStoreConfig) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnFeatureGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::FeatureGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFeatureGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnFeatureGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnFeatureGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\nn    public eventTimeFeatureName: string;\n\nn    public featureDefinitions: Array<CfnFeatureGroup.FeatureDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                              \n    public featureGroupName: string;\n\n                                                                                                                                                                                                                                                                                                                                  \n    public recordIdentifierFeatureName: string;\n\n                                                                                                                                                                                                                                      \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                        \n    public offlineStoreConfig: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                      \n    public onlineStoreConfig: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                               \n    public roleArn: string | undefined;\n\n                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnFeatureGroupProps) {\n        super(scope, id, { type: CfnFeatureGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'eventTimeFeatureName', this);\n        cdk.requireProperty(props, 'featureDefinitions', this);\n        cdk.requireProperty(props, 'featureGroupName', this);\n        cdk.requireProperty(props, 'recordIdentifierFeatureName', this);\n\n        this.eventTimeFeatureName = props.eventTimeFeatureName;\n        this.featureDefinitions = props.featureDefinitions;\n        this.featureGroupName = props.featureGroupName;\n        this.recordIdentifierFeatureName = props.recordIdentifierFeatureName;\n        this.description = props.description;\n        this.offlineStoreConfig = props.offlineStoreConfig;\n        this.onlineStoreConfig = props.onlineStoreConfig;\n        this.roleArn = props.roleArn;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::FeatureGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnFeatureGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            eventTimeFeatureName: this.eventTimeFeatureName,\n            featureDefinitions: this.featureDefinitions,\n            featureGroupName: this.featureGroupName,\n            recordIdentifierFeatureName: this.recordIdentifierFeatureName,\n            description: this.description,\n            offlineStoreConfig: this.offlineStoreConfig,\n            onlineStoreConfig: this.onlineStoreConfig,\n            roleArn: this.roleArn,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnFeatureGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnFeatureGroup {\n                                                                                                                                                                                                                                                                                                                                                                        \n    export interface FeatureDefinitionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly featureName: string;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly featureType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FeatureDefinitionProperty`\n *\n * @param properties - the TypeScript properties of a `FeatureDefinitionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnFeatureGroup_FeatureDefinitionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('featureName', cdk.requiredValidator)(properties.featureName));\n    errors.collect(cdk.propertyValidator('featureName', cdk.validateString)(properties.featureName));\n    errors.collect(cdk.propertyValidator('featureType', cdk.requiredValidator)(properties.featureType));\n    errors.collect(cdk.propertyValidator('featureType', cdk.validateString)(properties.featureType));\n    return errors.wrap('supplied properties not correct for \"FeatureDefinitionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::FeatureGroup.FeatureDefinition` resource\n *\n * @param properties - the TypeScript properties of a `FeatureDefinitionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::FeatureGroup.FeatureDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnFeatureGroupFeatureDefinitionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnFeatureGroup_FeatureDefinitionPropertyValidator(properties).assertSuccess();\n    return {\n        FeatureName: cdk.stringToCloudFormation(properties.featureName),\n        FeatureType: cdk.stringToCloudFormation(properties.featureType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnFeatureGroupFeatureDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFeatureGroup.FeatureDefinitionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFeatureGroup.FeatureDefinitionProperty>();\n    ret.addPropertyResult('featureName', 'FeatureName', cfn_parse.FromCloudFormation.getString(properties.FeatureName));\n    ret.addPropertyResult('featureType', 'FeatureType', cfn_parse.FromCloudFormation.getString(properties.FeatureType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                \nexport interface CfnImageProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly imageName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly imageRoleArn: string;\n\n                                                                                                                                                                                                                                                                                                                             \n    readonly imageDescription?: string;\n\n                                                                                                                                                                                                                                                                                                                                       \n    readonly imageDisplayName?: string;\n\n                                                                                                                                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnImageProps`\n *\n * @param properties - the TypeScript properties of a `CfnImageProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnImagePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('imageDescription', cdk.validateString)(properties.imageDescription));\n    errors.collect(cdk.propertyValidator('imageDisplayName', cdk.validateString)(properties.imageDisplayName));\n    errors.collect(cdk.propertyValidator('imageName', cdk.requiredValidator)(properties.imageName));\n    errors.collect(cdk.propertyValidator('imageName', cdk.validateString)(properties.imageName));\n    errors.collect(cdk.propertyValidator('imageRoleArn', cdk.requiredValidator)(properties.imageRoleArn));\n    errors.collect(cdk.propertyValidator('imageRoleArn', cdk.validateString)(properties.imageRoleArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnImageProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Image` resource\n *\n * @param properties - the TypeScript properties of a `CfnImageProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Image` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImagePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImagePropsValidator(properties).assertSuccess();\n    return {\n        ImageName: cdk.stringToCloudFormation(properties.imageName),\n        ImageRoleArn: cdk.stringToCloudFormation(properties.imageRoleArn),\n        ImageDescription: cdk.stringToCloudFormation(properties.imageDescription),\n        ImageDisplayName: cdk.stringToCloudFormation(properties.imageDisplayName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImagePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageProps>();\n    ret.addPropertyResult('imageName', 'ImageName', cfn_parse.FromCloudFormation.getString(properties.ImageName));\n    ret.addPropertyResult('imageRoleArn', 'ImageRoleArn', cfn_parse.FromCloudFormation.getString(properties.ImageRoleArn));\n    ret.addPropertyResult('imageDescription', 'ImageDescription', properties.ImageDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ImageDescription) : undefined);\n    ret.addPropertyResult('imageDisplayName', 'ImageDisplayName', properties.ImageDisplayName != null ? cfn_parse.FromCloudFormation.getString(properties.ImageDisplayName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnImage extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::Image\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnImage {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnImagePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnImage(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                           \n    public readonly attrImageArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                           \n    public imageName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public imageRoleArn: string;\n\n                                                                                                                                                                                                                                                                                                                             \n    public imageDescription: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                       \n    public imageDisplayName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnImageProps) {\n        super(scope, id, { type: CfnImage.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'imageName', this);\n        cdk.requireProperty(props, 'imageRoleArn', this);\n        this.attrImageArn = cdk.Token.asString(this.getAtt('ImageArn'));\n\n        this.imageName = props.imageName;\n        this.imageRoleArn = props.imageRoleArn;\n        this.imageDescription = props.imageDescription;\n        this.imageDisplayName = props.imageDisplayName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::Image\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnImage.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            imageName: this.imageName,\n            imageRoleArn: this.imageRoleArn,\n            imageDescription: this.imageDescription,\n            imageDisplayName: this.imageDisplayName,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnImagePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                              \nexport interface CfnImageVersionProps {\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    readonly baseImage: string;\n\n                                                                                                                                                                                                                                                                                                                                                                      \n    readonly imageName: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnImageVersionProps`\n *\n * @param properties - the TypeScript properties of a `CfnImageVersionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnImageVersionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('baseImage', cdk.requiredValidator)(properties.baseImage));\n    errors.collect(cdk.propertyValidator('baseImage', cdk.validateString)(properties.baseImage));\n    errors.collect(cdk.propertyValidator('imageName', cdk.requiredValidator)(properties.imageName));\n    errors.collect(cdk.propertyValidator('imageName', cdk.validateString)(properties.imageName));\n    return errors.wrap('supplied properties not correct for \"CfnImageVersionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ImageVersion` resource\n *\n * @param properties - the TypeScript properties of a `CfnImageVersionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ImageVersion` resource.\n */\n// @ts-ignore TS6133\nfunction cfnImageVersionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnImageVersionPropsValidator(properties).assertSuccess();\n    return {\n        BaseImage: cdk.stringToCloudFormation(properties.baseImage),\n        ImageName: cdk.stringToCloudFormation(properties.imageName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnImageVersionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageVersionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageVersionProps>();\n    ret.addPropertyResult('baseImage', 'BaseImage', cfn_parse.FromCloudFormation.getString(properties.BaseImage));\n    ret.addPropertyResult('imageName', 'ImageName', cfn_parse.FromCloudFormation.getString(properties.ImageName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnImageVersion extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::ImageVersion\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnImageVersion {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnImageVersionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnImageVersion(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                        \n    public readonly attrContainerImage: string;\n\n                                                                                                                   \n    public readonly attrImageArn: string;\n\n                                                                                                                                                                                                                                                                                                                                          \n    public readonly attrImageVersionArn: string;\n\n                                                                                        \n    public readonly attrVersion: number;\n\n                                                                                                                                                                                                                                                                                                                                                                        \n    public baseImage: string;\n\n                                                                                                                                                                                                                                                                                                                                                                      \n    public imageName: string;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnImageVersionProps) {\n        super(scope, id, { type: CfnImageVersion.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'baseImage', this);\n        cdk.requireProperty(props, 'imageName', this);\n        this.attrContainerImage = cdk.Token.asString(this.getAtt('ContainerImage'));\n        this.attrImageArn = cdk.Token.asString(this.getAtt('ImageArn'));\n        this.attrImageVersionArn = cdk.Token.asString(this.getAtt('ImageVersionArn'));\n        this.attrVersion = cdk.Token.asNumber(this.getAtt('Version'));\n\n        this.baseImage = props.baseImage;\n        this.imageName = props.imageName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnImageVersion.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            baseImage: this.baseImage,\n            imageName: this.imageName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnImageVersionPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                \nexport interface CfnModelProps {\n\nn    readonly executionRoleArn: string;\n\n                                                                                                                                                                                                                             \n    readonly containers?: Array<CfnModel.ContainerDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                    \n    readonly enableNetworkIsolation?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                     \n    readonly inferenceExecutionConfig?: CfnModel.InferenceExecutionConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                   \n    readonly modelName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                             \n    readonly primaryContainer?: CfnModel.ContainerDefinitionProperty | cdk.IResolvable;\n\nn    readonly tags?: cdk.CfnTag[];\n\nn    readonly vpcConfig?: CfnModel.VpcConfigProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnModelProps`\n *\n * @param properties - the TypeScript properties of a `CfnModelProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containers', cdk.listValidator(CfnModel_ContainerDefinitionPropertyValidator))(properties.containers));\n    errors.collect(cdk.propertyValidator('enableNetworkIsolation', cdk.validateBoolean)(properties.enableNetworkIsolation));\n    errors.collect(cdk.propertyValidator('executionRoleArn', cdk.requiredValidator)(properties.executionRoleArn));\n    errors.collect(cdk.propertyValidator('executionRoleArn', cdk.validateString)(properties.executionRoleArn));\n    errors.collect(cdk.propertyValidator('inferenceExecutionConfig', CfnModel_InferenceExecutionConfigPropertyValidator)(properties.inferenceExecutionConfig));\n    errors.collect(cdk.propertyValidator('modelName', cdk.validateString)(properties.modelName));\n    errors.collect(cdk.propertyValidator('primaryContainer', CfnModel_ContainerDefinitionPropertyValidator)(properties.primaryContainer));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('vpcConfig', CfnModel_VpcConfigPropertyValidator)(properties.vpcConfig));\n    return errors.wrap('supplied properties not correct for \"CfnModelProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Model` resource\n *\n * @param properties - the TypeScript properties of a `CfnModelProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Model` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelPropsValidator(properties).assertSuccess();\n    return {\n        ExecutionRoleArn: cdk.stringToCloudFormation(properties.executionRoleArn),\n        Containers: cdk.listMapper(cfnModelContainerDefinitionPropertyToCloudFormation)(properties.containers),\n        EnableNetworkIsolation: cdk.booleanToCloudFormation(properties.enableNetworkIsolation),\n        InferenceExecutionConfig: cfnModelInferenceExecutionConfigPropertyToCloudFormation(properties.inferenceExecutionConfig),\n        ModelName: cdk.stringToCloudFormation(properties.modelName),\n        PrimaryContainer: cfnModelContainerDefinitionPropertyToCloudFormation(properties.primaryContainer),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VpcConfig: cfnModelVpcConfigPropertyToCloudFormation(properties.vpcConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelProps>();\n    ret.addPropertyResult('executionRoleArn', 'ExecutionRoleArn', cfn_parse.FromCloudFormation.getString(properties.ExecutionRoleArn));\n    ret.addPropertyResult('containers', 'Containers', properties.Containers != null ? cfn_parse.FromCloudFormation.getArray(CfnModelContainerDefinitionPropertyFromCloudFormation)(properties.Containers) : undefined);\n    ret.addPropertyResult('enableNetworkIsolation', 'EnableNetworkIsolation', properties.EnableNetworkIsolation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNetworkIsolation) : undefined);\n    ret.addPropertyResult('inferenceExecutionConfig', 'InferenceExecutionConfig', properties.InferenceExecutionConfig != null ? CfnModelInferenceExecutionConfigPropertyFromCloudFormation(properties.InferenceExecutionConfig) : undefined);\n    ret.addPropertyResult('modelName', 'ModelName', properties.ModelName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelName) : undefined);\n    ret.addPropertyResult('primaryContainer', 'PrimaryContainer', properties.PrimaryContainer != null ? CfnModelContainerDefinitionPropertyFromCloudFormation(properties.PrimaryContainer) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('vpcConfig', 'VpcConfig', properties.VpcConfig != null ? CfnModelVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnModel extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::Model\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModel {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnModelPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnModel(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                           \n    public readonly attrModelName: string;\n\nn    public executionRoleArn: string;\n\n                                                                                                                                                                                                                             \n    public containers: Array<CfnModel.ContainerDefinitionProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                    \n    public enableNetworkIsolation: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                     \n    public inferenceExecutionConfig: CfnModel.InferenceExecutionConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                   \n    public modelName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                             \n    public primaryContainer: CfnModel.ContainerDefinitionProperty | cdk.IResolvable | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public vpcConfig: CfnModel.VpcConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnModelProps) {\n        super(scope, id, { type: CfnModel.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'executionRoleArn', this);\n        this.attrModelName = cdk.Token.asString(this.getAtt('ModelName'));\n\n        this.executionRoleArn = props.executionRoleArn;\n        this.containers = props.containers;\n        this.enableNetworkIsolation = props.enableNetworkIsolation;\n        this.inferenceExecutionConfig = props.inferenceExecutionConfig;\n        this.modelName = props.modelName;\n        this.primaryContainer = props.primaryContainer;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::Model\", props.tags, { tagPropertyName: 'tags' });\n        this.vpcConfig = props.vpcConfig;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnModel.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            executionRoleArn: this.executionRoleArn,\n            containers: this.containers,\n            enableNetworkIsolation: this.enableNetworkIsolation,\n            inferenceExecutionConfig: this.inferenceExecutionConfig,\n            modelName: this.modelName,\n            primaryContainer: this.primaryContainer,\n            tags: this.tags.renderTags(),\n            vpcConfig: this.vpcConfig,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnModelPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnModel {\n                                                                                                                                                                                                                                                                       \n    export interface ContainerDefinitionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly containerHostname?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly environment?: any | cdk.IResolvable;\nn        readonly image?: string;\nn        readonly imageConfig?: CfnModel.ImageConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                      \n        readonly inferenceSpecificationName?: string;\n                                                                                                                                                                                                                                                                                                \n        readonly mode?: string;\nn        readonly modelDataUrl?: string;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly modelPackageName?: string;\n                                                                                                                                                                                                                                                                                                     \n        readonly multiModelConfig?: CfnModel.MultiModelConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ContainerDefinitionProperty`\n *\n * @param properties - the TypeScript properties of a `ContainerDefinitionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModel_ContainerDefinitionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerHostname', cdk.validateString)(properties.containerHostname));\n    errors.collect(cdk.propertyValidator('environment', cdk.validateObject)(properties.environment));\n    errors.collect(cdk.propertyValidator('image', cdk.validateString)(properties.image));\n    errors.collect(cdk.propertyValidator('imageConfig', CfnModel_ImageConfigPropertyValidator)(properties.imageConfig));\n    errors.collect(cdk.propertyValidator('inferenceSpecificationName', cdk.validateString)(properties.inferenceSpecificationName));\n    errors.collect(cdk.propertyValidator('mode', cdk.validateString)(properties.mode));\n    errors.collect(cdk.propertyValidator('modelDataUrl', cdk.validateString)(properties.modelDataUrl));\n    errors.collect(cdk.propertyValidator('modelPackageName', cdk.validateString)(properties.modelPackageName));\n    errors.collect(cdk.propertyValidator('multiModelConfig', CfnModel_MultiModelConfigPropertyValidator)(properties.multiModelConfig));\n    return errors.wrap('supplied properties not correct for \"ContainerDefinitionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Model.ContainerDefinition` resource\n *\n * @param properties - the TypeScript properties of a `ContainerDefinitionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Model.ContainerDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelContainerDefinitionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModel_ContainerDefinitionPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerHostname: cdk.stringToCloudFormation(properties.containerHostname),\n        Environment: cdk.objectToCloudFormation(properties.environment),\n        Image: cdk.stringToCloudFormation(properties.image),\n        ImageConfig: cfnModelImageConfigPropertyToCloudFormation(properties.imageConfig),\n        InferenceSpecificationName: cdk.stringToCloudFormation(properties.inferenceSpecificationName),\n        Mode: cdk.stringToCloudFormation(properties.mode),\n        ModelDataUrl: cdk.stringToCloudFormation(properties.modelDataUrl),\n        ModelPackageName: cdk.stringToCloudFormation(properties.modelPackageName),\n        MultiModelConfig: cfnModelMultiModelConfigPropertyToCloudFormation(properties.multiModelConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelContainerDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModel.ContainerDefinitionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.ContainerDefinitionProperty>();\n    ret.addPropertyResult('containerHostname', 'ContainerHostname', properties.ContainerHostname != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerHostname) : undefined);\n    ret.addPropertyResult('environment', 'Environment', properties.Environment != null ? cfn_parse.FromCloudFormation.getAny(properties.Environment) : undefined);\n    ret.addPropertyResult('image', 'Image', properties.Image != null ? cfn_parse.FromCloudFormation.getString(properties.Image) : undefined);\n    ret.addPropertyResult('imageConfig', 'ImageConfig', properties.ImageConfig != null ? CfnModelImageConfigPropertyFromCloudFormation(properties.ImageConfig) : undefined);\n    ret.addPropertyResult('inferenceSpecificationName', 'InferenceSpecificationName', properties.InferenceSpecificationName != null ? cfn_parse.FromCloudFormation.getString(properties.InferenceSpecificationName) : undefined);\n    ret.addPropertyResult('mode', 'Mode', properties.Mode != null ? cfn_parse.FromCloudFormation.getString(properties.Mode) : undefined);\n    ret.addPropertyResult('modelDataUrl', 'ModelDataUrl', properties.ModelDataUrl != null ? cfn_parse.FromCloudFormation.getString(properties.ModelDataUrl) : undefined);\n    ret.addPropertyResult('modelPackageName', 'ModelPackageName', properties.ModelPackageName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelPackageName) : undefined);\n    ret.addPropertyResult('multiModelConfig', 'MultiModelConfig', properties.MultiModelConfig != null ? CfnModelMultiModelConfigPropertyFromCloudFormation(properties.MultiModelConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModel {\n                                                                                                                                                                                                                                                                                                                                                                          \n    export interface ImageConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly repositoryAccessMode: string;\nn        readonly repositoryAuthConfig?: CfnModel.RepositoryAuthConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ImageConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ImageConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModel_ImageConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('repositoryAccessMode', cdk.requiredValidator)(properties.repositoryAccessMode));\n    errors.collect(cdk.propertyValidator('repositoryAccessMode', cdk.validateString)(properties.repositoryAccessMode));\n    errors.collect(cdk.propertyValidator('repositoryAuthConfig', CfnModel_RepositoryAuthConfigPropertyValidator)(properties.repositoryAuthConfig));\n    return errors.wrap('supplied properties not correct for \"ImageConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Model.ImageConfig` resource\n *\n * @param properties - the TypeScript properties of a `ImageConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Model.ImageConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelImageConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModel_ImageConfigPropertyValidator(properties).assertSuccess();\n    return {\n        RepositoryAccessMode: cdk.stringToCloudFormation(properties.repositoryAccessMode),\n        RepositoryAuthConfig: cfnModelRepositoryAuthConfigPropertyToCloudFormation(properties.repositoryAuthConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelImageConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModel.ImageConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.ImageConfigProperty>();\n    ret.addPropertyResult('repositoryAccessMode', 'RepositoryAccessMode', cfn_parse.FromCloudFormation.getString(properties.RepositoryAccessMode));\n    ret.addPropertyResult('repositoryAuthConfig', 'RepositoryAuthConfig', properties.RepositoryAuthConfig != null ? CfnModelRepositoryAuthConfigPropertyFromCloudFormation(properties.RepositoryAuthConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModel {\n                                                                                                                                                                                                                      \n    export interface InferenceExecutionConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly mode: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InferenceExecutionConfigProperty`\n *\n * @param properties - the TypeScript properties of a `InferenceExecutionConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModel_InferenceExecutionConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('mode', cdk.requiredValidator)(properties.mode));\n    errors.collect(cdk.propertyValidator('mode', cdk.validateString)(properties.mode));\n    return errors.wrap('supplied properties not correct for \"InferenceExecutionConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Model.InferenceExecutionConfig` resource\n *\n * @param properties - the TypeScript properties of a `InferenceExecutionConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Model.InferenceExecutionConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelInferenceExecutionConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModel_InferenceExecutionConfigPropertyValidator(properties).assertSuccess();\n    return {\n        Mode: cdk.stringToCloudFormation(properties.mode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelInferenceExecutionConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModel.InferenceExecutionConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.InferenceExecutionConfigProperty>();\n    ret.addPropertyResult('mode', 'Mode', cfn_parse.FromCloudFormation.getString(properties.Mode));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModel {\n                                                                                                                                                                                                                                                                                                        \n    export interface MultiModelConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly modelCacheSetting?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MultiModelConfigProperty`\n *\n * @param properties - the TypeScript properties of a `MultiModelConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModel_MultiModelConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('modelCacheSetting', cdk.validateString)(properties.modelCacheSetting));\n    return errors.wrap('supplied properties not correct for \"MultiModelConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Model.MultiModelConfig` resource\n *\n * @param properties - the TypeScript properties of a `MultiModelConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Model.MultiModelConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelMultiModelConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModel_MultiModelConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ModelCacheSetting: cdk.stringToCloudFormation(properties.modelCacheSetting),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelMultiModelConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModel.MultiModelConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.MultiModelConfigProperty>();\n    ret.addPropertyResult('modelCacheSetting', 'ModelCacheSetting', properties.ModelCacheSetting != null ? cfn_parse.FromCloudFormation.getString(properties.ModelCacheSetting) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModel {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface RepositoryAuthConfigProperty {\nn        readonly repositoryCredentialsProviderArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RepositoryAuthConfigProperty`\n *\n * @param properties - the TypeScript properties of a `RepositoryAuthConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModel_RepositoryAuthConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('repositoryCredentialsProviderArn', cdk.requiredValidator)(properties.repositoryCredentialsProviderArn));\n    errors.collect(cdk.propertyValidator('repositoryCredentialsProviderArn', cdk.validateString)(properties.repositoryCredentialsProviderArn));\n    return errors.wrap('supplied properties not correct for \"RepositoryAuthConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Model.RepositoryAuthConfig` resource\n *\n * @param properties - the TypeScript properties of a `RepositoryAuthConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Model.RepositoryAuthConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelRepositoryAuthConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModel_RepositoryAuthConfigPropertyValidator(properties).assertSuccess();\n    return {\n        RepositoryCredentialsProviderArn: cdk.stringToCloudFormation(properties.repositoryCredentialsProviderArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelRepositoryAuthConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModel.RepositoryAuthConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.RepositoryAuthConfigProperty>();\n    ret.addPropertyResult('repositoryCredentialsProviderArn', 'RepositoryCredentialsProviderArn', cfn_parse.FromCloudFormation.getString(properties.RepositoryCredentialsProviderArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModel {\nn    export interface VpcConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly securityGroupIds: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly subnets: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcConfigProperty`\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModel_VpcConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.requiredValidator)(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnets', cdk.requiredValidator)(properties.subnets));\n    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));\n    return errors.wrap('supplied properties not correct for \"VpcConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Model.VpcConfig` resource\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Model.VpcConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelVpcConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModel_VpcConfigPropertyValidator(properties).assertSuccess();\n    return {\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModel.VpcConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.VpcConfigProperty>();\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds));\n    ret.addPropertyResult('subnets', 'Subnets', cfn_parse.FromCloudFormation.getStringArray(properties.Subnets));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                  \nexport interface CfnModelBiasJobDefinitionProps {\n\n                                                                                                                                                                                                                                                                      \n    readonly jobResources: CfnModelBiasJobDefinition.MonitoringResourcesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                   \n    readonly modelBiasAppSpecification: CfnModelBiasJobDefinition.ModelBiasAppSpecificationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                 \n    readonly modelBiasJobInput: CfnModelBiasJobDefinition.ModelBiasJobInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                       \n    readonly modelBiasJobOutputConfig: CfnModelBiasJobDefinition.MonitoringOutputConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                        \n    readonly roleArn: string;\n\n                                                                                                                                                                                                                                                                                                                        \n    readonly jobDefinitionName?: string;\n\n                                                                                                                                                                                                                                                                         \n    readonly modelBiasBaselineConfig?: CfnModelBiasJobDefinition.ModelBiasBaselineConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                       \n    readonly networkConfig?: CfnModelBiasJobDefinition.NetworkConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                  \n    readonly stoppingCondition?: CfnModelBiasJobDefinition.StoppingConditionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnModelBiasJobDefinitionProps`\n *\n * @param properties - the TypeScript properties of a `CfnModelBiasJobDefinitionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinitionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('jobDefinitionName', cdk.validateString)(properties.jobDefinitionName));\n    errors.collect(cdk.propertyValidator('jobResources', cdk.requiredValidator)(properties.jobResources));\n    errors.collect(cdk.propertyValidator('jobResources', CfnModelBiasJobDefinition_MonitoringResourcesPropertyValidator)(properties.jobResources));\n    errors.collect(cdk.propertyValidator('modelBiasAppSpecification', cdk.requiredValidator)(properties.modelBiasAppSpecification));\n    errors.collect(cdk.propertyValidator('modelBiasAppSpecification', CfnModelBiasJobDefinition_ModelBiasAppSpecificationPropertyValidator)(properties.modelBiasAppSpecification));\n    errors.collect(cdk.propertyValidator('modelBiasBaselineConfig', CfnModelBiasJobDefinition_ModelBiasBaselineConfigPropertyValidator)(properties.modelBiasBaselineConfig));\n    errors.collect(cdk.propertyValidator('modelBiasJobInput', cdk.requiredValidator)(properties.modelBiasJobInput));\n    errors.collect(cdk.propertyValidator('modelBiasJobInput', CfnModelBiasJobDefinition_ModelBiasJobInputPropertyValidator)(properties.modelBiasJobInput));\n    errors.collect(cdk.propertyValidator('modelBiasJobOutputConfig', cdk.requiredValidator)(properties.modelBiasJobOutputConfig));\n    errors.collect(cdk.propertyValidator('modelBiasJobOutputConfig', CfnModelBiasJobDefinition_MonitoringOutputConfigPropertyValidator)(properties.modelBiasJobOutputConfig));\n    errors.collect(cdk.propertyValidator('networkConfig', CfnModelBiasJobDefinition_NetworkConfigPropertyValidator)(properties.networkConfig));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('stoppingCondition', CfnModelBiasJobDefinition_StoppingConditionPropertyValidator)(properties.stoppingCondition));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnModelBiasJobDefinitionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition` resource\n *\n * @param properties - the TypeScript properties of a `CfnModelBiasJobDefinitionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinitionPropsValidator(properties).assertSuccess();\n    return {\n        JobResources: cfnModelBiasJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties.jobResources),\n        ModelBiasAppSpecification: cfnModelBiasJobDefinitionModelBiasAppSpecificationPropertyToCloudFormation(properties.modelBiasAppSpecification),\n        ModelBiasJobInput: cfnModelBiasJobDefinitionModelBiasJobInputPropertyToCloudFormation(properties.modelBiasJobInput),\n        ModelBiasJobOutputConfig: cfnModelBiasJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties.modelBiasJobOutputConfig),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        JobDefinitionName: cdk.stringToCloudFormation(properties.jobDefinitionName),\n        ModelBiasBaselineConfig: cfnModelBiasJobDefinitionModelBiasBaselineConfigPropertyToCloudFormation(properties.modelBiasBaselineConfig),\n        NetworkConfig: cfnModelBiasJobDefinitionNetworkConfigPropertyToCloudFormation(properties.networkConfig),\n        StoppingCondition: cfnModelBiasJobDefinitionStoppingConditionPropertyToCloudFormation(properties.stoppingCondition),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinitionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinitionProps>();\n    ret.addPropertyResult('jobResources', 'JobResources', CfnModelBiasJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties.JobResources));\n    ret.addPropertyResult('modelBiasAppSpecification', 'ModelBiasAppSpecification', CfnModelBiasJobDefinitionModelBiasAppSpecificationPropertyFromCloudFormation(properties.ModelBiasAppSpecification));\n    ret.addPropertyResult('modelBiasJobInput', 'ModelBiasJobInput', CfnModelBiasJobDefinitionModelBiasJobInputPropertyFromCloudFormation(properties.ModelBiasJobInput));\n    ret.addPropertyResult('modelBiasJobOutputConfig', 'ModelBiasJobOutputConfig', CfnModelBiasJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties.ModelBiasJobOutputConfig));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('jobDefinitionName', 'JobDefinitionName', properties.JobDefinitionName != null ? cfn_parse.FromCloudFormation.getString(properties.JobDefinitionName) : undefined);\n    ret.addPropertyResult('modelBiasBaselineConfig', 'ModelBiasBaselineConfig', properties.ModelBiasBaselineConfig != null ? CfnModelBiasJobDefinitionModelBiasBaselineConfigPropertyFromCloudFormation(properties.ModelBiasBaselineConfig) : undefined);\n    ret.addPropertyResult('networkConfig', 'NetworkConfig', properties.NetworkConfig != null ? CfnModelBiasJobDefinitionNetworkConfigPropertyFromCloudFormation(properties.NetworkConfig) : undefined);\n    ret.addPropertyResult('stoppingCondition', 'StoppingCondition', properties.StoppingCondition != null ? CfnModelBiasJobDefinitionStoppingConditionPropertyFromCloudFormation(properties.StoppingCondition) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                \nexport class CfnModelBiasJobDefinition extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::ModelBiasJobDefinition\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModelBiasJobDefinition {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnModelBiasJobDefinitionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnModelBiasJobDefinition(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                 \n    public readonly attrCreationTime: string;\n\n                                                                                                                             \n    public readonly attrJobDefinitionArn: string;\n\n                                                                                                                                                                                                                                                                      \n    public jobResources: CfnModelBiasJobDefinition.MonitoringResourcesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                   \n    public modelBiasAppSpecification: CfnModelBiasJobDefinition.ModelBiasAppSpecificationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                 \n    public modelBiasJobInput: CfnModelBiasJobDefinition.ModelBiasJobInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                       \n    public modelBiasJobOutputConfig: CfnModelBiasJobDefinition.MonitoringOutputConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                        \n    public roleArn: string;\n\n                                                                                                                                                                                                                                                                                                                        \n    public jobDefinitionName: string | undefined;\n\n                                                                                                                                                                                                                                                                         \n    public modelBiasBaselineConfig: CfnModelBiasJobDefinition.ModelBiasBaselineConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                       \n    public networkConfig: CfnModelBiasJobDefinition.NetworkConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                  \n    public stoppingCondition: CfnModelBiasJobDefinition.StoppingConditionProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnModelBiasJobDefinitionProps) {\n        super(scope, id, { type: CfnModelBiasJobDefinition.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'jobResources', this);\n        cdk.requireProperty(props, 'modelBiasAppSpecification', this);\n        cdk.requireProperty(props, 'modelBiasJobInput', this);\n        cdk.requireProperty(props, 'modelBiasJobOutputConfig', this);\n        cdk.requireProperty(props, 'roleArn', this);\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrJobDefinitionArn = cdk.Token.asString(this.getAtt('JobDefinitionArn'));\n\n        this.jobResources = props.jobResources;\n        this.modelBiasAppSpecification = props.modelBiasAppSpecification;\n        this.modelBiasJobInput = props.modelBiasJobInput;\n        this.modelBiasJobOutputConfig = props.modelBiasJobOutputConfig;\n        this.roleArn = props.roleArn;\n        this.jobDefinitionName = props.jobDefinitionName;\n        this.modelBiasBaselineConfig = props.modelBiasBaselineConfig;\n        this.networkConfig = props.networkConfig;\n        this.stoppingCondition = props.stoppingCondition;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::ModelBiasJobDefinition\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnModelBiasJobDefinition.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            jobResources: this.jobResources,\n            modelBiasAppSpecification: this.modelBiasAppSpecification,\n            modelBiasJobInput: this.modelBiasJobInput,\n            modelBiasJobOutputConfig: this.modelBiasJobOutputConfig,\n            roleArn: this.roleArn,\n            jobDefinitionName: this.jobDefinitionName,\n            modelBiasBaselineConfig: this.modelBiasBaselineConfig,\n            networkConfig: this.networkConfig,\n            stoppingCondition: this.stoppingCondition,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnModelBiasJobDefinitionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnModelBiasJobDefinition {\n                                                                                                                                                                                                                            \n    export interface ClusterConfigProperty {\n                                                                                                                                                                                                                                                                                                                                \n        readonly instanceCount: number;\n                                                                                                                                                                                                                                                                                                                              \n        readonly instanceType: string;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly volumeKmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly volumeSizeInGb: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClusterConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ClusterConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_ClusterConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceCount', cdk.requiredValidator)(properties.instanceCount));\n    errors.collect(cdk.propertyValidator('instanceCount', cdk.validateNumber)(properties.instanceCount));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.requiredValidator)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('volumeKmsKeyId', cdk.validateString)(properties.volumeKmsKeyId));\n    errors.collect(cdk.propertyValidator('volumeSizeInGb', cdk.requiredValidator)(properties.volumeSizeInGb));\n    errors.collect(cdk.propertyValidator('volumeSizeInGb', cdk.validateNumber)(properties.volumeSizeInGb));\n    return errors.wrap('supplied properties not correct for \"ClusterConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.ClusterConfig` resource\n *\n * @param properties - the TypeScript properties of a `ClusterConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.ClusterConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionClusterConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_ClusterConfigPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceCount: cdk.numberToCloudFormation(properties.instanceCount),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        VolumeKmsKeyId: cdk.stringToCloudFormation(properties.volumeKmsKeyId),\n        VolumeSizeInGB: cdk.numberToCloudFormation(properties.volumeSizeInGb),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionClusterConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.ClusterConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.ClusterConfigProperty>();\n    ret.addPropertyResult('instanceCount', 'InstanceCount', cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount));\n    ret.addPropertyResult('instanceType', 'InstanceType', cfn_parse.FromCloudFormation.getString(properties.InstanceType));\n    ret.addPropertyResult('volumeKmsKeyId', 'VolumeKmsKeyId', properties.VolumeKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeKmsKeyId) : undefined);\n    ret.addPropertyResult('volumeSizeInGb', 'VolumeSizeInGB', cfn_parse.FromCloudFormation.getNumber(properties.VolumeSizeInGB));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelBiasJobDefinition {\n                                                                                                                                                                                                                                                                                 \n    export interface ConstraintsResourceProperty {\n                                                                                                                                                                                                                                                                                                                    \n        readonly s3Uri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConstraintsResourceProperty`\n *\n * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_ConstraintsResourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"ConstraintsResourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.ConstraintsResource` resource\n *\n * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.ConstraintsResource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionConstraintsResourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_ConstraintsResourcePropertyValidator(properties).assertSuccess();\n    return {\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.ConstraintsResourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.ConstraintsResourceProperty>();\n    ret.addPropertyResult('s3Uri', 'S3Uri', properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelBiasJobDefinition {\n                                                                                                                                                                                                                                                          \n    export interface EndpointInputProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly endTimeOffset?: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly endpointName: string;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly featuresAttribute?: string;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly inferenceAttribute?: string;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly localPath: string;\n                                                                                                                                                                                                                                                                                                                                                         \n        readonly probabilityAttribute?: string;\n                                                                                                                                                                                                                                                                                                                                                              \n        readonly probabilityThresholdAttribute?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly s3DataDistributionType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly s3InputMode?: string;\nn        readonly startTimeOffset?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EndpointInputProperty`\n *\n * @param properties - the TypeScript properties of a `EndpointInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_EndpointInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endTimeOffset', cdk.validateString)(properties.endTimeOffset));\n    errors.collect(cdk.propertyValidator('endpointName', cdk.requiredValidator)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('endpointName', cdk.validateString)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('featuresAttribute', cdk.validateString)(properties.featuresAttribute));\n    errors.collect(cdk.propertyValidator('inferenceAttribute', cdk.validateString)(properties.inferenceAttribute));\n    errors.collect(cdk.propertyValidator('localPath', cdk.requiredValidator)(properties.localPath));\n    errors.collect(cdk.propertyValidator('localPath', cdk.validateString)(properties.localPath));\n    errors.collect(cdk.propertyValidator('probabilityAttribute', cdk.validateString)(properties.probabilityAttribute));\n    errors.collect(cdk.propertyValidator('probabilityThresholdAttribute', cdk.validateNumber)(properties.probabilityThresholdAttribute));\n    errors.collect(cdk.propertyValidator('s3DataDistributionType', cdk.validateString)(properties.s3DataDistributionType));\n    errors.collect(cdk.propertyValidator('s3InputMode', cdk.validateString)(properties.s3InputMode));\n    errors.collect(cdk.propertyValidator('startTimeOffset', cdk.validateString)(properties.startTimeOffset));\n    return errors.wrap('supplied properties not correct for \"EndpointInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.EndpointInput` resource\n *\n * @param properties - the TypeScript properties of a `EndpointInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.EndpointInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionEndpointInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_EndpointInputPropertyValidator(properties).assertSuccess();\n    return {\n        EndTimeOffset: cdk.stringToCloudFormation(properties.endTimeOffset),\n        EndpointName: cdk.stringToCloudFormation(properties.endpointName),\n        FeaturesAttribute: cdk.stringToCloudFormation(properties.featuresAttribute),\n        InferenceAttribute: cdk.stringToCloudFormation(properties.inferenceAttribute),\n        LocalPath: cdk.stringToCloudFormation(properties.localPath),\n        ProbabilityAttribute: cdk.stringToCloudFormation(properties.probabilityAttribute),\n        ProbabilityThresholdAttribute: cdk.numberToCloudFormation(properties.probabilityThresholdAttribute),\n        S3DataDistributionType: cdk.stringToCloudFormation(properties.s3DataDistributionType),\n        S3InputMode: cdk.stringToCloudFormation(properties.s3InputMode),\n        StartTimeOffset: cdk.stringToCloudFormation(properties.startTimeOffset),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionEndpointInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.EndpointInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.EndpointInputProperty>();\n    ret.addPropertyResult('endTimeOffset', 'EndTimeOffset', properties.EndTimeOffset != null ? cfn_parse.FromCloudFormation.getString(properties.EndTimeOffset) : undefined);\n    ret.addPropertyResult('endpointName', 'EndpointName', cfn_parse.FromCloudFormation.getString(properties.EndpointName));\n    ret.addPropertyResult('featuresAttribute', 'FeaturesAttribute', properties.FeaturesAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.FeaturesAttribute) : undefined);\n    ret.addPropertyResult('inferenceAttribute', 'InferenceAttribute', properties.InferenceAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.InferenceAttribute) : undefined);\n    ret.addPropertyResult('localPath', 'LocalPath', cfn_parse.FromCloudFormation.getString(properties.LocalPath));\n    ret.addPropertyResult('probabilityAttribute', 'ProbabilityAttribute', properties.ProbabilityAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ProbabilityAttribute) : undefined);\n    ret.addPropertyResult('probabilityThresholdAttribute', 'ProbabilityThresholdAttribute', properties.ProbabilityThresholdAttribute != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProbabilityThresholdAttribute) : undefined);\n    ret.addPropertyResult('s3DataDistributionType', 'S3DataDistributionType', properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined);\n    ret.addPropertyResult('s3InputMode', 'S3InputMode', properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined);\n    ret.addPropertyResult('startTimeOffset', 'StartTimeOffset', properties.StartTimeOffset != null ? cfn_parse.FromCloudFormation.getString(properties.StartTimeOffset) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelBiasJobDefinition {\n                                                                                                                                                                                                                                                                                                            \n    export interface ModelBiasAppSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly configUri: string;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly environment?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly imageUri: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ModelBiasAppSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `ModelBiasAppSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_ModelBiasAppSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('configUri', cdk.requiredValidator)(properties.configUri));\n    errors.collect(cdk.propertyValidator('configUri', cdk.validateString)(properties.configUri));\n    errors.collect(cdk.propertyValidator('environment', cdk.hashValidator(cdk.validateString))(properties.environment));\n    errors.collect(cdk.propertyValidator('imageUri', cdk.requiredValidator)(properties.imageUri));\n    errors.collect(cdk.propertyValidator('imageUri', cdk.validateString)(properties.imageUri));\n    return errors.wrap('supplied properties not correct for \"ModelBiasAppSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.ModelBiasAppSpecification` resource\n *\n * @param properties - the TypeScript properties of a `ModelBiasAppSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.ModelBiasAppSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionModelBiasAppSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_ModelBiasAppSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        ConfigUri: cdk.stringToCloudFormation(properties.configUri),\n        Environment: cdk.hashMapper(cdk.stringToCloudFormation)(properties.environment),\n        ImageUri: cdk.stringToCloudFormation(properties.imageUri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionModelBiasAppSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.ModelBiasAppSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.ModelBiasAppSpecificationProperty>();\n    ret.addPropertyResult('configUri', 'ConfigUri', cfn_parse.FromCloudFormation.getString(properties.ConfigUri));\n    ret.addPropertyResult('environment', 'Environment', properties.Environment != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Environment) : undefined);\n    ret.addPropertyResult('imageUri', 'ImageUri', cfn_parse.FromCloudFormation.getString(properties.ImageUri));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelBiasJobDefinition {\n                                                                                                                                                                                                                                                                                       \n    export interface ModelBiasBaselineConfigProperty {\n                                                                                                                                                                                                                                                                                                                                 \n        readonly baseliningJobName?: string;\n                                                                                                                                                                                                                                                                                                                                         \n        readonly constraintsResource?: CfnModelBiasJobDefinition.ConstraintsResourceProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ModelBiasBaselineConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ModelBiasBaselineConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_ModelBiasBaselineConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('baseliningJobName', cdk.validateString)(properties.baseliningJobName));\n    errors.collect(cdk.propertyValidator('constraintsResource', CfnModelBiasJobDefinition_ConstraintsResourcePropertyValidator)(properties.constraintsResource));\n    return errors.wrap('supplied properties not correct for \"ModelBiasBaselineConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.ModelBiasBaselineConfig` resource\n *\n * @param properties - the TypeScript properties of a `ModelBiasBaselineConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.ModelBiasBaselineConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionModelBiasBaselineConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_ModelBiasBaselineConfigPropertyValidator(properties).assertSuccess();\n    return {\n        BaseliningJobName: cdk.stringToCloudFormation(properties.baseliningJobName),\n        ConstraintsResource: cfnModelBiasJobDefinitionConstraintsResourcePropertyToCloudFormation(properties.constraintsResource),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionModelBiasBaselineConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.ModelBiasBaselineConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.ModelBiasBaselineConfigProperty>();\n    ret.addPropertyResult('baseliningJobName', 'BaseliningJobName', properties.BaseliningJobName != null ? cfn_parse.FromCloudFormation.getString(properties.BaseliningJobName) : undefined);\n    ret.addPropertyResult('constraintsResource', 'ConstraintsResource', properties.ConstraintsResource != null ? CfnModelBiasJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties.ConstraintsResource) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelBiasJobDefinition {\n                                                                                                                                                                                                                                                               \n    export interface ModelBiasJobInputProperty {\n                                                                                                                                                                                                                                                                                                       \n        readonly endpointInput: CfnModelBiasJobDefinition.EndpointInputProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly groundTruthS3Input: CfnModelBiasJobDefinition.MonitoringGroundTruthS3InputProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ModelBiasJobInputProperty`\n *\n * @param properties - the TypeScript properties of a `ModelBiasJobInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_ModelBiasJobInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointInput', cdk.requiredValidator)(properties.endpointInput));\n    errors.collect(cdk.propertyValidator('endpointInput', CfnModelBiasJobDefinition_EndpointInputPropertyValidator)(properties.endpointInput));\n    errors.collect(cdk.propertyValidator('groundTruthS3Input', cdk.requiredValidator)(properties.groundTruthS3Input));\n    errors.collect(cdk.propertyValidator('groundTruthS3Input', CfnModelBiasJobDefinition_MonitoringGroundTruthS3InputPropertyValidator)(properties.groundTruthS3Input));\n    return errors.wrap('supplied properties not correct for \"ModelBiasJobInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.ModelBiasJobInput` resource\n *\n * @param properties - the TypeScript properties of a `ModelBiasJobInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.ModelBiasJobInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionModelBiasJobInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_ModelBiasJobInputPropertyValidator(properties).assertSuccess();\n    return {\n        EndpointInput: cfnModelBiasJobDefinitionEndpointInputPropertyToCloudFormation(properties.endpointInput),\n        GroundTruthS3Input: cfnModelBiasJobDefinitionMonitoringGroundTruthS3InputPropertyToCloudFormation(properties.groundTruthS3Input),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionModelBiasJobInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.ModelBiasJobInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.ModelBiasJobInputProperty>();\n    ret.addPropertyResult('endpointInput', 'EndpointInput', CfnModelBiasJobDefinitionEndpointInputPropertyFromCloudFormation(properties.EndpointInput));\n    ret.addPropertyResult('groundTruthS3Input', 'GroundTruthS3Input', CfnModelBiasJobDefinitionMonitoringGroundTruthS3InputPropertyFromCloudFormation(properties.GroundTruthS3Input));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelBiasJobDefinition {\n                                                                                                                                                                                                                                                                                                                \n    export interface MonitoringGroundTruthS3InputProperty {\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly s3Uri: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringGroundTruthS3InputProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringGroundTruthS3InputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_MonitoringGroundTruthS3InputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.requiredValidator)(properties.s3Uri));\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"MonitoringGroundTruthS3InputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.MonitoringGroundTruthS3Input` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringGroundTruthS3InputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.MonitoringGroundTruthS3Input` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionMonitoringGroundTruthS3InputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_MonitoringGroundTruthS3InputPropertyValidator(properties).assertSuccess();\n    return {\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionMonitoringGroundTruthS3InputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.MonitoringGroundTruthS3InputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.MonitoringGroundTruthS3InputProperty>();\n    ret.addPropertyResult('s3Uri', 'S3Uri', cfn_parse.FromCloudFormation.getString(properties.S3Uri));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelBiasJobDefinition {\n                                                                                                                                                                                                                                                                       \n    export interface MonitoringOutputProperty {\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly s3Output: CfnModelBiasJobDefinition.S3OutputProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringOutputProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_MonitoringOutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Output', cdk.requiredValidator)(properties.s3Output));\n    errors.collect(cdk.propertyValidator('s3Output', CfnModelBiasJobDefinition_S3OutputPropertyValidator)(properties.s3Output));\n    return errors.wrap('supplied properties not correct for \"MonitoringOutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.MonitoringOutput` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.MonitoringOutput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionMonitoringOutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_MonitoringOutputPropertyValidator(properties).assertSuccess();\n    return {\n        S3Output: cfnModelBiasJobDefinitionS3OutputPropertyToCloudFormation(properties.s3Output),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionMonitoringOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.MonitoringOutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.MonitoringOutputProperty>();\n    ret.addPropertyResult('s3Output', 'S3Output', CfnModelBiasJobDefinitionS3OutputPropertyFromCloudFormation(properties.S3Output));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelBiasJobDefinition {\n                                                                                                                                                                                                                                                                                   \n    export interface MonitoringOutputConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly monitoringOutputs: Array<CfnModelBiasJobDefinition.MonitoringOutputProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringOutputConfigProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_MonitoringOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('monitoringOutputs', cdk.requiredValidator)(properties.monitoringOutputs));\n    errors.collect(cdk.propertyValidator('monitoringOutputs', cdk.listValidator(CfnModelBiasJobDefinition_MonitoringOutputPropertyValidator))(properties.monitoringOutputs));\n    return errors.wrap('supplied properties not correct for \"MonitoringOutputConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.MonitoringOutputConfig` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.MonitoringOutputConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_MonitoringOutputConfigPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        MonitoringOutputs: cdk.listMapper(cfnModelBiasJobDefinitionMonitoringOutputPropertyToCloudFormation)(properties.monitoringOutputs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.MonitoringOutputConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.MonitoringOutputConfigProperty>();\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('monitoringOutputs', 'MonitoringOutputs', cfn_parse.FromCloudFormation.getArray(CfnModelBiasJobDefinitionMonitoringOutputPropertyFromCloudFormation)(properties.MonitoringOutputs));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelBiasJobDefinition {\n                                                                                                                                                                                                                                                                                           \n    export interface MonitoringResourcesProperty {\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly clusterConfig: CfnModelBiasJobDefinition.ClusterConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringResourcesProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_MonitoringResourcesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterConfig', cdk.requiredValidator)(properties.clusterConfig));\n    errors.collect(cdk.propertyValidator('clusterConfig', CfnModelBiasJobDefinition_ClusterConfigPropertyValidator)(properties.clusterConfig));\n    return errors.wrap('supplied properties not correct for \"MonitoringResourcesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.MonitoringResources` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.MonitoringResources` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_MonitoringResourcesPropertyValidator(properties).assertSuccess();\n    return {\n        ClusterConfig: cfnModelBiasJobDefinitionClusterConfigPropertyToCloudFormation(properties.clusterConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.MonitoringResourcesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.MonitoringResourcesProperty>();\n    ret.addPropertyResult('clusterConfig', 'ClusterConfig', CfnModelBiasJobDefinitionClusterConfigPropertyFromCloudFormation(properties.ClusterConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelBiasJobDefinition {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface NetworkConfigProperty {\nn        readonly enableInterContainerTrafficEncryption?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly enableNetworkIsolation?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly vpcConfig?: CfnModelBiasJobDefinition.VpcConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkConfigProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_NetworkConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enableInterContainerTrafficEncryption', cdk.validateBoolean)(properties.enableInterContainerTrafficEncryption));\n    errors.collect(cdk.propertyValidator('enableNetworkIsolation', cdk.validateBoolean)(properties.enableNetworkIsolation));\n    errors.collect(cdk.propertyValidator('vpcConfig', CfnModelBiasJobDefinition_VpcConfigPropertyValidator)(properties.vpcConfig));\n    return errors.wrap('supplied properties not correct for \"NetworkConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.NetworkConfig` resource\n *\n * @param properties - the TypeScript properties of a `NetworkConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.NetworkConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionNetworkConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_NetworkConfigPropertyValidator(properties).assertSuccess();\n    return {\n        EnableInterContainerTrafficEncryption: cdk.booleanToCloudFormation(properties.enableInterContainerTrafficEncryption),\n        EnableNetworkIsolation: cdk.booleanToCloudFormation(properties.enableNetworkIsolation),\n        VpcConfig: cfnModelBiasJobDefinitionVpcConfigPropertyToCloudFormation(properties.vpcConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionNetworkConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.NetworkConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.NetworkConfigProperty>();\n    ret.addPropertyResult('enableInterContainerTrafficEncryption', 'EnableInterContainerTrafficEncryption', properties.EnableInterContainerTrafficEncryption != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableInterContainerTrafficEncryption) : undefined);\n    ret.addPropertyResult('enableNetworkIsolation', 'EnableNetworkIsolation', properties.EnableNetworkIsolation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNetworkIsolation) : undefined);\n    ret.addPropertyResult('vpcConfig', 'VpcConfig', properties.VpcConfig != null ? CfnModelBiasJobDefinitionVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelBiasJobDefinition {\n                                                                                                                                                                                                                                                                                                       \n    export interface S3OutputProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly localPath: string;\n                                                                                                                                                                                                                                                                                                                                                  \n        readonly s3UploadMode?: string;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly s3Uri: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3OutputProperty`\n *\n * @param properties - the TypeScript properties of a `S3OutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_S3OutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('localPath', cdk.requiredValidator)(properties.localPath));\n    errors.collect(cdk.propertyValidator('localPath', cdk.validateString)(properties.localPath));\n    errors.collect(cdk.propertyValidator('s3UploadMode', cdk.validateString)(properties.s3UploadMode));\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.requiredValidator)(properties.s3Uri));\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"S3OutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.S3Output` resource\n *\n * @param properties - the TypeScript properties of a `S3OutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.S3Output` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionS3OutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_S3OutputPropertyValidator(properties).assertSuccess();\n    return {\n        LocalPath: cdk.stringToCloudFormation(properties.localPath),\n        S3UploadMode: cdk.stringToCloudFormation(properties.s3UploadMode),\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionS3OutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.S3OutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.S3OutputProperty>();\n    ret.addPropertyResult('localPath', 'LocalPath', cfn_parse.FromCloudFormation.getString(properties.LocalPath));\n    ret.addPropertyResult('s3UploadMode', 'S3UploadMode', properties.S3UploadMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3UploadMode) : undefined);\n    ret.addPropertyResult('s3Uri', 'S3Uri', cfn_parse.FromCloudFormation.getString(properties.S3Uri));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelBiasJobDefinition {\nn    export interface StoppingConditionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly maxRuntimeInSeconds: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StoppingConditionProperty`\n *\n * @param properties - the TypeScript properties of a `StoppingConditionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_StoppingConditionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxRuntimeInSeconds', cdk.requiredValidator)(properties.maxRuntimeInSeconds));\n    errors.collect(cdk.propertyValidator('maxRuntimeInSeconds', cdk.validateNumber)(properties.maxRuntimeInSeconds));\n    return errors.wrap('supplied properties not correct for \"StoppingConditionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.StoppingCondition` resource\n *\n * @param properties - the TypeScript properties of a `StoppingConditionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.StoppingCondition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionStoppingConditionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_StoppingConditionPropertyValidator(properties).assertSuccess();\n    return {\n        MaxRuntimeInSeconds: cdk.numberToCloudFormation(properties.maxRuntimeInSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionStoppingConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.StoppingConditionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.StoppingConditionProperty>();\n    ret.addPropertyResult('maxRuntimeInSeconds', 'MaxRuntimeInSeconds', cfn_parse.FromCloudFormation.getNumber(properties.MaxRuntimeInSeconds));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelBiasJobDefinition {\nn    export interface VpcConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly securityGroupIds: string[];\nn        readonly subnets: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcConfigProperty`\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelBiasJobDefinition_VpcConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.requiredValidator)(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnets', cdk.requiredValidator)(properties.subnets));\n    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));\n    return errors.wrap('supplied properties not correct for \"VpcConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.VpcConfig` resource\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelBiasJobDefinition.VpcConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelBiasJobDefinitionVpcConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelBiasJobDefinition_VpcConfigPropertyValidator(properties).assertSuccess();\n    return {\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelBiasJobDefinitionVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.VpcConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.VpcConfigProperty>();\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds));\n    ret.addPropertyResult('subnets', 'Subnets', cfn_parse.FromCloudFormation.getStringArray(properties.Subnets));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                      \nexport interface CfnModelExplainabilityJobDefinitionProps {\n\n                                                                                                                                                                                                                                                                                          \n    readonly jobResources: CfnModelExplainabilityJobDefinition.MonitoringResourcesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                           \n    readonly modelExplainabilityAppSpecification: CfnModelExplainabilityJobDefinition.ModelExplainabilityAppSpecificationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                         \n    readonly modelExplainabilityJobInput: CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                     \n    readonly modelExplainabilityJobOutputConfig: CfnModelExplainabilityJobDefinition.MonitoringOutputConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                            \n    readonly roleArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                            \n    readonly jobDefinitionName?: string;\n\n                                                                                                                                                                                                                                                                                                                 \n    readonly modelExplainabilityBaselineConfig?: CfnModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                     \n    readonly networkConfig?: CfnModelExplainabilityJobDefinition.NetworkConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                           \n    readonly stoppingCondition?: CfnModelExplainabilityJobDefinition.StoppingConditionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnModelExplainabilityJobDefinitionProps`\n *\n * @param properties - the TypeScript properties of a `CfnModelExplainabilityJobDefinitionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinitionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('jobDefinitionName', cdk.validateString)(properties.jobDefinitionName));\n    errors.collect(cdk.propertyValidator('jobResources', cdk.requiredValidator)(properties.jobResources));\n    errors.collect(cdk.propertyValidator('jobResources', CfnModelExplainabilityJobDefinition_MonitoringResourcesPropertyValidator)(properties.jobResources));\n    errors.collect(cdk.propertyValidator('modelExplainabilityAppSpecification', cdk.requiredValidator)(properties.modelExplainabilityAppSpecification));\n    errors.collect(cdk.propertyValidator('modelExplainabilityAppSpecification', CfnModelExplainabilityJobDefinition_ModelExplainabilityAppSpecificationPropertyValidator)(properties.modelExplainabilityAppSpecification));\n    errors.collect(cdk.propertyValidator('modelExplainabilityBaselineConfig', CfnModelExplainabilityJobDefinition_ModelExplainabilityBaselineConfigPropertyValidator)(properties.modelExplainabilityBaselineConfig));\n    errors.collect(cdk.propertyValidator('modelExplainabilityJobInput', cdk.requiredValidator)(properties.modelExplainabilityJobInput));\n    errors.collect(cdk.propertyValidator('modelExplainabilityJobInput', CfnModelExplainabilityJobDefinition_ModelExplainabilityJobInputPropertyValidator)(properties.modelExplainabilityJobInput));\n    errors.collect(cdk.propertyValidator('modelExplainabilityJobOutputConfig', cdk.requiredValidator)(properties.modelExplainabilityJobOutputConfig));\n    errors.collect(cdk.propertyValidator('modelExplainabilityJobOutputConfig', CfnModelExplainabilityJobDefinition_MonitoringOutputConfigPropertyValidator)(properties.modelExplainabilityJobOutputConfig));\n    errors.collect(cdk.propertyValidator('networkConfig', CfnModelExplainabilityJobDefinition_NetworkConfigPropertyValidator)(properties.networkConfig));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('stoppingCondition', CfnModelExplainabilityJobDefinition_StoppingConditionPropertyValidator)(properties.stoppingCondition));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnModelExplainabilityJobDefinitionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition` resource\n *\n * @param properties - the TypeScript properties of a `CfnModelExplainabilityJobDefinitionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinitionPropsValidator(properties).assertSuccess();\n    return {\n        JobResources: cfnModelExplainabilityJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties.jobResources),\n        ModelExplainabilityAppSpecification: cfnModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationPropertyToCloudFormation(properties.modelExplainabilityAppSpecification),\n        ModelExplainabilityJobInput: cfnModelExplainabilityJobDefinitionModelExplainabilityJobInputPropertyToCloudFormation(properties.modelExplainabilityJobInput),\n        ModelExplainabilityJobOutputConfig: cfnModelExplainabilityJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties.modelExplainabilityJobOutputConfig),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        JobDefinitionName: cdk.stringToCloudFormation(properties.jobDefinitionName),\n        ModelExplainabilityBaselineConfig: cfnModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigPropertyToCloudFormation(properties.modelExplainabilityBaselineConfig),\n        NetworkConfig: cfnModelExplainabilityJobDefinitionNetworkConfigPropertyToCloudFormation(properties.networkConfig),\n        StoppingCondition: cfnModelExplainabilityJobDefinitionStoppingConditionPropertyToCloudFormation(properties.stoppingCondition),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinitionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinitionProps>();\n    ret.addPropertyResult('jobResources', 'JobResources', CfnModelExplainabilityJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties.JobResources));\n    ret.addPropertyResult('modelExplainabilityAppSpecification', 'ModelExplainabilityAppSpecification', CfnModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationPropertyFromCloudFormation(properties.ModelExplainabilityAppSpecification));\n    ret.addPropertyResult('modelExplainabilityJobInput', 'ModelExplainabilityJobInput', CfnModelExplainabilityJobDefinitionModelExplainabilityJobInputPropertyFromCloudFormation(properties.ModelExplainabilityJobInput));\n    ret.addPropertyResult('modelExplainabilityJobOutputConfig', 'ModelExplainabilityJobOutputConfig', CfnModelExplainabilityJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties.ModelExplainabilityJobOutputConfig));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('jobDefinitionName', 'JobDefinitionName', properties.JobDefinitionName != null ? cfn_parse.FromCloudFormation.getString(properties.JobDefinitionName) : undefined);\n    ret.addPropertyResult('modelExplainabilityBaselineConfig', 'ModelExplainabilityBaselineConfig', properties.ModelExplainabilityBaselineConfig != null ? CfnModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigPropertyFromCloudFormation(properties.ModelExplainabilityBaselineConfig) : undefined);\n    ret.addPropertyResult('networkConfig', 'NetworkConfig', properties.NetworkConfig != null ? CfnModelExplainabilityJobDefinitionNetworkConfigPropertyFromCloudFormation(properties.NetworkConfig) : undefined);\n    ret.addPropertyResult('stoppingCondition', 'StoppingCondition', properties.StoppingCondition != null ? CfnModelExplainabilityJobDefinitionStoppingConditionPropertyFromCloudFormation(properties.StoppingCondition) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                        \nexport class CfnModelExplainabilityJobDefinition extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::ModelExplainabilityJobDefinition\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModelExplainabilityJobDefinition {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnModelExplainabilityJobDefinitionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnModelExplainabilityJobDefinition(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                 \n    public readonly attrCreationTime: string;\n\n                                                                                                                             \n    public readonly attrJobDefinitionArn: string;\n\n                                                                                                                                                                                                                                                                                          \n    public jobResources: CfnModelExplainabilityJobDefinition.MonitoringResourcesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                           \n    public modelExplainabilityAppSpecification: CfnModelExplainabilityJobDefinition.ModelExplainabilityAppSpecificationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                         \n    public modelExplainabilityJobInput: CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                     \n    public modelExplainabilityJobOutputConfig: CfnModelExplainabilityJobDefinition.MonitoringOutputConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                            \n    public roleArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                            \n    public jobDefinitionName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                 \n    public modelExplainabilityBaselineConfig: CfnModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                     \n    public networkConfig: CfnModelExplainabilityJobDefinition.NetworkConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                           \n    public stoppingCondition: CfnModelExplainabilityJobDefinition.StoppingConditionProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnModelExplainabilityJobDefinitionProps) {\n        super(scope, id, { type: CfnModelExplainabilityJobDefinition.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'jobResources', this);\n        cdk.requireProperty(props, 'modelExplainabilityAppSpecification', this);\n        cdk.requireProperty(props, 'modelExplainabilityJobInput', this);\n        cdk.requireProperty(props, 'modelExplainabilityJobOutputConfig', this);\n        cdk.requireProperty(props, 'roleArn', this);\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrJobDefinitionArn = cdk.Token.asString(this.getAtt('JobDefinitionArn'));\n\n        this.jobResources = props.jobResources;\n        this.modelExplainabilityAppSpecification = props.modelExplainabilityAppSpecification;\n        this.modelExplainabilityJobInput = props.modelExplainabilityJobInput;\n        this.modelExplainabilityJobOutputConfig = props.modelExplainabilityJobOutputConfig;\n        this.roleArn = props.roleArn;\n        this.jobDefinitionName = props.jobDefinitionName;\n        this.modelExplainabilityBaselineConfig = props.modelExplainabilityBaselineConfig;\n        this.networkConfig = props.networkConfig;\n        this.stoppingCondition = props.stoppingCondition;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::ModelExplainabilityJobDefinition\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnModelExplainabilityJobDefinition.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            jobResources: this.jobResources,\n            modelExplainabilityAppSpecification: this.modelExplainabilityAppSpecification,\n            modelExplainabilityJobInput: this.modelExplainabilityJobInput,\n            modelExplainabilityJobOutputConfig: this.modelExplainabilityJobOutputConfig,\n            roleArn: this.roleArn,\n            jobDefinitionName: this.jobDefinitionName,\n            modelExplainabilityBaselineConfig: this.modelExplainabilityBaselineConfig,\n            networkConfig: this.networkConfig,\n            stoppingCondition: this.stoppingCondition,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnModelExplainabilityJobDefinitionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnModelExplainabilityJobDefinition {\n                                                                                                                                                                                                                                                                                                                  \n    export interface ClusterConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly instanceCount: number;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly instanceType: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly volumeKmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly volumeSizeInGb: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClusterConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ClusterConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinition_ClusterConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceCount', cdk.requiredValidator)(properties.instanceCount));\n    errors.collect(cdk.propertyValidator('instanceCount', cdk.validateNumber)(properties.instanceCount));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.requiredValidator)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('volumeKmsKeyId', cdk.validateString)(properties.volumeKmsKeyId));\n    errors.collect(cdk.propertyValidator('volumeSizeInGb', cdk.requiredValidator)(properties.volumeSizeInGb));\n    errors.collect(cdk.propertyValidator('volumeSizeInGb', cdk.validateNumber)(properties.volumeSizeInGb));\n    return errors.wrap('supplied properties not correct for \"ClusterConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.ClusterConfig` resource\n *\n * @param properties - the TypeScript properties of a `ClusterConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.ClusterConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionClusterConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinition_ClusterConfigPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceCount: cdk.numberToCloudFormation(properties.instanceCount),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        VolumeKmsKeyId: cdk.stringToCloudFormation(properties.volumeKmsKeyId),\n        VolumeSizeInGB: cdk.numberToCloudFormation(properties.volumeSizeInGb),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionClusterConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.ClusterConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.ClusterConfigProperty>();\n    ret.addPropertyResult('instanceCount', 'InstanceCount', cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount));\n    ret.addPropertyResult('instanceType', 'InstanceType', cfn_parse.FromCloudFormation.getString(properties.InstanceType));\n    ret.addPropertyResult('volumeKmsKeyId', 'VolumeKmsKeyId', properties.VolumeKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeKmsKeyId) : undefined);\n    ret.addPropertyResult('volumeSizeInGb', 'VolumeSizeInGB', cfn_parse.FromCloudFormation.getNumber(properties.VolumeSizeInGB));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelExplainabilityJobDefinition {\n                                                                                                                                                                                                                                                                                           \n    export interface ConstraintsResourceProperty {\n                                                                                                                                                                                                                                                                                                                                        \n        readonly s3Uri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConstraintsResourceProperty`\n *\n * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinition_ConstraintsResourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"ConstraintsResourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.ConstraintsResource` resource\n *\n * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.ConstraintsResource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionConstraintsResourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinition_ConstraintsResourcePropertyValidator(properties).assertSuccess();\n    return {\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.ConstraintsResourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.ConstraintsResourceProperty>();\n    ret.addPropertyResult('s3Uri', 'S3Uri', properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelExplainabilityJobDefinition {\n                                                                                                                                                                                                                                                                    \n    export interface EndpointInputProperty {\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly endpointName: string;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly featuresAttribute?: string;\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly inferenceAttribute?: string;\n                                                                                                                                                                                                                                                                                                                                                              \n        readonly localPath: string;\n                                                                                                                                                                                                                                                                                                                                                                             \n        readonly probabilityAttribute?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly s3DataDistributionType?: string;\nn        readonly s3InputMode?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EndpointInputProperty`\n *\n * @param properties - the TypeScript properties of a `EndpointInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinition_EndpointInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointName', cdk.requiredValidator)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('endpointName', cdk.validateString)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('featuresAttribute', cdk.validateString)(properties.featuresAttribute));\n    errors.collect(cdk.propertyValidator('inferenceAttribute', cdk.validateString)(properties.inferenceAttribute));\n    errors.collect(cdk.propertyValidator('localPath', cdk.requiredValidator)(properties.localPath));\n    errors.collect(cdk.propertyValidator('localPath', cdk.validateString)(properties.localPath));\n    errors.collect(cdk.propertyValidator('probabilityAttribute', cdk.validateString)(properties.probabilityAttribute));\n    errors.collect(cdk.propertyValidator('s3DataDistributionType', cdk.validateString)(properties.s3DataDistributionType));\n    errors.collect(cdk.propertyValidator('s3InputMode', cdk.validateString)(properties.s3InputMode));\n    return errors.wrap('supplied properties not correct for \"EndpointInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.EndpointInput` resource\n *\n * @param properties - the TypeScript properties of a `EndpointInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.EndpointInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionEndpointInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinition_EndpointInputPropertyValidator(properties).assertSuccess();\n    return {\n        EndpointName: cdk.stringToCloudFormation(properties.endpointName),\n        FeaturesAttribute: cdk.stringToCloudFormation(properties.featuresAttribute),\n        InferenceAttribute: cdk.stringToCloudFormation(properties.inferenceAttribute),\n        LocalPath: cdk.stringToCloudFormation(properties.localPath),\n        ProbabilityAttribute: cdk.stringToCloudFormation(properties.probabilityAttribute),\n        S3DataDistributionType: cdk.stringToCloudFormation(properties.s3DataDistributionType),\n        S3InputMode: cdk.stringToCloudFormation(properties.s3InputMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionEndpointInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.EndpointInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.EndpointInputProperty>();\n    ret.addPropertyResult('endpointName', 'EndpointName', cfn_parse.FromCloudFormation.getString(properties.EndpointName));\n    ret.addPropertyResult('featuresAttribute', 'FeaturesAttribute', properties.FeaturesAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.FeaturesAttribute) : undefined);\n    ret.addPropertyResult('inferenceAttribute', 'InferenceAttribute', properties.InferenceAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.InferenceAttribute) : undefined);\n    ret.addPropertyResult('localPath', 'LocalPath', cfn_parse.FromCloudFormation.getString(properties.LocalPath));\n    ret.addPropertyResult('probabilityAttribute', 'ProbabilityAttribute', properties.ProbabilityAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ProbabilityAttribute) : undefined);\n    ret.addPropertyResult('s3DataDistributionType', 'S3DataDistributionType', properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined);\n    ret.addPropertyResult('s3InputMode', 'S3InputMode', properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelExplainabilityJobDefinition {\n                                                                                                                                                                                                                                                                                                                                          \n    export interface ModelExplainabilityAppSpecificationProperty {\nn        readonly configUri: string;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly environment?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly imageUri: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ModelExplainabilityAppSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `ModelExplainabilityAppSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinition_ModelExplainabilityAppSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('configUri', cdk.requiredValidator)(properties.configUri));\n    errors.collect(cdk.propertyValidator('configUri', cdk.validateString)(properties.configUri));\n    errors.collect(cdk.propertyValidator('environment', cdk.hashValidator(cdk.validateString))(properties.environment));\n    errors.collect(cdk.propertyValidator('imageUri', cdk.requiredValidator)(properties.imageUri));\n    errors.collect(cdk.propertyValidator('imageUri', cdk.validateString)(properties.imageUri));\n    return errors.wrap('supplied properties not correct for \"ModelExplainabilityAppSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.ModelExplainabilityAppSpecification` resource\n *\n * @param properties - the TypeScript properties of a `ModelExplainabilityAppSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.ModelExplainabilityAppSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinition_ModelExplainabilityAppSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        ConfigUri: cdk.stringToCloudFormation(properties.configUri),\n        Environment: cdk.hashMapper(cdk.stringToCloudFormation)(properties.environment),\n        ImageUri: cdk.stringToCloudFormation(properties.imageUri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.ModelExplainabilityAppSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.ModelExplainabilityAppSpecificationProperty>();\n    ret.addPropertyResult('configUri', 'ConfigUri', cfn_parse.FromCloudFormation.getString(properties.ConfigUri));\n    ret.addPropertyResult('environment', 'Environment', properties.Environment != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Environment) : undefined);\n    ret.addPropertyResult('imageUri', 'ImageUri', cfn_parse.FromCloudFormation.getString(properties.ImageUri));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelExplainabilityJobDefinition {\n                                                                                                                                                                                                                                                                                                                     \n    export interface ModelExplainabilityBaselineConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly baseliningJobName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly constraintsResource?: CfnModelExplainabilityJobDefinition.ConstraintsResourceProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ModelExplainabilityBaselineConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ModelExplainabilityBaselineConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinition_ModelExplainabilityBaselineConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('baseliningJobName', cdk.validateString)(properties.baseliningJobName));\n    errors.collect(cdk.propertyValidator('constraintsResource', CfnModelExplainabilityJobDefinition_ConstraintsResourcePropertyValidator)(properties.constraintsResource));\n    return errors.wrap('supplied properties not correct for \"ModelExplainabilityBaselineConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfig` resource\n *\n * @param properties - the TypeScript properties of a `ModelExplainabilityBaselineConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinition_ModelExplainabilityBaselineConfigPropertyValidator(properties).assertSuccess();\n    return {\n        BaseliningJobName: cdk.stringToCloudFormation(properties.baseliningJobName),\n        ConstraintsResource: cfnModelExplainabilityJobDefinitionConstraintsResourcePropertyToCloudFormation(properties.constraintsResource),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfigProperty>();\n    ret.addPropertyResult('baseliningJobName', 'BaseliningJobName', properties.BaseliningJobName != null ? cfn_parse.FromCloudFormation.getString(properties.BaseliningJobName) : undefined);\n    ret.addPropertyResult('constraintsResource', 'ConstraintsResource', properties.ConstraintsResource != null ? CfnModelExplainabilityJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties.ConstraintsResource) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelExplainabilityJobDefinition {\n                                                                                                                                                                                                                                                                                             \n    export interface ModelExplainabilityJobInputProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly endpointInput: CfnModelExplainabilityJobDefinition.EndpointInputProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ModelExplainabilityJobInputProperty`\n *\n * @param properties - the TypeScript properties of a `ModelExplainabilityJobInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinition_ModelExplainabilityJobInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointInput', cdk.requiredValidator)(properties.endpointInput));\n    errors.collect(cdk.propertyValidator('endpointInput', CfnModelExplainabilityJobDefinition_EndpointInputPropertyValidator)(properties.endpointInput));\n    return errors.wrap('supplied properties not correct for \"ModelExplainabilityJobInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.ModelExplainabilityJobInput` resource\n *\n * @param properties - the TypeScript properties of a `ModelExplainabilityJobInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.ModelExplainabilityJobInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionModelExplainabilityJobInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinition_ModelExplainabilityJobInputPropertyValidator(properties).assertSuccess();\n    return {\n        EndpointInput: cfnModelExplainabilityJobDefinitionEndpointInputPropertyToCloudFormation(properties.endpointInput),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionModelExplainabilityJobInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty>();\n    ret.addPropertyResult('endpointInput', 'EndpointInput', CfnModelExplainabilityJobDefinitionEndpointInputPropertyFromCloudFormation(properties.EndpointInput));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelExplainabilityJobDefinition {\n                                                                                                                                                                                                                                                                                 \n    export interface MonitoringOutputProperty {\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly s3Output: CfnModelExplainabilityJobDefinition.S3OutputProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringOutputProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinition_MonitoringOutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Output', cdk.requiredValidator)(properties.s3Output));\n    errors.collect(cdk.propertyValidator('s3Output', CfnModelExplainabilityJobDefinition_S3OutputPropertyValidator)(properties.s3Output));\n    return errors.wrap('supplied properties not correct for \"MonitoringOutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.MonitoringOutput` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.MonitoringOutput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionMonitoringOutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinition_MonitoringOutputPropertyValidator(properties).assertSuccess();\n    return {\n        S3Output: cfnModelExplainabilityJobDefinitionS3OutputPropertyToCloudFormation(properties.s3Output),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionMonitoringOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.MonitoringOutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.MonitoringOutputProperty>();\n    ret.addPropertyResult('s3Output', 'S3Output', CfnModelExplainabilityJobDefinitionS3OutputPropertyFromCloudFormation(properties.S3Output));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelExplainabilityJobDefinition {\n                                                                                                                                                                                                                                                                                             \n    export interface MonitoringOutputConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly monitoringOutputs: Array<CfnModelExplainabilityJobDefinition.MonitoringOutputProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringOutputConfigProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinition_MonitoringOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('monitoringOutputs', cdk.requiredValidator)(properties.monitoringOutputs));\n    errors.collect(cdk.propertyValidator('monitoringOutputs', cdk.listValidator(CfnModelExplainabilityJobDefinition_MonitoringOutputPropertyValidator))(properties.monitoringOutputs));\n    return errors.wrap('supplied properties not correct for \"MonitoringOutputConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.MonitoringOutputConfig` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.MonitoringOutputConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinition_MonitoringOutputConfigPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        MonitoringOutputs: cdk.listMapper(cfnModelExplainabilityJobDefinitionMonitoringOutputPropertyToCloudFormation)(properties.monitoringOutputs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.MonitoringOutputConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.MonitoringOutputConfigProperty>();\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('monitoringOutputs', 'MonitoringOutputs', cfn_parse.FromCloudFormation.getArray(CfnModelExplainabilityJobDefinitionMonitoringOutputPropertyFromCloudFormation)(properties.MonitoringOutputs));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelExplainabilityJobDefinition {\n                                                                                                                                                                                                                                                                                                     \n    export interface MonitoringResourcesProperty {\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly clusterConfig: CfnModelExplainabilityJobDefinition.ClusterConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringResourcesProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinition_MonitoringResourcesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterConfig', cdk.requiredValidator)(properties.clusterConfig));\n    errors.collect(cdk.propertyValidator('clusterConfig', CfnModelExplainabilityJobDefinition_ClusterConfigPropertyValidator)(properties.clusterConfig));\n    return errors.wrap('supplied properties not correct for \"MonitoringResourcesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.MonitoringResources` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.MonitoringResources` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinition_MonitoringResourcesPropertyValidator(properties).assertSuccess();\n    return {\n        ClusterConfig: cfnModelExplainabilityJobDefinitionClusterConfigPropertyToCloudFormation(properties.clusterConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.MonitoringResourcesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.MonitoringResourcesProperty>();\n    ret.addPropertyResult('clusterConfig', 'ClusterConfig', CfnModelExplainabilityJobDefinitionClusterConfigPropertyFromCloudFormation(properties.ClusterConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelExplainabilityJobDefinition {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    export interface NetworkConfigProperty {\nn        readonly enableInterContainerTrafficEncryption?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly enableNetworkIsolation?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly vpcConfig?: CfnModelExplainabilityJobDefinition.VpcConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkConfigProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinition_NetworkConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enableInterContainerTrafficEncryption', cdk.validateBoolean)(properties.enableInterContainerTrafficEncryption));\n    errors.collect(cdk.propertyValidator('enableNetworkIsolation', cdk.validateBoolean)(properties.enableNetworkIsolation));\n    errors.collect(cdk.propertyValidator('vpcConfig', CfnModelExplainabilityJobDefinition_VpcConfigPropertyValidator)(properties.vpcConfig));\n    return errors.wrap('supplied properties not correct for \"NetworkConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.NetworkConfig` resource\n *\n * @param properties - the TypeScript properties of a `NetworkConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.NetworkConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionNetworkConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinition_NetworkConfigPropertyValidator(properties).assertSuccess();\n    return {\n        EnableInterContainerTrafficEncryption: cdk.booleanToCloudFormation(properties.enableInterContainerTrafficEncryption),\n        EnableNetworkIsolation: cdk.booleanToCloudFormation(properties.enableNetworkIsolation),\n        VpcConfig: cfnModelExplainabilityJobDefinitionVpcConfigPropertyToCloudFormation(properties.vpcConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionNetworkConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.NetworkConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.NetworkConfigProperty>();\n    ret.addPropertyResult('enableInterContainerTrafficEncryption', 'EnableInterContainerTrafficEncryption', properties.EnableInterContainerTrafficEncryption != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableInterContainerTrafficEncryption) : undefined);\n    ret.addPropertyResult('enableNetworkIsolation', 'EnableNetworkIsolation', properties.EnableNetworkIsolation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNetworkIsolation) : undefined);\n    ret.addPropertyResult('vpcConfig', 'VpcConfig', properties.VpcConfig != null ? CfnModelExplainabilityJobDefinitionVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelExplainabilityJobDefinition {\n                                                                                                                                                                                                                                                                                                                 \n    export interface S3OutputProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly localPath: string;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly s3UploadMode?: string;\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly s3Uri: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3OutputProperty`\n *\n * @param properties - the TypeScript properties of a `S3OutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinition_S3OutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('localPath', cdk.requiredValidator)(properties.localPath));\n    errors.collect(cdk.propertyValidator('localPath', cdk.validateString)(properties.localPath));\n    errors.collect(cdk.propertyValidator('s3UploadMode', cdk.validateString)(properties.s3UploadMode));\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.requiredValidator)(properties.s3Uri));\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"S3OutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.S3Output` resource\n *\n * @param properties - the TypeScript properties of a `S3OutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.S3Output` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionS3OutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinition_S3OutputPropertyValidator(properties).assertSuccess();\n    return {\n        LocalPath: cdk.stringToCloudFormation(properties.localPath),\n        S3UploadMode: cdk.stringToCloudFormation(properties.s3UploadMode),\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionS3OutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.S3OutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.S3OutputProperty>();\n    ret.addPropertyResult('localPath', 'LocalPath', cfn_parse.FromCloudFormation.getString(properties.LocalPath));\n    ret.addPropertyResult('s3UploadMode', 'S3UploadMode', properties.S3UploadMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3UploadMode) : undefined);\n    ret.addPropertyResult('s3Uri', 'S3Uri', cfn_parse.FromCloudFormation.getString(properties.S3Uri));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelExplainabilityJobDefinition {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    export interface StoppingConditionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly maxRuntimeInSeconds: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StoppingConditionProperty`\n *\n * @param properties - the TypeScript properties of a `StoppingConditionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinition_StoppingConditionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxRuntimeInSeconds', cdk.requiredValidator)(properties.maxRuntimeInSeconds));\n    errors.collect(cdk.propertyValidator('maxRuntimeInSeconds', cdk.validateNumber)(properties.maxRuntimeInSeconds));\n    return errors.wrap('supplied properties not correct for \"StoppingConditionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.StoppingCondition` resource\n *\n * @param properties - the TypeScript properties of a `StoppingConditionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.StoppingCondition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionStoppingConditionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinition_StoppingConditionPropertyValidator(properties).assertSuccess();\n    return {\n        MaxRuntimeInSeconds: cdk.numberToCloudFormation(properties.maxRuntimeInSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionStoppingConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.StoppingConditionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.StoppingConditionProperty>();\n    ret.addPropertyResult('maxRuntimeInSeconds', 'MaxRuntimeInSeconds', cfn_parse.FromCloudFormation.getNumber(properties.MaxRuntimeInSeconds));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelExplainabilityJobDefinition {\nn    export interface VpcConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly securityGroupIds: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly subnets: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcConfigProperty`\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelExplainabilityJobDefinition_VpcConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.requiredValidator)(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnets', cdk.requiredValidator)(properties.subnets));\n    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));\n    return errors.wrap('supplied properties not correct for \"VpcConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.VpcConfig` resource\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelExplainabilityJobDefinition.VpcConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelExplainabilityJobDefinitionVpcConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelExplainabilityJobDefinition_VpcConfigPropertyValidator(properties).assertSuccess();\n    return {\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelExplainabilityJobDefinitionVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.VpcConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.VpcConfigProperty>();\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds));\n    ret.addPropertyResult('subnets', 'Subnets', cfn_parse.FromCloudFormation.getStringArray(properties.Subnets));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                        \nexport interface CfnModelPackageGroupProps {\n\n                                                                                                                                                                                                                                         \n    readonly modelPackageGroupName: string;\n\n                                                                                                                                                                                                                                                        \n    readonly modelPackageGroupDescription?: string;\n\nn    readonly modelPackageGroupPolicy?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnModelPackageGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnModelPackageGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelPackageGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('modelPackageGroupDescription', cdk.validateString)(properties.modelPackageGroupDescription));\n    errors.collect(cdk.propertyValidator('modelPackageGroupName', cdk.requiredValidator)(properties.modelPackageGroupName));\n    errors.collect(cdk.propertyValidator('modelPackageGroupName', cdk.validateString)(properties.modelPackageGroupName));\n    errors.collect(cdk.propertyValidator('modelPackageGroupPolicy', cdk.validateObject)(properties.modelPackageGroupPolicy));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnModelPackageGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelPackageGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnModelPackageGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelPackageGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelPackageGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelPackageGroupPropsValidator(properties).assertSuccess();\n    return {\n        ModelPackageGroupName: cdk.stringToCloudFormation(properties.modelPackageGroupName),\n        ModelPackageGroupDescription: cdk.stringToCloudFormation(properties.modelPackageGroupDescription),\n        ModelPackageGroupPolicy: cdk.objectToCloudFormation(properties.modelPackageGroupPolicy),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelPackageGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackageGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackageGroupProps>();\n    ret.addPropertyResult('modelPackageGroupName', 'ModelPackageGroupName', cfn_parse.FromCloudFormation.getString(properties.ModelPackageGroupName));\n    ret.addPropertyResult('modelPackageGroupDescription', 'ModelPackageGroupDescription', properties.ModelPackageGroupDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ModelPackageGroupDescription) : undefined);\n    ret.addPropertyResult('modelPackageGroupPolicy', 'ModelPackageGroupPolicy', properties.ModelPackageGroupPolicy != null ? cfn_parse.FromCloudFormation.getAny(properties.ModelPackageGroupPolicy) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                       \nexport class CfnModelPackageGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::ModelPackageGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModelPackageGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnModelPackageGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnModelPackageGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                              \n    public readonly attrCreationTime: string;\n\n                                                                                                                              \n    public readonly attrModelPackageGroupArn: string;\n\n                                                                                                             \n    public readonly attrModelPackageGroupStatus: string;\n\n                                                                                                                                                                                                                                         \n    public modelPackageGroupName: string;\n\n                                                                                                                                                                                                                                                        \n    public modelPackageGroupDescription: string | undefined;\n\nn    public modelPackageGroupPolicy: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnModelPackageGroupProps) {\n        super(scope, id, { type: CfnModelPackageGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'modelPackageGroupName', this);\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrModelPackageGroupArn = cdk.Token.asString(this.getAtt('ModelPackageGroupArn'));\n        this.attrModelPackageGroupStatus = cdk.Token.asString(this.getAtt('ModelPackageGroupStatus'));\n\n        this.modelPackageGroupName = props.modelPackageGroupName;\n        this.modelPackageGroupDescription = props.modelPackageGroupDescription;\n        this.modelPackageGroupPolicy = props.modelPackageGroupPolicy;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::ModelPackageGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnModelPackageGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            modelPackageGroupName: this.modelPackageGroupName,\n            modelPackageGroupDescription: this.modelPackageGroupDescription,\n            modelPackageGroupPolicy: this.modelPackageGroupPolicy,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnModelPackageGroupPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                        \nexport interface CfnModelQualityJobDefinitionProps {\n\n                                                                                                                                                                                                                                                                            \n    readonly jobResources: CfnModelQualityJobDefinition.MonitoringResourcesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                            \n    readonly modelQualityAppSpecification: CfnModelQualityJobDefinition.ModelQualityAppSpecificationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                       \n    readonly modelQualityJobInput: CfnModelQualityJobDefinition.ModelQualityJobInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                \n    readonly modelQualityJobOutputConfig: CfnModelQualityJobDefinition.MonitoringOutputConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                              \n    readonly roleArn: string;\n\n                                                                                                                                                                                                                                                                   \n    readonly jobDefinitionName?: string;\n\n                                                                                                                                                                                                                                                                                                 \n    readonly modelQualityBaselineConfig?: CfnModelQualityJobDefinition.ModelQualityBaselineConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                \n    readonly networkConfig?: CfnModelQualityJobDefinition.NetworkConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                        \n    readonly stoppingCondition?: CfnModelQualityJobDefinition.StoppingConditionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnModelQualityJobDefinitionProps`\n *\n * @param properties - the TypeScript properties of a `CfnModelQualityJobDefinitionProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinitionPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('jobDefinitionName', cdk.validateString)(properties.jobDefinitionName));\n    errors.collect(cdk.propertyValidator('jobResources', cdk.requiredValidator)(properties.jobResources));\n    errors.collect(cdk.propertyValidator('jobResources', CfnModelQualityJobDefinition_MonitoringResourcesPropertyValidator)(properties.jobResources));\n    errors.collect(cdk.propertyValidator('modelQualityAppSpecification', cdk.requiredValidator)(properties.modelQualityAppSpecification));\n    errors.collect(cdk.propertyValidator('modelQualityAppSpecification', CfnModelQualityJobDefinition_ModelQualityAppSpecificationPropertyValidator)(properties.modelQualityAppSpecification));\n    errors.collect(cdk.propertyValidator('modelQualityBaselineConfig', CfnModelQualityJobDefinition_ModelQualityBaselineConfigPropertyValidator)(properties.modelQualityBaselineConfig));\n    errors.collect(cdk.propertyValidator('modelQualityJobInput', cdk.requiredValidator)(properties.modelQualityJobInput));\n    errors.collect(cdk.propertyValidator('modelQualityJobInput', CfnModelQualityJobDefinition_ModelQualityJobInputPropertyValidator)(properties.modelQualityJobInput));\n    errors.collect(cdk.propertyValidator('modelQualityJobOutputConfig', cdk.requiredValidator)(properties.modelQualityJobOutputConfig));\n    errors.collect(cdk.propertyValidator('modelQualityJobOutputConfig', CfnModelQualityJobDefinition_MonitoringOutputConfigPropertyValidator)(properties.modelQualityJobOutputConfig));\n    errors.collect(cdk.propertyValidator('networkConfig', CfnModelQualityJobDefinition_NetworkConfigPropertyValidator)(properties.networkConfig));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('stoppingCondition', CfnModelQualityJobDefinition_StoppingConditionPropertyValidator)(properties.stoppingCondition));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnModelQualityJobDefinitionProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition` resource\n *\n * @param properties - the TypeScript properties of a `CfnModelQualityJobDefinitionProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinitionPropsValidator(properties).assertSuccess();\n    return {\n        JobResources: cfnModelQualityJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties.jobResources),\n        ModelQualityAppSpecification: cfnModelQualityJobDefinitionModelQualityAppSpecificationPropertyToCloudFormation(properties.modelQualityAppSpecification),\n        ModelQualityJobInput: cfnModelQualityJobDefinitionModelQualityJobInputPropertyToCloudFormation(properties.modelQualityJobInput),\n        ModelQualityJobOutputConfig: cfnModelQualityJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties.modelQualityJobOutputConfig),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        JobDefinitionName: cdk.stringToCloudFormation(properties.jobDefinitionName),\n        ModelQualityBaselineConfig: cfnModelQualityJobDefinitionModelQualityBaselineConfigPropertyToCloudFormation(properties.modelQualityBaselineConfig),\n        NetworkConfig: cfnModelQualityJobDefinitionNetworkConfigPropertyToCloudFormation(properties.networkConfig),\n        StoppingCondition: cfnModelQualityJobDefinitionStoppingConditionPropertyToCloudFormation(properties.stoppingCondition),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinitionProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinitionProps>();\n    ret.addPropertyResult('jobResources', 'JobResources', CfnModelQualityJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties.JobResources));\n    ret.addPropertyResult('modelQualityAppSpecification', 'ModelQualityAppSpecification', CfnModelQualityJobDefinitionModelQualityAppSpecificationPropertyFromCloudFormation(properties.ModelQualityAppSpecification));\n    ret.addPropertyResult('modelQualityJobInput', 'ModelQualityJobInput', CfnModelQualityJobDefinitionModelQualityJobInputPropertyFromCloudFormation(properties.ModelQualityJobInput));\n    ret.addPropertyResult('modelQualityJobOutputConfig', 'ModelQualityJobOutputConfig', CfnModelQualityJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties.ModelQualityJobOutputConfig));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('jobDefinitionName', 'JobDefinitionName', properties.JobDefinitionName != null ? cfn_parse.FromCloudFormation.getString(properties.JobDefinitionName) : undefined);\n    ret.addPropertyResult('modelQualityBaselineConfig', 'ModelQualityBaselineConfig', properties.ModelQualityBaselineConfig != null ? CfnModelQualityJobDefinitionModelQualityBaselineConfigPropertyFromCloudFormation(properties.ModelQualityBaselineConfig) : undefined);\n    ret.addPropertyResult('networkConfig', 'NetworkConfig', properties.NetworkConfig != null ? CfnModelQualityJobDefinitionNetworkConfigPropertyFromCloudFormation(properties.NetworkConfig) : undefined);\n    ret.addPropertyResult('stoppingCondition', 'StoppingCondition', properties.StoppingCondition != null ? CfnModelQualityJobDefinitionStoppingConditionPropertyFromCloudFormation(properties.StoppingCondition) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                            \nexport class CfnModelQualityJobDefinition extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::ModelQualityJobDefinition\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModelQualityJobDefinition {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnModelQualityJobDefinitionPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnModelQualityJobDefinition(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                 \n    public readonly attrCreationTime: string;\n\n                                                                                                                             \n    public readonly attrJobDefinitionArn: string;\n\n                                                                                                                                                                                                                                                                            \n    public jobResources: CfnModelQualityJobDefinition.MonitoringResourcesProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                            \n    public modelQualityAppSpecification: CfnModelQualityJobDefinition.ModelQualityAppSpecificationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                       \n    public modelQualityJobInput: CfnModelQualityJobDefinition.ModelQualityJobInputProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                \n    public modelQualityJobOutputConfig: CfnModelQualityJobDefinition.MonitoringOutputConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                              \n    public roleArn: string;\n\n                                                                                                                                                                                                                                                                   \n    public jobDefinitionName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                 \n    public modelQualityBaselineConfig: CfnModelQualityJobDefinition.ModelQualityBaselineConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                \n    public networkConfig: CfnModelQualityJobDefinition.NetworkConfigProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                        \n    public stoppingCondition: CfnModelQualityJobDefinition.StoppingConditionProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnModelQualityJobDefinitionProps) {\n        super(scope, id, { type: CfnModelQualityJobDefinition.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'jobResources', this);\n        cdk.requireProperty(props, 'modelQualityAppSpecification', this);\n        cdk.requireProperty(props, 'modelQualityJobInput', this);\n        cdk.requireProperty(props, 'modelQualityJobOutputConfig', this);\n        cdk.requireProperty(props, 'roleArn', this);\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrJobDefinitionArn = cdk.Token.asString(this.getAtt('JobDefinitionArn'));\n\n        this.jobResources = props.jobResources;\n        this.modelQualityAppSpecification = props.modelQualityAppSpecification;\n        this.modelQualityJobInput = props.modelQualityJobInput;\n        this.modelQualityJobOutputConfig = props.modelQualityJobOutputConfig;\n        this.roleArn = props.roleArn;\n        this.jobDefinitionName = props.jobDefinitionName;\n        this.modelQualityBaselineConfig = props.modelQualityBaselineConfig;\n        this.networkConfig = props.networkConfig;\n        this.stoppingCondition = props.stoppingCondition;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::ModelQualityJobDefinition\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnModelQualityJobDefinition.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            jobResources: this.jobResources,\n            modelQualityAppSpecification: this.modelQualityAppSpecification,\n            modelQualityJobInput: this.modelQualityJobInput,\n            modelQualityJobOutputConfig: this.modelQualityJobOutputConfig,\n            roleArn: this.roleArn,\n            jobDefinitionName: this.jobDefinitionName,\n            modelQualityBaselineConfig: this.modelQualityBaselineConfig,\n            networkConfig: this.networkConfig,\n            stoppingCondition: this.stoppingCondition,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnModelQualityJobDefinitionPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnModelQualityJobDefinition {\n                                                                                                                                                                                                                                                                                                              \n    export interface ClusterConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly instanceCount: number;\n                                                                                                                                                                                                                                                                                                                          \n        readonly instanceType: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly volumeKmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly volumeSizeInGb: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClusterConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ClusterConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_ClusterConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceCount', cdk.requiredValidator)(properties.instanceCount));\n    errors.collect(cdk.propertyValidator('instanceCount', cdk.validateNumber)(properties.instanceCount));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.requiredValidator)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('volumeKmsKeyId', cdk.validateString)(properties.volumeKmsKeyId));\n    errors.collect(cdk.propertyValidator('volumeSizeInGb', cdk.requiredValidator)(properties.volumeSizeInGb));\n    errors.collect(cdk.propertyValidator('volumeSizeInGb', cdk.validateNumber)(properties.volumeSizeInGb));\n    return errors.wrap('supplied properties not correct for \"ClusterConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.ClusterConfig` resource\n *\n * @param properties - the TypeScript properties of a `ClusterConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.ClusterConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionClusterConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_ClusterConfigPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceCount: cdk.numberToCloudFormation(properties.instanceCount),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        VolumeKmsKeyId: cdk.stringToCloudFormation(properties.volumeKmsKeyId),\n        VolumeSizeInGB: cdk.numberToCloudFormation(properties.volumeSizeInGb),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionClusterConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.ClusterConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.ClusterConfigProperty>();\n    ret.addPropertyResult('instanceCount', 'InstanceCount', cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount));\n    ret.addPropertyResult('instanceType', 'InstanceType', cfn_parse.FromCloudFormation.getString(properties.InstanceType));\n    ret.addPropertyResult('volumeKmsKeyId', 'VolumeKmsKeyId', properties.VolumeKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeKmsKeyId) : undefined);\n    ret.addPropertyResult('volumeSizeInGb', 'VolumeSizeInGB', cfn_parse.FromCloudFormation.getNumber(properties.VolumeSizeInGB));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelQualityJobDefinition {\n                                                                                                                                                                                                                                                                                    \n    export interface ConstraintsResourceProperty {\n                                                                                                                                                                                                                                                                                                                          \n        readonly s3Uri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConstraintsResourceProperty`\n *\n * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_ConstraintsResourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"ConstraintsResourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.ConstraintsResource` resource\n *\n * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.ConstraintsResource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionConstraintsResourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_ConstraintsResourcePropertyValidator(properties).assertSuccess();\n    return {\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.ConstraintsResourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.ConstraintsResourceProperty>();\n    ret.addPropertyResult('s3Uri', 'S3Uri', properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelQualityJobDefinition {\n                                                                                                                                                                                                                                                             \n    export interface EndpointInputProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly endTimeOffset?: string;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly endpointName: string;\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly inferenceAttribute?: string;\n                                                                                                                                                                                                                                                                                                                                                \n        readonly localPath: string;\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly probabilityAttribute?: string;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly probabilityThresholdAttribute?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly s3DataDistributionType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly s3InputMode?: string;\nn        readonly startTimeOffset?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EndpointInputProperty`\n *\n * @param properties - the TypeScript properties of a `EndpointInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_EndpointInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endTimeOffset', cdk.validateString)(properties.endTimeOffset));\n    errors.collect(cdk.propertyValidator('endpointName', cdk.requiredValidator)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('endpointName', cdk.validateString)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('inferenceAttribute', cdk.validateString)(properties.inferenceAttribute));\n    errors.collect(cdk.propertyValidator('localPath', cdk.requiredValidator)(properties.localPath));\n    errors.collect(cdk.propertyValidator('localPath', cdk.validateString)(properties.localPath));\n    errors.collect(cdk.propertyValidator('probabilityAttribute', cdk.validateString)(properties.probabilityAttribute));\n    errors.collect(cdk.propertyValidator('probabilityThresholdAttribute', cdk.validateNumber)(properties.probabilityThresholdAttribute));\n    errors.collect(cdk.propertyValidator('s3DataDistributionType', cdk.validateString)(properties.s3DataDistributionType));\n    errors.collect(cdk.propertyValidator('s3InputMode', cdk.validateString)(properties.s3InputMode));\n    errors.collect(cdk.propertyValidator('startTimeOffset', cdk.validateString)(properties.startTimeOffset));\n    return errors.wrap('supplied properties not correct for \"EndpointInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.EndpointInput` resource\n *\n * @param properties - the TypeScript properties of a `EndpointInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.EndpointInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionEndpointInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_EndpointInputPropertyValidator(properties).assertSuccess();\n    return {\n        EndTimeOffset: cdk.stringToCloudFormation(properties.endTimeOffset),\n        EndpointName: cdk.stringToCloudFormation(properties.endpointName),\n        InferenceAttribute: cdk.stringToCloudFormation(properties.inferenceAttribute),\n        LocalPath: cdk.stringToCloudFormation(properties.localPath),\n        ProbabilityAttribute: cdk.stringToCloudFormation(properties.probabilityAttribute),\n        ProbabilityThresholdAttribute: cdk.numberToCloudFormation(properties.probabilityThresholdAttribute),\n        S3DataDistributionType: cdk.stringToCloudFormation(properties.s3DataDistributionType),\n        S3InputMode: cdk.stringToCloudFormation(properties.s3InputMode),\n        StartTimeOffset: cdk.stringToCloudFormation(properties.startTimeOffset),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionEndpointInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.EndpointInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.EndpointInputProperty>();\n    ret.addPropertyResult('endTimeOffset', 'EndTimeOffset', properties.EndTimeOffset != null ? cfn_parse.FromCloudFormation.getString(properties.EndTimeOffset) : undefined);\n    ret.addPropertyResult('endpointName', 'EndpointName', cfn_parse.FromCloudFormation.getString(properties.EndpointName));\n    ret.addPropertyResult('inferenceAttribute', 'InferenceAttribute', properties.InferenceAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.InferenceAttribute) : undefined);\n    ret.addPropertyResult('localPath', 'LocalPath', cfn_parse.FromCloudFormation.getString(properties.LocalPath));\n    ret.addPropertyResult('probabilityAttribute', 'ProbabilityAttribute', properties.ProbabilityAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ProbabilityAttribute) : undefined);\n    ret.addPropertyResult('probabilityThresholdAttribute', 'ProbabilityThresholdAttribute', properties.ProbabilityThresholdAttribute != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProbabilityThresholdAttribute) : undefined);\n    ret.addPropertyResult('s3DataDistributionType', 'S3DataDistributionType', properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined);\n    ret.addPropertyResult('s3InputMode', 'S3InputMode', properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined);\n    ret.addPropertyResult('startTimeOffset', 'StartTimeOffset', properties.StartTimeOffset != null ? cfn_parse.FromCloudFormation.getString(properties.StartTimeOffset) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelQualityJobDefinition {\n                                                                                                                                                                                                                                                                                                           \n    export interface ModelQualityAppSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly containerArguments?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly containerEntrypoint?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                \n        readonly environment?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                \n        readonly imageUri: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly postAnalyticsProcessorSourceUri?: string;\n                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly problemType: string;\nn        readonly recordPreprocessorSourceUri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ModelQualityAppSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `ModelQualityAppSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_ModelQualityAppSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerArguments', cdk.listValidator(cdk.validateString))(properties.containerArguments));\n    errors.collect(cdk.propertyValidator('containerEntrypoint', cdk.listValidator(cdk.validateString))(properties.containerEntrypoint));\n    errors.collect(cdk.propertyValidator('environment', cdk.hashValidator(cdk.validateString))(properties.environment));\n    errors.collect(cdk.propertyValidator('imageUri', cdk.requiredValidator)(properties.imageUri));\n    errors.collect(cdk.propertyValidator('imageUri', cdk.validateString)(properties.imageUri));\n    errors.collect(cdk.propertyValidator('postAnalyticsProcessorSourceUri', cdk.validateString)(properties.postAnalyticsProcessorSourceUri));\n    errors.collect(cdk.propertyValidator('problemType', cdk.requiredValidator)(properties.problemType));\n    errors.collect(cdk.propertyValidator('problemType', cdk.validateString)(properties.problemType));\n    errors.collect(cdk.propertyValidator('recordPreprocessorSourceUri', cdk.validateString)(properties.recordPreprocessorSourceUri));\n    return errors.wrap('supplied properties not correct for \"ModelQualityAppSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.ModelQualityAppSpecification` resource\n *\n * @param properties - the TypeScript properties of a `ModelQualityAppSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.ModelQualityAppSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionModelQualityAppSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_ModelQualityAppSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerArguments: cdk.listMapper(cdk.stringToCloudFormation)(properties.containerArguments),\n        ContainerEntrypoint: cdk.listMapper(cdk.stringToCloudFormation)(properties.containerEntrypoint),\n        Environment: cdk.hashMapper(cdk.stringToCloudFormation)(properties.environment),\n        ImageUri: cdk.stringToCloudFormation(properties.imageUri),\n        PostAnalyticsProcessorSourceUri: cdk.stringToCloudFormation(properties.postAnalyticsProcessorSourceUri),\n        ProblemType: cdk.stringToCloudFormation(properties.problemType),\n        RecordPreprocessorSourceUri: cdk.stringToCloudFormation(properties.recordPreprocessorSourceUri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionModelQualityAppSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.ModelQualityAppSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.ModelQualityAppSpecificationProperty>();\n    ret.addPropertyResult('containerArguments', 'ContainerArguments', properties.ContainerArguments != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ContainerArguments) : undefined);\n    ret.addPropertyResult('containerEntrypoint', 'ContainerEntrypoint', properties.ContainerEntrypoint != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ContainerEntrypoint) : undefined);\n    ret.addPropertyResult('environment', 'Environment', properties.Environment != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Environment) : undefined);\n    ret.addPropertyResult('imageUri', 'ImageUri', cfn_parse.FromCloudFormation.getString(properties.ImageUri));\n    ret.addPropertyResult('postAnalyticsProcessorSourceUri', 'PostAnalyticsProcessorSourceUri', properties.PostAnalyticsProcessorSourceUri != null ? cfn_parse.FromCloudFormation.getString(properties.PostAnalyticsProcessorSourceUri) : undefined);\n    ret.addPropertyResult('problemType', 'ProblemType', cfn_parse.FromCloudFormation.getString(properties.ProblemType));\n    ret.addPropertyResult('recordPreprocessorSourceUri', 'RecordPreprocessorSourceUri', properties.RecordPreprocessorSourceUri != null ? cfn_parse.FromCloudFormation.getString(properties.RecordPreprocessorSourceUri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelQualityJobDefinition {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface ModelQualityBaselineConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly baseliningJobName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly constraintsResource?: CfnModelQualityJobDefinition.ConstraintsResourceProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ModelQualityBaselineConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ModelQualityBaselineConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_ModelQualityBaselineConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('baseliningJobName', cdk.validateString)(properties.baseliningJobName));\n    errors.collect(cdk.propertyValidator('constraintsResource', CfnModelQualityJobDefinition_ConstraintsResourcePropertyValidator)(properties.constraintsResource));\n    return errors.wrap('supplied properties not correct for \"ModelQualityBaselineConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.ModelQualityBaselineConfig` resource\n *\n * @param properties - the TypeScript properties of a `ModelQualityBaselineConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.ModelQualityBaselineConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionModelQualityBaselineConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_ModelQualityBaselineConfigPropertyValidator(properties).assertSuccess();\n    return {\n        BaseliningJobName: cdk.stringToCloudFormation(properties.baseliningJobName),\n        ConstraintsResource: cfnModelQualityJobDefinitionConstraintsResourcePropertyToCloudFormation(properties.constraintsResource),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionModelQualityBaselineConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.ModelQualityBaselineConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.ModelQualityBaselineConfigProperty>();\n    ret.addPropertyResult('baseliningJobName', 'BaseliningJobName', properties.BaseliningJobName != null ? cfn_parse.FromCloudFormation.getString(properties.BaseliningJobName) : undefined);\n    ret.addPropertyResult('constraintsResource', 'ConstraintsResource', properties.ConstraintsResource != null ? CfnModelQualityJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties.ConstraintsResource) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelQualityJobDefinition {\n                                                                                                                                                                                                                                                                                                                                                                    \n    export interface ModelQualityJobInputProperty {\n                                                                                                                                                                                                                                                                                                                  \n        readonly endpointInput: CfnModelQualityJobDefinition.EndpointInputProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                        \n        readonly groundTruthS3Input: CfnModelQualityJobDefinition.MonitoringGroundTruthS3InputProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ModelQualityJobInputProperty`\n *\n * @param properties - the TypeScript properties of a `ModelQualityJobInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_ModelQualityJobInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointInput', cdk.requiredValidator)(properties.endpointInput));\n    errors.collect(cdk.propertyValidator('endpointInput', CfnModelQualityJobDefinition_EndpointInputPropertyValidator)(properties.endpointInput));\n    errors.collect(cdk.propertyValidator('groundTruthS3Input', cdk.requiredValidator)(properties.groundTruthS3Input));\n    errors.collect(cdk.propertyValidator('groundTruthS3Input', CfnModelQualityJobDefinition_MonitoringGroundTruthS3InputPropertyValidator)(properties.groundTruthS3Input));\n    return errors.wrap('supplied properties not correct for \"ModelQualityJobInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.ModelQualityJobInput` resource\n *\n * @param properties - the TypeScript properties of a `ModelQualityJobInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.ModelQualityJobInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionModelQualityJobInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_ModelQualityJobInputPropertyValidator(properties).assertSuccess();\n    return {\n        EndpointInput: cfnModelQualityJobDefinitionEndpointInputPropertyToCloudFormation(properties.endpointInput),\n        GroundTruthS3Input: cfnModelQualityJobDefinitionMonitoringGroundTruthS3InputPropertyToCloudFormation(properties.groundTruthS3Input),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionModelQualityJobInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.ModelQualityJobInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.ModelQualityJobInputProperty>();\n    ret.addPropertyResult('endpointInput', 'EndpointInput', CfnModelQualityJobDefinitionEndpointInputPropertyFromCloudFormation(properties.EndpointInput));\n    ret.addPropertyResult('groundTruthS3Input', 'GroundTruthS3Input', CfnModelQualityJobDefinitionMonitoringGroundTruthS3InputPropertyFromCloudFormation(properties.GroundTruthS3Input));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelQualityJobDefinition {\n                                                                                                                                                                                                                                                                                                                   \n    export interface MonitoringGroundTruthS3InputProperty {\n                                                                                                                                                                                                                                                                                                                                                              \n        readonly s3Uri: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringGroundTruthS3InputProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringGroundTruthS3InputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_MonitoringGroundTruthS3InputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.requiredValidator)(properties.s3Uri));\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"MonitoringGroundTruthS3InputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.MonitoringGroundTruthS3Input` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringGroundTruthS3InputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.MonitoringGroundTruthS3Input` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionMonitoringGroundTruthS3InputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_MonitoringGroundTruthS3InputPropertyValidator(properties).assertSuccess();\n    return {\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionMonitoringGroundTruthS3InputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.MonitoringGroundTruthS3InputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.MonitoringGroundTruthS3InputProperty>();\n    ret.addPropertyResult('s3Uri', 'S3Uri', cfn_parse.FromCloudFormation.getString(properties.S3Uri));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelQualityJobDefinition {\n                                                                                                                                                                                                                                                                          \n    export interface MonitoringOutputProperty {\n                                                                                                                                                                                                                                                                                                                                                       \n        readonly s3Output: CfnModelQualityJobDefinition.S3OutputProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringOutputProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_MonitoringOutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Output', cdk.requiredValidator)(properties.s3Output));\n    errors.collect(cdk.propertyValidator('s3Output', CfnModelQualityJobDefinition_S3OutputPropertyValidator)(properties.s3Output));\n    return errors.wrap('supplied properties not correct for \"MonitoringOutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.MonitoringOutput` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.MonitoringOutput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionMonitoringOutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_MonitoringOutputPropertyValidator(properties).assertSuccess();\n    return {\n        S3Output: cfnModelQualityJobDefinitionS3OutputPropertyToCloudFormation(properties.s3Output),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionMonitoringOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.MonitoringOutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.MonitoringOutputProperty>();\n    ret.addPropertyResult('s3Output', 'S3Output', CfnModelQualityJobDefinitionS3OutputPropertyFromCloudFormation(properties.S3Output));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelQualityJobDefinition {\n                                                                                                                                                                                                                                                                                      \n    export interface MonitoringOutputConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly monitoringOutputs: Array<CfnModelQualityJobDefinition.MonitoringOutputProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringOutputConfigProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_MonitoringOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('monitoringOutputs', cdk.requiredValidator)(properties.monitoringOutputs));\n    errors.collect(cdk.propertyValidator('monitoringOutputs', cdk.listValidator(CfnModelQualityJobDefinition_MonitoringOutputPropertyValidator))(properties.monitoringOutputs));\n    return errors.wrap('supplied properties not correct for \"MonitoringOutputConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.MonitoringOutputConfig` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.MonitoringOutputConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_MonitoringOutputConfigPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        MonitoringOutputs: cdk.listMapper(cfnModelQualityJobDefinitionMonitoringOutputPropertyToCloudFormation)(properties.monitoringOutputs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.MonitoringOutputConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.MonitoringOutputConfigProperty>();\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('monitoringOutputs', 'MonitoringOutputs', cfn_parse.FromCloudFormation.getArray(CfnModelQualityJobDefinitionMonitoringOutputPropertyFromCloudFormation)(properties.MonitoringOutputs));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelQualityJobDefinition {\n                                                                                                                                                                                                                                                                                              \n    export interface MonitoringResourcesProperty {\n                                                                                                                                                                                                                                                                                                                                                              \n        readonly clusterConfig: CfnModelQualityJobDefinition.ClusterConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringResourcesProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_MonitoringResourcesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterConfig', cdk.requiredValidator)(properties.clusterConfig));\n    errors.collect(cdk.propertyValidator('clusterConfig', CfnModelQualityJobDefinition_ClusterConfigPropertyValidator)(properties.clusterConfig));\n    return errors.wrap('supplied properties not correct for \"MonitoringResourcesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.MonitoringResources` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.MonitoringResources` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_MonitoringResourcesPropertyValidator(properties).assertSuccess();\n    return {\n        ClusterConfig: cfnModelQualityJobDefinitionClusterConfigPropertyToCloudFormation(properties.clusterConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.MonitoringResourcesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.MonitoringResourcesProperty>();\n    ret.addPropertyResult('clusterConfig', 'ClusterConfig', CfnModelQualityJobDefinitionClusterConfigPropertyFromCloudFormation(properties.ClusterConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelQualityJobDefinition {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    export interface NetworkConfigProperty {\nn        readonly enableInterContainerTrafficEncryption?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly enableNetworkIsolation?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly vpcConfig?: CfnModelQualityJobDefinition.VpcConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkConfigProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_NetworkConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enableInterContainerTrafficEncryption', cdk.validateBoolean)(properties.enableInterContainerTrafficEncryption));\n    errors.collect(cdk.propertyValidator('enableNetworkIsolation', cdk.validateBoolean)(properties.enableNetworkIsolation));\n    errors.collect(cdk.propertyValidator('vpcConfig', CfnModelQualityJobDefinition_VpcConfigPropertyValidator)(properties.vpcConfig));\n    return errors.wrap('supplied properties not correct for \"NetworkConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.NetworkConfig` resource\n *\n * @param properties - the TypeScript properties of a `NetworkConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.NetworkConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionNetworkConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_NetworkConfigPropertyValidator(properties).assertSuccess();\n    return {\n        EnableInterContainerTrafficEncryption: cdk.booleanToCloudFormation(properties.enableInterContainerTrafficEncryption),\n        EnableNetworkIsolation: cdk.booleanToCloudFormation(properties.enableNetworkIsolation),\n        VpcConfig: cfnModelQualityJobDefinitionVpcConfigPropertyToCloudFormation(properties.vpcConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionNetworkConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.NetworkConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.NetworkConfigProperty>();\n    ret.addPropertyResult('enableInterContainerTrafficEncryption', 'EnableInterContainerTrafficEncryption', properties.EnableInterContainerTrafficEncryption != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableInterContainerTrafficEncryption) : undefined);\n    ret.addPropertyResult('enableNetworkIsolation', 'EnableNetworkIsolation', properties.EnableNetworkIsolation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNetworkIsolation) : undefined);\n    ret.addPropertyResult('vpcConfig', 'VpcConfig', properties.VpcConfig != null ? CfnModelQualityJobDefinitionVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelQualityJobDefinition {\n                                                                                                                                                                                                                                                                                                          \n    export interface S3OutputProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly localPath: string;\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly s3UploadMode?: string;\n                                                                                                                                                                                                                                                                                                                                                                       \n        readonly s3Uri: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3OutputProperty`\n *\n * @param properties - the TypeScript properties of a `S3OutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_S3OutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('localPath', cdk.requiredValidator)(properties.localPath));\n    errors.collect(cdk.propertyValidator('localPath', cdk.validateString)(properties.localPath));\n    errors.collect(cdk.propertyValidator('s3UploadMode', cdk.validateString)(properties.s3UploadMode));\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.requiredValidator)(properties.s3Uri));\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"S3OutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.S3Output` resource\n *\n * @param properties - the TypeScript properties of a `S3OutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.S3Output` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionS3OutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_S3OutputPropertyValidator(properties).assertSuccess();\n    return {\n        LocalPath: cdk.stringToCloudFormation(properties.localPath),\n        S3UploadMode: cdk.stringToCloudFormation(properties.s3UploadMode),\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionS3OutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.S3OutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.S3OutputProperty>();\n    ret.addPropertyResult('localPath', 'LocalPath', cfn_parse.FromCloudFormation.getString(properties.LocalPath));\n    ret.addPropertyResult('s3UploadMode', 'S3UploadMode', properties.S3UploadMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3UploadMode) : undefined);\n    ret.addPropertyResult('s3Uri', 'S3Uri', cfn_parse.FromCloudFormation.getString(properties.S3Uri));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelQualityJobDefinition {\nn    export interface StoppingConditionProperty {\nn        readonly maxRuntimeInSeconds: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StoppingConditionProperty`\n *\n * @param properties - the TypeScript properties of a `StoppingConditionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_StoppingConditionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxRuntimeInSeconds', cdk.requiredValidator)(properties.maxRuntimeInSeconds));\n    errors.collect(cdk.propertyValidator('maxRuntimeInSeconds', cdk.validateNumber)(properties.maxRuntimeInSeconds));\n    return errors.wrap('supplied properties not correct for \"StoppingConditionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.StoppingCondition` resource\n *\n * @param properties - the TypeScript properties of a `StoppingConditionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.StoppingCondition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionStoppingConditionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_StoppingConditionPropertyValidator(properties).assertSuccess();\n    return {\n        MaxRuntimeInSeconds: cdk.numberToCloudFormation(properties.maxRuntimeInSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionStoppingConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.StoppingConditionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.StoppingConditionProperty>();\n    ret.addPropertyResult('maxRuntimeInSeconds', 'MaxRuntimeInSeconds', cfn_parse.FromCloudFormation.getNumber(properties.MaxRuntimeInSeconds));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnModelQualityJobDefinition {\nn    export interface VpcConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly securityGroupIds: string[];\nn        readonly subnets: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcConfigProperty`\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnModelQualityJobDefinition_VpcConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.requiredValidator)(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnets', cdk.requiredValidator)(properties.subnets));\n    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));\n    return errors.wrap('supplied properties not correct for \"VpcConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.VpcConfig` resource\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::ModelQualityJobDefinition.VpcConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnModelQualityJobDefinitionVpcConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnModelQualityJobDefinition_VpcConfigPropertyValidator(properties).assertSuccess();\n    return {\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnModelQualityJobDefinitionVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.VpcConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.VpcConfigProperty>();\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds));\n    ret.addPropertyResult('subnets', 'Subnets', cfn_parse.FromCloudFormation.getStringArray(properties.Subnets));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                          \nexport interface CfnMonitoringScheduleProps {\n\n                                                                                                                                                                                                                                                                                                                 \n    readonly monitoringScheduleConfig: CfnMonitoringSchedule.MonitoringScheduleConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                    \n    readonly monitoringScheduleName: string;\n\n                                                                                                                                                                                                                                                             \n    readonly endpointName?: string;\n\n                                                                                                                                                                                                                                                                 \n    readonly failureReason?: string;\n\n                                                                                                                                                                                                                                                                                          \n    readonly lastMonitoringExecutionSummary?: CfnMonitoringSchedule.MonitoringExecutionSummaryProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                        \n    readonly monitoringScheduleStatus?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                      \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMonitoringScheduleProps`\n *\n * @param properties - the TypeScript properties of a `CfnMonitoringScheduleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedulePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointName', cdk.validateString)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('failureReason', cdk.validateString)(properties.failureReason));\n    errors.collect(cdk.propertyValidator('lastMonitoringExecutionSummary', CfnMonitoringSchedule_MonitoringExecutionSummaryPropertyValidator)(properties.lastMonitoringExecutionSummary));\n    errors.collect(cdk.propertyValidator('monitoringScheduleConfig', cdk.requiredValidator)(properties.monitoringScheduleConfig));\n    errors.collect(cdk.propertyValidator('monitoringScheduleConfig', CfnMonitoringSchedule_MonitoringScheduleConfigPropertyValidator)(properties.monitoringScheduleConfig));\n    errors.collect(cdk.propertyValidator('monitoringScheduleName', cdk.requiredValidator)(properties.monitoringScheduleName));\n    errors.collect(cdk.propertyValidator('monitoringScheduleName', cdk.validateString)(properties.monitoringScheduleName));\n    errors.collect(cdk.propertyValidator('monitoringScheduleStatus', cdk.validateString)(properties.monitoringScheduleStatus));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnMonitoringScheduleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule` resource\n *\n * @param properties - the TypeScript properties of a `CfnMonitoringScheduleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringSchedulePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedulePropsValidator(properties).assertSuccess();\n    return {\n        MonitoringScheduleConfig: cfnMonitoringScheduleMonitoringScheduleConfigPropertyToCloudFormation(properties.monitoringScheduleConfig),\n        MonitoringScheduleName: cdk.stringToCloudFormation(properties.monitoringScheduleName),\n        EndpointName: cdk.stringToCloudFormation(properties.endpointName),\n        FailureReason: cdk.stringToCloudFormation(properties.failureReason),\n        LastMonitoringExecutionSummary: cfnMonitoringScheduleMonitoringExecutionSummaryPropertyToCloudFormation(properties.lastMonitoringExecutionSummary),\n        MonitoringScheduleStatus: cdk.stringToCloudFormation(properties.monitoringScheduleStatus),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringSchedulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringScheduleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringScheduleProps>();\n    ret.addPropertyResult('monitoringScheduleConfig', 'MonitoringScheduleConfig', CfnMonitoringScheduleMonitoringScheduleConfigPropertyFromCloudFormation(properties.MonitoringScheduleConfig));\n    ret.addPropertyResult('monitoringScheduleName', 'MonitoringScheduleName', cfn_parse.FromCloudFormation.getString(properties.MonitoringScheduleName));\n    ret.addPropertyResult('endpointName', 'EndpointName', properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined);\n    ret.addPropertyResult('failureReason', 'FailureReason', properties.FailureReason != null ? cfn_parse.FromCloudFormation.getString(properties.FailureReason) : undefined);\n    ret.addPropertyResult('lastMonitoringExecutionSummary', 'LastMonitoringExecutionSummary', properties.LastMonitoringExecutionSummary != null ? CfnMonitoringScheduleMonitoringExecutionSummaryPropertyFromCloudFormation(properties.LastMonitoringExecutionSummary) : undefined);\n    ret.addPropertyResult('monitoringScheduleStatus', 'MonitoringScheduleStatus', properties.MonitoringScheduleStatus != null ? cfn_parse.FromCloudFormation.getString(properties.MonitoringScheduleStatus) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport class CfnMonitoringSchedule extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::MonitoringSchedule\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMonitoringSchedule {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMonitoringSchedulePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMonitoringSchedule(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                      \n    public readonly attrCreationTime: string;\n\n                                                                                                                                \n    public readonly attrLastModifiedTime: string;\n\n                                                                            \n    public readonly attrMonitoringScheduleArn: string;\n\n                                                                                                                                                                                                                                                                                                                 \n    public monitoringScheduleConfig: CfnMonitoringSchedule.MonitoringScheduleConfigProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                    \n    public monitoringScheduleName: string;\n\n                                                                                                                                                                                                                                                             \n    public endpointName: string | undefined;\n\n                                                                                                                                                                                                                                                                 \n    public failureReason: string | undefined;\n\n                                                                                                                                                                                                                                                                                          \n    public lastMonitoringExecutionSummary: CfnMonitoringSchedule.MonitoringExecutionSummaryProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                        \n    public monitoringScheduleStatus: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                      \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnMonitoringScheduleProps) {\n        super(scope, id, { type: CfnMonitoringSchedule.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'monitoringScheduleConfig', this);\n        cdk.requireProperty(props, 'monitoringScheduleName', this);\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrLastModifiedTime = cdk.Token.asString(this.getAtt('LastModifiedTime'));\n        this.attrMonitoringScheduleArn = cdk.Token.asString(this.getAtt('MonitoringScheduleArn'));\n\n        this.monitoringScheduleConfig = props.monitoringScheduleConfig;\n        this.monitoringScheduleName = props.monitoringScheduleName;\n        this.endpointName = props.endpointName;\n        this.failureReason = props.failureReason;\n        this.lastMonitoringExecutionSummary = props.lastMonitoringExecutionSummary;\n        this.monitoringScheduleStatus = props.monitoringScheduleStatus;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::MonitoringSchedule\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMonitoringSchedule.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            monitoringScheduleConfig: this.monitoringScheduleConfig,\n            monitoringScheduleName: this.monitoringScheduleName,\n            endpointName: this.endpointName,\n            failureReason: this.failureReason,\n            lastMonitoringExecutionSummary: this.lastMonitoringExecutionSummary,\n            monitoringScheduleStatus: this.monitoringScheduleStatus,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMonitoringSchedulePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                                                                                                     \n    export interface BaselineConfigProperty {\n                                                                                                                                                                                                                                                                                                                \n        readonly constraintsResource?: CfnMonitoringSchedule.ConstraintsResourceProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                      \n        readonly statisticsResource?: CfnMonitoringSchedule.StatisticsResourceProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BaselineConfigProperty`\n *\n * @param properties - the TypeScript properties of a `BaselineConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_BaselineConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('constraintsResource', CfnMonitoringSchedule_ConstraintsResourcePropertyValidator)(properties.constraintsResource));\n    errors.collect(cdk.propertyValidator('statisticsResource', CfnMonitoringSchedule_StatisticsResourcePropertyValidator)(properties.statisticsResource));\n    return errors.wrap('supplied properties not correct for \"BaselineConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.BaselineConfig` resource\n *\n * @param properties - the TypeScript properties of a `BaselineConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.BaselineConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleBaselineConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_BaselineConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ConstraintsResource: cfnMonitoringScheduleConstraintsResourcePropertyToCloudFormation(properties.constraintsResource),\n        StatisticsResource: cfnMonitoringScheduleStatisticsResourcePropertyToCloudFormation(properties.statisticsResource),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleBaselineConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.BaselineConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.BaselineConfigProperty>();\n    ret.addPropertyResult('constraintsResource', 'ConstraintsResource', properties.ConstraintsResource != null ? CfnMonitoringScheduleConstraintsResourcePropertyFromCloudFormation(properties.ConstraintsResource) : undefined);\n    ret.addPropertyResult('statisticsResource', 'StatisticsResource', properties.StatisticsResource != null ? CfnMonitoringScheduleStatisticsResourcePropertyFromCloudFormation(properties.StatisticsResource) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                                                         \n    export interface ClusterConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly instanceCount: number;\n                                                                                                                                                                                                                                                                                                            \n        readonly instanceType: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly volumeKmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly volumeSizeInGb: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ClusterConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ClusterConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_ClusterConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceCount', cdk.requiredValidator)(properties.instanceCount));\n    errors.collect(cdk.propertyValidator('instanceCount', cdk.validateNumber)(properties.instanceCount));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.requiredValidator)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('volumeKmsKeyId', cdk.validateString)(properties.volumeKmsKeyId));\n    errors.collect(cdk.propertyValidator('volumeSizeInGb', cdk.requiredValidator)(properties.volumeSizeInGb));\n    errors.collect(cdk.propertyValidator('volumeSizeInGb', cdk.validateNumber)(properties.volumeSizeInGb));\n    return errors.wrap('supplied properties not correct for \"ClusterConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.ClusterConfig` resource\n *\n * @param properties - the TypeScript properties of a `ClusterConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.ClusterConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleClusterConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_ClusterConfigPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceCount: cdk.numberToCloudFormation(properties.instanceCount),\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        VolumeKmsKeyId: cdk.stringToCloudFormation(properties.volumeKmsKeyId),\n        VolumeSizeInGB: cdk.numberToCloudFormation(properties.volumeSizeInGb),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleClusterConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.ClusterConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.ClusterConfigProperty>();\n    ret.addPropertyResult('instanceCount', 'InstanceCount', cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount));\n    ret.addPropertyResult('instanceType', 'InstanceType', cfn_parse.FromCloudFormation.getString(properties.InstanceType));\n    ret.addPropertyResult('volumeKmsKeyId', 'VolumeKmsKeyId', properties.VolumeKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeKmsKeyId) : undefined);\n    ret.addPropertyResult('volumeSizeInGb', 'VolumeSizeInGB', cfn_parse.FromCloudFormation.getNumber(properties.VolumeSizeInGB));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                                              \n    export interface ConstraintsResourceProperty {\n                                                                                                                                                                                                                                                                                                            \n        readonly s3Uri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ConstraintsResourceProperty`\n *\n * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_ConstraintsResourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"ConstraintsResourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.ConstraintsResource` resource\n *\n * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.ConstraintsResource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleConstraintsResourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_ConstraintsResourcePropertyValidator(properties).assertSuccess();\n    return {\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleConstraintsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.ConstraintsResourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.ConstraintsResourceProperty>();\n    ret.addPropertyResult('s3Uri', 'S3Uri', properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                      \n    export interface EndpointInputProperty {\n                                                                                                                                                                                                                                                                                                                                        \n        readonly endpointName: string;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly localPath: string;\n                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly s3DataDistributionType?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly s3InputMode?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EndpointInputProperty`\n *\n * @param properties - the TypeScript properties of a `EndpointInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_EndpointInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointName', cdk.requiredValidator)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('endpointName', cdk.validateString)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('localPath', cdk.requiredValidator)(properties.localPath));\n    errors.collect(cdk.propertyValidator('localPath', cdk.validateString)(properties.localPath));\n    errors.collect(cdk.propertyValidator('s3DataDistributionType', cdk.validateString)(properties.s3DataDistributionType));\n    errors.collect(cdk.propertyValidator('s3InputMode', cdk.validateString)(properties.s3InputMode));\n    return errors.wrap('supplied properties not correct for \"EndpointInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.EndpointInput` resource\n *\n * @param properties - the TypeScript properties of a `EndpointInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.EndpointInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleEndpointInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_EndpointInputPropertyValidator(properties).assertSuccess();\n    return {\n        EndpointName: cdk.stringToCloudFormation(properties.endpointName),\n        LocalPath: cdk.stringToCloudFormation(properties.localPath),\n        S3DataDistributionType: cdk.stringToCloudFormation(properties.s3DataDistributionType),\n        S3InputMode: cdk.stringToCloudFormation(properties.s3InputMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleEndpointInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.EndpointInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.EndpointInputProperty>();\n    ret.addPropertyResult('endpointName', 'EndpointName', cfn_parse.FromCloudFormation.getString(properties.EndpointName));\n    ret.addPropertyResult('localPath', 'LocalPath', cfn_parse.FromCloudFormation.getString(properties.LocalPath));\n    ret.addPropertyResult('s3DataDistributionType', 'S3DataDistributionType', properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined);\n    ret.addPropertyResult('s3InputMode', 'S3InputMode', properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                                                                  \n    export interface MonitoringAppSpecificationProperty {\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly containerArguments?: string[];\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly containerEntrypoint?: string[];\n                                                                                                                                                                                                                                                                                                                                  \n        readonly imageUri: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly postAnalyticsProcessorSourceUri?: string;\nn        readonly recordPreprocessorSourceUri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringAppSpecificationProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringAppSpecificationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_MonitoringAppSpecificationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('containerArguments', cdk.listValidator(cdk.validateString))(properties.containerArguments));\n    errors.collect(cdk.propertyValidator('containerEntrypoint', cdk.listValidator(cdk.validateString))(properties.containerEntrypoint));\n    errors.collect(cdk.propertyValidator('imageUri', cdk.requiredValidator)(properties.imageUri));\n    errors.collect(cdk.propertyValidator('imageUri', cdk.validateString)(properties.imageUri));\n    errors.collect(cdk.propertyValidator('postAnalyticsProcessorSourceUri', cdk.validateString)(properties.postAnalyticsProcessorSourceUri));\n    errors.collect(cdk.propertyValidator('recordPreprocessorSourceUri', cdk.validateString)(properties.recordPreprocessorSourceUri));\n    return errors.wrap('supplied properties not correct for \"MonitoringAppSpecificationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringAppSpecification` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringAppSpecificationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringAppSpecification` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleMonitoringAppSpecificationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_MonitoringAppSpecificationPropertyValidator(properties).assertSuccess();\n    return {\n        ContainerArguments: cdk.listMapper(cdk.stringToCloudFormation)(properties.containerArguments),\n        ContainerEntrypoint: cdk.listMapper(cdk.stringToCloudFormation)(properties.containerEntrypoint),\n        ImageUri: cdk.stringToCloudFormation(properties.imageUri),\n        PostAnalyticsProcessorSourceUri: cdk.stringToCloudFormation(properties.postAnalyticsProcessorSourceUri),\n        RecordPreprocessorSourceUri: cdk.stringToCloudFormation(properties.recordPreprocessorSourceUri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleMonitoringAppSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.MonitoringAppSpecificationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringAppSpecificationProperty>();\n    ret.addPropertyResult('containerArguments', 'ContainerArguments', properties.ContainerArguments != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ContainerArguments) : undefined);\n    ret.addPropertyResult('containerEntrypoint', 'ContainerEntrypoint', properties.ContainerEntrypoint != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ContainerEntrypoint) : undefined);\n    ret.addPropertyResult('imageUri', 'ImageUri', cfn_parse.FromCloudFormation.getString(properties.ImageUri));\n    ret.addPropertyResult('postAnalyticsProcessorSourceUri', 'PostAnalyticsProcessorSourceUri', properties.PostAnalyticsProcessorSourceUri != null ? cfn_parse.FromCloudFormation.getString(properties.PostAnalyticsProcessorSourceUri) : undefined);\n    ret.addPropertyResult('recordPreprocessorSourceUri', 'RecordPreprocessorSourceUri', properties.RecordPreprocessorSourceUri != null ? cfn_parse.FromCloudFormation.getString(properties.RecordPreprocessorSourceUri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                                                                  \n    export interface MonitoringExecutionSummaryProperty {\n                                                                                                                                                                                                                                                                                                                                   \n        readonly creationTime: string;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly endpointName?: string;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly failureReason?: string;\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly lastModifiedTime: string;\n                                                                                                                                                                                                                                                                                                                                \n        readonly monitoringExecutionStatus: string;\n                                                                                                                                                                                                                                                                                                                                \n        readonly monitoringScheduleName: string;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly processingJobArn?: string;\n                                                                                                                                                                                                                                                                                                                             \n        readonly scheduledTime: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringExecutionSummaryProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringExecutionSummaryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_MonitoringExecutionSummaryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('creationTime', cdk.requiredValidator)(properties.creationTime));\n    errors.collect(cdk.propertyValidator('creationTime', cdk.validateString)(properties.creationTime));\n    errors.collect(cdk.propertyValidator('endpointName', cdk.validateString)(properties.endpointName));\n    errors.collect(cdk.propertyValidator('failureReason', cdk.validateString)(properties.failureReason));\n    errors.collect(cdk.propertyValidator('lastModifiedTime', cdk.requiredValidator)(properties.lastModifiedTime));\n    errors.collect(cdk.propertyValidator('lastModifiedTime', cdk.validateString)(properties.lastModifiedTime));\n    errors.collect(cdk.propertyValidator('monitoringExecutionStatus', cdk.requiredValidator)(properties.monitoringExecutionStatus));\n    errors.collect(cdk.propertyValidator('monitoringExecutionStatus', cdk.validateString)(properties.monitoringExecutionStatus));\n    errors.collect(cdk.propertyValidator('monitoringScheduleName', cdk.requiredValidator)(properties.monitoringScheduleName));\n    errors.collect(cdk.propertyValidator('monitoringScheduleName', cdk.validateString)(properties.monitoringScheduleName));\n    errors.collect(cdk.propertyValidator('processingJobArn', cdk.validateString)(properties.processingJobArn));\n    errors.collect(cdk.propertyValidator('scheduledTime', cdk.requiredValidator)(properties.scheduledTime));\n    errors.collect(cdk.propertyValidator('scheduledTime', cdk.validateString)(properties.scheduledTime));\n    return errors.wrap('supplied properties not correct for \"MonitoringExecutionSummaryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringExecutionSummary` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringExecutionSummaryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringExecutionSummary` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleMonitoringExecutionSummaryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_MonitoringExecutionSummaryPropertyValidator(properties).assertSuccess();\n    return {\n        CreationTime: cdk.stringToCloudFormation(properties.creationTime),\n        EndpointName: cdk.stringToCloudFormation(properties.endpointName),\n        FailureReason: cdk.stringToCloudFormation(properties.failureReason),\n        LastModifiedTime: cdk.stringToCloudFormation(properties.lastModifiedTime),\n        MonitoringExecutionStatus: cdk.stringToCloudFormation(properties.monitoringExecutionStatus),\n        MonitoringScheduleName: cdk.stringToCloudFormation(properties.monitoringScheduleName),\n        ProcessingJobArn: cdk.stringToCloudFormation(properties.processingJobArn),\n        ScheduledTime: cdk.stringToCloudFormation(properties.scheduledTime),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleMonitoringExecutionSummaryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.MonitoringExecutionSummaryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringExecutionSummaryProperty>();\n    ret.addPropertyResult('creationTime', 'CreationTime', cfn_parse.FromCloudFormation.getString(properties.CreationTime));\n    ret.addPropertyResult('endpointName', 'EndpointName', properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined);\n    ret.addPropertyResult('failureReason', 'FailureReason', properties.FailureReason != null ? cfn_parse.FromCloudFormation.getString(properties.FailureReason) : undefined);\n    ret.addPropertyResult('lastModifiedTime', 'LastModifiedTime', cfn_parse.FromCloudFormation.getString(properties.LastModifiedTime));\n    ret.addPropertyResult('monitoringExecutionStatus', 'MonitoringExecutionStatus', cfn_parse.FromCloudFormation.getString(properties.MonitoringExecutionStatus));\n    ret.addPropertyResult('monitoringScheduleName', 'MonitoringScheduleName', cfn_parse.FromCloudFormation.getString(properties.MonitoringScheduleName));\n    ret.addPropertyResult('processingJobArn', 'ProcessingJobArn', properties.ProcessingJobArn != null ? cfn_parse.FromCloudFormation.getString(properties.ProcessingJobArn) : undefined);\n    ret.addPropertyResult('scheduledTime', 'ScheduledTime', cfn_parse.FromCloudFormation.getString(properties.ScheduledTime));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                           \n    export interface MonitoringInputProperty {\n                                                                                                                                                                                                                                                                                               \n        readonly endpointInput: CfnMonitoringSchedule.EndpointInputProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringInputProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringInputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_MonitoringInputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('endpointInput', cdk.requiredValidator)(properties.endpointInput));\n    errors.collect(cdk.propertyValidator('endpointInput', CfnMonitoringSchedule_EndpointInputPropertyValidator)(properties.endpointInput));\n    return errors.wrap('supplied properties not correct for \"MonitoringInputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringInput` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringInputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringInput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleMonitoringInputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_MonitoringInputPropertyValidator(properties).assertSuccess();\n    return {\n        EndpointInput: cfnMonitoringScheduleEndpointInputPropertyToCloudFormation(properties.endpointInput),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleMonitoringInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.MonitoringInputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringInputProperty>();\n    ret.addPropertyResult('endpointInput', 'EndpointInput', CfnMonitoringScheduleEndpointInputPropertyFromCloudFormation(properties.EndpointInput));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                              \n    export interface MonitoringJobDefinitionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly baselineConfig?: CfnMonitoringSchedule.BaselineConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                  \n        readonly environment?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly monitoringAppSpecification: CfnMonitoringSchedule.MonitoringAppSpecificationProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly monitoringInputs: Array<CfnMonitoringSchedule.MonitoringInputProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly monitoringOutputConfig: CfnMonitoringSchedule.MonitoringOutputConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly monitoringResources: CfnMonitoringSchedule.MonitoringResourcesProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                \n        readonly networkConfig?: CfnMonitoringSchedule.NetworkConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly roleArn: string;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly stoppingCondition?: CfnMonitoringSchedule.StoppingConditionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringJobDefinitionProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringJobDefinitionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_MonitoringJobDefinitionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('baselineConfig', CfnMonitoringSchedule_BaselineConfigPropertyValidator)(properties.baselineConfig));\n    errors.collect(cdk.propertyValidator('environment', cdk.hashValidator(cdk.validateString))(properties.environment));\n    errors.collect(cdk.propertyValidator('monitoringAppSpecification', cdk.requiredValidator)(properties.monitoringAppSpecification));\n    errors.collect(cdk.propertyValidator('monitoringAppSpecification', CfnMonitoringSchedule_MonitoringAppSpecificationPropertyValidator)(properties.monitoringAppSpecification));\n    errors.collect(cdk.propertyValidator('monitoringInputs', cdk.requiredValidator)(properties.monitoringInputs));\n    errors.collect(cdk.propertyValidator('monitoringInputs', cdk.listValidator(CfnMonitoringSchedule_MonitoringInputPropertyValidator))(properties.monitoringInputs));\n    errors.collect(cdk.propertyValidator('monitoringOutputConfig', cdk.requiredValidator)(properties.monitoringOutputConfig));\n    errors.collect(cdk.propertyValidator('monitoringOutputConfig', CfnMonitoringSchedule_MonitoringOutputConfigPropertyValidator)(properties.monitoringOutputConfig));\n    errors.collect(cdk.propertyValidator('monitoringResources', cdk.requiredValidator)(properties.monitoringResources));\n    errors.collect(cdk.propertyValidator('monitoringResources', CfnMonitoringSchedule_MonitoringResourcesPropertyValidator)(properties.monitoringResources));\n    errors.collect(cdk.propertyValidator('networkConfig', CfnMonitoringSchedule_NetworkConfigPropertyValidator)(properties.networkConfig));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('stoppingCondition', CfnMonitoringSchedule_StoppingConditionPropertyValidator)(properties.stoppingCondition));\n    return errors.wrap('supplied properties not correct for \"MonitoringJobDefinitionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringJobDefinition` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringJobDefinitionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringJobDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleMonitoringJobDefinitionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_MonitoringJobDefinitionPropertyValidator(properties).assertSuccess();\n    return {\n        BaselineConfig: cfnMonitoringScheduleBaselineConfigPropertyToCloudFormation(properties.baselineConfig),\n        Environment: cdk.hashMapper(cdk.stringToCloudFormation)(properties.environment),\n        MonitoringAppSpecification: cfnMonitoringScheduleMonitoringAppSpecificationPropertyToCloudFormation(properties.monitoringAppSpecification),\n        MonitoringInputs: cdk.listMapper(cfnMonitoringScheduleMonitoringInputPropertyToCloudFormation)(properties.monitoringInputs),\n        MonitoringOutputConfig: cfnMonitoringScheduleMonitoringOutputConfigPropertyToCloudFormation(properties.monitoringOutputConfig),\n        MonitoringResources: cfnMonitoringScheduleMonitoringResourcesPropertyToCloudFormation(properties.monitoringResources),\n        NetworkConfig: cfnMonitoringScheduleNetworkConfigPropertyToCloudFormation(properties.networkConfig),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        StoppingCondition: cfnMonitoringScheduleStoppingConditionPropertyToCloudFormation(properties.stoppingCondition),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleMonitoringJobDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.MonitoringJobDefinitionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringJobDefinitionProperty>();\n    ret.addPropertyResult('baselineConfig', 'BaselineConfig', properties.BaselineConfig != null ? CfnMonitoringScheduleBaselineConfigPropertyFromCloudFormation(properties.BaselineConfig) : undefined);\n    ret.addPropertyResult('environment', 'Environment', properties.Environment != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Environment) : undefined);\n    ret.addPropertyResult('monitoringAppSpecification', 'MonitoringAppSpecification', CfnMonitoringScheduleMonitoringAppSpecificationPropertyFromCloudFormation(properties.MonitoringAppSpecification));\n    ret.addPropertyResult('monitoringInputs', 'MonitoringInputs', cfn_parse.FromCloudFormation.getArray(CfnMonitoringScheduleMonitoringInputPropertyFromCloudFormation)(properties.MonitoringInputs));\n    ret.addPropertyResult('monitoringOutputConfig', 'MonitoringOutputConfig', CfnMonitoringScheduleMonitoringOutputConfigPropertyFromCloudFormation(properties.MonitoringOutputConfig));\n    ret.addPropertyResult('monitoringResources', 'MonitoringResources', CfnMonitoringScheduleMonitoringResourcesPropertyFromCloudFormation(properties.MonitoringResources));\n    ret.addPropertyResult('networkConfig', 'NetworkConfig', properties.NetworkConfig != null ? CfnMonitoringScheduleNetworkConfigPropertyFromCloudFormation(properties.NetworkConfig) : undefined);\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('stoppingCondition', 'StoppingCondition', properties.StoppingCondition != null ? CfnMonitoringScheduleStoppingConditionPropertyFromCloudFormation(properties.StoppingCondition) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                                   \n    export interface MonitoringOutputProperty {\n                                                                                                                                                                                                                                                                                                                                         \n        readonly s3Output: CfnMonitoringSchedule.S3OutputProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringOutputProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_MonitoringOutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Output', cdk.requiredValidator)(properties.s3Output));\n    errors.collect(cdk.propertyValidator('s3Output', CfnMonitoringSchedule_S3OutputPropertyValidator)(properties.s3Output));\n    return errors.wrap('supplied properties not correct for \"MonitoringOutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringOutput` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringOutput` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleMonitoringOutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_MonitoringOutputPropertyValidator(properties).assertSuccess();\n    return {\n        S3Output: cfnMonitoringScheduleS3OutputPropertyToCloudFormation(properties.s3Output),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleMonitoringOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.MonitoringOutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringOutputProperty>();\n    ret.addPropertyResult('s3Output', 'S3Output', CfnMonitoringScheduleS3OutputPropertyFromCloudFormation(properties.S3Output));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                                               \n    export interface MonitoringOutputConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly kmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly monitoringOutputs: Array<CfnMonitoringSchedule.MonitoringOutputProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringOutputConfigProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_MonitoringOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('monitoringOutputs', cdk.requiredValidator)(properties.monitoringOutputs));\n    errors.collect(cdk.propertyValidator('monitoringOutputs', cdk.listValidator(CfnMonitoringSchedule_MonitoringOutputPropertyValidator))(properties.monitoringOutputs));\n    return errors.wrap('supplied properties not correct for \"MonitoringOutputConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringOutputConfig` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringOutputConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleMonitoringOutputConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_MonitoringOutputConfigPropertyValidator(properties).assertSuccess();\n    return {\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        MonitoringOutputs: cdk.listMapper(cfnMonitoringScheduleMonitoringOutputPropertyToCloudFormation)(properties.monitoringOutputs),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleMonitoringOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.MonitoringOutputConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringOutputConfigProperty>();\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('monitoringOutputs', 'MonitoringOutputs', cfn_parse.FromCloudFormation.getArray(CfnMonitoringScheduleMonitoringOutputPropertyFromCloudFormation)(properties.MonitoringOutputs));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                                                       \n    export interface MonitoringResourcesProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly clusterConfig: CfnMonitoringSchedule.ClusterConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringResourcesProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_MonitoringResourcesPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clusterConfig', cdk.requiredValidator)(properties.clusterConfig));\n    errors.collect(cdk.propertyValidator('clusterConfig', CfnMonitoringSchedule_ClusterConfigPropertyValidator)(properties.clusterConfig));\n    return errors.wrap('supplied properties not correct for \"MonitoringResourcesProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringResources` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringResources` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleMonitoringResourcesPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_MonitoringResourcesPropertyValidator(properties).assertSuccess();\n    return {\n        ClusterConfig: cfnMonitoringScheduleClusterConfigPropertyToCloudFormation(properties.clusterConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleMonitoringResourcesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.MonitoringResourcesProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringResourcesProperty>();\n    ret.addPropertyResult('clusterConfig', 'ClusterConfig', CfnMonitoringScheduleClusterConfigPropertyFromCloudFormation(properties.ClusterConfig));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                                                                      \n    export interface MonitoringScheduleConfigProperty {\n                                                                                                                                                                                                                                                                                                                    \n        readonly monitoringJobDefinition?: CfnMonitoringSchedule.MonitoringJobDefinitionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly monitoringJobDefinitionName?: string;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly monitoringType?: string;\n                                                                                                                                                                                                                                                                                                                   \n        readonly scheduleConfig?: CfnMonitoringSchedule.ScheduleConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MonitoringScheduleConfigProperty`\n *\n * @param properties - the TypeScript properties of a `MonitoringScheduleConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_MonitoringScheduleConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('monitoringJobDefinition', CfnMonitoringSchedule_MonitoringJobDefinitionPropertyValidator)(properties.monitoringJobDefinition));\n    errors.collect(cdk.propertyValidator('monitoringJobDefinitionName', cdk.validateString)(properties.monitoringJobDefinitionName));\n    errors.collect(cdk.propertyValidator('monitoringType', cdk.validateString)(properties.monitoringType));\n    errors.collect(cdk.propertyValidator('scheduleConfig', CfnMonitoringSchedule_ScheduleConfigPropertyValidator)(properties.scheduleConfig));\n    return errors.wrap('supplied properties not correct for \"MonitoringScheduleConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringScheduleConfig` resource\n *\n * @param properties - the TypeScript properties of a `MonitoringScheduleConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.MonitoringScheduleConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleMonitoringScheduleConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_MonitoringScheduleConfigPropertyValidator(properties).assertSuccess();\n    return {\n        MonitoringJobDefinition: cfnMonitoringScheduleMonitoringJobDefinitionPropertyToCloudFormation(properties.monitoringJobDefinition),\n        MonitoringJobDefinitionName: cdk.stringToCloudFormation(properties.monitoringJobDefinitionName),\n        MonitoringType: cdk.stringToCloudFormation(properties.monitoringType),\n        ScheduleConfig: cfnMonitoringScheduleScheduleConfigPropertyToCloudFormation(properties.scheduleConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleMonitoringScheduleConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.MonitoringScheduleConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringScheduleConfigProperty>();\n    ret.addPropertyResult('monitoringJobDefinition', 'MonitoringJobDefinition', properties.MonitoringJobDefinition != null ? CfnMonitoringScheduleMonitoringJobDefinitionPropertyFromCloudFormation(properties.MonitoringJobDefinition) : undefined);\n    ret.addPropertyResult('monitoringJobDefinitionName', 'MonitoringJobDefinitionName', properties.MonitoringJobDefinitionName != null ? cfn_parse.FromCloudFormation.getString(properties.MonitoringJobDefinitionName) : undefined);\n    ret.addPropertyResult('monitoringType', 'MonitoringType', properties.MonitoringType != null ? cfn_parse.FromCloudFormation.getString(properties.MonitoringType) : undefined);\n    ret.addPropertyResult('scheduleConfig', 'ScheduleConfig', properties.ScheduleConfig != null ? CfnMonitoringScheduleScheduleConfigPropertyFromCloudFormation(properties.ScheduleConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface NetworkConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly enableInterContainerTrafficEncryption?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                             \n        readonly enableNetworkIsolation?: boolean | cdk.IResolvable;\nn        readonly vpcConfig?: CfnMonitoringSchedule.VpcConfigProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NetworkConfigProperty`\n *\n * @param properties - the TypeScript properties of a `NetworkConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_NetworkConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enableInterContainerTrafficEncryption', cdk.validateBoolean)(properties.enableInterContainerTrafficEncryption));\n    errors.collect(cdk.propertyValidator('enableNetworkIsolation', cdk.validateBoolean)(properties.enableNetworkIsolation));\n    errors.collect(cdk.propertyValidator('vpcConfig', CfnMonitoringSchedule_VpcConfigPropertyValidator)(properties.vpcConfig));\n    return errors.wrap('supplied properties not correct for \"NetworkConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.NetworkConfig` resource\n *\n * @param properties - the TypeScript properties of a `NetworkConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.NetworkConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleNetworkConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_NetworkConfigPropertyValidator(properties).assertSuccess();\n    return {\n        EnableInterContainerTrafficEncryption: cdk.booleanToCloudFormation(properties.enableInterContainerTrafficEncryption),\n        EnableNetworkIsolation: cdk.booleanToCloudFormation(properties.enableNetworkIsolation),\n        VpcConfig: cfnMonitoringScheduleVpcConfigPropertyToCloudFormation(properties.vpcConfig),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleNetworkConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.NetworkConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.NetworkConfigProperty>();\n    ret.addPropertyResult('enableInterContainerTrafficEncryption', 'EnableInterContainerTrafficEncryption', properties.EnableInterContainerTrafficEncryption != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableInterContainerTrafficEncryption) : undefined);\n    ret.addPropertyResult('enableNetworkIsolation', 'EnableNetworkIsolation', properties.EnableNetworkIsolation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNetworkIsolation) : undefined);\n    ret.addPropertyResult('vpcConfig', 'VpcConfig', properties.VpcConfig != null ? CfnMonitoringScheduleVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                                                                      \n    export interface S3OutputProperty {\n                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly localPath: string;\n                                                                                                                                                                                                                                                                                                                                          \n        readonly s3UploadMode?: string;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly s3Uri: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3OutputProperty`\n *\n * @param properties - the TypeScript properties of a `S3OutputProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_S3OutputPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('localPath', cdk.requiredValidator)(properties.localPath));\n    errors.collect(cdk.propertyValidator('localPath', cdk.validateString)(properties.localPath));\n    errors.collect(cdk.propertyValidator('s3UploadMode', cdk.validateString)(properties.s3UploadMode));\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.requiredValidator)(properties.s3Uri));\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"S3OutputProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.S3Output` resource\n *\n * @param properties - the TypeScript properties of a `S3OutputProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.S3Output` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleS3OutputPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_S3OutputPropertyValidator(properties).assertSuccess();\n    return {\n        LocalPath: cdk.stringToCloudFormation(properties.localPath),\n        S3UploadMode: cdk.stringToCloudFormation(properties.s3UploadMode),\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleS3OutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.S3OutputProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.S3OutputProperty>();\n    ret.addPropertyResult('localPath', 'LocalPath', cfn_parse.FromCloudFormation.getString(properties.LocalPath));\n    ret.addPropertyResult('s3UploadMode', 'S3UploadMode', properties.S3UploadMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3UploadMode) : undefined);\n    ret.addPropertyResult('s3Uri', 'S3Uri', cfn_parse.FromCloudFormation.getString(properties.S3Uri));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                                              \n    export interface ScheduleConfigProperty {\nn        readonly scheduleExpression: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ScheduleConfigProperty`\n *\n * @param properties - the TypeScript properties of a `ScheduleConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_ScheduleConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.requiredValidator)(properties.scheduleExpression));\n    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.validateString)(properties.scheduleExpression));\n    return errors.wrap('supplied properties not correct for \"ScheduleConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.ScheduleConfig` resource\n *\n * @param properties - the TypeScript properties of a `ScheduleConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.ScheduleConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleScheduleConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_ScheduleConfigPropertyValidator(properties).assertSuccess();\n    return {\n        ScheduleExpression: cdk.stringToCloudFormation(properties.scheduleExpression),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleScheduleConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.ScheduleConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.ScheduleConfigProperty>();\n    ret.addPropertyResult('scheduleExpression', 'ScheduleExpression', cfn_parse.FromCloudFormation.getString(properties.ScheduleExpression));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\n                                                                                                                                                                                                                                                                                                                                    \n    export interface StatisticsResourceProperty {\n                                                                                                                                                                                                                                                                                                  \n        readonly s3Uri?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StatisticsResourceProperty`\n *\n * @param properties - the TypeScript properties of a `StatisticsResourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_StatisticsResourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Uri', cdk.validateString)(properties.s3Uri));\n    return errors.wrap('supplied properties not correct for \"StatisticsResourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.StatisticsResource` resource\n *\n * @param properties - the TypeScript properties of a `StatisticsResourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.StatisticsResource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleStatisticsResourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_StatisticsResourcePropertyValidator(properties).assertSuccess();\n    return {\n        S3Uri: cdk.stringToCloudFormation(properties.s3Uri),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleStatisticsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.StatisticsResourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.StatisticsResourceProperty>();\n    ret.addPropertyResult('s3Uri', 'S3Uri', properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\nn    export interface StoppingConditionProperty {\nn        readonly maxRuntimeInSeconds: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StoppingConditionProperty`\n *\n * @param properties - the TypeScript properties of a `StoppingConditionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_StoppingConditionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maxRuntimeInSeconds', cdk.requiredValidator)(properties.maxRuntimeInSeconds));\n    errors.collect(cdk.propertyValidator('maxRuntimeInSeconds', cdk.validateNumber)(properties.maxRuntimeInSeconds));\n    return errors.wrap('supplied properties not correct for \"StoppingConditionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.StoppingCondition` resource\n *\n * @param properties - the TypeScript properties of a `StoppingConditionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.StoppingCondition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleStoppingConditionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_StoppingConditionPropertyValidator(properties).assertSuccess();\n    return {\n        MaxRuntimeInSeconds: cdk.numberToCloudFormation(properties.maxRuntimeInSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleStoppingConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.StoppingConditionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.StoppingConditionProperty>();\n    ret.addPropertyResult('maxRuntimeInSeconds', 'MaxRuntimeInSeconds', cfn_parse.FromCloudFormation.getNumber(properties.MaxRuntimeInSeconds));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMonitoringSchedule {\nn    export interface VpcConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly securityGroupIds: string[];\nn        readonly subnets: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `VpcConfigProperty`\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMonitoringSchedule_VpcConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.requiredValidator)(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnets', cdk.requiredValidator)(properties.subnets));\n    errors.collect(cdk.propertyValidator('subnets', cdk.listValidator(cdk.validateString))(properties.subnets));\n    return errors.wrap('supplied properties not correct for \"VpcConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.VpcConfig` resource\n *\n * @param properties - the TypeScript properties of a `VpcConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::MonitoringSchedule.VpcConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMonitoringScheduleVpcConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMonitoringSchedule_VpcConfigPropertyValidator(properties).assertSuccess();\n    return {\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        Subnets: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMonitoringScheduleVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.VpcConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.VpcConfigProperty>();\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds));\n    ret.addPropertyResult('subnets', 'Subnets', cfn_parse.FromCloudFormation.getStringArray(properties.Subnets));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                      \nexport interface CfnNotebookInstanceProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly instanceType: string;\n\nn    readonly roleArn: string;\n\nn    readonly acceleratorTypes?: string[];\n\nn    readonly additionalCodeRepositories?: string[];\n\nn    readonly defaultCodeRepository?: string;\n\nn    readonly directInternetAccess?: string;\n\nn    readonly kmsKeyId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly lifecycleConfigName?: string;\n\n                                                                                                                                                                                                                                                \n    readonly notebookInstanceName?: string;\n\n                                                                                                                                                                                                                                                                             \n    readonly platformIdentifier?: string;\n\nn    readonly rootAccess?: string;\n\n                                                                                                                                                                                                                                                                                                                                   \n    readonly securityGroupIds?: string[];\n\n                                                                                                                                                                                                                                                                                                         \n    readonly subnetId?: string;\n\nn    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly volumeSizeInGb?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNotebookInstanceProps`\n *\n * @param properties - the TypeScript properties of a `CfnNotebookInstanceProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNotebookInstancePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('acceleratorTypes', cdk.listValidator(cdk.validateString))(properties.acceleratorTypes));\n    errors.collect(cdk.propertyValidator('additionalCodeRepositories', cdk.listValidator(cdk.validateString))(properties.additionalCodeRepositories));\n    errors.collect(cdk.propertyValidator('defaultCodeRepository', cdk.validateString)(properties.defaultCodeRepository));\n    errors.collect(cdk.propertyValidator('directInternetAccess', cdk.validateString)(properties.directInternetAccess));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.requiredValidator)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('lifecycleConfigName', cdk.validateString)(properties.lifecycleConfigName));\n    errors.collect(cdk.propertyValidator('notebookInstanceName', cdk.validateString)(properties.notebookInstanceName));\n    errors.collect(cdk.propertyValidator('platformIdentifier', cdk.validateString)(properties.platformIdentifier));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('rootAccess', cdk.validateString)(properties.rootAccess));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnetId', cdk.validateString)(properties.subnetId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('volumeSizeInGb', cdk.validateNumber)(properties.volumeSizeInGb));\n    return errors.wrap('supplied properties not correct for \"CfnNotebookInstanceProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::NotebookInstance` resource\n *\n * @param properties - the TypeScript properties of a `CfnNotebookInstanceProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::NotebookInstance` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNotebookInstancePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNotebookInstancePropsValidator(properties).assertSuccess();\n    return {\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        AcceleratorTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorTypes),\n        AdditionalCodeRepositories: cdk.listMapper(cdk.stringToCloudFormation)(properties.additionalCodeRepositories),\n        DefaultCodeRepository: cdk.stringToCloudFormation(properties.defaultCodeRepository),\n        DirectInternetAccess: cdk.stringToCloudFormation(properties.directInternetAccess),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        LifecycleConfigName: cdk.stringToCloudFormation(properties.lifecycleConfigName),\n        NotebookInstanceName: cdk.stringToCloudFormation(properties.notebookInstanceName),\n        PlatformIdentifier: cdk.stringToCloudFormation(properties.platformIdentifier),\n        RootAccess: cdk.stringToCloudFormation(properties.rootAccess),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SubnetId: cdk.stringToCloudFormation(properties.subnetId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        VolumeSizeInGB: cdk.numberToCloudFormation(properties.volumeSizeInGb),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNotebookInstancePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNotebookInstanceProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNotebookInstanceProps>();\n    ret.addPropertyResult('instanceType', 'InstanceType', cfn_parse.FromCloudFormation.getString(properties.InstanceType));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('acceleratorTypes', 'AcceleratorTypes', properties.AcceleratorTypes != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AcceleratorTypes) : undefined);\n    ret.addPropertyResult('additionalCodeRepositories', 'AdditionalCodeRepositories', properties.AdditionalCodeRepositories != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AdditionalCodeRepositories) : undefined);\n    ret.addPropertyResult('defaultCodeRepository', 'DefaultCodeRepository', properties.DefaultCodeRepository != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultCodeRepository) : undefined);\n    ret.addPropertyResult('directInternetAccess', 'DirectInternetAccess', properties.DirectInternetAccess != null ? cfn_parse.FromCloudFormation.getString(properties.DirectInternetAccess) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('lifecycleConfigName', 'LifecycleConfigName', properties.LifecycleConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.LifecycleConfigName) : undefined);\n    ret.addPropertyResult('notebookInstanceName', 'NotebookInstanceName', properties.NotebookInstanceName != null ? cfn_parse.FromCloudFormation.getString(properties.NotebookInstanceName) : undefined);\n    ret.addPropertyResult('platformIdentifier', 'PlatformIdentifier', properties.PlatformIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.PlatformIdentifier) : undefined);\n    ret.addPropertyResult('rootAccess', 'RootAccess', properties.RootAccess != null ? cfn_parse.FromCloudFormation.getString(properties.RootAccess) : undefined);\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('subnetId', 'SubnetId', properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('volumeSizeInGb', 'VolumeSizeInGB', properties.VolumeSizeInGB != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSizeInGB) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnNotebookInstance extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::NotebookInstance\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNotebookInstance {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNotebookInstancePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNotebookInstance(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                             \n    public readonly attrNotebookInstanceName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public instanceType: string;\n\nn    public roleArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    public acceleratorTypes: string[] | undefined;\n\nn    public additionalCodeRepositories: string[] | undefined;\n\nn    public defaultCodeRepository: string | undefined;\n\nn    public directInternetAccess: string | undefined;\n\nn    public kmsKeyId: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public lifecycleConfigName: string | undefined;\n\n                                                                                                                                                                                                                                                \n    public notebookInstanceName: string | undefined;\n\n                                                                                                                                                                                                                                                                             \n    public platformIdentifier: string | undefined;\n\nn    public rootAccess: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                   \n    public securityGroupIds: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                         \n    public subnetId: string | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    public volumeSizeInGb: number | undefined;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnNotebookInstanceProps) {\n        super(scope, id, { type: CfnNotebookInstance.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'instanceType', this);\n        cdk.requireProperty(props, 'roleArn', this);\n        this.attrNotebookInstanceName = cdk.Token.asString(this.getAtt('NotebookInstanceName'));\n\n        this.instanceType = props.instanceType;\n        this.roleArn = props.roleArn;\n        this.acceleratorTypes = props.acceleratorTypes;\n        this.additionalCodeRepositories = props.additionalCodeRepositories;\n        this.defaultCodeRepository = props.defaultCodeRepository;\n        this.directInternetAccess = props.directInternetAccess;\n        this.kmsKeyId = props.kmsKeyId;\n        this.lifecycleConfigName = props.lifecycleConfigName;\n        this.notebookInstanceName = props.notebookInstanceName;\n        this.platformIdentifier = props.platformIdentifier;\n        this.rootAccess = props.rootAccess;\n        this.securityGroupIds = props.securityGroupIds;\n        this.subnetId = props.subnetId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::NotebookInstance\", props.tags, { tagPropertyName: 'tags' });\n        this.volumeSizeInGb = props.volumeSizeInGb;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNotebookInstance.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            instanceType: this.instanceType,\n            roleArn: this.roleArn,\n            acceleratorTypes: this.acceleratorTypes,\n            additionalCodeRepositories: this.additionalCodeRepositories,\n            defaultCodeRepository: this.defaultCodeRepository,\n            directInternetAccess: this.directInternetAccess,\n            kmsKeyId: this.kmsKeyId,\n            lifecycleConfigName: this.lifecycleConfigName,\n            notebookInstanceName: this.notebookInstanceName,\n            platformIdentifier: this.platformIdentifier,\n            rootAccess: this.rootAccess,\n            securityGroupIds: this.securityGroupIds,\n            subnetId: this.subnetId,\n            tags: this.tags.renderTags(),\n            volumeSizeInGb: this.volumeSizeInGb,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNotebookInstancePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                                    \nexport interface CfnNotebookInstanceLifecycleConfigProps {\n\n                                                                                                                                                                                                                                                                                               \n    readonly notebookInstanceLifecycleConfigName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    readonly onCreate?: Array<CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly onStart?: Array<CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnNotebookInstanceLifecycleConfigProps`\n *\n * @param properties - the TypeScript properties of a `CfnNotebookInstanceLifecycleConfigProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnNotebookInstanceLifecycleConfigPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('notebookInstanceLifecycleConfigName', cdk.validateString)(properties.notebookInstanceLifecycleConfigName));\n    errors.collect(cdk.propertyValidator('onCreate', cdk.listValidator(CfnNotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHookPropertyValidator))(properties.onCreate));\n    errors.collect(cdk.propertyValidator('onStart', cdk.listValidator(CfnNotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHookPropertyValidator))(properties.onStart));\n    return errors.wrap('supplied properties not correct for \"CfnNotebookInstanceLifecycleConfigProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::NotebookInstanceLifecycleConfig` resource\n *\n * @param properties - the TypeScript properties of a `CfnNotebookInstanceLifecycleConfigProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::NotebookInstanceLifecycleConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNotebookInstanceLifecycleConfigPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNotebookInstanceLifecycleConfigPropsValidator(properties).assertSuccess();\n    return {\n        NotebookInstanceLifecycleConfigName: cdk.stringToCloudFormation(properties.notebookInstanceLifecycleConfigName),\n        OnCreate: cdk.listMapper(cfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyToCloudFormation)(properties.onCreate),\n        OnStart: cdk.listMapper(cfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyToCloudFormation)(properties.onStart),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNotebookInstanceLifecycleConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNotebookInstanceLifecycleConfigProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNotebookInstanceLifecycleConfigProps>();\n    ret.addPropertyResult('notebookInstanceLifecycleConfigName', 'NotebookInstanceLifecycleConfigName', properties.NotebookInstanceLifecycleConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.NotebookInstanceLifecycleConfigName) : undefined);\n    ret.addPropertyResult('onCreate', 'OnCreate', properties.OnCreate != null ? cfn_parse.FromCloudFormation.getArray(CfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyFromCloudFormation)(properties.OnCreate) : undefined);\n    ret.addPropertyResult('onStart', 'OnStart', properties.OnStart != null ? cfn_parse.FromCloudFormation.getArray(CfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyFromCloudFormation)(properties.OnStart) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnNotebookInstanceLifecycleConfig extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::NotebookInstanceLifecycleConfig\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNotebookInstanceLifecycleConfig {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnNotebookInstanceLifecycleConfigPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnNotebookInstanceLifecycleConfig(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                 \n    public readonly attrNotebookInstanceLifecycleConfigName: string;\n\n                                                                                                                                                                                                                                                                                               \n    public notebookInstanceLifecycleConfigName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                      \n    public onCreate: Array<CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                \n    public onStart: Array<CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnNotebookInstanceLifecycleConfigProps = {}) {\n        super(scope, id, { type: CfnNotebookInstanceLifecycleConfig.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrNotebookInstanceLifecycleConfigName = cdk.Token.asString(this.getAtt('NotebookInstanceLifecycleConfigName'));\n\n        this.notebookInstanceLifecycleConfigName = props.notebookInstanceLifecycleConfigName;\n        this.onCreate = props.onCreate;\n        this.onStart = props.onStart;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnNotebookInstanceLifecycleConfig.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            notebookInstanceLifecycleConfigName: this.notebookInstanceLifecycleConfigName,\n            onCreate: this.onCreate,\n            onStart: this.onStart,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnNotebookInstanceLifecycleConfigPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnNotebookInstanceLifecycleConfig {\n                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface NotebookInstanceLifecycleHookProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly content?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NotebookInstanceLifecycleHookProperty`\n *\n * @param properties - the TypeScript properties of a `NotebookInstanceLifecycleHookProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnNotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHookPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('content', cdk.validateString)(properties.content));\n    return errors.wrap('supplied properties not correct for \"NotebookInstanceLifecycleHookProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::NotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHook` resource\n *\n * @param properties - the TypeScript properties of a `NotebookInstanceLifecycleHookProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::NotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHook` resource.\n */\n// @ts-ignore TS6133\nfunction cfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnNotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHookPropertyValidator(properties).assertSuccess();\n    return {\n        Content: cdk.stringToCloudFormation(properties.content),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty>();\n    ret.addPropertyResult('content', 'Content', properties.Content != null ? cfn_parse.FromCloudFormation.getString(properties.Content) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                      \nexport interface CfnPipelineProps {\n\n                                                                                                                                                                                                                                                                                  \n    readonly pipelineDefinition: any | cdk.IResolvable;\n\n                                                                                                                                                                                                           \n    readonly pipelineName: string;\n\n                                                                                                                                                                                                                                                         \n    readonly roleArn: string;\n\n                                                                                                                                                                                                                                                    \n    readonly parallelismConfiguration?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                         \n    readonly pipelineDescription?: string;\n\n                                                                                                                                                                                                                          \n    readonly pipelineDisplayName?: string;\n\n                                                                                                                                                                                                   \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPipelineProps`\n *\n * @param properties - the TypeScript properties of a `CfnPipelineProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPipelinePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('parallelismConfiguration', cdk.validateObject)(properties.parallelismConfiguration));\n    errors.collect(cdk.propertyValidator('pipelineDefinition', cdk.requiredValidator)(properties.pipelineDefinition));\n    errors.collect(cdk.propertyValidator('pipelineDefinition', cdk.validateObject)(properties.pipelineDefinition));\n    errors.collect(cdk.propertyValidator('pipelineDescription', cdk.validateString)(properties.pipelineDescription));\n    errors.collect(cdk.propertyValidator('pipelineDisplayName', cdk.validateString)(properties.pipelineDisplayName));\n    errors.collect(cdk.propertyValidator('pipelineName', cdk.requiredValidator)(properties.pipelineName));\n    errors.collect(cdk.propertyValidator('pipelineName', cdk.validateString)(properties.pipelineName));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnPipelineProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Pipeline` resource\n *\n * @param properties - the TypeScript properties of a `CfnPipelineProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Pipeline` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPipelinePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPipelinePropsValidator(properties).assertSuccess();\n    return {\n        PipelineDefinition: cdk.objectToCloudFormation(properties.pipelineDefinition),\n        PipelineName: cdk.stringToCloudFormation(properties.pipelineName),\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        ParallelismConfiguration: cdk.objectToCloudFormation(properties.parallelismConfiguration),\n        PipelineDescription: cdk.stringToCloudFormation(properties.pipelineDescription),\n        PipelineDisplayName: cdk.stringToCloudFormation(properties.pipelineDisplayName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPipelinePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPipelineProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipelineProps>();\n    ret.addPropertyResult('pipelineDefinition', 'PipelineDefinition', cfn_parse.FromCloudFormation.getAny(properties.PipelineDefinition));\n    ret.addPropertyResult('pipelineName', 'PipelineName', cfn_parse.FromCloudFormation.getString(properties.PipelineName));\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('parallelismConfiguration', 'ParallelismConfiguration', properties.ParallelismConfiguration != null ? cfn_parse.FromCloudFormation.getAny(properties.ParallelismConfiguration) : undefined);\n    ret.addPropertyResult('pipelineDescription', 'PipelineDescription', properties.PipelineDescription != null ? cfn_parse.FromCloudFormation.getString(properties.PipelineDescription) : undefined);\n    ret.addPropertyResult('pipelineDisplayName', 'PipelineDisplayName', properties.PipelineDisplayName != null ? cfn_parse.FromCloudFormation.getString(properties.PipelineDisplayName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPipeline extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::Pipeline\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPipeline {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPipelinePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPipeline(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                  \n    public pipelineDefinition: any | cdk.IResolvable;\n\n                                                                                                                                                                                                           \n    public pipelineName: string;\n\n                                                                                                                                                                                                                                                         \n    public roleArn: string;\n\n                                                                                                                                                                                                                                                    \n    public parallelismConfiguration: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                         \n    public pipelineDescription: string | undefined;\n\n                                                                                                                                                                                                                          \n    public pipelineDisplayName: string | undefined;\n\n                                                                                                                                                                                                   \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnPipelineProps) {\n        super(scope, id, { type: CfnPipeline.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'pipelineDefinition', this);\n        cdk.requireProperty(props, 'pipelineName', this);\n        cdk.requireProperty(props, 'roleArn', this);\n\n        this.pipelineDefinition = props.pipelineDefinition;\n        this.pipelineName = props.pipelineName;\n        this.roleArn = props.roleArn;\n        this.parallelismConfiguration = props.parallelismConfiguration;\n        this.pipelineDescription = props.pipelineDescription;\n        this.pipelineDisplayName = props.pipelineDisplayName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::Pipeline\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPipeline.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            pipelineDefinition: this.pipelineDefinition,\n            pipelineName: this.pipelineName,\n            roleArn: this.roleArn,\n            parallelismConfiguration: this.parallelismConfiguration,\n            pipelineDescription: this.pipelineDescription,\n            pipelineDisplayName: this.pipelineDisplayName,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPipelinePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                    \nexport interface CfnProjectProps {\n\n                                                                                                                                                                                                       \n    readonly projectName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly serviceCatalogProvisioningDetails: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                     \n    readonly projectDescription?: string;\n\nn    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnProjectProps`\n *\n * @param properties - the TypeScript properties of a `CfnProjectProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnProjectPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('projectDescription', cdk.validateString)(properties.projectDescription));\n    errors.collect(cdk.propertyValidator('projectName', cdk.requiredValidator)(properties.projectName));\n    errors.collect(cdk.propertyValidator('projectName', cdk.validateString)(properties.projectName));\n    errors.collect(cdk.propertyValidator('serviceCatalogProvisioningDetails', cdk.requiredValidator)(properties.serviceCatalogProvisioningDetails));\n    errors.collect(cdk.propertyValidator('serviceCatalogProvisioningDetails', cdk.validateObject)(properties.serviceCatalogProvisioningDetails));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnProjectProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Project` resource\n *\n * @param properties - the TypeScript properties of a `CfnProjectProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Project` resource.\n */\n// @ts-ignore TS6133\nfunction cfnProjectPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnProjectPropsValidator(properties).assertSuccess();\n    return {\n        ProjectName: cdk.stringToCloudFormation(properties.projectName),\n        ServiceCatalogProvisioningDetails: cdk.objectToCloudFormation(properties.serviceCatalogProvisioningDetails),\n        ProjectDescription: cdk.stringToCloudFormation(properties.projectDescription),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnProjectPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProjectProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProjectProps>();\n    ret.addPropertyResult('projectName', 'ProjectName', cfn_parse.FromCloudFormation.getString(properties.ProjectName));\n    ret.addPropertyResult('serviceCatalogProvisioningDetails', 'ServiceCatalogProvisioningDetails', cfn_parse.FromCloudFormation.getAny(properties.ServiceCatalogProvisioningDetails));\n    ret.addPropertyResult('projectDescription', 'ProjectDescription', properties.ProjectDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ProjectDescription) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \nexport class CfnProject extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::Project\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnProject {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnProjectPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnProject(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                          \n    public readonly attrCreationTime: string;\n\n                                                                                                                \n    public readonly attrProjectArn: string;\n\n                                                                                                                                                          \n    public readonly attrProjectId: string;\n\n                                                                                               \n    public readonly attrProjectStatus: string;\n\n                                                                                                                                                                                                       \n    public projectName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public serviceCatalogProvisioningDetails: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                     \n    public projectDescription: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnProjectProps) {\n        super(scope, id, { type: CfnProject.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'projectName', this);\n        cdk.requireProperty(props, 'serviceCatalogProvisioningDetails', this);\n        this.attrCreationTime = cdk.Token.asString(this.getAtt('CreationTime'));\n        this.attrProjectArn = cdk.Token.asString(this.getAtt('ProjectArn'));\n        this.attrProjectId = cdk.Token.asString(this.getAtt('ProjectId'));\n        this.attrProjectStatus = cdk.Token.asString(this.getAtt('ProjectStatus'));\n\n        this.projectName = props.projectName;\n        this.serviceCatalogProvisioningDetails = props.serviceCatalogProvisioningDetails;\n        this.projectDescription = props.projectDescription;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::Project\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnProject.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            projectName: this.projectName,\n            serviceCatalogProvisioningDetails: this.serviceCatalogProvisioningDetails,\n            projectDescription: this.projectDescription,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnProjectPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                            \nexport interface CfnUserProfileProps {\n\n                                                                                                                                                                                                  \n    readonly domainId: string;\n\n                                                                                                                                                                                                                 \n    readonly userProfileName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly singleSignOnUserIdentifier?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly singleSignOnUserValue?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                \n    readonly userSettings?: CfnUserProfile.UserSettingsProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserProfileProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserProfileProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserProfilePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('domainId', cdk.requiredValidator)(properties.domainId));\n    errors.collect(cdk.propertyValidator('domainId', cdk.validateString)(properties.domainId));\n    errors.collect(cdk.propertyValidator('singleSignOnUserIdentifier', cdk.validateString)(properties.singleSignOnUserIdentifier));\n    errors.collect(cdk.propertyValidator('singleSignOnUserValue', cdk.validateString)(properties.singleSignOnUserValue));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('userProfileName', cdk.requiredValidator)(properties.userProfileName));\n    errors.collect(cdk.propertyValidator('userProfileName', cdk.validateString)(properties.userProfileName));\n    errors.collect(cdk.propertyValidator('userSettings', CfnUserProfile_UserSettingsPropertyValidator)(properties.userSettings));\n    return errors.wrap('supplied properties not correct for \"CfnUserProfileProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserProfileProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserProfilePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserProfilePropsValidator(properties).assertSuccess();\n    return {\n        DomainId: cdk.stringToCloudFormation(properties.domainId),\n        UserProfileName: cdk.stringToCloudFormation(properties.userProfileName),\n        SingleSignOnUserIdentifier: cdk.stringToCloudFormation(properties.singleSignOnUserIdentifier),\n        SingleSignOnUserValue: cdk.stringToCloudFormation(properties.singleSignOnUserValue),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        UserSettings: cfnUserProfileUserSettingsPropertyToCloudFormation(properties.userSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserProfilePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfileProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfileProps>();\n    ret.addPropertyResult('domainId', 'DomainId', cfn_parse.FromCloudFormation.getString(properties.DomainId));\n    ret.addPropertyResult('userProfileName', 'UserProfileName', cfn_parse.FromCloudFormation.getString(properties.UserProfileName));\n    ret.addPropertyResult('singleSignOnUserIdentifier', 'SingleSignOnUserIdentifier', properties.SingleSignOnUserIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.SingleSignOnUserIdentifier) : undefined);\n    ret.addPropertyResult('singleSignOnUserValue', 'SingleSignOnUserValue', properties.SingleSignOnUserValue != null ? cfn_parse.FromCloudFormation.getString(properties.SingleSignOnUserValue) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('userSettings', 'UserSettings', properties.UserSettings != null ? CfnUserProfileUserSettingsPropertyFromCloudFormation(properties.UserSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport class CfnUserProfile extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::UserProfile\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserProfile {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserProfilePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUserProfile(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                         \n    public readonly attrUserProfileArn: string;\n\n                                                                                                                                                                                                  \n    public domainId: string;\n\n                                                                                                                                                                                                                 \n    public userProfileName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public singleSignOnUserIdentifier: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public singleSignOnUserValue: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                \n    public userSettings: CfnUserProfile.UserSettingsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnUserProfileProps) {\n        super(scope, id, { type: CfnUserProfile.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'domainId', this);\n        cdk.requireProperty(props, 'userProfileName', this);\n        this.attrUserProfileArn = cdk.Token.asString(this.getAtt('UserProfileArn'));\n\n        this.domainId = props.domainId;\n        this.userProfileName = props.userProfileName;\n        this.singleSignOnUserIdentifier = props.singleSignOnUserIdentifier;\n        this.singleSignOnUserValue = props.singleSignOnUserValue;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::UserProfile\", props.tags, { tagPropertyName: 'tags' });\n        this.userSettings = props.userSettings;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUserProfile.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            domainId: this.domainId,\n            userProfileName: this.userProfileName,\n            singleSignOnUserIdentifier: this.singleSignOnUserIdentifier,\n            singleSignOnUserValue: this.singleSignOnUserValue,\n            tags: this.tags.renderTags(),\n            userSettings: this.userSettings,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserProfilePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnUserProfile {\n                                                                                                                                                                                                                                                                                                                                                                        \n    export interface CustomImageProperty {\n                                                                                                                                                                                                                                                                           \n        readonly appImageConfigName: string;\n                                                                                                                                                                                                                                                                                               \n        readonly imageName: string;\n                                                                                                                                                                                                                                                                                  \n        readonly imageVersionNumber?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CustomImageProperty`\n *\n * @param properties - the TypeScript properties of a `CustomImageProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserProfile_CustomImagePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('appImageConfigName', cdk.requiredValidator)(properties.appImageConfigName));\n    errors.collect(cdk.propertyValidator('appImageConfigName', cdk.validateString)(properties.appImageConfigName));\n    errors.collect(cdk.propertyValidator('imageName', cdk.requiredValidator)(properties.imageName));\n    errors.collect(cdk.propertyValidator('imageName', cdk.validateString)(properties.imageName));\n    errors.collect(cdk.propertyValidator('imageVersionNumber', cdk.validateNumber)(properties.imageVersionNumber));\n    return errors.wrap('supplied properties not correct for \"CustomImageProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile.CustomImage` resource\n *\n * @param properties - the TypeScript properties of a `CustomImageProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile.CustomImage` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserProfileCustomImagePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserProfile_CustomImagePropertyValidator(properties).assertSuccess();\n    return {\n        AppImageConfigName: cdk.stringToCloudFormation(properties.appImageConfigName),\n        ImageName: cdk.stringToCloudFormation(properties.imageName),\n        ImageVersionNumber: cdk.numberToCloudFormation(properties.imageVersionNumber),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserProfileCustomImagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.CustomImageProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.CustomImageProperty>();\n    ret.addPropertyResult('appImageConfigName', 'AppImageConfigName', cfn_parse.FromCloudFormation.getString(properties.AppImageConfigName));\n    ret.addPropertyResult('imageName', 'ImageName', cfn_parse.FromCloudFormation.getString(properties.ImageName));\n    ret.addPropertyResult('imageVersionNumber', 'ImageVersionNumber', properties.ImageVersionNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.ImageVersionNumber) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserProfile {\n                                                                                                                                                                                                                                                            \n    export interface JupyterServerAppSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly defaultResourceSpec?: CfnUserProfile.ResourceSpecProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `JupyterServerAppSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `JupyterServerAppSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserProfile_JupyterServerAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultResourceSpec', CfnUserProfile_ResourceSpecPropertyValidator)(properties.defaultResourceSpec));\n    return errors.wrap('supplied properties not correct for \"JupyterServerAppSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile.JupyterServerAppSettings` resource\n *\n * @param properties - the TypeScript properties of a `JupyterServerAppSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile.JupyterServerAppSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserProfileJupyterServerAppSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserProfile_JupyterServerAppSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        DefaultResourceSpec: cfnUserProfileResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserProfileJupyterServerAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.JupyterServerAppSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.JupyterServerAppSettingsProperty>();\n    ret.addPropertyResult('defaultResourceSpec', 'DefaultResourceSpec', properties.DefaultResourceSpec != null ? CfnUserProfileResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserProfile {\n                                                                                                                                                                                                                                                            \n    export interface KernelGatewayAppSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly customImages?: Array<CfnUserProfile.CustomImageProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly defaultResourceSpec?: CfnUserProfile.ResourceSpecProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KernelGatewayAppSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `KernelGatewayAppSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserProfile_KernelGatewayAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('customImages', cdk.listValidator(CfnUserProfile_CustomImagePropertyValidator))(properties.customImages));\n    errors.collect(cdk.propertyValidator('defaultResourceSpec', CfnUserProfile_ResourceSpecPropertyValidator)(properties.defaultResourceSpec));\n    return errors.wrap('supplied properties not correct for \"KernelGatewayAppSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile.KernelGatewayAppSettings` resource\n *\n * @param properties - the TypeScript properties of a `KernelGatewayAppSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile.KernelGatewayAppSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserProfileKernelGatewayAppSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserProfile_KernelGatewayAppSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        CustomImages: cdk.listMapper(cfnUserProfileCustomImagePropertyToCloudFormation)(properties.customImages),\n        DefaultResourceSpec: cfnUserProfileResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserProfileKernelGatewayAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.KernelGatewayAppSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.KernelGatewayAppSettingsProperty>();\n    ret.addPropertyResult('customImages', 'CustomImages', properties.CustomImages != null ? cfn_parse.FromCloudFormation.getArray(CfnUserProfileCustomImagePropertyFromCloudFormation)(properties.CustomImages) : undefined);\n    ret.addPropertyResult('defaultResourceSpec', 'DefaultResourceSpec', properties.DefaultResourceSpec != null ? CfnUserProfileResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserProfile {\n                                                                                                                                                                                                                                                                                                                                      \n    export interface ResourceSpecProperty {\n                                                                                                                                                                                                                                                                                         \n        readonly instanceType?: string;\n                                                                                                                                                                                                                                                                                                              \n        readonly sageMakerImageArn?: string;\n                                                                                                                                                                                                                                                                                                         \n        readonly sageMakerImageVersionArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ResourceSpecProperty`\n *\n * @param properties - the TypeScript properties of a `ResourceSpecProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserProfile_ResourceSpecPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('instanceType', cdk.validateString)(properties.instanceType));\n    errors.collect(cdk.propertyValidator('sageMakerImageArn', cdk.validateString)(properties.sageMakerImageArn));\n    errors.collect(cdk.propertyValidator('sageMakerImageVersionArn', cdk.validateString)(properties.sageMakerImageVersionArn));\n    return errors.wrap('supplied properties not correct for \"ResourceSpecProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile.ResourceSpec` resource\n *\n * @param properties - the TypeScript properties of a `ResourceSpecProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile.ResourceSpec` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserProfileResourceSpecPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserProfile_ResourceSpecPropertyValidator(properties).assertSuccess();\n    return {\n        InstanceType: cdk.stringToCloudFormation(properties.instanceType),\n        SageMakerImageArn: cdk.stringToCloudFormation(properties.sageMakerImageArn),\n        SageMakerImageVersionArn: cdk.stringToCloudFormation(properties.sageMakerImageVersionArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserProfileResourceSpecPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.ResourceSpecProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.ResourceSpecProperty>();\n    ret.addPropertyResult('instanceType', 'InstanceType', properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined);\n    ret.addPropertyResult('sageMakerImageArn', 'SageMakerImageArn', properties.SageMakerImageArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageArn) : undefined);\n    ret.addPropertyResult('sageMakerImageVersionArn', 'SageMakerImageVersionArn', properties.SageMakerImageVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageVersionArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserProfile {\nn    export interface SharingSettingsProperty {\n                                                                                                                                                                                                                                                                                                                                                        \n        readonly notebookOutputOption?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly s3KmsKeyId?: string;\n                                                                                                                                                                                                                                                                                                                                                          \n        readonly s3OutputPath?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SharingSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `SharingSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserProfile_SharingSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('notebookOutputOption', cdk.validateString)(properties.notebookOutputOption));\n    errors.collect(cdk.propertyValidator('s3KmsKeyId', cdk.validateString)(properties.s3KmsKeyId));\n    errors.collect(cdk.propertyValidator('s3OutputPath', cdk.validateString)(properties.s3OutputPath));\n    return errors.wrap('supplied properties not correct for \"SharingSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile.SharingSettings` resource\n *\n * @param properties - the TypeScript properties of a `SharingSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile.SharingSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserProfileSharingSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserProfile_SharingSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        NotebookOutputOption: cdk.stringToCloudFormation(properties.notebookOutputOption),\n        S3KmsKeyId: cdk.stringToCloudFormation(properties.s3KmsKeyId),\n        S3OutputPath: cdk.stringToCloudFormation(properties.s3OutputPath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserProfileSharingSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.SharingSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.SharingSettingsProperty>();\n    ret.addPropertyResult('notebookOutputOption', 'NotebookOutputOption', properties.NotebookOutputOption != null ? cfn_parse.FromCloudFormation.getString(properties.NotebookOutputOption) : undefined);\n    ret.addPropertyResult('s3KmsKeyId', 'S3KmsKeyId', properties.S3KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.S3KmsKeyId) : undefined);\n    ret.addPropertyResult('s3OutputPath', 'S3OutputPath', properties.S3OutputPath != null ? cfn_parse.FromCloudFormation.getString(properties.S3OutputPath) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUserProfile {\nn    export interface UserSettingsProperty {\n                                                                                                                                                                                                                                                                         \n        readonly executionRole?: string;\n                                                                                                                                                                                                                                                                                      \n        readonly jupyterServerAppSettings?: CfnUserProfile.JupyterServerAppSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                    \n        readonly kernelGatewayAppSettings?: CfnUserProfile.KernelGatewayAppSettingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly securityGroups?: string[];\n                                                                                                                                                                                                                                                                                                    \n        readonly sharingSettings?: CfnUserProfile.SharingSettingsProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `UserSettingsProperty`\n *\n * @param properties - the TypeScript properties of a `UserSettingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserProfile_UserSettingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('executionRole', cdk.validateString)(properties.executionRole));\n    errors.collect(cdk.propertyValidator('jupyterServerAppSettings', CfnUserProfile_JupyterServerAppSettingsPropertyValidator)(properties.jupyterServerAppSettings));\n    errors.collect(cdk.propertyValidator('kernelGatewayAppSettings', CfnUserProfile_KernelGatewayAppSettingsPropertyValidator)(properties.kernelGatewayAppSettings));\n    errors.collect(cdk.propertyValidator('securityGroups', cdk.listValidator(cdk.validateString))(properties.securityGroups));\n    errors.collect(cdk.propertyValidator('sharingSettings', CfnUserProfile_SharingSettingsPropertyValidator)(properties.sharingSettings));\n    return errors.wrap('supplied properties not correct for \"UserSettingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile.UserSettings` resource\n *\n * @param properties - the TypeScript properties of a `UserSettingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::UserProfile.UserSettings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserProfileUserSettingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserProfile_UserSettingsPropertyValidator(properties).assertSuccess();\n    return {\n        ExecutionRole: cdk.stringToCloudFormation(properties.executionRole),\n        JupyterServerAppSettings: cfnUserProfileJupyterServerAppSettingsPropertyToCloudFormation(properties.jupyterServerAppSettings),\n        KernelGatewayAppSettings: cfnUserProfileKernelGatewayAppSettingsPropertyToCloudFormation(properties.kernelGatewayAppSettings),\n        SecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),\n        SharingSettings: cfnUserProfileSharingSettingsPropertyToCloudFormation(properties.sharingSettings),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserProfileUserSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.UserSettingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.UserSettingsProperty>();\n    ret.addPropertyResult('executionRole', 'ExecutionRole', properties.ExecutionRole != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRole) : undefined);\n    ret.addPropertyResult('jupyterServerAppSettings', 'JupyterServerAppSettings', properties.JupyterServerAppSettings != null ? CfnUserProfileJupyterServerAppSettingsPropertyFromCloudFormation(properties.JupyterServerAppSettings) : undefined);\n    ret.addPropertyResult('kernelGatewayAppSettings', 'KernelGatewayAppSettings', properties.KernelGatewayAppSettings != null ? CfnUserProfileKernelGatewayAppSettingsPropertyFromCloudFormation(properties.KernelGatewayAppSettings) : undefined);\n    ret.addPropertyResult('securityGroups', 'SecurityGroups', properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroups) : undefined);\n    ret.addPropertyResult('sharingSettings', 'SharingSettings', properties.SharingSettings != null ? CfnUserProfileSharingSettingsPropertyFromCloudFormation(properties.SharingSettings) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                      \nexport interface CfnWorkteamProps {\n\n                                                                                                                                                                                                                \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly memberDefinitions?: Array<CfnWorkteam.MemberDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                               \n    readonly notificationConfiguration?: CfnWorkteam.NotificationConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                         \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                            \n    readonly workteamName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnWorkteamProps`\n *\n * @param properties - the TypeScript properties of a `CfnWorkteamProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnWorkteamPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('memberDefinitions', cdk.listValidator(CfnWorkteam_MemberDefinitionPropertyValidator))(properties.memberDefinitions));\n    errors.collect(cdk.propertyValidator('notificationConfiguration', CfnWorkteam_NotificationConfigurationPropertyValidator)(properties.notificationConfiguration));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('workteamName', cdk.validateString)(properties.workteamName));\n    return errors.wrap('supplied properties not correct for \"CfnWorkteamProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Workteam` resource\n *\n * @param properties - the TypeScript properties of a `CfnWorkteamProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Workteam` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWorkteamPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWorkteamPropsValidator(properties).assertSuccess();\n    return {\n        Description: cdk.stringToCloudFormation(properties.description),\n        MemberDefinitions: cdk.listMapper(cfnWorkteamMemberDefinitionPropertyToCloudFormation)(properties.memberDefinitions),\n        NotificationConfiguration: cfnWorkteamNotificationConfigurationPropertyToCloudFormation(properties.notificationConfiguration),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        WorkteamName: cdk.stringToCloudFormation(properties.workteamName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWorkteamPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWorkteamProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWorkteamProps>();\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('memberDefinitions', 'MemberDefinitions', properties.MemberDefinitions != null ? cfn_parse.FromCloudFormation.getArray(CfnWorkteamMemberDefinitionPropertyFromCloudFormation)(properties.MemberDefinitions) : undefined);\n    ret.addPropertyResult('notificationConfiguration', 'NotificationConfiguration', properties.NotificationConfiguration != null ? CfnWorkteamNotificationConfigurationPropertyFromCloudFormation(properties.NotificationConfiguration) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('workteamName', 'WorkteamName', properties.WorkteamName != null ? cfn_parse.FromCloudFormation.getString(properties.WorkteamName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnWorkteam extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SageMaker::Workteam\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnWorkteam {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnWorkteamPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnWorkteam(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                   \n    public readonly attrWorkteamName: string;\n\n                                                                                                                                                                                                                \n    public description: string | undefined;\n\nn    public memberDefinitions: Array<CfnWorkteam.MemberDefinitionProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                               \n    public notificationConfiguration: CfnWorkteam.NotificationConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                         \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                            \n    public workteamName: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnWorkteamProps = {}) {\n        super(scope, id, { type: CfnWorkteam.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrWorkteamName = cdk.Token.asString(this.getAtt('WorkteamName'));\n\n        this.description = props.description;\n        this.memberDefinitions = props.memberDefinitions;\n        this.notificationConfiguration = props.notificationConfiguration;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SageMaker::Workteam\", props.tags, { tagPropertyName: 'tags' });\n        this.workteamName = props.workteamName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnWorkteam.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            description: this.description,\n            memberDefinitions: this.memberDefinitions,\n            notificationConfiguration: this.notificationConfiguration,\n            tags: this.tags.renderTags(),\n            workteamName: this.workteamName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnWorkteamPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnWorkteam {\n                                                                                                                                                                                                                                                                                                                   \n    export interface CognitoMemberDefinitionProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly cognitoClientId: string;\n                                                                                                                                                                                                                                                                                                                          \n        readonly cognitoUserGroup: string;\n                                                                                                                                                                                                                                                                                                                        \n        readonly cognitoUserPool: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CognitoMemberDefinitionProperty`\n *\n * @param properties - the TypeScript properties of a `CognitoMemberDefinitionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnWorkteam_CognitoMemberDefinitionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cognitoClientId', cdk.requiredValidator)(properties.cognitoClientId));\n    errors.collect(cdk.propertyValidator('cognitoClientId', cdk.validateString)(properties.cognitoClientId));\n    errors.collect(cdk.propertyValidator('cognitoUserGroup', cdk.requiredValidator)(properties.cognitoUserGroup));\n    errors.collect(cdk.propertyValidator('cognitoUserGroup', cdk.validateString)(properties.cognitoUserGroup));\n    errors.collect(cdk.propertyValidator('cognitoUserPool', cdk.requiredValidator)(properties.cognitoUserPool));\n    errors.collect(cdk.propertyValidator('cognitoUserPool', cdk.validateString)(properties.cognitoUserPool));\n    return errors.wrap('supplied properties not correct for \"CognitoMemberDefinitionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Workteam.CognitoMemberDefinition` resource\n *\n * @param properties - the TypeScript properties of a `CognitoMemberDefinitionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Workteam.CognitoMemberDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWorkteamCognitoMemberDefinitionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWorkteam_CognitoMemberDefinitionPropertyValidator(properties).assertSuccess();\n    return {\n        CognitoClientId: cdk.stringToCloudFormation(properties.cognitoClientId),\n        CognitoUserGroup: cdk.stringToCloudFormation(properties.cognitoUserGroup),\n        CognitoUserPool: cdk.stringToCloudFormation(properties.cognitoUserPool),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWorkteamCognitoMemberDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWorkteam.CognitoMemberDefinitionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWorkteam.CognitoMemberDefinitionProperty>();\n    ret.addPropertyResult('cognitoClientId', 'CognitoClientId', cfn_parse.FromCloudFormation.getString(properties.CognitoClientId));\n    ret.addPropertyResult('cognitoUserGroup', 'CognitoUserGroup', cfn_parse.FromCloudFormation.getString(properties.CognitoUserGroup));\n    ret.addPropertyResult('cognitoUserPool', 'CognitoUserPool', cfn_parse.FromCloudFormation.getString(properties.CognitoUserPool));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnWorkteam {\n                                                                                                                                                                                                                                                                                                        \n    export interface MemberDefinitionProperty {\n                                                                                                                                                                                                                                                                                                                 \n        readonly cognitoMemberDefinition: CfnWorkteam.CognitoMemberDefinitionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MemberDefinitionProperty`\n *\n * @param properties - the TypeScript properties of a `MemberDefinitionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnWorkteam_MemberDefinitionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cognitoMemberDefinition', cdk.requiredValidator)(properties.cognitoMemberDefinition));\n    errors.collect(cdk.propertyValidator('cognitoMemberDefinition', CfnWorkteam_CognitoMemberDefinitionPropertyValidator)(properties.cognitoMemberDefinition));\n    return errors.wrap('supplied properties not correct for \"MemberDefinitionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Workteam.MemberDefinition` resource\n *\n * @param properties - the TypeScript properties of a `MemberDefinitionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Workteam.MemberDefinition` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWorkteamMemberDefinitionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWorkteam_MemberDefinitionPropertyValidator(properties).assertSuccess();\n    return {\n        CognitoMemberDefinition: cfnWorkteamCognitoMemberDefinitionPropertyToCloudFormation(properties.cognitoMemberDefinition),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWorkteamMemberDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWorkteam.MemberDefinitionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWorkteam.MemberDefinitionProperty>();\n    ret.addPropertyResult('cognitoMemberDefinition', 'CognitoMemberDefinition', CfnWorkteamCognitoMemberDefinitionPropertyFromCloudFormation(properties.CognitoMemberDefinition));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnWorkteam {\n                                                                                                                                                                                                                                                                                                                  \n    export interface NotificationConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                \n        readonly notificationTopicArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NotificationConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `NotificationConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnWorkteam_NotificationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('notificationTopicArn', cdk.requiredValidator)(properties.notificationTopicArn));\n    errors.collect(cdk.propertyValidator('notificationTopicArn', cdk.validateString)(properties.notificationTopicArn));\n    return errors.wrap('supplied properties not correct for \"NotificationConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SageMaker::Workteam.NotificationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `NotificationConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SageMaker::Workteam.NotificationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWorkteamNotificationConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWorkteam_NotificationConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        NotificationTopicArn: cdk.stringToCloudFormation(properties.notificationTopicArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWorkteamNotificationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWorkteam.NotificationConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWorkteam.NotificationConfigurationProperty>();\n    ret.addPropertyResult('notificationTopicArn', 'NotificationTopicArn', cfn_parse.FromCloudFormation.getString(properties.NotificationTopicArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
