{
  "version": 3,
  "sources": ["servicecatalogappregistry.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:33.866Z\",\"fingerprint\":\"tgwK9PrWzuwxsfur1E/tBgS4vNcMkuQTKaPYF+f+9bI=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                            \nexport interface CfnApplicationProps {\n\n                                                                                                                                                                                                                                                                                                                             \n    readonly name: string;\n\n                                                                                                                                                                                                                                                          \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                              \n    readonly tags?: { [key: string]: (string) };\n}\n\n/**\n * Determine whether the given properties match those of a `CfnApplicationProps`\n *\n * @param properties - the TypeScript properties of a `CfnApplicationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnApplicationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.hashValidator(cdk.validateString))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnApplicationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ServiceCatalogAppRegistry::Application` resource\n *\n * @param properties - the TypeScript properties of a `CfnApplicationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ServiceCatalogAppRegistry::Application` resource.\n */\n// @ts-ignore TS6133\nfunction cfnApplicationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnApplicationPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnApplicationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnApplicationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApplicationProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                             \nexport class CfnApplication extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ServiceCatalogAppRegistry::Application\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApplication {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnApplicationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnApplication(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                       \n    public readonly attrArn: string;\n\n                                                                                                        \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                                             \n    public name: string;\n\n                                                                                                                                                                                                                                                          \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                              \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnApplicationProps) {\n        super(scope, id, { type: CfnApplication.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.name = props.name;\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::ServiceCatalogAppRegistry::Application\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnApplication.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnApplicationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                  \nexport interface CfnAttributeGroupProps {\n\n                                                                                                                                                                                                                                                                                                                                                                           \n    readonly attributes: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                      \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                           \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                        \n    readonly tags?: { [key: string]: (string) };\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAttributeGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnAttributeGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAttributeGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attributes', cdk.requiredValidator)(properties.attributes));\n    errors.collect(cdk.propertyValidator('attributes', cdk.validateObject)(properties.attributes));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.hashValidator(cdk.validateString))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnAttributeGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ServiceCatalogAppRegistry::AttributeGroup` resource\n *\n * @param properties - the TypeScript properties of a `CfnAttributeGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ServiceCatalogAppRegistry::AttributeGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAttributeGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAttributeGroupPropsValidator(properties).assertSuccess();\n    return {\n        Attributes: cdk.objectToCloudFormation(properties.attributes),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.hashMapper(cdk.stringToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAttributeGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAttributeGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAttributeGroupProps>();\n    ret.addPropertyResult('attributes', 'Attributes', cfn_parse.FromCloudFormation.getAny(properties.Attributes));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnAttributeGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ServiceCatalogAppRegistry::AttributeGroup\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAttributeGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAttributeGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAttributeGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                           \n    public readonly attrArn: string;\n\n                                                                                                            \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                           \n    public attributes: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                      \n    public name: string;\n\n                                                                                                                                                                                                                                                                                           \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnAttributeGroupProps) {\n        super(scope, id, { type: CfnAttributeGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'attributes', this);\n        cdk.requireProperty(props, 'name', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.attributes = props.attributes;\n        this.name = props.name;\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::ServiceCatalogAppRegistry::AttributeGroup\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAttributeGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            attributes: this.attributes,\n            name: this.name,\n            description: this.description,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAttributeGroupPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                                        \nexport interface CfnAttributeGroupAssociationProps {\n\n                                                                                                                                                                                                                                                                                     \n    readonly application: string;\n\n                                                                                                                                                                                                                                                                                                                                                  \n    readonly attributeGroup: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAttributeGroupAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnAttributeGroupAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAttributeGroupAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('application', cdk.requiredValidator)(properties.application));\n    errors.collect(cdk.propertyValidator('application', cdk.validateString)(properties.application));\n    errors.collect(cdk.propertyValidator('attributeGroup', cdk.requiredValidator)(properties.attributeGroup));\n    errors.collect(cdk.propertyValidator('attributeGroup', cdk.validateString)(properties.attributeGroup));\n    return errors.wrap('supplied properties not correct for \"CfnAttributeGroupAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnAttributeGroupAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAttributeGroupAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAttributeGroupAssociationPropsValidator(properties).assertSuccess();\n    return {\n        Application: cdk.stringToCloudFormation(properties.application),\n        AttributeGroup: cdk.stringToCloudFormation(properties.attributeGroup),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAttributeGroupAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAttributeGroupAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAttributeGroupAssociationProps>();\n    ret.addPropertyResult('application', 'Application', cfn_parse.FromCloudFormation.getString(properties.Application));\n    ret.addPropertyResult('attributeGroup', 'AttributeGroup', cfn_parse.FromCloudFormation.getString(properties.AttributeGroup));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \nexport class CfnAttributeGroupAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAttributeGroupAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAttributeGroupAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAttributeGroupAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                     \n    public readonly attrApplicationArn: string;\n\n                                                                        \n    public readonly attrAttributeGroupArn: string;\n\n                                                                                    \n    public readonly attrId: string;\n\n                                                                                                                                                                                                                                                                                     \n    public application: string;\n\n                                                                                                                                                                                                                                                                                                                                                  \n    public attributeGroup: string;\n\n                                                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnAttributeGroupAssociationProps) {\n        super(scope, id, { type: CfnAttributeGroupAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'application', this);\n        cdk.requireProperty(props, 'attributeGroup', this);\n        this.attrApplicationArn = cdk.Token.asString(this.getAtt('ApplicationArn'));\n        this.attrAttributeGroupArn = cdk.Token.asString(this.getAtt('AttributeGroupArn'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n\n        this.application = props.application;\n        this.attributeGroup = props.attributeGroup;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAttributeGroupAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            application: this.application,\n            attributeGroup: this.attributeGroup,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAttributeGroupAssociationPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                            \nexport interface CfnResourceAssociationProps {\n\n                                                                                                                                                                                                                                                                         \n    readonly application: string;\n\n                                                                                                                                                                                                                                                                                                               \n    readonly resource: string;\n\n                                                                                                                                                                                                                                                                                                                                     \n    readonly resourceType: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResourceAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnResourceAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResourceAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('application', cdk.requiredValidator)(properties.application));\n    errors.collect(cdk.propertyValidator('application', cdk.validateString)(properties.application));\n    errors.collect(cdk.propertyValidator('resource', cdk.requiredValidator)(properties.resource));\n    errors.collect(cdk.propertyValidator('resource', cdk.validateString)(properties.resource));\n    errors.collect(cdk.propertyValidator('resourceType', cdk.requiredValidator)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));\n    return errors.wrap('supplied properties not correct for \"CfnResourceAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::ServiceCatalogAppRegistry::ResourceAssociation` resource\n *\n * @param properties - the TypeScript properties of a `CfnResourceAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::ServiceCatalogAppRegistry::ResourceAssociation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResourceAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResourceAssociationPropsValidator(properties).assertSuccess();\n    return {\n        Application: cdk.stringToCloudFormation(properties.application),\n        Resource: cdk.stringToCloudFormation(properties.resource),\n        ResourceType: cdk.stringToCloudFormation(properties.resourceType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResourceAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResourceAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResourceAssociationProps>();\n    ret.addPropertyResult('application', 'Application', cfn_parse.FromCloudFormation.getString(properties.Application));\n    ret.addPropertyResult('resource', 'Resource', cfn_parse.FromCloudFormation.getString(properties.Resource));\n    ret.addPropertyResult('resourceType', 'ResourceType', cfn_parse.FromCloudFormation.getString(properties.ResourceType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                               \nexport class CfnResourceAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::ServiceCatalogAppRegistry::ResourceAssociation\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResourceAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResourceAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResourceAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                     \n    public readonly attrApplicationArn: string;\n\n                                                                                    \n    public readonly attrId: string;\n\n                                                                  \n    public readonly attrResourceArn: string;\n\n                                                                                                                                                                                                                                                                         \n    public application: string;\n\n                                                                                                                                                                                                                                                                                                               \n    public resource: string;\n\n                                                                                                                                                                                                                                                                                                                                     \n    public resourceType: string;\n\n                                                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnResourceAssociationProps) {\n        super(scope, id, { type: CfnResourceAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'application', this);\n        cdk.requireProperty(props, 'resource', this);\n        cdk.requireProperty(props, 'resourceType', this);\n        this.attrApplicationArn = cdk.Token.asString(this.getAtt('ApplicationArn'));\n        this.attrId = cdk.Token.asString(this.getAtt('Id'));\n        this.attrResourceArn = cdk.Token.asString(this.getAtt('ResourceArn'));\n\n        this.application = props.application;\n        this.resource = props.resource;\n        this.resourceType = props.resourceType;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResourceAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            application: this.application,\n            resource: this.resource,\n            resourceType: this.resourceType,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResourceAssociationPropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
