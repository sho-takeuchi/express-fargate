{
  "version": 3,
  "sources": ["receipt-rule-set.ts"],
  "sourcesContent": ["import { IResource, Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { DropSpamReceiptRule, ReceiptRule, ReceiptRuleOptions } from './receipt-rule';\nimport { CfnReceiptRuleSet } from './ses.generated';\n\n                              \nexport interface IReceiptRuleSet extends IResource {\n                                                           \n  readonly receiptRuleSetName: string;\n\n                                                                                                                                            \n  addRule(id: string, options?: ReceiptRuleOptions): ReceiptRule;\n}\n\n                                                        \nexport interface ReceiptRuleSetProps {\n                                                                                                         \n  readonly receiptRuleSetName?: string;\n\n                                                                                                                                                                                       \n  readonly rules?: ReceiptRuleOptions[]\n\n                                                                                                                                             \n  readonly dropSpam?: boolean;\n}\n\n/**\n * A new or imported receipt rule set.\n */\nabstract class ReceiptRuleSetBase extends Resource implements IReceiptRuleSet {\n  public abstract readonly receiptRuleSetName: string;\n\n  private lastAddedRule?: ReceiptRule;\n\n                                                                                                                                            \n  public addRule(id: string, options?: ReceiptRuleOptions): ReceiptRule {\n    this.lastAddedRule = new ReceiptRule(this, id, {\n      after: this.lastAddedRule ?? undefined,\n      ruleSet: this,\n      ...options,\n    });\n\n    return this.lastAddedRule;\n  }\n\n                                      \n  protected addDropSpamRule(): void {\n    const dropSpam = new DropSpamReceiptRule(this, 'DropSpam', {\n      ruleSet: this,\n    });\n    this.lastAddedRule = dropSpam.rule;\n  }\n}\n\n                                  \nexport class ReceiptRuleSet extends ReceiptRuleSetBase {\n                                                     \n  public static fromReceiptRuleSetName(scope: Construct, id: string, receiptRuleSetName: string): IReceiptRuleSet {\n    class Import extends ReceiptRuleSetBase implements IReceiptRuleSet {\n      public readonly receiptRuleSetName = receiptRuleSetName;\n    }\n    return new Import(scope, id);\n  }\n\n  public readonly receiptRuleSetName: string;\n\n  constructor(scope: Construct, id: string, props: ReceiptRuleSetProps = {}) {\n    super(scope, id, {\n      physicalName: props.receiptRuleSetName,\n    });\n\n    const resource = new CfnReceiptRuleSet(this, 'Resource', {\n      ruleSetName: this.physicalName,\n    });\n\n    this.receiptRuleSetName = resource.ref;\n\n    if (props) {\n      if (props.dropSpam) {\n        this.addDropSpamRule();\n      }\n\n      const rules = props.rules || [];\n      rules.forEach((ruleOption, idx) => this.addRule(`Rule${idx}`, ruleOption));\n    }\n  }\n}\n"],
  "mappings": "qNAAA,OAAA,QAAA,cAEA,eAAA,QAAA,kBACA,gBAAA,QAAA,mBA0BA,gCAA0C,QAAA,QAAQ,CAMzC,QAAQ,GAAY,QAA4B,QACrD,YAAK,cAAgB,GAAI,gBAAA,YAAY,KAAM,GAAI,CAC7C,MAAK,IAAE,KAAK,iBAAa,MAAA,KAAA,OAAA,GAAI,OAC7B,QAAS,QACN,UAGE,KAAK,cAIJ,iBAAe,CACvB,KAAM,UAAW,GAAI,gBAAA,oBAAoB,KAAM,WAAY,CACzD,QAAS,OAEX,KAAK,cAAgB,SAAS,MAKlC,4BAAoC,mBAAkB,CAWpD,YAAY,MAAkB,GAAY,MAA6B,GAAE,CACvE,MAAM,MAAO,GAAI,CACf,aAAc,MAAM,4FAGtB,KAAM,UAAW,GAAI,iBAAA,kBAAkB,KAAM,WAAY,CACvD,YAAa,KAAK,eAGpB,KAAK,mBAAqB,SAAS,IAE/B,OACE,OAAM,UACR,KAAK,kBAIP,AADc,OAAM,OAAS,IACvB,QAAQ,CAAC,WAAY,MAAQ,KAAK,QAAQ,OAAO,MAAO,oBA1BpD,wBAAuB,MAAkB,GAAY,mBAA0B,CAC3F,oBAAqB,mBAAkB,CAAvC,aAAA,qBACkB,KAAA,mBAAqB,oBAEvC,MAAO,IAAI,QAAO,MAAO,KAN7B,QAAA,eAAA",
  "names": []
}
