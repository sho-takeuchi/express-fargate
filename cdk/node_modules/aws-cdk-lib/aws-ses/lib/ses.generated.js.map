{
  "version": 3,
  "sources": ["ses.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:59:07.179Z\",\"fingerprint\":\"tZfywpSoA5E+035VsLnW99IFx+hiKOrQHbPzB5kT50I=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                                \nexport interface CfnConfigurationSetProps {\n\n                                                                                                                                                                                                               \n    readonly name?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnConfigurationSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnConfigurationSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CfnConfigurationSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ConfigurationSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnConfigurationSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ConfigurationSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationSetPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationSetProps>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnConfigurationSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SES::ConfigurationSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnConfigurationSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnConfigurationSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnConfigurationSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                               \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnConfigurationSetProps = {}) {\n        super(scope, id, { type: CfnConfigurationSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.name = props.name;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnConfigurationSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnConfigurationSetPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                                                \nexport interface CfnConfigurationSetEventDestinationProps {\n\n                                                                                                                                                                                                                                                                                                    \n    readonly configurationSetName: string;\n\n                                                                                                                                                                                                                                                       \n    readonly eventDestination: CfnConfigurationSetEventDestination.EventDestinationProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnConfigurationSetEventDestinationProps`\n *\n * @param properties - the TypeScript properties of a `CfnConfigurationSetEventDestinationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationSetEventDestinationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('configurationSetName', cdk.requiredValidator)(properties.configurationSetName));\n    errors.collect(cdk.propertyValidator('configurationSetName', cdk.validateString)(properties.configurationSetName));\n    errors.collect(cdk.propertyValidator('eventDestination', cdk.requiredValidator)(properties.eventDestination));\n    errors.collect(cdk.propertyValidator('eventDestination', CfnConfigurationSetEventDestination_EventDestinationPropertyValidator)(properties.eventDestination));\n    return errors.wrap('supplied properties not correct for \"CfnConfigurationSetEventDestinationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ConfigurationSetEventDestination` resource\n *\n * @param properties - the TypeScript properties of a `CfnConfigurationSetEventDestinationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ConfigurationSetEventDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationSetEventDestinationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationSetEventDestinationPropsValidator(properties).assertSuccess();\n    return {\n        ConfigurationSetName: cdk.stringToCloudFormation(properties.configurationSetName),\n        EventDestination: cfnConfigurationSetEventDestinationEventDestinationPropertyToCloudFormation(properties.eventDestination),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationSetEventDestinationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationSetEventDestinationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationSetEventDestinationProps>();\n    ret.addPropertyResult('configurationSetName', 'ConfigurationSetName', cfn_parse.FromCloudFormation.getString(properties.ConfigurationSetName));\n    ret.addPropertyResult('eventDestination', 'EventDestination', CfnConfigurationSetEventDestinationEventDestinationPropertyFromCloudFormation(properties.EventDestination));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \nexport class CfnConfigurationSetEventDestination extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SES::ConfigurationSetEventDestination\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnConfigurationSetEventDestination {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnConfigurationSetEventDestinationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnConfigurationSetEventDestination(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                    \n    public configurationSetName: string;\n\n                                                                                                                                                                                                                                                       \n    public eventDestination: CfnConfigurationSetEventDestination.EventDestinationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnConfigurationSetEventDestinationProps) {\n        super(scope, id, { type: CfnConfigurationSetEventDestination.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'configurationSetName', this);\n        cdk.requireProperty(props, 'eventDestination', this);\n\n        this.configurationSetName = props.configurationSetName;\n        this.eventDestination = props.eventDestination;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnConfigurationSetEventDestination.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            configurationSetName: this.configurationSetName,\n            eventDestination: this.eventDestination,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnConfigurationSetEventDestinationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnConfigurationSetEventDestination {\nn    export interface CloudWatchDestinationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly dimensionConfigurations?: Array<CfnConfigurationSetEventDestination.DimensionConfigurationProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CloudWatchDestinationProperty`\n *\n * @param properties - the TypeScript properties of a `CloudWatchDestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationSetEventDestination_CloudWatchDestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dimensionConfigurations', cdk.listValidator(CfnConfigurationSetEventDestination_DimensionConfigurationPropertyValidator))(properties.dimensionConfigurations));\n    return errors.wrap('supplied properties not correct for \"CloudWatchDestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ConfigurationSetEventDestination.CloudWatchDestination` resource\n *\n * @param properties - the TypeScript properties of a `CloudWatchDestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ConfigurationSetEventDestination.CloudWatchDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationSetEventDestinationCloudWatchDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationSetEventDestination_CloudWatchDestinationPropertyValidator(properties).assertSuccess();\n    return {\n        DimensionConfigurations: cdk.listMapper(cfnConfigurationSetEventDestinationDimensionConfigurationPropertyToCloudFormation)(properties.dimensionConfigurations),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationSetEventDestinationCloudWatchDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationSetEventDestination.CloudWatchDestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationSetEventDestination.CloudWatchDestinationProperty>();\n    ret.addPropertyResult('dimensionConfigurations', 'DimensionConfigurations', properties.DimensionConfigurations != null ? cfn_parse.FromCloudFormation.getArray(CfnConfigurationSetEventDestinationDimensionConfigurationPropertyFromCloudFormation)(properties.DimensionConfigurations) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConfigurationSetEventDestination {\nn    export interface DimensionConfigurationProperty {\nn        readonly defaultDimensionValue: string;\nn        readonly dimensionName: string;\nn        readonly dimensionValueSource: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DimensionConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `DimensionConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationSetEventDestination_DimensionConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultDimensionValue', cdk.requiredValidator)(properties.defaultDimensionValue));\n    errors.collect(cdk.propertyValidator('defaultDimensionValue', cdk.validateString)(properties.defaultDimensionValue));\n    errors.collect(cdk.propertyValidator('dimensionName', cdk.requiredValidator)(properties.dimensionName));\n    errors.collect(cdk.propertyValidator('dimensionName', cdk.validateString)(properties.dimensionName));\n    errors.collect(cdk.propertyValidator('dimensionValueSource', cdk.requiredValidator)(properties.dimensionValueSource));\n    errors.collect(cdk.propertyValidator('dimensionValueSource', cdk.validateString)(properties.dimensionValueSource));\n    return errors.wrap('supplied properties not correct for \"DimensionConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ConfigurationSetEventDestination.DimensionConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `DimensionConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ConfigurationSetEventDestination.DimensionConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationSetEventDestinationDimensionConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationSetEventDestination_DimensionConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        DefaultDimensionValue: cdk.stringToCloudFormation(properties.defaultDimensionValue),\n        DimensionName: cdk.stringToCloudFormation(properties.dimensionName),\n        DimensionValueSource: cdk.stringToCloudFormation(properties.dimensionValueSource),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationSetEventDestinationDimensionConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationSetEventDestination.DimensionConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationSetEventDestination.DimensionConfigurationProperty>();\n    ret.addPropertyResult('defaultDimensionValue', 'DefaultDimensionValue', cfn_parse.FromCloudFormation.getString(properties.DefaultDimensionValue));\n    ret.addPropertyResult('dimensionName', 'DimensionName', cfn_parse.FromCloudFormation.getString(properties.DimensionName));\n    ret.addPropertyResult('dimensionValueSource', 'DimensionValueSource', cfn_parse.FromCloudFormation.getString(properties.DimensionValueSource));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConfigurationSetEventDestination {\nn    export interface EventDestinationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly cloudWatchDestination?: CfnConfigurationSetEventDestination.CloudWatchDestinationProperty | cdk.IResolvable;\nn        readonly enabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly kinesisFirehoseDestination?: CfnConfigurationSetEventDestination.KinesisFirehoseDestinationProperty | cdk.IResolvable;\nn        readonly matchingEventTypes: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EventDestinationProperty`\n *\n * @param properties - the TypeScript properties of a `EventDestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationSetEventDestination_EventDestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchDestination', CfnConfigurationSetEventDestination_CloudWatchDestinationPropertyValidator)(properties.cloudWatchDestination));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('kinesisFirehoseDestination', CfnConfigurationSetEventDestination_KinesisFirehoseDestinationPropertyValidator)(properties.kinesisFirehoseDestination));\n    errors.collect(cdk.propertyValidator('matchingEventTypes', cdk.requiredValidator)(properties.matchingEventTypes));\n    errors.collect(cdk.propertyValidator('matchingEventTypes', cdk.listValidator(cdk.validateString))(properties.matchingEventTypes));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"EventDestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ConfigurationSetEventDestination.EventDestination` resource\n *\n * @param properties - the TypeScript properties of a `EventDestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ConfigurationSetEventDestination.EventDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationSetEventDestinationEventDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationSetEventDestination_EventDestinationPropertyValidator(properties).assertSuccess();\n    return {\n        CloudWatchDestination: cfnConfigurationSetEventDestinationCloudWatchDestinationPropertyToCloudFormation(properties.cloudWatchDestination),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        KinesisFirehoseDestination: cfnConfigurationSetEventDestinationKinesisFirehoseDestinationPropertyToCloudFormation(properties.kinesisFirehoseDestination),\n        MatchingEventTypes: cdk.listMapper(cdk.stringToCloudFormation)(properties.matchingEventTypes),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationSetEventDestinationEventDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationSetEventDestination.EventDestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationSetEventDestination.EventDestinationProperty>();\n    ret.addPropertyResult('cloudWatchDestination', 'CloudWatchDestination', properties.CloudWatchDestination != null ? CfnConfigurationSetEventDestinationCloudWatchDestinationPropertyFromCloudFormation(properties.CloudWatchDestination) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('kinesisFirehoseDestination', 'KinesisFirehoseDestination', properties.KinesisFirehoseDestination != null ? CfnConfigurationSetEventDestinationKinesisFirehoseDestinationPropertyFromCloudFormation(properties.KinesisFirehoseDestination) : undefined);\n    ret.addPropertyResult('matchingEventTypes', 'MatchingEventTypes', cfn_parse.FromCloudFormation.getStringArray(properties.MatchingEventTypes));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnConfigurationSetEventDestination {\nn    export interface KinesisFirehoseDestinationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly deliveryStreamArn: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly iamRoleArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `KinesisFirehoseDestinationProperty`\n *\n * @param properties - the TypeScript properties of a `KinesisFirehoseDestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnConfigurationSetEventDestination_KinesisFirehoseDestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('deliveryStreamArn', cdk.requiredValidator)(properties.deliveryStreamArn));\n    errors.collect(cdk.propertyValidator('deliveryStreamArn', cdk.validateString)(properties.deliveryStreamArn));\n    errors.collect(cdk.propertyValidator('iamRoleArn', cdk.requiredValidator)(properties.iamRoleArn));\n    errors.collect(cdk.propertyValidator('iamRoleArn', cdk.validateString)(properties.iamRoleArn));\n    return errors.wrap('supplied properties not correct for \"KinesisFirehoseDestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ConfigurationSetEventDestination.KinesisFirehoseDestination` resource\n *\n * @param properties - the TypeScript properties of a `KinesisFirehoseDestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ConfigurationSetEventDestination.KinesisFirehoseDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnConfigurationSetEventDestinationKinesisFirehoseDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnConfigurationSetEventDestination_KinesisFirehoseDestinationPropertyValidator(properties).assertSuccess();\n    return {\n        DeliveryStreamARN: cdk.stringToCloudFormation(properties.deliveryStreamArn),\n        IAMRoleARN: cdk.stringToCloudFormation(properties.iamRoleArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnConfigurationSetEventDestinationKinesisFirehoseDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnConfigurationSetEventDestination.KinesisFirehoseDestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnConfigurationSetEventDestination.KinesisFirehoseDestinationProperty>();\n    ret.addPropertyResult('deliveryStreamArn', 'DeliveryStreamARN', cfn_parse.FromCloudFormation.getString(properties.DeliveryStreamARN));\n    ret.addPropertyResult('iamRoleArn', 'IAMRoleARN', cfn_parse.FromCloudFormation.getString(properties.IAMRoleARN));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                      \nexport interface CfnContactListProps {\n\n                                                                                                                                                                                                            \n    readonly contactListName?: string;\n\n                                                                                                                                                                                                                           \n    readonly description?: string;\n\n                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                \n    readonly topics?: Array<CfnContactList.TopicProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnContactListProps`\n *\n * @param properties - the TypeScript properties of a `CfnContactListProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnContactListPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('contactListName', cdk.validateString)(properties.contactListName));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('topics', cdk.listValidator(CfnContactList_TopicPropertyValidator))(properties.topics));\n    return errors.wrap('supplied properties not correct for \"CfnContactListProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ContactList` resource\n *\n * @param properties - the TypeScript properties of a `CfnContactListProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ContactList` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContactListPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContactListPropsValidator(properties).assertSuccess();\n    return {\n        ContactListName: cdk.stringToCloudFormation(properties.contactListName),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        Topics: cdk.listMapper(cfnContactListTopicPropertyToCloudFormation)(properties.topics),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContactListPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContactListProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContactListProps>();\n    ret.addPropertyResult('contactListName', 'ContactListName', properties.ContactListName != null ? cfn_parse.FromCloudFormation.getString(properties.ContactListName) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('topics', 'Topics', properties.Topics != null ? cfn_parse.FromCloudFormation.getArray(CfnContactListTopicPropertyFromCloudFormation)(properties.Topics) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                    \nexport class CfnContactList extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SES::ContactList\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnContactList {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnContactListPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnContactList(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                            \n    public contactListName: string | undefined;\n\n                                                                                                                                                                                                                           \n    public description: string | undefined;\n\n                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                \n    public topics: Array<CfnContactList.TopicProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnContactListProps = {}) {\n        super(scope, id, { type: CfnContactList.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.contactListName = props.contactListName;\n        this.description = props.description;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SES::ContactList\", props.tags, { tagPropertyName: 'tags' });\n        this.topics = props.topics;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnContactList.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            contactListName: this.contactListName,\n            description: this.description,\n            tags: this.tags.renderTags(),\n            topics: this.topics,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnContactListPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnContactList {\n                                                                                                                                                                                                                                                                                     \n    export interface TopicProperty {\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly defaultSubscriptionStatus: string;\n                                                                                                                                                                                                                                                                                  \n        readonly description?: string;\n                                                                                                                                                                                                                                                        \n        readonly displayName: string;\n                                                                                                                                                                                                                                 \n        readonly topicName: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TopicProperty`\n *\n * @param properties - the TypeScript properties of a `TopicProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnContactList_TopicPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultSubscriptionStatus', cdk.requiredValidator)(properties.defaultSubscriptionStatus));\n    errors.collect(cdk.propertyValidator('defaultSubscriptionStatus', cdk.validateString)(properties.defaultSubscriptionStatus));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('displayName', cdk.requiredValidator)(properties.displayName));\n    errors.collect(cdk.propertyValidator('displayName', cdk.validateString)(properties.displayName));\n    errors.collect(cdk.propertyValidator('topicName', cdk.requiredValidator)(properties.topicName));\n    errors.collect(cdk.propertyValidator('topicName', cdk.validateString)(properties.topicName));\n    return errors.wrap('supplied properties not correct for \"TopicProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ContactList.Topic` resource\n *\n * @param properties - the TypeScript properties of a `TopicProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ContactList.Topic` resource.\n */\n// @ts-ignore TS6133\nfunction cfnContactListTopicPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnContactList_TopicPropertyValidator(properties).assertSuccess();\n    return {\n        DefaultSubscriptionStatus: cdk.stringToCloudFormation(properties.defaultSubscriptionStatus),\n        Description: cdk.stringToCloudFormation(properties.description),\n        DisplayName: cdk.stringToCloudFormation(properties.displayName),\n        TopicName: cdk.stringToCloudFormation(properties.topicName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnContactListTopicPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnContactList.TopicProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnContactList.TopicProperty>();\n    ret.addPropertyResult('defaultSubscriptionStatus', 'DefaultSubscriptionStatus', cfn_parse.FromCloudFormation.getString(properties.DefaultSubscriptionStatus));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('displayName', 'DisplayName', cfn_parse.FromCloudFormation.getString(properties.DisplayName));\n    ret.addPropertyResult('topicName', 'TopicName', cfn_parse.FromCloudFormation.getString(properties.TopicName));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                          \nexport interface CfnReceiptFilterProps {\n\n                                                                                                                                                                                                                                                                                                                                     \n    readonly filter: CfnReceiptFilter.FilterProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnReceiptFilterProps`\n *\n * @param properties - the TypeScript properties of a `CfnReceiptFilterProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptFilterPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('filter', cdk.requiredValidator)(properties.filter));\n    errors.collect(cdk.propertyValidator('filter', CfnReceiptFilter_FilterPropertyValidator)(properties.filter));\n    return errors.wrap('supplied properties not correct for \"CfnReceiptFilterProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptFilter` resource\n *\n * @param properties - the TypeScript properties of a `CfnReceiptFilterProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptFilter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptFilterPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptFilterPropsValidator(properties).assertSuccess();\n    return {\n        Filter: cfnReceiptFilterFilterPropertyToCloudFormation(properties.filter),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptFilterPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptFilterProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptFilterProps>();\n    ret.addPropertyResult('filter', 'Filter', CfnReceiptFilterFilterPropertyFromCloudFormation(properties.Filter));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                          \nexport class CfnReceiptFilter extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SES::ReceiptFilter\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnReceiptFilter {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnReceiptFilterPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnReceiptFilter(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                     \n    public filter: CfnReceiptFilter.FilterProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnReceiptFilterProps) {\n        super(scope, id, { type: CfnReceiptFilter.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'filter', this);\n\n        this.filter = props.filter;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnReceiptFilter.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            filter: this.filter,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnReceiptFilterPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnReceiptFilter {\n                                                                                                                                                                                                                                      \n    export interface FilterProperty {\n                                                                                                                                                                                                                                                                                                                                    \n        readonly ipFilter: CfnReceiptFilter.IpFilterProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FilterProperty`\n *\n * @param properties - the TypeScript properties of a `FilterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptFilter_FilterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ipFilter', cdk.requiredValidator)(properties.ipFilter));\n    errors.collect(cdk.propertyValidator('ipFilter', CfnReceiptFilter_IpFilterPropertyValidator)(properties.ipFilter));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"FilterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptFilter.Filter` resource\n *\n * @param properties - the TypeScript properties of a `FilterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptFilter.Filter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptFilterFilterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptFilter_FilterPropertyValidator(properties).assertSuccess();\n    return {\n        IpFilter: cfnReceiptFilterIpFilterPropertyToCloudFormation(properties.ipFilter),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptFilterFilterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptFilter.FilterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptFilter.FilterProperty>();\n    ret.addPropertyResult('ipFilter', 'IpFilter', CfnReceiptFilterIpFilterPropertyFromCloudFormation(properties.IpFilter));\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReceiptFilter {\nn    export interface IpFilterProperty {\nn        readonly cidr: string;\n                                                                                                                                                                                                                                                                                                    \n        readonly policy: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IpFilterProperty`\n *\n * @param properties - the TypeScript properties of a `IpFilterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptFilter_IpFilterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cidr', cdk.requiredValidator)(properties.cidr));\n    errors.collect(cdk.propertyValidator('cidr', cdk.validateString)(properties.cidr));\n    errors.collect(cdk.propertyValidator('policy', cdk.requiredValidator)(properties.policy));\n    errors.collect(cdk.propertyValidator('policy', cdk.validateString)(properties.policy));\n    return errors.wrap('supplied properties not correct for \"IpFilterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptFilter.IpFilter` resource\n *\n * @param properties - the TypeScript properties of a `IpFilterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptFilter.IpFilter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptFilterIpFilterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptFilter_IpFilterPropertyValidator(properties).assertSuccess();\n    return {\n        Cidr: cdk.stringToCloudFormation(properties.cidr),\n        Policy: cdk.stringToCloudFormation(properties.policy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptFilterIpFilterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptFilter.IpFilterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptFilter.IpFilterProperty>();\n    ret.addPropertyResult('cidr', 'Cidr', cfn_parse.FromCloudFormation.getString(properties.Cidr));\n    ret.addPropertyResult('policy', 'Policy', cfn_parse.FromCloudFormation.getString(properties.Policy));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                      \nexport interface CfnReceiptRuleProps {\n\n                                                                                                                                                                                                                                                                                                        \n    readonly rule: CfnReceiptRule.RuleProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                    \n    readonly ruleSetName: string;\n\n                                                                                                                                                                                                                                                                                                                            \n    readonly after?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnReceiptRuleProps`\n *\n * @param properties - the TypeScript properties of a `CfnReceiptRuleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptRulePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('after', cdk.validateString)(properties.after));\n    errors.collect(cdk.propertyValidator('rule', cdk.requiredValidator)(properties.rule));\n    errors.collect(cdk.propertyValidator('rule', CfnReceiptRule_RulePropertyValidator)(properties.rule));\n    errors.collect(cdk.propertyValidator('ruleSetName', cdk.requiredValidator)(properties.ruleSetName));\n    errors.collect(cdk.propertyValidator('ruleSetName', cdk.validateString)(properties.ruleSetName));\n    return errors.wrap('supplied properties not correct for \"CfnReceiptRuleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptRule` resource\n *\n * @param properties - the TypeScript properties of a `CfnReceiptRuleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptRulePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptRulePropsValidator(properties).assertSuccess();\n    return {\n        Rule: cfnReceiptRuleRulePropertyToCloudFormation(properties.rule),\n        RuleSetName: cdk.stringToCloudFormation(properties.ruleSetName),\n        After: cdk.stringToCloudFormation(properties.after),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptRulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptRuleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptRuleProps>();\n    ret.addPropertyResult('rule', 'Rule', CfnReceiptRuleRulePropertyFromCloudFormation(properties.Rule));\n    ret.addPropertyResult('ruleSetName', 'RuleSetName', cfn_parse.FromCloudFormation.getString(properties.RuleSetName));\n    ret.addPropertyResult('after', 'After', properties.After != null ? cfn_parse.FromCloudFormation.getString(properties.After) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                          \nexport class CfnReceiptRule extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SES::ReceiptRule\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnReceiptRule {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnReceiptRulePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnReceiptRule(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                        \n    public rule: CfnReceiptRule.RuleProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                    \n    public ruleSetName: string;\n\n                                                                                                                                                                                                                                                                                                                            \n    public after: string | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnReceiptRuleProps) {\n        super(scope, id, { type: CfnReceiptRule.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'rule', this);\n        cdk.requireProperty(props, 'ruleSetName', this);\n\n        this.rule = props.rule;\n        this.ruleSetName = props.ruleSetName;\n        this.after = props.after;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnReceiptRule.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            rule: this.rule,\n            ruleSetName: this.ruleSetName,\n            after: this.after,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnReceiptRulePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnReceiptRule {\nn    export interface ActionProperty {\n                                                                                                                                                                                                                                                       \n        readonly addHeaderAction?: CfnReceiptRule.AddHeaderActionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly bounceAction?: CfnReceiptRule.BounceActionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                     \n        readonly lambdaAction?: CfnReceiptRule.LambdaActionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly s3Action?: CfnReceiptRule.S3ActionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                             \n        readonly snsAction?: CfnReceiptRule.SNSActionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                      \n        readonly stopAction?: CfnReceiptRule.StopActionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                       \n        readonly workmailAction?: CfnReceiptRule.WorkmailActionProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ActionProperty`\n *\n * @param properties - the TypeScript properties of a `ActionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptRule_ActionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addHeaderAction', CfnReceiptRule_AddHeaderActionPropertyValidator)(properties.addHeaderAction));\n    errors.collect(cdk.propertyValidator('bounceAction', CfnReceiptRule_BounceActionPropertyValidator)(properties.bounceAction));\n    errors.collect(cdk.propertyValidator('lambdaAction', CfnReceiptRule_LambdaActionPropertyValidator)(properties.lambdaAction));\n    errors.collect(cdk.propertyValidator('s3Action', CfnReceiptRule_S3ActionPropertyValidator)(properties.s3Action));\n    errors.collect(cdk.propertyValidator('snsAction', CfnReceiptRule_SNSActionPropertyValidator)(properties.snsAction));\n    errors.collect(cdk.propertyValidator('stopAction', CfnReceiptRule_StopActionPropertyValidator)(properties.stopAction));\n    errors.collect(cdk.propertyValidator('workmailAction', CfnReceiptRule_WorkmailActionPropertyValidator)(properties.workmailAction));\n    return errors.wrap('supplied properties not correct for \"ActionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.Action` resource\n *\n * @param properties - the TypeScript properties of a `ActionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.Action` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptRuleActionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptRule_ActionPropertyValidator(properties).assertSuccess();\n    return {\n        AddHeaderAction: cfnReceiptRuleAddHeaderActionPropertyToCloudFormation(properties.addHeaderAction),\n        BounceAction: cfnReceiptRuleBounceActionPropertyToCloudFormation(properties.bounceAction),\n        LambdaAction: cfnReceiptRuleLambdaActionPropertyToCloudFormation(properties.lambdaAction),\n        S3Action: cfnReceiptRuleS3ActionPropertyToCloudFormation(properties.s3Action),\n        SNSAction: cfnReceiptRuleSNSActionPropertyToCloudFormation(properties.snsAction),\n        StopAction: cfnReceiptRuleStopActionPropertyToCloudFormation(properties.stopAction),\n        WorkmailAction: cfnReceiptRuleWorkmailActionPropertyToCloudFormation(properties.workmailAction),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptRuleActionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptRule.ActionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptRule.ActionProperty>();\n    ret.addPropertyResult('addHeaderAction', 'AddHeaderAction', properties.AddHeaderAction != null ? CfnReceiptRuleAddHeaderActionPropertyFromCloudFormation(properties.AddHeaderAction) : undefined);\n    ret.addPropertyResult('bounceAction', 'BounceAction', properties.BounceAction != null ? CfnReceiptRuleBounceActionPropertyFromCloudFormation(properties.BounceAction) : undefined);\n    ret.addPropertyResult('lambdaAction', 'LambdaAction', properties.LambdaAction != null ? CfnReceiptRuleLambdaActionPropertyFromCloudFormation(properties.LambdaAction) : undefined);\n    ret.addPropertyResult('s3Action', 'S3Action', properties.S3Action != null ? CfnReceiptRuleS3ActionPropertyFromCloudFormation(properties.S3Action) : undefined);\n    ret.addPropertyResult('snsAction', 'SNSAction', properties.SNSAction != null ? CfnReceiptRuleSNSActionPropertyFromCloudFormation(properties.SNSAction) : undefined);\n    ret.addPropertyResult('stopAction', 'StopAction', properties.StopAction != null ? CfnReceiptRuleStopActionPropertyFromCloudFormation(properties.StopAction) : undefined);\n    ret.addPropertyResult('workmailAction', 'WorkmailAction', properties.WorkmailAction != null ? CfnReceiptRuleWorkmailActionPropertyFromCloudFormation(properties.WorkmailAction) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReceiptRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n    export interface AddHeaderActionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly headerName: string;\n                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly headerValue: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AddHeaderActionProperty`\n *\n * @param properties - the TypeScript properties of a `AddHeaderActionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptRule_AddHeaderActionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('headerName', cdk.requiredValidator)(properties.headerName));\n    errors.collect(cdk.propertyValidator('headerName', cdk.validateString)(properties.headerName));\n    errors.collect(cdk.propertyValidator('headerValue', cdk.requiredValidator)(properties.headerValue));\n    errors.collect(cdk.propertyValidator('headerValue', cdk.validateString)(properties.headerValue));\n    return errors.wrap('supplied properties not correct for \"AddHeaderActionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.AddHeaderAction` resource\n *\n * @param properties - the TypeScript properties of a `AddHeaderActionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.AddHeaderAction` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptRuleAddHeaderActionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptRule_AddHeaderActionPropertyValidator(properties).assertSuccess();\n    return {\n        HeaderName: cdk.stringToCloudFormation(properties.headerName),\n        HeaderValue: cdk.stringToCloudFormation(properties.headerValue),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptRuleAddHeaderActionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptRule.AddHeaderActionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptRule.AddHeaderActionProperty>();\n    ret.addPropertyResult('headerName', 'HeaderName', cfn_parse.FromCloudFormation.getString(properties.HeaderName));\n    ret.addPropertyResult('headerValue', 'HeaderValue', cfn_parse.FromCloudFormation.getString(properties.HeaderValue));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReceiptRule {\nn    export interface BounceActionProperty {\n                                                                                                                                                                                                                                                                            \n        readonly message: string;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly sender: string;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly smtpReplyCode: string;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly statusCode?: string;\nn        readonly topicArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `BounceActionProperty`\n *\n * @param properties - the TypeScript properties of a `BounceActionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptRule_BounceActionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('message', cdk.requiredValidator)(properties.message));\n    errors.collect(cdk.propertyValidator('message', cdk.validateString)(properties.message));\n    errors.collect(cdk.propertyValidator('sender', cdk.requiredValidator)(properties.sender));\n    errors.collect(cdk.propertyValidator('sender', cdk.validateString)(properties.sender));\n    errors.collect(cdk.propertyValidator('smtpReplyCode', cdk.requiredValidator)(properties.smtpReplyCode));\n    errors.collect(cdk.propertyValidator('smtpReplyCode', cdk.validateString)(properties.smtpReplyCode));\n    errors.collect(cdk.propertyValidator('statusCode', cdk.validateString)(properties.statusCode));\n    errors.collect(cdk.propertyValidator('topicArn', cdk.validateString)(properties.topicArn));\n    return errors.wrap('supplied properties not correct for \"BounceActionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.BounceAction` resource\n *\n * @param properties - the TypeScript properties of a `BounceActionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.BounceAction` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptRuleBounceActionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptRule_BounceActionPropertyValidator(properties).assertSuccess();\n    return {\n        Message: cdk.stringToCloudFormation(properties.message),\n        Sender: cdk.stringToCloudFormation(properties.sender),\n        SmtpReplyCode: cdk.stringToCloudFormation(properties.smtpReplyCode),\n        StatusCode: cdk.stringToCloudFormation(properties.statusCode),\n        TopicArn: cdk.stringToCloudFormation(properties.topicArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptRuleBounceActionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptRule.BounceActionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptRule.BounceActionProperty>();\n    ret.addPropertyResult('message', 'Message', cfn_parse.FromCloudFormation.getString(properties.Message));\n    ret.addPropertyResult('sender', 'Sender', cfn_parse.FromCloudFormation.getString(properties.Sender));\n    ret.addPropertyResult('smtpReplyCode', 'SmtpReplyCode', cfn_parse.FromCloudFormation.getString(properties.SmtpReplyCode));\n    ret.addPropertyResult('statusCode', 'StatusCode', properties.StatusCode != null ? cfn_parse.FromCloudFormation.getString(properties.StatusCode) : undefined);\n    ret.addPropertyResult('topicArn', 'TopicArn', properties.TopicArn != null ? cfn_parse.FromCloudFormation.getString(properties.TopicArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReceiptRule {\nn    export interface LambdaActionProperty {\nn        readonly functionArn: string;\nn        readonly invocationType?: string;\nn        readonly topicArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LambdaActionProperty`\n *\n * @param properties - the TypeScript properties of a `LambdaActionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptRule_LambdaActionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('functionArn', cdk.requiredValidator)(properties.functionArn));\n    errors.collect(cdk.propertyValidator('functionArn', cdk.validateString)(properties.functionArn));\n    errors.collect(cdk.propertyValidator('invocationType', cdk.validateString)(properties.invocationType));\n    errors.collect(cdk.propertyValidator('topicArn', cdk.validateString)(properties.topicArn));\n    return errors.wrap('supplied properties not correct for \"LambdaActionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.LambdaAction` resource\n *\n * @param properties - the TypeScript properties of a `LambdaActionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.LambdaAction` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptRuleLambdaActionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptRule_LambdaActionPropertyValidator(properties).assertSuccess();\n    return {\n        FunctionArn: cdk.stringToCloudFormation(properties.functionArn),\n        InvocationType: cdk.stringToCloudFormation(properties.invocationType),\n        TopicArn: cdk.stringToCloudFormation(properties.topicArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptRuleLambdaActionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptRule.LambdaActionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptRule.LambdaActionProperty>();\n    ret.addPropertyResult('functionArn', 'FunctionArn', cfn_parse.FromCloudFormation.getString(properties.FunctionArn));\n    ret.addPropertyResult('invocationType', 'InvocationType', properties.InvocationType != null ? cfn_parse.FromCloudFormation.getString(properties.InvocationType) : undefined);\n    ret.addPropertyResult('topicArn', 'TopicArn', properties.TopicArn != null ? cfn_parse.FromCloudFormation.getString(properties.TopicArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReceiptRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface RuleProperty {\n                                                                                                                                                                                                                                                                                                                                                           \n        readonly actions?: Array<CfnReceiptRule.ActionProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                             \n        readonly enabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly name?: string;\n                                                                                                                                                                                                                                                                                                                                                                               \n        readonly recipients?: string[];\n                                                                                                                                                                                                                                                                                                                                       \n        readonly scanEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly tlsPolicy?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RuleProperty`\n *\n * @param properties - the TypeScript properties of a `RuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptRule_RulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('actions', cdk.listValidator(CfnReceiptRule_ActionPropertyValidator))(properties.actions));\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('recipients', cdk.listValidator(cdk.validateString))(properties.recipients));\n    errors.collect(cdk.propertyValidator('scanEnabled', cdk.validateBoolean)(properties.scanEnabled));\n    errors.collect(cdk.propertyValidator('tlsPolicy', cdk.validateString)(properties.tlsPolicy));\n    return errors.wrap('supplied properties not correct for \"RuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.Rule` resource\n *\n * @param properties - the TypeScript properties of a `RuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.Rule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptRuleRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptRule_RulePropertyValidator(properties).assertSuccess();\n    return {\n        Actions: cdk.listMapper(cfnReceiptRuleActionPropertyToCloudFormation)(properties.actions),\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Recipients: cdk.listMapper(cdk.stringToCloudFormation)(properties.recipients),\n        ScanEnabled: cdk.booleanToCloudFormation(properties.scanEnabled),\n        TlsPolicy: cdk.stringToCloudFormation(properties.tlsPolicy),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptRuleRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptRule.RuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptRule.RuleProperty>();\n    ret.addPropertyResult('actions', 'Actions', properties.Actions != null ? cfn_parse.FromCloudFormation.getArray(CfnReceiptRuleActionPropertyFromCloudFormation)(properties.Actions) : undefined);\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('recipients', 'Recipients', properties.Recipients != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Recipients) : undefined);\n    ret.addPropertyResult('scanEnabled', 'ScanEnabled', properties.ScanEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ScanEnabled) : undefined);\n    ret.addPropertyResult('tlsPolicy', 'TlsPolicy', properties.TlsPolicy != null ? cfn_parse.FromCloudFormation.getString(properties.TlsPolicy) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReceiptRule {\nn    export interface S3ActionProperty {\n                                                                                                                                                                                                                                                                      \n        readonly bucketName: string;\nn        readonly kmsKeyArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly objectKeyPrefix?: string;\nn        readonly topicArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3ActionProperty`\n *\n * @param properties - the TypeScript properties of a `S3ActionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptRule_S3ActionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketName', cdk.requiredValidator)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('kmsKeyArn', cdk.validateString)(properties.kmsKeyArn));\n    errors.collect(cdk.propertyValidator('objectKeyPrefix', cdk.validateString)(properties.objectKeyPrefix));\n    errors.collect(cdk.propertyValidator('topicArn', cdk.validateString)(properties.topicArn));\n    return errors.wrap('supplied properties not correct for \"S3ActionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.S3Action` resource\n *\n * @param properties - the TypeScript properties of a `S3ActionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.S3Action` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptRuleS3ActionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptRule_S3ActionPropertyValidator(properties).assertSuccess();\n    return {\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        KmsKeyArn: cdk.stringToCloudFormation(properties.kmsKeyArn),\n        ObjectKeyPrefix: cdk.stringToCloudFormation(properties.objectKeyPrefix),\n        TopicArn: cdk.stringToCloudFormation(properties.topicArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptRuleS3ActionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptRule.S3ActionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptRule.S3ActionProperty>();\n    ret.addPropertyResult('bucketName', 'BucketName', cfn_parse.FromCloudFormation.getString(properties.BucketName));\n    ret.addPropertyResult('kmsKeyArn', 'KmsKeyArn', properties.KmsKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyArn) : undefined);\n    ret.addPropertyResult('objectKeyPrefix', 'ObjectKeyPrefix', properties.ObjectKeyPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.ObjectKeyPrefix) : undefined);\n    ret.addPropertyResult('topicArn', 'TopicArn', properties.TopicArn != null ? cfn_parse.FromCloudFormation.getString(properties.TopicArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReceiptRule {\nn    export interface SNSActionProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly encoding?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly topicArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SNSActionProperty`\n *\n * @param properties - the TypeScript properties of a `SNSActionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptRule_SNSActionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('encoding', cdk.validateString)(properties.encoding));\n    errors.collect(cdk.propertyValidator('topicArn', cdk.validateString)(properties.topicArn));\n    return errors.wrap('supplied properties not correct for \"SNSActionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.SNSAction` resource\n *\n * @param properties - the TypeScript properties of a `SNSActionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.SNSAction` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptRuleSNSActionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptRule_SNSActionPropertyValidator(properties).assertSuccess();\n    return {\n        Encoding: cdk.stringToCloudFormation(properties.encoding),\n        TopicArn: cdk.stringToCloudFormation(properties.topicArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptRuleSNSActionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptRule.SNSActionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptRule.SNSActionProperty>();\n    ret.addPropertyResult('encoding', 'Encoding', properties.Encoding != null ? cfn_parse.FromCloudFormation.getString(properties.Encoding) : undefined);\n    ret.addPropertyResult('topicArn', 'TopicArn', properties.TopicArn != null ? cfn_parse.FromCloudFormation.getString(properties.TopicArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReceiptRule {\nn    export interface StopActionProperty {\n                                                                                                                                                                                                                                                                                      \n        readonly scope: string;\nn        readonly topicArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `StopActionProperty`\n *\n * @param properties - the TypeScript properties of a `StopActionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptRule_StopActionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('scope', cdk.requiredValidator)(properties.scope));\n    errors.collect(cdk.propertyValidator('scope', cdk.validateString)(properties.scope));\n    errors.collect(cdk.propertyValidator('topicArn', cdk.validateString)(properties.topicArn));\n    return errors.wrap('supplied properties not correct for \"StopActionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.StopAction` resource\n *\n * @param properties - the TypeScript properties of a `StopActionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.StopAction` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptRuleStopActionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptRule_StopActionPropertyValidator(properties).assertSuccess();\n    return {\n        Scope: cdk.stringToCloudFormation(properties.scope),\n        TopicArn: cdk.stringToCloudFormation(properties.topicArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptRuleStopActionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptRule.StopActionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptRule.StopActionProperty>();\n    ret.addPropertyResult('scope', 'Scope', cfn_parse.FromCloudFormation.getString(properties.Scope));\n    ret.addPropertyResult('topicArn', 'TopicArn', properties.TopicArn != null ? cfn_parse.FromCloudFormation.getString(properties.TopicArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnReceiptRule {\nn    export interface WorkmailActionProperty {\nn        readonly organizationArn: string;\nn        readonly topicArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `WorkmailActionProperty`\n *\n * @param properties - the TypeScript properties of a `WorkmailActionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptRule_WorkmailActionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('organizationArn', cdk.requiredValidator)(properties.organizationArn));\n    errors.collect(cdk.propertyValidator('organizationArn', cdk.validateString)(properties.organizationArn));\n    errors.collect(cdk.propertyValidator('topicArn', cdk.validateString)(properties.topicArn));\n    return errors.wrap('supplied properties not correct for \"WorkmailActionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.WorkmailAction` resource\n *\n * @param properties - the TypeScript properties of a `WorkmailActionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptRule.WorkmailAction` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptRuleWorkmailActionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptRule_WorkmailActionPropertyValidator(properties).assertSuccess();\n    return {\n        OrganizationArn: cdk.stringToCloudFormation(properties.organizationArn),\n        TopicArn: cdk.stringToCloudFormation(properties.topicArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptRuleWorkmailActionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptRule.WorkmailActionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptRule.WorkmailActionProperty>();\n    ret.addPropertyResult('organizationArn', 'OrganizationArn', cfn_parse.FromCloudFormation.getString(properties.OrganizationArn));\n    ret.addPropertyResult('topicArn', 'TopicArn', properties.TopicArn != null ? cfn_parse.FromCloudFormation.getString(properties.TopicArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                            \nexport interface CfnReceiptRuleSetProps {\n\n                                                                                                                                                                                                                             \n    readonly ruleSetName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnReceiptRuleSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnReceiptRuleSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnReceiptRuleSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ruleSetName', cdk.validateString)(properties.ruleSetName));\n    return errors.wrap('supplied properties not correct for \"CfnReceiptRuleSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::ReceiptRuleSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnReceiptRuleSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::ReceiptRuleSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnReceiptRuleSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnReceiptRuleSetPropsValidator(properties).assertSuccess();\n    return {\n        RuleSetName: cdk.stringToCloudFormation(properties.ruleSetName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnReceiptRuleSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnReceiptRuleSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnReceiptRuleSetProps>();\n    ret.addPropertyResult('ruleSetName', 'RuleSetName', properties.RuleSetName != null ? cfn_parse.FromCloudFormation.getString(properties.RuleSetName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnReceiptRuleSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SES::ReceiptRuleSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnReceiptRuleSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnReceiptRuleSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnReceiptRuleSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                             \n    public ruleSetName: string | undefined;\n\n                                                                                                                                                                                                                              \n    constructor(scope: constructs.Construct, id: string, props: CfnReceiptRuleSetProps = {}) {\n        super(scope, id, { type: CfnReceiptRuleSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.ruleSetName = props.ruleSetName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnReceiptRuleSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            ruleSetName: this.ruleSetName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnReceiptRuleSetPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                \nexport interface CfnTemplateProps {\n\n                                                                                                                                                                                                                                                           \n    readonly template?: CfnTemplate.TemplateProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTemplateProps`\n *\n * @param properties - the TypeScript properties of a `CfnTemplateProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTemplatePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('template', CfnTemplate_TemplatePropertyValidator)(properties.template));\n    return errors.wrap('supplied properties not correct for \"CfnTemplateProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::Template` resource\n *\n * @param properties - the TypeScript properties of a `CfnTemplateProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::Template` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTemplatePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTemplatePropsValidator(properties).assertSuccess();\n    return {\n        Template: cfnTemplateTemplatePropertyToCloudFormation(properties.template),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTemplatePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTemplateProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTemplateProps>();\n    ret.addPropertyResult('template', 'Template', properties.Template != null ? CfnTemplateTemplatePropertyFromCloudFormation(properties.Template) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                 \nexport class CfnTemplate extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SES::Template\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTemplate {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTemplatePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTemplate(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                           \n    public template: CfnTemplate.TemplateProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnTemplateProps = {}) {\n        super(scope, id, { type: CfnTemplate.CFN_RESOURCE_TYPE_NAME, properties: props });\n\n        this.template = props.template;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTemplate.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            template: this.template,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTemplatePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnTemplate {\n                                                                                                                                                                                                                                                                                             \n    export interface TemplateProperty {\n                                                                                                                                                                                                                                     \n        readonly htmlPart?: string;\n                                                                                                                                                                                                                                           \n        readonly subjectPart?: string;\n                                                                                                                                                                                                                                       \n        readonly templateName?: string;\n                                                                                                                                                                                                                                                                                                       \n        readonly textPart?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TemplateProperty`\n *\n * @param properties - the TypeScript properties of a `TemplateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnTemplate_TemplatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('htmlPart', cdk.validateString)(properties.htmlPart));\n    errors.collect(cdk.propertyValidator('subjectPart', cdk.validateString)(properties.subjectPart));\n    errors.collect(cdk.propertyValidator('templateName', cdk.validateString)(properties.templateName));\n    errors.collect(cdk.propertyValidator('textPart', cdk.validateString)(properties.textPart));\n    return errors.wrap('supplied properties not correct for \"TemplateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SES::Template.Template` resource\n *\n * @param properties - the TypeScript properties of a `TemplateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SES::Template.Template` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTemplateTemplatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTemplate_TemplatePropertyValidator(properties).assertSuccess();\n    return {\n        HtmlPart: cdk.stringToCloudFormation(properties.htmlPart),\n        SubjectPart: cdk.stringToCloudFormation(properties.subjectPart),\n        TemplateName: cdk.stringToCloudFormation(properties.templateName),\n        TextPart: cdk.stringToCloudFormation(properties.textPart),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTemplateTemplatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTemplate.TemplateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTemplate.TemplateProperty>();\n    ret.addPropertyResult('htmlPart', 'HtmlPart', properties.HtmlPart != null ? cfn_parse.FromCloudFormation.getString(properties.HtmlPart) : undefined);\n    ret.addPropertyResult('subjectPart', 'SubjectPart', properties.SubjectPart != null ? cfn_parse.FromCloudFormation.getString(properties.SubjectPart) : undefined);\n    ret.addPropertyResult('templateName', 'TemplateName', properties.TemplateName != null ? cfn_parse.FromCloudFormation.getString(properties.TemplateName) : undefined);\n    ret.addPropertyResult('textPart', 'TextPart', properties.TextPart != null ? cfn_parse.FromCloudFormation.getString(properties.TextPart) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
