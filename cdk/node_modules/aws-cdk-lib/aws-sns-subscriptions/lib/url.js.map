{
  "version": 3,
  "sources": ["url.ts"],
  "sourcesContent": ["import * as sns from '../../aws-sns';\nimport { Token } from '../../core';\nimport { SubscriptionProps } from './subscription';\n\n                                         \nexport interface UrlSubscriptionProps extends SubscriptionProps {\n                                                                                                                                                                              \n  readonly rawMessageDelivery?: boolean;\n\n                                                                                               \n  readonly protocol?: sns.SubscriptionProtocol;\n}\n\n                                                                                                                                                                                                \nexport class UrlSubscription implements sns.ITopicSubscription {\n  private readonly protocol: sns.SubscriptionProtocol;\n  private readonly unresolvedUrl: boolean;\n\n  constructor(private readonly url: string, private readonly props: UrlSubscriptionProps = {}) {\n    this.unresolvedUrl = Token.isUnresolved(url);\n    if (!this.unresolvedUrl && !url.startsWith('http://') && !url.startsWith('https://')) {\n      throw new Error('URL must start with either http:// or https://');\n    }\n\n    if (this.unresolvedUrl && props.protocol === undefined) {\n      throw new Error('Must provide protocol if url is unresolved');\n    }\n\n    if (this.unresolvedUrl) {\n      this.protocol = props.protocol!;\n    } else {\n      this.protocol = this.url.startsWith('https:') ? sns.SubscriptionProtocol.HTTPS : sns.SubscriptionProtocol.HTTP;\n    }\n  }\n\n                                                                               \n  public bind(_topic: sns.ITopic): sns.TopicSubscriptionConfig {\n    return {\n      subscriberId: this.url,\n      endpoint: this.url,\n      protocol: this.protocol,\n      rawMessageDelivery: this.props.rawMessageDelivery,\n      filterPolicy: this.props.filterPolicy,\n      deadLetterQueue: this.props.deadLetterQueue,\n    };\n  }\n}\n"],
  "mappings": "sNAAA,IAAA,QAAA,iBACA,OAAA,QAAA,cAaA,qBAA4B,CAI1B,YAA6B,IAA8B,MAA8B,GAAE,CAEzF,GAF2B,KAAA,IAAA,IAA8B,KAAA,MAAA,4FACzD,KAAK,cAAgB,OAAA,MAAM,aAAa,KACpC,CAAC,KAAK,eAAiB,CAAC,IAAI,WAAW,YAAc,CAAC,IAAI,WAAW,YACvE,KAAM,IAAI,OAAM,kDAGlB,GAAI,KAAK,eAAiB,MAAM,WAAa,OAC3C,KAAM,IAAI,OAAM,8CAGlB,AAAI,KAAK,cACP,KAAK,SAAW,MAAM,SAEtB,KAAK,SAAW,KAAK,IAAI,WAAW,UAAY,IAAI,qBAAqB,MAAQ,IAAI,qBAAqB,KAKvG,KAAK,OAAkB,mEACrB,CACL,aAAc,KAAK,IACnB,SAAU,KAAK,IACf,SAAU,KAAK,SACf,mBAAoB,KAAK,MAAM,mBAC/B,aAAc,KAAK,MAAM,aACzB,gBAAiB,KAAK,MAAM,kBA7BlC,QAAA,gBAAA",
  "names": []
}
