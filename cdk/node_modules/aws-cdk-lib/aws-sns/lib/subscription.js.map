{
  "version": 3,
  "sources": ["subscription.ts"],
  "sourcesContent": ["import { PolicyStatement, ServicePrincipal } from '../../aws-iam';\nimport { IQueue } from '../../aws-sqs';\nimport { Resource } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnSubscription } from './sns.generated';\nimport { SubscriptionFilter } from './subscription-filter';\nimport { ITopic } from './topic-base';\n\n                                                  \nexport interface SubscriptionOptions {\n                                                  \n  readonly protocol: SubscriptionProtocol;\n\n                                                                                                                    \n  readonly endpoint: string;\n\n                                                                                                                                                                                                                                                                                                                           \n  readonly rawMessageDelivery?: boolean;\n\n                                                                                   \n  readonly filterPolicy?: { [attribute: string]: SubscriptionFilter };\n\n                                                                                                                                                                                                                                                                                                                    \n  readonly region?: string;\n\n                                                                                                                                                              \n  readonly deadLetterQueue?: IQueue;\n\n                                                                                                                                                                              \n  readonly subscriptionRoleArn?: string;\n}\n                                                     \nexport interface SubscriptionProps extends SubscriptionOptions {\n                                           \n  readonly topic: ITopic;\n}\n\n                                                                                                                               \nexport class Subscription extends Resource {\n\n                                                                      \n  public readonly deadLetterQueue?: IQueue;\n\n  private readonly filterPolicy?: { [attribute: string]: any[] };\n\n  constructor(scope: Construct, id: string, props: SubscriptionProps) {\n    super(scope, id);\n\n    if (props.rawMessageDelivery &&\n      [\n        SubscriptionProtocol.HTTP,\n        SubscriptionProtocol.HTTPS,\n        SubscriptionProtocol.SQS,\n        SubscriptionProtocol.FIREHOSE,\n      ]\n        .indexOf(props.protocol) < 0) {\n      throw new Error('Raw message delivery can only be enabled for HTTP, HTTPS, SQS, and Firehose subscriptions.');\n    }\n\n    if (props.filterPolicy) {\n      if (Object.keys(props.filterPolicy).length > 5) {\n        throw new Error('A filter policy can have a maximum of 5 attribute names.');\n      }\n\n      this.filterPolicy = Object.entries(props.filterPolicy)\n        .reduce(\n          (acc, [k, v]) => ({ ...acc, [k]: v.conditions }),\n          {},\n        );\n\n      let total = 1;\n      Object.values(this.filterPolicy).forEach(filter => { total *= filter.length; });\n      if (total > 100) {\n        throw new Error(`The total combination of values (${total}) must not exceed 100.`);\n      }\n    }\n\n    if (props.protocol === SubscriptionProtocol.FIREHOSE && !props.subscriptionRoleArn) {\n      throw new Error('Subscription role arn is required field for subscriptions with a firehose protocol.');\n    }\n\n    this.deadLetterQueue = this.buildDeadLetterQueue(props);\n\n    new CfnSubscription(this, 'Resource', {\n      endpoint: props.endpoint,\n      protocol: props.protocol,\n      topicArn: props.topic.topicArn,\n      rawMessageDelivery: props.rawMessageDelivery,\n      filterPolicy: this.filterPolicy,\n      region: props.region,\n      redrivePolicy: this.buildDeadLetterConfig(this.deadLetterQueue),\n      subscriptionRoleArn: props.subscriptionRoleArn,\n    });\n\n  }\n\n  private buildDeadLetterQueue(props: SubscriptionProps) {\n    if (!props.deadLetterQueue) {\n      return undefined;\n    }\n\n    const deadLetterQueue = props.deadLetterQueue;\n\n    deadLetterQueue.addToResourcePolicy(new PolicyStatement({\n      resources: [deadLetterQueue.queueArn],\n      actions: ['sqs:SendMessage'],\n      principals: [new ServicePrincipal('sns.amazonaws.com')],\n      conditions: {\n        ArnEquals: { 'aws:SourceArn': props.topic.topicArn },\n      },\n    }));\n\n    return deadLetterQueue;\n  }\n\n  private buildDeadLetterConfig(deadLetterQueue?: IQueue) {\n    if (deadLetterQueue) {\n      return {\n        deadLetterTargetArn: deadLetterQueue.queueArn,\n      };\n    } else {\n      return undefined;\n    }\n  }\n}\n\n                                                                                    \nexport enum SubscriptionProtocol {\n                                                               \n  HTTP = 'http',\n\n                                                                \n  HTTPS = 'https',\n\n                                                  \n  EMAIL = 'email',\n\n                                                                  \n  EMAIL_JSON = 'email-json',\n\n                                                 \n  SMS = 'sms',\n\n                                                              \n  SQS = 'sqs',\n\n                                                                              \n  APPLICATION = 'application',\n\n                                                         \n  LAMBDA = 'lambda',\n\n                                                                           \n  FIREHOSE = 'firehose'\n}\n"],
  "mappings": "gPAAA,UAAA,QAAA,iBAEA,OAAA,QAAA,cAEA,gBAAA,QAAA,mBAkCA,0BAAkC,QAAA,QAAQ,CAOxC,YAAY,MAAkB,GAAY,MAAwB,CAChE,MAAM,MAAO,IAEb,wEAAI,MAAM,oBACR,CACE,qBAAqB,KACrB,qBAAqB,MACrB,qBAAqB,IACrB,qBAAqB,UAEpB,QAAQ,MAAM,UAAY,EAC7B,KAAM,IAAI,OAAM,8FAGlB,GAAI,MAAM,aAAc,CACtB,GAAI,OAAO,KAAK,MAAM,cAAc,OAAS,EAC3C,KAAM,IAAI,OAAM,4DAGlB,KAAK,aAAe,OAAO,QAAQ,MAAM,cACtC,OACC,CAAC,IAAK,CAAC,EAAG,KAAQ,KAAK,KAAM,GAAI,EAAE,aACnC,IAGJ,GAAI,OAAQ,EAEZ,GADA,OAAO,OAAO,KAAK,cAAc,QAAQ,QAAS,CAAG,OAAS,OAAO,SACjE,MAAQ,IACV,KAAM,IAAI,OAAM,oCAAoC,+BAIxD,GAAI,MAAM,WAAa,qBAAqB,UAAY,CAAC,MAAM,oBAC7D,KAAM,IAAI,OAAM,uFAGlB,KAAK,gBAAkB,KAAK,qBAAqB,OAEjD,GAAI,iBAAA,gBAAgB,KAAM,WAAY,CACpC,SAAU,MAAM,SAChB,SAAU,MAAM,SAChB,SAAU,MAAM,MAAM,SACtB,mBAAoB,MAAM,mBAC1B,aAAc,KAAK,aACnB,OAAQ,MAAM,OACd,cAAe,KAAK,sBAAsB,KAAK,iBAC/C,oBAAqB,MAAM,sBAKvB,qBAAqB,MAAwB,CACnD,GAAI,CAAC,MAAM,gBACT,OAGF,KAAM,iBAAkB,MAAM,gBAE9B,uBAAgB,oBAAoB,GAAI,WAAA,gBAAgB,CACtD,UAAW,CAAC,gBAAgB,UAC5B,QAAS,CAAC,mBACV,WAAY,CAAC,GAAI,WAAA,iBAAiB,sBAClC,WAAY,CACV,UAAW,CAAE,gBAAiB,MAAM,MAAM,cAIvC,gBAGD,sBAAsB,gBAAwB,CACpD,GAAI,gBACF,MAAO,CACL,oBAAqB,gBAAgB,WAhF7C,QAAA,aAAA,8GAyFA,GAAY,sBAAZ,AAAA,UAAY,sBAAoB,CAE9B,sBAAA,KAAA,OAGA,sBAAA,MAAA,QAGA,sBAAA,MAAA,QAGA,sBAAA,WAAA,aAGA,sBAAA,IAAA,MAGA,sBAAA,IAAA,MAGA,sBAAA,YAAA,cAGA,sBAAA,OAAA,SAGA,sBAAA,SAAA,aA1BU,qBAAA,QAAA,sBAAA,SAAA,qBAAoB",
  "names": []
}
