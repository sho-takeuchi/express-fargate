{
  "version": 3,
  "sources": ["queue-base.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport { IResource, Resource, ResourceProps } from '../../core';\nimport { Construct } from 'constructs';\nimport { QueuePolicy } from './policy';\n\n                                  \nexport interface IQueue extends IResource {\n                                                      \n  readonly queueArn: string;\n\n                                                      \n  readonly queueUrl: string;\n\n                                                       \n  readonly queueName: string;\n\n                                                                                        \n  readonly encryptionMasterKey?: kms.IKey;\n\n                                                                                                    \n  readonly fifo: boolean;\n\n                                                                                                                                                                                                                                                                                                                       \n  addToResourcePolicy(statement: iam.PolicyStatement): iam.AddToResourcePolicyResult;\n\n                                                                                                                                                                                                                                                                                                                                                \n  grantConsumeMessages(grantee: iam.IGrantable): iam.Grant;\n\n                                                                                                                                                                                                                                                                                    \n  grantSendMessages(grantee: iam.IGrantable): iam.Grant;\n\n                                                                                                                                                                                                                                                                                            \n  grantPurge(grantee: iam.IGrantable): iam.Grant;\n\n                                                                                                                                                                                                                              \n  grant(grantee: iam.IGrantable, ...queueActions: string[]): iam.Grant;\n}\n\n                                                          \nexport abstract class QueueBase extends Resource implements IQueue {\n\n                                      \n  public abstract readonly queueArn: string;\n\n                                      \n  public abstract readonly queueUrl: string;\n\n                                       \n  public abstract readonly queueName: string;\n\n                                                                                        \n  public abstract readonly encryptionMasterKey?: kms.IKey;\n\n                                                                                                    \n  public abstract readonly fifo: boolean;\n\n                                                                                            \n  protected abstract readonly autoCreatePolicy: boolean;\n\n  private policy?: QueuePolicy;\n\n  constructor(scope: Construct, id: string, props: ResourceProps = {}) {\n    super(scope, id, props);\n\n    this.node.addValidation({ validate: () => this.policy?.document.validateForResourcePolicy() ?? [] });\n  }\n\n                                                                                                                                                                                                                                                                                                                       \n  public addToResourcePolicy(statement: iam.PolicyStatement): iam.AddToResourcePolicyResult {\n    if (!this.policy && this.autoCreatePolicy) {\n      this.policy = new QueuePolicy(this, 'Policy', { queues: [this] });\n    }\n\n    if (this.policy) {\n      this.policy.document.addStatements(statement);\n      return { statementAdded: true, policyDependable: this.policy };\n    }\n\n    return { statementAdded: false };\n  }\n\n                                                                                                                                                                                                                                                                                                                                                \n  public grantConsumeMessages(grantee: iam.IGrantable) {\n    const ret = this.grant(grantee,\n      'sqs:ReceiveMessage',\n      'sqs:ChangeMessageVisibility',\n      'sqs:GetQueueUrl',\n      'sqs:DeleteMessage',\n      'sqs:GetQueueAttributes');\n\n    if (this.encryptionMasterKey) {\n      this.encryptionMasterKey.grantDecrypt(grantee);\n    }\n\n    return ret;\n  }\n\n                                                                                                                                                                                                                                                                                    \n  public grantSendMessages(grantee: iam.IGrantable) {\n    const ret = this.grant(grantee,\n      'sqs:SendMessage',\n      'sqs:GetQueueAttributes',\n      'sqs:GetQueueUrl');\n\n    if (this.encryptionMasterKey) {\n      // kms:Decrypt necessary to execute grantsendMessages to an SSE enabled SQS queue\n      this.encryptionMasterKey.grantEncryptDecrypt(grantee);\n    }\n    return ret;\n  }\n\n                                                                                                                                                                                                                                                                                            \n  public grantPurge(grantee: iam.IGrantable) {\n    return this.grant(grantee,\n      'sqs:PurgeQueue',\n      'sqs:GetQueueAttributes',\n      'sqs:GetQueueUrl');\n  }\n\n                                                                                                                                                                                                                         \n  public grant(grantee: iam.IGrantable, ...actions: string[]) {\n    return iam.Grant.addToPrincipalOrResource({\n      grantee,\n      actions,\n      resourceArns: [this.queueArn],\n      resource: this,\n    });\n  }\n}\n                               \nexport interface QueueAttributes {\n                                      \n  readonly queueArn: string;\n\n                                                                                                                                                                                                        \n  readonly queueUrl?: string;\n\n                                                                                                                                 \n  readonly queueName?: string;\n\n                                                                                                                   \n  readonly keyArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                               \n  readonly fifo?: boolean;\n}\n"],
  "mappings": "gNAAA,IAAA,QAAA,iBAEA,OAAA,QAAA,cAEA,SAAA,QAAA,YAoCA,uBAAwC,QAAA,QAAQ,CAsB9C,YAAY,MAAkB,GAAY,MAAuB,GAAE,CACjE,MAAM,MAAO,GAAI,gEAEjB,KAAK,KAAK,cAAc,CAAE,SAAU,IAAK,CAAA,GAAA,IAAA,GAAA,MAAA,IAAA,IAAC,KAAK,UAAM,MAAA,KAAA,OAAA,OAAA,GAAE,SAAS,+BAAyB,MAAA,KAAA,OAAA,GAAM,MAI1F,oBAAoB,UAA8B,CAKvD,8EAJI,CAAC,KAAK,QAAU,KAAK,kBACvB,MAAK,OAAS,GAAI,UAAA,YAAY,KAAM,SAAU,CAAE,OAAQ,CAAC,SAGvD,KAAK,OACP,MAAK,OAAO,SAAS,cAAc,WAC5B,CAAE,eAAgB,GAAM,iBAAkB,KAAK,SAGjD,CAAE,eAAgB,IAIpB,qBAAqB,QAAuB,iEACjD,KAAM,KAAM,KAAK,MAAM,QACrB,qBACA,8BACA,kBACA,oBACA,0BAEF,MAAI,MAAK,qBACP,KAAK,oBAAoB,aAAa,SAGjC,IAIF,kBAAkB,QAAuB,iEAC9C,KAAM,KAAM,KAAK,MAAM,QACrB,kBACA,yBACA,mBAEF,MAAI,MAAK,qBAEP,KAAK,oBAAoB,oBAAoB,SAExC,IAIF,WAAW,QAAuB,wEAChC,KAAK,MAAM,QAChB,iBACA,yBACA,mBAIG,MAAM,WAA4B,QAAiB,wEACjD,IAAI,MAAM,yBAAyB,CACxC,QACA,QACA,aAAc,CAAC,KAAK,UACpB,SAAU,QAtFhB,QAAA,UAAA",
  "names": []
}
