{
  "version": 3,
  "sources": ["parameter.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as kms from '../../aws-kms';\nimport * as cxschema from '../../cloud-assembly-schema';\nimport {\n  CfnDynamicReference, CfnDynamicReferenceService, CfnParameter,\n  ContextProvider, Fn, IResource, Resource, Stack, Token,\n  Tokenization,\n} from '../../core';\nimport { Construct } from 'constructs';\nimport * as ssm from './ssm.generated';\nimport { arnForParameterName, AUTOGEN_MARKER } from './util';\n\n                                      \nexport interface IParameter extends IResource {\n                                                                       \n  readonly parameterArn: string;\n\n                                                                        \n  readonly parameterName: string;\n\n                                                                        \n  readonly parameterType: string;\n\n                                                                                                                                                                                                        \n  grantRead(grantee: iam.IGrantable): iam.Grant;\n\n                                                                                                                                                             \n  grantWrite(grantee: iam.IGrantable): iam.Grant;\n}\n\n                                  \nexport interface IStringParameter extends IParameter {\n                                                                                                                                     \n  readonly stringValue: string;\n}\n\n                                      \nexport interface IStringListParameter extends IParameter {\n                                                                                                                                                                                             \n  readonly stringListValue: string[];\n}\n\n                                                           \nexport interface ParameterOptions {\n                                                                                                                                                                                                                                        \n  readonly allowedPattern?: string;\n\n                                                                                                            \n  readonly description?: string;\n\n                                                                                                           \n  readonly parameterName?: string;\n\nn  readonly simpleName?: boolean;\n\n                                                                                \n  readonly tier?: ParameterTier;\n}\n\n                                                              \nexport interface StringParameterProps extends ParameterOptions {\n                                                                                                                             \n  readonly stringValue: string;\n\n                                                                                         \n  readonly type?: ParameterType;\n\n                                                                                                                  \n  readonly dataType?: ParameterDataType;\n}\n\n                                                                 \nexport interface StringListParameterProps extends ParameterOptions {\n                                                                                                                              \n  readonly stringListValue: string[];\n}\n\n/**\n * Basic features shared across all types of SSM Parameters.\n */\nabstract class ParameterBase extends Resource implements IParameter {\n  public abstract readonly parameterArn: string;\n  public abstract readonly parameterName: string;\n  public abstract readonly parameterType: string;\n\n                                                                                                                     \n  public readonly encryptionKey?: kms.IKey;\n\n  public grantRead(grantee: iam.IGrantable): iam.Grant {\n    if (this.encryptionKey) {\n      this.encryptionKey.grantDecrypt(grantee);\n    }\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: [\n        'ssm:DescribeParameters',\n        'ssm:GetParameters',\n        'ssm:GetParameter',\n        'ssm:GetParameterHistory',\n      ],\n      resourceArns: [this.parameterArn],\n    });\n  }\n\n  public grantWrite(grantee: iam.IGrantable): iam.Grant {\n    if (this.encryptionKey) {\n      this.encryptionKey.grantEncrypt(grantee);\n    }\n    return iam.Grant.addToPrincipal({\n      grantee,\n      actions: ['ssm:PutParameter'],\n      resourceArns: [this.parameterArn],\n    });\n  }\n}\n\n                             \nexport enum ParameterType {\n                       \n  STRING = 'String',\n                                                                                                                                                                                                                                                   \n  SECURE_STRING = 'SecureString',\n                            \n  STRING_LIST = 'StringList',\n                                                                      \n  AWS_EC2_IMAGE_ID = 'AWS::EC2::Image::Id',\n}\n\n                                  \nexport enum ParameterDataType {\n                     \n  TEXT = 'text',\n                              \n  AWS_EC2_IMAGE = 'aws:ec2:image',\n}\n\n                             \nexport enum ParameterTier {\n                       \n  ADVANCED = 'Advanced',\n                       \n  INTELLIGENT_TIERING = 'Intelligent-Tiering',\n                       \n  STANDARD = 'Standard',\n}\n\n                                                   \nexport interface CommonStringParameterAttributes {\n                                                                                                                                                                                                                         \n  readonly parameterName: string;\n\nn  readonly simpleName?: boolean;\n}\n\n                                                                                         \nexport interface StringParameterAttributes extends CommonStringParameterAttributes {\n                                                                                                                               \n  readonly version?: number;\n\n                                                                                         \n  readonly type?: ParameterType;\n}\n\n                                                   \nexport interface SecureStringParameterAttributes extends CommonStringParameterAttributes {\n                                                                                                                                                       \n  readonly version?: number;\n\n                                                                                                                  \n  readonly encryptionKey?: kms.IKey;\n\n}\n\n                                                                               \nexport class StringParameter extends ParameterBase implements IStringParameter {\n\n                                                              \n  public static fromStringParameterName(scope: Construct, id: string, stringParameterName: string): IStringParameter {\n    return this.fromStringParameterAttributes(scope, id, { parameterName: stringParameterName });\n  }\n\n                                                                                     \n  public static fromStringParameterAttributes(scope: Construct, id: string, attrs: StringParameterAttributes): IStringParameter {\n    if (!attrs.parameterName) {\n      throw new Error('parameterName cannot be an empty string');\n    }\n\n    const type = attrs.type || ParameterType.STRING;\n\n    const stringValue = attrs.version\n      ? new CfnDynamicReference(CfnDynamicReferenceService.SSM, `${attrs.parameterName}:${Tokenization.stringifyNumber(attrs.version)}`).toString()\n      : new CfnParameter(scope, `${id}.Parameter`, { type: `AWS::SSM::Parameter::Value<${type}>`, default: attrs.parameterName }).valueAsString;\n\n    class Import extends ParameterBase {\n      public readonly parameterName = attrs.parameterName;\n      public readonly parameterArn = arnForParameterName(this, attrs.parameterName, { simpleName: attrs.simpleName });\n      public readonly parameterType = type;\n      public readonly stringValue = stringValue;\n    }\n\n    return new Import(scope, id);\n  }\n\n                                                                                \n  public static fromSecureStringParameterAttributes(scope: Construct, id: string, attrs: SecureStringParameterAttributes): IStringParameter {\n    const version = attrs.version ? Tokenization.stringifyNumber(attrs.version) : '';\n    const stringValue = new CfnDynamicReference(CfnDynamicReferenceService.SSM_SECURE, `${attrs.parameterName}:${version}`).toString();\n\n    class Import extends ParameterBase {\n      public readonly parameterName = attrs.parameterName;\n      public readonly parameterArn = arnForParameterName(this, attrs.parameterName, { simpleName: attrs.simpleName });\n      public readonly parameterType = ParameterType.SECURE_STRING;\n      public readonly stringValue = stringValue;\n      public readonly encryptionKey = attrs.encryptionKey;\n    }\n\n    return new Import(scope, id);\n  }\n\n                                                                                                                                                                                                                                                                              \n  public static valueFromLookup(scope: Construct, parameterName: string): string {\n    const value = ContextProvider.getValue(scope, {\n      provider: cxschema.ContextProvider.SSM_PARAMETER_PROVIDER,\n      props: { parameterName },\n      dummyValue: `dummy-value-for-${parameterName}`,\n    }).value;\n\n    return value;\n  }\n\n                                                                                                                                                                                                                                                                                                                                                    \n  public static valueForStringParameter(scope: Construct, parameterName: string, version?: number): string {\n    return StringParameter.valueForTypedStringParameter(scope, parameterName, ParameterType.STRING, version);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                    \n  public static valueForTypedStringParameter(scope: Construct, parameterName: string, type = ParameterType.STRING, version?: number): string {\n    const stack = Stack.of(scope);\n    const id = makeIdentityForImportedValue(parameterName);\n    const exists = stack.node.tryFindChild(id) as IStringParameter;\n\n    if (exists) { return exists.stringValue; }\n\n    return this.fromStringParameterAttributes(stack, id, { parameterName, version, type }).stringValue;\n  }\n\n                                                                                                                                                                                                                                                  \n  public static valueForSecureStringParameter(scope: Construct, parameterName: string, version: number): string {\n    const stack = Stack.of(scope);\n    const id = makeIdentityForImportedValue(parameterName);\n    const exists = stack.node.tryFindChild(id) as IStringParameter;\n    if (exists) { return exists.stringValue; }\n\n    return this.fromSecureStringParameterAttributes(stack, id, { parameterName, version }).stringValue;\n  }\n\n  public readonly parameterArn: string;\n  public readonly parameterName: string;\n  public readonly parameterType: string;\n  public readonly stringValue: string;\n\n  constructor(scope: Construct, id: string, props: StringParameterProps) {\n    super(scope, id, {\n      physicalName: props.parameterName,\n    });\n\n    if (props.allowedPattern) {\n      _assertValidValue(props.stringValue, props.allowedPattern);\n    }\n\n    validateParameterName(this.physicalName);\n\n    if (props.description && props.description?.length > 1024) {\n      throw new Error('Description cannot be longer than 1024 characters.');\n    }\n\n    if (props.type && props.type === ParameterType.AWS_EC2_IMAGE_ID) {\n      throw new Error('The type must either be ParameterType.STRING or ParameterType.STRING_LIST. Did you mean to set dataType: ParameterDataType.AWS_EC2_IMAGE instead?');\n    }\n\n    const resource = new ssm.CfnParameter(this, 'Resource', {\n      allowedPattern: props.allowedPattern,\n      description: props.description,\n      name: this.physicalName,\n      tier: props.tier,\n      type: props.type || ParameterType.STRING,\n      dataType: props.dataType,\n      value: props.stringValue,\n    });\n\n    this.parameterName = this.getResourceNameAttribute(resource.ref);\n    this.parameterArn = arnForParameterName(this, this.parameterName, {\n      physicalName: props.parameterName || AUTOGEN_MARKER,\n      simpleName: props.simpleName,\n    });\n\n    this.parameterType = resource.attrType;\n    this.stringValue = resource.attrValue;\n  }\n}\n\n                                                                                   \nexport class StringListParameter extends ParameterBase implements IStringListParameter {\n\n                                                                                                                  \n  public static fromStringListParameterName(scope: Construct, id: string, stringListParameterName: string): IStringListParameter {\n    class Import extends ParameterBase {\n      public readonly parameterName = stringListParameterName;\n      public readonly parameterArn = arnForParameterName(this, this.parameterName);\n      public readonly parameterType = ParameterType.STRING_LIST;\n      public readonly stringListValue = Fn.split(',', new CfnDynamicReference(CfnDynamicReferenceService.SSM, stringListParameterName).toString());\n    }\n\n    return new Import(scope, id);\n  }\n\n  public readonly parameterArn: string;\n  public readonly parameterName: string;\n  public readonly parameterType: string;\n  public readonly stringListValue: string[];\n\n  constructor(scope: Construct, id: string, props: StringListParameterProps) {\n    super(scope, id, {\n      physicalName: props.parameterName,\n    });\n\n    if (props.stringListValue.find(str => !Token.isUnresolved(str) && str.indexOf(',') !== -1)) {\n      throw new Error('Values of a StringList SSM Parameter cannot contain the \\',\\' character. Use a string parameter instead.');\n    }\n\n    if (props.allowedPattern && !Token.isUnresolved(props.stringListValue)) {\n      props.stringListValue.forEach(str => _assertValidValue(str, props.allowedPattern!));\n    }\n\n    validateParameterName(this.physicalName);\n\n    if (props.description && props.description?.length > 1024) {\n      throw new Error('Description cannot be longer than 1024 characters.');\n    }\n\n    const resource = new ssm.CfnParameter(this, 'Resource', {\n      allowedPattern: props.allowedPattern,\n      description: props.description,\n      name: this.physicalName,\n      tier: props.tier,\n      type: ParameterType.STRING_LIST,\n      value: props.stringListValue.join(','),\n    });\n    this.parameterName = this.getResourceNameAttribute(resource.ref);\n    this.parameterArn = arnForParameterName(this, this.parameterName, {\n      physicalName: props.parameterName || AUTOGEN_MARKER,\n      simpleName: props.simpleName,\n    });\n\n    this.parameterType = resource.attrType;\n    this.stringListValue = Fn.split(',', resource.attrValue);\n  }\n}\n\n/**\n * Validates whether a supplied value conforms to the allowedPattern, granted neither is an unresolved token.\n *\n * @param value          the value to be validated.\n * @param allowedPattern the regular expression to use for validation.\n *\n * @throws if the ``value`` does not conform to the ``allowedPattern`` and neither is an unresolved token (per\n *         ``cdk.unresolved``).\n */\nfunction _assertValidValue(value: string, allowedPattern: string): void {\n  if (Token.isUnresolved(value) || Token.isUnresolved(allowedPattern)) {\n    // Unable to perform validations against unresolved tokens\n    return;\n  }\n  if (!new RegExp(allowedPattern).test(value)) {\n    throw new Error(`The supplied value (${value}) does not match the specified allowedPattern (${allowedPattern})`);\n  }\n}\n\nfunction makeIdentityForImportedValue(parameterName: string) {\n  return `SsmParameterValue:${parameterName}:C96584B6-F00A-464E-AD19-53AFF4B05118`;\n}\n\nfunction validateParameterName(parameterName: string) {\n  if (Token.isUnresolved(parameterName)) { return; }\n  if (parameterName.length > 2048) {\n    throw new Error('name cannot be longer than 2048 characters.');\n  }\n  if (!parameterName.match(/^[\\/\\w.-]+$/)) {\n    throw new Error(`name must only contain letters, numbers, and the following 4 symbols .-_/; got ${parameterName}`);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
