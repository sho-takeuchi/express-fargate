{
  "version": 3,
  "sources": ["ssm.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:53:56.079Z\",\"fingerprint\":\"eRfkguTS62a94/qCcvX+XYJjWcfJmZMWh8w11NCUfZ0=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                      \nexport interface CfnAssociationProps {\n\nn    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly applyOnlyAtCronInterval?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                              \n    readonly associationName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    readonly automationTargetParameterName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n    readonly calendarNames?: string[];\n\n                                                                                                                                                                                                                                         \n    readonly complianceSeverity?: string;\n\nn    readonly documentVersion?: string;\n\nn    readonly instanceId?: string;\n\nn    readonly maxConcurrency?: string;\n\nn    readonly maxErrors?: string;\n\n                                                                                                                                                                                                                                                                                            \n    readonly outputLocation?: CfnAssociation.InstanceAssociationOutputLocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                       \n    readonly parameters?: { [key: string]: (any | cdk.IResolvable) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                               \n    readonly scheduleExpression?: string;\n\nn    readonly syncCompliance?: string;\n\nn    readonly targets?: Array<CfnAssociation.TargetProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly waitForSuccessTimeoutSeconds?: number;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnAssociationProps`\n *\n * @param properties - the TypeScript properties of a `CfnAssociationProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnAssociationPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('applyOnlyAtCronInterval', cdk.validateBoolean)(properties.applyOnlyAtCronInterval));\n    errors.collect(cdk.propertyValidator('associationName', cdk.validateString)(properties.associationName));\n    errors.collect(cdk.propertyValidator('automationTargetParameterName', cdk.validateString)(properties.automationTargetParameterName));\n    errors.collect(cdk.propertyValidator('calendarNames', cdk.listValidator(cdk.validateString))(properties.calendarNames));\n    errors.collect(cdk.propertyValidator('complianceSeverity', cdk.validateString)(properties.complianceSeverity));\n    errors.collect(cdk.propertyValidator('documentVersion', cdk.validateString)(properties.documentVersion));\n    errors.collect(cdk.propertyValidator('instanceId', cdk.validateString)(properties.instanceId));\n    errors.collect(cdk.propertyValidator('maxConcurrency', cdk.validateString)(properties.maxConcurrency));\n    errors.collect(cdk.propertyValidator('maxErrors', cdk.validateString)(properties.maxErrors));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('outputLocation', CfnAssociation_InstanceAssociationOutputLocationPropertyValidator)(properties.outputLocation));\n    errors.collect(cdk.propertyValidator('parameters', cdk.hashValidator(cdk.validateObject))(properties.parameters));\n    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.validateString)(properties.scheduleExpression));\n    errors.collect(cdk.propertyValidator('syncCompliance', cdk.validateString)(properties.syncCompliance));\n    errors.collect(cdk.propertyValidator('targets', cdk.listValidator(CfnAssociation_TargetPropertyValidator))(properties.targets));\n    errors.collect(cdk.propertyValidator('waitForSuccessTimeoutSeconds', cdk.validateNumber)(properties.waitForSuccessTimeoutSeconds));\n    return errors.wrap('supplied properties not correct for \"CfnAssociationProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::Association` resource\n *\n * @param properties - the TypeScript properties of a `CfnAssociationProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::Association` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAssociationPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAssociationPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        ApplyOnlyAtCronInterval: cdk.booleanToCloudFormation(properties.applyOnlyAtCronInterval),\n        AssociationName: cdk.stringToCloudFormation(properties.associationName),\n        AutomationTargetParameterName: cdk.stringToCloudFormation(properties.automationTargetParameterName),\n        CalendarNames: cdk.listMapper(cdk.stringToCloudFormation)(properties.calendarNames),\n        ComplianceSeverity: cdk.stringToCloudFormation(properties.complianceSeverity),\n        DocumentVersion: cdk.stringToCloudFormation(properties.documentVersion),\n        InstanceId: cdk.stringToCloudFormation(properties.instanceId),\n        MaxConcurrency: cdk.stringToCloudFormation(properties.maxConcurrency),\n        MaxErrors: cdk.stringToCloudFormation(properties.maxErrors),\n        OutputLocation: cfnAssociationInstanceAssociationOutputLocationPropertyToCloudFormation(properties.outputLocation),\n        Parameters: cdk.hashMapper(cdk.objectToCloudFormation)(properties.parameters),\n        ScheduleExpression: cdk.stringToCloudFormation(properties.scheduleExpression),\n        SyncCompliance: cdk.stringToCloudFormation(properties.syncCompliance),\n        Targets: cdk.listMapper(cfnAssociationTargetPropertyToCloudFormation)(properties.targets),\n        WaitForSuccessTimeoutSeconds: cdk.numberToCloudFormation(properties.waitForSuccessTimeoutSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAssociationPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAssociationProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAssociationProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('applyOnlyAtCronInterval', 'ApplyOnlyAtCronInterval', properties.ApplyOnlyAtCronInterval != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ApplyOnlyAtCronInterval) : undefined);\n    ret.addPropertyResult('associationName', 'AssociationName', properties.AssociationName != null ? cfn_parse.FromCloudFormation.getString(properties.AssociationName) : undefined);\n    ret.addPropertyResult('automationTargetParameterName', 'AutomationTargetParameterName', properties.AutomationTargetParameterName != null ? cfn_parse.FromCloudFormation.getString(properties.AutomationTargetParameterName) : undefined);\n    ret.addPropertyResult('calendarNames', 'CalendarNames', properties.CalendarNames != null ? cfn_parse.FromCloudFormation.getStringArray(properties.CalendarNames) : undefined);\n    ret.addPropertyResult('complianceSeverity', 'ComplianceSeverity', properties.ComplianceSeverity != null ? cfn_parse.FromCloudFormation.getString(properties.ComplianceSeverity) : undefined);\n    ret.addPropertyResult('documentVersion', 'DocumentVersion', properties.DocumentVersion != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentVersion) : undefined);\n    ret.addPropertyResult('instanceId', 'InstanceId', properties.InstanceId != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceId) : undefined);\n    ret.addPropertyResult('maxConcurrency', 'MaxConcurrency', properties.MaxConcurrency != null ? cfn_parse.FromCloudFormation.getString(properties.MaxConcurrency) : undefined);\n    ret.addPropertyResult('maxErrors', 'MaxErrors', properties.MaxErrors != null ? cfn_parse.FromCloudFormation.getString(properties.MaxErrors) : undefined);\n    ret.addPropertyResult('outputLocation', 'OutputLocation', properties.OutputLocation != null ? CfnAssociationInstanceAssociationOutputLocationPropertyFromCloudFormation(properties.OutputLocation) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getAny)(properties.Parameters) : undefined);\n    ret.addPropertyResult('scheduleExpression', 'ScheduleExpression', properties.ScheduleExpression != null ? cfn_parse.FromCloudFormation.getString(properties.ScheduleExpression) : undefined);\n    ret.addPropertyResult('syncCompliance', 'SyncCompliance', properties.SyncCompliance != null ? cfn_parse.FromCloudFormation.getString(properties.SyncCompliance) : undefined);\n    ret.addPropertyResult('targets', 'Targets', properties.Targets != null ? cfn_parse.FromCloudFormation.getArray(CfnAssociationTargetPropertyFromCloudFormation)(properties.Targets) : undefined);\n    ret.addPropertyResult('waitForSuccessTimeoutSeconds', 'WaitForSuccessTimeoutSeconds', properties.WaitForSuccessTimeoutSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.WaitForSuccessTimeoutSeconds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnAssociation extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SSM::Association\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAssociation {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnAssociationPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnAssociation(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                        \n    public readonly attrAssociationId: string;\n\nn    public name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public applyOnlyAtCronInterval: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                              \n    public associationName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public automationTargetParameterName: string | undefined;\n\nn    public calendarNames: string[] | undefined;\n\n                                                                                                                                                                                                                                         \n    public complianceSeverity: string | undefined;\n\nn    public documentVersion: string | undefined;\n\nn    public instanceId: string | undefined;\n\nn    public maxConcurrency: string | undefined;\n\nn    public maxErrors: string | undefined;\n\n                                                                                                                                                                                                                                                                                            \n    public outputLocation: CfnAssociation.InstanceAssociationOutputLocationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                       \n    public parameters: { [key: string]: (any | cdk.IResolvable) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                               \n    public scheduleExpression: string | undefined;\n\nn    public syncCompliance: string | undefined;\n\nn    public targets: Array<CfnAssociation.TargetProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public waitForSuccessTimeoutSeconds: number | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnAssociationProps) {\n        super(scope, id, { type: CfnAssociation.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        this.attrAssociationId = cdk.Token.asString(this.getAtt('AssociationId'));\n\n        this.name = props.name;\n        this.applyOnlyAtCronInterval = props.applyOnlyAtCronInterval;\n        this.associationName = props.associationName;\n        this.automationTargetParameterName = props.automationTargetParameterName;\n        this.calendarNames = props.calendarNames;\n        this.complianceSeverity = props.complianceSeverity;\n        this.documentVersion = props.documentVersion;\n        this.instanceId = props.instanceId;\n        this.maxConcurrency = props.maxConcurrency;\n        this.maxErrors = props.maxErrors;\n        this.outputLocation = props.outputLocation;\n        this.parameters = props.parameters;\n        this.scheduleExpression = props.scheduleExpression;\n        this.syncCompliance = props.syncCompliance;\n        this.targets = props.targets;\n        this.waitForSuccessTimeoutSeconds = props.waitForSuccessTimeoutSeconds;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnAssociation.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            applyOnlyAtCronInterval: this.applyOnlyAtCronInterval,\n            associationName: this.associationName,\n            automationTargetParameterName: this.automationTargetParameterName,\n            calendarNames: this.calendarNames,\n            complianceSeverity: this.complianceSeverity,\n            documentVersion: this.documentVersion,\n            instanceId: this.instanceId,\n            maxConcurrency: this.maxConcurrency,\n            maxErrors: this.maxErrors,\n            outputLocation: this.outputLocation,\n            parameters: this.parameters,\n            scheduleExpression: this.scheduleExpression,\n            syncCompliance: this.syncCompliance,\n            targets: this.targets,\n            waitForSuccessTimeoutSeconds: this.waitForSuccessTimeoutSeconds,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnAssociationPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnAssociation {\nn    export interface InstanceAssociationOutputLocationProperty {\nn        readonly s3Location?: CfnAssociation.S3OutputLocationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InstanceAssociationOutputLocationProperty`\n *\n * @param properties - the TypeScript properties of a `InstanceAssociationOutputLocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAssociation_InstanceAssociationOutputLocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Location', CfnAssociation_S3OutputLocationPropertyValidator)(properties.s3Location));\n    return errors.wrap('supplied properties not correct for \"InstanceAssociationOutputLocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::Association.InstanceAssociationOutputLocation` resource\n *\n * @param properties - the TypeScript properties of a `InstanceAssociationOutputLocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::Association.InstanceAssociationOutputLocation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAssociationInstanceAssociationOutputLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAssociation_InstanceAssociationOutputLocationPropertyValidator(properties).assertSuccess();\n    return {\n        S3Location: cfnAssociationS3OutputLocationPropertyToCloudFormation(properties.s3Location),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAssociationInstanceAssociationOutputLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAssociation.InstanceAssociationOutputLocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAssociation.InstanceAssociationOutputLocationProperty>();\n    ret.addPropertyResult('s3Location', 'S3Location', properties.S3Location != null ? CfnAssociationS3OutputLocationPropertyFromCloudFormation(properties.S3Location) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAssociation {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface S3OutputLocationProperty {\n                                                                                                                                                                                                                                                                    \n        readonly outputS3BucketName?: string;\n                                                                                                                                                                                                                                                                 \n        readonly outputS3KeyPrefix?: string;\n                                                                                                                                                                                                                                                                      \n        readonly outputS3Region?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3OutputLocationProperty`\n *\n * @param properties - the TypeScript properties of a `S3OutputLocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAssociation_S3OutputLocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('outputS3BucketName', cdk.validateString)(properties.outputS3BucketName));\n    errors.collect(cdk.propertyValidator('outputS3KeyPrefix', cdk.validateString)(properties.outputS3KeyPrefix));\n    errors.collect(cdk.propertyValidator('outputS3Region', cdk.validateString)(properties.outputS3Region));\n    return errors.wrap('supplied properties not correct for \"S3OutputLocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::Association.S3OutputLocation` resource\n *\n * @param properties - the TypeScript properties of a `S3OutputLocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::Association.S3OutputLocation` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAssociationS3OutputLocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAssociation_S3OutputLocationPropertyValidator(properties).assertSuccess();\n    return {\n        OutputS3BucketName: cdk.stringToCloudFormation(properties.outputS3BucketName),\n        OutputS3KeyPrefix: cdk.stringToCloudFormation(properties.outputS3KeyPrefix),\n        OutputS3Region: cdk.stringToCloudFormation(properties.outputS3Region),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAssociationS3OutputLocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAssociation.S3OutputLocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAssociation.S3OutputLocationProperty>();\n    ret.addPropertyResult('outputS3BucketName', 'OutputS3BucketName', properties.OutputS3BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.OutputS3BucketName) : undefined);\n    ret.addPropertyResult('outputS3KeyPrefix', 'OutputS3KeyPrefix', properties.OutputS3KeyPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.OutputS3KeyPrefix) : undefined);\n    ret.addPropertyResult('outputS3Region', 'OutputS3Region', properties.OutputS3Region != null ? cfn_parse.FromCloudFormation.getString(properties.OutputS3Region) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnAssociation {\nn    export interface TargetProperty {\n                                                                                                                                                                                                                                                                                                   \n        readonly key: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly values: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetProperty`\n *\n * @param properties - the TypeScript properties of a `TargetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnAssociation_TargetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));\n    return errors.wrap('supplied properties not correct for \"TargetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::Association.Target` resource\n *\n * @param properties - the TypeScript properties of a `TargetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::Association.Target` resource.\n */\n// @ts-ignore TS6133\nfunction cfnAssociationTargetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnAssociation_TargetPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnAssociationTargetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAssociation.TargetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAssociation.TargetProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getStringArray(properties.Values));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                \nexport interface CfnDocumentProps {\n\n                                                                                                                                                                                                                                                                                        \n    readonly content: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                    \n    readonly attachments?: Array<CfnDocument.AttachmentsSourceProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly documentFormat?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    readonly documentType?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly name?: string;\n\nn    readonly requires?: Array<CfnDocument.DocumentRequiresProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                \n    readonly tags?: cdk.CfnTag[];\n\nn    readonly targetType?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n    readonly versionName?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDocumentProps`\n *\n * @param properties - the TypeScript properties of a `CfnDocumentProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDocumentPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attachments', cdk.listValidator(CfnDocument_AttachmentsSourcePropertyValidator))(properties.attachments));\n    errors.collect(cdk.propertyValidator('content', cdk.requiredValidator)(properties.content));\n    errors.collect(cdk.propertyValidator('content', cdk.validateObject)(properties.content));\n    errors.collect(cdk.propertyValidator('documentFormat', cdk.validateString)(properties.documentFormat));\n    errors.collect(cdk.propertyValidator('documentType', cdk.validateString)(properties.documentType));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('requires', cdk.listValidator(CfnDocument_DocumentRequiresPropertyValidator))(properties.requires));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('targetType', cdk.validateString)(properties.targetType));\n    errors.collect(cdk.propertyValidator('versionName', cdk.validateString)(properties.versionName));\n    return errors.wrap('supplied properties not correct for \"CfnDocumentProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::Document` resource\n *\n * @param properties - the TypeScript properties of a `CfnDocumentProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::Document` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDocumentPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDocumentPropsValidator(properties).assertSuccess();\n    return {\n        Content: cdk.objectToCloudFormation(properties.content),\n        Attachments: cdk.listMapper(cfnDocumentAttachmentsSourcePropertyToCloudFormation)(properties.attachments),\n        DocumentFormat: cdk.stringToCloudFormation(properties.documentFormat),\n        DocumentType: cdk.stringToCloudFormation(properties.documentType),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Requires: cdk.listMapper(cfnDocumentDocumentRequiresPropertyToCloudFormation)(properties.requires),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TargetType: cdk.stringToCloudFormation(properties.targetType),\n        VersionName: cdk.stringToCloudFormation(properties.versionName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDocumentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDocumentProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDocumentProps>();\n    ret.addPropertyResult('content', 'Content', cfn_parse.FromCloudFormation.getAny(properties.Content));\n    ret.addPropertyResult('attachments', 'Attachments', properties.Attachments != null ? cfn_parse.FromCloudFormation.getArray(CfnDocumentAttachmentsSourcePropertyFromCloudFormation)(properties.Attachments) : undefined);\n    ret.addPropertyResult('documentFormat', 'DocumentFormat', properties.DocumentFormat != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentFormat) : undefined);\n    ret.addPropertyResult('documentType', 'DocumentType', properties.DocumentType != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentType) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('requires', 'Requires', properties.Requires != null ? cfn_parse.FromCloudFormation.getArray(CfnDocumentDocumentRequiresPropertyFromCloudFormation)(properties.Requires) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('targetType', 'TargetType', properties.TargetType != null ? cfn_parse.FromCloudFormation.getString(properties.TargetType) : undefined);\n    ret.addPropertyResult('versionName', 'VersionName', properties.VersionName != null ? cfn_parse.FromCloudFormation.getString(properties.VersionName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \nexport class CfnDocument extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SSM::Document\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDocument {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDocumentPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDocument(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                        \n    public content: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                    \n    public attachments: Array<CfnDocument.AttachmentsSourceProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                     \n    public documentFormat: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                          \n    public documentType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    public name: string | undefined;\n\nn    public requires: Array<CfnDocument.DocumentRequiresProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\nn    public targetType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n    public versionName: string | undefined;\n\n                                                                                                                                                                                                                        \n    constructor(scope: constructs.Construct, id: string, props: CfnDocumentProps) {\n        super(scope, id, { type: CfnDocument.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'content', this);\n\n        this.content = props.content;\n        this.attachments = props.attachments;\n        this.documentFormat = props.documentFormat;\n        this.documentType = props.documentType;\n        this.name = props.name;\n        this.requires = props.requires;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SSM::Document\", props.tags, { tagPropertyName: 'tags' });\n        this.targetType = props.targetType;\n        this.versionName = props.versionName;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDocument.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            content: this.content,\n            attachments: this.attachments,\n            documentFormat: this.documentFormat,\n            documentType: this.documentType,\n            name: this.name,\n            requires: this.requires,\n            tags: this.tags.renderTags(),\n            targetType: this.targetType,\n            versionName: this.versionName,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDocumentPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnDocument {\n                                                                                                                                                                                                                                                                                                                                                                           \n    export interface AttachmentsSourceProperty {\n                                                                                                                                                                                                                                                                                                               \n        readonly key?: string;\n                                                                                                                                                                                                                                                                 \n        readonly name?: string;\nn        readonly values?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AttachmentsSourceProperty`\n *\n * @param properties - the TypeScript properties of a `AttachmentsSourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDocument_AttachmentsSourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));\n    return errors.wrap('supplied properties not correct for \"AttachmentsSourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::Document.AttachmentsSource` resource\n *\n * @param properties - the TypeScript properties of a `AttachmentsSourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::Document.AttachmentsSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDocumentAttachmentsSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDocument_AttachmentsSourcePropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDocumentAttachmentsSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDocument.AttachmentsSourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDocument.AttachmentsSourceProperty>();\n    ret.addPropertyResult('key', 'Key', properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('values', 'Values', properties.Values != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Values) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnDocument {\n                                                                                                                                                                                                                                                             \n    export interface DocumentRequiresProperty {\n                                                                                                                                                                                                                                                                                                           \n        readonly name?: string;\n                                                                                                                                                                                                                                                                               \n        readonly version?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DocumentRequiresProperty`\n *\n * @param properties - the TypeScript properties of a `DocumentRequiresProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnDocument_DocumentRequiresPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"DocumentRequiresProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::Document.DocumentRequires` resource\n *\n * @param properties - the TypeScript properties of a `DocumentRequiresProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::Document.DocumentRequires` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDocumentDocumentRequiresPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDocument_DocumentRequiresPropertyValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDocumentDocumentRequiresPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDocument.DocumentRequiresProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDocument.DocumentRequiresProperty>();\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                  \nexport interface CfnMaintenanceWindowProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    readonly allowUnassociatedTargets: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                 \n    readonly cutoff: number;\n\n                                                                                                                                                                                                                                    \n    readonly duration: number;\n\n                                                                                                                                                                                                                   \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                    \n    readonly schedule: string;\n\n                                                                                                                                                                                                                               \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                                   \n    readonly endDate?: string;\n\n                                                                                                                                                                                                                                                                                                   \n    readonly scheduleOffset?: number;\n\n                                                                                                                                                                                                                                                                                                                              \n    readonly scheduleTimezone?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly startDate?: string;\n\nn    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMaintenanceWindowProps`\n *\n * @param properties - the TypeScript properties of a `CfnMaintenanceWindowProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMaintenanceWindowPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowUnassociatedTargets', cdk.requiredValidator)(properties.allowUnassociatedTargets));\n    errors.collect(cdk.propertyValidator('allowUnassociatedTargets', cdk.validateBoolean)(properties.allowUnassociatedTargets));\n    errors.collect(cdk.propertyValidator('cutoff', cdk.requiredValidator)(properties.cutoff));\n    errors.collect(cdk.propertyValidator('cutoff', cdk.validateNumber)(properties.cutoff));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('duration', cdk.requiredValidator)(properties.duration));\n    errors.collect(cdk.propertyValidator('duration', cdk.validateNumber)(properties.duration));\n    errors.collect(cdk.propertyValidator('endDate', cdk.validateString)(properties.endDate));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('schedule', cdk.requiredValidator)(properties.schedule));\n    errors.collect(cdk.propertyValidator('schedule', cdk.validateString)(properties.schedule));\n    errors.collect(cdk.propertyValidator('scheduleOffset', cdk.validateNumber)(properties.scheduleOffset));\n    errors.collect(cdk.propertyValidator('scheduleTimezone', cdk.validateString)(properties.scheduleTimezone));\n    errors.collect(cdk.propertyValidator('startDate', cdk.validateString)(properties.startDate));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnMaintenanceWindowProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindow` resource\n *\n * @param properties - the TypeScript properties of a `CfnMaintenanceWindowProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindow` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMaintenanceWindowPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMaintenanceWindowPropsValidator(properties).assertSuccess();\n    return {\n        AllowUnassociatedTargets: cdk.booleanToCloudFormation(properties.allowUnassociatedTargets),\n        Cutoff: cdk.numberToCloudFormation(properties.cutoff),\n        Duration: cdk.numberToCloudFormation(properties.duration),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Schedule: cdk.stringToCloudFormation(properties.schedule),\n        Description: cdk.stringToCloudFormation(properties.description),\n        EndDate: cdk.stringToCloudFormation(properties.endDate),\n        ScheduleOffset: cdk.numberToCloudFormation(properties.scheduleOffset),\n        ScheduleTimezone: cdk.stringToCloudFormation(properties.scheduleTimezone),\n        StartDate: cdk.stringToCloudFormation(properties.startDate),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMaintenanceWindowPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMaintenanceWindowProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMaintenanceWindowProps>();\n    ret.addPropertyResult('allowUnassociatedTargets', 'AllowUnassociatedTargets', cfn_parse.FromCloudFormation.getBoolean(properties.AllowUnassociatedTargets));\n    ret.addPropertyResult('cutoff', 'Cutoff', cfn_parse.FromCloudFormation.getNumber(properties.Cutoff));\n    ret.addPropertyResult('duration', 'Duration', cfn_parse.FromCloudFormation.getNumber(properties.Duration));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('schedule', 'Schedule', cfn_parse.FromCloudFormation.getString(properties.Schedule));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('endDate', 'EndDate', properties.EndDate != null ? cfn_parse.FromCloudFormation.getString(properties.EndDate) : undefined);\n    ret.addPropertyResult('scheduleOffset', 'ScheduleOffset', properties.ScheduleOffset != null ? cfn_parse.FromCloudFormation.getNumber(properties.ScheduleOffset) : undefined);\n    ret.addPropertyResult('scheduleTimezone', 'ScheduleTimezone', properties.ScheduleTimezone != null ? cfn_parse.FromCloudFormation.getString(properties.ScheduleTimezone) : undefined);\n    ret.addPropertyResult('startDate', 'StartDate', properties.StartDate != null ? cfn_parse.FromCloudFormation.getString(properties.StartDate) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnMaintenanceWindow extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SSM::MaintenanceWindow\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMaintenanceWindow {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMaintenanceWindowPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMaintenanceWindow(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n    public allowUnassociatedTargets: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                 \n    public cutoff: number;\n\n                                                                                                                                                                                                                                    \n    public duration: number;\n\n                                                                                                                                                                                                                   \n    public name: string;\n\n                                                                                                                                                                                                                                                                    \n    public schedule: string;\n\n                                                                                                                                                                                                                               \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                   \n    public endDate: string | undefined;\n\n                                                                                                                                                                                                                                                                                                   \n    public scheduleOffset: number | undefined;\n\n                                                                                                                                                                                                                                                                                                                              \n    public scheduleTimezone: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    public startDate: string | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnMaintenanceWindowProps) {\n        super(scope, id, { type: CfnMaintenanceWindow.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'allowUnassociatedTargets', this);\n        cdk.requireProperty(props, 'cutoff', this);\n        cdk.requireProperty(props, 'duration', this);\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'schedule', this);\n\n        this.allowUnassociatedTargets = props.allowUnassociatedTargets;\n        this.cutoff = props.cutoff;\n        this.duration = props.duration;\n        this.name = props.name;\n        this.schedule = props.schedule;\n        this.description = props.description;\n        this.endDate = props.endDate;\n        this.scheduleOffset = props.scheduleOffset;\n        this.scheduleTimezone = props.scheduleTimezone;\n        this.startDate = props.startDate;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SSM::MaintenanceWindow\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMaintenanceWindow.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            allowUnassociatedTargets: this.allowUnassociatedTargets,\n            cutoff: this.cutoff,\n            duration: this.duration,\n            name: this.name,\n            schedule: this.schedule,\n            description: this.description,\n            endDate: this.endDate,\n            scheduleOffset: this.scheduleOffset,\n            scheduleTimezone: this.scheduleTimezone,\n            startDate: this.startDate,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMaintenanceWindowPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                              \nexport interface CfnMaintenanceWindowTargetProps {\n\n                                                                                                                                                                                                                                                                            \n    readonly resourceType: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly targets: Array<CfnMaintenanceWindowTarget.TargetsProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                             \n    readonly windowId: string;\n\n                                                                                                                                                                                                                                \n    readonly description?: string;\n\n                                                                                                                                                                                                                                       \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                            \n    readonly ownerInformation?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMaintenanceWindowTargetProps`\n *\n * @param properties - the TypeScript properties of a `CfnMaintenanceWindowTargetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMaintenanceWindowTargetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('ownerInformation', cdk.validateString)(properties.ownerInformation));\n    errors.collect(cdk.propertyValidator('resourceType', cdk.requiredValidator)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('resourceType', cdk.validateString)(properties.resourceType));\n    errors.collect(cdk.propertyValidator('targets', cdk.requiredValidator)(properties.targets));\n    errors.collect(cdk.propertyValidator('targets', cdk.listValidator(CfnMaintenanceWindowTarget_TargetsPropertyValidator))(properties.targets));\n    errors.collect(cdk.propertyValidator('windowId', cdk.requiredValidator)(properties.windowId));\n    errors.collect(cdk.propertyValidator('windowId', cdk.validateString)(properties.windowId));\n    return errors.wrap('supplied properties not correct for \"CfnMaintenanceWindowTargetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTarget` resource\n *\n * @param properties - the TypeScript properties of a `CfnMaintenanceWindowTargetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTarget` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMaintenanceWindowTargetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMaintenanceWindowTargetPropsValidator(properties).assertSuccess();\n    return {\n        ResourceType: cdk.stringToCloudFormation(properties.resourceType),\n        Targets: cdk.listMapper(cfnMaintenanceWindowTargetTargetsPropertyToCloudFormation)(properties.targets),\n        WindowId: cdk.stringToCloudFormation(properties.windowId),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Name: cdk.stringToCloudFormation(properties.name),\n        OwnerInformation: cdk.stringToCloudFormation(properties.ownerInformation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMaintenanceWindowTargetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMaintenanceWindowTargetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMaintenanceWindowTargetProps>();\n    ret.addPropertyResult('resourceType', 'ResourceType', cfn_parse.FromCloudFormation.getString(properties.ResourceType));\n    ret.addPropertyResult('targets', 'Targets', cfn_parse.FromCloudFormation.getArray(CfnMaintenanceWindowTargetTargetsPropertyFromCloudFormation)(properties.Targets));\n    ret.addPropertyResult('windowId', 'WindowId', cfn_parse.FromCloudFormation.getString(properties.WindowId));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('ownerInformation', 'OwnerInformation', properties.OwnerInformation != null ? cfn_parse.FromCloudFormation.getString(properties.OwnerInformation) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnMaintenanceWindowTarget extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SSM::MaintenanceWindowTarget\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMaintenanceWindowTarget {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMaintenanceWindowTargetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMaintenanceWindowTarget(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                            \n    public resourceType: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public targets: Array<CfnMaintenanceWindowTarget.TargetsProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                             \n    public windowId: string;\n\n                                                                                                                                                                                                                                \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                       \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                            \n    public ownerInformation: string | undefined;\n\n                                                                                                                                                                                                                                       \n    constructor(scope: constructs.Construct, id: string, props: CfnMaintenanceWindowTargetProps) {\n        super(scope, id, { type: CfnMaintenanceWindowTarget.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'resourceType', this);\n        cdk.requireProperty(props, 'targets', this);\n        cdk.requireProperty(props, 'windowId', this);\n\n        this.resourceType = props.resourceType;\n        this.targets = props.targets;\n        this.windowId = props.windowId;\n        this.description = props.description;\n        this.name = props.name;\n        this.ownerInformation = props.ownerInformation;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMaintenanceWindowTarget.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            resourceType: this.resourceType,\n            targets: this.targets,\n            windowId: this.windowId,\n            description: this.description,\n            name: this.name,\n            ownerInformation: this.ownerInformation,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMaintenanceWindowTargetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnMaintenanceWindowTarget {\nn    export interface TargetsProperty {\n                                                                                                                                                                                                                                                                                                                             \n        readonly key: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly values: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetsProperty`\n *\n * @param properties - the TypeScript properties of a `TargetsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMaintenanceWindowTarget_TargetsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));\n    return errors.wrap('supplied properties not correct for \"TargetsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTarget.Targets` resource\n *\n * @param properties - the TypeScript properties of a `TargetsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTarget.Targets` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMaintenanceWindowTargetTargetsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMaintenanceWindowTarget_TargetsPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMaintenanceWindowTargetTargetsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMaintenanceWindowTarget.TargetsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMaintenanceWindowTarget.TargetsProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getStringArray(properties.Values));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                          \nexport interface CfnMaintenanceWindowTaskProps {\n\n                                                                                                                                                                                                                                                                                                                                                           \n    readonly priority: number;\n\nn    readonly taskArn: string;\n\n                                                                                                                                                                                                                                                                                        \n    readonly taskType: string;\n\n                                                                                                                                                                                                                                                          \n    readonly windowId: string;\n\n                                                                                                                                                                                                                                                                                                                                   \n    readonly cutoffBehavior?: string;\n\n                                                                                                                                                                                                                         \n    readonly description?: string;\n\nn    readonly loggingInfo?: CfnMaintenanceWindowTask.LoggingInfoProperty | cdk.IResolvable;\n\nn    readonly maxConcurrency?: string;\n\nn    readonly maxErrors?: string;\n\n                                                                                                                                                                                                      \n    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly serviceRoleArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly targets?: Array<CfnMaintenanceWindowTask.TargetProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly taskInvocationParameters?: CfnMaintenanceWindowTask.TaskInvocationParametersProperty | cdk.IResolvable;\n\nn    readonly taskParameters?: any | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnMaintenanceWindowTaskProps`\n *\n * @param properties - the TypeScript properties of a `CfnMaintenanceWindowTaskProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnMaintenanceWindowTaskPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cutoffBehavior', cdk.validateString)(properties.cutoffBehavior));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('loggingInfo', CfnMaintenanceWindowTask_LoggingInfoPropertyValidator)(properties.loggingInfo));\n    errors.collect(cdk.propertyValidator('maxConcurrency', cdk.validateString)(properties.maxConcurrency));\n    errors.collect(cdk.propertyValidator('maxErrors', cdk.validateString)(properties.maxErrors));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('priority', cdk.requiredValidator)(properties.priority));\n    errors.collect(cdk.propertyValidator('priority', cdk.validateNumber)(properties.priority));\n    errors.collect(cdk.propertyValidator('serviceRoleArn', cdk.validateString)(properties.serviceRoleArn));\n    errors.collect(cdk.propertyValidator('targets', cdk.listValidator(CfnMaintenanceWindowTask_TargetPropertyValidator))(properties.targets));\n    errors.collect(cdk.propertyValidator('taskArn', cdk.requiredValidator)(properties.taskArn));\n    errors.collect(cdk.propertyValidator('taskArn', cdk.validateString)(properties.taskArn));\n    errors.collect(cdk.propertyValidator('taskInvocationParameters', CfnMaintenanceWindowTask_TaskInvocationParametersPropertyValidator)(properties.taskInvocationParameters));\n    errors.collect(cdk.propertyValidator('taskParameters', cdk.validateObject)(properties.taskParameters));\n    errors.collect(cdk.propertyValidator('taskType', cdk.requiredValidator)(properties.taskType));\n    errors.collect(cdk.propertyValidator('taskType', cdk.validateString)(properties.taskType));\n    errors.collect(cdk.propertyValidator('windowId', cdk.requiredValidator)(properties.windowId));\n    errors.collect(cdk.propertyValidator('windowId', cdk.validateString)(properties.windowId));\n    return errors.wrap('supplied properties not correct for \"CfnMaintenanceWindowTaskProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask` resource\n *\n * @param properties - the TypeScript properties of a `CfnMaintenanceWindowTaskProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMaintenanceWindowTaskPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMaintenanceWindowTaskPropsValidator(properties).assertSuccess();\n    return {\n        Priority: cdk.numberToCloudFormation(properties.priority),\n        TaskArn: cdk.stringToCloudFormation(properties.taskArn),\n        TaskType: cdk.stringToCloudFormation(properties.taskType),\n        WindowId: cdk.stringToCloudFormation(properties.windowId),\n        CutoffBehavior: cdk.stringToCloudFormation(properties.cutoffBehavior),\n        Description: cdk.stringToCloudFormation(properties.description),\n        LoggingInfo: cfnMaintenanceWindowTaskLoggingInfoPropertyToCloudFormation(properties.loggingInfo),\n        MaxConcurrency: cdk.stringToCloudFormation(properties.maxConcurrency),\n        MaxErrors: cdk.stringToCloudFormation(properties.maxErrors),\n        Name: cdk.stringToCloudFormation(properties.name),\n        ServiceRoleArn: cdk.stringToCloudFormation(properties.serviceRoleArn),\n        Targets: cdk.listMapper(cfnMaintenanceWindowTaskTargetPropertyToCloudFormation)(properties.targets),\n        TaskInvocationParameters: cfnMaintenanceWindowTaskTaskInvocationParametersPropertyToCloudFormation(properties.taskInvocationParameters),\n        TaskParameters: cdk.objectToCloudFormation(properties.taskParameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMaintenanceWindowTaskPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMaintenanceWindowTaskProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMaintenanceWindowTaskProps>();\n    ret.addPropertyResult('priority', 'Priority', cfn_parse.FromCloudFormation.getNumber(properties.Priority));\n    ret.addPropertyResult('taskArn', 'TaskArn', cfn_parse.FromCloudFormation.getString(properties.TaskArn));\n    ret.addPropertyResult('taskType', 'TaskType', cfn_parse.FromCloudFormation.getString(properties.TaskType));\n    ret.addPropertyResult('windowId', 'WindowId', cfn_parse.FromCloudFormation.getString(properties.WindowId));\n    ret.addPropertyResult('cutoffBehavior', 'CutoffBehavior', properties.CutoffBehavior != null ? cfn_parse.FromCloudFormation.getString(properties.CutoffBehavior) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('loggingInfo', 'LoggingInfo', properties.LoggingInfo != null ? CfnMaintenanceWindowTaskLoggingInfoPropertyFromCloudFormation(properties.LoggingInfo) : undefined);\n    ret.addPropertyResult('maxConcurrency', 'MaxConcurrency', properties.MaxConcurrency != null ? cfn_parse.FromCloudFormation.getString(properties.MaxConcurrency) : undefined);\n    ret.addPropertyResult('maxErrors', 'MaxErrors', properties.MaxErrors != null ? cfn_parse.FromCloudFormation.getString(properties.MaxErrors) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('serviceRoleArn', 'ServiceRoleArn', properties.ServiceRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceRoleArn) : undefined);\n    ret.addPropertyResult('targets', 'Targets', properties.Targets != null ? cfn_parse.FromCloudFormation.getArray(CfnMaintenanceWindowTaskTargetPropertyFromCloudFormation)(properties.Targets) : undefined);\n    ret.addPropertyResult('taskInvocationParameters', 'TaskInvocationParameters', properties.TaskInvocationParameters != null ? CfnMaintenanceWindowTaskTaskInvocationParametersPropertyFromCloudFormation(properties.TaskInvocationParameters) : undefined);\n    ret.addPropertyResult('taskParameters', 'TaskParameters', properties.TaskParameters != null ? cfn_parse.FromCloudFormation.getAny(properties.TaskParameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnMaintenanceWindowTask extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SSM::MaintenanceWindowTask\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMaintenanceWindowTask {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnMaintenanceWindowTaskPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnMaintenanceWindowTask(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                           \n    public priority: number;\n\nn    public taskArn: string;\n\n                                                                                                                                                                                                                                                                                        \n    public taskType: string;\n\n                                                                                                                                                                                                                                                          \n    public windowId: string;\n\n                                                                                                                                                                                                                                                                                                                                   \n    public cutoffBehavior: string | undefined;\n\n                                                                                                                                                                                                                         \n    public description: string | undefined;\n\nn    public loggingInfo: CfnMaintenanceWindowTask.LoggingInfoProperty | cdk.IResolvable | undefined;\n\nn    public maxConcurrency: string | undefined;\n\nn    public maxErrors: string | undefined;\n\n                                                                                                                                                                                                      \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                       \n    public serviceRoleArn: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public targets: Array<CfnMaintenanceWindowTask.TargetProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public taskInvocationParameters: CfnMaintenanceWindowTask.TaskInvocationParametersProperty | cdk.IResolvable | undefined;\n\nn    public taskParameters: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnMaintenanceWindowTaskProps) {\n        super(scope, id, { type: CfnMaintenanceWindowTask.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'priority', this);\n        cdk.requireProperty(props, 'taskArn', this);\n        cdk.requireProperty(props, 'taskType', this);\n        cdk.requireProperty(props, 'windowId', this);\n\n        this.priority = props.priority;\n        this.taskArn = props.taskArn;\n        this.taskType = props.taskType;\n        this.windowId = props.windowId;\n        this.cutoffBehavior = props.cutoffBehavior;\n        this.description = props.description;\n        this.loggingInfo = props.loggingInfo;\n        this.maxConcurrency = props.maxConcurrency;\n        this.maxErrors = props.maxErrors;\n        this.name = props.name;\n        this.serviceRoleArn = props.serviceRoleArn;\n        this.targets = props.targets;\n        this.taskInvocationParameters = props.taskInvocationParameters;\n        this.taskParameters = props.taskParameters;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnMaintenanceWindowTask.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            priority: this.priority,\n            taskArn: this.taskArn,\n            taskType: this.taskType,\n            windowId: this.windowId,\n            cutoffBehavior: this.cutoffBehavior,\n            description: this.description,\n            loggingInfo: this.loggingInfo,\n            maxConcurrency: this.maxConcurrency,\n            maxErrors: this.maxErrors,\n            name: this.name,\n            serviceRoleArn: this.serviceRoleArn,\n            targets: this.targets,\n            taskInvocationParameters: this.taskInvocationParameters,\n            taskParameters: this.taskParameters,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnMaintenanceWindowTaskPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnMaintenanceWindowTask {\n                                                                                                                                                                                                                                                                                                          \n    export interface CloudWatchOutputConfigProperty {\nn        readonly cloudWatchLogGroupName?: string;\n                                                                                                                                                                                                                                                                                                                                                 \n        readonly cloudWatchOutputEnabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CloudWatchOutputConfigProperty`\n *\n * @param properties - the TypeScript properties of a `CloudWatchOutputConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMaintenanceWindowTask_CloudWatchOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchLogGroupName', cdk.validateString)(properties.cloudWatchLogGroupName));\n    errors.collect(cdk.propertyValidator('cloudWatchOutputEnabled', cdk.validateBoolean)(properties.cloudWatchOutputEnabled));\n    return errors.wrap('supplied properties not correct for \"CloudWatchOutputConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.CloudWatchOutputConfig` resource\n *\n * @param properties - the TypeScript properties of a `CloudWatchOutputConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.CloudWatchOutputConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMaintenanceWindowTaskCloudWatchOutputConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMaintenanceWindowTask_CloudWatchOutputConfigPropertyValidator(properties).assertSuccess();\n    return {\n        CloudWatchLogGroupName: cdk.stringToCloudFormation(properties.cloudWatchLogGroupName),\n        CloudWatchOutputEnabled: cdk.booleanToCloudFormation(properties.cloudWatchOutputEnabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMaintenanceWindowTaskCloudWatchOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMaintenanceWindowTask.CloudWatchOutputConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMaintenanceWindowTask.CloudWatchOutputConfigProperty>();\n    ret.addPropertyResult('cloudWatchLogGroupName', 'CloudWatchLogGroupName', properties.CloudWatchLogGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.CloudWatchLogGroupName) : undefined);\n    ret.addPropertyResult('cloudWatchOutputEnabled', 'CloudWatchOutputEnabled', properties.CloudWatchOutputEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CloudWatchOutputEnabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMaintenanceWindowTask {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n    export interface LoggingInfoProperty {\n                                                                                                                                                                                                                                                                                      \n        readonly region: string;\n                                                                                                                                                                                                                                                                                                    \n        readonly s3Bucket: string;\n                                                                                                                                                                                                                                                                         \n        readonly s3Prefix?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoggingInfoProperty`\n *\n * @param properties - the TypeScript properties of a `LoggingInfoProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMaintenanceWindowTask_LoggingInfoPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('region', cdk.requiredValidator)(properties.region));\n    errors.collect(cdk.propertyValidator('region', cdk.validateString)(properties.region));\n    errors.collect(cdk.propertyValidator('s3Bucket', cdk.requiredValidator)(properties.s3Bucket));\n    errors.collect(cdk.propertyValidator('s3Bucket', cdk.validateString)(properties.s3Bucket));\n    errors.collect(cdk.propertyValidator('s3Prefix', cdk.validateString)(properties.s3Prefix));\n    return errors.wrap('supplied properties not correct for \"LoggingInfoProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.LoggingInfo` resource\n *\n * @param properties - the TypeScript properties of a `LoggingInfoProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.LoggingInfo` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMaintenanceWindowTaskLoggingInfoPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMaintenanceWindowTask_LoggingInfoPropertyValidator(properties).assertSuccess();\n    return {\n        Region: cdk.stringToCloudFormation(properties.region),\n        S3Bucket: cdk.stringToCloudFormation(properties.s3Bucket),\n        S3Prefix: cdk.stringToCloudFormation(properties.s3Prefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMaintenanceWindowTaskLoggingInfoPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMaintenanceWindowTask.LoggingInfoProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMaintenanceWindowTask.LoggingInfoProperty>();\n    ret.addPropertyResult('region', 'Region', cfn_parse.FromCloudFormation.getString(properties.Region));\n    ret.addPropertyResult('s3Bucket', 'S3Bucket', cfn_parse.FromCloudFormation.getString(properties.S3Bucket));\n    ret.addPropertyResult('s3Prefix', 'S3Prefix', properties.S3Prefix != null ? cfn_parse.FromCloudFormation.getString(properties.S3Prefix) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMaintenanceWindowTask {\nn    export interface MaintenanceWindowAutomationParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                                       \n        readonly documentVersion?: string;\n                                                                                                                                                                                                                                                                                                                                       \n        readonly parameters?: any | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MaintenanceWindowAutomationParametersProperty`\n *\n * @param properties - the TypeScript properties of a `MaintenanceWindowAutomationParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMaintenanceWindowTask_MaintenanceWindowAutomationParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('documentVersion', cdk.validateString)(properties.documentVersion));\n    errors.collect(cdk.propertyValidator('parameters', cdk.validateObject)(properties.parameters));\n    return errors.wrap('supplied properties not correct for \"MaintenanceWindowAutomationParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.MaintenanceWindowAutomationParameters` resource\n *\n * @param properties - the TypeScript properties of a `MaintenanceWindowAutomationParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.MaintenanceWindowAutomationParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMaintenanceWindowTaskMaintenanceWindowAutomationParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMaintenanceWindowTask_MaintenanceWindowAutomationParametersPropertyValidator(properties).assertSuccess();\n    return {\n        DocumentVersion: cdk.stringToCloudFormation(properties.documentVersion),\n        Parameters: cdk.objectToCloudFormation(properties.parameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMaintenanceWindowTaskMaintenanceWindowAutomationParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMaintenanceWindowTask.MaintenanceWindowAutomationParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMaintenanceWindowTask.MaintenanceWindowAutomationParametersProperty>();\n    ret.addPropertyResult('documentVersion', 'DocumentVersion', properties.DocumentVersion != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentVersion) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMaintenanceWindowTask {\nn    export interface MaintenanceWindowLambdaParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly clientContext?: string;\nn        readonly payload?: string;\nn        readonly qualifier?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MaintenanceWindowLambdaParametersProperty`\n *\n * @param properties - the TypeScript properties of a `MaintenanceWindowLambdaParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMaintenanceWindowTask_MaintenanceWindowLambdaParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clientContext', cdk.validateString)(properties.clientContext));\n    errors.collect(cdk.propertyValidator('payload', cdk.validateString)(properties.payload));\n    errors.collect(cdk.propertyValidator('qualifier', cdk.validateString)(properties.qualifier));\n    return errors.wrap('supplied properties not correct for \"MaintenanceWindowLambdaParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.MaintenanceWindowLambdaParameters` resource\n *\n * @param properties - the TypeScript properties of a `MaintenanceWindowLambdaParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.MaintenanceWindowLambdaParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMaintenanceWindowTaskMaintenanceWindowLambdaParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMaintenanceWindowTask_MaintenanceWindowLambdaParametersPropertyValidator(properties).assertSuccess();\n    return {\n        ClientContext: cdk.stringToCloudFormation(properties.clientContext),\n        Payload: cdk.stringToCloudFormation(properties.payload),\n        Qualifier: cdk.stringToCloudFormation(properties.qualifier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMaintenanceWindowTaskMaintenanceWindowLambdaParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMaintenanceWindowTask.MaintenanceWindowLambdaParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMaintenanceWindowTask.MaintenanceWindowLambdaParametersProperty>();\n    ret.addPropertyResult('clientContext', 'ClientContext', properties.ClientContext != null ? cfn_parse.FromCloudFormation.getString(properties.ClientContext) : undefined);\n    ret.addPropertyResult('payload', 'Payload', properties.Payload != null ? cfn_parse.FromCloudFormation.getString(properties.Payload) : undefined);\n    ret.addPropertyResult('qualifier', 'Qualifier', properties.Qualifier != null ? cfn_parse.FromCloudFormation.getString(properties.Qualifier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMaintenanceWindowTask {\nn    export interface MaintenanceWindowRunCommandParametersProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly cloudWatchOutputConfig?: CfnMaintenanceWindowTask.CloudWatchOutputConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly comment?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly documentHash?: string;\n                                                                                                                                                                                                                                                                                                                                                                  \n        readonly documentHashType?: string;\nn        readonly documentVersion?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly notificationConfig?: CfnMaintenanceWindowTask.NotificationConfigProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                         \n        readonly outputS3BucketName?: string;\n                                                                                                                                                                                                                                                                                                                               \n        readonly outputS3KeyPrefix?: string;\nn        readonly parameters?: any | cdk.IResolvable;\nn        readonly serviceRoleArn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly timeoutSeconds?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MaintenanceWindowRunCommandParametersProperty`\n *\n * @param properties - the TypeScript properties of a `MaintenanceWindowRunCommandParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMaintenanceWindowTask_MaintenanceWindowRunCommandParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchOutputConfig', CfnMaintenanceWindowTask_CloudWatchOutputConfigPropertyValidator)(properties.cloudWatchOutputConfig));\n    errors.collect(cdk.propertyValidator('comment', cdk.validateString)(properties.comment));\n    errors.collect(cdk.propertyValidator('documentHash', cdk.validateString)(properties.documentHash));\n    errors.collect(cdk.propertyValidator('documentHashType', cdk.validateString)(properties.documentHashType));\n    errors.collect(cdk.propertyValidator('documentVersion', cdk.validateString)(properties.documentVersion));\n    errors.collect(cdk.propertyValidator('notificationConfig', CfnMaintenanceWindowTask_NotificationConfigPropertyValidator)(properties.notificationConfig));\n    errors.collect(cdk.propertyValidator('outputS3BucketName', cdk.validateString)(properties.outputS3BucketName));\n    errors.collect(cdk.propertyValidator('outputS3KeyPrefix', cdk.validateString)(properties.outputS3KeyPrefix));\n    errors.collect(cdk.propertyValidator('parameters', cdk.validateObject)(properties.parameters));\n    errors.collect(cdk.propertyValidator('serviceRoleArn', cdk.validateString)(properties.serviceRoleArn));\n    errors.collect(cdk.propertyValidator('timeoutSeconds', cdk.validateNumber)(properties.timeoutSeconds));\n    return errors.wrap('supplied properties not correct for \"MaintenanceWindowRunCommandParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.MaintenanceWindowRunCommandParameters` resource\n *\n * @param properties - the TypeScript properties of a `MaintenanceWindowRunCommandParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.MaintenanceWindowRunCommandParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMaintenanceWindowTaskMaintenanceWindowRunCommandParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMaintenanceWindowTask_MaintenanceWindowRunCommandParametersPropertyValidator(properties).assertSuccess();\n    return {\n        CloudWatchOutputConfig: cfnMaintenanceWindowTaskCloudWatchOutputConfigPropertyToCloudFormation(properties.cloudWatchOutputConfig),\n        Comment: cdk.stringToCloudFormation(properties.comment),\n        DocumentHash: cdk.stringToCloudFormation(properties.documentHash),\n        DocumentHashType: cdk.stringToCloudFormation(properties.documentHashType),\n        DocumentVersion: cdk.stringToCloudFormation(properties.documentVersion),\n        NotificationConfig: cfnMaintenanceWindowTaskNotificationConfigPropertyToCloudFormation(properties.notificationConfig),\n        OutputS3BucketName: cdk.stringToCloudFormation(properties.outputS3BucketName),\n        OutputS3KeyPrefix: cdk.stringToCloudFormation(properties.outputS3KeyPrefix),\n        Parameters: cdk.objectToCloudFormation(properties.parameters),\n        ServiceRoleArn: cdk.stringToCloudFormation(properties.serviceRoleArn),\n        TimeoutSeconds: cdk.numberToCloudFormation(properties.timeoutSeconds),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMaintenanceWindowTaskMaintenanceWindowRunCommandParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMaintenanceWindowTask.MaintenanceWindowRunCommandParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMaintenanceWindowTask.MaintenanceWindowRunCommandParametersProperty>();\n    ret.addPropertyResult('cloudWatchOutputConfig', 'CloudWatchOutputConfig', properties.CloudWatchOutputConfig != null ? CfnMaintenanceWindowTaskCloudWatchOutputConfigPropertyFromCloudFormation(properties.CloudWatchOutputConfig) : undefined);\n    ret.addPropertyResult('comment', 'Comment', properties.Comment != null ? cfn_parse.FromCloudFormation.getString(properties.Comment) : undefined);\n    ret.addPropertyResult('documentHash', 'DocumentHash', properties.DocumentHash != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentHash) : undefined);\n    ret.addPropertyResult('documentHashType', 'DocumentHashType', properties.DocumentHashType != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentHashType) : undefined);\n    ret.addPropertyResult('documentVersion', 'DocumentVersion', properties.DocumentVersion != null ? cfn_parse.FromCloudFormation.getString(properties.DocumentVersion) : undefined);\n    ret.addPropertyResult('notificationConfig', 'NotificationConfig', properties.NotificationConfig != null ? CfnMaintenanceWindowTaskNotificationConfigPropertyFromCloudFormation(properties.NotificationConfig) : undefined);\n    ret.addPropertyResult('outputS3BucketName', 'OutputS3BucketName', properties.OutputS3BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.OutputS3BucketName) : undefined);\n    ret.addPropertyResult('outputS3KeyPrefix', 'OutputS3KeyPrefix', properties.OutputS3KeyPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.OutputS3KeyPrefix) : undefined);\n    ret.addPropertyResult('parameters', 'Parameters', properties.Parameters != null ? cfn_parse.FromCloudFormation.getAny(properties.Parameters) : undefined);\n    ret.addPropertyResult('serviceRoleArn', 'ServiceRoleArn', properties.ServiceRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceRoleArn) : undefined);\n    ret.addPropertyResult('timeoutSeconds', 'TimeoutSeconds', properties.TimeoutSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.TimeoutSeconds) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMaintenanceWindowTask {\nn    export interface MaintenanceWindowStepFunctionsParametersProperty {\n                                                                                                                                                                                                                                                                                                                                          \n        readonly input?: string;\n                                                                                                                                                                                                                                                                                                                                      \n        readonly name?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MaintenanceWindowStepFunctionsParametersProperty`\n *\n * @param properties - the TypeScript properties of a `MaintenanceWindowStepFunctionsParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMaintenanceWindowTask_MaintenanceWindowStepFunctionsParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('input', cdk.validateString)(properties.input));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"MaintenanceWindowStepFunctionsParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.MaintenanceWindowStepFunctionsParameters` resource\n *\n * @param properties - the TypeScript properties of a `MaintenanceWindowStepFunctionsParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.MaintenanceWindowStepFunctionsParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMaintenanceWindowTaskMaintenanceWindowStepFunctionsParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMaintenanceWindowTask_MaintenanceWindowStepFunctionsParametersPropertyValidator(properties).assertSuccess();\n    return {\n        Input: cdk.stringToCloudFormation(properties.input),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMaintenanceWindowTaskMaintenanceWindowStepFunctionsParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMaintenanceWindowTask.MaintenanceWindowStepFunctionsParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMaintenanceWindowTask.MaintenanceWindowStepFunctionsParametersProperty>();\n    ret.addPropertyResult('input', 'Input', properties.Input != null ? cfn_parse.FromCloudFormation.getString(properties.Input) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMaintenanceWindowTask {\nn    export interface NotificationConfigProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly notificationArn: string;\nn        readonly notificationEvents?: string[];\nn        readonly notificationType?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NotificationConfigProperty`\n *\n * @param properties - the TypeScript properties of a `NotificationConfigProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMaintenanceWindowTask_NotificationConfigPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('notificationArn', cdk.requiredValidator)(properties.notificationArn));\n    errors.collect(cdk.propertyValidator('notificationArn', cdk.validateString)(properties.notificationArn));\n    errors.collect(cdk.propertyValidator('notificationEvents', cdk.listValidator(cdk.validateString))(properties.notificationEvents));\n    errors.collect(cdk.propertyValidator('notificationType', cdk.validateString)(properties.notificationType));\n    return errors.wrap('supplied properties not correct for \"NotificationConfigProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.NotificationConfig` resource\n *\n * @param properties - the TypeScript properties of a `NotificationConfigProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.NotificationConfig` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMaintenanceWindowTaskNotificationConfigPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMaintenanceWindowTask_NotificationConfigPropertyValidator(properties).assertSuccess();\n    return {\n        NotificationArn: cdk.stringToCloudFormation(properties.notificationArn),\n        NotificationEvents: cdk.listMapper(cdk.stringToCloudFormation)(properties.notificationEvents),\n        NotificationType: cdk.stringToCloudFormation(properties.notificationType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMaintenanceWindowTaskNotificationConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMaintenanceWindowTask.NotificationConfigProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMaintenanceWindowTask.NotificationConfigProperty>();\n    ret.addPropertyResult('notificationArn', 'NotificationArn', cfn_parse.FromCloudFormation.getString(properties.NotificationArn));\n    ret.addPropertyResult('notificationEvents', 'NotificationEvents', properties.NotificationEvents != null ? cfn_parse.FromCloudFormation.getStringArray(properties.NotificationEvents) : undefined);\n    ret.addPropertyResult('notificationType', 'NotificationType', properties.NotificationType != null ? cfn_parse.FromCloudFormation.getString(properties.NotificationType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMaintenanceWindowTask {\nn    export interface TargetProperty {\nn        readonly key: string;\nn        readonly values: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetProperty`\n *\n * @param properties - the TypeScript properties of a `TargetProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMaintenanceWindowTask_TargetPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));\n    return errors.wrap('supplied properties not correct for \"TargetProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.Target` resource\n *\n * @param properties - the TypeScript properties of a `TargetProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.Target` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMaintenanceWindowTaskTargetPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMaintenanceWindowTask_TargetPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMaintenanceWindowTaskTargetPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMaintenanceWindowTask.TargetProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMaintenanceWindowTask.TargetProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('values', 'Values', cfn_parse.FromCloudFormation.getStringArray(properties.Values));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnMaintenanceWindowTask {\nn    export interface TaskInvocationParametersProperty {\n                                                                                                                                                                                                                                                                                                                                              \n        readonly maintenanceWindowAutomationParameters?: CfnMaintenanceWindowTask.MaintenanceWindowAutomationParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly maintenanceWindowLambdaParameters?: CfnMaintenanceWindowTask.MaintenanceWindowLambdaParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                              \n        readonly maintenanceWindowRunCommandParameters?: CfnMaintenanceWindowTask.MaintenanceWindowRunCommandParametersProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                    \n        readonly maintenanceWindowStepFunctionsParameters?: CfnMaintenanceWindowTask.MaintenanceWindowStepFunctionsParametersProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TaskInvocationParametersProperty`\n *\n * @param properties - the TypeScript properties of a `TaskInvocationParametersProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnMaintenanceWindowTask_TaskInvocationParametersPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('maintenanceWindowAutomationParameters', CfnMaintenanceWindowTask_MaintenanceWindowAutomationParametersPropertyValidator)(properties.maintenanceWindowAutomationParameters));\n    errors.collect(cdk.propertyValidator('maintenanceWindowLambdaParameters', CfnMaintenanceWindowTask_MaintenanceWindowLambdaParametersPropertyValidator)(properties.maintenanceWindowLambdaParameters));\n    errors.collect(cdk.propertyValidator('maintenanceWindowRunCommandParameters', CfnMaintenanceWindowTask_MaintenanceWindowRunCommandParametersPropertyValidator)(properties.maintenanceWindowRunCommandParameters));\n    errors.collect(cdk.propertyValidator('maintenanceWindowStepFunctionsParameters', CfnMaintenanceWindowTask_MaintenanceWindowStepFunctionsParametersPropertyValidator)(properties.maintenanceWindowStepFunctionsParameters));\n    return errors.wrap('supplied properties not correct for \"TaskInvocationParametersProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.TaskInvocationParameters` resource\n *\n * @param properties - the TypeScript properties of a `TaskInvocationParametersProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::MaintenanceWindowTask.TaskInvocationParameters` resource.\n */\n// @ts-ignore TS6133\nfunction cfnMaintenanceWindowTaskTaskInvocationParametersPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnMaintenanceWindowTask_TaskInvocationParametersPropertyValidator(properties).assertSuccess();\n    return {\n        MaintenanceWindowAutomationParameters: cfnMaintenanceWindowTaskMaintenanceWindowAutomationParametersPropertyToCloudFormation(properties.maintenanceWindowAutomationParameters),\n        MaintenanceWindowLambdaParameters: cfnMaintenanceWindowTaskMaintenanceWindowLambdaParametersPropertyToCloudFormation(properties.maintenanceWindowLambdaParameters),\n        MaintenanceWindowRunCommandParameters: cfnMaintenanceWindowTaskMaintenanceWindowRunCommandParametersPropertyToCloudFormation(properties.maintenanceWindowRunCommandParameters),\n        MaintenanceWindowStepFunctionsParameters: cfnMaintenanceWindowTaskMaintenanceWindowStepFunctionsParametersPropertyToCloudFormation(properties.maintenanceWindowStepFunctionsParameters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnMaintenanceWindowTaskTaskInvocationParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMaintenanceWindowTask.TaskInvocationParametersProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMaintenanceWindowTask.TaskInvocationParametersProperty>();\n    ret.addPropertyResult('maintenanceWindowAutomationParameters', 'MaintenanceWindowAutomationParameters', properties.MaintenanceWindowAutomationParameters != null ? CfnMaintenanceWindowTaskMaintenanceWindowAutomationParametersPropertyFromCloudFormation(properties.MaintenanceWindowAutomationParameters) : undefined);\n    ret.addPropertyResult('maintenanceWindowLambdaParameters', 'MaintenanceWindowLambdaParameters', properties.MaintenanceWindowLambdaParameters != null ? CfnMaintenanceWindowTaskMaintenanceWindowLambdaParametersPropertyFromCloudFormation(properties.MaintenanceWindowLambdaParameters) : undefined);\n    ret.addPropertyResult('maintenanceWindowRunCommandParameters', 'MaintenanceWindowRunCommandParameters', properties.MaintenanceWindowRunCommandParameters != null ? CfnMaintenanceWindowTaskMaintenanceWindowRunCommandParametersPropertyFromCloudFormation(properties.MaintenanceWindowRunCommandParameters) : undefined);\n    ret.addPropertyResult('maintenanceWindowStepFunctionsParameters', 'MaintenanceWindowStepFunctionsParameters', properties.MaintenanceWindowStepFunctionsParameters != null ? CfnMaintenanceWindowTaskMaintenanceWindowStepFunctionsParametersPropertyFromCloudFormation(properties.MaintenanceWindowStepFunctionsParameters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                  \nexport interface CfnParameterProps {\n\n                                                                                                                                                                                                                                                                                                                                        \n    readonly type: string;\n\n                                                                                                                                                                                                                                                                                                                               \n    readonly value: string;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    readonly allowedPattern?: string;\n\n                                                                                                                                                                                                                                                               \n    readonly dataType?: string;\n\n                                                                                                                                                                                                       \n    readonly description?: string;\n\nn    readonly name?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    readonly policies?: string;\n\nn    readonly tags?: any;\n\n                                                                                                                                                                                   \n    readonly tier?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnParameterProps`\n *\n * @param properties - the TypeScript properties of a `CfnParameterProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnParameterPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('allowedPattern', cdk.validateString)(properties.allowedPattern));\n    errors.collect(cdk.propertyValidator('dataType', cdk.validateString)(properties.dataType));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('policies', cdk.validateString)(properties.policies));\n    errors.collect(cdk.propertyValidator('tags', cdk.validateObject)(properties.tags));\n    errors.collect(cdk.propertyValidator('tier', cdk.validateString)(properties.tier));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"CfnParameterProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::Parameter` resource\n *\n * @param properties - the TypeScript properties of a `CfnParameterProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::Parameter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnParameterPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnParameterPropsValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n        Value: cdk.stringToCloudFormation(properties.value),\n        AllowedPattern: cdk.stringToCloudFormation(properties.allowedPattern),\n        DataType: cdk.stringToCloudFormation(properties.dataType),\n        Description: cdk.stringToCloudFormation(properties.description),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Policies: cdk.stringToCloudFormation(properties.policies),\n        Tags: cdk.objectToCloudFormation(properties.tags),\n        Tier: cdk.stringToCloudFormation(properties.tier),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnParameterPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnParameterProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnParameterProps>();\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addPropertyResult('allowedPattern', 'AllowedPattern', properties.AllowedPattern != null ? cfn_parse.FromCloudFormation.getString(properties.AllowedPattern) : undefined);\n    ret.addPropertyResult('dataType', 'DataType', properties.DataType != null ? cfn_parse.FromCloudFormation.getString(properties.DataType) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('policies', 'Policies', properties.Policies != null ? cfn_parse.FromCloudFormation.getString(properties.Policies) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getAny(properties.Tags) : undefined as any);\n    ret.addPropertyResult('tier', 'Tier', properties.Tier != null ? cfn_parse.FromCloudFormation.getString(properties.Tier) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnParameter extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SSM::Parameter\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnParameter {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnParameterPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnParameter(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                          \n    public readonly attrType: string;\n\n                                                                                                \n    public readonly attrValue: string;\n\n                                                                                                                                                                                                                                                                                                                                        \n    public type: string;\n\n                                                                                                                                                                                                                                                                                                                               \n    public value: string;\n\n                                                                                                                                                                                                                                                                                                                                                           \n    public allowedPattern: string | undefined;\n\n                                                                                                                                                                                                                                                               \n    public dataType: string | undefined;\n\n                                                                                                                                                                                                       \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    public name: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                              \n    public policies: string | undefined;\n\nn    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                   \n    public tier: string | undefined;\n\n                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnParameterProps) {\n        super(scope, id, { type: CfnParameter.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'type', this);\n        cdk.requireProperty(props, 'value', this);\n        this.attrType = cdk.Token.asString(this.getAtt('Type'));\n        this.attrValue = cdk.Token.asString(this.getAtt('Value'));\n\n        this.type = props.type;\n        this.value = props.value;\n        this.allowedPattern = props.allowedPattern;\n        this.dataType = props.dataType;\n        this.description = props.description;\n        this.name = props.name;\n        this.policies = props.policies;\n        this.tags = new cdk.TagManager(cdk.TagType.MAP, \"AWS::SSM::Parameter\", props.tags, { tagPropertyName: 'tags' });\n        this.tier = props.tier;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnParameter.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            type: this.type,\n            value: this.value,\n            allowedPattern: this.allowedPattern,\n            dataType: this.dataType,\n            description: this.description,\n            name: this.name,\n            policies: this.policies,\n            tags: this.tags.renderTags(),\n            tier: this.tier,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnParameterPropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                          \nexport interface CfnPatchBaselineProps {\n\n                                                                                                                                                                                                       \n    readonly name: string;\n\n                                                                                                                                                                                                                                        \n    readonly approvalRules?: CfnPatchBaseline.RuleGroupProperty | cdk.IResolvable;\n\nn    readonly approvedPatches?: string[];\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    readonly approvedPatchesComplianceLevel?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly approvedPatchesEnableNonSecurity?: boolean | cdk.IResolvable;\n\n                                                                                                                                                                                                                   \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                 \n    readonly globalFilters?: CfnPatchBaseline.PatchFilterGroupProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                               \n    readonly operatingSystem?: string;\n\n                                                                                                                                                                                                                                                    \n    readonly patchGroups?: string[];\n\nn    readonly rejectedPatches?: string[];\n\nn    readonly rejectedPatchesAction?: string;\n\n                                                                                                                                                                                                                                                                                                                                             \n    readonly sources?: Array<CfnPatchBaseline.PatchSourceProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnPatchBaselineProps`\n *\n * @param properties - the TypeScript properties of a `CfnPatchBaselineProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnPatchBaselinePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('approvalRules', CfnPatchBaseline_RuleGroupPropertyValidator)(properties.approvalRules));\n    errors.collect(cdk.propertyValidator('approvedPatches', cdk.listValidator(cdk.validateString))(properties.approvedPatches));\n    errors.collect(cdk.propertyValidator('approvedPatchesComplianceLevel', cdk.validateString)(properties.approvedPatchesComplianceLevel));\n    errors.collect(cdk.propertyValidator('approvedPatchesEnableNonSecurity', cdk.validateBoolean)(properties.approvedPatchesEnableNonSecurity));\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('globalFilters', CfnPatchBaseline_PatchFilterGroupPropertyValidator)(properties.globalFilters));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('operatingSystem', cdk.validateString)(properties.operatingSystem));\n    errors.collect(cdk.propertyValidator('patchGroups', cdk.listValidator(cdk.validateString))(properties.patchGroups));\n    errors.collect(cdk.propertyValidator('rejectedPatches', cdk.listValidator(cdk.validateString))(properties.rejectedPatches));\n    errors.collect(cdk.propertyValidator('rejectedPatchesAction', cdk.validateString)(properties.rejectedPatchesAction));\n    errors.collect(cdk.propertyValidator('sources', cdk.listValidator(CfnPatchBaseline_PatchSourcePropertyValidator))(properties.sources));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnPatchBaselineProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::PatchBaseline` resource\n *\n * @param properties - the TypeScript properties of a `CfnPatchBaselineProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::PatchBaseline` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPatchBaselinePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPatchBaselinePropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        ApprovalRules: cfnPatchBaselineRuleGroupPropertyToCloudFormation(properties.approvalRules),\n        ApprovedPatches: cdk.listMapper(cdk.stringToCloudFormation)(properties.approvedPatches),\n        ApprovedPatchesComplianceLevel: cdk.stringToCloudFormation(properties.approvedPatchesComplianceLevel),\n        ApprovedPatchesEnableNonSecurity: cdk.booleanToCloudFormation(properties.approvedPatchesEnableNonSecurity),\n        Description: cdk.stringToCloudFormation(properties.description),\n        GlobalFilters: cfnPatchBaselinePatchFilterGroupPropertyToCloudFormation(properties.globalFilters),\n        OperatingSystem: cdk.stringToCloudFormation(properties.operatingSystem),\n        PatchGroups: cdk.listMapper(cdk.stringToCloudFormation)(properties.patchGroups),\n        RejectedPatches: cdk.listMapper(cdk.stringToCloudFormation)(properties.rejectedPatches),\n        RejectedPatchesAction: cdk.stringToCloudFormation(properties.rejectedPatchesAction),\n        Sources: cdk.listMapper(cfnPatchBaselinePatchSourcePropertyToCloudFormation)(properties.sources),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPatchBaselinePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPatchBaselineProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPatchBaselineProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('approvalRules', 'ApprovalRules', properties.ApprovalRules != null ? CfnPatchBaselineRuleGroupPropertyFromCloudFormation(properties.ApprovalRules) : undefined);\n    ret.addPropertyResult('approvedPatches', 'ApprovedPatches', properties.ApprovedPatches != null ? cfn_parse.FromCloudFormation.getStringArray(properties.ApprovedPatches) : undefined);\n    ret.addPropertyResult('approvedPatchesComplianceLevel', 'ApprovedPatchesComplianceLevel', properties.ApprovedPatchesComplianceLevel != null ? cfn_parse.FromCloudFormation.getString(properties.ApprovedPatchesComplianceLevel) : undefined);\n    ret.addPropertyResult('approvedPatchesEnableNonSecurity', 'ApprovedPatchesEnableNonSecurity', properties.ApprovedPatchesEnableNonSecurity != null ? cfn_parse.FromCloudFormation.getBoolean(properties.ApprovedPatchesEnableNonSecurity) : undefined);\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('globalFilters', 'GlobalFilters', properties.GlobalFilters != null ? CfnPatchBaselinePatchFilterGroupPropertyFromCloudFormation(properties.GlobalFilters) : undefined);\n    ret.addPropertyResult('operatingSystem', 'OperatingSystem', properties.OperatingSystem != null ? cfn_parse.FromCloudFormation.getString(properties.OperatingSystem) : undefined);\n    ret.addPropertyResult('patchGroups', 'PatchGroups', properties.PatchGroups != null ? cfn_parse.FromCloudFormation.getStringArray(properties.PatchGroups) : undefined);\n    ret.addPropertyResult('rejectedPatches', 'RejectedPatches', properties.RejectedPatches != null ? cfn_parse.FromCloudFormation.getStringArray(properties.RejectedPatches) : undefined);\n    ret.addPropertyResult('rejectedPatchesAction', 'RejectedPatchesAction', properties.RejectedPatchesAction != null ? cfn_parse.FromCloudFormation.getString(properties.RejectedPatchesAction) : undefined);\n    ret.addPropertyResult('sources', 'Sources', properties.Sources != null ? cfn_parse.FromCloudFormation.getArray(CfnPatchBaselinePatchSourcePropertyFromCloudFormation)(properties.Sources) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnPatchBaseline extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SSM::PatchBaseline\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPatchBaseline {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnPatchBaselinePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnPatchBaseline(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                       \n    public name: string;\n\n                                                                                                                                                                                                                                        \n    public approvalRules: CfnPatchBaseline.RuleGroupProperty | cdk.IResolvable | undefined;\n\nn    public approvedPatches: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    public approvedPatchesComplianceLevel: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                 \n    public approvedPatchesEnableNonSecurity: boolean | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                   \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                 \n    public globalFilters: CfnPatchBaseline.PatchFilterGroupProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                               \n    public operatingSystem: string | undefined;\n\n                                                                                                                                                                                                                                                    \n    public patchGroups: string[] | undefined;\n\nn    public rejectedPatches: string[] | undefined;\n\nn    public rejectedPatchesAction: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                             \n    public sources: Array<CfnPatchBaseline.PatchSourceProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnPatchBaselineProps) {\n        super(scope, id, { type: CfnPatchBaseline.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n\n        this.name = props.name;\n        this.approvalRules = props.approvalRules;\n        this.approvedPatches = props.approvedPatches;\n        this.approvedPatchesComplianceLevel = props.approvedPatchesComplianceLevel;\n        this.approvedPatchesEnableNonSecurity = props.approvedPatchesEnableNonSecurity;\n        this.description = props.description;\n        this.globalFilters = props.globalFilters;\n        this.operatingSystem = props.operatingSystem;\n        this.patchGroups = props.patchGroups;\n        this.rejectedPatches = props.rejectedPatches;\n        this.rejectedPatchesAction = props.rejectedPatchesAction;\n        this.sources = props.sources;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::SSM::PatchBaseline\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnPatchBaseline.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            approvalRules: this.approvalRules,\n            approvedPatches: this.approvedPatches,\n            approvedPatchesComplianceLevel: this.approvedPatchesComplianceLevel,\n            approvedPatchesEnableNonSecurity: this.approvedPatchesEnableNonSecurity,\n            description: this.description,\n            globalFilters: this.globalFilters,\n            operatingSystem: this.operatingSystem,\n            patchGroups: this.patchGroups,\n            rejectedPatches: this.rejectedPatches,\n            rejectedPatchesAction: this.rejectedPatchesAction,\n            sources: this.sources,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnPatchBaselinePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnPatchBaseline {\nn    export interface PatchFilterProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly key?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly values?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PatchFilterProperty`\n *\n * @param properties - the TypeScript properties of a `PatchFilterProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPatchBaseline_PatchFilterPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));\n    return errors.wrap('supplied properties not correct for \"PatchFilterProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::PatchBaseline.PatchFilter` resource\n *\n * @param properties - the TypeScript properties of a `PatchFilterProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::PatchBaseline.PatchFilter` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPatchBaselinePatchFilterPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPatchBaseline_PatchFilterPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPatchBaselinePatchFilterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPatchBaseline.PatchFilterProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPatchBaseline.PatchFilterProperty>();\n    ret.addPropertyResult('key', 'Key', properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined);\n    ret.addPropertyResult('values', 'Values', properties.Values != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Values) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPatchBaseline {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n    export interface PatchFilterGroupProperty {\n                                                                                                                                                                                                                                                                                        \n        readonly patchFilters?: Array<CfnPatchBaseline.PatchFilterProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PatchFilterGroupProperty`\n *\n * @param properties - the TypeScript properties of a `PatchFilterGroupProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPatchBaseline_PatchFilterGroupPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('patchFilters', cdk.listValidator(CfnPatchBaseline_PatchFilterPropertyValidator))(properties.patchFilters));\n    return errors.wrap('supplied properties not correct for \"PatchFilterGroupProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::PatchBaseline.PatchFilterGroup` resource\n *\n * @param properties - the TypeScript properties of a `PatchFilterGroupProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::PatchBaseline.PatchFilterGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPatchBaselinePatchFilterGroupPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPatchBaseline_PatchFilterGroupPropertyValidator(properties).assertSuccess();\n    return {\n        PatchFilters: cdk.listMapper(cfnPatchBaselinePatchFilterPropertyToCloudFormation)(properties.patchFilters),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPatchBaselinePatchFilterGroupPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPatchBaseline.PatchFilterGroupProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPatchBaseline.PatchFilterGroupProperty>();\n    ret.addPropertyResult('patchFilters', 'PatchFilters', properties.PatchFilters != null ? cfn_parse.FromCloudFormation.getArray(CfnPatchBaselinePatchFilterPropertyFromCloudFormation)(properties.PatchFilters) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPatchBaseline {\nn    export interface PatchSourceProperty {\nn        readonly configuration?: string;\n                                                                                                                                                                                                                                                                      \n        readonly name?: string;\nn        readonly products?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PatchSourceProperty`\n *\n * @param properties - the TypeScript properties of a `PatchSourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPatchBaseline_PatchSourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('configuration', cdk.validateString)(properties.configuration));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('products', cdk.listValidator(cdk.validateString))(properties.products));\n    return errors.wrap('supplied properties not correct for \"PatchSourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::PatchBaseline.PatchSource` resource\n *\n * @param properties - the TypeScript properties of a `PatchSourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::PatchBaseline.PatchSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPatchBaselinePatchSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPatchBaseline_PatchSourcePropertyValidator(properties).assertSuccess();\n    return {\n        Configuration: cdk.stringToCloudFormation(properties.configuration),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Products: cdk.listMapper(cdk.stringToCloudFormation)(properties.products),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPatchBaselinePatchSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPatchBaseline.PatchSourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPatchBaseline.PatchSourceProperty>();\n    ret.addPropertyResult('configuration', 'Configuration', properties.Configuration != null ? cfn_parse.FromCloudFormation.getString(properties.Configuration) : undefined);\n    ret.addPropertyResult('name', 'Name', properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined);\n    ret.addPropertyResult('products', 'Products', properties.Products != null ? cfn_parse.FromCloudFormation.getStringArray(properties.Products) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPatchBaseline {\nn    export interface RuleProperty {\nn        readonly approveAfterDays?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly approveUntilDate?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly complianceLevel?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly enableNonSecurity?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                  \n        readonly patchFilterGroup?: CfnPatchBaseline.PatchFilterGroupProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RuleProperty`\n *\n * @param properties - the TypeScript properties of a `RuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPatchBaseline_RulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('approveAfterDays', cdk.validateNumber)(properties.approveAfterDays));\n    errors.collect(cdk.propertyValidator('approveUntilDate', cdk.validateString)(properties.approveUntilDate));\n    errors.collect(cdk.propertyValidator('complianceLevel', cdk.validateString)(properties.complianceLevel));\n    errors.collect(cdk.propertyValidator('enableNonSecurity', cdk.validateBoolean)(properties.enableNonSecurity));\n    errors.collect(cdk.propertyValidator('patchFilterGroup', CfnPatchBaseline_PatchFilterGroupPropertyValidator)(properties.patchFilterGroup));\n    return errors.wrap('supplied properties not correct for \"RuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::PatchBaseline.Rule` resource\n *\n * @param properties - the TypeScript properties of a `RuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::PatchBaseline.Rule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPatchBaselineRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPatchBaseline_RulePropertyValidator(properties).assertSuccess();\n    return {\n        ApproveAfterDays: cdk.numberToCloudFormation(properties.approveAfterDays),\n        ApproveUntilDate: cdk.stringToCloudFormation(properties.approveUntilDate),\n        ComplianceLevel: cdk.stringToCloudFormation(properties.complianceLevel),\n        EnableNonSecurity: cdk.booleanToCloudFormation(properties.enableNonSecurity),\n        PatchFilterGroup: cfnPatchBaselinePatchFilterGroupPropertyToCloudFormation(properties.patchFilterGroup),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPatchBaselineRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPatchBaseline.RuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPatchBaseline.RuleProperty>();\n    ret.addPropertyResult('approveAfterDays', 'ApproveAfterDays', properties.ApproveAfterDays != null ? cfn_parse.FromCloudFormation.getNumber(properties.ApproveAfterDays) : undefined);\n    ret.addPropertyResult('approveUntilDate', 'ApproveUntilDate', properties.ApproveUntilDate != null ? cfn_parse.FromCloudFormation.getString(properties.ApproveUntilDate) : undefined);\n    ret.addPropertyResult('complianceLevel', 'ComplianceLevel', properties.ComplianceLevel != null ? cfn_parse.FromCloudFormation.getString(properties.ComplianceLevel) : undefined);\n    ret.addPropertyResult('enableNonSecurity', 'EnableNonSecurity', properties.EnableNonSecurity != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNonSecurity) : undefined);\n    ret.addPropertyResult('patchFilterGroup', 'PatchFilterGroup', properties.PatchFilterGroup != null ? CfnPatchBaselinePatchFilterGroupPropertyFromCloudFormation(properties.PatchFilterGroup) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnPatchBaseline {\nn    export interface RuleGroupProperty {\n                                                                                                                                                                                                                                                              \n        readonly patchRules?: Array<CfnPatchBaseline.RuleProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `RuleGroupProperty`\n *\n * @param properties - the TypeScript properties of a `RuleGroupProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnPatchBaseline_RuleGroupPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('patchRules', cdk.listValidator(CfnPatchBaseline_RulePropertyValidator))(properties.patchRules));\n    return errors.wrap('supplied properties not correct for \"RuleGroupProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::PatchBaseline.RuleGroup` resource\n *\n * @param properties - the TypeScript properties of a `RuleGroupProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::PatchBaseline.RuleGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnPatchBaselineRuleGroupPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnPatchBaseline_RuleGroupPropertyValidator(properties).assertSuccess();\n    return {\n        PatchRules: cdk.listMapper(cfnPatchBaselineRulePropertyToCloudFormation)(properties.patchRules),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnPatchBaselineRuleGroupPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPatchBaseline.RuleGroupProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPatchBaseline.RuleGroupProperty>();\n    ret.addPropertyResult('patchRules', 'PatchRules', properties.PatchRules != null ? cfn_parse.FromCloudFormation.getArray(CfnPatchBaselineRulePropertyFromCloudFormation)(properties.PatchRules) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                \nexport interface CfnResourceDataSyncProps {\n\n                                                                                                                                                                                                                    \n    readonly syncName: string;\n\n                                                                                                                                                                                                                                                  \n    readonly bucketName?: string;\n\n                                                                                                                                                                                                                         \n    readonly bucketPrefix?: string;\n\n                                                                                                                                                                                                                                                           \n    readonly bucketRegion?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly kmsKeyArn?: string;\n\n                                                                                                                                                                                                                                          \n    readonly s3Destination?: CfnResourceDataSync.S3DestinationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                   \n    readonly syncFormat?: string;\n\n                                                                                                                                                                                                                                                 \n    readonly syncSource?: CfnResourceDataSync.SyncSourceProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly syncType?: string;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnResourceDataSyncProps`\n *\n * @param properties - the TypeScript properties of a `CfnResourceDataSyncProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnResourceDataSyncPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketPrefix', cdk.validateString)(properties.bucketPrefix));\n    errors.collect(cdk.propertyValidator('bucketRegion', cdk.validateString)(properties.bucketRegion));\n    errors.collect(cdk.propertyValidator('kmsKeyArn', cdk.validateString)(properties.kmsKeyArn));\n    errors.collect(cdk.propertyValidator('s3Destination', CfnResourceDataSync_S3DestinationPropertyValidator)(properties.s3Destination));\n    errors.collect(cdk.propertyValidator('syncFormat', cdk.validateString)(properties.syncFormat));\n    errors.collect(cdk.propertyValidator('syncName', cdk.requiredValidator)(properties.syncName));\n    errors.collect(cdk.propertyValidator('syncName', cdk.validateString)(properties.syncName));\n    errors.collect(cdk.propertyValidator('syncSource', CfnResourceDataSync_SyncSourcePropertyValidator)(properties.syncSource));\n    errors.collect(cdk.propertyValidator('syncType', cdk.validateString)(properties.syncType));\n    return errors.wrap('supplied properties not correct for \"CfnResourceDataSyncProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::ResourceDataSync` resource\n *\n * @param properties - the TypeScript properties of a `CfnResourceDataSyncProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::ResourceDataSync` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResourceDataSyncPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResourceDataSyncPropsValidator(properties).assertSuccess();\n    return {\n        SyncName: cdk.stringToCloudFormation(properties.syncName),\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        BucketPrefix: cdk.stringToCloudFormation(properties.bucketPrefix),\n        BucketRegion: cdk.stringToCloudFormation(properties.bucketRegion),\n        KMSKeyArn: cdk.stringToCloudFormation(properties.kmsKeyArn),\n        S3Destination: cfnResourceDataSyncS3DestinationPropertyToCloudFormation(properties.s3Destination),\n        SyncFormat: cdk.stringToCloudFormation(properties.syncFormat),\n        SyncSource: cfnResourceDataSyncSyncSourcePropertyToCloudFormation(properties.syncSource),\n        SyncType: cdk.stringToCloudFormation(properties.syncType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResourceDataSyncPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResourceDataSyncProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResourceDataSyncProps>();\n    ret.addPropertyResult('syncName', 'SyncName', cfn_parse.FromCloudFormation.getString(properties.SyncName));\n    ret.addPropertyResult('bucketName', 'BucketName', properties.BucketName != null ? cfn_parse.FromCloudFormation.getString(properties.BucketName) : undefined);\n    ret.addPropertyResult('bucketPrefix', 'BucketPrefix', properties.BucketPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.BucketPrefix) : undefined);\n    ret.addPropertyResult('bucketRegion', 'BucketRegion', properties.BucketRegion != null ? cfn_parse.FromCloudFormation.getString(properties.BucketRegion) : undefined);\n    ret.addPropertyResult('kmsKeyArn', 'KMSKeyArn', properties.KMSKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.KMSKeyArn) : undefined);\n    ret.addPropertyResult('s3Destination', 'S3Destination', properties.S3Destination != null ? CfnResourceDataSyncS3DestinationPropertyFromCloudFormation(properties.S3Destination) : undefined);\n    ret.addPropertyResult('syncFormat', 'SyncFormat', properties.SyncFormat != null ? cfn_parse.FromCloudFormation.getString(properties.SyncFormat) : undefined);\n    ret.addPropertyResult('syncSource', 'SyncSource', properties.SyncSource != null ? CfnResourceDataSyncSyncSourcePropertyFromCloudFormation(properties.SyncSource) : undefined);\n    ret.addPropertyResult('syncType', 'SyncType', properties.SyncType != null ? cfn_parse.FromCloudFormation.getString(properties.SyncType) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnResourceDataSync extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::SSM::ResourceDataSync\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnResourceDataSync {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnResourceDataSyncPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnResourceDataSync(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                   \n    public readonly attrSyncName: string;\n\n                                                                                                                                                                                                                    \n    public syncName: string;\n\n                                                                                                                                                                                                                                                  \n    public bucketName: string | undefined;\n\n                                                                                                                                                                                                                         \n    public bucketPrefix: string | undefined;\n\n                                                                                                                                                                                                                                                           \n    public bucketRegion: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                         \n    public kmsKeyArn: string | undefined;\n\n                                                                                                                                                                                                                                          \n    public s3Destination: CfnResourceDataSync.S3DestinationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                   \n    public syncFormat: string | undefined;\n\n                                                                                                                                                                                                                                                 \n    public syncSource: CfnResourceDataSync.SyncSourceProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public syncType: string | undefined;\n\n                                                                                                                                                                                                                                \n    constructor(scope: constructs.Construct, id: string, props: CfnResourceDataSyncProps) {\n        super(scope, id, { type: CfnResourceDataSync.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'syncName', this);\n        this.attrSyncName = cdk.Token.asString(this.getAtt('SyncName'));\n\n        this.syncName = props.syncName;\n        this.bucketName = props.bucketName;\n        this.bucketPrefix = props.bucketPrefix;\n        this.bucketRegion = props.bucketRegion;\n        this.kmsKeyArn = props.kmsKeyArn;\n        this.s3Destination = props.s3Destination;\n        this.syncFormat = props.syncFormat;\n        this.syncSource = props.syncSource;\n        this.syncType = props.syncType;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnResourceDataSync.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            syncName: this.syncName,\n            bucketName: this.bucketName,\n            bucketPrefix: this.bucketPrefix,\n            bucketRegion: this.bucketRegion,\n            kmsKeyArn: this.kmsKeyArn,\n            s3Destination: this.s3Destination,\n            syncFormat: this.syncFormat,\n            syncSource: this.syncSource,\n            syncType: this.syncType,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnResourceDataSyncPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnResourceDataSync {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface AwsOrganizationsSourceProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n        readonly organizationSourceType: string;\n                                                                                                                                                                                                                                                                                                                               \n        readonly organizationalUnits?: string[];\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `AwsOrganizationsSourceProperty`\n *\n * @param properties - the TypeScript properties of a `AwsOrganizationsSourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResourceDataSync_AwsOrganizationsSourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('organizationSourceType', cdk.requiredValidator)(properties.organizationSourceType));\n    errors.collect(cdk.propertyValidator('organizationSourceType', cdk.validateString)(properties.organizationSourceType));\n    errors.collect(cdk.propertyValidator('organizationalUnits', cdk.listValidator(cdk.validateString))(properties.organizationalUnits));\n    return errors.wrap('supplied properties not correct for \"AwsOrganizationsSourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::ResourceDataSync.AwsOrganizationsSource` resource\n *\n * @param properties - the TypeScript properties of a `AwsOrganizationsSourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::ResourceDataSync.AwsOrganizationsSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResourceDataSyncAwsOrganizationsSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResourceDataSync_AwsOrganizationsSourcePropertyValidator(properties).assertSuccess();\n    return {\n        OrganizationSourceType: cdk.stringToCloudFormation(properties.organizationSourceType),\n        OrganizationalUnits: cdk.listMapper(cdk.stringToCloudFormation)(properties.organizationalUnits),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResourceDataSyncAwsOrganizationsSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResourceDataSync.AwsOrganizationsSourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResourceDataSync.AwsOrganizationsSourceProperty>();\n    ret.addPropertyResult('organizationSourceType', 'OrganizationSourceType', cfn_parse.FromCloudFormation.getString(properties.OrganizationSourceType));\n    ret.addPropertyResult('organizationalUnits', 'OrganizationalUnits', properties.OrganizationalUnits != null ? cfn_parse.FromCloudFormation.getStringArray(properties.OrganizationalUnits) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResourceDataSync {\n                                                                                                                                                                                                                                                                                   \n    export interface S3DestinationProperty {\n                                                                                                                                                                                                                                                                                                    \n        readonly bucketName: string;\n                                                                                                                                                                                                                                                                           \n        readonly bucketPrefix?: string;\n                                                                                                                                                                                                                                                                                                             \n        readonly bucketRegion: string;\n                                                                                                                                                                                                                                                                                                                                                              \n        readonly kmsKeyArn?: string;\n                                                                                                                                                                                                                                                                                                                     \n        readonly syncFormat: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3DestinationProperty`\n *\n * @param properties - the TypeScript properties of a `S3DestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResourceDataSync_S3DestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketName', cdk.requiredValidator)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketPrefix', cdk.validateString)(properties.bucketPrefix));\n    errors.collect(cdk.propertyValidator('bucketRegion', cdk.requiredValidator)(properties.bucketRegion));\n    errors.collect(cdk.propertyValidator('bucketRegion', cdk.validateString)(properties.bucketRegion));\n    errors.collect(cdk.propertyValidator('kmsKeyArn', cdk.validateString)(properties.kmsKeyArn));\n    errors.collect(cdk.propertyValidator('syncFormat', cdk.requiredValidator)(properties.syncFormat));\n    errors.collect(cdk.propertyValidator('syncFormat', cdk.validateString)(properties.syncFormat));\n    return errors.wrap('supplied properties not correct for \"S3DestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::ResourceDataSync.S3Destination` resource\n *\n * @param properties - the TypeScript properties of a `S3DestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::ResourceDataSync.S3Destination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResourceDataSyncS3DestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResourceDataSync_S3DestinationPropertyValidator(properties).assertSuccess();\n    return {\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        BucketPrefix: cdk.stringToCloudFormation(properties.bucketPrefix),\n        BucketRegion: cdk.stringToCloudFormation(properties.bucketRegion),\n        KMSKeyArn: cdk.stringToCloudFormation(properties.kmsKeyArn),\n        SyncFormat: cdk.stringToCloudFormation(properties.syncFormat),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResourceDataSyncS3DestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResourceDataSync.S3DestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResourceDataSync.S3DestinationProperty>();\n    ret.addPropertyResult('bucketName', 'BucketName', cfn_parse.FromCloudFormation.getString(properties.BucketName));\n    ret.addPropertyResult('bucketPrefix', 'BucketPrefix', properties.BucketPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.BucketPrefix) : undefined);\n    ret.addPropertyResult('bucketRegion', 'BucketRegion', cfn_parse.FromCloudFormation.getString(properties.BucketRegion));\n    ret.addPropertyResult('kmsKeyArn', 'KMSKeyArn', properties.KMSKeyArn != null ? cfn_parse.FromCloudFormation.getString(properties.KMSKeyArn) : undefined);\n    ret.addPropertyResult('syncFormat', 'SyncFormat', cfn_parse.FromCloudFormation.getString(properties.SyncFormat));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnResourceDataSync {\n                                                                                                                                                                                                                                                                                          \n    export interface SyncSourceProperty {\n                                                                                                                                                                                                                                                                                                                                                                                            \n        readonly awsOrganizationsSource?: CfnResourceDataSync.AwsOrganizationsSourceProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                      \n        readonly includeFutureRegions?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                   \n        readonly sourceRegions: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly sourceType: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SyncSourceProperty`\n *\n * @param properties - the TypeScript properties of a `SyncSourceProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnResourceDataSync_SyncSourcePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('awsOrganizationsSource', CfnResourceDataSync_AwsOrganizationsSourcePropertyValidator)(properties.awsOrganizationsSource));\n    errors.collect(cdk.propertyValidator('includeFutureRegions', cdk.validateBoolean)(properties.includeFutureRegions));\n    errors.collect(cdk.propertyValidator('sourceRegions', cdk.requiredValidator)(properties.sourceRegions));\n    errors.collect(cdk.propertyValidator('sourceRegions', cdk.listValidator(cdk.validateString))(properties.sourceRegions));\n    errors.collect(cdk.propertyValidator('sourceType', cdk.requiredValidator)(properties.sourceType));\n    errors.collect(cdk.propertyValidator('sourceType', cdk.validateString)(properties.sourceType));\n    return errors.wrap('supplied properties not correct for \"SyncSourceProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::SSM::ResourceDataSync.SyncSource` resource\n *\n * @param properties - the TypeScript properties of a `SyncSourceProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::SSM::ResourceDataSync.SyncSource` resource.\n */\n// @ts-ignore TS6133\nfunction cfnResourceDataSyncSyncSourcePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnResourceDataSync_SyncSourcePropertyValidator(properties).assertSuccess();\n    return {\n        AwsOrganizationsSource: cfnResourceDataSyncAwsOrganizationsSourcePropertyToCloudFormation(properties.awsOrganizationsSource),\n        IncludeFutureRegions: cdk.booleanToCloudFormation(properties.includeFutureRegions),\n        SourceRegions: cdk.listMapper(cdk.stringToCloudFormation)(properties.sourceRegions),\n        SourceType: cdk.stringToCloudFormation(properties.sourceType),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnResourceDataSyncSyncSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnResourceDataSync.SyncSourceProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnResourceDataSync.SyncSourceProperty>();\n    ret.addPropertyResult('awsOrganizationsSource', 'AwsOrganizationsSource', properties.AwsOrganizationsSource != null ? CfnResourceDataSyncAwsOrganizationsSourcePropertyFromCloudFormation(properties.AwsOrganizationsSource) : undefined);\n    ret.addPropertyResult('includeFutureRegions', 'IncludeFutureRegions', properties.IncludeFutureRegions != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeFutureRegions) : undefined);\n    ret.addPropertyResult('sourceRegions', 'SourceRegions', cfn_parse.FromCloudFormation.getStringArray(properties.SourceRegions));\n    ret.addPropertyResult('sourceType', 'SourceType', cfn_parse.FromCloudFormation.getString(properties.SourceType));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
