{
  "version": 3,
  "sources": ["get-item.ts"],
  "sourcesContent": ["import * as ddb from '../../../aws-dynamodb';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Stack } from '../../../core';\nimport { Construct } from 'constructs';\nimport { DynamoMethod, getDynamoResourceArn, transformAttributeValueMap } from './private/utils';\nimport { DynamoAttributeValue, DynamoConsumedCapacity, DynamoProjectionExpression } from './shared-types';\n\n                                            \nexport interface DynamoGetItemProps extends sfn.TaskStateBaseProps {\n                                                                     \n  readonly table: ddb.ITable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n  readonly key: { [key: string]: DynamoAttributeValue };\n\n                                                                                                                                                                                                                        \n  readonly consistentRead?: boolean;\n\n                                                                                                                                                                                                                                                                               \n  readonly expressionAttributeNames?: { [key: string]: string };\n\n                                                                                                                                                                                                                                                                                                                                                                                                 \n  readonly projectionExpression?: DynamoProjectionExpression[];\n\n                                                                                                                                                                                                                                                                                                                  \n  readonly returnConsumedCapacity?: DynamoConsumedCapacity;\n}\n\n                                                     \nexport class DynamoGetItem extends sfn.TaskStateBase {\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n\n  constructor(scope: Construct, id: string, private readonly props: DynamoGetItemProps) {\n    super(scope, id, props);\n\n    this.taskPolicies = [\n      new iam.PolicyStatement({\n        resources: [\n          Stack.of(this).formatArn({\n            service: 'dynamodb',\n            resource: 'table',\n            resourceName: props.table.tableName,\n          }),\n        ],\n        actions: [`dynamodb:${DynamoMethod.GET}Item`],\n      }),\n    ];\n  }\n\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: getDynamoResourceArn(DynamoMethod.GET),\n      Parameters: sfn.FieldUtils.renderObject({\n        Key: transformAttributeValueMap(this.props.key),\n        TableName: this.props.table.tableName,\n        ConsistentRead: this.props.consistentRead ?? false,\n        ExpressionAttributeNames: this.props.expressionAttributeNames,\n        ProjectionExpression: this.configureProjectionExpression(this.props.projectionExpression),\n        ReturnConsumedCapacity: this.props.returnConsumedCapacity,\n      }),\n    };\n  }\n\n  private configureProjectionExpression(expressions?: DynamoProjectionExpression[]): string | undefined {\n    return expressions ? expressions.map((expression) => expression.toString()).join(',') : undefined;\n  }\n}\n"],
  "mappings": "uNACA,IAAA,QAAA,oBACA,IAAA,QAAA,8BACA,OAAA,QAAA,iBAEA,QAAA,QAAA,mBAyBA,2BAAmC,KAAI,aAAa,CAIlD,YAAY,MAAkB,GAA6B,MAAyB,CAClF,MAAM,MAAO,GAAI,OADwC,KAAA,MAAA,4FAGzD,KAAK,aAAe,CAClB,GAAI,KAAI,gBAAgB,CACtB,UAAW,CACT,OAAA,MAAM,GAAG,MAAM,UAAU,CACvB,QAAS,WACT,SAAU,QACV,aAAc,MAAM,MAAM,aAG9B,QAAS,CAAC,YAAY,QAAA,aAAa,cAQ/B,aAAW,QACnB,MAAO,CACL,SAAU,QAAA,qBAAqB,QAAA,aAAa,KAC5C,WAAY,IAAI,WAAW,aAAa,CACtC,IAAK,QAAA,2BAA2B,KAAK,MAAM,KAC3C,UAAW,KAAK,MAAM,MAAM,UAC5B,eAAc,IAAE,KAAK,MAAM,kBAAc,MAAA,KAAA,OAAA,GAAI,GAC7C,yBAA0B,KAAK,MAAM,yBACrC,qBAAsB,KAAK,8BAA8B,KAAK,MAAM,sBACpE,uBAAwB,KAAK,MAAM,0BAKjC,8BAA8B,YAA0C,CAC9E,MAAO,aAAc,YAAY,IAAI,AAAC,YAAe,WAAW,YAAY,KAAK,KAAO,QAvC5F,QAAA,cAAA",
  "names": []
}
