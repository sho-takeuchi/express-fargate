{
  "version": 3,
  "sources": ["shared-types.ts"],
  "sourcesContent": ["import { transformAttributeValueMap, validateJsonPath } from './private/utils';\n\n                                                                                                    \nexport enum DynamoConsumedCapacity {\n                                                                                                                                                                                 \n  INDEXES = 'INDEXES',\n\n                                                                                             \n  TOTAL = 'TOTAL',\n\n                                                                          \n  NONE = 'NONE',\n}\n\n                                                                   \nexport enum DynamoItemCollectionMetrics {\n                                                                                                                                               \n  SIZE = 'SIZE',\n\n                                                            \n  NONE = 'NONE',\n}\n\n                                                                                                                  \nexport enum DynamoReturnValues {\n                                    \n  NONE = 'NONE',\n\n                                                          \n  ALL_OLD = 'ALL_OLD',\n\n                                                    \n  UPDATED_OLD = 'UPDATED_OLD',\n\n                                                          \n  ALL_NEW = 'ALL_NEW',\n\n                                                    \n  UPDATED_NEW = 'UPDATED_NEW',\n}\n\n                                                  \nexport class DynamoProjectionExpression {\n  private expression: string[] = [];\n\n                                                                                            \n  public withAttribute(attr: string): DynamoProjectionExpression {\n    if (this.expression.length) {\n      this.expression.push(`.${attr}`);\n    } else {\n      this.expression.push(attr);\n    }\n    return this;\n  }\n\n                                                                                                  \n  public atIndex(index: number): DynamoProjectionExpression {\n    if (!this.expression.length) {\n      throw new Error('Expression must start with an attribute');\n    }\n\n    this.expression.push(`[${index}]`);\n    return this;\n  }\n\n                                                          \n  public toString(): string {\n    return this.expression.join('');\n  }\n}\n\n                                                                                                                                                                                                                                                                             \nexport class DynamoAttributeValue {\n                                                                                                                                                                                                                                                                                \n  public static fromString(value: string) {\n    return new DynamoAttributeValue({ S: value });\n  }\n\n                                                                                                                                                                                                                                                                                   \n  public static fromNumber(value: number) {\n    return new DynamoAttributeValue({ N: value.toString() });\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                             \n  public static numberFromString(value: string) {\n    return new DynamoAttributeValue({ N: value.toString() });\n  }\n\n                                                                                                                                                          \n  public static fromBinary(value: string) {\n    return new DynamoAttributeValue({ B: value });\n  }\n\n                                                                                                        \n  public static fromStringSet(value: string[]) {\n    return new DynamoAttributeValue({ SS: value });\n  }\n\n                                                                                                                                                                                                                                                                                                                                   \n  public static fromNumberSet(value: number[]) {\n    return new DynamoAttributeValue({ NS: value.map(String) });\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                        \n  public static numberSetFromStrings(value: string[]) {\n    return new DynamoAttributeValue({ NS: value });\n  }\n\n                                                                                                               \n  public static fromBinarySet(value: string[]) {\n    return new DynamoAttributeValue({ BS: value });\n  }\n\n                                                                                                             \n  public static fromMap(value: { [key: string]: DynamoAttributeValue }) {\n    return new DynamoAttributeValue({ M: transformAttributeValueMap(value) });\n  }\n\n                                                                                                                                                                                    \n  public static mapFromJsonPath(value: string) {\n    validateJsonPath(value);\n    return new DynamoAttributeValue({ 'M.$': value });\n  }\n\n                                                                                                                           \n  public static fromList(value: DynamoAttributeValue[]) {\n    return new DynamoAttributeValue({ L: value.map((val) => val.toObject()) });\n  }\n\n                                                                                                                                                                                                  \n  public static listFromJsonPath(value: string) {\n    validateJsonPath(value);\n    return new DynamoAttributeValue({ L: value });\n  }\n\n                                                                           \n  public static fromNull(value: boolean) {\n    return new DynamoAttributeValue({ NULL: value });\n  }\n\n                                                                              \n  public static fromBoolean(value: boolean) {\n    return new DynamoAttributeValue({ BOOL: value });\n  }\n\n                                                                                                                                                                                             \n  public static booleanFromJsonPath(value: string) {\n    validateJsonPath(value);\n    return new DynamoAttributeValue({ BOOL: value.toString() });\n  }\n\n                                                                                          \n  public readonly attributeValue: any;\n\n  private constructor(value: any) {\n    this.attributeValue = value;\n  }\n\n                                                     \n  public toObject() {\n    return this.attributeValue;\n  }\n}\n"],
  "mappings": "oSAAA,QAAA,QAAA,mBAGA,GAAY,wBAAZ,AAAA,UAAY,wBAAsB,CAEhC,wBAAA,QAAA,UAGA,wBAAA,MAAA,QAGA,wBAAA,KAAA,SARU,uBAAA,QAAA,wBAAA,SAAA,uBAAsB,KAYlC,GAAY,6BAAZ,AAAA,UAAY,6BAA2B,CAErC,6BAAA,KAAA,OAGA,6BAAA,KAAA,SALU,4BAAA,QAAA,6BAAA,SAAA,4BAA2B,KASvC,GAAY,oBAAZ,AAAA,UAAY,oBAAkB,CAE5B,oBAAA,KAAA,OAGA,oBAAA,QAAA,UAGA,oBAAA,YAAA,cAGA,oBAAA,QAAA,UAGA,oBAAA,YAAA,gBAdU,mBAAA,QAAA,oBAAA,SAAA,mBAAkB,KAkB9B,gCAAuC,CAAvC,aAAA,CACU,KAAA,WAAuB,GAGxB,cAAc,KAAY,CAC/B,MAAI,MAAK,WAAW,OAClB,KAAK,WAAW,KAAK,IAAI,QAEzB,KAAK,WAAW,KAAK,MAEhB,KAIF,QAAQ,MAAa,CAC1B,GAAI,CAAC,KAAK,WAAW,OACnB,KAAM,IAAI,OAAM,2CAGlB,YAAK,WAAW,KAAK,IAAI,UAClB,KAIF,UAAQ,CACb,MAAO,MAAK,WAAW,KAAK,KAzBhC,QAAA,2BAAA,wKA8BA,0BAAiC,CAkF/B,YAAoB,MAAU,CAC5B,KAAK,eAAiB,YAjFV,YAAW,MAAa,CACpC,MAAO,IAAI,sBAAqB,CAAE,EAAG,cAIzB,YAAW,MAAa,CACpC,MAAO,IAAI,sBAAqB,CAAE,EAAG,MAAM,mBAI/B,kBAAiB,MAAa,CAC1C,MAAO,IAAI,sBAAqB,CAAE,EAAG,MAAM,mBAI/B,YAAW,MAAa,CACpC,MAAO,IAAI,sBAAqB,CAAE,EAAG,cAIzB,eAAc,MAAe,CACzC,MAAO,IAAI,sBAAqB,CAAE,GAAI,cAI1B,eAAc,MAAe,CACzC,MAAO,IAAI,sBAAqB,CAAE,GAAI,MAAM,IAAI,gBAIpC,sBAAqB,MAAe,CAChD,MAAO,IAAI,sBAAqB,CAAE,GAAI,cAI1B,eAAc,MAAe,CACzC,MAAO,IAAI,sBAAqB,CAAE,GAAI,cAI1B,SAAQ,MAA8C,CAClE,MAAO,IAAI,sBAAqB,CAAE,EAAG,QAAA,2BAA2B,eAIpD,iBAAgB,MAAa,CACzC,eAAA,iBAAiB,OACV,GAAI,sBAAqB,CAAE,MAAO,cAI7B,UAAS,MAA6B,CAClD,MAAO,IAAI,sBAAqB,CAAE,EAAG,MAAM,IAAI,AAAC,KAAQ,IAAI,oBAIhD,kBAAiB,MAAa,CAC1C,eAAA,iBAAiB,OACV,GAAI,sBAAqB,CAAE,EAAG,cAIzB,UAAS,MAAc,CACnC,MAAO,IAAI,sBAAqB,CAAE,KAAM,cAI5B,aAAY,MAAc,CACtC,MAAO,IAAI,sBAAqB,CAAE,KAAM,cAI5B,qBAAoB,MAAa,CAC7C,eAAA,iBAAiB,OACV,GAAI,sBAAqB,CAAE,KAAM,MAAM,aAWzC,UAAQ,CACb,MAAO,MAAK,gBAxFhB,QAAA,qBAAA",
  "names": []
}
