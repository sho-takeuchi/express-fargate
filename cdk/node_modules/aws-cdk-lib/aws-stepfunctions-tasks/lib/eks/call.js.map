{
  "version": 3,
  "sources": ["call.ts"],
  "sourcesContent": ["import * as eks from '../../../aws-eks';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\n\n                                                             \nexport interface EksCallProps extends sfn.TaskStateBaseProps {\n\n                                \n  readonly cluster: eks.ICluster;\n\n                                                                             \n  readonly httpMethod: HttpMethods;\n\n                                                                                                                 \n  readonly httpPath: string;\n\n                                                                                          \n  readonly queryParameters?: { [key: string]: string[] };\n\n                                                                                  \n  readonly requestBody?: sfn.TaskInput;\n}\n\n                                                                                                                         \nexport class EksCall extends sfn.TaskStateBase {\n\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n  ];\n\n                                                                                                                                                                                                                                  \n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  private readonly clusterEndpoint: string;\n  private readonly clusterCertificateAuthorityData: string;\n\n  constructor(scope: Construct, id: string, private readonly props: EksCallProps) {\n    super(scope, id, props);\n    this.integrationPattern = props.integrationPattern ?? sfn.IntegrationPattern.REQUEST_RESPONSE;\n\n    validatePatternSupported(this.integrationPattern, EksCall.SUPPORTED_INTEGRATION_PATTERNS);\n\n    try {\n      this.clusterEndpoint = this.props.cluster.clusterEndpoint;\n    } catch (e) {\n      throw new Error('The \"clusterEndpoint\" property must be specified when using an imported Cluster.');\n    }\n\n    try {\n      this.clusterCertificateAuthorityData = this.props.cluster.clusterCertificateAuthorityData;\n    } catch (e) {\n      throw new Error('The \"clusterCertificateAuthorityData\" property must be specified when using an imported Cluster.');\n    }\n  }\n\n  /**\n   * Provides the EKS Call service integration task configuration\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('eks', 'call', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject({\n        ClusterName: this.props.cluster.clusterName,\n        CertificateAuthority: this.clusterCertificateAuthorityData,\n        Endpoint: this.clusterEndpoint,\n        Method: this.props.httpMethod,\n        Path: this.props.httpPath,\n        QueryParameters: this.props.queryParameters,\n        RequestBody: this.props.requestBody?.value,\n      }),\n    };\n  }\n}\n\n                                    \nexport enum HttpMethods {\n                                                                      \n  GET = 'GET',\n\n                                                                             \n  POST = 'POST',\n\n                                                                             \n  PUT = 'PUT',\n\n                                                              \n  DELETE = 'DELETE',\n\n                                                            \n  PATCH = 'PATCH',\n\n                                                                                                \n  HEAD = 'HEAD'\n}"],
  "mappings": "qOAEA,IAAA,QAAA,8BAEA,aAAA,QAAA,yBAsBA,qBAA6B,KAAI,aAAa,CAe5C,YAAY,MAAkB,GAA6B,MAAmB,QAC5E,MAAM,MAAO,GAAI,OADwC,KAAA,MAAA,sFAEzD,KAAK,mBAAkB,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,IAAI,mBAAmB,iBAE7E,aAAA,yBAAyB,KAAK,mBAAoB,QAAQ,gCAE1D,GAAI,CACF,KAAK,gBAAkB,KAAK,MAAM,QAAQ,qBAC1C,CACA,KAAM,IAAI,OAAM,oFAGlB,GAAI,CACF,KAAK,gCAAkC,KAAK,MAAM,QAAQ,qCAC1D,CACA,KAAM,IAAI,OAAM,qGAQV,aAAW,QACnB,MAAO,CACL,SAAU,aAAA,uBAAuB,MAAO,OAAQ,KAAK,oBACrD,WAAY,IAAI,WAAW,aAAa,CACtC,YAAa,KAAK,MAAM,QAAQ,YAChC,qBAAsB,KAAK,gCAC3B,SAAU,KAAK,gBACf,OAAQ,KAAK,MAAM,WACnB,KAAM,KAAK,MAAM,SACjB,gBAAiB,KAAK,MAAM,gBAC5B,YAAW,IAAE,KAAK,MAAM,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,UAhD7C,QAAA,QAAA,+GAE0B,QAAA,+BAA2D,CACjF,IAAI,mBAAmB,kBAoD3B,GAAY,aAAZ,AAAA,UAAY,aAAW,CAErB,aAAA,IAAA,MAGA,aAAA,KAAA,OAGA,aAAA,IAAA,MAGA,aAAA,OAAA,SAGA,aAAA,MAAA,QAGA,aAAA,KAAA,SAjBU,YAAA,QAAA,aAAA,SAAA,YAAW",
  "names": []
}
