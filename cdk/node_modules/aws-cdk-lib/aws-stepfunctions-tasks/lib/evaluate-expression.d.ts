import * as iam from '../../aws-iam';
import * as lambda from '../../aws-lambda';
import * as sfn from '../../aws-stepfunctions';
import { Construct } from 'constructs';
/**
 * Properties for EvaluateExpression.
 *
 * @stability stable
 */
export interface EvaluateExpressionProps extends sfn.TaskStateBaseProps {
    /**
     * The expression to evaluate. The expression may contain state paths.
     *
     * Example value: `'$.a + $.b'`
     *
     * @stability stable
     */
    readonly expression: string;
    /**
     * The runtime language to use to evaluate the expression.
     *
     * @default lambda.Runtime.NODEJS_14_X
     * @stability stable
     */
    readonly runtime?: lambda.Runtime;
}
/**
 * The event received by the Lambda function
 *
 * @internal
 */
export interface Event {
    /**
     * The expression to evaluate
     */
    readonly expression: string;
    /**
     * The expression attribute values
     */
    readonly expressionAttributeValues: {
        [key: string]: any;
    };
}
/**
 * A Step Functions Task to evaluate an expression.
 *
 * OUTPUT: the output of this task is the evaluated expression.
 *
 * @stability stable
 */
export declare class EvaluateExpression extends sfn.TaskStateBase {
    private readonly props;
    /**
     * @stability stable
     */
    protected readonly taskMetrics?: sfn.TaskMetricsConfig;
    /**
     * @stability stable
     */
    protected readonly taskPolicies?: iam.PolicyStatement[];
    private readonly evalFn;
    /**
     * @stability stable
     */
    constructor(scope: Construct, id: string, props: EvaluateExpressionProps);
    /**
     * @internal
     */
    protected _renderTask(): any;
}
