{
  "version": 3,
  "sources": ["start-job-run.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Duration, Stack } from '../../../core';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\n\n                                                            \nexport interface GlueStartJobRunProps extends sfn.TaskStateBaseProps {\n\n                              \n  readonly glueJobName: string;\n\n                                                                                                                                                                                                                                    \n  readonly arguments?: sfn.TaskInput;\n\n                                                                                                                                                                                                                                                                                                                   \n  readonly securityConfiguration?: string;\n\n                                                                                                                                                                                                                     \n  readonly notifyDelayAfter?: Duration;\n}\n\n                                                                                                                                                                                                                                                                                                                            \nexport class GlueStartJobRun extends sfn.TaskStateBase {\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n    sfn.IntegrationPattern.RUN_JOB,\n  ];\n\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  constructor(scope: Construct, id: string, private readonly props: GlueStartJobRunProps) {\n    super(scope, id, props);\n    this.integrationPattern = props.integrationPattern ?? sfn.IntegrationPattern.REQUEST_RESPONSE;\n\n    validatePatternSupported(this.integrationPattern, GlueStartJobRun.SUPPORTED_INTEGRATION_PATTERNS);\n\n    this.taskPolicies = this.getPolicies();\n\n    this.taskMetrics = {\n      metricPrefixSingular: 'GlueJob',\n      metricPrefixPlural: 'GlueJobs',\n      metricDimensions: { GlueJobName: this.props.glueJobName },\n    };\n  }\n\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    const notificationProperty = this.props.notifyDelayAfter ? { NotifyDelayAfter: this.props.notifyDelayAfter.toMinutes() } : null;\n    return {\n      Resource: integrationResourceArn('glue', 'startJobRun', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject({\n        JobName: this.props.glueJobName,\n        Arguments: this.props.arguments?.value,\n        Timeout: this.props.timeout?.toMinutes(),\n        SecurityConfiguration: this.props.securityConfiguration,\n        NotificationProperty: notificationProperty,\n      }),\n      TimeoutSeconds: undefined,\n    };\n  }\n\n  private getPolicies(): iam.PolicyStatement[] {\n    let iamActions: string[] | undefined;\n    if (this.integrationPattern === sfn.IntegrationPattern.REQUEST_RESPONSE) {\n      iamActions = ['glue:StartJobRun'];\n    } else if (this.integrationPattern === sfn.IntegrationPattern.RUN_JOB) {\n      iamActions = [\n        'glue:StartJobRun',\n        'glue:GetJobRun',\n        'glue:GetJobRuns',\n        'glue:BatchStopJobRun',\n      ];\n    }\n\n    return [new iam.PolicyStatement({\n      resources: [\n        Stack.of(this).formatArn({\n          service: 'glue',\n          resource: 'job',\n          resourceName: this.props.glueJobName,\n        }),\n      ],\n      actions: iamActions,\n    })];\n  }\n}\n"],
  "mappings": "yNAAA,IAAA,QAAA,oBACA,IAAA,QAAA,8BACA,OAAA,QAAA,iBAEA,aAAA,QAAA,yBAmBA,6BAAqC,KAAI,aAAa,CAWpD,YAAY,MAAkB,GAA6B,MAA2B,QACpF,MAAM,MAAO,GAAI,OADwC,KAAA,MAAA,8FAEzD,KAAK,mBAAkB,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,IAAI,mBAAmB,iBAE7E,aAAA,yBAAyB,KAAK,mBAAoB,gBAAgB,gCAElE,KAAK,aAAe,KAAK,cAEzB,KAAK,YAAc,CACjB,qBAAsB,UACtB,mBAAoB,WACpB,iBAAkB,CAAE,YAAa,KAAK,MAAM,cAOtC,aAAW,WACnB,KAAM,sBAAuB,KAAK,MAAM,iBAAmB,CAAE,iBAAkB,KAAK,MAAM,iBAAiB,aAAgB,KAC3H,MAAO,CACL,SAAU,aAAA,uBAAuB,OAAQ,cAAe,KAAK,oBAC7D,WAAY,IAAI,WAAW,aAAa,CACtC,QAAS,KAAK,MAAM,YACpB,UAAS,IAAE,KAAK,MAAM,aAAS,MAAA,KAAA,OAAA,OAAA,GAAE,MACjC,QAAO,IAAE,KAAK,MAAM,WAAO,MAAA,KAAA,OAAA,OAAA,GAAE,YAC7B,sBAAuB,KAAK,MAAM,sBAClC,qBAAsB,uBAExB,eAAgB,QAIZ,aAAW,CACjB,GAAI,YACJ,MAAI,MAAK,qBAAuB,IAAI,mBAAmB,iBACrD,WAAa,CAAC,oBACL,KAAK,qBAAuB,IAAI,mBAAmB,SAC5D,YAAa,CACX,mBACA,iBACA,kBACA,yBAIG,CAAC,GAAI,KAAI,gBAAgB,CAC9B,UAAW,CACT,OAAA,MAAM,GAAG,MAAM,UAAU,CACvB,QAAS,OACT,SAAU,MACV,aAAc,KAAK,MAAM,eAG7B,QAAS,eAjEf,QAAA,gBAAA,uIAC0B,gBAAA,+BAA2D,CACjF,IAAI,mBAAmB,iBACvB,IAAI,mBAAmB",
  "names": []
}
