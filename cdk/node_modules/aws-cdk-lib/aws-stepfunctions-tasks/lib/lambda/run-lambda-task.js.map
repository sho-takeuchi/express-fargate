{
  "version": 3,
  "sources": ["run-lambda-task.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as lambda from '../../../aws-lambda';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { getResourceArn } from '../resource-arn-suffix';\n\n                                                                            \nexport interface RunLambdaTaskProps {\n                                                                                                                                         \n  readonly payload?: sfn.TaskInput;\n\nn  readonly integrationPattern?: sfn.ServiceIntegrationPattern;\n\n                                                                                          \n  readonly invocationType?: InvocationType;\n\n                                                                                       \n  readonly clientContext?: string;\n\n                                                                                                 \n  readonly qualifier?: string;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                   \nexport class RunLambdaTask implements sfn.IStepFunctionsTask {\n  private readonly integrationPattern: sfn.ServiceIntegrationPattern;\n\n  constructor(private readonly lambdaFunction: lambda.IFunction, private readonly props: RunLambdaTaskProps = {}) {\n    this.integrationPattern = props.integrationPattern || sfn.ServiceIntegrationPattern.FIRE_AND_FORGET;\n\n    const supportedPatterns = [\n      sfn.ServiceIntegrationPattern.FIRE_AND_FORGET,\n      sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    ];\n\n    if (!supportedPatterns.includes(this.integrationPattern)) {\n      throw new Error(`Invalid Service Integration Pattern: ${this.integrationPattern} is not supported to call Lambda.`);\n    }\n\n    if (this.integrationPattern === sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN\n        && !sfn.FieldUtils.containsTaskToken(props.payload)) {\n      throw new Error('Task Token is missing in payload (pass JsonPath.taskToken somewhere in payload)');\n    }\n  }\n\n  public bind(_task: sfn.Task): sfn.StepFunctionsTaskConfig {\n    return {\n      resourceArn: getResourceArn('lambda', 'invoke', this.integrationPattern),\n      policyStatements: [new iam.PolicyStatement({\n        resources: [this.lambdaFunction.functionArn],\n        actions: ['lambda:InvokeFunction'],\n      })],\n      metricPrefixSingular: 'LambdaFunction',\n      metricPrefixPlural: 'LambdaFunctions',\n      metricDimensions: { LambdaFunctionArn: this.lambdaFunction.functionArn },\n      parameters: {\n        FunctionName: this.lambdaFunction.functionName,\n        Payload: this.props.payload ? this.props.payload.value : sfn.TaskInput.fromJsonPathAt('$').value,\n        InvocationType: this.props.invocationType,\n        ClientContext: this.props.clientContext,\n        Qualifier: this.props.qualifier,\n      },\n    };\n  }\n}\n\n                                                                                \nexport enum InvocationType {\n                                                                                                                    \n  REQUEST_RESPONSE = 'RequestResponse',\n\n                                                                                                                                                                                                  \n  EVENT = 'Event',\n\n                                                                                                                   \n  DRY_RUN = 'DryRun'\n}\n"],
  "mappings": "gLAAA,IAAA,QAAA,oBAEA,IAAA,QAAA,8BACA,sBAAA,QAAA,0BAqBA,mBAA0B,CAGxB,YAA6B,eAAmD,MAA4B,GAAE,CAQ5G,GAR2B,KAAA,eAAA,eAAmD,KAAA,MAAA,MAC9E,KAAK,mBAAqB,MAAM,oBAAsB,IAAI,0BAA0B,gBAOhF,CAAC,AALqB,CACxB,IAAI,0BAA0B,gBAC9B,IAAI,0BAA0B,qBAGT,SAAS,KAAK,oBACnC,KAAM,IAAI,OAAM,wCAAwC,KAAK,uDAG/D,GAAI,KAAK,qBAAuB,IAAI,0BAA0B,qBACvD,CAAC,IAAI,WAAW,kBAAkB,MAAM,SAC7C,KAAM,IAAI,OAAM,mFAIb,KAAK,MAAe,CACzB,MAAO,CACL,YAAa,sBAAA,eAAe,SAAU,SAAU,KAAK,oBACrD,iBAAkB,CAAC,GAAI,KAAI,gBAAgB,CACzC,UAAW,CAAC,KAAK,eAAe,aAChC,QAAS,CAAC,4BAEZ,qBAAsB,iBACtB,mBAAoB,kBACpB,iBAAkB,CAAE,kBAAmB,KAAK,eAAe,aAC3D,WAAY,CACV,aAAc,KAAK,eAAe,aAClC,QAAS,KAAK,MAAM,QAAU,KAAK,MAAM,QAAQ,MAAQ,IAAI,UAAU,eAAe,KAAK,MAC3F,eAAgB,KAAK,MAAM,eAC3B,cAAe,KAAK,MAAM,cAC1B,UAAW,KAAK,MAAM,aApC9B,QAAA,cAAA,iIA2CA,GAAY,gBAAZ,AAAA,UAAY,gBAAc,CAExB,gBAAA,iBAAA,kBAGA,gBAAA,MAAA,QAGA,gBAAA,QAAA,WARU,eAAA,QAAA,gBAAA,SAAA,eAAc",
  "names": []
}
