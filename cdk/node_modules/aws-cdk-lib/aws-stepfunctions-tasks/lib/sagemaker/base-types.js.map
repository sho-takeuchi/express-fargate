{
  "version": 3,
  "sources": ["base-types.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as ecr from '../../../aws-ecr';\nimport { DockerImageAsset, DockerImageAssetProps } from '../../../aws-ecr-assets';\nimport * as iam from '../../../aws-iam';\nimport * as kms from '../../../aws-kms';\nimport * as s3 from '../../../aws-s3';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Duration, Size } from '../../../core';\nimport { Construct } from 'constructs';\n\n                                                                        \nexport interface ISageMakerTask extends iam.IGrantable {}\n\n                                                                         \nexport interface AlgorithmSpecification {\n\n                                                                                                                                                                                                                                                                                                                     \n  readonly algorithmName?: string;\n\n                                                                                                                                                                               \n  readonly metricDefinitions?: MetricDefinition[];\n\n                                                                                                                                          \n  readonly trainingImage?: DockerImage;\n\n                                                                                       \n  readonly trainingInputMode?: InputMode;\n}\n\n                                                                                                                \nexport interface Channel {\n\n                                    \n  readonly channelName: string;\n\n                                                                                          \n  readonly compressionType?: CompressionType;\n\n                                                                     \n  readonly contentType?: string;\n\n                                              \n  readonly dataSource: DataSource;\n\n                                                                                                    \n  readonly inputMode?: InputMode;\n\n                                                                                                                                                                                                                                                                                                                                                        \n  readonly recordWrapperType?: RecordWrapperType;\n\n                                                                                             \n  readonly shuffleConfig?: ShuffleConfig;\n}\n\n                                                                             \nexport interface ShuffleConfig {\n                                                \n  readonly seed: number;\n}\n\n                                           \nexport interface DataSource {\n                                                                                  \n  readonly s3DataSource: S3DataSource;\n}\n\n                                                                                                                                         \nexport interface S3DataSource {\n                                                                                                                                                          \n  readonly attributeNames?: string[];\n\n                                                                    \n  readonly s3DataDistributionType?: S3DataDistributionType;\n\n                                                          \n  readonly s3DataType?: S3DataType;\n\n                       \n  readonly s3Location: S3Location;\n}\n\n                                                                                          \nexport interface OutputDataConfig {\n                                                                                                                                                                                                                                                           \n  readonly encryptionKey?: kms.IKey;\n\n                                                                                                     \n  readonly s3OutputLocation: S3Location;\n}\n\n                                                                                                                                                         \nexport interface StoppingCondition {\n                                                                                                                                  \n  readonly maxRuntime?: Duration;\n}\n\n                                                                                                                 \nexport interface ResourceConfig {\n\n                                                                                          \n  readonly instanceCount: number;\n\nn  readonly instanceType: ec2.InstanceType;\n\n                                                                                                                                                                                                                                                                \n  readonly volumeEncryptionKey?: kms.IKey;\n\n                                                                                                               \n  readonly volumeSize: Size;\n}\n\n                                                                                               \nexport interface VpcConfig {\n                    \n  readonly vpc: ec2.IVpc;\n\n                                                                               \n  readonly subnets?: ec2.SubnetSelection;\n}\n\n                                                                                             \nexport interface MetricDefinition {\n\n                                    \n  readonly name: string;\n\n                                                                                                                \n  readonly regex: string;\n}\n\n                                                                             \nexport interface S3LocationConfig {\n\n                                                              \n  readonly uri: string;\n}\n\n                                               \nexport abstract class S3Location {\n                                                                                                                                                                                                                           \n  public static fromBucket(bucket: s3.IBucket, keyPrefix: string): S3Location {\n    return new StandardS3Location({ bucket, keyPrefix, uri: bucket.urlForObject(keyPrefix) });\n  }\n\n                                                                                                                                                                                                                                                                                                                               \n  public static fromJsonExpression(expression: string): S3Location {\n    return new StandardS3Location({ uri: sfn.JsonPath.stringAt(expression) });\n  }\n\n                                                                             \n  public abstract bind(task: ISageMakerTask, opts: S3LocationBindOptions): S3LocationConfig;\n}\n\n                                                 \nexport interface S3LocationBindOptions {\n                                                                             \n  readonly forReading?: boolean;\n\n                                                                           \n  readonly forWriting?: boolean;\n}\n\n                                                     \nexport interface DockerImageConfig {\n                                                             \n  readonly imageUri: string;\n}\n\n                                               \nexport abstract class DockerImage {\n                                                                                                                                                                                  \n  public static fromEcrRepository(repository: ecr.IRepository, tag: string = 'latest'): DockerImage {\n    return new StandardDockerImage({ repository, imageUri: repository.repositoryUriForTag(tag) });\n  }\n\n                                                                                                                                                                                                                                                                                                      \n  public static fromJsonExpression(expression: string, allowAnyEcrImagePull = true): DockerImage {\n    return new StandardDockerImage({ imageUri: expression, allowAnyEcrImagePull });\n  }\n\n                                                                                                                                                                          \n  public static fromRegistry(imageUri: string): DockerImage {\n    return new StandardDockerImage({ imageUri });\n  }\n\n                                                                                                                                                                                                                                                                               \n  public static fromAsset(scope: Construct, id: string, props: DockerImageAssetProps): DockerImage {\n    const asset = new DockerImageAsset(scope, id, props);\n    return new StandardDockerImage({ repository: asset.repository, imageUri: asset.imageUri });\n  }\n\n                                                                   \n  public abstract bind(task: ISageMakerTask): DockerImageConfig;\n}\n\n                           \nexport enum S3DataType {\n                                        \n  MANIFEST_FILE = 'ManifestFile',\n\n                                    \n  S3_PREFIX = 'S3Prefix',\n\n                                                  \n  AUGMENTED_MANIFEST_FILE = 'AugmentedManifestFile'\n}\n\n                                        \nexport enum S3DataDistributionType {\n                                                           \n  FULLY_REPLICATED = 'FullyReplicated',\n\n                                                         \n  SHARDED_BY_S3_KEY = 'ShardedByS3Key'\n}\n\n                                                  \nexport enum RecordWrapperType {\n                                         \n  NONE = 'None',\n\n                                             \n  RECORD_IO = 'RecordIO'\n}\n\n                                                      \nexport enum InputMode {\n                          \n  PIPE = 'Pipe',\n\n                           \n  FILE = 'File'\n}\n\n                                           \nexport enum CompressionType {\n                                      \n  NONE = 'None',\n\n                                      \n  GZIP = 'Gzip'\n}\n\n//\n// Create Transform Job types\n//\n\n                                                                                                             \nexport interface ModelClientOptions {\n\n                                                                                                         \n  readonly invocationsMaxRetries?: number;\n\n                                                                                                       \n  readonly invocationsTimeout?: Duration;\n}\n\n                                                                                       \nexport interface TransformInput {\n\n                                                                                    \n  readonly compressionType?: CompressionType;\n\n                                                                                                        \n  readonly contentType?: string;\n\n                                                \n  readonly transformDataSource: TransformDataSource;\n\n                                                                                                                    \n  readonly splitType?: SplitType;\n}\n\n                                                                       \nexport interface TransformDataSource {\n\n                                              \n  readonly s3DataSource: TransformS3DataSource;\n}\n\n                                           \nexport interface TransformS3DataSource {\n\n                                                           \n  readonly s3DataType?: S3DataType;\n\n                                                                   \n  readonly s3Uri: string;\n}\n\n                                                                                                     \nexport interface TransformOutput {\n\n                                                                                     \n  readonly accept?: string;\n\n                                                                                                                          \n  readonly assembleWith?: AssembleWith;\n\n                                                                                                                                                                                                                  \n  readonly encryptionKey?: kms.IKey;\n\n                                                                                                   \n  readonly s3OutputPath: string;\n}\n\n                                                         \nexport interface TransformResources {\n\n                                                                           \n  readonly instanceCount: number;\n\n                                                                \n  readonly instanceType: ec2.InstanceType;\n\n                                                                                                                                                               \n  readonly volumeEncryptionKey?: kms.IKey;\n}\n\n                                                                                                                                                       \nexport interface ContainerDefinitionOptions {\n                                                                                                                              \n  readonly image?: DockerImage;\n                                                                                                           \n  readonly environmentVariables?: sfn.TaskInput;\n                                                                                                                                  \n  readonly modelPackageName?: string;\n                                                                                                   \n  readonly mode?: Mode;\n                                                                                                                                                                                                                                                                                                  \n  readonly containerHostName?: string;\n                                                                                                                                                                                                                                                                                                                                  \n  readonly modelS3Location?: S3Location;\n}\n\n                                                                                                                                                                  \nexport class ContainerDefinition implements IContainerDefinition {\n\n  constructor(private readonly options: ContainerDefinitionOptions) {}\n\n                                                                                      \n  public bind(task: ISageMakerTask): ContainerDefinitionConfig {\n    return {\n      parameters: {\n        ContainerHostname: this.options.containerHostName,\n        Image: this.options.image?.bind(task).imageUri,\n        Mode: this.options.mode,\n        ModelDataUrl: this.options.modelS3Location?.bind(task, { forReading: true }).uri,\n        ModelPackageName: this.options.modelPackageName,\n        Environment: this.options.environmentVariables?.value,\n      },\n    };\n  }\n}\n\n                                                                                                                                                                  \nexport interface IContainerDefinition {\n                                                                                 \n  bind(task: ISageMakerTask): ContainerDefinitionConfig;\n}\n\n                                                            \nexport interface ContainerDefinitionConfig {\n                                                                                                                    \n  readonly parameters?: { [key: string]: any };\n}\n\n                                                           \nexport enum Mode {\n                                               \n  SINGLE_MODEL = 'SingleModel',\n                                                                                                                                          \n  MULTI_MODEL = 'MultiModel',\n}\n\n                                                                                                                                                                                                \nexport interface ProductionVariant {\n                                                                                                                             \n  readonly acceleratorType?: AcceleratorType;\n                                                                                \n  readonly initialInstanceCount?: number;\n                                                                                                                                                         \n  readonly initialVariantWeight?: number;\n                                             \n  readonly instanceType: ec2.InstanceType;\n                                                    \n  readonly variantName: string;\n                                                                                                                          \n  readonly modelName: string;\n}\n\n                                                                                                                               \nexport class AcceleratorClass {\n                                                             \n  public static readonly EIA1 = AcceleratorClass.of('eia1');\n                                                             \n  public static readonly EIA2 = AcceleratorClass.of('eia2');\n                                                                                                     \n  public static of(version: string) { return new AcceleratorClass(version); }\n  /**\n   * @param version - Elastic Inference accelerator generation\n   */\n  private constructor(public readonly version: string) { }\n}\n\n                                                                                                                                                                                                                              \nexport class AcceleratorType {\n                                                                                              \n  public static of(acceleratorClass: AcceleratorClass, instanceSize: ec2.InstanceSize) {\n    return new AcceleratorType(`ml.${acceleratorClass}.${instanceSize}`);\n  }\n\n  constructor(private readonly instanceTypeIdentifier: string) {\n  }\n\n                                                               \n  public toString(): string {\n    return this.instanceTypeIdentifier;\n  }\n}\n\n                                                                                                       \nexport enum BatchStrategy {\n\n                                                       \n  MULTI_RECORD = 'MultiRecord',\n\n                                                                       \n  SINGLE_RECORD = 'SingleRecord'\n}\n\n                                                                                         \nexport enum SplitType {\n\n                                                \n  NONE = 'None',\n\n                                                               \n  LINE = 'Line',\n\n                                                   \n  RECORD_IO = 'RecordIO',\n\n                                                        \n  TF_RECORD = 'TFRecord'\n}\n\n                                                                                     \nexport enum AssembleWith {\n\n                                                          \n  NONE = 'None',\n\n                                                                                \n  LINE = 'Line'\n\n}\n\nclass StandardDockerImage extends DockerImage {\n  private readonly allowAnyEcrImagePull: boolean;\n  private readonly imageUri: string;\n  private readonly repository?: ecr.IRepository;\n\n  constructor(opts: { allowAnyEcrImagePull?: boolean, imageUri: string, repository?: ecr.IRepository }) {\n    super();\n\n    this.allowAnyEcrImagePull = !!opts.allowAnyEcrImagePull;\n    this.imageUri = opts.imageUri;\n    this.repository = opts.repository;\n  }\n\n  public bind(task: ISageMakerTask): DockerImageConfig {\n    if (this.repository) {\n      this.repository.grantPull(task);\n    }\n    if (this.allowAnyEcrImagePull) {\n      task.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({\n        actions: [\n          'ecr:BatchCheckLayerAvailability',\n          'ecr:GetDownloadUrlForLayer',\n          'ecr:BatchGetImage',\n        ],\n        resources: ['*'],\n      }));\n    }\n    return {\n      imageUri: this.imageUri,\n    };\n  }\n}\n\nclass StandardS3Location extends S3Location {\n  private readonly bucket?: s3.IBucket;\n  private readonly keyGlob: string;\n  private readonly uri: string;\n\n  constructor(opts: { bucket?: s3.IBucket, keyPrefix?: string, uri: string }) {\n    super();\n    this.bucket = opts.bucket;\n    this.keyGlob = `${opts.keyPrefix || ''}*`;\n    this.uri = opts.uri;\n  }\n\n  public bind(task: ISageMakerTask, opts: S3LocationBindOptions): S3LocationConfig {\n    if (this.bucket) {\n      if (opts.forReading) {\n        this.bucket.grantRead(task, this.keyGlob);\n      }\n      if (opts.forWriting) {\n        this.bucket.grantWrite(task, this.keyGlob);\n      }\n    } else {\n      const actions = new Array<string>();\n      if (opts.forReading) {\n        actions.push('s3:GetObject', 's3:ListBucket');\n      }\n      if (opts.forWriting) {\n        actions.push('s3:PutObject');\n      }\n      task.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({ actions, resources: ['*'] }));\n    }\n    return { uri: this.uri };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
