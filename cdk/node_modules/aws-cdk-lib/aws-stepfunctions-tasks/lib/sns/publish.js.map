{
  "version": 3,
  "sources": ["publish.ts"],
  "sourcesContent": ["import * as iam from '../../../aws-iam';\nimport * as sns from '../../../aws-sns';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Token } from '../../../core';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\n\n                                                                                                                                                                           \nexport enum MessageAttributeDataType {\n                                                               \n  STRING = 'String',\n\n                                                                                                                                                                    \n  STRING_ARRAY = 'String.Array',\n\n                                                                                                                                                                                                        \n  NUMBER = 'Number',\n\n                                                                                                                                                                                     \n  BINARY = 'Binary'\n}\n\n                                                                                                                                         \nexport interface MessageAttribute {\n                                           \n  readonly value: any;\n\n                                                                                                                                                                                                                                                \n  readonly dataType?: MessageAttributeDataType\n}\n\n                                                              \nexport interface SnsPublishProps extends sfn.TaskStateBaseProps {\n\n                                                             \n  readonly topic: sns.ITopic;\n\n                                                                                                                                                                                                                        \n  readonly message: sfn.TaskInput;\n\n                                                                                                                                                                                                                                                                                    \n  readonly messageAttributes?: { [key: string]: MessageAttribute };\n\nn  readonly messagePerSubscriptionType?: boolean;\n\n                                                                                                                                                                                                                                                 \n  readonly subject?: string;\n}\n\n                                                                     \nexport class SnsPublish extends sfn.TaskStateBase {\n\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n    sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  ];\n\n  protected readonly taskMetrics: sfn.TaskMetricsConfig | undefined;\n  protected readonly taskPolicies: iam.PolicyStatement[] | undefined;\n\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  constructor(scope: Construct, id: string, private readonly props: SnsPublishProps) {\n    super(scope, id, props);\n    this.integrationPattern = props.integrationPattern ?? sfn.IntegrationPattern.REQUEST_RESPONSE;\n\n    validatePatternSupported(this.integrationPattern, SnsPublish.SUPPORTED_INTEGRATION_PATTERNS);\n\n    if (this.integrationPattern === sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN) {\n      if (!sfn.FieldUtils.containsTaskToken(props.message)) {\n        throw new Error('Task Token is required in `message` Use JsonPath.taskToken to set the token.');\n      }\n    }\n\n    this.taskPolicies = [\n      new iam.PolicyStatement({\n        actions: ['sns:Publish'],\n        resources: [this.props.topic.topicArn],\n      }),\n    ];\n  }\n\n  /**\n   * Provides the SNS Publish service integration task configuration\n   */\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('sns', 'publish', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject({\n        TopicArn: this.props.topic.topicArn,\n        Message: this.props.message.value,\n        MessageStructure: this.props.messagePerSubscriptionType ? 'json' : undefined,\n        MessageAttributes: renderMessageAttributes(this.props.messageAttributes),\n        Subject: this.props.subject,\n      }),\n    };\n  }\n}\n\ninterface MessageAttributeValue {\n  DataType: string;\n  StringValue?: string;\n  BinaryValue?: string;\n}\n\nfunction renderMessageAttributes(attributes?: { [key: string]: MessageAttribute }): any {\n  if (attributes === undefined) { return undefined; }\n  const renderedAttributes: { [key: string]: MessageAttributeValue } = {};\n  Object.entries(attributes).map(([key, val]) => {\n    renderedAttributes[key] = renderMessageAttributeValue(val);\n  });\n  return sfn.TaskInput.fromObject(renderedAttributes).value;\n}\n\nfunction renderMessageAttributeValue(attribute: MessageAttribute): MessageAttributeValue {\n  const dataType = attribute.dataType;\n  if (attribute.value instanceof sfn.TaskInput) {\n    return {\n      DataType: dataType ?? MessageAttributeDataType.STRING,\n      StringValue: dataType !== MessageAttributeDataType.BINARY ? attribute.value.value : undefined,\n      BinaryValue: dataType === MessageAttributeDataType.BINARY ? attribute.value.value : undefined,\n    };\n  }\n\n  if (dataType === MessageAttributeDataType.BINARY) {\n    return { DataType: dataType, BinaryValue: `${attribute.value}` };\n  }\n\n  if (Token.isUnresolved(attribute.value)) {\n    return { DataType: dataType ?? MessageAttributeDataType.STRING, StringValue: attribute.value };\n  }\n\n  validateMessageAttribute(attribute);\n  if (Array.isArray(attribute.value)) {\n    return { DataType: MessageAttributeDataType.STRING_ARRAY, StringValue: JSON.stringify(attribute.value) };\n  }\n  const value = attribute.value;\n  if (typeof value === 'number') {\n    return { DataType: MessageAttributeDataType.NUMBER, StringValue: `${value}` };\n  } else {\n    return { DataType: MessageAttributeDataType.STRING, StringValue: `${value}` };\n  }\n}\n\nfunction validateMessageAttribute(attribute: MessageAttribute): void {\n  const dataType = attribute.dataType;\n  const value = attribute.value;\n  if (dataType === undefined) {\n    return;\n  }\n  if (Array.isArray(value)) {\n    if (dataType !== MessageAttributeDataType.STRING_ARRAY) {\n      throw new Error(`Requested SNS message attribute type was ${dataType} but ${value} was of type Array`);\n    }\n    const validArrayTypes = ['string', 'boolean', 'number'];\n    value.forEach((v) => {\n      if (v !== null || !validArrayTypes.includes(typeof v)) {\n        throw new Error(`Requested SNS message attribute type was ${typeof value} but Array values must be one of ${validArrayTypes}`);\n      }\n    });\n    return;\n  }\n  const error = new Error(`Requested SNS message attribute type was ${dataType} but ${value} was of type ${typeof value}`);\n  switch (typeof value) {\n    case 'string':\n      // trust the user or will default to string\n      if (sfn.JsonPath.isEncodedJsonPath(attribute.value)) {\n        return;\n      }\n      if (dataType === MessageAttributeDataType.STRING ||\n        dataType === MessageAttributeDataType.BINARY) {\n        return;\n      }\n      throw error;\n    case 'number':\n      if (dataType === MessageAttributeDataType.NUMBER) { return; }\n      throw error;\n    case 'boolean':\n      if (dataType === MessageAttributeDataType.STRING) { return; }\n      throw error;\n    default:\n      throw error;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
