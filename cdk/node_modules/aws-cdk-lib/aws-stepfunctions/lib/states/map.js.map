{
  "version": 3,
  "sources": ["map.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { Chain } from '../chain';\nimport { FieldUtils } from '../fields';\nimport { StateGraph } from '../state-graph';\nimport { CatchProps, IChainable, INextable, RetryProps } from '../types';\nimport { StateType } from './private/state-type';\nimport { renderJsonPath, State } from './state';\n\n                                              \nexport interface MapProps {\n                                                                                     \n  readonly comment?: string;\n\n                                                                                                                                                                                                                                                   \n  readonly inputPath?: string;\n\n                                                                                                                                                                                                                                                     \n  readonly outputPath?: string;\n\n                                                                                                                                                                                                                                \n  readonly resultPath?: string;\n\n                                                                                             \n  readonly itemsPath?: string;\n\n                                                                                                     \n  readonly parameters?: { [key: string]: any };\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n  readonly resultSelector?: { [key: string]: any };\n\n                                                                                                                                                    \n  readonly maxConcurrency?: number;\n}\n\n/**\n * Returns true if the value passed is a positive integer\n * @param value the value ti validate\n */\n\nexport const isPositiveInteger = (value: number) => {\n  const isFloat = Math.floor(value) !== value;\n\n  const isNotPositiveInteger = value < 0 || value > Number.MAX_SAFE_INTEGER;\n\n  return !isFloat && !isNotPositiveInteger;\n};\n\nnexport class Map extends State implements INextable {\n  public readonly endStates: INextable[];\n\n  private readonly maxConcurrency: number | undefined;\n  private readonly itemsPath?: string;\n\n  constructor(scope: Construct, id: string, props: MapProps = {}) {\n    super(scope, id, props);\n    this.endStates = [this];\n    this.maxConcurrency = props.maxConcurrency;\n    this.itemsPath = props.itemsPath;\n  }\n\n                                                                                                                                                           \n  public addRetry(props: RetryProps = {}): Map {\n    super._addRetry(props);\n    return this;\n  }\n\n                                                                                                                                                                                                  \n  public addCatch(handler: IChainable, props: CatchProps = {}): Map {\n    super._addCatch(handler.startState, props);\n    return this;\n  }\n\n                                                               \n  public next(next: IChainable): Chain {\n    super.makeNext(next.startState);\n    return Chain.sequence(this, next);\n  }\n\n                                                     \n  public iterator(iterator: IChainable): Map {\n    const name = `Map ${this.stateId} Iterator`;\n    super.addIterator(new StateGraph(iterator.startState, name));\n    return this;\n  }\n\n                                                                        \n  public toStateJson(): object {\n    return {\n      Type: StateType.MAP,\n      Comment: this.comment,\n      ResultPath: renderJsonPath(this.resultPath),\n      ...this.renderNextEnd(),\n      ...this.renderInputOutput(),\n      ...this.renderParameters(),\n      ...this.renderResultSelector(),\n      ...this.renderRetryCatch(),\n      ...this.renderIterator(),\n      ...this.renderItemsPath(),\n      MaxConcurrency: this.maxConcurrency,\n    };\n  }\n\n                                    \n  protected validateState(): string[] {\n    const errors: string[] = [];\n\n    if (this.iteration === undefined) {\n      errors.push('Map state must have a non-empty iterator');\n    }\n\n    if (this.maxConcurrency !== undefined && !isPositiveInteger(this.maxConcurrency)) {\n      errors.push('maxConcurrency has to be a positive integer');\n    }\n\n    return errors;\n  }\n\n  private renderItemsPath(): any {\n    return {\n      ItemsPath: renderJsonPath(this.itemsPath),\n    };\n  }\n\n  /**\n   * Render Parameters in ASL JSON format\n   */\n  private renderParameters(): any {\n    return FieldUtils.renderObject({\n      Parameters: this.parameters,\n    });\n  }\n}\n"],
  "mappings": "uOACA,QAAA,QAAA,YACA,SAAA,QAAA,aACA,cAAA,QAAA,kBAEA,aAAA,QAAA,wBACA,QAAA,QAAA,WAkCa,QAAA,kBAAoB,AAAC,OAAiB,CACjD,KAAM,SAAU,KAAK,MAAM,SAAW,MAEhC,qBAAuB,MAAQ,GAAK,MAAQ,OAAO,iBAEzD,MAAO,CAAC,SAAW,CAAC,sBAItB,iBAAyB,SAAA,KAAK,CAM5B,YAAY,MAAkB,GAAY,MAAkB,GAAE,CAC5D,MAAM,MAAO,GAAI,6EACjB,KAAK,UAAY,CAAC,MAClB,KAAK,eAAiB,MAAM,eAC5B,KAAK,UAAY,MAAM,UAIlB,SAAS,MAAoB,GAAE,gFACpC,MAAM,UAAU,OACT,KAIF,SAAS,QAAqB,MAAoB,GAAE,0JACzD,MAAM,UAAU,QAAQ,WAAY,OAC7B,KAIF,KAAK,KAAgB,+EAC1B,MAAM,SAAS,KAAK,YACb,QAAA,MAAM,SAAS,KAAM,MAIvB,SAAS,SAAoB,4EAClC,KAAM,MAAO,OAAO,KAAK,mBACzB,aAAM,YAAY,GAAI,eAAA,WAAW,SAAS,WAAY,OAC/C,KAIF,aAAW,CAChB,MAAO,CACL,KAAM,aAAA,UAAU,IAChB,QAAS,KAAK,QACd,WAAY,QAAA,eAAe,KAAK,eAC7B,KAAK,mBACL,KAAK,uBACL,KAAK,sBACL,KAAK,0BACL,KAAK,sBACL,KAAK,oBACL,KAAK,kBACR,eAAgB,KAAK,gBAKf,eAAa,CACrB,KAAM,QAAmB,GAEzB,MAAI,MAAK,YAAc,QACrB,OAAO,KAAK,4CAGV,KAAK,iBAAmB,QAAa,CAAC,QAAA,kBAAkB,KAAK,iBAC/D,OAAO,KAAK,+CAGP,OAGD,iBAAe,CACrB,MAAO,CACL,UAAW,QAAA,eAAe,KAAK,YAO3B,kBAAgB,CACtB,MAAO,UAAA,WAAW,aAAa,CAC7B,WAAY,KAAK,cAjFvB,QAAA,IAAA",
  "names": []
}
