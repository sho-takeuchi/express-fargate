{
  "version": 3,
  "sources": ["parallel.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { Chain } from '../chain';\nimport { StateGraph } from '../state-graph';\nimport { CatchProps, IChainable, INextable, RetryProps } from '../types';\nimport { StateType } from './private/state-type';\nimport { renderJsonPath, State } from './state';\n\n                                                   \nexport interface ParallelProps {\n                                                                                     \n  readonly comment?: string;\n\n                                                                                                                                                                                                                                                   \n  readonly inputPath?: string;\n\n                                                                                                                                                                                                                                                     \n  readonly outputPath?: string;\n\n                                                                                                                                                                                                                                \n  readonly resultPath?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n  readonly resultSelector?: { [key: string]: any };\n}\n\n                                                                                                                                                                                                                                          \nexport class Parallel extends State implements INextable {\n  public readonly endStates: INextable[];\n  private readonly _branches: IChainable[] = [];\n\n  constructor(scope: Construct, id: string, props: ParallelProps = {}) {\n    super(scope, id, props);\n\n    this.endStates = [this];\n  }\n\n                                                                                                                                                           \n  public addRetry(props: RetryProps = {}): Parallel {\n    super._addRetry(props);\n    return this;\n  }\n\n                                                                                                                                                                                                  \n  public addCatch(handler: IChainable, props: CatchProps = {}): Parallel {\n    super._addCatch(handler.startState, props);\n    return this;\n  }\n\n                                                               \n  public next(next: IChainable): Chain {\n    super.makeNext(next.startState);\n    return Chain.sequence(this, next);\n  }\n\n                                                               \n  public branch(...branches: IChainable[]): Parallel {\n    // Store branches for late-bound stategraph creation when we call bindToGraph.\n    this._branches.push(...branches);\n    return this;\n  }\n\n                                                                                                                                                    \n  public bindToGraph(graph: StateGraph) {\n    for (const branch of this._branches) {\n      const name = `Parallel '${this.stateId}' branch ${this.branches.length + 1}`;\n      super.addBranch(new StateGraph(branch.startState, name));\n    }\n    this._branches.splice(0, this._branches.length);\n    return super.bindToGraph(graph);\n  }\n\n                                                                        \n  public toStateJson(): object {\n    return {\n      Type: StateType.PARALLEL,\n      Comment: this.comment,\n      ResultPath: renderJsonPath(this.resultPath),\n      ...this.renderNextEnd(),\n      ...this.renderInputOutput(),\n      ...this.renderRetryCatch(),\n      ...this.renderBranches(),\n      ...this.renderResultSelector(),\n    };\n  }\n\n                                    \n  protected validateState(): string[] {\n    if (this.branches.length === 0) {\n      return ['Parallel must have at least one branch'];\n    }\n    return [];\n  }\n}\n"],
  "mappings": "kNACA,QAAA,QAAA,YACA,cAAA,QAAA,kBAEA,aAAA,QAAA,wBACA,QAAA,QAAA,WAqBA,sBAA8B,SAAA,KAAK,CAIjC,YAAY,MAAkB,GAAY,MAAuB,GAAE,CACjE,MAAM,MAAO,GAAI,OAHF,KAAA,UAA0B,8EAKzC,KAAK,UAAY,CAAC,MAIb,SAAS,MAAoB,GAAE,gFACpC,MAAM,UAAU,OACT,KAIF,SAAS,QAAqB,MAAoB,GAAE,0JACzD,MAAM,UAAU,QAAQ,WAAY,OAC7B,KAIF,KAAK,KAAgB,+EAC1B,MAAM,SAAS,KAAK,YACb,QAAA,MAAM,SAAS,KAAM,MAIvB,UAAU,SAAsB,mFAErC,KAAK,UAAU,KAAK,GAAG,UAChB,KAIF,YAAY,MAAiB,yEAClC,SAAW,UAAU,MAAK,UAAW,CACnC,KAAM,MAAO,aAAa,KAAK,mBAAmB,KAAK,SAAS,OAAS,IACzE,MAAM,UAAU,GAAI,eAAA,WAAW,OAAO,WAAY,OAEpD,YAAK,UAAU,OAAO,EAAG,KAAK,UAAU,QACjC,MAAM,YAAY,OAIpB,aAAW,CAChB,MAAO,CACL,KAAM,aAAA,UAAU,SAChB,QAAS,KAAK,QACd,WAAY,QAAA,eAAe,KAAK,eAC7B,KAAK,mBACL,KAAK,uBACL,KAAK,sBACL,KAAK,oBACL,KAAK,wBAKF,eAAa,CACrB,MAAI,MAAK,SAAS,SAAW,EACpB,CAAC,0CAEH,IAhEX,QAAA,SAAA",
  "names": []
}
