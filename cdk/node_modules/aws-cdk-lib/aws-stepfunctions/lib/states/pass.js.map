{
  "version": 3,
  "sources": ["pass.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { Chain } from '../chain';\nimport { FieldUtils } from '../fields';\nimport { IChainable, INextable } from '../types';\nimport { StateType } from './private/state-type';\nimport { renderJsonPath, State } from './state';\n\n                                         \nexport class Result {\n                                                        \n  public static fromString(value: string): Result {\n    return new Result(value);\n  }\n\n                                                        \n  public static fromNumber(value: number): Result {\n    return new Result(value);\n  }\n\n                                                         \n  public static fromBoolean(value: boolean): Result {\n    return new Result(value);\n  }\n\n                                                         \n  public static fromObject(value: {[key: string]: any}): Result {\n    return new Result(value);\n  }\n\n                                                        \n  public static fromArray(value: any[]): Result {\n    return new Result(value);\n  }\n\n                                                               \n  protected constructor(public readonly value: any) {\n  }\n}\n\n                                               \nexport interface PassProps {\n                                                                                     \n  readonly comment?: string;\n\n                                                                                                                                                                                                                                                   \n  readonly inputPath?: string;\n\n                                                                                                                                                                                                                                                     \n  readonly outputPath?: string;\n\n                                                                                                                                                                                                                                \n  readonly resultPath?: string;\n\n                                                                                                                                                                              \n  readonly result?: Result;\n\n                                                                                                                                                                                                                                                                                                               \n  readonly parameters?: { [name: string]: any };\n}\n\n                                                                                                                        \nexport class Pass extends State implements INextable {\n  public readonly endStates: INextable[];\n\n  private readonly result?: Result;\n\n  constructor(scope: Construct, id: string, props: PassProps = {}) {\n    super(scope, id, props);\n\n    this.result = props.result;\n    this.endStates = [this];\n  }\n\n                                                               \n  public next(next: IChainable): Chain {\n    super.makeNext(next.startState);\n    return Chain.sequence(this, next);\n  }\n\n                                                                        \n  public toStateJson(): object {\n    return {\n      Type: StateType.PASS,\n      Comment: this.comment,\n      Result: this.result?.value,\n      ResultPath: renderJsonPath(this.resultPath),\n      ...this.renderInputOutput(),\n      ...this.renderParameters(),\n      ...this.renderNextEnd(),\n    };\n  }\n\n  /**\n   * Render Parameters in ASL JSON format\n   */\n  private renderParameters(): any {\n    return FieldUtils.renderObject({\n      Parameters: this.parameters,\n    });\n  }\n}\n"],
  "mappings": "gOACA,QAAA,QAAA,YACA,SAAA,QAAA,aAEA,aAAA,QAAA,wBACA,QAAA,QAAA,WAGA,YAAmB,CA2BjB,YAAsC,MAAU,CAAV,KAAA,MAAA,YAzBxB,YAAW,MAAa,CACpC,MAAO,IAAI,QAAO,aAIN,YAAW,MAAa,CACpC,MAAO,IAAI,QAAO,aAIN,aAAY,MAAc,CACtC,MAAO,IAAI,QAAO,aAIN,YAAW,MAA2B,CAClD,MAAO,IAAI,QAAO,aAIN,WAAU,MAAY,CAClC,MAAO,IAAI,QAAO,QAvBtB,QAAA,OAAA,sGAqDA,kBAA0B,SAAA,KAAK,CAK7B,YAAY,MAAkB,GAAY,MAAmB,GAAE,CAC7D,MAAM,MAAO,GAAI,8EAEjB,KAAK,OAAS,MAAM,OACpB,KAAK,UAAY,CAAC,MAIb,KAAK,KAAgB,+EAC1B,MAAM,SAAS,KAAK,YACb,QAAA,MAAM,SAAS,KAAM,MAIvB,aAAW,QAChB,MAAO,CACL,KAAM,aAAA,UAAU,KAChB,QAAS,KAAK,QACd,OAAM,IAAE,KAAK,UAAM,MAAA,KAAA,OAAA,OAAA,GAAE,MACrB,WAAY,QAAA,eAAe,KAAK,eAC7B,KAAK,uBACL,KAAK,sBACL,KAAK,iBAOJ,kBAAgB,CACtB,MAAO,UAAA,WAAW,aAAa,CAC7B,WAAY,KAAK,cApCvB,QAAA,KAAA",
  "names": []
}
