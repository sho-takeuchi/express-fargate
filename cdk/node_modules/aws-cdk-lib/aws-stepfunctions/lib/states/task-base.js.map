{
  "version": 3,
  "sources": ["task-base.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../../aws-cloudwatch';\nimport * as iam from '../../../aws-iam';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { Chain } from '../chain';\nimport { StateGraph } from '../state-graph';\nimport { CatchProps, IChainable, INextable, RetryProps } from '../types';\nimport { renderJsonPath, State } from './state';\n\n\n                                             \nexport interface TaskStateBaseProps {\n                                                                                       \n  readonly comment?: string;\n\n                                                                                                                                                                                                                                                                                         \n  readonly inputPath?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                               \n  readonly outputPath?: string;\n\n                                                                                                                                                                                                                                                                                          \n  readonly resultPath?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                          \n  readonly resultSelector?: { [key: string]: any };\n\n                                                                        \n  readonly timeout?: cdk.Duration;\n\n                                                                    \n  readonly heartbeat?: cdk.Duration;\n\n                                                                                                                                                                                                                                                                                                                                                      \n  readonly integrationPattern?: IntegrationPattern;\n}\n\n                                                                                                                                                                                                                                                                                                                                                          \nexport abstract class TaskStateBase extends State implements INextable {\n\n  public readonly endStates: INextable[];\n\n  protected abstract readonly taskMetrics?: TaskMetricsConfig;\n  protected abstract readonly taskPolicies?: iam.PolicyStatement[];\n\n  private readonly timeout?: cdk.Duration;\n  private readonly heartbeat?: cdk.Duration;\n\n  constructor(scope: Construct, id: string, props: TaskStateBaseProps) {\n    super(scope, id, props);\n    this.endStates = [this];\n    this.timeout = props.timeout;\n    this.heartbeat = props.heartbeat;\n  }\n\n                                                                                                                                                           \n  public addRetry(props: RetryProps = {}): TaskStateBase {\n    super._addRetry(props);\n    return this;\n  }\n\n                                                                                                                                                                                                  \n  public addCatch(handler: IChainable, props: CatchProps = {}): TaskStateBase {\n    super._addCatch(handler.startState, props);\n    return this;\n  }\n\n                                                               \n  public next(next: IChainable): Chain {\n    super.makeNext(next.startState);\n    return Chain.sequence(this, next);\n  }\n\n                                                                        \n  public toStateJson(): object {\n    return {\n      ...this.renderNextEnd(),\n      ...this.renderRetryCatch(),\n      ...this.renderTaskBase(),\n      ...this._renderTask(),\n    };\n  }\n\n                                                                                                    \n  public metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      namespace: 'AWS/States',\n      metricName,\n      dimensionsMap: this.taskMetrics?.metricDimensions,\n      statistic: 'sum',\n      ...props,\n    }).attachTo(this);\n  }\n\n                                                                                                                                                    \n  public metricRunTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixSingular, 'RunTime', { statistic: 'avg', ...props });\n  }\n\n                                                                                                                                               \n  public metricScheduleTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixSingular, 'ScheduleTime', { statistic: 'avg', ...props });\n  }\n\n                                                                                                                                                              \n  public metricTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixSingular, 'Time', { statistic: 'avg', ...props });\n  }\n\n                                                                                                                  \n  public metricScheduled(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixPlural, 'Scheduled', props);\n  }\n\n                                                                                                               \n  public metricTimedOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixPlural, 'TimedOut', props);\n  }\n\n                                                                                                                \n  public metricStarted(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixPlural, 'Started', props);\n  }\n\n                                                                                                              \n  public metricSucceeded(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixPlural, 'Succeeded', props);\n  }\n\n                                                                                                           \n  public metricFailed(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixPlural, 'Failed', props);\n  }\n\n                                                                                                                                 \n  public metricHeartbeatTimedOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskMetrics?.metricPrefixPlural, 'HeartbeatTimedOut', props);\n  }\n\n  protected whenBoundToGraph(graph: StateGraph) {\n    super.whenBoundToGraph(graph);\n    for (const policyStatement of this.taskPolicies || []) {\n      graph.registerPolicyStatement(policyStatement);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected abstract _renderTask(): any;\n\n  private taskMetric(prefix: string | undefined, suffix: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    if (prefix === undefined) {\n      throw new Error('Task does not expose metrics. Use the \\'metric()\\' function to add metrics.');\n    }\n    return this.metric(prefix + suffix, props);\n  }\n\n  private renderTaskBase() {\n    return {\n      Type: 'Task',\n      Comment: this.comment,\n      TimeoutSeconds: this.timeout?.toSeconds(),\n      HeartbeatSeconds: this.heartbeat?.toSeconds(),\n      InputPath: renderJsonPath(this.inputPath),\n      OutputPath: renderJsonPath(this.outputPath),\n      ResultPath: renderJsonPath(this.resultPath),\n      ...this.renderResultSelector(),\n    };\n  }\n}\n\n                       \nexport interface TaskMetricsConfig {\n                                                                                                          \n  readonly metricPrefixSingular?: string;\n\n                                                                                                        \n  readonly metricPrefixPlural?: string;\n\n                                                                                    \n  readonly metricDimensions?: cloudwatch.DimensionHash;\n}\n\n                                                                                                                                                                                                                                                                       \nexport enum IntegrationPattern {\n                                                                                                                                                                                                                \n  REQUEST_RESPONSE = 'REQUEST_RESPONSE',\n\n                                                                                                                                                                                                                  \n  RUN_JOB = 'RUN_JOB',\n\n                                                                                                                                                                                                                                                                                \n  WAIT_FOR_TASK_TOKEN = 'WAIT_FOR_TASK_TOKEN'\n}"],
  "mappings": "kPAAA,WAAA,QAAA,2BAIA,QAAA,QAAA,YAGA,QAAA,QAAA,WA+BA,2BAA4C,SAAA,KAAK,CAU/C,YAAY,MAAkB,GAAY,MAAyB,CACjE,MAAM,MAAO,GAAI,uFACjB,KAAK,UAAY,CAAC,MAClB,KAAK,QAAU,MAAM,QACrB,KAAK,UAAY,MAAM,UAIlB,SAAS,MAAoB,GAAE,gFACpC,MAAM,UAAU,OACT,KAIF,SAAS,QAAqB,MAAoB,GAAE,0JACzD,MAAM,UAAU,QAAQ,WAAY,OAC7B,KAIF,KAAK,KAAgB,+EAC1B,MAAM,SAAS,KAAK,YACb,QAAA,MAAM,SAAS,KAAM,MAIvB,aAAW,CAChB,MAAO,IACF,KAAK,mBACL,KAAK,sBACL,KAAK,oBACL,KAAK,eAKL,OAAO,WAAoB,MAAgC,uFACzD,GAAI,YAAW,OAAO,CAC3B,UAAW,aACX,WACA,cAAa,IAAE,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,iBACjC,UAAW,SACR,QACF,SAAS,MAIP,cAAc,MAAgC,uFAC5C,KAAK,WAAU,IAAC,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,qBAAsB,UAAW,CAAE,UAAW,SAAU,QAI5F,mBAAmB,MAAgC,uFACjD,KAAK,WAAU,IAAC,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,qBAAsB,eAAgB,CAAE,UAAW,SAAU,QAIjG,WAAW,MAAgC,uFACzC,KAAK,WAAU,IAAC,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,qBAAsB,OAAQ,CAAE,UAAW,SAAU,QAIzF,gBAAgB,MAAgC,uFAC9C,KAAK,WAAU,IAAC,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,mBAAoB,YAAa,OAIrE,eAAe,MAAgC,uFAC7C,KAAK,WAAU,IAAC,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,mBAAoB,WAAY,OAIpE,cAAc,MAAgC,uFAC5C,KAAK,WAAU,IAAC,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,mBAAoB,UAAW,OAInE,gBAAgB,MAAgC,uFAC9C,KAAK,WAAU,IAAC,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,mBAAoB,YAAa,OAIrE,aAAa,MAAgC,uFAC3C,KAAK,WAAU,IAAC,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,mBAAoB,SAAU,OAIlE,wBAAwB,MAAgC,uFACtD,KAAK,WAAU,IAAC,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,mBAAoB,oBAAqB,OAG1E,iBAAiB,MAAiB,yEAC1C,MAAM,iBAAiB,OACvB,SAAW,mBAAmB,MAAK,cAAgB,GACjD,MAAM,wBAAwB,iBAS1B,WAAW,OAA4B,OAAgB,MAAgC,CAC7F,GAAI,SAAW,OACb,KAAM,IAAI,OAAM,6EAElB,MAAO,MAAK,OAAO,OAAS,OAAQ,OAG9B,gBAAc,WACpB,MAAO,CACL,KAAM,OACN,QAAS,KAAK,QACd,eAAc,IAAE,KAAK,WAAO,MAAA,KAAA,OAAA,OAAA,GAAE,YAC9B,iBAAgB,IAAE,KAAK,aAAS,MAAA,KAAA,OAAA,OAAA,GAAE,YAClC,UAAW,QAAA,eAAe,KAAK,WAC/B,WAAY,QAAA,eAAe,KAAK,YAChC,WAAY,QAAA,eAAe,KAAK,eAC7B,KAAK,yBAjId,QAAA,cAAA,2HAmJA,GAAY,oBAAZ,AAAA,UAAY,oBAAkB,CAE5B,oBAAA,iBAAA,mBAGA,oBAAA,QAAA,UAGA,oBAAA,oBAAA,wBARU,mBAAA,QAAA,oBAAA,SAAA,mBAAkB",
  "names": []
}
