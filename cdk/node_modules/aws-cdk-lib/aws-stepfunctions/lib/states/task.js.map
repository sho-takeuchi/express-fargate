{
  "version": 3,
  "sources": ["task.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../../aws-cloudwatch';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { Chain } from '../chain';\nimport { FieldUtils } from '../fields';\nimport { StateGraph } from '../state-graph';\nimport { IStepFunctionsTask, StepFunctionsTaskConfig } from '../step-functions-task';\nimport { CatchProps, IChainable, INextable, RetryProps } from '../types';\nimport { noEmptyObject } from '../util';\nimport { StateType } from './private/state-type';\nimport { renderJsonPath, State } from './state';\n\n                                                                                                                                                  \nexport interface TaskProps {\n                                                           \n  readonly task: IStepFunctionsTask;\n\n                                                                                     \n  readonly comment?: string;\n\n                                                                                                                                                                                                                                                   \n  readonly inputPath?: string;\n\n                                                                                                                                                                                                                                                     \n  readonly outputPath?: string;\n\n                                                                                                                                                                                                                                \n  readonly resultPath?: string;\n\nn  readonly parameters?: { [name: string]: any };\n\n                                                                                                                                                                            \n  readonly timeout?: cdk.Duration;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                               \nexport class Task extends State implements INextable {\n  public readonly endStates: INextable[];\n  private readonly timeout?: cdk.Duration;\n  private readonly taskProps: StepFunctionsTaskConfig;\n\n  constructor(scope: Construct, id: string, props: TaskProps) {\n    super(scope, id, props);\n\n    this.timeout = props.timeout;\n    const taskProps = props.task.bind(this);\n\n    this.taskProps = {\n      ...taskProps,\n      parameters: noEmptyObject({ ...taskProps.parameters || {}, ...props.parameters || {} }),\n    };\n    this.endStates = [this];\n  }\n\n                                                                                                                                                           \n  public addRetry(props: RetryProps = {}): Task {\n    super._addRetry(props);\n    return this;\n  }\n\n                                                                                                                                                                                                  \n  public addCatch(handler: IChainable, props: CatchProps = {}): Task {\n    super._addCatch(handler.startState, props);\n    return this;\n  }\n\n                                                               \n  public next(next: IChainable): Chain {\n    super.makeNext(next.startState);\n    return Chain.sequence(this, next);\n  }\n\n                                                                        \n  public toStateJson(): object {\n    return {\n      ...this.renderNextEnd(),\n      ...this.renderRetryCatch(),\n      ...this.renderInputOutput(),\n      Type: StateType.TASK,\n      Comment: this.comment,\n      Resource: this.taskProps.resourceArn,\n      Parameters: this.taskProps.parameters && FieldUtils.renderObject(this.taskProps.parameters),\n      ResultPath: renderJsonPath(this.resultPath),\n      TimeoutSeconds: this.timeout && this.timeout.toSeconds(),\n      HeartbeatSeconds: this.taskProps.heartbeat && this.taskProps.heartbeat.toSeconds(),\n    };\n  }\n\n                                                                                                  \n  public metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return new cloudwatch.Metric({\n      namespace: 'AWS/States',\n      metricName,\n      dimensions: this.taskProps.metricDimensions,\n      statistic: 'sum',\n      ...props,\n    }).attachTo(this);\n  }\n\n                                                                                                                                                  \n  public metricRunTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixSingular, 'RunTime', { statistic: 'avg', ...props });\n  }\n\n                                                                                                                                             \n  public metricScheduleTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixSingular, 'ScheduleTime', { statistic: 'avg', ...props });\n  }\n\n                                                                                                                                                            \n  public metricTime(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixSingular, 'Time', { statistic: 'avg', ...props });\n  }\n\n                                                                                                                \n  public metricScheduled(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixPlural, 'Scheduled', props);\n  }\n\n                                                                                                             \n  public metricTimedOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixPlural, 'TimedOut', props);\n  }\n\n                                                                                                              \n  public metricStarted(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixPlural, 'Started', props);\n  }\n\n                                                                                                            \n  public metricSucceeded(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixPlural, 'Succeeded', props);\n  }\n\n                                                                                                         \n  public metricFailed(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixPlural, 'Failed', props);\n  }\n\n                                                                                                                               \n  public metricHeartbeatTimedOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.taskMetric(this.taskProps.metricPrefixPlural, 'HeartbeatTimedOut', props);\n  }\n\n  protected whenBoundToGraph(graph: StateGraph) {\n    super.whenBoundToGraph(graph);\n    for (const policyStatement of this.taskProps.policyStatements || []) {\n      graph.registerPolicyStatement(policyStatement);\n    }\n  }\n\n  private taskMetric(prefix: string | undefined, suffix: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    if (prefix === undefined) {\n      throw new Error('This Task Resource does not expose metrics');\n    }\n    return this.metric(prefix + suffix, props);\n  }\n}\n"],
  "mappings": "gJAAA,WAAA,QAAA,2BAGA,QAAA,QAAA,YACA,SAAA,QAAA,aAIA,OAAA,QAAA,WACA,aAAA,QAAA,wBACA,QAAA,QAAA,WA2BA,kBAA0B,SAAA,KAAK,CAK7B,YAAY,MAAkB,GAAY,MAAgB,CACxD,MAAM,MAAO,GAAI,OAEjB,KAAK,QAAU,MAAM,QACrB,KAAM,WAAY,MAAM,KAAK,KAAK,MAElC,KAAK,UAAY,IACZ,UACH,WAAY,OAAA,cAAc,IAAK,UAAU,YAAc,MAAO,MAAM,YAAc,MAEpF,KAAK,UAAY,CAAC,MAIb,SAAS,MAAoB,GAAE,CACpC,aAAM,UAAU,OACT,KAIF,SAAS,QAAqB,MAAoB,GAAE,CACzD,aAAM,UAAU,QAAQ,WAAY,OAC7B,KAIF,KAAK,KAAgB,CAC1B,aAAM,SAAS,KAAK,YACb,QAAA,MAAM,SAAS,KAAM,MAIvB,aAAW,CAChB,MAAO,IACF,KAAK,mBACL,KAAK,sBACL,KAAK,oBACR,KAAM,aAAA,UAAU,KAChB,QAAS,KAAK,QACd,SAAU,KAAK,UAAU,YACzB,WAAY,KAAK,UAAU,YAAc,SAAA,WAAW,aAAa,KAAK,UAAU,YAChF,WAAY,QAAA,eAAe,KAAK,YAChC,eAAgB,KAAK,SAAW,KAAK,QAAQ,YAC7C,iBAAkB,KAAK,UAAU,WAAa,KAAK,UAAU,UAAU,aAKpE,OAAO,WAAoB,MAAgC,CAChE,MAAO,IAAI,YAAW,OAAO,CAC3B,UAAW,aACX,WACA,WAAY,KAAK,UAAU,iBAC3B,UAAW,SACR,QACF,SAAS,MAIP,cAAc,MAAgC,CACnD,MAAO,MAAK,WAAW,KAAK,UAAU,qBAAsB,UAAW,CAAE,UAAW,SAAU,QAIzF,mBAAmB,MAAgC,CACxD,MAAO,MAAK,WAAW,KAAK,UAAU,qBAAsB,eAAgB,CAAE,UAAW,SAAU,QAI9F,WAAW,MAAgC,CAChD,MAAO,MAAK,WAAW,KAAK,UAAU,qBAAsB,OAAQ,CAAE,UAAW,SAAU,QAItF,gBAAgB,MAAgC,CACrD,MAAO,MAAK,WAAW,KAAK,UAAU,mBAAoB,YAAa,OAIlE,eAAe,MAAgC,CACpD,MAAO,MAAK,WAAW,KAAK,UAAU,mBAAoB,WAAY,OAIjE,cAAc,MAAgC,CACnD,MAAO,MAAK,WAAW,KAAK,UAAU,mBAAoB,UAAW,OAIhE,gBAAgB,MAAgC,CACrD,MAAO,MAAK,WAAW,KAAK,UAAU,mBAAoB,YAAa,OAIlE,aAAa,MAAgC,CAClD,MAAO,MAAK,WAAW,KAAK,UAAU,mBAAoB,SAAU,OAI/D,wBAAwB,MAAgC,CAC7D,MAAO,MAAK,WAAW,KAAK,UAAU,mBAAoB,oBAAqB,OAGvE,iBAAiB,MAAiB,CAC1C,MAAM,iBAAiB,OACvB,SAAW,mBAAmB,MAAK,UAAU,kBAAoB,GAC/D,MAAM,wBAAwB,iBAI1B,WAAW,OAA4B,OAAgB,MAAgC,CAC7F,GAAI,SAAW,OACb,KAAM,IAAI,OAAM,8CAElB,MAAO,MAAK,OAAO,OAAS,OAAQ,QAvHxC,QAAA,KAAA",
  "names": []
}
