{
  "version": 3,
  "sources": ["stepfunctions.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T03:55:53.088Z\",\"fingerprint\":\"3dM7lmEhLQm9W4twv3z7jlBul2EnesXDz3Be16nIhHc=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                          \nexport interface CfnActivityProps {\n\nn    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                                                        \n    readonly tags?: CfnActivity.TagsEntryProperty[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnActivityProps`\n *\n * @param properties - the TypeScript properties of a `CfnActivityProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnActivityPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(CfnActivity_TagsEntryPropertyValidator))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnActivityProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::StepFunctions::Activity` resource\n *\n * @param properties - the TypeScript properties of a `CfnActivityProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::StepFunctions::Activity` resource.\n */\n// @ts-ignore TS6133\nfunction cfnActivityPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnActivityPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        Tags: cdk.listMapper(cfnActivityTagsEntryPropertyToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnActivityPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnActivityProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnActivityProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(CfnActivityTagsEntryPropertyFromCloudFormation)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnActivity extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::StepFunctions::Activity\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnActivity {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnActivityPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnActivity(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                          \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                \n    public readonly attrName: string;\n\nn    public name: string;\n\n                                                                                                                                                                                                                                                                                                                                        \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                  \n    constructor(scope: constructs.Construct, id: string, props: CfnActivityProps) {\n        super(scope, id, { type: CfnActivity.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.name = props.name;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::StepFunctions::Activity\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnActivity.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnActivityPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnActivity {\n                                                                                                                                                                                                                                                                                 \n    export interface TagsEntryProperty {\n                                                                                                                                                                                                                                                                         \n        readonly key: string;\n                                                                                                                                                                                                                                                                             \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagsEntryProperty`\n *\n * @param properties - the TypeScript properties of a `TagsEntryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnActivity_TagsEntryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"TagsEntryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::StepFunctions::Activity.TagsEntry` resource\n *\n * @param properties - the TypeScript properties of a `TagsEntryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::StepFunctions::Activity.TagsEntry` resource.\n */\n// @ts-ignore TS6133\nfunction cfnActivityTagsEntryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnActivity_TagsEntryPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnActivityTagsEntryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnActivity.TagsEntryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnActivity.TagsEntryProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                  \nexport interface CfnStateMachineProps {\n\n                                                                                                                                                                                                                                                                          \n    readonly roleArn: string;\n\nn    readonly definition?: any | cdk.IResolvable | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                           \n    readonly definitionS3Location?: CfnStateMachine.S3LocationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    readonly definitionString?: string;\n\nn    readonly definitionSubstitutions?: { [key: string]: (string) } | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    readonly loggingConfiguration?: CfnStateMachine.LoggingConfigurationProperty | cdk.IResolvable;\n\nn    readonly stateMachineName?: string;\n\nn    readonly stateMachineType?: string;\n\n                                                                                                                                                                                                                                                                                                                                                \n    readonly tags?: CfnStateMachine.TagsEntryProperty[];\n\n                                                                                                                                                                                                                                                                                  \n    readonly tracingConfiguration?: CfnStateMachine.TracingConfigurationProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnStateMachineProps`\n *\n * @param properties - the TypeScript properties of a `CfnStateMachineProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnStateMachinePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('definition', cdk.validateObject)(properties.definition));\n    errors.collect(cdk.propertyValidator('definitionS3Location', CfnStateMachine_S3LocationPropertyValidator)(properties.definitionS3Location));\n    errors.collect(cdk.propertyValidator('definitionString', cdk.validateString)(properties.definitionString));\n    errors.collect(cdk.propertyValidator('definitionSubstitutions', cdk.hashValidator(cdk.validateString))(properties.definitionSubstitutions));\n    errors.collect(cdk.propertyValidator('loggingConfiguration', CfnStateMachine_LoggingConfigurationPropertyValidator)(properties.loggingConfiguration));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.requiredValidator)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));\n    errors.collect(cdk.propertyValidator('stateMachineName', cdk.validateString)(properties.stateMachineName));\n    errors.collect(cdk.propertyValidator('stateMachineType', cdk.validateString)(properties.stateMachineType));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(CfnStateMachine_TagsEntryPropertyValidator))(properties.tags));\n    errors.collect(cdk.propertyValidator('tracingConfiguration', CfnStateMachine_TracingConfigurationPropertyValidator)(properties.tracingConfiguration));\n    return errors.wrap('supplied properties not correct for \"CfnStateMachineProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine` resource\n *\n * @param properties - the TypeScript properties of a `CfnStateMachineProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStateMachinePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStateMachinePropsValidator(properties).assertSuccess();\n    return {\n        RoleArn: cdk.stringToCloudFormation(properties.roleArn),\n        Definition: cdk.objectToCloudFormation(properties.definition),\n        DefinitionS3Location: cfnStateMachineS3LocationPropertyToCloudFormation(properties.definitionS3Location),\n        DefinitionString: cdk.stringToCloudFormation(properties.definitionString),\n        DefinitionSubstitutions: cdk.hashMapper(cdk.stringToCloudFormation)(properties.definitionSubstitutions),\n        LoggingConfiguration: cfnStateMachineLoggingConfigurationPropertyToCloudFormation(properties.loggingConfiguration),\n        StateMachineName: cdk.stringToCloudFormation(properties.stateMachineName),\n        StateMachineType: cdk.stringToCloudFormation(properties.stateMachineType),\n        Tags: cdk.listMapper(cfnStateMachineTagsEntryPropertyToCloudFormation)(properties.tags),\n        TracingConfiguration: cfnStateMachineTracingConfigurationPropertyToCloudFormation(properties.tracingConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStateMachinePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStateMachineProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStateMachineProps>();\n    ret.addPropertyResult('roleArn', 'RoleArn', cfn_parse.FromCloudFormation.getString(properties.RoleArn));\n    ret.addPropertyResult('definition', 'Definition', properties.Definition != null ? cfn_parse.FromCloudFormation.getAny(properties.Definition) : undefined);\n    ret.addPropertyResult('definitionS3Location', 'DefinitionS3Location', properties.DefinitionS3Location != null ? CfnStateMachineS3LocationPropertyFromCloudFormation(properties.DefinitionS3Location) : undefined);\n    ret.addPropertyResult('definitionString', 'DefinitionString', properties.DefinitionString != null ? cfn_parse.FromCloudFormation.getString(properties.DefinitionString) : undefined);\n    ret.addPropertyResult('definitionSubstitutions', 'DefinitionSubstitutions', properties.DefinitionSubstitutions != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.DefinitionSubstitutions) : undefined);\n    ret.addPropertyResult('loggingConfiguration', 'LoggingConfiguration', properties.LoggingConfiguration != null ? CfnStateMachineLoggingConfigurationPropertyFromCloudFormation(properties.LoggingConfiguration) : undefined);\n    ret.addPropertyResult('stateMachineName', 'StateMachineName', properties.StateMachineName != null ? cfn_parse.FromCloudFormation.getString(properties.StateMachineName) : undefined);\n    ret.addPropertyResult('stateMachineType', 'StateMachineType', properties.StateMachineType != null ? cfn_parse.FromCloudFormation.getString(properties.StateMachineType) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(CfnStateMachineTagsEntryPropertyFromCloudFormation)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('tracingConfiguration', 'TracingConfiguration', properties.TracingConfiguration != null ? CfnStateMachineTracingConfigurationPropertyFromCloudFormation(properties.TracingConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnStateMachine extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::StepFunctions::StateMachine\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnStateMachine {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnStateMachinePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnStateMachine(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                          \n    public readonly attrArn: string;\n\nn    public readonly attrName: string;\n\n                                                                                                                                                                                                                                                                          \n    public roleArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public definition: any | cdk.IResolvable | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                           \n    public definitionS3Location: CfnStateMachine.S3LocationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n    public definitionString: string | undefined;\n\nn    public definitionSubstitutions: { [key: string]: (string) } | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public loggingConfiguration: CfnStateMachine.LoggingConfigurationProperty | cdk.IResolvable | undefined;\n\nn    public stateMachineName: string | undefined;\n\nn    public stateMachineType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                  \n    public tracingConfiguration: CfnStateMachine.TracingConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnStateMachineProps) {\n        super(scope, id, { type: CfnStateMachine.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'roleArn', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.roleArn = props.roleArn;\n        this.definition = props.definition;\n        this.definitionS3Location = props.definitionS3Location;\n        this.definitionString = props.definitionString;\n        this.definitionSubstitutions = props.definitionSubstitutions;\n        this.loggingConfiguration = props.loggingConfiguration;\n        this.stateMachineName = props.stateMachineName;\n        this.stateMachineType = props.stateMachineType;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::StepFunctions::StateMachine\", props.tags, { tagPropertyName: 'tags' });\n        this.tracingConfiguration = props.tracingConfiguration;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnStateMachine.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            roleArn: this.roleArn,\n            definition: this.definition,\n            definitionS3Location: this.definitionS3Location,\n            definitionString: this.definitionString,\n            definitionSubstitutions: this.definitionSubstitutions,\n            loggingConfiguration: this.loggingConfiguration,\n            stateMachineName: this.stateMachineName,\n            stateMachineType: this.stateMachineType,\n            tags: this.tags.renderTags(),\n            tracingConfiguration: this.tracingConfiguration,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnStateMachinePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnStateMachine {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface CloudWatchLogsLogGroupProperty {\n                                                                                                                                                                                                                                                                                                                                                                               \n        readonly logGroupArn?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `CloudWatchLogsLogGroupProperty`\n *\n * @param properties - the TypeScript properties of a `CloudWatchLogsLogGroupProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStateMachine_CloudWatchLogsLogGroupPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('logGroupArn', cdk.validateString)(properties.logGroupArn));\n    return errors.wrap('supplied properties not correct for \"CloudWatchLogsLogGroupProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine.CloudWatchLogsLogGroup` resource\n *\n * @param properties - the TypeScript properties of a `CloudWatchLogsLogGroupProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine.CloudWatchLogsLogGroup` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStateMachineCloudWatchLogsLogGroupPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStateMachine_CloudWatchLogsLogGroupPropertyValidator(properties).assertSuccess();\n    return {\n        LogGroupArn: cdk.stringToCloudFormation(properties.logGroupArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStateMachineCloudWatchLogsLogGroupPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStateMachine.CloudWatchLogsLogGroupProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStateMachine.CloudWatchLogsLogGroupProperty>();\n    ret.addPropertyResult('logGroupArn', 'LogGroupArn', properties.LogGroupArn != null ? cfn_parse.FromCloudFormation.getString(properties.LogGroupArn) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStateMachine {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface LogDestinationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly cloudWatchLogsLogGroup?: CfnStateMachine.CloudWatchLogsLogGroupProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LogDestinationProperty`\n *\n * @param properties - the TypeScript properties of a `LogDestinationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStateMachine_LogDestinationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('cloudWatchLogsLogGroup', CfnStateMachine_CloudWatchLogsLogGroupPropertyValidator)(properties.cloudWatchLogsLogGroup));\n    return errors.wrap('supplied properties not correct for \"LogDestinationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine.LogDestination` resource\n *\n * @param properties - the TypeScript properties of a `LogDestinationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine.LogDestination` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStateMachineLogDestinationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStateMachine_LogDestinationPropertyValidator(properties).assertSuccess();\n    return {\n        CloudWatchLogsLogGroup: cfnStateMachineCloudWatchLogsLogGroupPropertyToCloudFormation(properties.cloudWatchLogsLogGroup),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStateMachineLogDestinationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStateMachine.LogDestinationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStateMachine.LogDestinationProperty>();\n    ret.addPropertyResult('cloudWatchLogsLogGroup', 'CloudWatchLogsLogGroup', properties.CloudWatchLogsLogGroup != null ? CfnStateMachineCloudWatchLogsLogGroupPropertyFromCloudFormation(properties.CloudWatchLogsLogGroup) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStateMachine {\nn    export interface LoggingConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly destinations?: Array<CfnStateMachine.LogDestinationProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                            \n        readonly includeExecutionData?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                         \n        readonly level?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `LoggingConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `LoggingConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStateMachine_LoggingConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('destinations', cdk.listValidator(CfnStateMachine_LogDestinationPropertyValidator))(properties.destinations));\n    errors.collect(cdk.propertyValidator('includeExecutionData', cdk.validateBoolean)(properties.includeExecutionData));\n    errors.collect(cdk.propertyValidator('level', cdk.validateString)(properties.level));\n    return errors.wrap('supplied properties not correct for \"LoggingConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine.LoggingConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `LoggingConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine.LoggingConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStateMachineLoggingConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStateMachine_LoggingConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Destinations: cdk.listMapper(cfnStateMachineLogDestinationPropertyToCloudFormation)(properties.destinations),\n        IncludeExecutionData: cdk.booleanToCloudFormation(properties.includeExecutionData),\n        Level: cdk.stringToCloudFormation(properties.level),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStateMachineLoggingConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStateMachine.LoggingConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStateMachine.LoggingConfigurationProperty>();\n    ret.addPropertyResult('destinations', 'Destinations', properties.Destinations != null ? cfn_parse.FromCloudFormation.getArray(CfnStateMachineLogDestinationPropertyFromCloudFormation)(properties.Destinations) : undefined);\n    ret.addPropertyResult('includeExecutionData', 'IncludeExecutionData', properties.IncludeExecutionData != null ? cfn_parse.FromCloudFormation.getBoolean(properties.IncludeExecutionData) : undefined);\n    ret.addPropertyResult('level', 'Level', properties.Level != null ? cfn_parse.FromCloudFormation.getString(properties.Level) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStateMachine {\n                                                                                                                                                                                                                                                                                                                                                        \n    export interface S3LocationProperty {\n                                                                                                                                                                                                                                                                                                                                 \n        readonly bucket: string;\n                                                                                                                                                                                                                                                                                                           \n        readonly key: string;\n                                                                                                                                                                                                                                                                                                                            \n        readonly version?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3LocationProperty`\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStateMachine_S3LocationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucket', cdk.requiredValidator)(properties.bucket));\n    errors.collect(cdk.propertyValidator('bucket', cdk.validateString)(properties.bucket));\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('version', cdk.validateString)(properties.version));\n    return errors.wrap('supplied properties not correct for \"S3LocationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine.S3Location` resource\n *\n * @param properties - the TypeScript properties of a `S3LocationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine.S3Location` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStateMachineS3LocationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStateMachine_S3LocationPropertyValidator(properties).assertSuccess();\n    return {\n        Bucket: cdk.stringToCloudFormation(properties.bucket),\n        Key: cdk.stringToCloudFormation(properties.key),\n        Version: cdk.stringToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStateMachineS3LocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStateMachine.S3LocationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStateMachine.S3LocationProperty>();\n    ret.addPropertyResult('bucket', 'Bucket', cfn_parse.FromCloudFormation.getString(properties.Bucket));\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStateMachine {\n                                                                                                                                                                                                                                                                                         \n    export interface TagsEntryProperty {\n                                                                                                                                                                                                                                                                                 \n        readonly key: string;\n                                                                                                                                                                                                                                                                                     \n        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TagsEntryProperty`\n *\n * @param properties - the TypeScript properties of a `TagsEntryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStateMachine_TagsEntryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));\n    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"TagsEntryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine.TagsEntry` resource\n *\n * @param properties - the TypeScript properties of a `TagsEntryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine.TagsEntry` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStateMachineTagsEntryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStateMachine_TagsEntryPropertyValidator(properties).assertSuccess();\n    return {\n        Key: cdk.stringToCloudFormation(properties.key),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStateMachineTagsEntryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStateMachine.TagsEntryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStateMachine.TagsEntryProperty>();\n    ret.addPropertyResult('key', 'Key', cfn_parse.FromCloudFormation.getString(properties.Key));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnStateMachine {\n                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface TracingConfigurationProperty {\n                                                                                                                                                                                                                                                                                                           \n        readonly enabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TracingConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `TracingConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnStateMachine_TracingConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));\n    return errors.wrap('supplied properties not correct for \"TracingConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine.TracingConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `TracingConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::StepFunctions::StateMachine.TracingConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnStateMachineTracingConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnStateMachine_TracingConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        Enabled: cdk.booleanToCloudFormation(properties.enabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnStateMachineTracingConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnStateMachine.TracingConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnStateMachine.TracingConfigurationProperty>();\n    ret.addPropertyResult('enabled', 'Enabled', properties.Enabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Enabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
