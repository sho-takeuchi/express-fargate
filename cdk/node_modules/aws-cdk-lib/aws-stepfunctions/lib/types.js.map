{
  "version": 3,
  "sources": ["types.ts"],
  "sourcesContent": ["import { Duration } from '../../core';\nimport { Chain } from './chain';\nimport { State } from './states/state';\n\n                                                           \nexport interface INextable {\n                                                                                                           \n  next(state: IChainable): Chain;\n}\n\n                                                            \nexport interface IChainable {\n                                                          \n  readonly id: string;\n\n                                                  \n  readonly startState: State;\n\n                                                             \n  readonly endStates: INextable[];\n}\n\n                                                                                                                                                                                                                                                       \nexport class Errors {\n                                   \n  public static readonly ALL = 'States.ALL';\n\n                                                                                                      \n  public static readonly HEARTBEAT_TIMEOUT = 'States.HeartbeatTimeout';\n\n                                                                                                                                                                 \n  public static readonly TIMEOUT = 'States.Timeout';\n\n                                                          \n  public static readonly TASKS_FAILED = 'States.TaskFailed';\n\n                                                                                                               \n  public static readonly PERMISSIONS = 'States.Permissions';\n\n                                                                                                     \n  public static readonly RESULT_PATH_MATCH_FAILURE = 'States.ResultPathMatchFailure';\n\n                                                                                                                                      \n  public static readonly PARAMETER_PATH_FAILURE = 'States.ParameterPathFailure';\n\n                                                     \n  public static readonly BRANCH_FAILED = 'States.BranchFailed';\n\n                                                                                                             \n  public static readonly NO_CHOICE_MATCHED = 'States.NoChoiceMatched';\n}\n\n                        \nexport interface RetryProps {\n                                                                                                                                                                                                                   \n  readonly errors?: string[];\n\n                                                                                                          \n  readonly interval?: Duration;\n\n                                                                                                                                                                                              \n  readonly maxAttempts?: number;\n\n                                                                                                              \n  readonly backoffRate?: number;\n}\n\n                                \nexport interface CatchProps {\n                                                                                                                                                                                                                                                      \n  readonly errors?: string[];\n\n                                                                                                                                                                                                           \n  readonly resultPath?: string;\n}\n\n/**\n * Special string value to discard state input, output or result\n */\nexport const DISCARD = 'DISCARD';\n"],
  "mappings": "kKAuBA,YAAmB,EAAnB,QAAA,OAAA,sGAEyB,OAAA,IAAM,aAGN,OAAA,kBAAoB,0BAGpB,OAAA,QAAU,iBAGV,OAAA,aAAe,oBAGf,OAAA,YAAc,qBAGd,OAAA,0BAA4B,gCAG5B,OAAA,uBAAyB,8BAGzB,OAAA,cAAgB,sBAGhB,OAAA,kBAAoB,yBA8BhC,QAAA,QAAU",
  "names": []
}
