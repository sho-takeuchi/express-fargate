{
  "version": 3,
  "sources": ["timestream.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:34.191Z\",\"fingerprint\":\"jESMeOodKPc6h651/s0+Plu81Zpey/8NYfw7NkNvJvY=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                       \nexport interface CfnDatabaseProps {\n\n                                                                                                                                                                                                                                                                                                                     \n    readonly databaseName?: string;\n\n                                                                                                                                                                                                                                                                  \n    readonly kmsKeyId?: string;\n\n                                                                                                                                                                                                            \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnDatabaseProps`\n *\n * @param properties - the TypeScript properties of a `CfnDatabaseProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnDatabasePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnDatabaseProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::Database` resource\n *\n * @param properties - the TypeScript properties of a `CfnDatabaseProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::Database` resource.\n */\n// @ts-ignore TS6133\nfunction cfnDatabasePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnDatabasePropsValidator(properties).assertSuccess();\n    return {\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnDatabasePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDatabaseProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDatabaseProps>();\n    ret.addPropertyResult('databaseName', 'DatabaseName', properties.DatabaseName != null ? cfn_parse.FromCloudFormation.getString(properties.DatabaseName) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnDatabase extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Timestream::Database\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDatabase {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnDatabasePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnDatabase(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                     \n    public readonly attrArn: string;\n\n                                                                                                                                                                                                                                                                                                                     \n    public databaseName: string | undefined;\n\n                                                                                                                                                                                                                                                                  \n    public kmsKeyId: string | undefined;\n\n                                                                                                                                                                                                            \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                               \n    constructor(scope: constructs.Construct, id: string, props: CfnDatabaseProps = {}) {\n        super(scope, id, { type: CfnDatabase.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n\n        this.databaseName = props.databaseName;\n        this.kmsKeyId = props.kmsKeyId;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Timestream::Database\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnDatabase.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            databaseName: this.databaseName,\n            kmsKeyId: this.kmsKeyId,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnDatabasePropsToCloudFormation(props);\n    }\n}\n\n                                                                                                                                                                                                                   \nexport interface CfnScheduledQueryProps {\n\n                                                                                                                                                                                                                                                                                                                                            \n    readonly errorReportConfiguration: CfnScheduledQuery.ErrorReportConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    readonly notificationConfiguration: CfnScheduledQuery.NotificationConfigurationProperty | cdk.IResolvable;\n\nn    readonly queryString: string;\n\n                                                                                                                                                                                                                                \n    readonly scheduleConfiguration: CfnScheduledQuery.ScheduleConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                        \n    readonly scheduledQueryExecutionRoleArn: string;\n\nn    readonly clientToken?: string;\n\nn    readonly kmsKeyId?: string;\n\n                                                                                                                                                                                                                                                                                    \n    readonly scheduledQueryName?: string;\n\n                                                                                                                                                                                                                                               \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                  \n    readonly targetConfiguration?: CfnScheduledQuery.TargetConfigurationProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnScheduledQueryProps`\n *\n * @param properties - the TypeScript properties of a `CfnScheduledQueryProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledQueryPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('clientToken', cdk.validateString)(properties.clientToken));\n    errors.collect(cdk.propertyValidator('errorReportConfiguration', cdk.requiredValidator)(properties.errorReportConfiguration));\n    errors.collect(cdk.propertyValidator('errorReportConfiguration', CfnScheduledQuery_ErrorReportConfigurationPropertyValidator)(properties.errorReportConfiguration));\n    errors.collect(cdk.propertyValidator('kmsKeyId', cdk.validateString)(properties.kmsKeyId));\n    errors.collect(cdk.propertyValidator('notificationConfiguration', cdk.requiredValidator)(properties.notificationConfiguration));\n    errors.collect(cdk.propertyValidator('notificationConfiguration', CfnScheduledQuery_NotificationConfigurationPropertyValidator)(properties.notificationConfiguration));\n    errors.collect(cdk.propertyValidator('queryString', cdk.requiredValidator)(properties.queryString));\n    errors.collect(cdk.propertyValidator('queryString', cdk.validateString)(properties.queryString));\n    errors.collect(cdk.propertyValidator('scheduleConfiguration', cdk.requiredValidator)(properties.scheduleConfiguration));\n    errors.collect(cdk.propertyValidator('scheduleConfiguration', CfnScheduledQuery_ScheduleConfigurationPropertyValidator)(properties.scheduleConfiguration));\n    errors.collect(cdk.propertyValidator('scheduledQueryExecutionRoleArn', cdk.requiredValidator)(properties.scheduledQueryExecutionRoleArn));\n    errors.collect(cdk.propertyValidator('scheduledQueryExecutionRoleArn', cdk.validateString)(properties.scheduledQueryExecutionRoleArn));\n    errors.collect(cdk.propertyValidator('scheduledQueryName', cdk.validateString)(properties.scheduledQueryName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('targetConfiguration', CfnScheduledQuery_TargetConfigurationPropertyValidator)(properties.targetConfiguration));\n    return errors.wrap('supplied properties not correct for \"CfnScheduledQueryProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery` resource\n *\n * @param properties - the TypeScript properties of a `CfnScheduledQueryProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledQueryPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledQueryPropsValidator(properties).assertSuccess();\n    return {\n        ErrorReportConfiguration: cfnScheduledQueryErrorReportConfigurationPropertyToCloudFormation(properties.errorReportConfiguration),\n        NotificationConfiguration: cfnScheduledQueryNotificationConfigurationPropertyToCloudFormation(properties.notificationConfiguration),\n        QueryString: cdk.stringToCloudFormation(properties.queryString),\n        ScheduleConfiguration: cfnScheduledQueryScheduleConfigurationPropertyToCloudFormation(properties.scheduleConfiguration),\n        ScheduledQueryExecutionRoleArn: cdk.stringToCloudFormation(properties.scheduledQueryExecutionRoleArn),\n        ClientToken: cdk.stringToCloudFormation(properties.clientToken),\n        KmsKeyId: cdk.stringToCloudFormation(properties.kmsKeyId),\n        ScheduledQueryName: cdk.stringToCloudFormation(properties.scheduledQueryName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        TargetConfiguration: cfnScheduledQueryTargetConfigurationPropertyToCloudFormation(properties.targetConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledQueryPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledQueryProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledQueryProps>();\n    ret.addPropertyResult('errorReportConfiguration', 'ErrorReportConfiguration', CfnScheduledQueryErrorReportConfigurationPropertyFromCloudFormation(properties.ErrorReportConfiguration));\n    ret.addPropertyResult('notificationConfiguration', 'NotificationConfiguration', CfnScheduledQueryNotificationConfigurationPropertyFromCloudFormation(properties.NotificationConfiguration));\n    ret.addPropertyResult('queryString', 'QueryString', cfn_parse.FromCloudFormation.getString(properties.QueryString));\n    ret.addPropertyResult('scheduleConfiguration', 'ScheduleConfiguration', CfnScheduledQueryScheduleConfigurationPropertyFromCloudFormation(properties.ScheduleConfiguration));\n    ret.addPropertyResult('scheduledQueryExecutionRoleArn', 'ScheduledQueryExecutionRoleArn', cfn_parse.FromCloudFormation.getString(properties.ScheduledQueryExecutionRoleArn));\n    ret.addPropertyResult('clientToken', 'ClientToken', properties.ClientToken != null ? cfn_parse.FromCloudFormation.getString(properties.ClientToken) : undefined);\n    ret.addPropertyResult('kmsKeyId', 'KmsKeyId', properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined);\n    ret.addPropertyResult('scheduledQueryName', 'ScheduledQueryName', properties.ScheduledQueryName != null ? cfn_parse.FromCloudFormation.getString(properties.ScheduledQueryName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('targetConfiguration', 'TargetConfiguration', properties.TargetConfiguration != null ? CfnScheduledQueryTargetConfigurationPropertyFromCloudFormation(properties.TargetConfiguration) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnScheduledQuery extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Timestream::ScheduledQuery\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnScheduledQuery {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnScheduledQueryPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnScheduledQuery(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                            \n    public readonly attrArn: string;\n\n                                                                                                                                    \n    public readonly attrSqErrorReportConfiguration: string;\n\n                                                                                                                                                             \n    public readonly attrSqKmsKeyId: string;\n\n                                                                                       \n    public readonly attrSqName: string;\n\n                                                                                                                                  \n    public readonly attrSqNotificationConfiguration: string;\n\n                                                                                                 \n    public readonly attrSqQueryString: string;\n\n                                                                                                                          \n    public readonly attrSqScheduleConfiguration: string;\n\n                                                                                                                                                                 \n    public readonly attrSqScheduledQueryExecutionRoleArn: string;\n\n                                                                                                                \n    public readonly attrSqTargetConfiguration: string;\n\n                                                                                                                                                                                                                                                                                                                                            \n    public errorReportConfiguration: CfnScheduledQuery.ErrorReportConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                 \n    public notificationConfiguration: CfnScheduledQuery.NotificationConfigurationProperty | cdk.IResolvable;\n\nn    public queryString: string;\n\n                                                                                                                                                                                                                                \n    public scheduleConfiguration: CfnScheduledQuery.ScheduleConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                        \n    public scheduledQueryExecutionRoleArn: string;\n\nn    public clientToken: string | undefined;\n\nn    public kmsKeyId: string | undefined;\n\n                                                                                                                                                                                                                                                                                    \n    public scheduledQueryName: string | undefined;\n\n                                                                                                                                                                                                                                               \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                  \n    public targetConfiguration: CfnScheduledQuery.TargetConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnScheduledQueryProps) {\n        super(scope, id, { type: CfnScheduledQuery.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'errorReportConfiguration', this);\n        cdk.requireProperty(props, 'notificationConfiguration', this);\n        cdk.requireProperty(props, 'queryString', this);\n        cdk.requireProperty(props, 'scheduleConfiguration', this);\n        cdk.requireProperty(props, 'scheduledQueryExecutionRoleArn', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrSqErrorReportConfiguration = cdk.Token.asString(this.getAtt('SQErrorReportConfiguration'));\n        this.attrSqKmsKeyId = cdk.Token.asString(this.getAtt('SQKmsKeyId'));\n        this.attrSqName = cdk.Token.asString(this.getAtt('SQName'));\n        this.attrSqNotificationConfiguration = cdk.Token.asString(this.getAtt('SQNotificationConfiguration'));\n        this.attrSqQueryString = cdk.Token.asString(this.getAtt('SQQueryString'));\n        this.attrSqScheduleConfiguration = cdk.Token.asString(this.getAtt('SQScheduleConfiguration'));\n        this.attrSqScheduledQueryExecutionRoleArn = cdk.Token.asString(this.getAtt('SQScheduledQueryExecutionRoleArn'));\n        this.attrSqTargetConfiguration = cdk.Token.asString(this.getAtt('SQTargetConfiguration'));\n\n        this.errorReportConfiguration = props.errorReportConfiguration;\n        this.notificationConfiguration = props.notificationConfiguration;\n        this.queryString = props.queryString;\n        this.scheduleConfiguration = props.scheduleConfiguration;\n        this.scheduledQueryExecutionRoleArn = props.scheduledQueryExecutionRoleArn;\n        this.clientToken = props.clientToken;\n        this.kmsKeyId = props.kmsKeyId;\n        this.scheduledQueryName = props.scheduledQueryName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Timestream::ScheduledQuery\", props.tags, { tagPropertyName: 'tags' });\n        this.targetConfiguration = props.targetConfiguration;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnScheduledQuery.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            errorReportConfiguration: this.errorReportConfiguration,\n            notificationConfiguration: this.notificationConfiguration,\n            queryString: this.queryString,\n            scheduleConfiguration: this.scheduleConfiguration,\n            scheduledQueryExecutionRoleArn: this.scheduledQueryExecutionRoleArn,\n            clientToken: this.clientToken,\n            kmsKeyId: this.kmsKeyId,\n            scheduledQueryName: this.scheduledQueryName,\n            tags: this.tags.renderTags(),\n            targetConfiguration: this.targetConfiguration,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnScheduledQueryPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnScheduledQuery {\n                                                                                                                                                                                                                                                                                                                          \n    export interface DimensionMappingProperty {\n                                                                                                                                                                                                                                                                                     \n        readonly dimensionValueType: string;\n                                                                                                                                                                                                                                                                              \n        readonly name: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `DimensionMappingProperty`\n *\n * @param properties - the TypeScript properties of a `DimensionMappingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledQuery_DimensionMappingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dimensionValueType', cdk.requiredValidator)(properties.dimensionValueType));\n    errors.collect(cdk.propertyValidator('dimensionValueType', cdk.validateString)(properties.dimensionValueType));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"DimensionMappingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.DimensionMapping` resource\n *\n * @param properties - the TypeScript properties of a `DimensionMappingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.DimensionMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledQueryDimensionMappingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledQuery_DimensionMappingPropertyValidator(properties).assertSuccess();\n    return {\n        DimensionValueType: cdk.stringToCloudFormation(properties.dimensionValueType),\n        Name: cdk.stringToCloudFormation(properties.name),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledQueryDimensionMappingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledQuery.DimensionMappingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledQuery.DimensionMappingProperty>();\n    ret.addPropertyResult('dimensionValueType', 'DimensionValueType', cfn_parse.FromCloudFormation.getString(properties.DimensionValueType));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnScheduledQuery {\n                                                                                                                                                                                                                                                                            \n    export interface ErrorReportConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                      \n        readonly s3Configuration: CfnScheduledQuery.S3ConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ErrorReportConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ErrorReportConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledQuery_ErrorReportConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('s3Configuration', cdk.requiredValidator)(properties.s3Configuration));\n    errors.collect(cdk.propertyValidator('s3Configuration', CfnScheduledQuery_S3ConfigurationPropertyValidator)(properties.s3Configuration));\n    return errors.wrap('supplied properties not correct for \"ErrorReportConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.ErrorReportConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ErrorReportConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.ErrorReportConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledQueryErrorReportConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledQuery_ErrorReportConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        S3Configuration: cfnScheduledQueryS3ConfigurationPropertyToCloudFormation(properties.s3Configuration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledQueryErrorReportConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledQuery.ErrorReportConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledQuery.ErrorReportConfigurationProperty>();\n    ret.addPropertyResult('s3Configuration', 'S3Configuration', CfnScheduledQueryS3ConfigurationPropertyFromCloudFormation(properties.S3Configuration));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnScheduledQuery {\n                                                                                                                                                                                                                                                                                                                                                               \n    export interface MixedMeasureMappingProperty {\n                                                                                                                                                                                                                                                                                                                                                                          \n        readonly measureName?: string;\n                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly measureValueType: string;\n                                                                                                                                                                                                                                                                                                                                                                    \n        readonly multiMeasureAttributeMappings?: Array<CfnScheduledQuery.MultiMeasureAttributeMappingProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                       \n        readonly sourceColumn?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly targetMeasureName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MixedMeasureMappingProperty`\n *\n * @param properties - the TypeScript properties of a `MixedMeasureMappingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledQuery_MixedMeasureMappingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('measureName', cdk.validateString)(properties.measureName));\n    errors.collect(cdk.propertyValidator('measureValueType', cdk.requiredValidator)(properties.measureValueType));\n    errors.collect(cdk.propertyValidator('measureValueType', cdk.validateString)(properties.measureValueType));\n    errors.collect(cdk.propertyValidator('multiMeasureAttributeMappings', cdk.listValidator(CfnScheduledQuery_MultiMeasureAttributeMappingPropertyValidator))(properties.multiMeasureAttributeMappings));\n    errors.collect(cdk.propertyValidator('sourceColumn', cdk.validateString)(properties.sourceColumn));\n    errors.collect(cdk.propertyValidator('targetMeasureName', cdk.validateString)(properties.targetMeasureName));\n    return errors.wrap('supplied properties not correct for \"MixedMeasureMappingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.MixedMeasureMapping` resource\n *\n * @param properties - the TypeScript properties of a `MixedMeasureMappingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.MixedMeasureMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledQueryMixedMeasureMappingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledQuery_MixedMeasureMappingPropertyValidator(properties).assertSuccess();\n    return {\n        MeasureName: cdk.stringToCloudFormation(properties.measureName),\n        MeasureValueType: cdk.stringToCloudFormation(properties.measureValueType),\n        MultiMeasureAttributeMappings: cdk.listMapper(cfnScheduledQueryMultiMeasureAttributeMappingPropertyToCloudFormation)(properties.multiMeasureAttributeMappings),\n        SourceColumn: cdk.stringToCloudFormation(properties.sourceColumn),\n        TargetMeasureName: cdk.stringToCloudFormation(properties.targetMeasureName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledQueryMixedMeasureMappingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledQuery.MixedMeasureMappingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledQuery.MixedMeasureMappingProperty>();\n    ret.addPropertyResult('measureName', 'MeasureName', properties.MeasureName != null ? cfn_parse.FromCloudFormation.getString(properties.MeasureName) : undefined);\n    ret.addPropertyResult('measureValueType', 'MeasureValueType', cfn_parse.FromCloudFormation.getString(properties.MeasureValueType));\n    ret.addPropertyResult('multiMeasureAttributeMappings', 'MultiMeasureAttributeMappings', properties.MultiMeasureAttributeMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnScheduledQueryMultiMeasureAttributeMappingPropertyFromCloudFormation)(properties.MultiMeasureAttributeMappings) : undefined);\n    ret.addPropertyResult('sourceColumn', 'SourceColumn', properties.SourceColumn != null ? cfn_parse.FromCloudFormation.getString(properties.SourceColumn) : undefined);\n    ret.addPropertyResult('targetMeasureName', 'TargetMeasureName', properties.TargetMeasureName != null ? cfn_parse.FromCloudFormation.getString(properties.TargetMeasureName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnScheduledQuery {\n                                                                                                                                                                                                                                                                                \n    export interface MultiMeasureAttributeMappingProperty {\n                                                                                                                                                                                                                                                                                                                                            \n        readonly measureValueType: string;\n                                                                                                                                                                                                                                                                                                                                           \n        readonly sourceColumn: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly targetMultiMeasureAttributeName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MultiMeasureAttributeMappingProperty`\n *\n * @param properties - the TypeScript properties of a `MultiMeasureAttributeMappingProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledQuery_MultiMeasureAttributeMappingPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('measureValueType', cdk.requiredValidator)(properties.measureValueType));\n    errors.collect(cdk.propertyValidator('measureValueType', cdk.validateString)(properties.measureValueType));\n    errors.collect(cdk.propertyValidator('sourceColumn', cdk.requiredValidator)(properties.sourceColumn));\n    errors.collect(cdk.propertyValidator('sourceColumn', cdk.validateString)(properties.sourceColumn));\n    errors.collect(cdk.propertyValidator('targetMultiMeasureAttributeName', cdk.validateString)(properties.targetMultiMeasureAttributeName));\n    return errors.wrap('supplied properties not correct for \"MultiMeasureAttributeMappingProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.MultiMeasureAttributeMapping` resource\n *\n * @param properties - the TypeScript properties of a `MultiMeasureAttributeMappingProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.MultiMeasureAttributeMapping` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledQueryMultiMeasureAttributeMappingPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledQuery_MultiMeasureAttributeMappingPropertyValidator(properties).assertSuccess();\n    return {\n        MeasureValueType: cdk.stringToCloudFormation(properties.measureValueType),\n        SourceColumn: cdk.stringToCloudFormation(properties.sourceColumn),\n        TargetMultiMeasureAttributeName: cdk.stringToCloudFormation(properties.targetMultiMeasureAttributeName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledQueryMultiMeasureAttributeMappingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledQuery.MultiMeasureAttributeMappingProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledQuery.MultiMeasureAttributeMappingProperty>();\n    ret.addPropertyResult('measureValueType', 'MeasureValueType', cfn_parse.FromCloudFormation.getString(properties.MeasureValueType));\n    ret.addPropertyResult('sourceColumn', 'SourceColumn', cfn_parse.FromCloudFormation.getString(properties.SourceColumn));\n    ret.addPropertyResult('targetMultiMeasureAttributeName', 'TargetMultiMeasureAttributeName', properties.TargetMultiMeasureAttributeName != null ? cfn_parse.FromCloudFormation.getString(properties.TargetMultiMeasureAttributeName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnScheduledQuery {\n                                                                                                                                                                                                                                                                                                                                                                                                \n    export interface MultiMeasureMappingsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly multiMeasureAttributeMappings: Array<CfnScheduledQuery.MultiMeasureAttributeMappingProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n        readonly targetMultiMeasureName?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `MultiMeasureMappingsProperty`\n *\n * @param properties - the TypeScript properties of a `MultiMeasureMappingsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledQuery_MultiMeasureMappingsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('multiMeasureAttributeMappings', cdk.requiredValidator)(properties.multiMeasureAttributeMappings));\n    errors.collect(cdk.propertyValidator('multiMeasureAttributeMappings', cdk.listValidator(CfnScheduledQuery_MultiMeasureAttributeMappingPropertyValidator))(properties.multiMeasureAttributeMappings));\n    errors.collect(cdk.propertyValidator('targetMultiMeasureName', cdk.validateString)(properties.targetMultiMeasureName));\n    return errors.wrap('supplied properties not correct for \"MultiMeasureMappingsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.MultiMeasureMappings` resource\n *\n * @param properties - the TypeScript properties of a `MultiMeasureMappingsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.MultiMeasureMappings` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledQueryMultiMeasureMappingsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledQuery_MultiMeasureMappingsPropertyValidator(properties).assertSuccess();\n    return {\n        MultiMeasureAttributeMappings: cdk.listMapper(cfnScheduledQueryMultiMeasureAttributeMappingPropertyToCloudFormation)(properties.multiMeasureAttributeMappings),\n        TargetMultiMeasureName: cdk.stringToCloudFormation(properties.targetMultiMeasureName),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledQueryMultiMeasureMappingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledQuery.MultiMeasureMappingsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledQuery.MultiMeasureMappingsProperty>();\n    ret.addPropertyResult('multiMeasureAttributeMappings', 'MultiMeasureAttributeMappings', cfn_parse.FromCloudFormation.getArray(CfnScheduledQueryMultiMeasureAttributeMappingPropertyFromCloudFormation)(properties.MultiMeasureAttributeMappings));\n    ret.addPropertyResult('targetMultiMeasureName', 'TargetMultiMeasureName', properties.TargetMultiMeasureName != null ? cfn_parse.FromCloudFormation.getString(properties.TargetMultiMeasureName) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnScheduledQuery {\n                                                                                                                                                                                                                                                                                                                                                                                                       \n    export interface NotificationConfigurationProperty {\n                                                                                                                                                                                                                                                                                                           \n        readonly snsConfiguration: CfnScheduledQuery.SnsConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `NotificationConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `NotificationConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledQuery_NotificationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('snsConfiguration', cdk.requiredValidator)(properties.snsConfiguration));\n    errors.collect(cdk.propertyValidator('snsConfiguration', CfnScheduledQuery_SnsConfigurationPropertyValidator)(properties.snsConfiguration));\n    return errors.wrap('supplied properties not correct for \"NotificationConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.NotificationConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `NotificationConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.NotificationConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledQueryNotificationConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledQuery_NotificationConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        SnsConfiguration: cfnScheduledQuerySnsConfigurationPropertyToCloudFormation(properties.snsConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledQueryNotificationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledQuery.NotificationConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledQuery.NotificationConfigurationProperty>();\n    ret.addPropertyResult('snsConfiguration', 'SnsConfiguration', CfnScheduledQuerySnsConfigurationPropertyFromCloudFormation(properties.SnsConfiguration));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnScheduledQuery {\n                                                                                                                                                                                                                                                                                                  \n    export interface S3ConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                    \n        readonly bucketName: string;\n                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly encryptionOption?: string;\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly objectKeyPrefix?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `S3ConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `S3ConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledQuery_S3ConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('bucketName', cdk.requiredValidator)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('bucketName', cdk.validateString)(properties.bucketName));\n    errors.collect(cdk.propertyValidator('encryptionOption', cdk.validateString)(properties.encryptionOption));\n    errors.collect(cdk.propertyValidator('objectKeyPrefix', cdk.validateString)(properties.objectKeyPrefix));\n    return errors.wrap('supplied properties not correct for \"S3ConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.S3Configuration` resource\n *\n * @param properties - the TypeScript properties of a `S3ConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.S3Configuration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledQueryS3ConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledQuery_S3ConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        BucketName: cdk.stringToCloudFormation(properties.bucketName),\n        EncryptionOption: cdk.stringToCloudFormation(properties.encryptionOption),\n        ObjectKeyPrefix: cdk.stringToCloudFormation(properties.objectKeyPrefix),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledQueryS3ConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledQuery.S3ConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledQuery.S3ConfigurationProperty>();\n    ret.addPropertyResult('bucketName', 'BucketName', cfn_parse.FromCloudFormation.getString(properties.BucketName));\n    ret.addPropertyResult('encryptionOption', 'EncryptionOption', properties.EncryptionOption != null ? cfn_parse.FromCloudFormation.getString(properties.EncryptionOption) : undefined);\n    ret.addPropertyResult('objectKeyPrefix', 'ObjectKeyPrefix', properties.ObjectKeyPrefix != null ? cfn_parse.FromCloudFormation.getString(properties.ObjectKeyPrefix) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnScheduledQuery {\n                                                                                                                                                                                                                                                                         \n    export interface ScheduleConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                                                               \n        readonly scheduleExpression: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ScheduleConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `ScheduleConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledQuery_ScheduleConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.requiredValidator)(properties.scheduleExpression));\n    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.validateString)(properties.scheduleExpression));\n    return errors.wrap('supplied properties not correct for \"ScheduleConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.ScheduleConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `ScheduleConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.ScheduleConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledQueryScheduleConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledQuery_ScheduleConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        ScheduleExpression: cdk.stringToCloudFormation(properties.scheduleExpression),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledQueryScheduleConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledQuery.ScheduleConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledQuery.ScheduleConfigurationProperty>();\n    ret.addPropertyResult('scheduleExpression', 'ScheduleExpression', cfn_parse.FromCloudFormation.getString(properties.ScheduleExpression));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnScheduledQuery {\n                                                                                                                                                                                                                                                                                   \n    export interface SnsConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                \n        readonly topicArn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SnsConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `SnsConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledQuery_SnsConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('topicArn', cdk.requiredValidator)(properties.topicArn));\n    errors.collect(cdk.propertyValidator('topicArn', cdk.validateString)(properties.topicArn));\n    return errors.wrap('supplied properties not correct for \"SnsConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.SnsConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `SnsConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.SnsConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledQuerySnsConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledQuery_SnsConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        TopicArn: cdk.stringToCloudFormation(properties.topicArn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledQuerySnsConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledQuery.SnsConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledQuery.SnsConfigurationProperty>();\n    ret.addPropertyResult('topicArn', 'TopicArn', cfn_parse.FromCloudFormation.getString(properties.TopicArn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnScheduledQuery {\n                                                                                                                                                                                                                                                                                 \n    export interface TargetConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                                   \n        readonly timestreamConfiguration: CfnScheduledQuery.TimestreamConfigurationProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TargetConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `TargetConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledQuery_TargetConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('timestreamConfiguration', cdk.requiredValidator)(properties.timestreamConfiguration));\n    errors.collect(cdk.propertyValidator('timestreamConfiguration', CfnScheduledQuery_TimestreamConfigurationPropertyValidator)(properties.timestreamConfiguration));\n    return errors.wrap('supplied properties not correct for \"TargetConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.TargetConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `TargetConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.TargetConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledQueryTargetConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledQuery_TargetConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        TimestreamConfiguration: cfnScheduledQueryTimestreamConfigurationPropertyToCloudFormation(properties.timestreamConfiguration),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledQueryTargetConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledQuery.TargetConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledQuery.TargetConfigurationProperty>();\n    ret.addPropertyResult('timestreamConfiguration', 'TimestreamConfiguration', CfnScheduledQueryTimestreamConfigurationPropertyFromCloudFormation(properties.TimestreamConfiguration));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnScheduledQuery {\n                                                                                                                                                                                                                                                                                                                                                                                                             \n    export interface TimestreamConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                                            \n        readonly databaseName: string;\n                                                                                                                                                                                                                                                                                                                                                                              \n        readonly dimensionMappings: Array<CfnScheduledQuery.DimensionMappingProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                      \n        readonly measureNameColumn?: string;\n                                                                                                                                                                                                                                                                                                                                     \n        readonly mixedMeasureMappings?: Array<CfnScheduledQuery.MixedMeasureMappingProperty | cdk.IResolvable> | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                     \n        readonly multiMeasureMappings?: CfnScheduledQuery.MultiMeasureMappingsProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                \n        readonly tableName: string;\n                                                                                                                                                                                                                                                                                                                                                                                                   \n        readonly timeColumn: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `TimestreamConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `TimestreamConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnScheduledQuery_TimestreamConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('databaseName', cdk.requiredValidator)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('dimensionMappings', cdk.requiredValidator)(properties.dimensionMappings));\n    errors.collect(cdk.propertyValidator('dimensionMappings', cdk.listValidator(CfnScheduledQuery_DimensionMappingPropertyValidator))(properties.dimensionMappings));\n    errors.collect(cdk.propertyValidator('measureNameColumn', cdk.validateString)(properties.measureNameColumn));\n    errors.collect(cdk.propertyValidator('mixedMeasureMappings', cdk.listValidator(CfnScheduledQuery_MixedMeasureMappingPropertyValidator))(properties.mixedMeasureMappings));\n    errors.collect(cdk.propertyValidator('multiMeasureMappings', CfnScheduledQuery_MultiMeasureMappingsPropertyValidator)(properties.multiMeasureMappings));\n    errors.collect(cdk.propertyValidator('tableName', cdk.requiredValidator)(properties.tableName));\n    errors.collect(cdk.propertyValidator('tableName', cdk.validateString)(properties.tableName));\n    errors.collect(cdk.propertyValidator('timeColumn', cdk.requiredValidator)(properties.timeColumn));\n    errors.collect(cdk.propertyValidator('timeColumn', cdk.validateString)(properties.timeColumn));\n    return errors.wrap('supplied properties not correct for \"TimestreamConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.TimestreamConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `TimestreamConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::ScheduledQuery.TimestreamConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnScheduledQueryTimestreamConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnScheduledQuery_TimestreamConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        DimensionMappings: cdk.listMapper(cfnScheduledQueryDimensionMappingPropertyToCloudFormation)(properties.dimensionMappings),\n        MeasureNameColumn: cdk.stringToCloudFormation(properties.measureNameColumn),\n        MixedMeasureMappings: cdk.listMapper(cfnScheduledQueryMixedMeasureMappingPropertyToCloudFormation)(properties.mixedMeasureMappings),\n        MultiMeasureMappings: cfnScheduledQueryMultiMeasureMappingsPropertyToCloudFormation(properties.multiMeasureMappings),\n        TableName: cdk.stringToCloudFormation(properties.tableName),\n        TimeColumn: cdk.stringToCloudFormation(properties.timeColumn),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnScheduledQueryTimestreamConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnScheduledQuery.TimestreamConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnScheduledQuery.TimestreamConfigurationProperty>();\n    ret.addPropertyResult('databaseName', 'DatabaseName', cfn_parse.FromCloudFormation.getString(properties.DatabaseName));\n    ret.addPropertyResult('dimensionMappings', 'DimensionMappings', cfn_parse.FromCloudFormation.getArray(CfnScheduledQueryDimensionMappingPropertyFromCloudFormation)(properties.DimensionMappings));\n    ret.addPropertyResult('measureNameColumn', 'MeasureNameColumn', properties.MeasureNameColumn != null ? cfn_parse.FromCloudFormation.getString(properties.MeasureNameColumn) : undefined);\n    ret.addPropertyResult('mixedMeasureMappings', 'MixedMeasureMappings', properties.MixedMeasureMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnScheduledQueryMixedMeasureMappingPropertyFromCloudFormation)(properties.MixedMeasureMappings) : undefined);\n    ret.addPropertyResult('multiMeasureMappings', 'MultiMeasureMappings', properties.MultiMeasureMappings != null ? CfnScheduledQueryMultiMeasureMappingsPropertyFromCloudFormation(properties.MultiMeasureMappings) : undefined);\n    ret.addPropertyResult('tableName', 'TableName', cfn_parse.FromCloudFormation.getString(properties.TableName));\n    ret.addPropertyResult('timeColumn', 'TimeColumn', cfn_parse.FromCloudFormation.getString(properties.TimeColumn));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                 \nexport interface CfnTableProps {\n\n                                                                                                                                                                                                                                                                                                                                        \n    readonly databaseName: string;\n\nn    readonly retentionProperties?: any | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                         \n    readonly tableName?: string;\n\n                                                                                                                                                                                                  \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnTableProps`\n *\n * @param properties - the TypeScript properties of a `CfnTableProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnTablePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('databaseName', cdk.requiredValidator)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('databaseName', cdk.validateString)(properties.databaseName));\n    errors.collect(cdk.propertyValidator('retentionProperties', cdk.validateObject)(properties.retentionProperties));\n    errors.collect(cdk.propertyValidator('tableName', cdk.validateString)(properties.tableName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnTableProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Timestream::Table` resource\n *\n * @param properties - the TypeScript properties of a `CfnTableProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Timestream::Table` resource.\n */\n// @ts-ignore TS6133\nfunction cfnTablePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnTablePropsValidator(properties).assertSuccess();\n    return {\n        DatabaseName: cdk.stringToCloudFormation(properties.databaseName),\n        RetentionProperties: cdk.objectToCloudFormation(properties.retentionProperties),\n        TableName: cdk.stringToCloudFormation(properties.tableName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnTablePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnTableProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnTableProps>();\n    ret.addPropertyResult('databaseName', 'DatabaseName', cfn_parse.FromCloudFormation.getString(properties.DatabaseName));\n    ret.addPropertyResult('retentionProperties', 'RetentionProperties', properties.RetentionProperties != null ? cfn_parse.FromCloudFormation.getAny(properties.RetentionProperties) : undefined);\n    ret.addPropertyResult('tableName', 'TableName', properties.TableName != null ? cfn_parse.FromCloudFormation.getString(properties.TableName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnTable extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Timestream::Table\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnTable {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnTablePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnTable(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                  \n    public readonly attrArn: string;\n\n                                                                                  \n    public readonly attrName: string;\n\n                                                                                                                                                                                                                                                                                                                                        \n    public databaseName: string;\n\nn    public retentionProperties: any | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                         \n    public tableName: string | undefined;\n\n                                                                                                                                                                                                  \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnTableProps) {\n        super(scope, id, { type: CfnTable.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'databaseName', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrName = cdk.Token.asString(this.getAtt('Name'));\n\n        this.databaseName = props.databaseName;\n        this.retentionProperties = props.retentionProperties;\n        this.tableName = props.tableName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Timestream::Table\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnTable.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            databaseName: this.databaseName,\n            retentionProperties: this.retentionProperties,\n            tableName: this.tableName,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnTablePropsToCloudFormation(props);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
