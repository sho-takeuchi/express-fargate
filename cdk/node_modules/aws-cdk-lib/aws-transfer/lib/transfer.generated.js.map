{
  "version": 3,
  "sources": ["transfer.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:34.211Z\",\"fingerprint\":\"48ox1Mkf1mkxQmkzRocQmhnUcBwI67p1iXLLU1LCmms=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                 \nexport interface CfnServerProps {\n\nn    readonly certificate?: string;\n\n                                                                                                                                                                                                                                                 \n    readonly domain?: string;\n\nn    readonly endpointDetails?: CfnServer.EndpointDetailsProperty | cdk.IResolvable;\n\nn    readonly endpointType?: string;\n\nn    readonly identityProviderDetails?: CfnServer.IdentityProviderDetailsProperty | cdk.IResolvable;\n\nn    readonly identityProviderType?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly loggingRole?: string;\n\n                                                                                                                                                                                                                                                                                           \n    readonly protocolDetails?: CfnServer.ProtocolDetailsProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                               \n    readonly protocols?: string[];\n\n                                                                                                                                                                                                                                                           \n    readonly securityPolicyName?: string;\n\n                                                                                                                                                                                                                                     \n    readonly tags?: cdk.CfnTag[];\n\n                                                                                                                                                                                                                                                                                           \n    readonly workflowDetails?: CfnServer.WorkflowDetailsProperty | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnServerProps`\n *\n * @param properties - the TypeScript properties of a `CfnServerProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnServerPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('certificate', cdk.validateString)(properties.certificate));\n    errors.collect(cdk.propertyValidator('domain', cdk.validateString)(properties.domain));\n    errors.collect(cdk.propertyValidator('endpointDetails', CfnServer_EndpointDetailsPropertyValidator)(properties.endpointDetails));\n    errors.collect(cdk.propertyValidator('endpointType', cdk.validateString)(properties.endpointType));\n    errors.collect(cdk.propertyValidator('identityProviderDetails', CfnServer_IdentityProviderDetailsPropertyValidator)(properties.identityProviderDetails));\n    errors.collect(cdk.propertyValidator('identityProviderType', cdk.validateString)(properties.identityProviderType));\n    errors.collect(cdk.propertyValidator('loggingRole', cdk.validateString)(properties.loggingRole));\n    errors.collect(cdk.propertyValidator('protocolDetails', CfnServer_ProtocolDetailsPropertyValidator)(properties.protocolDetails));\n    errors.collect(cdk.propertyValidator('protocols', cdk.listValidator(cdk.validateString))(properties.protocols));\n    errors.collect(cdk.propertyValidator('securityPolicyName', cdk.validateString)(properties.securityPolicyName));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('workflowDetails', CfnServer_WorkflowDetailsPropertyValidator)(properties.workflowDetails));\n    return errors.wrap('supplied properties not correct for \"CfnServerProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Transfer::Server` resource\n *\n * @param properties - the TypeScript properties of a `CfnServerProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Transfer::Server` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServerPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnServerPropsValidator(properties).assertSuccess();\n    return {\n        Certificate: cdk.stringToCloudFormation(properties.certificate),\n        Domain: cdk.stringToCloudFormation(properties.domain),\n        EndpointDetails: cfnServerEndpointDetailsPropertyToCloudFormation(properties.endpointDetails),\n        EndpointType: cdk.stringToCloudFormation(properties.endpointType),\n        IdentityProviderDetails: cfnServerIdentityProviderDetailsPropertyToCloudFormation(properties.identityProviderDetails),\n        IdentityProviderType: cdk.stringToCloudFormation(properties.identityProviderType),\n        LoggingRole: cdk.stringToCloudFormation(properties.loggingRole),\n        ProtocolDetails: cfnServerProtocolDetailsPropertyToCloudFormation(properties.protocolDetails),\n        Protocols: cdk.listMapper(cdk.stringToCloudFormation)(properties.protocols),\n        SecurityPolicyName: cdk.stringToCloudFormation(properties.securityPolicyName),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n        WorkflowDetails: cfnServerWorkflowDetailsPropertyToCloudFormation(properties.workflowDetails),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServerPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnServerProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnServerProps>();\n    ret.addPropertyResult('certificate', 'Certificate', properties.Certificate != null ? cfn_parse.FromCloudFormation.getString(properties.Certificate) : undefined);\n    ret.addPropertyResult('domain', 'Domain', properties.Domain != null ? cfn_parse.FromCloudFormation.getString(properties.Domain) : undefined);\n    ret.addPropertyResult('endpointDetails', 'EndpointDetails', properties.EndpointDetails != null ? CfnServerEndpointDetailsPropertyFromCloudFormation(properties.EndpointDetails) : undefined);\n    ret.addPropertyResult('endpointType', 'EndpointType', properties.EndpointType != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointType) : undefined);\n    ret.addPropertyResult('identityProviderDetails', 'IdentityProviderDetails', properties.IdentityProviderDetails != null ? CfnServerIdentityProviderDetailsPropertyFromCloudFormation(properties.IdentityProviderDetails) : undefined);\n    ret.addPropertyResult('identityProviderType', 'IdentityProviderType', properties.IdentityProviderType != null ? cfn_parse.FromCloudFormation.getString(properties.IdentityProviderType) : undefined);\n    ret.addPropertyResult('loggingRole', 'LoggingRole', properties.LoggingRole != null ? cfn_parse.FromCloudFormation.getString(properties.LoggingRole) : undefined);\n    ret.addPropertyResult('protocolDetails', 'ProtocolDetails', properties.ProtocolDetails != null ? CfnServerProtocolDetailsPropertyFromCloudFormation(properties.ProtocolDetails) : undefined);\n    ret.addPropertyResult('protocols', 'Protocols', properties.Protocols != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.Protocols) : undefined);\n    ret.addPropertyResult('securityPolicyName', 'SecurityPolicyName', properties.SecurityPolicyName != null ? cfn_parse.FromCloudFormation.getString(properties.SecurityPolicyName) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addPropertyResult('workflowDetails', 'WorkflowDetails', properties.WorkflowDetails != null ? CfnServerWorkflowDetailsPropertyFromCloudFormation(properties.WorkflowDetails) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnServer extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Transfer::Server\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnServer {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnServerPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnServer(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                \n    public readonly attrArn: string;\n\n                                                                                                                                                                                     \n    public readonly attrServerId: string;\n\nn    public certificate: string | undefined;\n\n                                                                                                                                                                                                                                                 \n    public domain: string | undefined;\n\nn    public endpointDetails: CfnServer.EndpointDetailsProperty | cdk.IResolvable | undefined;\n\nn    public endpointType: string | undefined;\n\nn    public identityProviderDetails: CfnServer.IdentityProviderDetailsProperty | cdk.IResolvable | undefined;\n\nn    public identityProviderType: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public loggingRole: string | undefined;\n\n                                                                                                                                                                                                                                                                                           \n    public protocolDetails: CfnServer.ProtocolDetailsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                               \n    public protocols: string[] | undefined;\n\n                                                                                                                                                                                                                                                           \n    public securityPolicyName: string | undefined;\n\n                                                                                                                                                                                                                                     \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                                                                                           \n    public workflowDetails: CfnServer.WorkflowDetailsProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnServerProps = {}) {\n        super(scope, id, { type: CfnServer.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrServerId = cdk.Token.asString(this.getAtt('ServerId'));\n\n        this.certificate = props.certificate;\n        this.domain = props.domain;\n        this.endpointDetails = props.endpointDetails;\n        this.endpointType = props.endpointType;\n        this.identityProviderDetails = props.identityProviderDetails;\n        this.identityProviderType = props.identityProviderType;\n        this.loggingRole = props.loggingRole;\n        this.protocolDetails = props.protocolDetails;\n        this.protocols = props.protocols;\n        this.securityPolicyName = props.securityPolicyName;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Transfer::Server\", props.tags, { tagPropertyName: 'tags' });\n        this.workflowDetails = props.workflowDetails;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnServer.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            certificate: this.certificate,\n            domain: this.domain,\n            endpointDetails: this.endpointDetails,\n            endpointType: this.endpointType,\n            identityProviderDetails: this.identityProviderDetails,\n            identityProviderType: this.identityProviderType,\n            loggingRole: this.loggingRole,\n            protocolDetails: this.protocolDetails,\n            protocols: this.protocols,\n            securityPolicyName: this.securityPolicyName,\n            tags: this.tags.renderTags(),\n            workflowDetails: this.workflowDetails,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnServerPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnServer {\nn    export interface EndpointDetailsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly addressAllocationIds?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly securityGroupIds?: string[];\n                                                                                                                                                                                                                                                                                                                                                                                                           \n        readonly subnetIds?: string[];\n                                                                                                                                                                                                                                                                                                                                                                   \n        readonly vpcEndpointId?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly vpcId?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `EndpointDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `EndpointDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnServer_EndpointDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('addressAllocationIds', cdk.listValidator(cdk.validateString))(properties.addressAllocationIds));\n    errors.collect(cdk.propertyValidator('securityGroupIds', cdk.listValidator(cdk.validateString))(properties.securityGroupIds));\n    errors.collect(cdk.propertyValidator('subnetIds', cdk.listValidator(cdk.validateString))(properties.subnetIds));\n    errors.collect(cdk.propertyValidator('vpcEndpointId', cdk.validateString)(properties.vpcEndpointId));\n    errors.collect(cdk.propertyValidator('vpcId', cdk.validateString)(properties.vpcId));\n    return errors.wrap('supplied properties not correct for \"EndpointDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Transfer::Server.EndpointDetails` resource\n *\n * @param properties - the TypeScript properties of a `EndpointDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Transfer::Server.EndpointDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServerEndpointDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnServer_EndpointDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        AddressAllocationIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.addressAllocationIds),\n        SecurityGroupIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),\n        SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),\n        VpcEndpointId: cdk.stringToCloudFormation(properties.vpcEndpointId),\n        VpcId: cdk.stringToCloudFormation(properties.vpcId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServerEndpointDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnServer.EndpointDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnServer.EndpointDetailsProperty>();\n    ret.addPropertyResult('addressAllocationIds', 'AddressAllocationIds', properties.AddressAllocationIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.AddressAllocationIds) : undefined);\n    ret.addPropertyResult('securityGroupIds', 'SecurityGroupIds', properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SecurityGroupIds) : undefined);\n    ret.addPropertyResult('subnetIds', 'SubnetIds', properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getStringArray(properties.SubnetIds) : undefined);\n    ret.addPropertyResult('vpcEndpointId', 'VpcEndpointId', properties.VpcEndpointId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcEndpointId) : undefined);\n    ret.addPropertyResult('vpcId', 'VpcId', properties.VpcId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcId) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnServer {\nn    export interface IdentityProviderDetailsProperty {\n                                                                                                                                                                                                                                                                                                                                     \n        readonly directoryId?: string;\n                                                                                                                                                                                                                                                                                                             \n        readonly function?: string;\n                                                                                                                                                                                                                                                                                                                                \n        readonly invocationRole?: string;\n                                                                                                                                                                                                                                                                                                                  \n        readonly url?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IdentityProviderDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `IdentityProviderDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnServer_IdentityProviderDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('directoryId', cdk.validateString)(properties.directoryId));\n    errors.collect(cdk.propertyValidator('function', cdk.validateString)(properties.function));\n    errors.collect(cdk.propertyValidator('invocationRole', cdk.validateString)(properties.invocationRole));\n    errors.collect(cdk.propertyValidator('url', cdk.validateString)(properties.url));\n    return errors.wrap('supplied properties not correct for \"IdentityProviderDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Transfer::Server.IdentityProviderDetails` resource\n *\n * @param properties - the TypeScript properties of a `IdentityProviderDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Transfer::Server.IdentityProviderDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServerIdentityProviderDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnServer_IdentityProviderDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        DirectoryId: cdk.stringToCloudFormation(properties.directoryId),\n        Function: cdk.stringToCloudFormation(properties.function),\n        InvocationRole: cdk.stringToCloudFormation(properties.invocationRole),\n        Url: cdk.stringToCloudFormation(properties.url),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServerIdentityProviderDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnServer.IdentityProviderDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnServer.IdentityProviderDetailsProperty>();\n    ret.addPropertyResult('directoryId', 'DirectoryId', properties.DirectoryId != null ? cfn_parse.FromCloudFormation.getString(properties.DirectoryId) : undefined);\n    ret.addPropertyResult('function', 'Function', properties.Function != null ? cfn_parse.FromCloudFormation.getString(properties.Function) : undefined);\n    ret.addPropertyResult('invocationRole', 'InvocationRole', properties.InvocationRole != null ? cfn_parse.FromCloudFormation.getString(properties.InvocationRole) : undefined);\n    ret.addPropertyResult('url', 'Url', properties.Url != null ? cfn_parse.FromCloudFormation.getString(properties.Url) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnServer {\n                                                                                                                                                                                                                                                                    \n    export interface ProtocolDetailsProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                    \n        readonly passiveIp?: string;\nn        readonly tlsSessionResumptionMode?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ProtocolDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `ProtocolDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnServer_ProtocolDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('passiveIp', cdk.validateString)(properties.passiveIp));\n    errors.collect(cdk.propertyValidator('tlsSessionResumptionMode', cdk.validateString)(properties.tlsSessionResumptionMode));\n    return errors.wrap('supplied properties not correct for \"ProtocolDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Transfer::Server.ProtocolDetails` resource\n *\n * @param properties - the TypeScript properties of a `ProtocolDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Transfer::Server.ProtocolDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServerProtocolDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnServer_ProtocolDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        PassiveIp: cdk.stringToCloudFormation(properties.passiveIp),\n        TlsSessionResumptionMode: cdk.stringToCloudFormation(properties.tlsSessionResumptionMode),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServerProtocolDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnServer.ProtocolDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnServer.ProtocolDetailsProperty>();\n    ret.addPropertyResult('passiveIp', 'PassiveIp', properties.PassiveIp != null ? cfn_parse.FromCloudFormation.getString(properties.PassiveIp) : undefined);\n    ret.addPropertyResult('tlsSessionResumptionMode', 'TlsSessionResumptionMode', properties.TlsSessionResumptionMode != null ? cfn_parse.FromCloudFormation.getString(properties.TlsSessionResumptionMode) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnServer {\n                                                                                                                                                                                                                                                                                                                         \n    export interface WorkflowDetailProperty {\n                                                                                                                                                                                                                                                                                                                                                                                                 \n        readonly executionRole: string;\n                                                                                                                                                                                                                                                                   \n        readonly workflowId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `WorkflowDetailProperty`\n *\n * @param properties - the TypeScript properties of a `WorkflowDetailProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnServer_WorkflowDetailPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('executionRole', cdk.requiredValidator)(properties.executionRole));\n    errors.collect(cdk.propertyValidator('executionRole', cdk.validateString)(properties.executionRole));\n    errors.collect(cdk.propertyValidator('workflowId', cdk.requiredValidator)(properties.workflowId));\n    errors.collect(cdk.propertyValidator('workflowId', cdk.validateString)(properties.workflowId));\n    return errors.wrap('supplied properties not correct for \"WorkflowDetailProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Transfer::Server.WorkflowDetail` resource\n *\n * @param properties - the TypeScript properties of a `WorkflowDetailProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Transfer::Server.WorkflowDetail` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServerWorkflowDetailPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnServer_WorkflowDetailPropertyValidator(properties).assertSuccess();\n    return {\n        ExecutionRole: cdk.stringToCloudFormation(properties.executionRole),\n        WorkflowId: cdk.stringToCloudFormation(properties.workflowId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServerWorkflowDetailPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnServer.WorkflowDetailProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnServer.WorkflowDetailProperty>();\n    ret.addPropertyResult('executionRole', 'ExecutionRole', cfn_parse.FromCloudFormation.getString(properties.ExecutionRole));\n    ret.addPropertyResult('workflowId', 'WorkflowId', cfn_parse.FromCloudFormation.getString(properties.WorkflowId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnServer {\n                                                                                                                                                                                                                                                                                                                             \n    export interface WorkflowDetailsProperty {\n                                                                                                                                                                                                                                                                                                                        \n        readonly onUpload: Array<CfnServer.WorkflowDetailProperty | cdk.IResolvable> | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `WorkflowDetailsProperty`\n *\n * @param properties - the TypeScript properties of a `WorkflowDetailsProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnServer_WorkflowDetailsPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('onUpload', cdk.requiredValidator)(properties.onUpload));\n    errors.collect(cdk.propertyValidator('onUpload', cdk.listValidator(CfnServer_WorkflowDetailPropertyValidator))(properties.onUpload));\n    return errors.wrap('supplied properties not correct for \"WorkflowDetailsProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Transfer::Server.WorkflowDetails` resource\n *\n * @param properties - the TypeScript properties of a `WorkflowDetailsProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Transfer::Server.WorkflowDetails` resource.\n */\n// @ts-ignore TS6133\nfunction cfnServerWorkflowDetailsPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnServer_WorkflowDetailsPropertyValidator(properties).assertSuccess();\n    return {\n        OnUpload: cdk.listMapper(cfnServerWorkflowDetailPropertyToCloudFormation)(properties.onUpload),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnServerWorkflowDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnServer.WorkflowDetailsProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnServer.WorkflowDetailsProperty>();\n    ret.addPropertyResult('onUpload', 'OnUpload', cfn_parse.FromCloudFormation.getArray(CfnServerWorkflowDetailPropertyFromCloudFormation)(properties.OnUpload));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                             \nexport interface CfnUserProps {\n\nn    readonly role: string;\n\n                                                                                                                                                                                                                                                                                       \n    readonly serverId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly userName: string;\n\n                                                                                                                                                                                                                                                                                                                                                \n    readonly homeDirectory?: string;\n\nn    readonly homeDirectoryMappings?: Array<CfnUser.HomeDirectoryMapEntryProperty | cdk.IResolvable> | cdk.IResolvable;\n\nn    readonly homeDirectoryType?: string;\n\nn    readonly policy?: string;\n\nn    readonly posixProfile?: CfnUser.PosixProfileProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                       \n    readonly sshPublicKeys?: string[];\n\n                                                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnUserProps`\n *\n * @param properties - the TypeScript properties of a `CfnUserProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnUserPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('homeDirectory', cdk.validateString)(properties.homeDirectory));\n    errors.collect(cdk.propertyValidator('homeDirectoryMappings', cdk.listValidator(CfnUser_HomeDirectoryMapEntryPropertyValidator))(properties.homeDirectoryMappings));\n    errors.collect(cdk.propertyValidator('homeDirectoryType', cdk.validateString)(properties.homeDirectoryType));\n    errors.collect(cdk.propertyValidator('policy', cdk.validateString)(properties.policy));\n    errors.collect(cdk.propertyValidator('posixProfile', CfnUser_PosixProfilePropertyValidator)(properties.posixProfile));\n    errors.collect(cdk.propertyValidator('role', cdk.requiredValidator)(properties.role));\n    errors.collect(cdk.propertyValidator('role', cdk.validateString)(properties.role));\n    errors.collect(cdk.propertyValidator('serverId', cdk.requiredValidator)(properties.serverId));\n    errors.collect(cdk.propertyValidator('serverId', cdk.validateString)(properties.serverId));\n    errors.collect(cdk.propertyValidator('sshPublicKeys', cdk.listValidator(cdk.validateString))(properties.sshPublicKeys));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    errors.collect(cdk.propertyValidator('userName', cdk.requiredValidator)(properties.userName));\n    errors.collect(cdk.propertyValidator('userName', cdk.validateString)(properties.userName));\n    return errors.wrap('supplied properties not correct for \"CfnUserProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Transfer::User` resource\n *\n * @param properties - the TypeScript properties of a `CfnUserProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Transfer::User` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUserPropsValidator(properties).assertSuccess();\n    return {\n        Role: cdk.stringToCloudFormation(properties.role),\n        ServerId: cdk.stringToCloudFormation(properties.serverId),\n        UserName: cdk.stringToCloudFormation(properties.userName),\n        HomeDirectory: cdk.stringToCloudFormation(properties.homeDirectory),\n        HomeDirectoryMappings: cdk.listMapper(cfnUserHomeDirectoryMapEntryPropertyToCloudFormation)(properties.homeDirectoryMappings),\n        HomeDirectoryType: cdk.stringToCloudFormation(properties.homeDirectoryType),\n        Policy: cdk.stringToCloudFormation(properties.policy),\n        PosixProfile: cfnUserPosixProfilePropertyToCloudFormation(properties.posixProfile),\n        SshPublicKeys: cdk.listMapper(cdk.stringToCloudFormation)(properties.sshPublicKeys),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProps>();\n    ret.addPropertyResult('role', 'Role', cfn_parse.FromCloudFormation.getString(properties.Role));\n    ret.addPropertyResult('serverId', 'ServerId', cfn_parse.FromCloudFormation.getString(properties.ServerId));\n    ret.addPropertyResult('userName', 'UserName', cfn_parse.FromCloudFormation.getString(properties.UserName));\n    ret.addPropertyResult('homeDirectory', 'HomeDirectory', properties.HomeDirectory != null ? cfn_parse.FromCloudFormation.getString(properties.HomeDirectory) : undefined);\n    ret.addPropertyResult('homeDirectoryMappings', 'HomeDirectoryMappings', properties.HomeDirectoryMappings != null ? cfn_parse.FromCloudFormation.getArray(CfnUserHomeDirectoryMapEntryPropertyFromCloudFormation)(properties.HomeDirectoryMappings) : undefined);\n    ret.addPropertyResult('homeDirectoryType', 'HomeDirectoryType', properties.HomeDirectoryType != null ? cfn_parse.FromCloudFormation.getString(properties.HomeDirectoryType) : undefined);\n    ret.addPropertyResult('policy', 'Policy', properties.Policy != null ? cfn_parse.FromCloudFormation.getString(properties.Policy) : undefined);\n    ret.addPropertyResult('posixProfile', 'PosixProfile', properties.PosixProfile != null ? CfnUserPosixProfilePropertyFromCloudFormation(properties.PosixProfile) : undefined);\n    ret.addPropertyResult('sshPublicKeys', 'SshPublicKeys', properties.SshPublicKeys != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SshPublicKeys) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnUser extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Transfer::User\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUser {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnUserPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnUser(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                     \n    public readonly attrArn: string;\n\n                                                                                                                                                                                  \n    public readonly attrServerId: string;\n\n                                                                                                                                                                                                   \n    public readonly attrUserName: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n    public role: string;\n\n                                                                                                                                                                                                                                                                                       \n    public serverId: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public userName: string;\n\n                                                                                                                                                                                                                                                                                                                                                \n    public homeDirectory: string | undefined;\n\nn    public homeDirectoryMappings: Array<CfnUser.HomeDirectoryMapEntryProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\nn    public homeDirectoryType: string | undefined;\n\nn    public policy: string | undefined;\n\nn    public posixProfile: CfnUser.PosixProfileProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                       \n    public sshPublicKeys: string[] | undefined;\n\n                                                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                         \n    constructor(scope: constructs.Construct, id: string, props: CfnUserProps) {\n        super(scope, id, { type: CfnUser.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'role', this);\n        cdk.requireProperty(props, 'serverId', this);\n        cdk.requireProperty(props, 'userName', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrServerId = cdk.Token.asString(this.getAtt('ServerId'));\n        this.attrUserName = cdk.Token.asString(this.getAtt('UserName'));\n\n        this.role = props.role;\n        this.serverId = props.serverId;\n        this.userName = props.userName;\n        this.homeDirectory = props.homeDirectory;\n        this.homeDirectoryMappings = props.homeDirectoryMappings;\n        this.homeDirectoryType = props.homeDirectoryType;\n        this.policy = props.policy;\n        this.posixProfile = props.posixProfile;\n        this.sshPublicKeys = props.sshPublicKeys;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Transfer::User\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnUser.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            role: this.role,\n            serverId: this.serverId,\n            userName: this.userName,\n            homeDirectory: this.homeDirectory,\n            homeDirectoryMappings: this.homeDirectoryMappings,\n            homeDirectoryType: this.homeDirectoryType,\n            policy: this.policy,\n            posixProfile: this.posixProfile,\n            sshPublicKeys: this.sshPublicKeys,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnUserPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnUser {\n                                                                                                                                                                                                                                                                                                      \n    export interface HomeDirectoryMapEntryProperty {\n                                                                                                                                                                                                                                                                                    \n        readonly entry: string;\n                                                                                                                                                                                                                                                                                                         \n        readonly target: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `HomeDirectoryMapEntryProperty`\n *\n * @param properties - the TypeScript properties of a `HomeDirectoryMapEntryProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUser_HomeDirectoryMapEntryPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('entry', cdk.requiredValidator)(properties.entry));\n    errors.collect(cdk.propertyValidator('entry', cdk.validateString)(properties.entry));\n    errors.collect(cdk.propertyValidator('target', cdk.requiredValidator)(properties.target));\n    errors.collect(cdk.propertyValidator('target', cdk.validateString)(properties.target));\n    return errors.wrap('supplied properties not correct for \"HomeDirectoryMapEntryProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Transfer::User.HomeDirectoryMapEntry` resource\n *\n * @param properties - the TypeScript properties of a `HomeDirectoryMapEntryProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Transfer::User.HomeDirectoryMapEntry` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserHomeDirectoryMapEntryPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUser_HomeDirectoryMapEntryPropertyValidator(properties).assertSuccess();\n    return {\n        Entry: cdk.stringToCloudFormation(properties.entry),\n        Target: cdk.stringToCloudFormation(properties.target),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserHomeDirectoryMapEntryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUser.HomeDirectoryMapEntryProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUser.HomeDirectoryMapEntryProperty>();\n    ret.addPropertyResult('entry', 'Entry', cfn_parse.FromCloudFormation.getString(properties.Entry));\n    ret.addPropertyResult('target', 'Target', cfn_parse.FromCloudFormation.getString(properties.Target));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnUser {\nn    export interface PosixProfileProperty {\n                                                                                                                                                                                                                                                                           \n        readonly gid: number;\n                                                                                                                                                                                                                                                                                                \n        readonly secondaryGids?: number[] | cdk.IResolvable;\n                                                                                                                                                                                                                                                                          \n        readonly uid: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PosixProfileProperty`\n *\n * @param properties - the TypeScript properties of a `PosixProfileProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnUser_PosixProfilePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('gid', cdk.requiredValidator)(properties.gid));\n    errors.collect(cdk.propertyValidator('gid', cdk.validateNumber)(properties.gid));\n    errors.collect(cdk.propertyValidator('secondaryGids', cdk.listValidator(cdk.validateNumber))(properties.secondaryGids));\n    errors.collect(cdk.propertyValidator('uid', cdk.requiredValidator)(properties.uid));\n    errors.collect(cdk.propertyValidator('uid', cdk.validateNumber)(properties.uid));\n    return errors.wrap('supplied properties not correct for \"PosixProfileProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Transfer::User.PosixProfile` resource\n *\n * @param properties - the TypeScript properties of a `PosixProfileProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Transfer::User.PosixProfile` resource.\n */\n// @ts-ignore TS6133\nfunction cfnUserPosixProfilePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnUser_PosixProfilePropertyValidator(properties).assertSuccess();\n    return {\n        Gid: cdk.numberToCloudFormation(properties.gid),\n        SecondaryGids: cdk.listMapper(cdk.numberToCloudFormation)(properties.secondaryGids),\n        Uid: cdk.numberToCloudFormation(properties.uid),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnUserPosixProfilePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUser.PosixProfileProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUser.PosixProfileProperty>();\n    ret.addPropertyResult('gid', 'Gid', cfn_parse.FromCloudFormation.getNumber(properties.Gid));\n    ret.addPropertyResult('secondaryGids', 'SecondaryGids', properties.SecondaryGids != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getNumber)(properties.SecondaryGids) : undefined);\n    ret.addPropertyResult('uid', 'Uid', cfn_parse.FromCloudFormation.getNumber(properties.Uid));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                     \nexport interface CfnWorkflowProps {\n\n                                                                                                                                                                                                                                                \n    readonly steps: Array<CfnWorkflow.WorkflowStepProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                               \n    readonly description?: string;\n\n                                                                                                                                                                                                                                                                                     \n    readonly onExceptionSteps?: Array<CfnWorkflow.WorkflowStepProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                    \n    readonly tags?: cdk.CfnTag[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnWorkflowProps`\n *\n * @param properties - the TypeScript properties of a `CfnWorkflowProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnWorkflowPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));\n    errors.collect(cdk.propertyValidator('onExceptionSteps', cdk.listValidator(CfnWorkflow_WorkflowStepPropertyValidator))(properties.onExceptionSteps));\n    errors.collect(cdk.propertyValidator('steps', cdk.requiredValidator)(properties.steps));\n    errors.collect(cdk.propertyValidator('steps', cdk.listValidator(CfnWorkflow_WorkflowStepPropertyValidator))(properties.steps));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateCfnTag))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnWorkflowProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Transfer::Workflow` resource\n *\n * @param properties - the TypeScript properties of a `CfnWorkflowProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Transfer::Workflow` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWorkflowPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWorkflowPropsValidator(properties).assertSuccess();\n    return {\n        Steps: cdk.listMapper(cfnWorkflowWorkflowStepPropertyToCloudFormation)(properties.steps),\n        Description: cdk.stringToCloudFormation(properties.description),\n        OnExceptionSteps: cdk.listMapper(cfnWorkflowWorkflowStepPropertyToCloudFormation)(properties.onExceptionSteps),\n        Tags: cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWorkflowPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWorkflowProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWorkflowProps>();\n    ret.addPropertyResult('steps', 'Steps', cfn_parse.FromCloudFormation.getArray(CfnWorkflowWorkflowStepPropertyFromCloudFormation)(properties.Steps));\n    ret.addPropertyResult('description', 'Description', properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined);\n    ret.addPropertyResult('onExceptionSteps', 'OnExceptionSteps', properties.OnExceptionSteps != null ? cfn_parse.FromCloudFormation.getArray(CfnWorkflowWorkflowStepPropertyFromCloudFormation)(properties.OnExceptionSteps) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnWorkflow extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::Transfer::Workflow\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnWorkflow {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnWorkflowPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnWorkflow(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                          \n    public readonly attrArn: string;\n\n                                                                                                     \n    public readonly attrWorkflowId: string;\n\n                                                                                                                                                                                                                                                \n    public steps: Array<CfnWorkflow.WorkflowStepProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                               \n    public description: string | undefined;\n\n                                                                                                                                                                                                                                                                                     \n    public onExceptionSteps: Array<CfnWorkflow.WorkflowStepProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                    \n    public readonly tags: cdk.TagManager;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnWorkflowProps) {\n        super(scope, id, { type: CfnWorkflow.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'steps', this);\n        this.attrArn = cdk.Token.asString(this.getAtt('Arn'));\n        this.attrWorkflowId = cdk.Token.asString(this.getAtt('WorkflowId'));\n\n        this.steps = props.steps;\n        this.description = props.description;\n        this.onExceptionSteps = props.onExceptionSteps;\n        this.tags = new cdk.TagManager(cdk.TagType.STANDARD, \"AWS::Transfer::Workflow\", props.tags, { tagPropertyName: 'tags' });\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnWorkflow.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            steps: this.steps,\n            description: this.description,\n            onExceptionSteps: this.onExceptionSteps,\n            tags: this.tags.renderTags(),\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnWorkflowPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnWorkflow {\n                                                                                                                                                                                                                                                    \n    export interface WorkflowStepProperty {\nn        readonly copyStepDetails?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                               \n        readonly customStepDetails?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                              \n        readonly deleteStepDetails?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                     \n        readonly tagStepDetails?: any | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly type?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `WorkflowStepProperty`\n *\n * @param properties - the TypeScript properties of a `WorkflowStepProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnWorkflow_WorkflowStepPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('copyStepDetails', cdk.validateObject)(properties.copyStepDetails));\n    errors.collect(cdk.propertyValidator('customStepDetails', cdk.validateObject)(properties.customStepDetails));\n    errors.collect(cdk.propertyValidator('deleteStepDetails', cdk.validateObject)(properties.deleteStepDetails));\n    errors.collect(cdk.propertyValidator('tagStepDetails', cdk.validateObject)(properties.tagStepDetails));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"WorkflowStepProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::Transfer::Workflow.WorkflowStep` resource\n *\n * @param properties - the TypeScript properties of a `WorkflowStepProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::Transfer::Workflow.WorkflowStep` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWorkflowWorkflowStepPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWorkflow_WorkflowStepPropertyValidator(properties).assertSuccess();\n    return {\n        CopyStepDetails: cdk.objectToCloudFormation(properties.copyStepDetails),\n        CustomStepDetails: cdk.objectToCloudFormation(properties.customStepDetails),\n        DeleteStepDetails: cdk.objectToCloudFormation(properties.deleteStepDetails),\n        TagStepDetails: cdk.objectToCloudFormation(properties.tagStepDetails),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWorkflowWorkflowStepPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWorkflow.WorkflowStepProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWorkflow.WorkflowStepProperty>();\n    ret.addPropertyResult('copyStepDetails', 'CopyStepDetails', properties.CopyStepDetails != null ? cfn_parse.FromCloudFormation.getAny(properties.CopyStepDetails) : undefined);\n    ret.addPropertyResult('customStepDetails', 'CustomStepDetails', properties.CustomStepDetails != null ? cfn_parse.FromCloudFormation.getAny(properties.CustomStepDetails) : undefined);\n    ret.addPropertyResult('deleteStepDetails', 'DeleteStepDetails', properties.DeleteStepDetails != null ? cfn_parse.FromCloudFormation.getAny(properties.DeleteStepDetails) : undefined);\n    ret.addPropertyResult('tagStepDetails', 'TagStepDetails', properties.TagStepDetails != null ? cfn_parse.FromCloudFormation.getAny(properties.TagStepDetails) : undefined);\n    ret.addPropertyResult('type', 'Type', properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
