{
  "version": 3,
  "sources": ["waf.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:34.230Z\",\"fingerprint\":\"8njsPD6PDZxZqfHG4TMbC7cKBytkEJWPaFcuim8Oj2k=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                                        \nexport interface CfnByteMatchSetProps {\n\n                                                                                                                                                                                                                                                                  \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                   \n    readonly byteMatchTuples?: Array<CfnByteMatchSet.ByteMatchTupleProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnByteMatchSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnByteMatchSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnByteMatchSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('byteMatchTuples', cdk.listValidator(CfnByteMatchSet_ByteMatchTuplePropertyValidator))(properties.byteMatchTuples));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CfnByteMatchSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::ByteMatchSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnByteMatchSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::ByteMatchSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnByteMatchSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnByteMatchSetPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        ByteMatchTuples: cdk.listMapper(cfnByteMatchSetByteMatchTuplePropertyToCloudFormation)(properties.byteMatchTuples),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnByteMatchSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnByteMatchSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnByteMatchSetProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('byteMatchTuples', 'ByteMatchTuples', properties.ByteMatchTuples != null ? cfn_parse.FromCloudFormation.getArray(CfnByteMatchSetByteMatchTuplePropertyFromCloudFormation)(properties.ByteMatchTuples) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \nexport class CfnByteMatchSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::WAF::ByteMatchSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnByteMatchSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnByteMatchSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnByteMatchSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                  \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                   \n    public byteMatchTuples: Array<CfnByteMatchSet.ByteMatchTupleProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                            \n    constructor(scope: constructs.Construct, id: string, props: CfnByteMatchSetProps) {\n        super(scope, id, { type: CfnByteMatchSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n\n        this.name = props.name;\n        this.byteMatchTuples = props.byteMatchTuples;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnByteMatchSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            byteMatchTuples: this.byteMatchTuples,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnByteMatchSetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnByteMatchSet {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \n    export interface ByteMatchTupleProperty {\n                                                                                                                                                                                                                                                                                                                                     \n        readonly fieldToMatch: CfnByteMatchSet.FieldToMatchProperty | cdk.IResolvable;\nn        readonly positionalConstraint: string;\nn        readonly targetString?: string;\nn        readonly targetStringBase64?: string;\nn        readonly textTransformation: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ByteMatchTupleProperty`\n *\n * @param properties - the TypeScript properties of a `ByteMatchTupleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnByteMatchSet_ByteMatchTuplePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('fieldToMatch', cdk.requiredValidator)(properties.fieldToMatch));\n    errors.collect(cdk.propertyValidator('fieldToMatch', CfnByteMatchSet_FieldToMatchPropertyValidator)(properties.fieldToMatch));\n    errors.collect(cdk.propertyValidator('positionalConstraint', cdk.requiredValidator)(properties.positionalConstraint));\n    errors.collect(cdk.propertyValidator('positionalConstraint', cdk.validateString)(properties.positionalConstraint));\n    errors.collect(cdk.propertyValidator('targetString', cdk.validateString)(properties.targetString));\n    errors.collect(cdk.propertyValidator('targetStringBase64', cdk.validateString)(properties.targetStringBase64));\n    errors.collect(cdk.propertyValidator('textTransformation', cdk.requiredValidator)(properties.textTransformation));\n    errors.collect(cdk.propertyValidator('textTransformation', cdk.validateString)(properties.textTransformation));\n    return errors.wrap('supplied properties not correct for \"ByteMatchTupleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::ByteMatchSet.ByteMatchTuple` resource\n *\n * @param properties - the TypeScript properties of a `ByteMatchTupleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::ByteMatchSet.ByteMatchTuple` resource.\n */\n// @ts-ignore TS6133\nfunction cfnByteMatchSetByteMatchTuplePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnByteMatchSet_ByteMatchTuplePropertyValidator(properties).assertSuccess();\n    return {\n        FieldToMatch: cfnByteMatchSetFieldToMatchPropertyToCloudFormation(properties.fieldToMatch),\n        PositionalConstraint: cdk.stringToCloudFormation(properties.positionalConstraint),\n        TargetString: cdk.stringToCloudFormation(properties.targetString),\n        TargetStringBase64: cdk.stringToCloudFormation(properties.targetStringBase64),\n        TextTransformation: cdk.stringToCloudFormation(properties.textTransformation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnByteMatchSetByteMatchTuplePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnByteMatchSet.ByteMatchTupleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnByteMatchSet.ByteMatchTupleProperty>();\n    ret.addPropertyResult('fieldToMatch', 'FieldToMatch', CfnByteMatchSetFieldToMatchPropertyFromCloudFormation(properties.FieldToMatch));\n    ret.addPropertyResult('positionalConstraint', 'PositionalConstraint', cfn_parse.FromCloudFormation.getString(properties.PositionalConstraint));\n    ret.addPropertyResult('targetString', 'TargetString', properties.TargetString != null ? cfn_parse.FromCloudFormation.getString(properties.TargetString) : undefined);\n    ret.addPropertyResult('targetStringBase64', 'TargetStringBase64', properties.TargetStringBase64 != null ? cfn_parse.FromCloudFormation.getString(properties.TargetStringBase64) : undefined);\n    ret.addPropertyResult('textTransformation', 'TextTransformation', cfn_parse.FromCloudFormation.getString(properties.TextTransformation));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnByteMatchSet {\nn    export interface FieldToMatchProperty {\nn        readonly data?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FieldToMatchProperty`\n *\n * @param properties - the TypeScript properties of a `FieldToMatchProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnByteMatchSet_FieldToMatchPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('data', cdk.validateString)(properties.data));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"FieldToMatchProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::ByteMatchSet.FieldToMatch` resource\n *\n * @param properties - the TypeScript properties of a `FieldToMatchProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::ByteMatchSet.FieldToMatch` resource.\n */\n// @ts-ignore TS6133\nfunction cfnByteMatchSetFieldToMatchPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnByteMatchSet_FieldToMatchPropertyValidator(properties).assertSuccess();\n    return {\n        Data: cdk.stringToCloudFormation(properties.data),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnByteMatchSetFieldToMatchPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnByteMatchSet.FieldToMatchProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnByteMatchSet.FieldToMatchProperty>();\n    ret.addPropertyResult('data', 'Data', properties.Data != null ? cfn_parse.FromCloudFormation.getString(properties.Data) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                          \nexport interface CfnIPSetProps {\n\n                                                                                                                                                                                                                                              \n    readonly name: string;\n\nn    readonly ipSetDescriptors?: Array<CfnIPSet.IPSetDescriptorProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnIPSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnIPSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnIPSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ipSetDescriptors', cdk.listValidator(CfnIPSet_IPSetDescriptorPropertyValidator))(properties.ipSetDescriptors));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    return errors.wrap('supplied properties not correct for \"CfnIPSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::IPSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnIPSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::IPSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIPSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIPSetPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        IPSetDescriptors: cdk.listMapper(cfnIPSetIPSetDescriptorPropertyToCloudFormation)(properties.ipSetDescriptors),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIPSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIPSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIPSetProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('ipSetDescriptors', 'IPSetDescriptors', properties.IPSetDescriptors != null ? cfn_parse.FromCloudFormation.getArray(CfnIPSetIPSetDescriptorPropertyFromCloudFormation)(properties.IPSetDescriptors) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnIPSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::WAF::IPSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnIPSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnIPSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnIPSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                              \n    public name: string;\n\nn    public ipSetDescriptors: Array<CfnIPSet.IPSetDescriptorProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                     \n    constructor(scope: constructs.Construct, id: string, props: CfnIPSetProps) {\n        super(scope, id, { type: CfnIPSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n\n        this.name = props.name;\n        this.ipSetDescriptors = props.ipSetDescriptors;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnIPSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            ipSetDescriptors: this.ipSetDescriptors,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnIPSetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnIPSet {\nn    export interface IPSetDescriptorProperty {\n                                                                                                                                                                                                                                          \n        readonly type: string;\nn        readonly value: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `IPSetDescriptorProperty`\n *\n * @param properties - the TypeScript properties of a `IPSetDescriptorProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnIPSet_IPSetDescriptorPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    errors.collect(cdk.propertyValidator('value', cdk.requiredValidator)(properties.value));\n    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));\n    return errors.wrap('supplied properties not correct for \"IPSetDescriptorProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::IPSet.IPSetDescriptor` resource\n *\n * @param properties - the TypeScript properties of a `IPSetDescriptorProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::IPSet.IPSetDescriptor` resource.\n */\n// @ts-ignore TS6133\nfunction cfnIPSetIPSetDescriptorPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnIPSet_IPSetDescriptorPropertyValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n        Value: cdk.stringToCloudFormation(properties.value),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnIPSetIPSetDescriptorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnIPSet.IPSetDescriptorProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnIPSet.IPSetDescriptorProperty>();\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addPropertyResult('value', 'Value', cfn_parse.FromCloudFormation.getString(properties.Value));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                        \nexport interface CfnRuleProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly metricName: string;\n\n                                                                                                                                                                                                                                                                  \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                                                \n    readonly predicates?: Array<CfnRule.PredicateProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnRuleProps`\n *\n * @param properties - the TypeScript properties of a `CfnRuleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnRulePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('metricName', cdk.requiredValidator)(properties.metricName));\n    errors.collect(cdk.propertyValidator('metricName', cdk.validateString)(properties.metricName));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('predicates', cdk.listValidator(CfnRule_PredicatePropertyValidator))(properties.predicates));\n    return errors.wrap('supplied properties not correct for \"CfnRuleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::Rule` resource\n *\n * @param properties - the TypeScript properties of a `CfnRuleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::Rule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRulePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRulePropsValidator(properties).assertSuccess();\n    return {\n        MetricName: cdk.stringToCloudFormation(properties.metricName),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Predicates: cdk.listMapper(cfnRulePredicatePropertyToCloudFormation)(properties.predicates),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRuleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRuleProps>();\n    ret.addPropertyResult('metricName', 'MetricName', cfn_parse.FromCloudFormation.getString(properties.MetricName));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('predicates', 'Predicates', properties.Predicates != null ? cfn_parse.FromCloudFormation.getArray(CfnRulePredicatePropertyFromCloudFormation)(properties.Predicates) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnRule extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::WAF::Rule\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnRule {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnRulePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnRule(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public metricName: string;\n\n                                                                                                                                                                                                                                                                  \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                                                \n    public predicates: Array<CfnRule.PredicateProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnRuleProps) {\n        super(scope, id, { type: CfnRule.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'metricName', this);\n        cdk.requireProperty(props, 'name', this);\n\n        this.metricName = props.metricName;\n        this.name = props.name;\n        this.predicates = props.predicates;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnRule.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            metricName: this.metricName,\n            name: this.name,\n            predicates: this.predicates,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnRulePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    export interface PredicateProperty {\n                                                                                                                                                                                                                                                                                                                                                                 \n        readonly dataId: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n        readonly negated: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                      \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `PredicateProperty`\n *\n * @param properties - the TypeScript properties of a `PredicateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnRule_PredicatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('dataId', cdk.requiredValidator)(properties.dataId));\n    errors.collect(cdk.propertyValidator('dataId', cdk.validateString)(properties.dataId));\n    errors.collect(cdk.propertyValidator('negated', cdk.requiredValidator)(properties.negated));\n    errors.collect(cdk.propertyValidator('negated', cdk.validateBoolean)(properties.negated));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"PredicateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::Rule.Predicate` resource\n *\n * @param properties - the TypeScript properties of a `PredicateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::Rule.Predicate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnRulePredicatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnRule_PredicatePropertyValidator(properties).assertSuccess();\n    return {\n        DataId: cdk.stringToCloudFormation(properties.dataId),\n        Negated: cdk.booleanToCloudFormation(properties.negated),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnRulePredicatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnRule.PredicateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnRule.PredicateProperty>();\n    ret.addPropertyResult('dataId', 'DataId', cfn_parse.FromCloudFormation.getString(properties.DataId));\n    ret.addPropertyResult('negated', 'Negated', cfn_parse.FromCloudFormation.getBoolean(properties.Negated));\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                  \nexport interface CfnSizeConstraintSetProps {\n\n                                                                                                                                                                                                                              \n    readonly name: string;\n\n                                                                                                                                                                                                                                                        \n    readonly sizeConstraints: Array<CfnSizeConstraintSet.SizeConstraintProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSizeConstraintSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnSizeConstraintSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSizeConstraintSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('sizeConstraints', cdk.requiredValidator)(properties.sizeConstraints));\n    errors.collect(cdk.propertyValidator('sizeConstraints', cdk.listValidator(CfnSizeConstraintSet_SizeConstraintPropertyValidator))(properties.sizeConstraints));\n    return errors.wrap('supplied properties not correct for \"CfnSizeConstraintSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::SizeConstraintSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnSizeConstraintSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::SizeConstraintSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSizeConstraintSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSizeConstraintSetPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        SizeConstraints: cdk.listMapper(cfnSizeConstraintSetSizeConstraintPropertyToCloudFormation)(properties.sizeConstraints),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSizeConstraintSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSizeConstraintSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSizeConstraintSetProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('sizeConstraints', 'SizeConstraints', cfn_parse.FromCloudFormation.getArray(CfnSizeConstraintSetSizeConstraintPropertyFromCloudFormation)(properties.SizeConstraints));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSizeConstraintSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::WAF::SizeConstraintSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSizeConstraintSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSizeConstraintSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSizeConstraintSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                              \n    public name: string;\n\n                                                                                                                                                                                                                                                        \n    public sizeConstraints: Array<CfnSizeConstraintSet.SizeConstraintProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                                 \n    constructor(scope: constructs.Construct, id: string, props: CfnSizeConstraintSetProps) {\n        super(scope, id, { type: CfnSizeConstraintSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'sizeConstraints', this);\n\n        this.name = props.name;\n        this.sizeConstraints = props.sizeConstraints;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSizeConstraintSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            sizeConstraints: this.sizeConstraints,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSizeConstraintSetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnSizeConstraintSet {\n                                                                                                                                                                                                                                                                                                                                 \n    export interface FieldToMatchProperty {\nn        readonly data?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FieldToMatchProperty`\n *\n * @param properties - the TypeScript properties of a `FieldToMatchProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSizeConstraintSet_FieldToMatchPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('data', cdk.validateString)(properties.data));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"FieldToMatchProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::SizeConstraintSet.FieldToMatch` resource\n *\n * @param properties - the TypeScript properties of a `FieldToMatchProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::SizeConstraintSet.FieldToMatch` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSizeConstraintSetFieldToMatchPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSizeConstraintSet_FieldToMatchPropertyValidator(properties).assertSuccess();\n    return {\n        Data: cdk.stringToCloudFormation(properties.data),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSizeConstraintSetFieldToMatchPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSizeConstraintSet.FieldToMatchProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSizeConstraintSet.FieldToMatchProperty>();\n    ret.addPropertyResult('data', 'Data', properties.Data != null ? cfn_parse.FromCloudFormation.getString(properties.Data) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSizeConstraintSet {\nn    export interface SizeConstraintProperty {\nn        readonly comparisonOperator: string;\n                                                                                                                                                                                                                                                                                                                                             \n        readonly fieldToMatch: CfnSizeConstraintSet.FieldToMatchProperty | cdk.IResolvable;\nn        readonly size: number;\nn        readonly textTransformation: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SizeConstraintProperty`\n *\n * @param properties - the TypeScript properties of a `SizeConstraintProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSizeConstraintSet_SizeConstraintPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('comparisonOperator', cdk.requiredValidator)(properties.comparisonOperator));\n    errors.collect(cdk.propertyValidator('comparisonOperator', cdk.validateString)(properties.comparisonOperator));\n    errors.collect(cdk.propertyValidator('fieldToMatch', cdk.requiredValidator)(properties.fieldToMatch));\n    errors.collect(cdk.propertyValidator('fieldToMatch', CfnSizeConstraintSet_FieldToMatchPropertyValidator)(properties.fieldToMatch));\n    errors.collect(cdk.propertyValidator('size', cdk.requiredValidator)(properties.size));\n    errors.collect(cdk.propertyValidator('size', cdk.validateNumber)(properties.size));\n    errors.collect(cdk.propertyValidator('textTransformation', cdk.requiredValidator)(properties.textTransformation));\n    errors.collect(cdk.propertyValidator('textTransformation', cdk.validateString)(properties.textTransformation));\n    return errors.wrap('supplied properties not correct for \"SizeConstraintProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::SizeConstraintSet.SizeConstraint` resource\n *\n * @param properties - the TypeScript properties of a `SizeConstraintProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::SizeConstraintSet.SizeConstraint` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSizeConstraintSetSizeConstraintPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSizeConstraintSet_SizeConstraintPropertyValidator(properties).assertSuccess();\n    return {\n        ComparisonOperator: cdk.stringToCloudFormation(properties.comparisonOperator),\n        FieldToMatch: cfnSizeConstraintSetFieldToMatchPropertyToCloudFormation(properties.fieldToMatch),\n        Size: cdk.numberToCloudFormation(properties.size),\n        TextTransformation: cdk.stringToCloudFormation(properties.textTransformation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSizeConstraintSetSizeConstraintPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSizeConstraintSet.SizeConstraintProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSizeConstraintSet.SizeConstraintProperty>();\n    ret.addPropertyResult('comparisonOperator', 'ComparisonOperator', cfn_parse.FromCloudFormation.getString(properties.ComparisonOperator));\n    ret.addPropertyResult('fieldToMatch', 'FieldToMatch', CfnSizeConstraintSetFieldToMatchPropertyFromCloudFormation(properties.FieldToMatch));\n    ret.addPropertyResult('size', 'Size', cfn_parse.FromCloudFormation.getNumber(properties.Size));\n    ret.addPropertyResult('textTransformation', 'TextTransformation', cfn_parse.FromCloudFormation.getString(properties.TextTransformation));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                        \nexport interface CfnSqlInjectionMatchSetProps {\n\n                                                                                                                                                                                                                                       \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                                         \n    readonly sqlInjectionMatchTuples?: Array<CfnSqlInjectionMatchSet.SqlInjectionMatchTupleProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSqlInjectionMatchSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnSqlInjectionMatchSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSqlInjectionMatchSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('sqlInjectionMatchTuples', cdk.listValidator(CfnSqlInjectionMatchSet_SqlInjectionMatchTuplePropertyValidator))(properties.sqlInjectionMatchTuples));\n    return errors.wrap('supplied properties not correct for \"CfnSqlInjectionMatchSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::SqlInjectionMatchSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnSqlInjectionMatchSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::SqlInjectionMatchSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSqlInjectionMatchSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSqlInjectionMatchSetPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        SqlInjectionMatchTuples: cdk.listMapper(cfnSqlInjectionMatchSetSqlInjectionMatchTuplePropertyToCloudFormation)(properties.sqlInjectionMatchTuples),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSqlInjectionMatchSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSqlInjectionMatchSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSqlInjectionMatchSetProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('sqlInjectionMatchTuples', 'SqlInjectionMatchTuples', properties.SqlInjectionMatchTuples != null ? cfn_parse.FromCloudFormation.getArray(CfnSqlInjectionMatchSetSqlInjectionMatchTuplePropertyFromCloudFormation)(properties.SqlInjectionMatchTuples) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSqlInjectionMatchSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::WAF::SqlInjectionMatchSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSqlInjectionMatchSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSqlInjectionMatchSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSqlInjectionMatchSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                       \n    public name: string;\n\n                                                                                                                                                                                                                                                                                                         \n    public sqlInjectionMatchTuples: Array<CfnSqlInjectionMatchSet.SqlInjectionMatchTupleProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                    \n    constructor(scope: constructs.Construct, id: string, props: CfnSqlInjectionMatchSetProps) {\n        super(scope, id, { type: CfnSqlInjectionMatchSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n\n        this.name = props.name;\n        this.sqlInjectionMatchTuples = props.sqlInjectionMatchTuples;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSqlInjectionMatchSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            sqlInjectionMatchTuples: this.sqlInjectionMatchTuples,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSqlInjectionMatchSetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnSqlInjectionMatchSet {\n                                                                                                                                                                                                                                                                                                                             \n    export interface FieldToMatchProperty {\nn        readonly data?: string;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FieldToMatchProperty`\n *\n * @param properties - the TypeScript properties of a `FieldToMatchProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSqlInjectionMatchSet_FieldToMatchPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('data', cdk.validateString)(properties.data));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"FieldToMatchProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::SqlInjectionMatchSet.FieldToMatch` resource\n *\n * @param properties - the TypeScript properties of a `FieldToMatchProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::SqlInjectionMatchSet.FieldToMatch` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSqlInjectionMatchSetFieldToMatchPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSqlInjectionMatchSet_FieldToMatchPropertyValidator(properties).assertSuccess();\n    return {\n        Data: cdk.stringToCloudFormation(properties.data),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSqlInjectionMatchSetFieldToMatchPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSqlInjectionMatchSet.FieldToMatchProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSqlInjectionMatchSet.FieldToMatchProperty>();\n    ret.addPropertyResult('data', 'Data', properties.Data != null ? cfn_parse.FromCloudFormation.getString(properties.Data) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSqlInjectionMatchSet {\nn    export interface SqlInjectionMatchTupleProperty {\n                                                                                                                                                                                                                                                                                                                                                                     \n        readonly fieldToMatch: CfnSqlInjectionMatchSet.FieldToMatchProperty | cdk.IResolvable;\nn        readonly textTransformation: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SqlInjectionMatchTupleProperty`\n *\n * @param properties - the TypeScript properties of a `SqlInjectionMatchTupleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSqlInjectionMatchSet_SqlInjectionMatchTuplePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('fieldToMatch', cdk.requiredValidator)(properties.fieldToMatch));\n    errors.collect(cdk.propertyValidator('fieldToMatch', CfnSqlInjectionMatchSet_FieldToMatchPropertyValidator)(properties.fieldToMatch));\n    errors.collect(cdk.propertyValidator('textTransformation', cdk.requiredValidator)(properties.textTransformation));\n    errors.collect(cdk.propertyValidator('textTransformation', cdk.validateString)(properties.textTransformation));\n    return errors.wrap('supplied properties not correct for \"SqlInjectionMatchTupleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::SqlInjectionMatchSet.SqlInjectionMatchTuple` resource\n *\n * @param properties - the TypeScript properties of a `SqlInjectionMatchTupleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::SqlInjectionMatchSet.SqlInjectionMatchTuple` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSqlInjectionMatchSetSqlInjectionMatchTuplePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSqlInjectionMatchSet_SqlInjectionMatchTuplePropertyValidator(properties).assertSuccess();\n    return {\n        FieldToMatch: cfnSqlInjectionMatchSetFieldToMatchPropertyToCloudFormation(properties.fieldToMatch),\n        TextTransformation: cdk.stringToCloudFormation(properties.textTransformation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSqlInjectionMatchSetSqlInjectionMatchTuplePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSqlInjectionMatchSet.SqlInjectionMatchTupleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSqlInjectionMatchSet.SqlInjectionMatchTupleProperty>();\n    ret.addPropertyResult('fieldToMatch', 'FieldToMatch', CfnSqlInjectionMatchSetFieldToMatchPropertyFromCloudFormation(properties.FieldToMatch));\n    ret.addPropertyResult('textTransformation', 'TextTransformation', cfn_parse.FromCloudFormation.getString(properties.TextTransformation));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                            \nexport interface CfnWebACLProps {\n\n                                                                                                                                                                                                                                                                                                   \n    readonly defaultAction: CfnWebACL.WafActionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    readonly metricName: string;\n\n                                                                                                                                                                                                                                                                       \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                                    \n    readonly rules?: Array<CfnWebACL.ActivatedRuleProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnWebACLProps`\n *\n * @param properties - the TypeScript properties of a `CfnWebACLProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnWebACLPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('defaultAction', cdk.requiredValidator)(properties.defaultAction));\n    errors.collect(cdk.propertyValidator('defaultAction', CfnWebACL_WafActionPropertyValidator)(properties.defaultAction));\n    errors.collect(cdk.propertyValidator('metricName', cdk.requiredValidator)(properties.metricName));\n    errors.collect(cdk.propertyValidator('metricName', cdk.validateString)(properties.metricName));\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('rules', cdk.listValidator(CfnWebACL_ActivatedRulePropertyValidator))(properties.rules));\n    return errors.wrap('supplied properties not correct for \"CfnWebACLProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::WebACL` resource\n *\n * @param properties - the TypeScript properties of a `CfnWebACLProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::WebACL` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWebACLPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWebACLPropsValidator(properties).assertSuccess();\n    return {\n        DefaultAction: cfnWebACLWafActionPropertyToCloudFormation(properties.defaultAction),\n        MetricName: cdk.stringToCloudFormation(properties.metricName),\n        Name: cdk.stringToCloudFormation(properties.name),\n        Rules: cdk.listMapper(cfnWebACLActivatedRulePropertyToCloudFormation)(properties.rules),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWebACLPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWebACLProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWebACLProps>();\n    ret.addPropertyResult('defaultAction', 'DefaultAction', CfnWebACLWafActionPropertyFromCloudFormation(properties.DefaultAction));\n    ret.addPropertyResult('metricName', 'MetricName', cfn_parse.FromCloudFormation.getString(properties.MetricName));\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('rules', 'Rules', properties.Rules != null ? cfn_parse.FromCloudFormation.getArray(CfnWebACLActivatedRulePropertyFromCloudFormation)(properties.Rules) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnWebACL extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::WAF::WebACL\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnWebACL {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnWebACLPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnWebACL(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                                                                                                                   \n    public defaultAction: CfnWebACL.WafActionProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n    public metricName: string;\n\n                                                                                                                                                                                                                                                                       \n    public name: string;\n\n                                                                                                                                                                                                                                                                                    \n    public rules: Array<CfnWebACL.ActivatedRuleProperty | cdk.IResolvable> | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnWebACLProps) {\n        super(scope, id, { type: CfnWebACL.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'defaultAction', this);\n        cdk.requireProperty(props, 'metricName', this);\n        cdk.requireProperty(props, 'name', this);\n\n        this.defaultAction = props.defaultAction;\n        this.metricName = props.metricName;\n        this.name = props.name;\n        this.rules = props.rules;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnWebACL.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            defaultAction: this.defaultAction,\n            metricName: this.metricName,\n            name: this.name,\n            rules: this.rules,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnWebACLPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnWebACL {\nn    export interface ActivatedRuleProperty {\nn        readonly action?: CfnWebACL.WafActionProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n        readonly priority: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly ruleId: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `ActivatedRuleProperty`\n *\n * @param properties - the TypeScript properties of a `ActivatedRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnWebACL_ActivatedRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('action', CfnWebACL_WafActionPropertyValidator)(properties.action));\n    errors.collect(cdk.propertyValidator('priority', cdk.requiredValidator)(properties.priority));\n    errors.collect(cdk.propertyValidator('priority', cdk.validateNumber)(properties.priority));\n    errors.collect(cdk.propertyValidator('ruleId', cdk.requiredValidator)(properties.ruleId));\n    errors.collect(cdk.propertyValidator('ruleId', cdk.validateString)(properties.ruleId));\n    return errors.wrap('supplied properties not correct for \"ActivatedRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::WebACL.ActivatedRule` resource\n *\n * @param properties - the TypeScript properties of a `ActivatedRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::WebACL.ActivatedRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWebACLActivatedRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWebACL_ActivatedRulePropertyValidator(properties).assertSuccess();\n    return {\n        Action: cfnWebACLWafActionPropertyToCloudFormation(properties.action),\n        Priority: cdk.numberToCloudFormation(properties.priority),\n        RuleId: cdk.stringToCloudFormation(properties.ruleId),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWebACLActivatedRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWebACL.ActivatedRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWebACL.ActivatedRuleProperty>();\n    ret.addPropertyResult('action', 'Action', properties.Action != null ? CfnWebACLWafActionPropertyFromCloudFormation(properties.Action) : undefined);\n    ret.addPropertyResult('priority', 'Priority', cfn_parse.FromCloudFormation.getNumber(properties.Priority));\n    ret.addPropertyResult('ruleId', 'RuleId', cfn_parse.FromCloudFormation.getString(properties.RuleId));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnWebACL {\nn    export interface WafActionProperty {\nn        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `WafActionProperty`\n *\n * @param properties - the TypeScript properties of a `WafActionProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnWebACL_WafActionPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"WafActionProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::WebACL.WafAction` resource\n *\n * @param properties - the TypeScript properties of a `WafActionProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::WebACL.WafAction` resource.\n */\n// @ts-ignore TS6133\nfunction cfnWebACLWafActionPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnWebACL_WafActionPropertyValidator(properties).assertSuccess();\n    return {\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnWebACLWafActionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWebACL.WafActionProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWebACL.WafActionProperty>();\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                      \nexport interface CfnXssMatchSetProps {\n\n                                                                                                                                                                                                            \n    readonly name: string;\n\n                                                                                                                                                                                                                                                                            \n    readonly xssMatchTuples: Array<CfnXssMatchSet.XssMatchTupleProperty | cdk.IResolvable> | cdk.IResolvable;\n}\n\n/**\n * Determine whether the given properties match those of a `CfnXssMatchSetProps`\n *\n * @param properties - the TypeScript properties of a `CfnXssMatchSetProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnXssMatchSetPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('name', cdk.requiredValidator)(properties.name));\n    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));\n    errors.collect(cdk.propertyValidator('xssMatchTuples', cdk.requiredValidator)(properties.xssMatchTuples));\n    errors.collect(cdk.propertyValidator('xssMatchTuples', cdk.listValidator(CfnXssMatchSet_XssMatchTuplePropertyValidator))(properties.xssMatchTuples));\n    return errors.wrap('supplied properties not correct for \"CfnXssMatchSetProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::XssMatchSet` resource\n *\n * @param properties - the TypeScript properties of a `CfnXssMatchSetProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::XssMatchSet` resource.\n */\n// @ts-ignore TS6133\nfunction cfnXssMatchSetPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnXssMatchSetPropsValidator(properties).assertSuccess();\n    return {\n        Name: cdk.stringToCloudFormation(properties.name),\n        XssMatchTuples: cdk.listMapper(cfnXssMatchSetXssMatchTuplePropertyToCloudFormation)(properties.xssMatchTuples),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnXssMatchSetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnXssMatchSetProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnXssMatchSetProps>();\n    ret.addPropertyResult('name', 'Name', cfn_parse.FromCloudFormation.getString(properties.Name));\n    ret.addPropertyResult('xssMatchTuples', 'XssMatchTuples', cfn_parse.FromCloudFormation.getArray(CfnXssMatchSetXssMatchTuplePropertyFromCloudFormation)(properties.XssMatchTuples));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnXssMatchSet extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::WAF::XssMatchSet\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnXssMatchSet {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnXssMatchSetPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnXssMatchSet(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                                                                                                            \n    public name: string;\n\n                                                                                                                                                                                                                                                                            \n    public xssMatchTuples: Array<CfnXssMatchSet.XssMatchTupleProperty | cdk.IResolvable> | cdk.IResolvable;\n\n                                                                                                                                                                                                                           \n    constructor(scope: constructs.Construct, id: string, props: CfnXssMatchSetProps) {\n        super(scope, id, { type: CfnXssMatchSet.CFN_RESOURCE_TYPE_NAME, properties: props });\n        cdk.requireProperty(props, 'name', this);\n        cdk.requireProperty(props, 'xssMatchTuples', this);\n\n        this.name = props.name;\n        this.xssMatchTuples = props.xssMatchTuples;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnXssMatchSet.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            name: this.name,\n            xssMatchTuples: this.xssMatchTuples,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnXssMatchSetPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnXssMatchSet {\n                                                                                                                                                                                                                                                                                                                          \n    export interface FieldToMatchProperty {\nn        readonly data?: string;\nn        readonly type: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `FieldToMatchProperty`\n *\n * @param properties - the TypeScript properties of a `FieldToMatchProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnXssMatchSet_FieldToMatchPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('data', cdk.validateString)(properties.data));\n    errors.collect(cdk.propertyValidator('type', cdk.requiredValidator)(properties.type));\n    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));\n    return errors.wrap('supplied properties not correct for \"FieldToMatchProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::XssMatchSet.FieldToMatch` resource\n *\n * @param properties - the TypeScript properties of a `FieldToMatchProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::XssMatchSet.FieldToMatch` resource.\n */\n// @ts-ignore TS6133\nfunction cfnXssMatchSetFieldToMatchPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnXssMatchSet_FieldToMatchPropertyValidator(properties).assertSuccess();\n    return {\n        Data: cdk.stringToCloudFormation(properties.data),\n        Type: cdk.stringToCloudFormation(properties.type),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnXssMatchSetFieldToMatchPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnXssMatchSet.FieldToMatchProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnXssMatchSet.FieldToMatchProperty>();\n    ret.addPropertyResult('data', 'Data', properties.Data != null ? cfn_parse.FromCloudFormation.getString(properties.Data) : undefined);\n    ret.addPropertyResult('type', 'Type', cfn_parse.FromCloudFormation.getString(properties.Type));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnXssMatchSet {\nn    export interface XssMatchTupleProperty {\n                                                                                                                                                                                                                                                                                                                               \n        readonly fieldToMatch: CfnXssMatchSet.FieldToMatchProperty | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n        readonly textTransformation: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `XssMatchTupleProperty`\n *\n * @param properties - the TypeScript properties of a `XssMatchTupleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnXssMatchSet_XssMatchTuplePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('fieldToMatch', cdk.requiredValidator)(properties.fieldToMatch));\n    errors.collect(cdk.propertyValidator('fieldToMatch', CfnXssMatchSet_FieldToMatchPropertyValidator)(properties.fieldToMatch));\n    errors.collect(cdk.propertyValidator('textTransformation', cdk.requiredValidator)(properties.textTransformation));\n    errors.collect(cdk.propertyValidator('textTransformation', cdk.validateString)(properties.textTransformation));\n    return errors.wrap('supplied properties not correct for \"XssMatchTupleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::WAF::XssMatchSet.XssMatchTuple` resource\n *\n * @param properties - the TypeScript properties of a `XssMatchTupleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::WAF::XssMatchSet.XssMatchTuple` resource.\n */\n// @ts-ignore TS6133\nfunction cfnXssMatchSetXssMatchTuplePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnXssMatchSet_XssMatchTuplePropertyValidator(properties).assertSuccess();\n    return {\n        FieldToMatch: cfnXssMatchSetFieldToMatchPropertyToCloudFormation(properties.fieldToMatch),\n        TextTransformation: cdk.stringToCloudFormation(properties.textTransformation),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnXssMatchSetXssMatchTuplePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnXssMatchSet.XssMatchTupleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnXssMatchSet.XssMatchTupleProperty>();\n    ret.addPropertyResult('fieldToMatch', 'FieldToMatch', CfnXssMatchSetFieldToMatchPropertyFromCloudFormation(properties.FieldToMatch));\n    ret.addPropertyResult('textTransformation', 'TextTransformation', cfn_parse.FromCloudFormation.getString(properties.TextTransformation));\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
