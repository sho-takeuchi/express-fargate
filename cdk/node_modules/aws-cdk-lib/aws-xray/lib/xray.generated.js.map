{
  "version": 3,
  "sources": ["xray.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// Generated from the AWS CloudFormation Resource Specification\n// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html\n// @cfn2ts:meta@ {\"generated\":\"2022-01-29T04:08:34.423Z\",\"fingerprint\":\"ey36biynAbJbwGrR1Y+IWtXnEbscC9LEvOkCn2L2Rl8=\"}\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\n\nimport * as constructs from 'constructs';\nimport * as cdk from '../../core';\nimport * as cfn_parse from '../../core/lib/cfn-parse';\n\n                                                                                                                                                                                           \nexport interface CfnGroupProps {\n\n                                                                                                                                                                                                                                      \n    readonly filterExpression?: string;\n\n                                                                                                                                                                                                           \n    readonly groupName?: string;\n\nn    readonly insightsConfiguration?: CfnGroup.InsightsConfigurationProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                  \n    readonly tags?: any[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnGroupProps`\n *\n * @param properties - the TypeScript properties of a `CfnGroupProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnGroupPropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('filterExpression', cdk.validateString)(properties.filterExpression));\n    errors.collect(cdk.propertyValidator('groupName', cdk.validateString)(properties.groupName));\n    errors.collect(cdk.propertyValidator('insightsConfiguration', CfnGroup_InsightsConfigurationPropertyValidator)(properties.insightsConfiguration));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateObject))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnGroupProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::XRay::Group` resource\n *\n * @param properties - the TypeScript properties of a `CfnGroupProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::XRay::Group` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGroupPropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGroupPropsValidator(properties).assertSuccess();\n    return {\n        FilterExpression: cdk.stringToCloudFormation(properties.filterExpression),\n        GroupName: cdk.stringToCloudFormation(properties.groupName),\n        InsightsConfiguration: cfnGroupInsightsConfigurationPropertyToCloudFormation(properties.insightsConfiguration),\n        Tags: cdk.listMapper(cdk.objectToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGroupProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGroupProps>();\n    ret.addPropertyResult('filterExpression', 'FilterExpression', properties.FilterExpression != null ? cfn_parse.FromCloudFormation.getString(properties.FilterExpression) : undefined);\n    ret.addPropertyResult('groupName', 'GroupName', properties.GroupName != null ? cfn_parse.FromCloudFormation.getString(properties.GroupName) : undefined);\n    ret.addPropertyResult('insightsConfiguration', 'InsightsConfiguration', properties.InsightsConfiguration != null ? CfnGroupInsightsConfigurationPropertyFromCloudFormation(properties.InsightsConfiguration) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getAny)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                                                                                                                                             \nexport class CfnGroup extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::XRay::Group\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnGroup {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnGroupPropsFromCloudFormation(resourceProperties);\n        const ret = new CfnGroup(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                          \n    public readonly attrGroupArn: string;\n\n                                                                                                                                                                                                                                      \n    public filterExpression: string | undefined;\n\n                                                                                                                                                                                                           \n    public groupName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           \n    public insightsConfiguration: CfnGroup.InsightsConfigurationProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                  \n    public tags: any[] | undefined;\n\n                                                                                                                                                                                                                      \n    constructor(scope: constructs.Construct, id: string, props: CfnGroupProps = {}) {\n        super(scope, id, { type: CfnGroup.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrGroupArn = cdk.Token.asString(this.getAtt('GroupARN'));\n\n        this.filterExpression = props.filterExpression;\n        this.groupName = props.groupName;\n        this.insightsConfiguration = props.insightsConfiguration;\n        this.tags = props.tags;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnGroup.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            filterExpression: this.filterExpression,\n            groupName: this.groupName,\n            insightsConfiguration: this.insightsConfiguration,\n            tags: this.tags,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnGroupPropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnGroup {\n                                                                                                                                                                                                                                                                           \n    export interface InsightsConfigurationProperty {\n                                                                                                                                                                                                                                                                                                                             \n        readonly insightsEnabled?: boolean | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                                                                                                       \n        readonly notificationsEnabled?: boolean | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `InsightsConfigurationProperty`\n *\n * @param properties - the TypeScript properties of a `InsightsConfigurationProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnGroup_InsightsConfigurationPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('insightsEnabled', cdk.validateBoolean)(properties.insightsEnabled));\n    errors.collect(cdk.propertyValidator('notificationsEnabled', cdk.validateBoolean)(properties.notificationsEnabled));\n    return errors.wrap('supplied properties not correct for \"InsightsConfigurationProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::XRay::Group.InsightsConfiguration` resource\n *\n * @param properties - the TypeScript properties of a `InsightsConfigurationProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::XRay::Group.InsightsConfiguration` resource.\n */\n// @ts-ignore TS6133\nfunction cfnGroupInsightsConfigurationPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnGroup_InsightsConfigurationPropertyValidator(properties).assertSuccess();\n    return {\n        InsightsEnabled: cdk.booleanToCloudFormation(properties.insightsEnabled),\n        NotificationsEnabled: cdk.booleanToCloudFormation(properties.notificationsEnabled),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnGroupInsightsConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnGroup.InsightsConfigurationProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnGroup.InsightsConfigurationProperty>();\n    ret.addPropertyResult('insightsEnabled', 'InsightsEnabled', properties.InsightsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.InsightsEnabled) : undefined);\n    ret.addPropertyResult('notificationsEnabled', 'NotificationsEnabled', properties.NotificationsEnabled != null ? cfn_parse.FromCloudFormation.getBoolean(properties.NotificationsEnabled) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\n                                                                                                                                                                                                         \nexport interface CfnSamplingRuleProps {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    readonly ruleName?: string;\n\n                                                                                                                                                                                                                                                                                                                                   \n    readonly samplingRule?: CfnSamplingRule.SamplingRuleProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                  \n    readonly samplingRuleRecord?: CfnSamplingRule.SamplingRuleRecordProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    readonly samplingRuleUpdate?: CfnSamplingRule.SamplingRuleUpdateProperty | cdk.IResolvable;\n\n                                                                                                                                                                                                                                                                                                                                                                                \n    readonly tags?: any[];\n}\n\n/**\n * Determine whether the given properties match those of a `CfnSamplingRuleProps`\n *\n * @param properties - the TypeScript properties of a `CfnSamplingRuleProps`\n *\n * @returns the result of the validation.\n */\nfunction CfnSamplingRulePropsValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('ruleName', cdk.validateString)(properties.ruleName));\n    errors.collect(cdk.propertyValidator('samplingRule', CfnSamplingRule_SamplingRulePropertyValidator)(properties.samplingRule));\n    errors.collect(cdk.propertyValidator('samplingRuleRecord', CfnSamplingRule_SamplingRuleRecordPropertyValidator)(properties.samplingRuleRecord));\n    errors.collect(cdk.propertyValidator('samplingRuleUpdate', CfnSamplingRule_SamplingRuleUpdatePropertyValidator)(properties.samplingRuleUpdate));\n    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateObject))(properties.tags));\n    return errors.wrap('supplied properties not correct for \"CfnSamplingRuleProps\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::XRay::SamplingRule` resource\n *\n * @param properties - the TypeScript properties of a `CfnSamplingRuleProps`\n *\n * @returns the AWS CloudFormation properties of an `AWS::XRay::SamplingRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSamplingRulePropsToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSamplingRulePropsValidator(properties).assertSuccess();\n    return {\n        RuleName: cdk.stringToCloudFormation(properties.ruleName),\n        SamplingRule: cfnSamplingRuleSamplingRulePropertyToCloudFormation(properties.samplingRule),\n        SamplingRuleRecord: cfnSamplingRuleSamplingRuleRecordPropertyToCloudFormation(properties.samplingRuleRecord),\n        SamplingRuleUpdate: cfnSamplingRuleSamplingRuleUpdatePropertyToCloudFormation(properties.samplingRuleUpdate),\n        Tags: cdk.listMapper(cdk.objectToCloudFormation)(properties.tags),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSamplingRulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSamplingRuleProps> {\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSamplingRuleProps>();\n    ret.addPropertyResult('ruleName', 'RuleName', properties.RuleName != null ? cfn_parse.FromCloudFormation.getString(properties.RuleName) : undefined);\n    ret.addPropertyResult('samplingRule', 'SamplingRule', properties.SamplingRule != null ? CfnSamplingRuleSamplingRulePropertyFromCloudFormation(properties.SamplingRule) : undefined);\n    ret.addPropertyResult('samplingRuleRecord', 'SamplingRuleRecord', properties.SamplingRuleRecord != null ? CfnSamplingRuleSamplingRuleRecordPropertyFromCloudFormation(properties.SamplingRuleRecord) : undefined);\n    ret.addPropertyResult('samplingRuleUpdate', 'SamplingRuleUpdate', properties.SamplingRuleUpdate != null ? CfnSamplingRuleSamplingRuleUpdatePropertyFromCloudFormation(properties.SamplingRuleUpdate) : undefined);\n    ret.addPropertyResult('tags', 'Tags', properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getAny)(properties.Tags) : undefined as any);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nnexport class CfnSamplingRule extends cdk.CfnResource implements cdk.IInspectable {\n                                                                                     \n    public static readonly CFN_RESOURCE_TYPE_NAME = \"AWS::XRay::SamplingRule\";\n\n    /**\n     * A factory method that creates a new instance of this class from an object\n     * containing the CloudFormation properties of this resource.\n     * Used in the @aws-cdk/cloudformation-include module.\n     *\n     * @internal\n     */\n    public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSamplingRule {\n        resourceAttributes = resourceAttributes || {};\n        const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);\n        const propsResult = CfnSamplingRulePropsFromCloudFormation(resourceProperties);\n        const ret = new CfnSamplingRule(scope, id, propsResult.value);\n        for (const [propKey, propVal] of Object.entries(propsResult.extraProperties))  {\n            ret.addPropertyOverride(propKey, propVal);\n        }\n        options.parser.handleAttributes(ret, resourceAttributes, id);\n        return ret;\n    }\n\n                                                                                                                 \n    public readonly attrRuleArn: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                             \n    public ruleName: string | undefined;\n\n                                                                                                                                                                                                                                                                                                                                   \n    public samplingRule: CfnSamplingRule.SamplingRuleProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                  \n    public samplingRuleRecord: CfnSamplingRule.SamplingRuleRecordProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n    public samplingRuleUpdate: CfnSamplingRule.SamplingRuleUpdateProperty | cdk.IResolvable | undefined;\n\n                                                                                                                                                                                                                                                                                                                                                                                \n    public tags: any[] | undefined;\n\n                                                                                                                                                                                                                             \n    constructor(scope: constructs.Construct, id: string, props: CfnSamplingRuleProps = {}) {\n        super(scope, id, { type: CfnSamplingRule.CFN_RESOURCE_TYPE_NAME, properties: props });\n        this.attrRuleArn = cdk.Token.asString(this.getAtt('RuleARN'));\n\n        this.ruleName = props.ruleName;\n        this.samplingRule = props.samplingRule;\n        this.samplingRuleRecord = props.samplingRuleRecord;\n        this.samplingRuleUpdate = props.samplingRuleUpdate;\n        this.tags = props.tags;\n    }\n\n                                                                                                                                                                              \n    public inspect(inspector: cdk.TreeInspector) {\n        inspector.addAttribute(\"aws:cdk:cloudformation:type\", CfnSamplingRule.CFN_RESOURCE_TYPE_NAME);\n        inspector.addAttribute(\"aws:cdk:cloudformation:props\", this.cfnProperties);\n    }\n\n    protected get cfnProperties(): { [key: string]: any }  {\n        return {\n            ruleName: this.ruleName,\n            samplingRule: this.samplingRule,\n            samplingRuleRecord: this.samplingRuleRecord,\n            samplingRuleUpdate: this.samplingRuleUpdate,\n            tags: this.tags,\n        };\n    }\n\n    protected renderProperties(props: {[key: string]: any}): { [key: string]: any }  {\n        return cfnSamplingRulePropsToCloudFormation(props);\n    }\n}\n\nexport namespace CfnSamplingRule {\n                                                                                                                                                                                                                                                                                                                                                                                                                                    \n    export interface SamplingRuleProperty {\nn        readonly attributes?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                 \n        readonly fixedRate?: number;\n                                                                                                                                                                                                                                                                   \n        readonly httpMethod?: string;\n                                                                                                                                                                                                                                                                \n        readonly host?: string;\n                                                                                                                                                                                                                                                              \n        readonly priority?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                         \n        readonly reservoirSize?: number;\n                                                                                                                                                                                                                                                                                             \n        readonly resourceArn?: string;\n                                                                                                                                                                                                                                                                                                                   \n        readonly ruleArn?: string;\n                                                                                                                                                                                                                                                                                                                     \n        readonly ruleName?: string;\n                                                                                                                                                                                                                                                                                                       \n        readonly serviceName?: string;\n                                                                                                                                                                                                                                                                                                           \n        readonly serviceType?: string;\n                                                                                                                                                                                                                                                               \n        readonly urlPath?: string;\n                                                                                                                                                                                                                                                                           \n        readonly version?: number;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SamplingRuleProperty`\n *\n * @param properties - the TypeScript properties of a `SamplingRuleProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSamplingRule_SamplingRulePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attributes', cdk.hashValidator(cdk.validateString))(properties.attributes));\n    errors.collect(cdk.propertyValidator('fixedRate', cdk.validateNumber)(properties.fixedRate));\n    errors.collect(cdk.propertyValidator('httpMethod', cdk.validateString)(properties.httpMethod));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('priority', cdk.validateNumber)(properties.priority));\n    errors.collect(cdk.propertyValidator('reservoirSize', cdk.validateNumber)(properties.reservoirSize));\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.validateString)(properties.resourceArn));\n    errors.collect(cdk.propertyValidator('ruleArn', cdk.validateString)(properties.ruleArn));\n    errors.collect(cdk.propertyValidator('ruleName', cdk.validateString)(properties.ruleName));\n    errors.collect(cdk.propertyValidator('serviceName', cdk.validateString)(properties.serviceName));\n    errors.collect(cdk.propertyValidator('serviceType', cdk.validateString)(properties.serviceType));\n    errors.collect(cdk.propertyValidator('urlPath', cdk.validateString)(properties.urlPath));\n    errors.collect(cdk.propertyValidator('version', cdk.validateNumber)(properties.version));\n    return errors.wrap('supplied properties not correct for \"SamplingRuleProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::XRay::SamplingRule.SamplingRule` resource\n *\n * @param properties - the TypeScript properties of a `SamplingRuleProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::XRay::SamplingRule.SamplingRule` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSamplingRuleSamplingRulePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSamplingRule_SamplingRulePropertyValidator(properties).assertSuccess();\n    return {\n        Attributes: cdk.hashMapper(cdk.stringToCloudFormation)(properties.attributes),\n        FixedRate: cdk.numberToCloudFormation(properties.fixedRate),\n        HTTPMethod: cdk.stringToCloudFormation(properties.httpMethod),\n        Host: cdk.stringToCloudFormation(properties.host),\n        Priority: cdk.numberToCloudFormation(properties.priority),\n        ReservoirSize: cdk.numberToCloudFormation(properties.reservoirSize),\n        ResourceARN: cdk.stringToCloudFormation(properties.resourceArn),\n        RuleARN: cdk.stringToCloudFormation(properties.ruleArn),\n        RuleName: cdk.stringToCloudFormation(properties.ruleName),\n        ServiceName: cdk.stringToCloudFormation(properties.serviceName),\n        ServiceType: cdk.stringToCloudFormation(properties.serviceType),\n        URLPath: cdk.stringToCloudFormation(properties.urlPath),\n        Version: cdk.numberToCloudFormation(properties.version),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSamplingRuleSamplingRulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSamplingRule.SamplingRuleProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSamplingRule.SamplingRuleProperty>();\n    ret.addPropertyResult('attributes', 'Attributes', properties.Attributes != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Attributes) : undefined);\n    ret.addPropertyResult('fixedRate', 'FixedRate', properties.FixedRate != null ? cfn_parse.FromCloudFormation.getNumber(properties.FixedRate) : undefined);\n    ret.addPropertyResult('httpMethod', 'HTTPMethod', properties.HTTPMethod != null ? cfn_parse.FromCloudFormation.getString(properties.HTTPMethod) : undefined);\n    ret.addPropertyResult('host', 'Host', properties.Host != null ? cfn_parse.FromCloudFormation.getString(properties.Host) : undefined);\n    ret.addPropertyResult('priority', 'Priority', properties.Priority != null ? cfn_parse.FromCloudFormation.getNumber(properties.Priority) : undefined);\n    ret.addPropertyResult('reservoirSize', 'ReservoirSize', properties.ReservoirSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.ReservoirSize) : undefined);\n    ret.addPropertyResult('resourceArn', 'ResourceARN', properties.ResourceARN != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceARN) : undefined);\n    ret.addPropertyResult('ruleArn', 'RuleARN', properties.RuleARN != null ? cfn_parse.FromCloudFormation.getString(properties.RuleARN) : undefined);\n    ret.addPropertyResult('ruleName', 'RuleName', properties.RuleName != null ? cfn_parse.FromCloudFormation.getString(properties.RuleName) : undefined);\n    ret.addPropertyResult('serviceName', 'ServiceName', properties.ServiceName != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceName) : undefined);\n    ret.addPropertyResult('serviceType', 'ServiceType', properties.ServiceType != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceType) : undefined);\n    ret.addPropertyResult('urlPath', 'URLPath', properties.URLPath != null ? cfn_parse.FromCloudFormation.getString(properties.URLPath) : undefined);\n    ret.addPropertyResult('version', 'Version', properties.Version != null ? cfn_parse.FromCloudFormation.getNumber(properties.Version) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSamplingRule {\n                                                                                                                                                                                                                                                                                                                         \n    export interface SamplingRuleRecordProperty {\n                                                                                                                                                                                                                                                                                         \n        readonly createdAt?: string;\n                                                                                                                                                                                                                                                                                                \n        readonly modifiedAt?: string;\n                                                                                                                                                                                                                                                              \n        readonly samplingRule?: CfnSamplingRule.SamplingRuleProperty | cdk.IResolvable;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SamplingRuleRecordProperty`\n *\n * @param properties - the TypeScript properties of a `SamplingRuleRecordProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSamplingRule_SamplingRuleRecordPropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('createdAt', cdk.validateString)(properties.createdAt));\n    errors.collect(cdk.propertyValidator('modifiedAt', cdk.validateString)(properties.modifiedAt));\n    errors.collect(cdk.propertyValidator('samplingRule', CfnSamplingRule_SamplingRulePropertyValidator)(properties.samplingRule));\n    return errors.wrap('supplied properties not correct for \"SamplingRuleRecordProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::XRay::SamplingRule.SamplingRuleRecord` resource\n *\n * @param properties - the TypeScript properties of a `SamplingRuleRecordProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::XRay::SamplingRule.SamplingRuleRecord` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSamplingRuleSamplingRuleRecordPropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSamplingRule_SamplingRuleRecordPropertyValidator(properties).assertSuccess();\n    return {\n        CreatedAt: cdk.stringToCloudFormation(properties.createdAt),\n        ModifiedAt: cdk.stringToCloudFormation(properties.modifiedAt),\n        SamplingRule: cfnSamplingRuleSamplingRulePropertyToCloudFormation(properties.samplingRule),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSamplingRuleSamplingRuleRecordPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSamplingRule.SamplingRuleRecordProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSamplingRule.SamplingRuleRecordProperty>();\n    ret.addPropertyResult('createdAt', 'CreatedAt', properties.CreatedAt != null ? cfn_parse.FromCloudFormation.getString(properties.CreatedAt) : undefined);\n    ret.addPropertyResult('modifiedAt', 'ModifiedAt', properties.ModifiedAt != null ? cfn_parse.FromCloudFormation.getString(properties.ModifiedAt) : undefined);\n    ret.addPropertyResult('samplingRule', 'SamplingRule', properties.SamplingRule != null ? CfnSamplingRuleSamplingRulePropertyFromCloudFormation(properties.SamplingRule) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n\nexport namespace CfnSamplingRule {\n                                                                                                                                                                                                                                                                                    \n    export interface SamplingRuleUpdateProperty {\nn        readonly attributes?: { [key: string]: (string) } | cdk.IResolvable;\n                                                                                                                                                                                                                                                                                                                             \n        readonly fixedRate?: number;\n                                                                                                                                                                                                                                                                               \n        readonly httpMethod?: string;\n                                                                                                                                                                                                                                                                            \n        readonly host?: string;\n                                                                                                                                                                                                                                                                          \n        readonly priority?: number;\n                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n        readonly reservoirSize?: number;\n                                                                                                                                                                                                                                                                                                         \n        readonly resourceArn?: string;\n                                                                                                                                                                                                                                                                                                                               \n        readonly ruleArn?: string;\n                                                                                                                                                                                                                                                                                                                                 \n        readonly ruleName?: string;\n                                                                                                                                                                                                                                                                                                                   \n        readonly serviceName?: string;\n                                                                                                                                                                                                                                                                                                                       \n        readonly serviceType?: string;\n                                                                                                                                                                                                                                                                           \n        readonly urlPath?: string;\n    }\n}\n\n/**\n * Determine whether the given properties match those of a `SamplingRuleUpdateProperty`\n *\n * @param properties - the TypeScript properties of a `SamplingRuleUpdateProperty`\n *\n * @returns the result of the validation.\n */\nfunction CfnSamplingRule_SamplingRuleUpdatePropertyValidator(properties: any): cdk.ValidationResult {\n    if (!cdk.canInspect(properties)) { return cdk.VALIDATION_SUCCESS; }\n    const errors = new cdk.ValidationResults();\n    if (typeof properties !== 'object') {\n        errors.collect(new cdk.ValidationResult('Expected an object, but received: ' + JSON.stringify(properties)));\n    }\n    errors.collect(cdk.propertyValidator('attributes', cdk.hashValidator(cdk.validateString))(properties.attributes));\n    errors.collect(cdk.propertyValidator('fixedRate', cdk.validateNumber)(properties.fixedRate));\n    errors.collect(cdk.propertyValidator('httpMethod', cdk.validateString)(properties.httpMethod));\n    errors.collect(cdk.propertyValidator('host', cdk.validateString)(properties.host));\n    errors.collect(cdk.propertyValidator('priority', cdk.validateNumber)(properties.priority));\n    errors.collect(cdk.propertyValidator('reservoirSize', cdk.validateNumber)(properties.reservoirSize));\n    errors.collect(cdk.propertyValidator('resourceArn', cdk.validateString)(properties.resourceArn));\n    errors.collect(cdk.propertyValidator('ruleArn', cdk.validateString)(properties.ruleArn));\n    errors.collect(cdk.propertyValidator('ruleName', cdk.validateString)(properties.ruleName));\n    errors.collect(cdk.propertyValidator('serviceName', cdk.validateString)(properties.serviceName));\n    errors.collect(cdk.propertyValidator('serviceType', cdk.validateString)(properties.serviceType));\n    errors.collect(cdk.propertyValidator('urlPath', cdk.validateString)(properties.urlPath));\n    return errors.wrap('supplied properties not correct for \"SamplingRuleUpdateProperty\"');\n}\n\n/**\n * Renders the AWS CloudFormation properties of an `AWS::XRay::SamplingRule.SamplingRuleUpdate` resource\n *\n * @param properties - the TypeScript properties of a `SamplingRuleUpdateProperty`\n *\n * @returns the AWS CloudFormation properties of an `AWS::XRay::SamplingRule.SamplingRuleUpdate` resource.\n */\n// @ts-ignore TS6133\nfunction cfnSamplingRuleSamplingRuleUpdatePropertyToCloudFormation(properties: any): any {\n    if (!cdk.canInspect(properties)) { return properties; }\n    CfnSamplingRule_SamplingRuleUpdatePropertyValidator(properties).assertSuccess();\n    return {\n        Attributes: cdk.hashMapper(cdk.stringToCloudFormation)(properties.attributes),\n        FixedRate: cdk.numberToCloudFormation(properties.fixedRate),\n        HTTPMethod: cdk.stringToCloudFormation(properties.httpMethod),\n        Host: cdk.stringToCloudFormation(properties.host),\n        Priority: cdk.numberToCloudFormation(properties.priority),\n        ReservoirSize: cdk.numberToCloudFormation(properties.reservoirSize),\n        ResourceARN: cdk.stringToCloudFormation(properties.resourceArn),\n        RuleARN: cdk.stringToCloudFormation(properties.ruleArn),\n        RuleName: cdk.stringToCloudFormation(properties.ruleName),\n        ServiceName: cdk.stringToCloudFormation(properties.serviceName),\n        ServiceType: cdk.stringToCloudFormation(properties.serviceType),\n        URLPath: cdk.stringToCloudFormation(properties.urlPath),\n    };\n}\n\n// @ts-ignore TS6133\nfunction CfnSamplingRuleSamplingRuleUpdatePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSamplingRule.SamplingRuleUpdateProperty | cdk.IResolvable> {\n    if (cdk.isResolvableObject(properties)) {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    properties = properties == null ? {} : properties;\n    if (typeof properties !== 'object') {\n        return new cfn_parse.FromCloudFormationResult(properties);\n    }\n    const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSamplingRule.SamplingRuleUpdateProperty>();\n    ret.addPropertyResult('attributes', 'Attributes', properties.Attributes != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Attributes) : undefined);\n    ret.addPropertyResult('fixedRate', 'FixedRate', properties.FixedRate != null ? cfn_parse.FromCloudFormation.getNumber(properties.FixedRate) : undefined);\n    ret.addPropertyResult('httpMethod', 'HTTPMethod', properties.HTTPMethod != null ? cfn_parse.FromCloudFormation.getString(properties.HTTPMethod) : undefined);\n    ret.addPropertyResult('host', 'Host', properties.Host != null ? cfn_parse.FromCloudFormation.getString(properties.Host) : undefined);\n    ret.addPropertyResult('priority', 'Priority', properties.Priority != null ? cfn_parse.FromCloudFormation.getNumber(properties.Priority) : undefined);\n    ret.addPropertyResult('reservoirSize', 'ReservoirSize', properties.ReservoirSize != null ? cfn_parse.FromCloudFormation.getNumber(properties.ReservoirSize) : undefined);\n    ret.addPropertyResult('resourceArn', 'ResourceARN', properties.ResourceARN != null ? cfn_parse.FromCloudFormation.getString(properties.ResourceARN) : undefined);\n    ret.addPropertyResult('ruleArn', 'RuleARN', properties.RuleARN != null ? cfn_parse.FromCloudFormation.getString(properties.RuleARN) : undefined);\n    ret.addPropertyResult('ruleName', 'RuleName', properties.RuleName != null ? cfn_parse.FromCloudFormation.getString(properties.RuleName) : undefined);\n    ret.addPropertyResult('serviceName', 'ServiceName', properties.ServiceName != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceName) : undefined);\n    ret.addPropertyResult('serviceType', 'ServiceType', properties.ServiceType != null ? cfn_parse.FromCloudFormation.getString(properties.ServiceType) : undefined);\n    ret.addPropertyResult('urlPath', 'URLPath', properties.URLPath != null ? cfn_parse.FromCloudFormation.getString(properties.URLPath) : undefined);\n    ret.addUnrecognizedPropertiesAsExtra(properties);\n    return ret;\n}\n"],
  "mappings": "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",
  "names": []
}
