{
  "version": 3,
  "sources": ["app.ts"],
  "sourcesContent": ["import * as cxapi from '../../cx-api';\nimport { Construct } from 'constructs';\nimport { addCustomSynthesis, ICustomSynthesis } from './private/synthesis';\nimport { TreeMetadata } from './private/tree-metadata';\nimport { Stage } from './stage';\n\nconst APP_SYMBOL = Symbol.for('@aws-cdk/core.App');\n\n                                         \nexport interface AppProps {\n                                                                                                                                                                                                                                                                                                                                                                              \n  readonly autoSynth?: boolean;\n\nn  readonly outdir?: string;\n\n                                                                                                                                                                                                                       \n  readonly stackTraces?: boolean;\n\n                                                                                                                                                                                                     \n  readonly runtimeInfo?: boolean;\n\n                                                                                                                                                     \n  readonly analyticsReporting?: boolean;\n\n                                                                                                                                                                                                                                                                             \n  readonly context?: { [key: string]: any };\n\n                                                                                                       \n  readonly treeMetadata?: boolean;\n}\n\nnexport class App extends Stage {\n                                                                                                                                                         \n  public static isApp(obj: any): obj is App {\n    return APP_SYMBOL in obj;\n  }\n\n                                                                                           \n  constructor(props: AppProps = {}) {\n    super(undefined as any, '', {\n      outdir: props.outdir ?? process.env[cxapi.OUTDIR_ENV],\n    });\n\n    Object.defineProperty(this, APP_SYMBOL, { value: true });\n\n    this.loadContext(props.context);\n\n    if (props.stackTraces === false) {\n      this.node.setContext(cxapi.DISABLE_METADATA_STACK_TRACE, true);\n    }\n\n    const analyticsReporting = props.analyticsReporting ?? props.runtimeInfo;\n\n    if (analyticsReporting !== undefined) {\n      this.node.setContext(cxapi.ANALYTICS_REPORTING_ENABLED_CONTEXT, analyticsReporting);\n    }\n\n    const autoSynth = props.autoSynth ?? cxapi.OUTDIR_ENV in process.env;\n    if (autoSynth) {\n      // synth() guarantuees it will only execute once, so a default of 'true'\n      // doesn't bite manual calling of the function.\n      process.once('beforeExit', () => this.synth());\n    }\n\n    if (props.treeMetadata === undefined || props.treeMetadata) {\n      new TreeMetadata(this);\n    }\n  }\n\n  private loadContext(defaults: { [key: string]: string } = { }) {\n    // prime with defaults passed through constructor\n    for (const [k, v] of Object.entries(defaults)) {\n      this.node.setContext(k, v);\n    }\n\n    // read from environment\n    const contextJson = process.env[cxapi.CONTEXT_ENV];\n    const contextFromEnvironment = contextJson\n      ? JSON.parse(contextJson)\n      : { };\n\n    for (const [k, v] of Object.entries(contextFromEnvironment)) {\n      this.node.setContext(k, v);\n    }\n  }\n}\n\n/**\n * Add a custom synthesis for the given construct\n *\n * When the construct is being synthesized, this allows it to add additional items\n * into the Cloud Assembly output.\n *\n * This feature is intended for use by official AWS CDK libraries only; 3rd party\n * library authors and CDK users should not use this function. That's why it's not\n * exposed via jsii.\n */\nexport function attachCustomSynthesis(construct: Construct, synthesis: ICustomSynthesis): void {\n  // synthesis.ts where the implementation lives is not exported. So\n  // this function is just a re-export of that function.\n  addCustomSynthesis(construct, synthesis);\n}\n"],
  "mappings": "wOAAA,MAAA,QAAA,gBAEA,YAAA,QAAA,uBACA,gBAAA,QAAA,2BACA,QAAA,QAAA,WAEM,WAAa,OAAO,IAAI,qBA2B9B,iBAAyB,SAAA,KAAK,CAO5B,YAAY,MAAkB,GAAE,cAC9B,MAAM,OAAkB,GAAI,CAC1B,OAAM,IAAE,MAAM,UAAM,MAAA,KAAA,OAAA,GAAI,QAAQ,IAAI,MAAM,kEAG5C,OAAO,eAAe,KAAM,WAAY,CAAE,MAAO,KAEjD,KAAK,YAAY,MAAM,SAEnB,MAAM,cAAgB,IACxB,KAAK,KAAK,WAAW,MAAM,6BAA8B,IAG3D,KAAM,oBAAkB,IAAG,MAAM,sBAAkB,MAAA,KAAA,OAAA,GAAI,MAAM,YAE7D,AAAI,qBAAuB,QACzB,KAAK,KAAK,WAAW,MAAM,oCAAqC,oBAI9D,AADW,KAAG,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,MAAM,aAAc,SAAQ,MAI/D,QAAQ,KAAK,aAAc,IAAM,KAAK,SAGpC,OAAM,eAAiB,QAAa,MAAM,eAC5C,GAAI,iBAAA,aAAa,YAhCP,OAAM,IAAQ,CAC1B,MAAO,cAAc,KAmCf,YAAY,SAAsC,GAAG,CAE3D,SAAW,CAAC,EAAG,IAAM,QAAO,QAAQ,UAClC,KAAK,KAAK,WAAW,EAAG,GAI1B,KAAM,aAAc,QAAQ,IAAI,MAAM,aAChC,uBAAyB,YAC3B,KAAK,MAAM,aACX,GAEJ,SAAW,CAAC,EAAG,IAAM,QAAO,QAAQ,wBAClC,KAAK,KAAK,WAAW,EAAG,IAnD9B,QAAA,IAAA,2EAkEA,+BAAsC,UAAsB,UAA2B,CAGrF,YAAA,mBAAmB,UAAW,WAHhC,QAAA,sBAAA",
  "names": []
}
