{
  "version": 3,
  "sources": ["bundling.ts"],
  "sourcesContent": ["import { spawnSync, SpawnSyncOptions } from 'child_process';\nimport * as crypto from 'crypto';\nimport { isAbsolute, join } from 'path';\nimport { FileSystem } from './fs';\nimport { quiet, reset } from './private/jsii-deprecated';\n\n                              \nexport interface BundlingOptions {\n                                                             \n  readonly image: DockerImage;\n\n                                                                                                                                                                                                                                                     \n  readonly entrypoint?: string[];\n\n                                                                                                                                                                                                                                 \n  readonly command?: string[];\n\n                                                                                                           \n  readonly volumes?: DockerVolume[];\n\n                                                                                                                          \n  readonly environment?: { [key: string]: string; };\n\n                                                                                               \n  readonly workingDirectory?: string;\n\n                                                                                                                                                                                                                                                                                   \n  readonly user?: string;\n\n                                                                                                                                                                                                                                                                                                              \n  readonly local?: ILocalBundling;\n\n                                                                                                                                   \n  readonly outputType?: BundlingOutput;\n\n                                                                                                                                                                                                \n  readonly securityOpt?: string;\n}\n\n                                                                        \nexport enum BundlingOutput {\n                                                                                                                                                                                                                           \n  ARCHIVED = 'archived',\n\n                                                                                                                                        \n  NOT_ARCHIVED = 'not-archived',\n\n                                                                                                                                                                                                                       \n  AUTO_DISCOVER = 'auto-discover',\n}\n\n                            \nexport interface ILocalBundling {\n                                                                                                                                                                                                                                                                                                                                                                                \n  tryBundle(outputDir: string, options: BundlingOptions): boolean;\n}\n\n                                                                                   \nexport class BundlingDockerImage {\n                                                                                                                  \n  public static fromRegistry(image: string) {\n    return new DockerImage(image);\n  }\n\n                                                                                                                                                                                                                                                     \n  public static fromAsset(path: string, options: DockerBuildOptions = {}): BundlingDockerImage {\n    return DockerImage.fromBuild(path, options);\n  }\n\n                                      \n  protected constructor(public readonly image: string, private readonly _imageHash?: string) {}\n\n                                                                                                                                                                           \n  public toJSON() {\n    return this._imageHash ?? this.image;\n  }\n\n                                    \n  public run(options: DockerRunOptions = {}) {\n    const volumes = options.volumes || [];\n    const environment = options.environment || {};\n    const entrypoint = options.entrypoint?.[0] || null;\n    const command = [\n      ...options.entrypoint?.[1]\n        ? [...options.entrypoint.slice(1)]\n        : [],\n      ...options.command\n        ? [...options.command]\n        : [],\n    ];\n\n    const dockerArgs: string[] = [\n      'run', '--rm',\n      ...options.securityOpt\n        ? ['--security-opt', options.securityOpt]\n        : [],\n      ...options.user\n        ? ['-u', options.user]\n        : [],\n      ...flatten(volumes.map(v => ['-v', `${v.hostPath}:${v.containerPath}:${isSeLinux() ? 'z,' : ''}${v.consistency ?? DockerVolumeConsistency.DELEGATED}`])),\n      ...flatten(Object.entries(environment).map(([k, v]) => ['--env', `${k}=${v}`])),\n      ...options.workingDirectory\n        ? ['-w', options.workingDirectory]\n        : [],\n      ...entrypoint\n        ? ['--entrypoint', entrypoint]\n        : [],\n      this.image,\n      ...command,\n    ];\n\n    dockerExec(dockerArgs);\n  }\n\n                                                                                                                                                                                                                                                                                                                                              \n  public cp(imagePath: string, outputPath?: string): string {\n    const { stdout } = dockerExec(['create', this.image], {}); // Empty options to avoid stdout redirect here\n    const match = stdout.toString().match(/([0-9a-f]{16,})/);\n    if (!match) {\n      throw new Error('Failed to extract container ID from Docker create output');\n    }\n\n    const containerId = match[1];\n    const containerPath = `${containerId}:${imagePath}`;\n    const destPath = outputPath ?? FileSystem.mkdtemp('cdk-docker-cp-');\n    try {\n      dockerExec(['cp', containerPath, destPath]);\n      return destPath;\n    } catch (err) {\n      throw new Error(`Failed to copy files from ${containerPath} to ${destPath}: ${err}`);\n    } finally {\n      dockerExec(['rm', '-v', containerId]);\n    }\n  }\n}\n\n                         \nexport class DockerImage extends BundlingDockerImage {\n                                                                                                                                                          \n  public static fromBuild(path: string, options: DockerBuildOptions = {}) {\n    const buildArgs = options.buildArgs || {};\n\n    if (options.file && isAbsolute(options.file)) {\n      throw new Error(`\"file\" must be relative to the docker build directory. Got ${options.file}`);\n    }\n\n    // Image tag derived from path and build options\n    const input = JSON.stringify({ path, ...options });\n    const tagHash = crypto.createHash('sha256').update(input).digest('hex');\n    const tag = `cdk-${tagHash}`;\n\n    const dockerArgs: string[] = [\n      'build', '-t', tag,\n      ...(options.file ? ['-f', join(path, options.file)] : []),\n      ...(options.platform ? ['--platform', options.platform] : []),\n      ...flatten(Object.entries(buildArgs).map(([k, v]) => ['--build-arg', `${k}=${v}`])),\n      path,\n    ];\n\n    dockerExec(dockerArgs);\n\n    // Fingerprints the directory containing the Dockerfile we're building and\n    // differentiates the fingerprint based on build arguments. We do this so\n    // we can provide a stable image hash. Otherwise, the image ID will be\n    // different every time the Docker layer cache is cleared, due primarily to\n    // timestamps.\n    const hash = FileSystem.fingerprint(path, { extraHash: JSON.stringify(options) });\n    return new DockerImage(tag, hash);\n  }\n\n                                                                                                                  \n  public static fromRegistry(image: string) {\n    return new DockerImage(image);\n  }\n\n                         \n  public readonly image: string;\n\n  constructor(image: string, _imageHash?: string) {\n    // It is preferrable for the deprecated class to inherit a non-deprecated class.\n    // However, in this case, the opposite has occurred which is incompatible with\n    // a deprecation feature. See https://github.com/aws/jsii/issues/3102.\n    const deprecated = quiet();\n\n    super(image, _imageHash);\n\n    reset(deprecated);\n    this.image = image;\n  }\n\n                                                                                                                                                                           \n  public toJSON() {\n    // It is preferrable for the deprecated class to inherit a non-deprecated class.\n    // However, in this case, the opposite has occurred which is incompatible with\n    // a deprecation feature. See https://github.com/aws/jsii/issues/3102.\n    const deprecated = quiet();\n\n    const json = super.toJSON();\n\n    reset(deprecated);\n    return json;\n  }\n\n                                    \n  public run(options: DockerRunOptions = {}) {\n    // It is preferrable for the deprecated class to inherit a non-deprecated class.\n    // However, in this case, the opposite has occurred which is incompatible with\n    // a deprecation feature. See https://github.com/aws/jsii/issues/3102.\n    const deprecated = quiet();\n\n    const result = super.run(options);\n\n    reset(deprecated);\n    return result;\n  }\n\n                                                                                                                                                                                                                                                                                                                                              \n  public cp(imagePath: string, outputPath?: string): string {\n    // It is preferrable for the deprecated class to inherit a non-deprecated class.\n    // However, in this case, the opposite has occurred which is incompatible with\n    // a deprecation feature. See https://github.com/aws/jsii/issues/3102.\n    const deprecated = quiet();\n\n    const result = super.cp(imagePath, outputPath);\n\n    reset(deprecated);\n    return result;\n  }\n}\n\n                          \nexport interface DockerVolume {\n                                                                      \n  readonly hostPath: string;\n\n                                                                                 \n  readonly containerPath: string;\n\n                                                                                                                                                                                                         \n  readonly consistency?: DockerVolumeConsistency;\n}\n\n                                                                                                                  \nexport enum DockerVolumeConsistency {\n                                                                                                                              \n  CONSISTENT = 'consistent',\n                                                                                                                                                 \n  DELEGATED = 'delegated',\n                                                                                                                                             \n  CACHED = 'cached',\n}\n\n                             \nexport interface DockerRunOptions {\n                                                                                                                     \n  readonly entrypoint?: string[];\n\n                                                                                                               \n  readonly command?: string[];\n\n                                                                                     \n  readonly volumes?: DockerVolume[];\n\n                                                                                                                   \n  readonly environment?: { [key: string]: string; };\n\n                                                                                           \n  readonly workingDirectory?: string;\n\n                                                                                                       \n  readonly user?: string;\n\n                                                                                                                                                                                                \n  readonly securityOpt?: string;\n}\n\n                               \nexport interface DockerBuildOptions {\n                                                              \n  readonly buildArgs?: { [key: string]: string };\n\n                                                                                                                \n  readonly file?: string;\n\n                                                                                                                                                                                         \n  readonly platform?: string;\n}\n\nfunction flatten(x: string[][]) {\n  return Array.prototype.concat([], ...x);\n}\n\nfunction dockerExec(args: string[], options?: SpawnSyncOptions) {\n  const prog = process.env.CDK_DOCKER ?? 'docker';\n  const proc = spawnSync(prog, args, options ?? {\n    stdio: [ // show Docker output\n      'ignore', // ignore stdio\n      process.stderr, // redirect stdout to stderr\n      'inherit', // inherit stderr\n    ],\n  });\n\n  if (proc.error) {\n    throw proc.error;\n  }\n\n  if (proc.status !== 0) {\n    if (proc.stdout || proc.stderr) {\n      throw new Error(`[Status ${proc.status}] stdout: ${proc.stdout?.toString().trim()}\\n\\n\\nstderr: ${proc.stderr?.toString().trim()}`);\n    }\n    throw new Error(`${prog} exited with status ${proc.status}`);\n  }\n\n  return proc;\n}\n\nfunction isSeLinux() : boolean {\n  if (process.platform != 'linux') {\n    return false;\n  }\n  const prog = 'selinuxenabled';\n  const proc = spawnSync(prog, [], {\n    stdio: [ // show selinux status output\n      'pipe', // get value of stdio\n      process.stderr, // redirect stdout to stderr\n      'inherit', // inherit stderr\n    ],\n  });\n  if (proc.error) {\n    // selinuxenabled not a valid command, therefore not enabled\n    return false;\n  }\n  if (proc.status == 0) {\n    // selinux enabled\n    return true;\n  } else {\n    // selinux not enabled\n    return false;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
