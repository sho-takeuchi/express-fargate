{
  "version": 3,
  "sources": ["cfn-element.ts"],
  "sourcesContent": ["import * as cxschema from '../../cloud-assembly-schema';\nimport { Construct, Node } from 'constructs';\nimport { Lazy } from './lazy';\n\nconst CFN_ELEMENT_SYMBOL = Symbol.for('@aws-cdk/core.CfnElement');\n\n                                                \nexport abstract class CfnElement extends Construct {\n                                                                                                                                                                                                                                                                                                                                                                                       \n  public static isCfnElement(x: any): x is CfnElement {\n    return CFN_ELEMENT_SYMBOL in x;\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                             \n  public readonly logicalId: string;\n\n                                                                                                                                       \n  public readonly stack: Stack;\n\n  /**\n   * An explicit logical ID provided by `overrideLogicalId`.\n   */\n  private _logicalIdOverride?: string;\n\n                                                                                                                                                                                                                             \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    Object.defineProperty(this, CFN_ELEMENT_SYMBOL, { value: true });\n\n    this.stack = Stack.of(this);\n\n    this.logicalId = Lazy.uncachedString({ produce: () => this.synthesizeLogicalId() }, {\n      displayHint: `${notTooLong(Node.of(this).path)}.LogicalID`,\n    });\n\n    this.node.addMetadata(cxschema.ArtifactMetadataEntryType.LOGICAL_ID, this.logicalId, {\n      traceFromFunction: this.constructor,\n    });\n  }\n\n                                                                                                                                                       \n  public overrideLogicalId(newLogicalId: string) {\n    this._logicalIdOverride = newLogicalId;\n  }\n\n                                                                                                                                                                                                                                        \n  public get creationStack(): string[] {\n    const trace = Node.of(this).metadata.find(md => md.type === cxschema.ArtifactMetadataEntryType.LOGICAL_ID)!.trace;\n    if (!trace) {\n      return [];\n    }\n\n    return filterStackTrace(trace);\n\n    function filterStackTrace(stack: string[]): string[] {\n      const result = Array.of(...stack);\n      while (result.length > 0 && shouldFilter(result[result.length - 1])) {\n        result.pop();\n      }\n      // It's weird if we filtered everything, so return the whole stack...\n      return result.length === 0 ? stack : result;\n    }\n\n    function shouldFilter(str: string): boolean {\n      return str.match(/[^(]+\\(internal\\/.*/) !== null;\n    }\n  }\n\n  /**\n   * Returns the CloudFormation 'snippet' for this entity. The snippet will only be merged\n   * at the root level to ensure there are no identity conflicts.\n   *\n   * For example, a Resource class will return something like:\n   * {\n   *   Resources: {\n   *     [this.logicalId]: {\n   *       Type: this.resourceType,\n   *       Properties: this.props,\n   *       Condition: this.condition\n   *     }\n   *   }\n   * }\n   *\n   * @internal\n   */\n  public abstract _toCloudFormation(): object;\n\n  /**\n   * Called during synthesize to render the logical ID of this element. If\n   * `overrideLogicalId` was it will be used, otherwise, we will allocate the\n   * logical ID through the stack.\n   */\n  private synthesizeLogicalId() {\n    if (this._logicalIdOverride) {\n      return this._logicalIdOverride;\n    } else {\n      return this.stack.getLogicalId(this);\n    }\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \nexport abstract class CfnRefElement extends CfnElement {\n                                                                                                                                                                                                                                                                                    \n  public get ref(): string {\n    return Token.asString(CfnReference.for(this, 'Ref'));\n  }\n}\n\nfunction notTooLong(x: string) {\n  if (x.length < 100) { return x; }\n  return x.substr(0, 47) + '...' + x.substr(x.length - 47);\n}\n\nimport { CfnReference } from './private/cfn-reference';\nimport { Stack } from './stack';\nimport { Token } from './token';\n"],
  "mappings": "+KAAA,SAAA,QAAA,+BACA,aAAA,QAAA,cACA,OAAA,QAAA,UAEM,mBAAqB,OAAO,IAAI,4BAGtC,wBAAyC,cAAA,SAAS,CAkBhD,YAAY,MAAkB,GAAU,CACtC,MAAM,MAAO,IAEb,OAAO,eAAe,KAAM,mBAAoB,CAAE,MAAO,KAEzD,KAAK,MAAQ,QAAA,MAAM,GAAG,MAEtB,KAAK,UAAY,OAAA,KAAK,eAAe,CAAE,QAAS,IAAM,KAAK,uBAAyB,CAClF,YAAa,GAAG,WAAW,aAAA,KAAK,GAAG,MAAM,oBAG3C,KAAK,KAAK,YAAY,SAAS,0BAA0B,WAAY,KAAK,UAAW,CACnF,kBAAmB,KAAK,oBA5Bd,cAAa,EAAM,CAC/B,MAAO,sBAAsB,GAgCxB,kBAAkB,aAAoB,CAC3C,KAAK,mBAAqB,gBAIjB,gBAAa,CACtB,KAAM,OAAQ,aAAA,KAAK,GAAG,MAAM,SAAS,KAAK,IAAM,GAAG,OAAS,SAAS,0BAA0B,YAAa,MAC5G,GAAI,CAAC,MACH,MAAO,GAGT,MAAO,kBAAiB,OAExB,0BAA0B,MAAe,CACvC,KAAM,QAAS,MAAM,GAAG,GAAG,OAC3B,KAAO,OAAO,OAAS,GAAK,aAAa,OAAO,OAAO,OAAS,KAC9D,OAAO,MAGT,MAAO,QAAO,SAAW,EAAI,MAAQ,OAGvC,sBAAsB,IAAW,CAC/B,MAAO,KAAI,MAAM,yBAA2B,MA4BxC,qBAAmB,CACzB,MAAI,MAAK,mBACA,KAAK,mBAEL,KAAK,MAAM,aAAa,OA1FrC,QAAA,WAAA,gGAgGA,2BAA4C,WAAU,IAEzC,MAAG,CACZ,MAAO,SAAA,MAAM,SAAS,gBAAA,aAAa,IAAI,KAAM,SAHjD,QAAA,cAAA,yGAOA,oBAAoB,EAAS,CAC3B,MAAI,GAAE,OAAS,IAAc,EACtB,EAAE,OAAO,EAAG,IAAM,MAAQ,EAAE,OAAO,EAAE,OAAS,IAGvD,KAAA,iBAAA,QAAA,2BACA,QAAA,QAAA,WACA,QAAA,QAAA",
  "names": []
}
