{
  "version": 3,
  "sources": ["cfn-mapping.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { Annotations } from './annotations';\nimport { CfnRefElement } from './cfn-element';\nimport { Fn } from './cfn-fn';\nimport { Token } from './token';\n\ntype Mapping = { [k1: string]: { [k2: string]: any } };\n\nexport interface CfnMappingProps {\n                                                                                                                                                                                                                                                                                                                                                                                                                        \n  readonly mapping?: Mapping;\n\n                                                                                                                                                                                                                                                                                                                                                                       \n  readonly lazy?: boolean;\n}\n\n                                               \nexport class CfnMapping extends CfnRefElement {\n  private mapping: Mapping;\n  private readonly lazy?: boolean;\n  private lazyRender = false;\n  private lazyInformed = false;\n\n  constructor(scope: Construct, id: string, props: CfnMappingProps = {}) {\n    super(scope, id);\n    this.mapping = props.mapping ?? { };\n    this.lazy = props.lazy;\n  }\n\n                                                               \n  public setValue(key1: string, key2: string, value: any) {\n    if (!(key1 in this.mapping)) {\n      this.mapping[key1] = { };\n    }\n\n    this.mapping[key1][key2] = value;\n  }\n\n                                                                                  \n  public findInMap(key1: string, key2: string): string {\n    let fullyResolved = false;\n    if (!Token.isUnresolved(key1)) {\n      if (!(key1 in this.mapping)) {\n        throw new Error(`Mapping doesn't contain top-level key '${key1}'`);\n      }\n      if (!Token.isUnresolved(key2)) {\n        if (!(key2 in this.mapping[key1])) {\n          throw new Error(`Mapping doesn't contain second-level key '${key2}'`);\n        }\n        fullyResolved = true;\n      }\n    }\n    if (fullyResolved) {\n      if (this.lazy) {\n        return this.mapping[key1][key2];\n      }\n    } else {\n      this.lazyRender = true;\n    }\n    return Fn.findInMap(this.logicalId, key1, key2);\n  }\n\n  /**\n   * @internal\n   */\n  public _toCloudFormation(): object {\n    if (this.lazy === undefined && !this.lazyRender) {\n      this.informLazyUse();\n    }\n    if (!this.lazy || (this.lazy && this.lazyRender)) {\n      return {\n        Mappings: {\n          [this.logicalId]: this.mapping,\n        },\n      };\n    } else {\n      return {};\n    }\n  }\n\n  private informLazyUse() {\n    if (!this.lazyInformed) {\n      Annotations.of(this).addInfo('Consider making this CfnMapping a lazy mapping by providing `lazy: true`: either no findInMap was called or every findInMap could be immediately resolved without using Fn::FindInMap');\n    }\n    this.lazyInformed = true;\n  }\n}\n"],
  "mappings": "iNACA,cAAA,QAAA,iBACA,cAAA,QAAA,iBACA,SAAA,QAAA,YACA,QAAA,QAAA,WAaA,wBAAgC,eAAA,aAAa,CAM3C,YAAY,MAAkB,GAAY,MAAyB,GAAE,QACnE,MAAM,MAAO,IAJP,KAAA,WAAa,GACb,KAAA,aAAe,8DAIrB,KAAK,QAAO,IAAG,MAAM,WAAO,MAAA,KAAA,OAAA,GAAI,GAChC,KAAK,KAAO,MAAM,KAIb,SAAS,KAAc,KAAc,MAAU,CACpD,AAAM,OAAQ,MAAK,SACjB,MAAK,QAAQ,MAAQ,IAGvB,KAAK,QAAQ,MAAM,MAAQ,MAItB,UAAU,KAAc,KAAY,CACzC,GAAI,eAAgB,GACpB,GAAI,CAAC,QAAA,MAAM,aAAa,MAAO,CAC7B,GAAI,CAAE,QAAQ,MAAK,SACjB,KAAM,IAAI,OAAM,0CAA0C,SAE5D,GAAI,CAAC,QAAA,MAAM,aAAa,MAAO,CAC7B,GAAI,CAAE,QAAQ,MAAK,QAAQ,OACzB,KAAM,IAAI,OAAM,6CAA6C,SAE/D,cAAgB,IAGpB,GAAI,eACF,GAAI,KAAK,KACP,MAAO,MAAK,QAAQ,MAAM,UAG5B,MAAK,WAAa,GAEpB,MAAO,UAAA,GAAG,UAAU,KAAK,UAAW,KAAM,MAMrC,mBAAiB,CAItB,MAHI,MAAK,OAAS,QAAa,CAAC,KAAK,YACnC,KAAK,gBAEH,CAAC,KAAK,MAAS,KAAK,MAAQ,KAAK,WAC5B,CACL,SAAU,EACP,KAAK,WAAY,KAAK,UAIpB,GAIH,eAAa,CACnB,AAAK,KAAK,cACR,cAAA,YAAY,GAAG,MAAM,QAAQ,yLAE/B,KAAK,aAAe,IAnExB,QAAA,WAAA",
  "names": []
}
