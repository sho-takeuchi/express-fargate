{
  "version": 3,
  "sources": ["context-provider.ts"],
  "sourcesContent": ["import * as cxschema from '../../cloud-assembly-schema';\nimport * as cxapi from '../../cx-api';\nimport { Construct, Node } from 'constructs';\nimport { Annotations } from './annotations';\nimport { Stack } from './stack';\nimport { Token } from './token';\n\n       \nexport interface GetContextKeyOptions {\n                                               \n  readonly provider: string;\n\n                                              \n  readonly props?: { [key: string]: any };\n}\n\n       \nexport interface GetContextValueOptions extends GetContextKeyOptions {\n                                                                                                                                                                                                                                     \n  readonly dummyValue: any;\n}\n\n       \nexport interface GetContextKeyResult {\n  readonly key: string;\n  readonly props: { [key: string]: any };\n}\n\n       \nexport interface GetContextValueResult {\n  readonly value?: any;\n}\n\n                                                                                                                                                                                                                                                                                                                                                            \nexport class ContextProvider {\n                                                                                                                           \n  public static getKey(scope: Construct, options: GetContextKeyOptions): GetContextKeyResult {\n    const stack = Stack.of(scope);\n\n    const props = {\n      account: stack.account,\n      region: stack.region,\n      ...options.props || {},\n    };\n\n    if (Object.values(props).find(x => Token.isUnresolved(x))) {\n      throw new Error(\n        `Cannot determine scope for context provider ${options.provider}.\\n` +\n        'This usually happens when one or more of the provider props have unresolved tokens');\n    }\n\n    const propStrings = propsToArray(props);\n    return {\n      key: `${options.provider}:${propStrings.join(':')}`,\n      props,\n    };\n  }\n\n  public static getValue(scope: Construct, options: GetContextValueOptions): GetContextValueResult {\n    const stack = Stack.of(scope);\n\n    if (Token.isUnresolved(stack.account) || Token.isUnresolved(stack.region)) {\n      throw new Error(`Cannot retrieve value from context provider ${options.provider} since account/region ` +\n                      'are not specified at the stack level. Configure \"env\" with an account and region when ' +\n                      'you define your stack.' +\n                      'See https://docs.aws.amazon.com/cdk/latest/guide/environments.html for more details.');\n    }\n\n    const { key, props } = this.getKey(scope, options);\n    const value = Node.of(scope).tryGetContext(key);\n    const providerError = extractProviderError(value);\n\n    // if context is missing or an error occurred during context retrieval,\n    // report and return a dummy value.\n    if (value === undefined || providerError !== undefined) {\n      stack.reportMissingContextKey({\n        key,\n        provider: options.provider as cxschema.ContextProvider,\n        props: props as cxschema.ContextQueryProperties,\n      });\n\n      if (providerError !== undefined) {\n        Annotations.of(scope).addError(providerError);\n      }\n\n      return { value: options.dummyValue };\n    }\n\n    return { value };\n  }\n\n  private constructor() { }\n}\n\n/**\n * If the context value represents an error, return the error message\n */\nfunction extractProviderError(value: any): string | undefined {\n  if (typeof value === 'object' && value !== null) {\n    return value[cxapi.PROVIDER_ERROR_KEY];\n  }\n  return undefined;\n}\n\n/**\n * Quote colons in all strings so that we can undo the quoting at a later point\n *\n * We'll use $ as a quoting character, for no particularly good reason other\n * than that \\ is going to lead to quoting hell when the keys are stored in JSON.\n */\nfunction colonQuote(xs: string): string {\n  return xs.replace('$', '$$').replace(':', '$:');\n}\n\nfunction propsToArray(props: {[key: string]: any}, keyPrefix = ''): string[] {\n  const ret: string[] = [];\n\n  for (const key of Object.keys(props)) {\n    // skip undefined values\n    if (props[key] === undefined) {\n      continue;\n    }\n\n    switch (typeof props[key]) {\n      case 'object': {\n        ret.push(...propsToArray(props[key], `${keyPrefix}${key}.`));\n        break;\n      }\n      case 'string': {\n        ret.push(`${keyPrefix}${key}=${colonQuote(props[key])}`);\n        break;\n      }\n      default: {\n        ret.push(`${keyPrefix}${key}=${JSON.stringify(props[key])}`);\n        break;\n      }\n    }\n  }\n\n  ret.sort();\n  return ret;\n}\n"],
  "mappings": "sNACA,MAAA,QAAA,gBACA,aAAA,QAAA,cACA,cAAA,QAAA,iBACA,QAAA,QAAA,WACA,QAAA,QAAA,WA6BA,qBAA4B,CAyD1B,aAAA,QAvDc,QAAO,MAAkB,QAA6B,mEAClE,KAAM,OAAQ,QAAA,MAAM,GAAG,OAEjB,MAAQ,CACZ,QAAS,MAAM,QACf,OAAQ,MAAM,UACX,QAAQ,OAAS,IAGtB,GAAI,OAAO,OAAO,OAAO,KAAK,GAAK,QAAA,MAAM,aAAa,IACpD,KAAM,IAAI,OACR,+CAA+C,QAAQ;qFAI3D,KAAM,aAAc,aAAa,OACjC,MAAO,CACL,IAAK,GAAG,QAAQ,YAAY,YAAY,KAAK,OAC7C,aAIU,UAAS,MAAkB,QAA+B,qEACtE,KAAM,OAAQ,QAAA,MAAM,GAAG,OAEvB,GAAI,QAAA,MAAM,aAAa,MAAM,UAAY,QAAA,MAAM,aAAa,MAAM,QAChE,KAAM,IAAI,OAAM,+CAA+C,QAAQ,kOAMzE,KAAM,CAAE,IAAK,OAAU,KAAK,OAAO,MAAO,SACpC,MAAQ,aAAA,KAAK,GAAG,OAAO,cAAc,KACrC,cAAgB,qBAAqB,OAI3C,MAAI,SAAU,QAAa,gBAAkB,OAC3C,OAAM,wBAAwB,CAC5B,IACA,SAAU,QAAQ,SAClB,QAGE,gBAAkB,QACpB,cAAA,YAAY,GAAG,OAAO,SAAS,eAG1B,CAAE,MAAO,QAAQ,aAGnB,CAAE,QAtDb,QAAA,gBAAA,+GA+DA,8BAA8B,MAAU,CACtC,GAAI,MAAO,QAAU,UAAY,QAAU,KACzC,MAAO,OAAM,MAAM,oBAWvB,oBAAoB,GAAU,CAC5B,MAAO,IAAG,QAAQ,IAAK,MAAM,QAAQ,IAAK,MAG5C,sBAAsB,MAA6B,UAAY,GAAE,CAC/D,KAAM,KAAgB,GAEtB,SAAW,OAAO,QAAO,KAAK,OAE5B,GAAI,MAAM,OAAS,OAInB,OAAQ,MAAO,OAAM,UACd,SAAU,CACb,IAAI,KAAK,GAAG,aAAa,MAAM,KAAM,GAAG,YAAY,SACpD,UAEG,SAAU,CACb,IAAI,KAAK,GAAG,YAAY,OAAO,WAAW,MAAM,SAChD,cAEO,CACP,IAAI,KAAK,GAAG,YAAY,OAAO,KAAK,UAAU,MAAM,SACpD,OAKN,WAAI,OACG",
  "names": []
}
