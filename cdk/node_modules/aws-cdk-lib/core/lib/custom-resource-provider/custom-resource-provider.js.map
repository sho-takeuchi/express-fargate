{
  "version": 3,
  "sources": ["custom-resource-provider.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as cxapi from '../../../cx-api';\nimport { Construct } from 'constructs';\nimport { AssetStaging } from '../asset-staging';\nimport { FileAssetPackaging } from '../assets';\nimport { CfnResource } from '../cfn-resource';\nimport { Duration } from '../duration';\nimport { Size } from '../size';\nimport { Stack } from '../stack';\nimport { Token } from '../token';\n\nconst ENTRYPOINT_FILENAME = '__entrypoint__';\nconst ENTRYPOINT_NODEJS_SOURCE = path.join(__dirname, 'nodejs-entrypoint.js');\n\n                                                                     \nexport interface CustomResourceProviderProps {\n                                                                                                                                                                        \n  readonly codeDirectory: string;\n\n                                                                            \n  readonly runtime: CustomResourceProviderRuntime;\n\nn  readonly policyStatements?: any[];\n\n                                                                                             \n  readonly timeout?: Duration;\n\n                                                                                                                                                                                       \n  readonly memorySize?: Size;\n\n                                                                                                                        \n  readonly environment?: { [key: string]: string };\n\n                                                                                    \n  readonly description?: string;\n}\n\n                                                                                                                              \nexport enum CustomResourceProviderRuntime {\n                             \n  NODEJS_12_X = 'nodejs12.x',\n\n  /**\n   * Node.js 12.x\n   *\n   * @deprecated Use {@link NODEJS_12_X}\n   */\n  NODEJS_12 = 'nodejs12.x',\n\n                             \n  NODEJS_14_X = 'nodejs14.x',\n}\n\nnexport class CustomResourceProvider extends Construct {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n  public static getOrCreate(scope: Construct, uniqueid: string, props: CustomResourceProviderProps) {\n    return this.getOrCreateProvider(scope, uniqueid, props).serviceToken;\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n  public static getOrCreateProvider(scope: Construct, uniqueid: string, props: CustomResourceProviderProps) {\n    const id = `${uniqueid}CustomResourceProvider`;\n    const stack = Stack.of(scope);\n    const provider = stack.node.tryFindChild(id) as CustomResourceProvider\n      ?? new CustomResourceProvider(stack, id, props);\n\n    return provider;\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                      \n  public readonly serviceToken: string;\n\n                                                                    \n  public readonly roleArn: string;\n\n  protected constructor(scope: Construct, id: string, props: CustomResourceProviderProps) {\n    super(scope, id);\n\n    const stack = Stack.of(scope);\n\n    // copy the entry point to the code directory\n    fs.copyFileSync(ENTRYPOINT_NODEJS_SOURCE, path.join(props.codeDirectory, `${ENTRYPOINT_FILENAME}.js`));\n\n    // verify we have an index file there\n    if (!fs.existsSync(path.join(props.codeDirectory, 'index.js'))) {\n      throw new Error(`cannot find ${props.codeDirectory}/index.js`);\n    }\n\n    const staging = new AssetStaging(this, 'Staging', {\n      sourcePath: props.codeDirectory,\n    });\n\n    const assetFileName = staging.relativeStagedPath(stack);\n\n    const asset = stack.synthesizer.addFileAsset({\n      fileName: assetFileName,\n      sourceHash: staging.assetHash,\n      packaging: FileAssetPackaging.ZIP_DIRECTORY,\n    });\n\n    const policies = !props.policyStatements ? undefined : [\n      {\n        PolicyName: 'Inline',\n        PolicyDocument: {\n          Version: '2012-10-17',\n          Statement: props.policyStatements,\n        },\n      },\n    ];\n\n    const role = new CfnResource(this, 'Role', {\n      type: 'AWS::IAM::Role',\n      properties: {\n        AssumeRolePolicyDocument: {\n          Version: '2012-10-17',\n          Statement: [{ Action: 'sts:AssumeRole', Effect: 'Allow', Principal: { Service: 'lambda.amazonaws.com' } }],\n        },\n        ManagedPolicyArns: [\n          { 'Fn::Sub': 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole' },\n        ],\n        Policies: policies,\n      },\n    });\n    this.roleArn = Token.asString(role.getAtt('Arn'));\n\n    const timeout = props.timeout ?? Duration.minutes(15);\n    const memory = props.memorySize ?? Size.mebibytes(128);\n\n    const handler = new CfnResource(this, 'Handler', {\n      type: 'AWS::Lambda::Function',\n      properties: {\n        Code: {\n          S3Bucket: asset.bucketName,\n          S3Key: asset.objectKey,\n        },\n        Timeout: timeout.toSeconds(),\n        MemorySize: memory.toMebibytes(),\n        Handler: `${ENTRYPOINT_FILENAME}.handler`,\n        Role: role.getAtt('Arn'),\n        Runtime: props.runtime,\n        Environment: this.renderEnvironmentVariables(props.environment),\n        Description: props.description ?? undefined,\n      },\n    });\n\n    handler.addDependsOn(role);\n\n    if (this.node.tryGetContext(cxapi.ASSET_RESOURCE_METADATA_ENABLED_CONTEXT)) {\n      handler.addMetadata(cxapi.ASSET_RESOURCE_METADATA_PATH_KEY, assetFileName);\n      handler.addMetadata(cxapi.ASSET_RESOURCE_METADATA_PROPERTY_KEY, 'Code');\n    }\n\n    this.serviceToken = Token.asString(handler.getAtt('Arn'));\n  }\n\n  private renderEnvironmentVariables(env?: { [key: string]: string }) {\n    if (!env || Object.keys(env).length === 0) {\n      return undefined;\n    }\n\n    // Sort environment so the hash of the function used to create\n    // `currentVersion` is not affected by key order (this is how lambda does\n    // it)\n    const variables: { [key: string]: string } = {};\n    const keys = Object.keys(env).sort();\n\n    for (const key of keys) {\n      variables[key] = env[key];\n    }\n\n    return { Variables: variables };\n  }\n}\n"],
  "mappings": "sQAAA,GAAA,QAAA,MACA,KAAA,QAAA,QACA,MAAA,QAAA,mBACA,aAAA,QAAA,cACA,gBAAA,QAAA,oBACA,SAAA,QAAA,aACA,eAAA,QAAA,mBACA,WAAA,QAAA,eACA,OAAA,QAAA,WACA,QAAA,QAAA,YACA,QAAA,QAAA,YAEM,oBAAsB,iBACtB,yBAA2B,KAAK,KAAK,UAAW,wBA2BtD,GAAY,+BAAZ,AAAA,UAAY,+BAA6B,CAEvC,+BAAA,YAAA,aAOA,+BAAA,UAAA,aAGA,+BAAA,YAAA,eAZU,8BAAA,QAAA,+BAAA,SAAA,8BAA6B,KAgBzC,oCAA4C,cAAA,SAAS,CAsBnD,YAAsB,MAAkB,GAAY,MAAkC,cACpF,MAAM,MAAO,2EAEb,KAAM,OAAQ,QAAA,MAAM,GAAG,OAMvB,GAHA,GAAG,aAAa,yBAA0B,KAAK,KAAK,MAAM,cAAe,GAAG,2BAGxE,CAAC,GAAG,WAAW,KAAK,KAAK,MAAM,cAAe,aAChD,KAAM,IAAI,OAAM,eAAe,MAAM,0BAGvC,KAAM,SAAU,GAAI,iBAAA,aAAa,KAAM,UAAW,CAChD,WAAY,MAAM,gBAGd,cAAgB,QAAQ,mBAAmB,OAE3C,MAAQ,MAAM,YAAY,aAAa,CAC3C,SAAU,cACV,WAAY,QAAQ,UACpB,UAAW,SAAA,mBAAmB,gBAG1B,SAAW,AAAC,MAAM,iBAA+B,CACrD,CACE,WAAY,SACZ,eAAgB,CACd,QAAS,aACT,UAAW,MAAM,oBALoB,OAUrC,KAAO,GAAI,gBAAA,YAAY,KAAM,OAAQ,CACzC,KAAM,iBACN,WAAY,CACV,yBAA0B,CACxB,QAAS,aACT,UAAW,CAAC,CAAE,OAAQ,iBAAkB,OAAQ,QAAS,UAAW,CAAE,QAAS,2BAEjF,kBAAmB,CACjB,CAAE,UAAW,mFAEf,SAAU,YAGd,KAAK,QAAU,QAAA,MAAM,SAAS,KAAK,OAAO,QAE1C,KAAM,SAAO,IAAG,MAAM,WAAO,MAAA,KAAA,OAAA,GAAI,WAAA,SAAS,QAAQ,IAC5C,OAAM,IAAG,MAAM,cAAU,MAAA,KAAA,OAAA,GAAI,OAAA,KAAK,UAAU,KAE5C,QAAU,GAAI,gBAAA,YAAY,KAAM,UAAW,CAC/C,KAAM,wBACN,WAAY,CACV,KAAM,CACJ,SAAU,MAAM,WAChB,MAAO,MAAM,WAEf,QAAS,QAAQ,YACjB,WAAY,OAAO,cACnB,QAAS,GAAG,8BACZ,KAAM,KAAK,OAAO,OAClB,QAAS,MAAM,QACf,YAAa,KAAK,2BAA2B,MAAM,aACnD,YAAW,IAAE,MAAM,eAAW,MAAA,KAAA,OAAA,GAAI,UAItC,QAAQ,aAAa,MAEjB,KAAK,KAAK,cAAc,MAAM,0CAChC,SAAQ,YAAY,MAAM,iCAAkC,eAC5D,QAAQ,YAAY,MAAM,qCAAsC,SAGlE,KAAK,aAAe,QAAA,MAAM,SAAS,QAAQ,OAAO,cAjGtC,aAAY,MAAkB,SAAkB,MAAkC,+EACvF,KAAK,oBAAoB,MAAO,SAAU,OAAO,mBAI5C,qBAAoB,MAAkB,SAAkB,MAAkC,+EACtG,KAAM,IAAK,GAAG,iCACR,MAAQ,QAAA,MAAM,GAAG,OAIvB,MAHc,IAAG,MAAM,KAAK,aAAa,OAA6B,MAAA,KAAA,OAAA,GACjE,GAAI,wBAAuB,MAAO,GAAI,OA2FrC,2BAA2B,IAA+B,CAChE,GAAI,CAAC,KAAO,OAAO,KAAK,KAAK,SAAW,EACtC,OAMF,KAAM,WAAuC,GACvC,KAAO,OAAO,KAAK,KAAK,OAE9B,SAAW,OAAO,MAChB,UAAU,KAAO,IAAI,KAGvB,MAAO,CAAE,UAAW,YArHxB,QAAA,uBAAA",
  "names": []
}
