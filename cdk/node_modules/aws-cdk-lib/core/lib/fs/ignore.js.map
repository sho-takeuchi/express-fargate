{
  "version": 3,
  "sources": ["ignore.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport dockerIgnore, * as DockerIgnore from '@balena/dockerignore';\nimport gitIgnore, * as GitIgnore from 'ignore';\nimport * as minimatch from 'minimatch';\nimport { CopyOptions, IgnoreMode } from './options';\n\n                                                  \nexport abstract class IgnoreStrategy {\n                                                                                                                                                                                                                                                                     \n  public static glob(absoluteRootPath: string, patterns: string[]): GlobIgnoreStrategy {\n    return new GlobIgnoreStrategy(absoluteRootPath, patterns);\n  }\n\n                                                                                                                                                                                                                                                                                                                    \n  public static git(absoluteRootPath: string, patterns: string[]): GitIgnoreStrategy {\n    return new GitIgnoreStrategy(absoluteRootPath, patterns);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                           \n  public static docker(absoluteRootPath: string, patterns: string[]): DockerIgnoreStrategy {\n    return new DockerIgnoreStrategy(absoluteRootPath, patterns);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                  \n  public static fromCopyOptions(options: CopyOptions, absoluteRootPath: string): IgnoreStrategy {\n    const ignoreMode = options.ignoreMode || IgnoreMode.GLOB;\n    const exclude = options.exclude || [];\n\n    switch (ignoreMode) {\n      case IgnoreMode.GLOB:\n        return this.glob(absoluteRootPath, exclude);\n\n      case IgnoreMode.GIT:\n        return this.git(absoluteRootPath, exclude);\n\n      case IgnoreMode.DOCKER:\n        return this.docker(absoluteRootPath, exclude);\n    }\n  }\n\n                                                                              \n  public abstract add(pattern: string): void;\n\n                                                                                                                                                                                                                          \n  public abstract ignores(absoluteFilePath: string): boolean;\n}\n\n                                                            \nexport class GlobIgnoreStrategy extends IgnoreStrategy {\n  private readonly absoluteRootPath: string;\n  private readonly patterns: string[];\n\n  constructor(absoluteRootPath: string, patterns: string[]) {\n    super();\n\n    if (!path.isAbsolute(absoluteRootPath)) {\n      throw new Error('GlobIgnoreStrategy expects an absolute file path');\n    }\n\n    this.absoluteRootPath = absoluteRootPath;\n    this.patterns = patterns;\n  }\n\n                                                                              \n  public add(pattern: string): void {\n    this.patterns.push(pattern);\n  }\n\n                                                                                                                                                                                                                          \n  public ignores(absoluteFilePath: string): boolean {\n    if (!path.isAbsolute(absoluteFilePath)) {\n      throw new Error('GlobIgnoreStrategy.ignores() expects an absolute path');\n    }\n\n    let relativePath = path.relative(this.absoluteRootPath, absoluteFilePath);\n    let excludeOutput = false;\n\n    for (const pattern of this.patterns) {\n      const negate = pattern.startsWith('!');\n      const match = minimatch(relativePath, pattern, { matchBase: true, flipNegate: true });\n\n      if (!negate && match) {\n        excludeOutput = true;\n      }\n\n      if (negate && match) {\n        excludeOutput = false;\n      }\n    }\n\n    return excludeOutput;\n  }\n}\n\n                                                                                                            \nexport class GitIgnoreStrategy extends IgnoreStrategy {\n  private readonly absoluteRootPath: string;\n  private readonly ignore: GitIgnore.Ignore;\n\n  constructor(absoluteRootPath: string, patterns: string[]) {\n    super();\n\n    if (!path.isAbsolute(absoluteRootPath)) {\n      throw new Error('GitIgnoreStrategy expects an absolute file path');\n    }\n\n    this.absoluteRootPath = absoluteRootPath;\n    this.ignore = gitIgnore().add(patterns);\n  }\n\n                                                                              \n  public add(pattern: string): void {\n    this.ignore.add(pattern);\n  }\n\n                                                                                                                                                                                                                          \n  public ignores(absoluteFilePath: string): boolean {\n    if (!path.isAbsolute(absoluteFilePath)) {\n      throw new Error('GitIgnoreStrategy.ignores() expects an absolute path');\n    }\n\n    let relativePath = path.relative(this.absoluteRootPath, absoluteFilePath);\n\n    return this.ignore.ignores(relativePath);\n  }\n}\n\n                                                                                                                                                \nexport class DockerIgnoreStrategy extends IgnoreStrategy {\n  private readonly absoluteRootPath: string;\n  private readonly ignore: DockerIgnore.Ignore;\n\n  constructor(absoluteRootPath: string, patterns: string[]) {\n    super();\n\n    if (!path.isAbsolute(absoluteRootPath)) {\n      throw new Error('DockerIgnoreStrategy expects an absolute file path');\n    }\n\n    this.absoluteRootPath = absoluteRootPath;\n    this.ignore = dockerIgnore().add(patterns);\n  }\n\n                                                                              \n  public add(pattern: string): void {\n    this.ignore.add(pattern);\n  }\n\n                                                                                                                                                                                                                          \n  public ignores(absoluteFilePath: string): boolean {\n    if (!path.isAbsolute(absoluteFilePath)) {\n      throw new Error('DockerIgnoreStrategy.ignores() expects an absolute path');\n    }\n\n    let relativePath = path.relative(this.absoluteRootPath, absoluteFilePath);\n\n    return this.ignore.ignores(relativePath);\n  }\n}\n"],
  "mappings": "mTAAA,KAAA,QAAA,QACA,eAAA,QAAA,wBACA,SAAA,QAAA,UACA,UAAA,QAAA,aACA,UAAA,QAAA,aAGA,oBAAoC,OAEpB,MAAK,iBAA0B,SAAkB,CAC7D,MAAO,IAAI,oBAAmB,iBAAkB,gBAIpC,KAAI,iBAA0B,SAAkB,CAC5D,MAAO,IAAI,mBAAkB,iBAAkB,gBAInC,QAAO,iBAA0B,SAAkB,CAC/D,MAAO,IAAI,sBAAqB,iBAAkB,gBAItC,iBAAgB,QAAsB,iBAAwB,0DAC1E,KAAM,YAAa,QAAQ,YAAc,UAAA,WAAW,KAC9C,QAAU,QAAQ,SAAW,GAEnC,OAAQ,gBACD,WAAA,WAAW,KACd,MAAO,MAAK,KAAK,iBAAkB,aAEhC,WAAA,WAAW,IACd,MAAO,MAAK,IAAI,iBAAkB,aAE/B,WAAA,WAAW,OACd,MAAO,MAAK,OAAO,iBAAkB,WA7B7C,QAAA,eAAA,4GAyCA,gCAAwC,eAAc,CAIpD,YAAY,iBAA0B,SAAkB,CACtD,QAEA,GAAI,CAAC,KAAK,WAAW,kBACnB,KAAM,IAAI,OAAM,oDAGlB,KAAK,iBAAmB,iBACxB,KAAK,SAAW,SAIX,IAAI,QAAe,CACxB,KAAK,SAAS,KAAK,SAId,QAAQ,iBAAwB,CACrC,GAAI,CAAC,KAAK,WAAW,kBACnB,KAAM,IAAI,OAAM,yDAGlB,GAAI,cAAe,KAAK,SAAS,KAAK,iBAAkB,kBACpD,cAAgB,GAEpB,SAAW,WAAW,MAAK,SAAU,CACnC,KAAM,QAAS,QAAQ,WAAW,KAC5B,MAAQ,UAAU,aAAc,QAAS,CAAE,UAAW,GAAM,WAAY,KAE9E,AAAI,CAAC,QAAU,OACb,eAAgB,IAGd,QAAU,OACZ,eAAgB,IAIpB,MAAO,gBA1CX,QAAA,mBAAA,wHA+CA,+BAAuC,eAAc,CAInD,YAAY,iBAA0B,SAAkB,CACtD,QAEA,GAAI,CAAC,KAAK,WAAW,kBACnB,KAAM,IAAI,OAAM,mDAGlB,KAAK,iBAAmB,iBACxB,KAAK,OAAS,SAAA,UAAY,IAAI,UAIzB,IAAI,QAAe,CACxB,KAAK,OAAO,IAAI,SAIX,QAAQ,iBAAwB,CACrC,GAAI,CAAC,KAAK,WAAW,kBACnB,KAAM,IAAI,OAAM,wDAGlB,GAAI,cAAe,KAAK,SAAS,KAAK,iBAAkB,kBAExD,MAAO,MAAK,OAAO,QAAQ,eA5B/B,QAAA,kBAAA,qHAiCA,kCAA0C,eAAc,CAItD,YAAY,iBAA0B,SAAkB,CACtD,QAEA,GAAI,CAAC,KAAK,WAAW,kBACnB,KAAM,IAAI,OAAM,sDAGlB,KAAK,iBAAmB,iBACxB,KAAK,OAAS,eAAA,UAAe,IAAI,UAI5B,IAAI,QAAe,CACxB,KAAK,OAAO,IAAI,SAIX,QAAQ,iBAAwB,CACrC,GAAI,CAAC,KAAK,WAAW,kBACnB,KAAM,IAAI,OAAM,2DAGlB,GAAI,cAAe,KAAK,SAAS,KAAK,iBAAkB,kBAExD,MAAO,MAAK,OAAO,QAAQ,eA5B/B,QAAA,qBAAA",
  "names": []
}
