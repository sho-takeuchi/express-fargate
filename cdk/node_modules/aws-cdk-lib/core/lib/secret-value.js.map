{
  "version": 3,
  "sources": ["secret-value.ts"],
  "sourcesContent": ["import { CfnDynamicReference, CfnDynamicReferenceService } from './cfn-dynamic-reference';\nimport { CfnParameter } from './cfn-parameter';\nimport { Intrinsic } from './private/intrinsic';\nimport { Token } from './token';\n\nnexport class SecretValue extends Intrinsic {\n                                                                                                                                                                                                                                                    \n  public static plainText(secret: string): SecretValue {\n    return new SecretValue(secret);\n  }\n\n                                                                                                                                                                                        \n  public static secretsManager(secretId: string, options: SecretsManagerSecretOptions = {}): SecretValue {\n    if (!secretId) {\n      throw new Error('secretId cannot be empty');\n    }\n\n    if (!Token.isUnresolved(secretId) && !secretId.startsWith('arn:') && secretId.includes(':')) {\n      throw new Error(`secret id \"${secretId}\" is not an ARN but contains \":\"`);\n    }\n\n    if (options.versionStage && options.versionId) {\n      throw new Error(`verionStage: '${options.versionStage}' and versionId: '${options.versionId}' were both provided but only one is allowed`);\n    }\n\n    const parts = [\n      secretId,\n      'SecretString',\n      options.jsonField || '',\n      options.versionStage || '',\n      options.versionId || '',\n    ];\n\n    const dyref = new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, parts.join(':'));\n    return this.cfnDynamicReference(dyref);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                     \n  public static ssmSecure(parameterName: string, version?: string): SecretValue {\n    const parts = [parameterName, version ?? ''];\n    return this.cfnDynamicReference(new CfnDynamicReference(CfnDynamicReferenceService.SSM_SECURE, parts.join(':')));\n  }\n\n                                                                                                                                                                                                                                    \n  public static cfnDynamicReference(ref: CfnDynamicReference) {\n    return new SecretValue(ref);\n  }\n\n                                                                                                                                                                                                                                                                       \n  public static cfnParameter(param: CfnParameter) {\n    if (!param.noEcho) {\n      throw new Error('CloudFormation parameter must be configured with \"NoEcho\"');\n    }\n\n    return new SecretValue(param.value);\n  }\n}\n\n                                                                       \nexport interface SecretsManagerSecretOptions {\n                                                                                                                                                                                                                        \n  readonly versionStage?: string;\n\n                                                                                                                                                                                                 \n  readonly versionId?: string;\n\n                                                                                                                                                                                                       \n  readonly jsonField?: string;\n}\n"],
  "mappings": "kNAAA,wBAAA,QAAA,2BAEA,YAAA,QAAA,uBACA,QAAA,QAAA,WAGA,yBAAiC,aAAA,SAAS,OAE1B,WAAU,OAAc,CACpC,MAAO,IAAI,aAAY,cAIX,gBAAe,SAAkB,QAAuC,GAAE,CACtF,4EAAI,CAAC,SACH,KAAM,IAAI,OAAM,4BAGlB,GAAI,CAAC,QAAA,MAAM,aAAa,WAAa,CAAC,SAAS,WAAW,SAAW,SAAS,SAAS,KACrF,KAAM,IAAI,OAAM,cAAc,4CAGhC,GAAI,QAAQ,cAAgB,QAAQ,UAClC,KAAM,IAAI,OAAM,iBAAiB,QAAQ,iCAAiC,QAAQ,yDAGpF,KAAM,OAAQ,CACZ,SACA,eACA,QAAQ,WAAa,GACrB,QAAQ,cAAgB,GACxB,QAAQ,WAAa,IAGjB,MAAQ,GAAI,yBAAA,oBAAoB,wBAAA,2BAA2B,gBAAiB,MAAM,KAAK,MAC7F,MAAO,MAAK,oBAAoB,aAIpB,WAAU,cAAuB,QAAgB,CAC7D,KAAM,OAAQ,CAAC,cAAe,SAAO,KAAP,QAAW,IACzC,MAAO,MAAK,oBAAoB,GAAI,yBAAA,oBAAoB,wBAAA,2BAA2B,WAAY,MAAM,KAAK,aAI9F,qBAAoB,IAAwB,qEACjD,GAAI,aAAY,WAIX,cAAa,MAAmB,CAC5C,2DAAI,CAAC,MAAM,OACT,KAAM,IAAI,OAAM,6DAGlB,MAAO,IAAI,aAAY,MAAM,QAjDjC,QAAA,YAAA",
  "names": []
}
