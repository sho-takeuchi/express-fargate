"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.DefaultStackSynthesizer=exports.BOOTSTRAP_QUALIFIER_CONTEXT=void 0;const jsiiDeprecationWarnings=require("../../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),fs=require("fs"),path=require("path"),cxschema=require("../../../cloud-assembly-schema"),cxapi=require("../../../cx-api"),assets_1=require("../assets"),cfn_fn_1=require("../cfn-fn"),cfn_parameter_1=require("../cfn-parameter"),cfn_rule_1=require("../cfn-rule"),token_1=require("../token"),_shared_1=require("./_shared"),stack_synthesizer_1=require("./stack-synthesizer");exports.BOOTSTRAP_QUALIFIER_CONTEXT="@aws-cdk/core:bootstrapQualifier";const MIN_BOOTSTRAP_STACK_VERSION=6,MIN_LOOKUP_ROLE_BOOTSTRAP_STACK_VERSION=8;class DefaultStackSynthesizer extends stack_synthesizer_1.StackSynthesizer{constructor(props={}){var _b;super();this.props=props,this.files={},this.dockerImages={},jsiiDeprecationWarnings.aws_cdk_lib_DefaultStackSynthesizerProps(props),this.useLookupRoleForStackOperations=(_b=props.useLookupRoleForStackOperations)!==null&&_b!==void 0?_b:!0;for(const key in props)props.hasOwnProperty(key)&&validateNoToken(key);function validateNoToken(key){const prop=props[key];if(typeof prop=="string"&&token_1.Token.isUnresolved(prop))throw new Error(`DefaultSynthesizer property '${key}' cannot contain tokens; only the following placeholder strings are allowed: `+["${Qualifier}",cxapi.EnvironmentPlaceholders.CURRENT_REGION,cxapi.EnvironmentPlaceholders.CURRENT_ACCOUNT,cxapi.EnvironmentPlaceholders.CURRENT_PARTITION].join(", "))}}bind(stack){var _b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o;if(jsiiDeprecationWarnings.aws_cdk_lib_Stack(stack),this._stack!==void 0)throw new Error("A StackSynthesizer can only be used for one Stack: create a new instance to use with a different Stack");this._stack=stack;const qualifier=(_c=(_b=this.props.qualifier)!==null&&_b!==void 0?_b:stack.node.tryGetContext(exports.BOOTSTRAP_QUALIFIER_CONTEXT))!==null&&_c!==void 0?_c:DefaultStackSynthesizer.DEFAULT_QUALIFIER;this.qualifier=qualifier;const specialize=s=>(s=replaceAll(s,"${Qualifier}",qualifier),cxapi.EnvironmentPlaceholders.replace(s,{region:resolvedOr(stack.region,cxapi.EnvironmentPlaceholders.CURRENT_REGION),accountId:resolvedOr(stack.account,cxapi.EnvironmentPlaceholders.CURRENT_ACCOUNT),partition:cxapi.EnvironmentPlaceholders.CURRENT_PARTITION}));this.bucketName=specialize((_d=this.props.fileAssetsBucketName)!==null&&_d!==void 0?_d:DefaultStackSynthesizer.DEFAULT_FILE_ASSETS_BUCKET_NAME),this.repositoryName=specialize((_e=this.props.imageAssetsRepositoryName)!==null&&_e!==void 0?_e:DefaultStackSynthesizer.DEFAULT_IMAGE_ASSETS_REPOSITORY_NAME),this._deployRoleArn=specialize((_f=this.props.deployRoleArn)!==null&&_f!==void 0?_f:DefaultStackSynthesizer.DEFAULT_DEPLOY_ROLE_ARN),this._cloudFormationExecutionRoleArn=specialize((_g=this.props.cloudFormationExecutionRole)!==null&&_g!==void 0?_g:DefaultStackSynthesizer.DEFAULT_CLOUDFORMATION_ROLE_ARN),this.fileAssetPublishingRoleArn=specialize((_h=this.props.fileAssetPublishingRoleArn)!==null&&_h!==void 0?_h:DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PUBLISHING_ROLE_ARN),this.imageAssetPublishingRoleArn=specialize((_j=this.props.imageAssetPublishingRoleArn)!==null&&_j!==void 0?_j:DefaultStackSynthesizer.DEFAULT_IMAGE_ASSET_PUBLISHING_ROLE_ARN),this.lookupRoleArn=specialize((_k=this.props.lookupRoleArn)!==null&&_k!==void 0?_k:DefaultStackSynthesizer.DEFAULT_LOOKUP_ROLE_ARN),this.bucketPrefix=specialize((_l=this.props.bucketPrefix)!==null&&_l!==void 0?_l:DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PREFIX),this.dockerTagPrefix=specialize((_m=this.props.dockerTagPrefix)!==null&&_m!==void 0?_m:DefaultStackSynthesizer.DEFAULT_DOCKER_ASSET_PREFIX),this.bootstrapStackVersionSsmParameter=replaceAll((_o=this.props.bootstrapStackVersionSsmParameter)!==null&&_o!==void 0?_o:DefaultStackSynthesizer.DEFAULT_BOOTSTRAP_STACK_VERSION_SSM_PARAMETER,"${Qualifier}",qualifier)}addFileAsset(asset){jsiiDeprecationWarnings.aws_cdk_lib_FileAssetSource(asset),_shared_1.assertBound(this.stack),_shared_1.assertBound(this.bucketName),validateFileAssetSource(asset);const extension=asset.fileName!=null?path.extname(asset.fileName):"",objectKey=this.bucketPrefix+asset.sourceHash+(asset.packaging===assets_1.FileAssetPackaging.ZIP_DIRECTORY?".zip":extension);this.files[asset.sourceHash]={source:{path:asset.fileName,executable:asset.executable,packaging:asset.packaging},destinations:{[this.manifestEnvName]:{bucketName:this.bucketName,objectKey,region:resolvedOr(this.stack.region,void 0),assumeRoleArn:this.fileAssetPublishingRoleArn,assumeRoleExternalId:this.props.fileAssetPublishingExternalId}}};const{region,urlSuffix}=stackLocationOrInstrinsics(this.stack),httpUrl=cfnify(`https://s3.${region}.${urlSuffix}/${this.bucketName}/${objectKey}`),s3ObjectUrl=cfnify(`s3://${this.bucketName}/${objectKey}`);return{bucketName:cfnify(this.bucketName),objectKey,httpUrl,s3ObjectUrl,s3Url:httpUrl}}addDockerImageAsset(asset){jsiiDeprecationWarnings.aws_cdk_lib_DockerImageAssetSource(asset),_shared_1.assertBound(this.stack),_shared_1.assertBound(this.repositoryName),validateDockerImageAssetSource(asset);const imageTag=this.dockerTagPrefix+asset.sourceHash;this.dockerImages[asset.sourceHash]={source:{executable:asset.executable,directory:asset.directoryName,dockerBuildArgs:asset.dockerBuildArgs,dockerBuildTarget:asset.dockerBuildTarget,dockerFile:asset.dockerFile},destinations:{[this.manifestEnvName]:{repositoryName:this.repositoryName,imageTag,region:resolvedOr(this.stack.region,void 0),assumeRoleArn:this.imageAssetPublishingRoleArn,assumeRoleExternalId:this.props.imageAssetPublishingExternalId}}};const{account,region,urlSuffix}=stackLocationOrInstrinsics(this.stack);return{repositoryName:cfnify(this.repositoryName),imageUri:cfnify(`${account}.dkr.ecr.${region}.${urlSuffix}/${this.repositoryName}:${imageTag}`)}}synthesizeStackTemplate(stack,session){jsiiDeprecationWarnings.aws_cdk_lib_Stack(stack),jsiiDeprecationWarnings.aws_cdk_lib_ISynthesisSession(session),stack._synthesizeTemplate(session,this.lookupRoleArn)}synthesize(session){var _b;jsiiDeprecationWarnings.aws_cdk_lib_ISynthesisSession(session),_shared_1.assertBound(this.stack),_shared_1.assertBound(this.qualifier),((_b=this.props.generateBootstrapVersionRule)!==null&&_b!==void 0?_b:!0)&&addBootstrapVersionRule(this.stack,MIN_BOOTSTRAP_STACK_VERSION,this.bootstrapStackVersionSsmParameter),this.synthesizeStackTemplate(this.stack,session);const templateManifestUrl=this.addStackTemplateToAssetManifest(session),artifactId=this.writeAssetManifest(session);this.emitStackArtifact(this.stack,session,{assumeRoleExternalId:this.props.deployRoleExternalId,assumeRoleArn:this._deployRoleArn,cloudFormationExecutionRoleArn:this._cloudFormationExecutionRoleArn,stackTemplateAssetObjectUrl:templateManifestUrl,requiresBootstrapStackVersion:MIN_BOOTSTRAP_STACK_VERSION,bootstrapStackVersionSsmParameter:this.bootstrapStackVersionSsmParameter,additionalDependencies:[artifactId],lookupRole:this.useLookupRoleForStackOperations&&this.lookupRoleArn?{arn:this.lookupRoleArn,assumeRoleExternalId:this.props.lookupRoleExternalId,requiresBootstrapStackVersion:MIN_LOOKUP_ROLE_BOOTSTRAP_STACK_VERSION,bootstrapStackVersionSsmParameter:this.bootstrapStackVersionSsmParameter}:void 0})}get deployRoleArn(){if(!this._deployRoleArn)throw new Error("deployRoleArn getter can only be called after the synthesizer has been bound to a Stack");return this._deployRoleArn}get cloudFormationExecutionRoleArn(){if(!this._cloudFormationExecutionRoleArn)throw new Error("cloudFormationExecutionRoleArn getter can only be called after the synthesizer has been bound to a Stack");return this._cloudFormationExecutionRoleArn}get stack(){return this._stack}addStackTemplateToAssetManifest(session){_shared_1.assertBound(this.stack);const templatePath=path.join(session.assembly.outdir,this.stack.templateFile),template=fs.readFileSync(templatePath,{encoding:"utf-8"}),sourceHash=_shared_1.contentHash(template);this.addFileAsset({fileName:this.stack.templateFile,packaging:assets_1.FileAssetPackaging.FILE,sourceHash});const extension=path.extname(this.stack.templateFile);return`s3://${this.bucketName}/${this.bucketPrefix}${sourceHash}${extension}`}writeAssetManifest(session){_shared_1.assertBound(this.stack);const artifactId=`${this.stack.artifactId}.assets`,manifestFile=`${artifactId}.json`,outPath=path.join(session.assembly.outdir,manifestFile),manifest={version:cxschema.Manifest.version(),files:this.files,dockerImages:this.dockerImages};return fs.writeFileSync(outPath,JSON.stringify(manifest,void 0,2)),session.assembly.addArtifact(artifactId,{type:cxschema.ArtifactType.ASSET_MANIFEST,properties:{file:manifestFile,requiresBootstrapStackVersion:MIN_BOOTSTRAP_STACK_VERSION,bootstrapStackVersionSsmParameter:this.bootstrapStackVersionSsmParameter}}),artifactId}get manifestEnvName(){return _shared_1.assertBound(this.stack),[resolvedOr(this.stack.account,"current_account"),resolvedOr(this.stack.region,"current_region")].join("-")}}exports.DefaultStackSynthesizer=DefaultStackSynthesizer,_a=JSII_RTTI_SYMBOL_1,DefaultStackSynthesizer[_a]={fqn:"aws-cdk-lib.DefaultStackSynthesizer",version:"2.10.0"},DefaultStackSynthesizer.DEFAULT_QUALIFIER="hnb659fds",DefaultStackSynthesizer.DEFAULT_CLOUDFORMATION_ROLE_ARN="arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-cfn-exec-role-${AWS::AccountId}-${AWS::Region}",DefaultStackSynthesizer.DEFAULT_DEPLOY_ROLE_ARN="arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-deploy-role-${AWS::AccountId}-${AWS::Region}",DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PUBLISHING_ROLE_ARN="arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-file-publishing-role-${AWS::AccountId}-${AWS::Region}",DefaultStackSynthesizer.DEFAULT_IMAGE_ASSET_PUBLISHING_ROLE_ARN="arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-image-publishing-role-${AWS::AccountId}-${AWS::Region}",DefaultStackSynthesizer.DEFAULT_LOOKUP_ROLE_ARN="arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-lookup-role-${AWS::AccountId}-${AWS::Region}",DefaultStackSynthesizer.DEFAULT_IMAGE_ASSETS_REPOSITORY_NAME="cdk-${Qualifier}-container-assets-${AWS::AccountId}-${AWS::Region}",DefaultStackSynthesizer.DEFAULT_FILE_ASSETS_BUCKET_NAME="cdk-${Qualifier}-assets-${AWS::AccountId}-${AWS::Region}",DefaultStackSynthesizer.DEFAULT_FILE_ASSET_KEY_ARN_EXPORT_NAME="CdkBootstrap-${Qualifier}-FileAssetKeyArn",DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PREFIX="",DefaultStackSynthesizer.DEFAULT_DOCKER_ASSET_PREFIX="",DefaultStackSynthesizer.DEFAULT_BOOTSTRAP_STACK_VERSION_SSM_PARAMETER="/cdk-bootstrap/${Qualifier}/version";function resolvedOr(x,def){return token_1.Token.isUnresolved(x)?def:x}function replaceAll(s,search,replace){return s.split(search).join(replace)}function cfnify(s){return s.indexOf("${")>-1?cfn_fn_1.Fn.sub(s):s}function stackLocationOrInstrinsics(stack){return{account:resolvedOr(stack.account,"${AWS::AccountId}"),region:resolvedOr(stack.region,"${AWS::Region}"),urlSuffix:resolvedOr(stack.urlSuffix,"${AWS::URLSuffix}")}}function addBootstrapVersionRule(stack,requiredVersion,bootstrapStackVersionSsmParameter){if(stack.node.tryFindChild("BootstrapVersion"))return;const param=new cfn_parameter_1.CfnParameter(stack,"BootstrapVersion",{type:"AWS::SSM::Parameter::Value<String>",description:`Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. ${cxapi.SSMPARAM_NO_INVALIDATE}`,default:bootstrapStackVersionSsmParameter}),oldVersions=range(1,requiredVersion).map(n=>`${n}`);new cfn_rule_1.CfnRule(stack,"CheckBootstrapVersion",{assertions:[{assert:cfn_fn_1.Fn.conditionNot(cfn_fn_1.Fn.conditionContains(oldVersions,param.valueAsString)),assertDescription:`CDK bootstrap stack version ${requiredVersion} required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.`}]})}function range(startIncl,endExcl){const ret=new Array;for(let i=startIncl;i<endExcl;i++)ret.push(i);return ret}function validateFileAssetSource(asset){if(!!asset.executable==!!asset.fileName)throw new Error(`Exactly one of 'fileName' or 'executable' is required, got: ${JSON.stringify(asset)}`);if(!!asset.packaging!=!!asset.fileName)throw new Error(`'packaging' is expected in combination with 'fileName', got: ${JSON.stringify(asset)}`)}function validateDockerImageAssetSource(asset){if(!!asset.executable==!!asset.directoryName)throw new Error(`Exactly one of 'directoryName' or 'executable' is required, got: ${JSON.stringify(asset)}`);check("dockerBuildArgs"),check("dockerBuildTarget"),check("dockerFile");function check(key){if(asset[key]&&!asset.directoryName)throw new Error(`'${key}' is only allowed in combination with 'directoryName', got: ${JSON.stringify(asset)}`)}}
//# sourceMappingURL=default-synthesizer.js.map
