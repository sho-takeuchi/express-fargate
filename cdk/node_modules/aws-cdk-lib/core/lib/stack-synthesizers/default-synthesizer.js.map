{
  "version": 3,
  "sources": ["default-synthesizer.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as cxschema from '../../../cloud-assembly-schema';\nimport * as cxapi from '../../../cx-api';\nimport { DockerImageAssetLocation, DockerImageAssetSource, FileAssetLocation, FileAssetPackaging, FileAssetSource } from '../assets';\nimport { Fn } from '../cfn-fn';\nimport { CfnParameter } from '../cfn-parameter';\nimport { CfnRule } from '../cfn-rule';\nimport { Stack } from '../stack';\nimport { Token } from '../token';\nimport { assertBound, contentHash } from './_shared';\nimport { StackSynthesizer } from './stack-synthesizer';\nimport { ISynthesisSession } from './types';\n\nexport const BOOTSTRAP_QUALIFIER_CONTEXT = '@aws-cdk/core:bootstrapQualifier';\n\n/* eslint-disable max-len */\n\n/**\n * The minimum bootstrap stack version required by this app.\n */\nconst MIN_BOOTSTRAP_STACK_VERSION = 6;\n\n/**\n * The minimum bootstrap stack version required\n * to use the lookup role.\n */\nconst MIN_LOOKUP_ROLE_BOOTSTRAP_STACK_VERSION = 8;\n\n                                                               \nexport interface DefaultStackSynthesizerProps {\n                                                                                                                                                                                                                                                                                                                                                                                                                               \n  readonly fileAssetsBucketName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n  readonly imageAssetsRepositoryName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n  readonly fileAssetPublishingRoleArn?: string;\n\n                                                                                                                    \n  readonly fileAssetPublishingExternalId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n  readonly imageAssetPublishingRoleArn?: string;\n\n                                                                                                                         \n  readonly lookupRoleArn?: string;\n\n                                                                                                 \n  readonly lookupRoleExternalId?: string;\n\n                                                                                                                                                                                                                                                                                                                \n  readonly useLookupRoleForStackOperations?: boolean;\n\n                                                                                                                     \n  readonly imageAssetPublishingExternalId?: string;\n\n                                                                                                                         \n  readonly deployRoleExternalId?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                              \n  readonly deployRoleArn?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n  readonly cloudFormationExecutionRole?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n  readonly fileAssetKeyArnExportName?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                             \n  readonly qualifier?: string;\n\n                                                                                                                                                                                                                                                                        \n  readonly generateBootstrapVersionRule?: boolean;\n\n                                                                                                                                   \n  readonly bucketPrefix?: string;\n\n                                                                                                                                                                                                                                                                       \n  readonly dockerTagPrefix?: string;\n\n                                                                                                                                                                                                                                       \n  readonly bootstrapStackVersionSsmParameter?: string;\n}\n\n                                                                                                                                                                                                                                                                                                                                                      \nexport class DefaultStackSynthesizer extends StackSynthesizer {\n                                      \n  public static readonly DEFAULT_QUALIFIER = 'hnb659fds';\n\n                                                 \n  public static readonly DEFAULT_CLOUDFORMATION_ROLE_ARN = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-cfn-exec-role-${AWS::AccountId}-${AWS::Region}';\n\n                                         \n  public static readonly DEFAULT_DEPLOY_ROLE_ARN = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-deploy-role-${AWS::AccountId}-${AWS::Region}';\n\n                                                                        \n  public static readonly DEFAULT_FILE_ASSET_PUBLISHING_ROLE_ARN = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-file-publishing-role-${AWS::AccountId}-${AWS::Region}';\n\n                                                                          \n  public static readonly DEFAULT_IMAGE_ASSET_PUBLISHING_ROLE_ARN = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-image-publishing-role-${AWS::AccountId}-${AWS::Region}';\n\n                                                            \n  public static readonly DEFAULT_LOOKUP_ROLE_ARN = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-${Qualifier}-lookup-role-${AWS::AccountId}-${AWS::Region}';\n\n                                                     \n  public static readonly DEFAULT_IMAGE_ASSETS_REPOSITORY_NAME = 'cdk-${Qualifier}-container-assets-${AWS::AccountId}-${AWS::Region}';\n\n                                                \n  public static readonly DEFAULT_FILE_ASSETS_BUCKET_NAME = 'cdk-${Qualifier}-assets-${AWS::AccountId}-${AWS::Region}';\n\n                                                                          \n  public static readonly DEFAULT_FILE_ASSET_KEY_ARN_EXPORT_NAME = 'CdkBootstrap-${Qualifier}-FileAssetKeyArn';\n\n                                          \n  public static readonly DEFAULT_FILE_ASSET_PREFIX = '';\n                                            \n  public static readonly DEFAULT_DOCKER_ASSET_PREFIX = '';\n\n                                                               \n  public static readonly DEFAULT_BOOTSTRAP_STACK_VERSION_SSM_PARAMETER = '/cdk-bootstrap/${Qualifier}/version';\n\n  private _stack?: Stack;\n  private bucketName?: string;\n  private repositoryName?: string;\n  private _deployRoleArn?: string;\n  private _cloudFormationExecutionRoleArn?: string;\n  private fileAssetPublishingRoleArn?: string;\n  private imageAssetPublishingRoleArn?: string;\n  private lookupRoleArn?: string;\n  private useLookupRoleForStackOperations: boolean;\n  private qualifier?: string;\n  private bucketPrefix?: string;\n  private dockerTagPrefix?: string;\n  private bootstrapStackVersionSsmParameter?: string;\n\n  private readonly files: NonNullable<cxschema.AssetManifest['files']> = {};\n  private readonly dockerImages: NonNullable<cxschema.AssetManifest['dockerImages']> = {};\n\n  constructor(private readonly props: DefaultStackSynthesizerProps = {}) {\n    super();\n    this.useLookupRoleForStackOperations = props.useLookupRoleForStackOperations ?? true;\n\n    for (const key in props) {\n      if (props.hasOwnProperty(key)) {\n        validateNoToken(key as keyof DefaultStackSynthesizerProps);\n      }\n    }\n\n    function validateNoToken<A extends keyof DefaultStackSynthesizerProps>(key: A) {\n      const prop = props[key];\n      if (typeof prop === 'string' && Token.isUnresolved(prop)) {\n        throw new Error(`DefaultSynthesizer property '${key}' cannot contain tokens; only the following placeholder strings are allowed: ` + [\n          '${Qualifier}',\n          cxapi.EnvironmentPlaceholders.CURRENT_REGION,\n          cxapi.EnvironmentPlaceholders.CURRENT_ACCOUNT,\n          cxapi.EnvironmentPlaceholders.CURRENT_PARTITION,\n        ].join(', '));\n      }\n    }\n  }\n\n  public bind(stack: Stack): void {\n    if (this._stack !== undefined) {\n      throw new Error('A StackSynthesizer can only be used for one Stack: create a new instance to use with a different Stack');\n    }\n\n    this._stack = stack;\n\n    const qualifier = this.props.qualifier ?? stack.node.tryGetContext(BOOTSTRAP_QUALIFIER_CONTEXT) ?? DefaultStackSynthesizer.DEFAULT_QUALIFIER;\n    this.qualifier = qualifier;\n\n    // Function to replace placeholders in the input string as much as possible\n    //\n    // We replace:\n    // - ${Qualifier}: always\n    // - ${AWS::AccountId}, ${AWS::Region}: only if we have the actual values available\n    // - ${AWS::Partition}: never, since we never have the actual partition value.\n    const specialize = (s: string) => {\n      s = replaceAll(s, '${Qualifier}', qualifier);\n      return cxapi.EnvironmentPlaceholders.replace(s, {\n        region: resolvedOr(stack.region, cxapi.EnvironmentPlaceholders.CURRENT_REGION),\n        accountId: resolvedOr(stack.account, cxapi.EnvironmentPlaceholders.CURRENT_ACCOUNT),\n        partition: cxapi.EnvironmentPlaceholders.CURRENT_PARTITION,\n      });\n    };\n\n    /* eslint-disable max-len */\n    this.bucketName = specialize(this.props.fileAssetsBucketName ?? DefaultStackSynthesizer.DEFAULT_FILE_ASSETS_BUCKET_NAME);\n    this.repositoryName = specialize(this.props.imageAssetsRepositoryName ?? DefaultStackSynthesizer.DEFAULT_IMAGE_ASSETS_REPOSITORY_NAME);\n    this._deployRoleArn = specialize(this.props.deployRoleArn ?? DefaultStackSynthesizer.DEFAULT_DEPLOY_ROLE_ARN);\n    this._cloudFormationExecutionRoleArn = specialize(this.props.cloudFormationExecutionRole ?? DefaultStackSynthesizer.DEFAULT_CLOUDFORMATION_ROLE_ARN);\n    this.fileAssetPublishingRoleArn = specialize(this.props.fileAssetPublishingRoleArn ?? DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PUBLISHING_ROLE_ARN);\n    this.imageAssetPublishingRoleArn = specialize(this.props.imageAssetPublishingRoleArn ?? DefaultStackSynthesizer.DEFAULT_IMAGE_ASSET_PUBLISHING_ROLE_ARN);\n    this.lookupRoleArn = specialize(this.props.lookupRoleArn ?? DefaultStackSynthesizer.DEFAULT_LOOKUP_ROLE_ARN);\n    this.bucketPrefix = specialize(this.props.bucketPrefix ?? DefaultStackSynthesizer.DEFAULT_FILE_ASSET_PREFIX);\n    this.dockerTagPrefix = specialize(this.props.dockerTagPrefix ?? DefaultStackSynthesizer.DEFAULT_DOCKER_ASSET_PREFIX);\n    this.bootstrapStackVersionSsmParameter = replaceAll(\n      this.props.bootstrapStackVersionSsmParameter ?? DefaultStackSynthesizer.DEFAULT_BOOTSTRAP_STACK_VERSION_SSM_PARAMETER,\n      '${Qualifier}',\n      qualifier,\n    );\n    /* eslint-enable max-len */\n  }\n\n  public addFileAsset(asset: FileAssetSource): FileAssetLocation {\n    assertBound(this.stack);\n    assertBound(this.bucketName);\n    validateFileAssetSource(asset);\n\n    const extension = asset.fileName != undefined ? path.extname(asset.fileName) : '';\n    const objectKey = this.bucketPrefix + asset.sourceHash + (asset.packaging === FileAssetPackaging.ZIP_DIRECTORY ? '.zip' : extension);\n\n    // Add to manifest\n    this.files[asset.sourceHash] = {\n      source: {\n        path: asset.fileName,\n        executable: asset.executable,\n        packaging: asset.packaging,\n      },\n      destinations: {\n        [this.manifestEnvName]: {\n          bucketName: this.bucketName,\n          objectKey,\n          region: resolvedOr(this.stack.region, undefined),\n          assumeRoleArn: this.fileAssetPublishingRoleArn,\n          assumeRoleExternalId: this.props.fileAssetPublishingExternalId,\n        },\n      },\n    };\n\n    const { region, urlSuffix } = stackLocationOrInstrinsics(this.stack);\n    const httpUrl = cfnify(`https://s3.${region}.${urlSuffix}/${this.bucketName}/${objectKey}`);\n    const s3ObjectUrl = cfnify(`s3://${this.bucketName}/${objectKey}`);\n\n    // Return CFN expression\n    return {\n      bucketName: cfnify(this.bucketName),\n      objectKey,\n      httpUrl,\n      s3ObjectUrl,\n      s3Url: httpUrl,\n    };\n  }\n\n  public addDockerImageAsset(asset: DockerImageAssetSource): DockerImageAssetLocation {\n    assertBound(this.stack);\n    assertBound(this.repositoryName);\n    validateDockerImageAssetSource(asset);\n\n    const imageTag = this.dockerTagPrefix + asset.sourceHash;\n\n    // Add to manifest\n    this.dockerImages[asset.sourceHash] = {\n      source: {\n        executable: asset.executable,\n        directory: asset.directoryName,\n        dockerBuildArgs: asset.dockerBuildArgs,\n        dockerBuildTarget: asset.dockerBuildTarget,\n        dockerFile: asset.dockerFile,\n      },\n      destinations: {\n        [this.manifestEnvName]: {\n          repositoryName: this.repositoryName,\n          imageTag,\n          region: resolvedOr(this.stack.region, undefined),\n          assumeRoleArn: this.imageAssetPublishingRoleArn,\n          assumeRoleExternalId: this.props.imageAssetPublishingExternalId,\n        },\n      },\n    };\n\n    const { account, region, urlSuffix } = stackLocationOrInstrinsics(this.stack);\n\n    // Return CFN expression\n    return {\n      repositoryName: cfnify(this.repositoryName),\n      imageUri: cfnify(`${account}.dkr.ecr.${region}.${urlSuffix}/${this.repositoryName}:${imageTag}`),\n    };\n  }\n\n  protected synthesizeStackTemplate(stack: Stack, session: ISynthesisSession): void {\n    stack._synthesizeTemplate(session, this.lookupRoleArn);\n  }\n\n                                                               \n  public synthesize(session: ISynthesisSession): void {\n    assertBound(this.stack);\n    assertBound(this.qualifier);\n\n    // Must be done here -- if it's done in bind() (called in the Stack's constructor)\n    // then it will become impossible to set context after that.\n    //\n    // If it's done AFTER _synthesizeTemplate(), then the template won't contain the\n    // right constructs.\n    if (this.props.generateBootstrapVersionRule ?? true) {\n      addBootstrapVersionRule(this.stack, MIN_BOOTSTRAP_STACK_VERSION, <string> this.bootstrapStackVersionSsmParameter);\n    }\n\n    this.synthesizeStackTemplate(this.stack, session);\n\n    // Add the stack's template to the artifact manifest\n    const templateManifestUrl = this.addStackTemplateToAssetManifest(session);\n\n    const artifactId = this.writeAssetManifest(session);\n\n    this.emitStackArtifact(this.stack, session, {\n      assumeRoleExternalId: this.props.deployRoleExternalId,\n      assumeRoleArn: this._deployRoleArn,\n      cloudFormationExecutionRoleArn: this._cloudFormationExecutionRoleArn,\n      stackTemplateAssetObjectUrl: templateManifestUrl,\n      requiresBootstrapStackVersion: MIN_BOOTSTRAP_STACK_VERSION,\n      bootstrapStackVersionSsmParameter: this.bootstrapStackVersionSsmParameter,\n      additionalDependencies: [artifactId],\n      lookupRole: this.useLookupRoleForStackOperations && this.lookupRoleArn ? {\n        arn: this.lookupRoleArn,\n        assumeRoleExternalId: this.props.lookupRoleExternalId,\n        requiresBootstrapStackVersion: MIN_LOOKUP_ROLE_BOOTSTRAP_STACK_VERSION,\n        bootstrapStackVersionSsmParameter: this.bootstrapStackVersionSsmParameter,\n      } : undefined,\n    });\n  }\n\n                                                    \n  public get deployRoleArn(): string {\n    if (!this._deployRoleArn) {\n      throw new Error('deployRoleArn getter can only be called after the synthesizer has been bound to a Stack');\n    }\n    return this._deployRoleArn;\n  }\n\n                                                           \n  public get cloudFormationExecutionRoleArn(): string {\n    if (!this._cloudFormationExecutionRoleArn) {\n      throw new Error('cloudFormationExecutionRoleArn getter can only be called after the synthesizer has been bound to a Stack');\n    }\n    return this._cloudFormationExecutionRoleArn;\n  }\n\n  protected get stack(): Stack | undefined {\n    return this._stack;\n  }\n\n  /**\n   * Add the stack's template as one of the manifest assets\n   *\n   * This will make it get uploaded to S3 automatically by S3-assets. Return\n   * the manifest URL.\n   *\n   * (We can't return the location returned from `addFileAsset`, as that\n   * contains CloudFormation intrinsics which can't go into the manifest).\n   */\n  private addStackTemplateToAssetManifest(session: ISynthesisSession) {\n    assertBound(this.stack);\n\n    const templatePath = path.join(session.assembly.outdir, this.stack.templateFile);\n    const template = fs.readFileSync(templatePath, { encoding: 'utf-8' });\n\n    const sourceHash = contentHash(template);\n\n    this.addFileAsset({\n      fileName: this.stack.templateFile,\n      packaging: FileAssetPackaging.FILE,\n      sourceHash,\n    });\n\n    // We should technically return an 'https://s3.REGION.amazonaws.com[.cn]/name/hash' URL here,\n    // because that is what CloudFormation expects to see.\n    //\n    // However, there's no way for us to actually know the UrlSuffix a priori, so we can't construct it here.\n    //\n    // Instead, we'll have a protocol with the CLI that we put an 's3://.../...' URL here, and the CLI\n    // is going to resolve it to the correct 'https://.../' URL before it gives it to CloudFormation.\n    //\n    // ALSO: it would be great to reuse the return value of `addFileAsset()` here, except those contain\n    // CloudFormation REFERENCES to locations, not actual locations (can contain `{ Ref: AWS::Region }` and\n    // `{ Ref: SomeParameter }` etc). We therefore have to duplicate some logic here :(.\n    const extension = path.extname(this.stack.templateFile);\n    return `s3://${this.bucketName}/${this.bucketPrefix}${sourceHash}${extension}`;\n  }\n\n  /**\n   * Write an asset manifest to the Cloud Assembly, return the artifact IDs written\n   */\n  private writeAssetManifest(session: ISynthesisSession): string {\n    assertBound(this.stack);\n\n    const artifactId = `${this.stack.artifactId}.assets`;\n    const manifestFile = `${artifactId}.json`;\n    const outPath = path.join(session.assembly.outdir, manifestFile);\n\n    const manifest: cxschema.AssetManifest = {\n      version: cxschema.Manifest.version(),\n      files: this.files,\n      dockerImages: this.dockerImages,\n    };\n\n    fs.writeFileSync(outPath, JSON.stringify(manifest, undefined, 2));\n    session.assembly.addArtifact(artifactId, {\n      type: cxschema.ArtifactType.ASSET_MANIFEST,\n      properties: {\n        file: manifestFile,\n        requiresBootstrapStackVersion: MIN_BOOTSTRAP_STACK_VERSION,\n        bootstrapStackVersionSsmParameter: this.bootstrapStackVersionSsmParameter,\n      },\n    });\n\n    return artifactId;\n  }\n\n  private get manifestEnvName(): string {\n    assertBound(this.stack);\n\n    return [\n      resolvedOr(this.stack.account, 'current_account'),\n      resolvedOr(this.stack.region, 'current_region'),\n    ].join('-');\n  }\n}\n\n/**\n * Return the given value if resolved or fall back to a default\n */\nfunction resolvedOr<A>(x: string, def: A): string | A {\n  return Token.isUnresolved(x) ? def : x;\n}\n\n/**\n * A \"replace-all\" function that doesn't require us escaping a literal string to a regex\n */\nfunction replaceAll(s: string, search: string, replace: string) {\n  return s.split(search).join(replace);\n}\n\n/**\n * If the string still contains placeholders, wrap it in a Fn::Sub so they will be substituted at CFN deployment time\n *\n * (This happens to work because the placeholders we picked map directly onto CFN\n * placeholders. If they didn't we'd have to do a transformation here).\n */\nfunction cfnify(s: string): string {\n  return s.indexOf('${') > -1 ? Fn.sub(s) : s;\n}\n\n/**\n * Return the stack locations if they're concrete, or the original CFN intrisics otherwise\n *\n * We need to return these instead of the tokenized versions of the strings,\n * since we must accept those same ${AWS::AccountId}/${AWS::Region} placeholders\n * in bucket names and role names (in order to allow environment-agnostic stacks).\n *\n * We'll wrap a single {Fn::Sub} around the final string in order to replace everything,\n * but we can't have the token system render part of the string to {Fn::Join} because\n * the CFN specification doesn't allow the {Fn::Sub} template string to be an arbitrary\n * expression--it must be a string literal.\n */\nfunction stackLocationOrInstrinsics(stack: Stack) {\n  return {\n    account: resolvedOr(stack.account, '${AWS::AccountId}'),\n    region: resolvedOr(stack.region, '${AWS::Region}'),\n    urlSuffix: resolvedOr(stack.urlSuffix, '${AWS::URLSuffix}'),\n  };\n}\n\n/**\n * Add a CfnRule to the Stack which checks the current version of the bootstrap stack this template is targeting\n *\n * The CLI normally checks this, but in a pipeline the CLI is not involved\n * so we encode this rule into the template in a way that CloudFormation will check it.\n */\nfunction addBootstrapVersionRule(stack: Stack, requiredVersion: number, bootstrapStackVersionSsmParameter: string) {\n  // Because of https://github.com/aws/aws-cdk/blob/master/packages/assert-internal/lib/synth-utils.ts#L74\n  // synthesize() may be called more than once on a stack in unit tests, and the below would break\n  // if we execute it a second time. Guard against the constructs already existing.\n  if (stack.node.tryFindChild('BootstrapVersion')) { return; }\n\n  const param = new CfnParameter(stack, 'BootstrapVersion', {\n    type: 'AWS::SSM::Parameter::Value<String>',\n    description: `Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. ${cxapi.SSMPARAM_NO_INVALIDATE}`,\n    default: bootstrapStackVersionSsmParameter,\n  });\n\n  // There is no >= check in CloudFormation, so we have to check the number\n  // is NOT in [1, 2, 3, ... <required> - 1]\n  const oldVersions = range(1, requiredVersion).map(n => `${n}`);\n\n  new CfnRule(stack, 'CheckBootstrapVersion', {\n    assertions: [\n      {\n        assert: Fn.conditionNot(Fn.conditionContains(oldVersions, param.valueAsString)),\n        assertDescription: `CDK bootstrap stack version ${requiredVersion} required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.`,\n      },\n    ],\n  });\n}\n\nfunction range(startIncl: number, endExcl: number) {\n  const ret = new Array<number>();\n  for (let i = startIncl; i < endExcl; i++) {\n    ret.push(i);\n  }\n  return ret;\n}\n\nfunction validateFileAssetSource(asset: FileAssetSource) {\n  if (!!asset.executable === !!asset.fileName) {\n    throw new Error(`Exactly one of 'fileName' or 'executable' is required, got: ${JSON.stringify(asset)}`);\n  }\n\n  if (!!asset.packaging !== !!asset.fileName) {\n    throw new Error(`'packaging' is expected in combination with 'fileName', got: ${JSON.stringify(asset)}`);\n  }\n}\n\nfunction validateDockerImageAssetSource(asset: DockerImageAssetSource) {\n  if (!!asset.executable === !!asset.directoryName) {\n    throw new Error(`Exactly one of 'directoryName' or 'executable' is required, got: ${JSON.stringify(asset)}`);\n  }\n\n  check('dockerBuildArgs');\n  check('dockerBuildTarget');\n  check('dockerFile');\n\n  function check<K extends keyof DockerImageAssetSource>(key: K) {\n    if (asset[key] && !asset.directoryName) {\n      throw new Error(`'${key}' is only allowed in combination with 'directoryName', got: ${JSON.stringify(asset)}`);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
