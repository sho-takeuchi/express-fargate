import { CloudAssemblyBuilder } from '../../../cx-api';
import { DockerImageAssetLocation, DockerImageAssetSource, FileAssetLocation, FileAssetSource } from '../assets';
import { Stack } from '../stack';
/**
 * Encodes information how a certain Stack should be deployed.
 *
 * @stability stable
 */
export interface IStackSynthesizer {
    /**
     * Bind to the stack this environment is going to be used on.
     *
     * Must be called before any of the other methods are called.
     *
     * @stability stable
     */
    bind(stack: Stack): void;
    /**
     * Register a File Asset.
     *
     * Returns the parameters that can be used to refer to the asset inside the template.
     *
     * @stability stable
     */
    addFileAsset(asset: FileAssetSource): FileAssetLocation;
    /**
     * Register a Docker Image Asset.
     *
     * Returns the parameters that can be used to refer to the asset inside the template.
     *
     * @stability stable
     */
    addDockerImageAsset(asset: DockerImageAssetSource): DockerImageAssetLocation;
    /**
     * Synthesize the associated stack to the session.
     *
     * @stability stable
     */
    synthesize(session: ISynthesisSession): void;
}
/**
 * Represents a single session of synthesis.
 *
 * Passed into `Construct.synthesize()` methods.
 *
 * @stability stable
 */
export interface ISynthesisSession {
    /**
     * The output directory for this synthesis session.
     *
     * @stability stable
     */
    outdir: string;
    /**
     * Cloud assembly builder.
     *
     * @stability stable
     */
    assembly: CloudAssemblyBuilder;
    /**
     * Whether the stack should be validated after synthesis to check for error metadata.
     *
     * @default - false
     * @stability stable
     */
    validateOnSynth?: boolean;
}
