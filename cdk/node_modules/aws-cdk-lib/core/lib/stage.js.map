{
  "version": 3,
  "sources": ["stage.ts"],
  "sourcesContent": ["import * as cxapi from '../../cx-api';\nimport { IConstruct, Construct, Node } from 'constructs';\nimport { Environment } from './environment';\nimport { synthesize } from './private/synthesis';\n\nconst STAGE_SYMBOL = Symbol.for('@aws-cdk/core.Stage');\n\n                                            \nexport interface StageProps {\nn  readonly env?: Environment;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n  readonly outdir?: string;\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                 \nexport class Stage extends Construct {\n                                                                                                                                            \n  public static of(construct: IConstruct): Stage | undefined {\n    return Node.of(construct).scopes.reverse().slice(1).find(Stage.isStage);\n  }\n\n                                                                  \n  public static isStage(x: any ): x is Stage {\n    return x !== null && typeof(x) === 'object' && STAGE_SYMBOL in x;\n  }\n\n                                                                                     \n  public readonly region?: string;\n\n                                                                                      \n  public readonly account?: string;\n\n  /**\n   * The cloud assembly builder that is being used for this App\n   *\n   * @internal\n   */\n  public readonly _assemblyBuilder: cxapi.CloudAssemblyBuilder;\n\n                                                                                                          \n  public readonly stageName: string;\n\n                                                                           \n  public readonly parentStage?: Stage;\n\n  /**\n   * The cached assembly if it was already built\n   */\n  private assembly?: cxapi.CloudAssembly;\n\n  constructor(scope: Construct, id: string, props: StageProps = {}) {\n    super(scope, id);\n\n    if (id !== '' && !/^[a-z][a-z0-9\\-\\_\\.]+$/i.test(id)) {\n      throw new Error(`invalid stage name \"${id}\". Stage name must start with a letter and contain only alphanumeric characters, hypens ('-'), underscores ('_') and periods ('.')`);\n    }\n\n    Object.defineProperty(this, STAGE_SYMBOL, { value: true });\n\n    this.parentStage = Stage.of(this);\n\n    this.region = props.env?.region ?? this.parentStage?.region;\n    this.account = props.env?.account ?? this.parentStage?.account;\n\n    this._assemblyBuilder = this.createBuilder(props.outdir);\n    this.stageName = [this.parentStage?.stageName, id].filter(x => x).join('-');\n  }\n\n                                                     \n  public get outdir() {\n    return this._assemblyBuilder.outdir;\n  }\n\n                                                           \n  public get assetOutdir() {\n    return this._assemblyBuilder.assetOutdir;\n  }\n\n                                                                                                                                                                            \n  public get artifactId() {\n    if (!this.node.path) { return ''; }\n    return `assembly-${this.node.path.replace(/\\//g, '-').replace(/^-+|-+$/g, '')}`;\n  }\n\n                                                                                                                                                                                          \n  public synth(options: StageSynthesisOptions = { }): cxapi.CloudAssembly {\n    if (!this.assembly || options.force) {\n      this.assembly = synthesize(this, {\n        skipValidation: options.skipValidation,\n        validateOnSynthesis: options.validateOnSynthesis,\n      });\n    }\n\n    return this.assembly;\n  }\n\n  private createBuilder(outdir?: string) {\n    // cannot specify \"outdir\" if we are a nested stage\n    if (this.parentStage && outdir) {\n      throw new Error('\"outdir\" cannot be specified for nested stages');\n    }\n\n    // Need to determine fixed output directory already, because we must know where\n    // to write sub-assemblies (which must happen before we actually get to this app's\n    // synthesize() phase).\n    return this.parentStage\n      ? this.parentStage._assemblyBuilder.createNestedAssembly(this.artifactId, this.node.path)\n      : new cxapi.CloudAssemblyBuilder(outdir);\n  }\n}\n\n                                          \nexport interface StageSynthesisOptions {\n                                                                           \n  readonly skipValidation?: boolean;\n\n                                                                                                                             \n  readonly validateOnSynthesis?: boolean;\n\n                                                                                                                                                                                                                     \n  readonly force?: boolean;\n}\n"],
  "mappings": "4MAAA,MAAA,QAAA,gBACA,aAAA,QAAA,cAEA,YAAA,QAAA,uBAEM,aAAe,OAAO,IAAI,uBAYhC,mBAA2B,cAAA,SAAS,CAmClC,YAAY,MAAkB,GAAY,MAAoB,GAAE,0BAC9D,MAAM,MAAO,IAEb,yDAAI,KAAO,IAAM,CAAC,0BAA0B,KAAK,IAC/C,KAAM,IAAI,OAAM,uBAAuB,wIAGzC,OAAO,eAAe,KAAM,aAAc,CAAE,MAAO,KAEnD,KAAK,YAAc,MAAM,GAAG,MAE5B,KAAK,OAAM,IAAA,IAAG,MAAM,OAAG,MAAA,KAAA,OAAA,OAAA,GAAE,UAAM,MAAA,KAAA,OAAA,GAAA,IAAI,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,OACrD,KAAK,QAAO,IAAA,IAAG,MAAM,OAAG,MAAA,KAAA,OAAA,OAAA,GAAE,WAAO,MAAA,KAAA,OAAA,GAAA,IAAI,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,QAEvD,KAAK,iBAAmB,KAAK,cAAc,MAAM,QACjD,KAAK,UAAY,CAAA,IAAC,KAAK,eAAW,MAAA,KAAA,OAAA,OAAA,GAAE,UAAW,IAAI,OAAO,GAAK,GAAG,KAAK,WAhD3D,IAAG,UAAqB,CACpC,MAAO,cAAA,KAAK,GAAG,WAAW,OAAO,UAAU,MAAM,GAAG,KAAK,MAAM,eAInD,SAAQ,EAAM,CAC1B,MAAO,KAAM,MAAQ,MAAO,IAAO,UAAY,eAAgB,MA8CtD,SAAM,CACf,MAAO,MAAK,iBAAiB,UAIpB,cAAW,CACpB,MAAO,MAAK,iBAAiB,eAIpB,aAAU,CACnB,MAAK,MAAK,KAAK,KACR,YAAY,KAAK,KAAK,KAAK,QAAQ,MAAO,KAAK,QAAQ,WAAY,MAD5C,GAKzB,MAAM,QAAiC,GAAG,2EAC3C,EAAC,KAAK,UAAY,QAAQ,QAC5B,MAAK,SAAW,YAAA,WAAW,KAAM,CAC/B,eAAgB,QAAQ,eACxB,oBAAqB,QAAQ,uBAI1B,KAAK,SAGN,cAAc,OAAe,CAEnC,GAAI,KAAK,aAAe,OACtB,KAAM,IAAI,OAAM,kDAMlB,MAAO,MAAK,YACR,KAAK,YAAY,iBAAiB,qBAAqB,KAAK,WAAY,KAAK,KAAK,MAClF,GAAI,OAAM,qBAAqB,SA5FvC,QAAA,MAAA",
  "names": []
}
