{
  "version": 3,
  "sources": ["aws-custom-resource.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as iam from '../../../aws-iam';\nimport * as lambda from '../../../aws-lambda';\nimport * as logs from '../../../aws-logs';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { PHYSICAL_RESOURCE_ID_REFERENCE } from './runtime';\n\n                                                                                                        \nexport class PhysicalResourceIdReference implements cdk.IResolvable {\n  public readonly creationStack: string[] = cdk.captureStackTrace();\n\n                                                                                                   \n  public toJSON() {\n    return PHYSICAL_RESOURCE_ID_REFERENCE;\n  }\n\n  public resolve(_: cdk.IResolveContext): any {\n    return PHYSICAL_RESOURCE_ID_REFERENCE;\n  }\n\n  public toString(): string {\n    return PHYSICAL_RESOURCE_ID_REFERENCE;\n  }\n}\n\n                                              \nexport class PhysicalResourceId {\n\n                                                                                                                    \n  public static fromResponse(responsePath: string): PhysicalResourceId {\n    return new PhysicalResourceId(responsePath, undefined);\n  }\n\n                                               \n  public static of(id: string): PhysicalResourceId {\n    return new PhysicalResourceId(undefined, id);\n  }\n\n  /**\n   * @param responsePath Path to a response data element to be used as the physical id.\n   * @param id Literal string to be used as the physical id.\n   */\n  private constructor(public readonly responsePath?: string, public readonly id?: string) { }\n}\n\n                           \nexport interface AwsSdkCall {\n                                                                                                                  \n  readonly service: string;\n\n                                                                                                                         \n  readonly action: string;\n\n                                                                                                                                                                  \n  readonly parameters?: any;\n\n                                                                                                                                                                           \n  readonly physicalResourceId?: PhysicalResourceId;\n\n                                                                                                                                                                                                                                                 \n  readonly ignoreErrorCodesMatching?: string;\n\n                                                                                                                                                                                                               \n  readonly apiVersion?: string;\n\n                                                                                                                                                                                                                                                                          \n  readonly region?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n  readonly outputPath?: string;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n  readonly outputPaths?: string[];\n\n                                                                                                                                                                                                                                                                                                                   \n  readonly assumedRoleArn?: string;\n}\n\n                                                                                         \nexport interface SdkCallsPolicyOptions {\n\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n  readonly resources: string[]\n\n}\n\n                                                                      \nexport class AwsCustomResourcePolicy {\n\n                                                                       \n  public static readonly ANY_RESOURCE = ['*'];\n\n                                                                                                                          \n  public static fromStatements(statements: iam.PolicyStatement[]) {\n    return new AwsCustomResourcePolicy(statements, undefined);\n  }\n\n                                                                                                                                                                                                                                                                                \n  public static fromSdkCalls(options: SdkCallsPolicyOptions) {\n    return new AwsCustomResourcePolicy([], options.resources);\n  }\n\n  /**\n   * @param statements statements for explicit policy.\n   * @param resources resources for auto-generated from SDK calls.\n   */\n  private constructor(public readonly statements: iam.PolicyStatement[], public readonly resources?: string[]) {}\n}\n\n                                                                                                                       \nexport interface AwsCustomResourceProps {\n                                                                               \n  readonly resourceType?: string;\n\n                                                                                                                                  \n  readonly onCreate?: AwsSdkCall;\n\n                                                                                                   \n  readonly onUpdate?: AwsSdkCall;\n\n                                                                                                   \n  readonly onDelete?: AwsSdkCall;\n\nn  readonly policy: AwsCustomResourcePolicy;\n\n                                                                                                                                                                                                                                                                                                                     \n  readonly role?: iam.IRole;\n\n                                                                                                                              \n  readonly timeout?: cdk.Duration\n\n                                                                                                                                                                                        \n  readonly logRetention?: logs.RetentionDays;\n\n                                                                                                                                                                                                                                                            \n  readonly installLatestAwsSdk?: boolean;\n\n                                                                                                                                                                                                                                             \n  readonly functionName?: string;\n}\n\n                                                                                                                                                                                                                                                                                          \nexport class AwsCustomResource extends Construct implements iam.IGrantable {\n\n  private static breakIgnoreErrorsCircuit(sdkCalls: Array<AwsSdkCall | undefined>, caller: string) {\n\n    for (const call of sdkCalls) {\n      if (call?.ignoreErrorCodesMatching) {\n        throw new Error(`\\`${caller}\\`` + ' cannot be called along with `ignoreErrorCodesMatching`.');\n      }\n    }\n\n  }\n\n  public readonly grantPrincipal: iam.IPrincipal;\n\n  private readonly customResource: cdk.CustomResource;\n  private readonly props: AwsCustomResourceProps;\n\n  // 'props' cannot be optional, even though all its properties are optional.\n  // this is because at least one sdk call must be provided.\n  constructor(scope: Construct, id: string, props: AwsCustomResourceProps) {\n    super(scope, id);\n\n    if (!props.onCreate && !props.onUpdate && !props.onDelete) {\n      throw new Error('At least `onCreate`, `onUpdate` or `onDelete` must be specified.');\n    }\n\n    for (const call of [props.onCreate, props.onUpdate]) {\n      if (call && !call.physicalResourceId) {\n        throw new Error('`physicalResourceId` must be specified for onCreate and onUpdate calls.');\n      }\n    }\n\n    for (const call of [props.onCreate, props.onUpdate, props.onDelete]) {\n      if (call?.physicalResourceId?.responsePath) {\n        AwsCustomResource.breakIgnoreErrorsCircuit([call], 'PhysicalResourceId.fromResponse');\n      }\n    }\n\n    if (includesPhysicalResourceIdRef(props.onCreate?.parameters)) {\n      throw new Error('`PhysicalResourceIdReference` must not be specified in `onCreate` parameters.');\n    }\n\n    this.props = props;\n\n    const provider = new lambda.SingletonFunction(this, 'Provider', {\n      code: lambda.Code.fromAsset(path.join(__dirname, 'runtime')),\n      runtime: lambda.Runtime.NODEJS_12_X,\n      handler: 'index.handler',\n      uuid: '679f53fa-c002-430c-b0da-5b7982bd2287',\n      lambdaPurpose: 'AWS',\n      timeout: props.timeout || cdk.Duration.minutes(2),\n      role: props.role,\n      logRetention: props.logRetention,\n      functionName: props.functionName,\n    });\n    this.grantPrincipal = provider.grantPrincipal;\n\n    // Create the policy statements for the custom resource function role, or use the user-provided ones\n    const statements = [];\n    if (props.policy.statements.length !== 0) {\n      // Use custom statements provided by the user\n      for (const statement of props.policy.statements) {\n        statements.push(statement);\n      }\n    } else {\n      // Derive statements from AWS SDK calls\n      for (const call of [props.onCreate, props.onUpdate, props.onDelete]) {\n        if (call && call.assumedRoleArn == null) {\n          const statement = new iam.PolicyStatement({\n            actions: [awsSdkToIamAction(call.service, call.action)],\n            resources: props.policy.resources,\n          });\n          statements.push(statement);\n        } else if (call && call.assumedRoleArn != null) {\n          const statement = new iam.PolicyStatement({\n            actions: ['sts:AssumeRole'],\n            resources: [call.assumedRoleArn],\n          });\n          statements.push(statement);\n        }\n      }\n    }\n    const policy = new iam.Policy(this, 'CustomResourcePolicy', {\n      statements: statements,\n    });\n    if (provider.role !== undefined) {\n      policy.attachToRole(provider.role);\n    }\n    const create = props.onCreate || props.onUpdate;\n    this.customResource = new cdk.CustomResource(this, 'Resource', {\n      resourceType: props.resourceType || 'Custom::AWS',\n      serviceToken: provider.functionArn,\n      pascalCaseProperties: true,\n      properties: {\n        create: create && this.encodeJson(create),\n        update: props.onUpdate && this.encodeJson(props.onUpdate),\n        delete: props.onDelete && this.encodeJson(props.onDelete),\n        installLatestAwsSdk: props.installLatestAwsSdk ?? true,\n      },\n    });\n\n    // If the policy was deleted first, then the function might lose permissions to delete the custom resource\n    // This is here so that the policy doesn't get removed before onDelete is called\n    this.customResource.node.addDependency(policy);\n  }\n\nn  public getResponseFieldReference(dataPath: string) {\n    AwsCustomResource.breakIgnoreErrorsCircuit([this.props.onCreate, this.props.onUpdate], 'getData');\n    return this.customResource.getAtt(dataPath);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                   \n  public getResponseField(dataPath: string): string {\n    AwsCustomResource.breakIgnoreErrorsCircuit([this.props.onCreate, this.props.onUpdate], 'getDataString');\n    return this.customResource.getAttString(dataPath);\n  }\n\n  private encodeJson(obj: any) {\n    return cdk.Lazy.uncachedString({ produce: () => cdk.Stack.of(this).toJsonString(obj) });\n  }\n}\n\n/**\n * AWS SDK service metadata.\n */\nexport type AwsSdkMetadata = {[key: string]: any};\n\n/**\n * Gets awsSdkMetaData from file or from cache\n */\nlet getAwsSdkMetadata = (() => {\n  let _awsSdkMetadata: AwsSdkMetadata;\n  return function () {\n    if (_awsSdkMetadata) {\n      return _awsSdkMetadata;\n    } else {\n      return _awsSdkMetadata = JSON.parse(fs.readFileSync(path.join(__dirname, 'sdk-api-metadata.json'), 'utf-8'));\n    }\n  };\n})();\n\n/**\n * Returns true if `obj` includes a `PhysicalResourceIdReference` in one of the\n * values.\n * @param obj Any object.\n */\nfunction includesPhysicalResourceIdRef(obj: any | undefined) {\n  if (obj === undefined) {\n    return false;\n  }\n\n  let foundRef = false;\n\n  // we use JSON.stringify as a way to traverse all values in the object.\n  JSON.stringify(obj, (_, v) => {\n    if (v === PHYSICAL_RESOURCE_ID_REFERENCE) {\n      foundRef = true;\n    }\n\n    return v;\n  });\n\n  return foundRef;\n}\n\n/**\n * Transform SDK service/action to IAM action using metadata from aws-sdk module.\n * Example: CloudWatchLogs with putRetentionPolicy => logs:PutRetentionPolicy\n *\n * TODO: is this mapping correct for all services?\n */\nfunction awsSdkToIamAction(service: string, action: string): string {\n  const srv = service.toLowerCase();\n  const awsSdkMetadata = getAwsSdkMetadata();\n  const iamService = (awsSdkMetadata[srv] && awsSdkMetadata[srv].prefix) || srv;\n  const iamAction = action.charAt(0).toUpperCase() + action.slice(1);\n  return `${iamService}:${iamAction}`;\n}\n"],
  "mappings": "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",
  "names": []
}
