{
  "version": 3,
  "sources": ["cloud-artifact.ts"],
  "sourcesContent": ["import * as cxschema from '../../cloud-assembly-schema';\nimport { CloudAssembly } from './cloud-assembly';\nimport { MetadataEntryResult, SynthesisMessage, SynthesisMessageLevel } from './metadata';\n\n                                                         \nexport interface AwsCloudFormationStackProperties {\n                                                                                                                \n  readonly templateFile: string;\n\n                                                                                                             \n  readonly parameters?: { [id: string]: string };\n\n                                                                                                            \n  readonly stackName?: string;\n\n                                                                                                  \n  readonly terminationProtection?: boolean;\n}\n\n                                                          \nexport class CloudArtifact {\n                                                                                                                                                                                                                                                                                                                                                                                                                   \n  public static fromManifest(assembly: CloudAssembly, id: string, artifact: cxschema.ArtifactManifest): CloudArtifact | undefined {\n    switch (artifact.type) {\n      case cxschema.ArtifactType.AWS_CLOUDFORMATION_STACK:\n        return new CloudFormationStackArtifact(assembly, id, artifact);\n      case cxschema.ArtifactType.CDK_TREE:\n        return new TreeCloudArtifact(assembly, id, artifact);\n      case cxschema.ArtifactType.ASSET_MANIFEST:\n        return new AssetManifestArtifact(assembly, id, artifact);\n      case cxschema.ArtifactType.NESTED_CLOUD_ASSEMBLY:\n        return new NestedCloudAssemblyArtifact(assembly, id, artifact);\n      default:\n        return undefined;\n    }\n  }\n\n                                        \n  public readonly manifest: cxschema.ArtifactManifest;\n\n                                                                            \n  public readonly messages: SynthesisMessage[];\n\n  /**\n   * IDs of all dependencies. Used when topologically sorting the artifacts within the cloud assembly.\n   * @internal\n   */\n  public readonly _dependencyIDs: string[];\n\n  /**\n   * Cache of resolved dependencies.\n   */\n  private _deps?: CloudArtifact[];\n\n  protected constructor(public readonly assembly: CloudAssembly, public readonly id: string, manifest: cxschema.ArtifactManifest) {\n    this.manifest = manifest;\n    this.messages = this.renderMessages();\n    this._dependencyIDs = manifest.dependencies || [];\n  }\n\n                                                                         \n  public get dependencies(): CloudArtifact[] {\n    if (this._deps) { return this._deps; }\n\n    this._deps = this._dependencyIDs.map(id => {\n      const dep = this.assembly.tryGetArtifact(id);\n      if (!dep) {\n        throw new Error(`Artifact ${this.id} depends on non-existing artifact ${id}`);\n      }\n      return dep;\n    });\n\n    return this._deps;\n  }\n\n                                                                                                        \n  public findMetadataByType(type: string): MetadataEntryResult[] {\n    const result = new Array<MetadataEntryResult>();\n    for (const path of Object.keys(this.manifest.metadata || {})) {\n      for (const entry of (this.manifest.metadata || {})[path]) {\n        if (entry.type === type) {\n          result.push({ path, ...entry });\n        }\n      }\n    }\n    return result;\n  }\n\n  private renderMessages() {\n    const messages = new Array<SynthesisMessage>();\n\n    for (const [id, metadata] of Object.entries(this.manifest.metadata || { })) {\n      for (const entry of metadata) {\n        let level: SynthesisMessageLevel;\n        switch (entry.type) {\n          case cxschema.ArtifactMetadataEntryType.WARN:\n            level = SynthesisMessageLevel.WARNING;\n            break;\n          case cxschema.ArtifactMetadataEntryType.ERROR:\n            level = SynthesisMessageLevel.ERROR;\n            break;\n          case cxschema.ArtifactMetadataEntryType.INFO:\n            level = SynthesisMessageLevel.INFO;\n            break;\n          default:\n            continue;\n        }\n\n        messages.push({ level, entry, id });\n      }\n    }\n\n    return messages;\n  }\n\n                                                                                                                                                                                                                 \n  public get hierarchicalId(): string {\n    return this.manifest.displayName ?? this.id;\n  }\n}\n\n// needs to be defined at the end to avoid a cyclic dependency\nimport { AssetManifestArtifact } from './artifacts/asset-manifest-artifact';\nimport { CloudFormationStackArtifact } from './artifacts/cloudformation-artifact';\nimport { NestedCloudAssemblyArtifact } from './artifacts/nested-cloud-assembly-artifact';\nimport { TreeCloudArtifact } from './artifacts/tree-cloud-artifact';"],
  "mappings": "oNAAA,SAAA,QAAA,+BAEA,WAAA,QAAA,cAkBA,mBAA0B,CAkCxB,YAAsC,SAAyC,GAAY,SAAmC,CAAxF,KAAA,SAAA,SAAyC,KAAA,GAAA,2JAC7E,KAAK,SAAW,SAChB,KAAK,SAAW,KAAK,iBACrB,KAAK,eAAiB,SAAS,cAAgB,SAnCnC,cAAa,SAAyB,GAAY,SAAmC,CACjG,+JAAQ,SAAS,UACV,UAAS,aAAa,yBACzB,MAAO,IAAI,2BAAA,4BAA4B,SAAU,GAAI,cAClD,UAAS,aAAa,SACzB,MAAO,IAAI,uBAAA,kBAAkB,SAAU,GAAI,cACxC,UAAS,aAAa,eACzB,MAAO,IAAI,2BAAA,sBAAsB,SAAU,GAAI,cAC5C,UAAS,aAAa,sBACzB,MAAO,IAAI,kCAAA,4BAA4B,SAAU,GAAI,kBAErD,WA4BK,eAAY,CACrB,MAAI,MAAK,MAAgB,KAAK,MAE9B,MAAK,MAAQ,KAAK,eAAe,IAAI,IAAK,CACxC,KAAM,KAAM,KAAK,SAAS,eAAe,IACzC,GAAI,CAAC,IACH,KAAM,IAAI,OAAM,YAAY,KAAK,uCAAuC,MAE1E,MAAO,OAGF,KAAK,OAIP,mBAAmB,KAAY,CACpC,KAAM,QAAS,GAAI,OACnB,SAAW,QAAQ,QAAO,KAAK,KAAK,SAAS,UAAY,IACvD,SAAW,SAAU,MAAK,SAAS,UAAY,IAAI,MACjD,AAAI,MAAM,OAAS,MACjB,OAAO,KAAK,CAAE,QAAS,QAI7B,MAAO,QAGD,gBAAc,CACpB,KAAM,UAAW,GAAI,OAErB,SAAW,CAAC,GAAI,WAAa,QAAO,QAAQ,KAAK,SAAS,UAAY,IACpE,SAAW,SAAS,UAAU,CAC5B,GAAI,OACJ,OAAQ,MAAM,UACP,UAAS,0BAA0B,KACtC,MAAQ,WAAA,sBAAsB,QAC9B,UACG,UAAS,0BAA0B,MACtC,MAAQ,WAAA,sBAAsB,MAC9B,UACG,UAAS,0BAA0B,KACtC,MAAQ,WAAA,sBAAsB,KAC9B,cAEA,SAGJ,SAAS,KAAK,CAAE,MAAO,MAAO,KAIlC,MAAO,aAIE,iBAAc,QACvB,MAAA,IAAO,KAAK,SAAS,eAAW,MAAA,KAAA,OAAA,GAAI,KAAK,IAjG7C,QAAA,cAAA,gHAsGA,KAAA,2BAAA,QAAA,uCACA,0BAAA,QAAA,uCACA,iCAAA,QAAA,8CACA,sBAAA,QAAA",
  "names": []
}
