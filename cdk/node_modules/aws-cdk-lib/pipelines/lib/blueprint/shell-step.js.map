{
  "version": 3,
  "sources": ["shell-step.ts"],
  "sourcesContent": ["import { CfnOutput, Stack } from '../../../core';\nimport { mapValues } from '../private/javascript';\nimport { FileSet, IFileSetProducer } from './file-set';\nimport { StackDeployment } from './stack-deployment';\nimport { Step } from './step';\n\n                                                     \nexport interface ShellStepProps {\n                                \n  readonly commands: string[];\n\n                                                                                                                                                                                                                                                                              \n  readonly installCommands?: string[];\n\n                                                                                           \n  readonly env?: Record<string, string>;\n\n                                                                                                                                                                                                                                                                                                                                                          \n  readonly envFromCfnOutputs?: Record<string, CfnOutput>;\n\n                                                                                                                                                                                                                                                                                     \n  readonly input?: IFileSetProducer;\n\nn  readonly additionalInputs?: Record<string, IFileSetProducer>;\n\n                                                                                                                                                                                                                                                   \n  readonly primaryOutputDirectory?: string;\n\n}\n\n                                                    \nexport class ShellStep extends Step {\n                                \n  public readonly commands: string[];\n\n                                                                                                                                                                                                                                                                              \n  public readonly installCommands: string[];\n\n                                                                                           \n  public readonly env: Record<string, string>;\n\n                                                                                                                                          \n  public readonly envFromCfnOutputs: Record<string, StackOutputReference>;\n\n                                                                                                                                                                           \n  public readonly inputs: FileSetLocation[] = [];\n\n                                                                                                                                                                            \n  public readonly outputs: FileSetLocation[] = [];\n\n  private readonly _additionalOutputs: Record<string, FileSet> = {};\n\n  private _primaryOutputDirectory?: string;\n\n  constructor(id: string, props: ShellStepProps) {\n    super(id);\n\n    this.commands = props.commands;\n    this.installCommands = props.installCommands ?? [];\n    this.env = props.env ?? {};\n    this.envFromCfnOutputs = mapValues(props.envFromCfnOutputs ?? {}, StackOutputReference.fromCfnOutput);\n\n    // Inputs\n    if (props.input) {\n      const fileSet = props.input.primaryOutput;\n      if (!fileSet) {\n        throw new Error(`'${id}': primary input should be a step that produces a file set, got ${props.input}`);\n      }\n      this.addDependencyFileSet(fileSet);\n      this.inputs.push({ directory: '.', fileSet });\n    }\n\n    for (const [directory, step] of Object.entries(props.additionalInputs ?? {})) {\n      if (directory === '.') {\n        throw new Error(`'${id}': input for directory '.' should be passed via 'input' property`);\n      }\n\n      const fileSet = step.primaryOutput;\n      if (!fileSet) {\n        throw new Error(`'${id}': additionalInput for directory '${directory}' should be a step that produces a file set, got ${step}`);\n      }\n      this.addDependencyFileSet(fileSet);\n      this.inputs.push({ directory, fileSet });\n    }\n\n    // Outputs\n\n    if (props.primaryOutputDirectory) {\n      this._primaryOutputDirectory = props.primaryOutputDirectory;\n      const fileSet = new FileSet('Output', this);\n      this.configurePrimaryOutput(fileSet);\n      this.outputs.push({ directory: props.primaryOutputDirectory, fileSet });\n    }\n  }\n\n                                                                                                                                                                                                                                                                                                                                            \n  public primaryOutputDirectory(directory: string): FileSet {\n    if (this._primaryOutputDirectory !== undefined) {\n      if (this._primaryOutputDirectory !== directory) {\n        throw new Error(`${this}: primaryOutputDirectory is '${this._primaryOutputDirectory}', cannot be changed to '${directory}'`);\n      }\n\n      return this.primaryOutput!;\n    }\n\n    this._primaryOutputDirectory = directory;\n    const fileSet = new FileSet('Output', this);\n    this.configurePrimaryOutput(fileSet);\n    this.outputs.push({ directory: directory, fileSet });\n    return fileSet;\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                      \n  public addOutputDirectory(directory: string): FileSet {\n    let fileSet = this._additionalOutputs[directory];\n    if (!fileSet) {\n      fileSet = new FileSet(directory, this);\n      this._additionalOutputs[directory] = fileSet;\n      this.outputs.push({ directory, fileSet });\n    }\n    return fileSet;\n  }\n}\n\n                                                                    \nexport interface FileSetLocation {\n                                                                    \n  readonly directory: string;\n\n                                   \n  readonly fileSet: FileSet;\n}\n\n                                        \nexport class StackOutputReference {\n                                                                                  \n  public static fromCfnOutput(output: CfnOutput) {\n    const stack = Stack.of(output);\n    return new StackOutputReference(stack.node.path, stack.artifactId, stack.resolve(output.logicalId));\n  }\n\n  private constructor(\n    /** A human-readable description of the producing stack */\n    public readonly stackDescription: string,\n    /** Artifact id of the producing stack */\n    private readonly stackArtifactId: string,\n    /** Output name of the producing stack */\n    public readonly outputName: string) {\n  }\n\n                                                                                                 \n  public isProducedBy(stack: StackDeployment) {\n    return stack.stackArtifactId === this.stackArtifactId;\n  }\n}"],
  "mappings": "mPAAA,OAAA,QAAA,iBACA,aAAA,QAAA,yBACA,WAAA,QAAA,cAEA,OAAA,QAAA,UA4BA,uBAA+B,QAAA,IAAI,CAuBjC,YAAY,GAAY,MAAqB,iBAC3C,MAAM,IAQN,GAlBc,KAAA,OAA4B,GAG5B,KAAA,QAA6B,GAE5B,KAAA,mBAA8C,uEAO7D,KAAK,SAAW,MAAM,SACtB,KAAK,gBAAe,IAAG,MAAM,mBAAe,MAAA,KAAA,OAAA,GAAI,GAChD,KAAK,IAAG,IAAG,MAAM,OAAG,MAAA,KAAA,OAAA,GAAI,GACxB,KAAK,kBAAoB,aAAA,UAAS,IAAC,MAAM,qBAAiB,MAAA,KAAA,OAAA,GAAI,GAAI,qBAAqB,eAGnF,MAAM,MAAO,CACf,KAAM,SAAU,MAAM,MAAM,cAC5B,GAAI,CAAC,QACH,KAAM,IAAI,OAAM,IAAI,qEAAqE,MAAM,SAEjG,KAAK,qBAAqB,SAC1B,KAAK,OAAO,KAAK,CAAE,UAAW,IAAK,UAGrC,SAAW,CAAC,UAAW,OAAS,QAAO,QAAO,IAAC,MAAM,oBAAgB,MAAA,KAAA,OAAA,GAAI,IAAK,CAC5E,GAAI,YAAc,IAChB,KAAM,IAAI,OAAM,IAAI,sEAGtB,KAAM,SAAU,KAAK,cACrB,GAAI,CAAC,QACH,KAAM,IAAI,OAAM,IAAI,uCAAuC,6DAA6D,QAE1H,KAAK,qBAAqB,SAC1B,KAAK,OAAO,KAAK,CAAE,UAAW,UAKhC,GAAI,MAAM,uBAAwB,CAChC,KAAK,wBAA0B,MAAM,uBACrC,KAAM,SAAU,GAAI,YAAA,QAAQ,SAAU,MACtC,KAAK,uBAAuB,SAC5B,KAAK,QAAQ,KAAK,CAAE,UAAW,MAAM,uBAAwB,WAK1D,uBAAuB,UAAiB,CAC7C,GAAI,KAAK,0BAA4B,OAAW,CAC9C,GAAI,KAAK,0BAA4B,UACnC,KAAM,IAAI,OAAM,GAAG,oCAAoC,KAAK,mDAAmD,cAGjH,MAAO,MAAK,cAGd,KAAK,wBAA0B,UAC/B,KAAM,SAAU,GAAI,YAAA,QAAQ,SAAU,MACtC,YAAK,uBAAuB,SAC5B,KAAK,QAAQ,KAAK,CAAE,UAAsB,UACnC,QAIF,mBAAmB,UAAiB,CACzC,GAAI,SAAU,KAAK,mBAAmB,WACtC,MAAK,UACH,SAAU,GAAI,YAAA,QAAQ,UAAW,MACjC,KAAK,mBAAmB,WAAa,QACrC,KAAK,QAAQ,KAAK,CAAE,UAAW,WAE1B,SAzFX,QAAA,UAAA,uGAuGA,0BAAiC,CAO/B,YAEkB,iBAEC,gBAED,WAAkB,CAJlB,KAAA,iBAAA,iBAEC,KAAA,gBAAA,gBAED,KAAA,WAAA,iBAXJ,eAAc,OAAiB,uDAC3C,KAAM,OAAQ,OAAA,MAAM,GAAG,QACvB,MAAO,IAAI,sBAAqB,MAAM,KAAK,KAAM,MAAM,WAAY,MAAM,QAAQ,OAAO,YAanF,aAAa,MAAsB,6EACjC,MAAM,kBAAoB,KAAK,iBAlB1C,QAAA,qBAAA",
  "names": []
}
