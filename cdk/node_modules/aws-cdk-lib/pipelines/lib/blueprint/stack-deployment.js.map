{
  "version": 3,
  "sources": ["stack-deployment.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport { parse as parseUrl } from 'url';\nimport * as cxapi from '../../../cx-api';\nimport { AssetManifestReader, DockerImageManifestEntry, FileManifestEntry } from '../private/asset-manifest';\nimport { isAssetManifest } from '../private/cloud-assembly-internals';\nimport { AssetType } from './asset-type';\nimport { Step } from './step';\n\n                                             \nexport interface StackDeploymentProps {\n                                           \n  readonly stackArtifactId: string;\n\n                                              \n  readonly constructPath: string;\n\n                                    \n  readonly stackName: string;\n\n                                                                                               \n  readonly region?: string;\n\n                                                                                                 \n  readonly account?: string;\n\n                                                                                                      \n  readonly assumeRoleArn?: string;\n\n                                                                                                \n  readonly executionRoleArn?: string;\n\n                                                                        \n  readonly tags?: Record<string, string>;\n\n                                                                  \n  readonly absoluteTemplatePath: string;\n\n                                                                               \n  readonly assets?: StackAsset[];\n\n                                                                                                                                                           \n  readonly templateS3Uri?: string;\n}\n\n                                                                                                                                                                                        \nexport class StackDeployment {\n                                                                                     \n  public static fromArtifact(stackArtifact: cxapi.CloudFormationStackArtifact): StackDeployment {\n    const artRegion = stackArtifact.environment.region;\n    const region = artRegion === cxapi.UNKNOWN_REGION ? undefined : artRegion;\n    const artAccount = stackArtifact.environment.account;\n    const account = artAccount === cxapi.UNKNOWN_ACCOUNT ? undefined : artAccount;\n\n    return new StackDeployment({\n      account,\n      region,\n      tags: stackArtifact.tags,\n      stackArtifactId: stackArtifact.id,\n      constructPath: stackArtifact.hierarchicalId,\n      stackName: stackArtifact.stackName,\n      absoluteTemplatePath: path.join(stackArtifact.assembly.directory, stackArtifact.templateFile),\n      assumeRoleArn: stackArtifact.assumeRoleArn,\n      executionRoleArn: stackArtifact.cloudFormationExecutionRoleArn,\n      assets: extractStackAssets(stackArtifact),\n      templateS3Uri: stackArtifact.stackTemplateAssetObjectUrl,\n    });\n  }\n\n                                           \n  public readonly stackArtifactId: string;\n\n                                              \n  public readonly constructPath: string;\n\n                                    \n  public readonly stackName: string;\n\n                                                                                               \n  public readonly region?: string;\n\n                                                                                                 \n  public readonly account?: string;\n\n                                                                                                      \n  public readonly assumeRoleArn?: string;\n\n                                                                                                \n  public readonly executionRoleArn?: string;\n\n                                           \n  public readonly tags: Record<string, string>;\n\n                                                \n  public readonly assets: StackAsset[];\n\n                                                   \n  public readonly stackDependencies: StackDeployment[] = [];\n\n                                                                                      \n  public readonly templateAsset?: StackAsset;\n\n                                                                                                                                                                                                                                                                                                          \n  public readonly templateUrl?: string;\n\n                                                       \n  public readonly absoluteTemplatePath: string;\n\n                                                                                                                                                           \n  public readonly pre: Step[] = [];\n\n                                                                                                                                            \n  public readonly changeSet: Step[] = [];\n\n                                                     \n  public readonly post: Step[] = [];\n\n  private constructor(props: StackDeploymentProps) {\n    this.stackArtifactId = props.stackArtifactId;\n    this.constructPath = props.constructPath;\n    this.account = props.account;\n    this.region = props.region;\n    this.tags = props.tags ?? {};\n    this.assumeRoleArn = props.assumeRoleArn;\n    this.executionRoleArn = props.executionRoleArn;\n    this.stackName = props.stackName;\n    this.absoluteTemplatePath = props.absoluteTemplatePath;\n    this.templateUrl = props.templateS3Uri ? s3UrlFromUri(props.templateS3Uri, props.region) : undefined;\n\n    this.assets = new Array<StackAsset>();\n\n    for (const asset of props.assets ?? []) {\n      if (asset.isTemplate) {\n        this.templateAsset = asset;\n      } else {\n        this.assets.push(asset);\n      }\n    }\n  }\n\n                                                  \n  public addStackDependency(stackDeployment: StackDeployment) {\n    this.stackDependencies.push(stackDeployment);\n  }\n\n                                                                                                                                                                                                                                              \n  public addStackSteps(pre: Step[], changeSet: Step[], post: Step[]) {\n    this.pre.push(...pre);\n    this.changeSet.push(...changeSet);\n    this.post.push(...post);\n  }\n}\n\n                                   \nexport interface StackAsset {\n                                                                                                                                                                                                          \n  readonly assetManifestPath: string;\n\n                                 \n  readonly assetId: string;\n\n                                                        \n  readonly assetSelector: string;\n\n                                         \n  readonly assetType: AssetType;\n\n                                                                                              \n  readonly assetPublishingRoleArn?: string;\n\n                                                                                                             \n  readonly isTemplate: boolean;\n}\n\nfunction extractStackAssets(stackArtifact: cxapi.CloudFormationStackArtifact): StackAsset[] {\n  const ret = new Array<StackAsset>();\n\n  const assetManifests = stackArtifact.dependencies.filter(isAssetManifest);\n  for (const manifestArtifact of assetManifests) {\n    const manifest = AssetManifestReader.fromFile(manifestArtifact.file);\n\n    for (const entry of manifest.entries) {\n      let assetType: AssetType;\n      let isTemplate = false;\n\n      if (entry instanceof DockerImageManifestEntry) {\n        assetType = AssetType.DOCKER_IMAGE;\n      } else if (entry instanceof FileManifestEntry) {\n        isTemplate = entry.source.packaging === 'file' && entry.source.path === stackArtifact.templateFile;\n        assetType = AssetType.FILE;\n      } else {\n        throw new Error(`Unrecognized asset type: ${entry.type}`);\n      }\n\n      ret.push({\n        assetManifestPath: manifestArtifact.file,\n        assetId: entry.id.assetId,\n        assetSelector: entry.id.toString(),\n        assetType,\n        assetPublishingRoleArn: entry.destination.assumeRoleArn,\n        isTemplate,\n      });\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Takes an s3://bucket/object-key uri and returns a region-aware https:// url for it\n *\n * @param uri The s3 URI\n * @param region The region (if undefined, we will return the global endpoint)\n * @see https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#virtual-hosted-style-access\n */\nfunction s3UrlFromUri(uri: string, region: string | undefined) {\n  const url = parseUrl(uri);\n  return `https://${url.hostname}.s3.${region ? `${region}.` : ''}amazonaws.com${url.path}`;\n}"],
  "mappings": "yNAAA,KAAA,QAAA,QACA,MAAA,QAAA,OACA,MAAA,QAAA,mBACA,iBAAA,QAAA,6BACA,2BAAA,QAAA,uCACA,aAAA,QAAA,gBAwCA,qBAA4B,CAuE1B,YAAoB,MAA2B,WApB/B,KAAA,kBAAuC,GAYvC,KAAA,IAAc,GAGd,KAAA,UAAoB,GAGpB,KAAA,KAAe,GAG7B,KAAK,gBAAkB,MAAM,gBAC7B,KAAK,cAAgB,MAAM,cAC3B,KAAK,QAAU,MAAM,QACrB,KAAK,OAAS,MAAM,OACpB,KAAK,KAAI,IAAG,MAAM,QAAI,MAAA,KAAA,OAAA,GAAI,GAC1B,KAAK,cAAgB,MAAM,cAC3B,KAAK,iBAAmB,MAAM,iBAC9B,KAAK,UAAY,MAAM,UACvB,KAAK,qBAAuB,MAAM,qBAClC,KAAK,YAAc,MAAM,cAAgB,aAAa,MAAM,cAAe,MAAM,QAAU,OAE3F,KAAK,OAAS,GAAI,OAElB,SAAW,SAAK,IAAI,MAAM,UAAM,MAAA,KAAA,OAAA,GAAI,GAClC,AAAI,MAAM,WACR,KAAK,cAAgB,MAErB,KAAK,OAAO,KAAK,aAvFT,cAAa,cAAgD,uFACzE,KAAM,WAAY,cAAc,YAAY,OACtC,OAAS,YAAc,MAAM,eAAiB,OAAY,UAC1D,WAAa,cAAc,YAAY,QACvC,QAAU,aAAe,MAAM,gBAAkB,OAAY,WAEnE,MAAO,IAAI,iBAAgB,CACzB,QACA,OACA,KAAM,cAAc,KACpB,gBAAiB,cAAc,GAC/B,cAAe,cAAc,eAC7B,UAAW,cAAc,UACzB,qBAAsB,KAAK,KAAK,cAAc,SAAS,UAAW,cAAc,cAChF,cAAe,cAAc,cAC7B,iBAAkB,cAAc,+BAChC,OAAQ,mBAAmB,eAC3B,cAAe,cAAc,8BA4E1B,mBAAmB,gBAAgC,gFACxD,KAAK,kBAAkB,KAAK,iBAIvB,cAAc,IAAa,UAAmB,KAAY,CAC/D,KAAK,IAAI,KAAK,GAAG,KACjB,KAAK,UAAU,KAAK,GAAG,WACvB,KAAK,KAAK,KAAK,GAAG,OAvGtB,QAAA,gBAAA,yHAgIA,4BAA4B,cAAgD,CAC1E,KAAM,KAAM,GAAI,OAEV,eAAiB,cAAc,aAAa,OAAO,2BAAA,iBACzD,SAAW,oBAAoB,gBAAgB,CAC7C,KAAM,UAAW,iBAAA,oBAAoB,SAAS,iBAAiB,MAE/D,SAAW,SAAS,UAAS,QAAS,CACpC,GAAI,WACA,WAAa,GAEjB,GAAI,gBAAiB,kBAAA,yBACnB,UAAY,aAAA,UAAU,qBACb,gBAAiB,kBAAA,kBAC1B,WAAa,MAAM,OAAO,YAAc,QAAU,MAAM,OAAO,OAAS,cAAc,aACtF,UAAY,aAAA,UAAU,SAEtB,MAAM,IAAI,OAAM,4BAA4B,MAAM,QAGpD,IAAI,KAAK,CACP,kBAAmB,iBAAiB,KACpC,QAAS,MAAM,GAAG,QAClB,cAAe,MAAM,GAAG,WACxB,UACA,uBAAwB,MAAM,YAAY,cAC1C,cAKN,MAAO,KAUT,sBAAsB,IAAa,OAA0B,CAC3D,KAAM,KAAM,MAAA,MAAS,KACrB,MAAO,WAAW,IAAI,eAAe,OAAS,GAAG,UAAY,kBAAkB,IAAI",
  "names": []
}
