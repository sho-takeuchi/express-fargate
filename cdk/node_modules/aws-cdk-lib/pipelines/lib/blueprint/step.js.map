{
  "version": 3,
  "sources": ["step.ts"],
  "sourcesContent": ["import { Stack, Token } from '../../../core';\nimport { FileSet, IFileSetProducer } from './file-set';\n\n                                                                                                                                                                                                                                                               \nexport abstract class Step implements IFileSetProducer {\n                                                                                                                                                                                                                                                                                          \n  public static sequence(steps: Step[]): Step[] {\n    for (let i = 1; i < steps.length; i++) {\n      steps[i].addStepDependency(steps[i-1]);\n    }\n    return steps;\n  }\n\n                                                           \n  public readonly dependencyFileSets: FileSet[] = [];\n\n                                                                                                                        \n  public readonly isSource: boolean = false;\n\n  private _primaryOutput?: FileSet;\n\n  private _dependencies: Step[] = [];\n\n  constructor(\n    /** Identifier for this step */\n    public readonly id: string) {\n\n    if (Token.isUnresolved(id)) {\n      throw new Error(`Step id cannot be unresolved, got '${id}'`);\n    }\n  }\n\n                                                                                         \n  public get dependencies(): Step[] {\n    return this.dependencyFileSets.map(f => f.producer).concat(this._dependencies);\n  }\n\n                                                            \n  public toString() {\n    return `${this.constructor.name}(${this.id})`;\n  }\n\n                                                                                                                                                                                            \n  public get primaryOutput(): FileSet | undefined {\n    // Accessor so it can be mutable in children\n    return this._primaryOutput;\n  }\n\n                                                  \n  public addStepDependency(step: Step) {\n    this._dependencies.push(step);\n  }\n\n                                                                                                                                                                   \n  protected addDependencyFileSet(fs: FileSet) {\n    this.dependencyFileSets.push(fs);\n  }\n\n                                                                               \n  protected configurePrimaryOutput(fs: FileSet) {\n    this._primaryOutput = fs;\n  }\n}\n\n                                                                        \nexport interface StackSteps {\n                                                       \n  readonly stack: Stack;\n\n                                                                                                     \n  readonly pre?: Step[];\n\n                                                                                                                                 \n  readonly changeSet?: Step[];\n\n                                                                                                    \n  readonly post?: Step[];\n\n}"],
  "mappings": "8MAAA,OAAA,QAAA,iBAIA,UAA0B,CAmBxB,YAEkB,GAAU,CAE1B,GAFgB,KAAA,GAAA,GAXF,KAAA,mBAAgC,GAGhC,KAAA,SAAoB,GAI5B,KAAA,cAAwB,GAM1B,OAAA,MAAM,aAAa,IACrB,KAAM,IAAI,OAAM,sCAAsC,aAtB5C,UAAS,MAAa,CAClC,OAAS,GAAI,EAAG,EAAI,MAAM,OAAQ,IAChC,MAAM,GAAG,kBAAkB,MAAM,EAAE,IAErC,MAAO,UAuBE,eAAY,CACrB,MAAO,MAAK,mBAAmB,IAAI,GAAK,EAAE,UAAU,OAAO,KAAK,eAI3D,UAAQ,CACb,MAAO,GAAG,KAAK,YAAY,QAAQ,KAAK,SAI/B,gBAAa,CAEtB,MAAO,MAAK,eAIP,kBAAkB,KAAU,0DACjC,KAAK,cAAc,KAAK,MAIhB,qBAAqB,GAAW,2DACxC,KAAK,mBAAmB,KAAK,IAIrB,uBAAuB,GAAW,2DAC1C,KAAK,eAAiB,IAxD1B,QAAA,KAAA",
  "names": []
}
