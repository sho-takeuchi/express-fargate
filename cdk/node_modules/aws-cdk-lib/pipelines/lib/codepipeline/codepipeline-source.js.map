{
  "version": 3,
  "sources": ["codepipeline-source.ts"],
  "sourcesContent": ["import * as codecommit from '../../../aws-codecommit';\nimport * as cp from '../../../aws-codepipeline';\nimport { Artifact } from '../../../aws-codepipeline';\nimport * as cp_actions from '../../../aws-codepipeline-actions';\nimport { Action, CodeCommitTrigger, GitHubTrigger, S3Trigger } from '../../../aws-codepipeline-actions';\nimport * as iam from '../../../aws-iam';\nimport { IBucket } from '../../../aws-s3';\nimport { SecretValue, Token } from '../../../core';\nimport { Node } from 'constructs';\nimport { FileSet, Step } from '../blueprint';\nimport { CodePipelineActionFactoryResult, ProduceActionOptions, ICodePipelineActionFactory } from './codepipeline-action-factory';\n\n                                                                                                                                                                        \nexport abstract class CodePipelineSource extends Step implements ICodePipelineActionFactory {\nn  public static gitHub(repoString: string, branch: string, props: GitHubSourceOptions = {}): CodePipelineSource {\n    return new GitHubSource(repoString, branch, props);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n  public static s3(bucket: IBucket, objectKey: string, props: S3SourceOptions = {}): CodePipelineSource {\n    return new S3Source(bucket, objectKey, props);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      \n  public static connection(repoString: string, branch: string, props: ConnectionSourceOptions): CodePipelineSource {\n    return new CodeStarConnectionSource(repoString, branch, props);\n  }\n\n                                                                                                                                                                                                                                                                                                                               \n  public static codeCommit(repository: codecommit.IRepository, branch: string, props: CodeCommitSourceOptions = {}): CodePipelineSource {\n    return new CodeCommitSource(repository, branch, props);\n  }\n\n  // tells `PipelineGraph` to hoist a \"Source\" step\n  public readonly isSource = true;\n\n  public produceAction(stage: cp.IStage, options: ProduceActionOptions): CodePipelineActionFactoryResult {\n    const output = options.artifacts.toCodePipeline(this.primaryOutput!);\n    const action = this.getAction(output, options.actionName, options.runOrder);\n    stage.addAction(action);\n    return { runOrdersConsumed: 1 };\n  }\n\n  protected abstract getAction(output: Artifact, actionName: string, runOrder: number): Action;\n}\n\n                                     \nexport interface GitHubSourceOptions {\nn  readonly authentication?: SecretValue;\n\nn  readonly trigger?: GitHubTrigger;\n\n}\n\n/**\n * Extend CodePipelineSource so we can type-test in the CodePipelineEngine.\n */\nclass GitHubSource extends CodePipelineSource {\n  private readonly owner: string;\n  private readonly repo: string;\n  private readonly authentication: SecretValue;\n\n  constructor(repoString: string, readonly branch: string, readonly props: GitHubSourceOptions) {\n    super(repoString);\n\n    const parts = repoString.split('/');\n    if (Token.isUnresolved(repoString) || parts.length !== 2) {\n      throw new Error(`GitHub repository name should be a resolved string like '<owner>/<repo>', got '${repoString}'`);\n    }\n    this.owner = parts[0];\n    this.repo = parts[1];\n    this.authentication = props.authentication ?? SecretValue.secretsManager('github-token');\n    this.configurePrimaryOutput(new FileSet('Source', this));\n  }\n\n  protected getAction(output: Artifact, actionName: string, runOrder: number) {\n    return new cp_actions.GitHubSourceAction({\n      output,\n      actionName,\n      runOrder,\n      oauthToken: this.authentication,\n      owner: this.owner,\n      repo: this.repo,\n      branch: this.branch,\n      trigger: this.props.trigger,\n    });\n  }\n}\n\n                                 \nexport interface S3SourceOptions {\n                                                                                                                                                                                                                                                                                                                                                                                                 \n  readonly trigger?: S3Trigger;\n\n                                                                                                              \n  readonly actionName?: string;\n}\n\nclass S3Source extends CodePipelineSource {\n  constructor(readonly bucket: IBucket, private readonly objectKey: string, readonly props: S3SourceOptions) {\n    super(Node.of(bucket).addr);\n\n    this.configurePrimaryOutput(new FileSet('Source', this));\n  }\n\n  protected getAction(output: Artifact, _actionName: string, runOrder: number) {\n    return new cp_actions.S3SourceAction({\n      output,\n      // Bucket names are guaranteed to conform to ActionName restrictions\n      actionName: this.props.actionName ?? this.bucket.bucketName,\n      runOrder,\n      bucketKey: this.objectKey,\n      trigger: this.props.trigger,\n      bucket: this.bucket,\n    });\n  }\n}\n\n                                                    \nexport interface ConnectionSourceOptions {\n                                                                                                                                                                                                                                                                                                                                                                       \n  readonly connectionArn: string;\n\n\n  // long URL in @see\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n  readonly codeBuildCloneOutput?: boolean;\n\n                                                                                                                                                                                                                                                                                                                                                                            \n  readonly triggerOnPush?: boolean;\n}\n\nclass CodeStarConnectionSource extends CodePipelineSource {\n  private readonly owner: string;\n  private readonly repo: string;\n\n  constructor(repoString: string, readonly branch: string, readonly props: ConnectionSourceOptions) {\n    super(repoString);\n\n    const parts = repoString.split('/');\n    if (Token.isUnresolved(repoString) || parts.length !== 2) {\n      throw new Error(`CodeStar repository name should be a resolved string like '<owner>/<repo>', got '${repoString}'`);\n    }\n    this.owner = parts[0];\n    this.repo = parts[1];\n    this.configurePrimaryOutput(new FileSet('Source', this));\n  }\n\n  protected getAction(output: Artifact, actionName: string, runOrder: number) {\n    return new cp_actions.CodeStarConnectionsSourceAction({\n      output,\n      actionName,\n      runOrder,\n      connectionArn: this.props.connectionArn,\n      owner: this.owner,\n      repo: this.repo,\n      branch: this.branch,\n      codeBuildCloneOutput: this.props.codeBuildCloneOutput,\n      triggerOnPush: this.props.triggerOnPush,\n    });\n  }\n}\n\n                                                        \nexport interface CodeCommitSourceOptions {\n                                                                                                                           \n  readonly trigger?: CodeCommitTrigger;\n\n                                                                                                                                                                       \n  readonly eventRole?: iam.IRole;\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                        \n  readonly codeBuildCloneOutput?: boolean;\n}\n\nclass CodeCommitSource extends CodePipelineSource {\n  constructor(private readonly repository: codecommit.IRepository, private readonly branch: string, private readonly props: CodeCommitSourceOptions) {\n    super(Token.isUnresolved(repository.repositoryName)\n      ? Node.of(repository).addr\n      : repository.repositoryName);\n\n    this.configurePrimaryOutput(new FileSet('Source', this));\n  }\n\n  protected getAction(output: Artifact, _actionName: string, runOrder: number) {\n    return new cp_actions.CodeCommitSourceAction({\n      output,\n      // Guaranteed to be okay as action name\n      actionName: this.repository.repositoryName,\n      runOrder,\n      branch: this.branch,\n      trigger: this.props.trigger,\n      repository: this.repository,\n      eventRole: this.props.eventRole,\n      codeBuildCloneOutput: this.props.codeBuildCloneOutput,\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
