{
  "version": 3,
  "sources": ["fact.ts"],
  "sourcesContent": ["import { AWS_REGIONS } from './aws-entities';\n\n                                              \nexport class Fact {\n                                                                                                                                                                                          \n  public static get regions(): string[] {\n    // Return by copy to ensure no modifications can be made to the undelying constant.\n    return Array.from(AWS_REGIONS);\n  }\n\n                                                                                                                                                                                                                                                                                                        \n  public static find(region: string, name: string): string | undefined {\n    const regionFacts = this.database[region];\n    return regionFacts && regionFacts[name];\n  }\n\n                                                                                                                                                                                                                                                                                                       \n  public static requireFact(region: string, name: string): string {\n    const foundFact = this.find(region, name);\n\n    if (!foundFact) {\n      throw new Error(`No fact ${name} could be found for region: ${region} and name: ${name}`);\n    }\n\n    return foundFact;\n  }\n\n                                                                                                                                                                                                           \n  public static register(fact: IFact, allowReplacing = false): void {\n    const regionFacts = this.database[fact.region] || (this.database[fact.region] = {});\n    if (fact.name in regionFacts && regionFacts[fact.name] !== fact.value && !allowReplacing) {\n      throw new Error(`Region ${fact.region} already has a fact ${fact.name}, with value ${regionFacts[fact.name]}`);\n    }\n    if (fact.value !== undefined) {\n      regionFacts[fact.name] = fact.value;\n    }\n  }\n\n                                                                                                                                                                                                                                                                                                                                           \n  public static unregister(region: string, name: string, value?: string): void {\n    const regionFacts = this.database[region] || {};\n    if (name in regionFacts && value && regionFacts[name] !== value) {\n      throw new Error(`Attempted to remove ${name} from ${region} with value ${value}, but the fact's value is ${regionFacts[name]}`);\n    }\n    delete regionFacts[name];\n  }\n\n  private static readonly database: { [region: string]: { [name: string]: string } } = {};\n\n  private constructor() {\n    throw new Error('Use the static methods of Fact instead!');\n  }\n}\n\n                                                                   \nexport interface IFact {\n                                                        \n  readonly region: string;\n\n                                                                                              \n  readonly name: string;\n\n                                        \n  readonly value: string | undefined;\n}\n\n                                       \nexport class FactName {\n                                                                                   \n  public static readonly PARTITION = 'partition';\n\n                                                                      \n  public static readonly DOMAIN_SUFFIX = 'domainSuffix';\n\n                                                                                                                                                             \n  public static readonly CDK_METADATA_RESOURCE_AVAILABLE = 'cdk:metadata-resource:available';\n\n                                                                 \n  public static readonly S3_STATIC_WEBSITE_ENDPOINT = 's3-static-website:endpoint';\n\n                                                                              \n  public static readonly S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID = 's3-static-website:route-53-hosted-zone-id';\n\n                                                                                                                             \n  public static readonly EBS_ENV_ENDPOINT_HOSTED_ZONE_ID = 'ebs-environment:route-53-hosted-zone-id';\n\n                                                                                                                                            \n  public static readonly VPC_ENDPOINT_SERVICE_NAME_PREFIX = 'vpcEndpointServiceNamePrefix';\n\n                                                     \n  public static readonly ELBV2_ACCOUNT = 'elbv2Account';\n\n                                                                                                                                                            \n  public static readonly DLC_REPOSITORY_ACCOUNT = 'dlcRepositoryAccount';\n\n                                                                                                                                                        \n  public static readonly APPMESH_ECR_ACCOUNT = 'appMeshRepositoryAccount';\n\n                                                                      \n  public static readonly FIREHOSE_CIDR_BLOCK = 'firehoseCidrBlock';\n\n                                                                                    \n  public static cloudwatchLambdaInsightsVersion(version: string, arch?: string) {\n    // if we are provided an architecture use that, otherwise\n    // default to x86_64 for backwards compatibility\n    const suffix = version.split('.').join('_') + `_${arch ?? 'x86_64'}`;\n    return `cloudwatch-lambda-insights-version:${suffix}`;\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                    \n  public static servicePrincipal(service: string) {\n    return `service-principal:${service.replace(/\\.amazonaws\\.com(\\.cn)?$/, '')}`;\n  }\n}\n"],
  "mappings": "+NAAA,eAAA,QAAA,kBAGA,UAAiB,CA8Cf,aAAA,CACE,KAAM,IAAI,OAAM,qDA7CA,UAAO,CAEvB,MAAO,OAAM,KAAK,eAAA,mBAIN,MAAK,OAAgB,KAAY,CAC7C,KAAM,aAAc,KAAK,SAAS,QAClC,MAAO,cAAe,YAAY,YAItB,aAAY,OAAgB,KAAY,CACpD,KAAM,WAAY,KAAK,KAAK,OAAQ,MAEpC,GAAI,CAAC,UACH,KAAM,IAAI,OAAM,WAAW,mCAAmC,oBAAoB,QAGpF,MAAO,iBAIK,UAAS,KAAa,eAAiB,GAAK,6DACxD,KAAM,aAAc,KAAK,SAAS,KAAK,SAAY,MAAK,SAAS,KAAK,QAAU,IAChF,GAAI,KAAK,OAAQ,cAAe,YAAY,KAAK,QAAU,KAAK,OAAS,CAAC,eACxE,KAAM,IAAI,OAAM,UAAU,KAAK,6BAA6B,KAAK,oBAAoB,YAAY,KAAK,SAExG,AAAI,KAAK,QAAU,QACjB,aAAY,KAAK,MAAQ,KAAK,aAKpB,YAAW,OAAgB,KAAc,MAAc,CACnE,KAAM,aAAc,KAAK,SAAS,SAAW,GAC7C,GAAI,OAAQ,cAAe,OAAS,YAAY,QAAU,MACxD,KAAM,IAAI,OAAM,uBAAuB,aAAa,qBAAqB,kCAAkC,YAAY,SAEzH,MAAO,aAAY,OAzCvB,QAAA,KAAA,0FA4C0B,KAAA,SAA6D,GAoBvF,cAAqB,OAmCL,iCAAgC,QAAiB,KAAa,CAI1E,MAAO,sCADQ,QAAQ,MAAM,KAAK,KAAK,KAAO,IAAI,MAAI,KAAJ,KAAQ,mBAK9C,kBAAiB,QAAe,CAC5C,MAAO,qBAAqB,QAAQ,QAAQ,2BAA4B,OA5C5E,QAAA,SAAA,sGAEyB,SAAA,UAAY,YAGZ,SAAA,cAAgB,eAGhB,SAAA,gCAAkC,kCAGlC,SAAA,2BAA6B,6BAG7B,SAAA,yCAA2C,4CAG3C,SAAA,gCAAkC,0CAGlC,SAAA,iCAAmC,+BAGnC,SAAA,cAAgB,eAGhB,SAAA,uBAAyB,uBAGzB,SAAA,oBAAsB,2BAGtB,SAAA,oBAAsB",
  "names": []
}
