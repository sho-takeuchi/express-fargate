{
  "version": 3,
  "sources": ["region-info.ts"],
  "sourcesContent": ["import { partitionInformation } from './aws-entities';\nimport { Fact, FactName } from './fact';\n\n                                                   \nexport class RegionInfo {\n                                                                                                                                                                                         \n  public static get regions(): RegionInfo[] {\n    return Fact.regions.map(RegionInfo.get);\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                      \n  public static regionMap(factName: string): { [region: string]: string } {\n    const ret: { [region: string]: string } = {};\n    for (const regionInfo of RegionInfo.regions) {\n      const fact = Fact.find(regionInfo.name, factName);\n      if (fact) {\n        ret[regionInfo.name] = fact;\n      }\n    }\n    return ret;\n  }\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n  public static limitedRegionMap(factName: string, partitions: string[]): { [region: string]: string } {\n    const ret: Record<string, string> = {};\n    for (const [region, value] of Object.entries(RegionInfo.regionMap(factName))) {\n      if (partitions.includes(partitionInformation(region).partition)) {\n        ret[region] = value;\n      }\n    }\n    return ret;\n  }\n\n                                                                                                                          \n  public static get(name: string): RegionInfo {\n    return new RegionInfo(name);\n  }\n\n  private constructor(public readonly name: string) { }\n\n                                                                                                             \n  public get cdkMetadataResourceAvailable(): boolean {\n    return Fact.find(this.name, FactName.CDK_METADATA_RESOURCE_AVAILABLE) === 'YES';\n  }\n\n                                                                             \n  public get domainSuffix(): string | undefined {\n    return Fact.find(this.name, FactName.DOMAIN_SUFFIX);\n  }\n\n                                                                          \n  public get partition(): string | undefined {\n    return Fact.find(this.name, FactName.PARTITION);\n  }\n\n                                                                                                                               \n  public get s3StaticWebsiteEndpoint(): string | undefined {\n    return Fact.find(this.name, FactName.S3_STATIC_WEBSITE_ENDPOINT);\n  }\n\n                                                                                                                      \n  public get s3StaticWebsiteHostedZoneId(): string | undefined {\n    return Fact.find(this.name, FactName.S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID);\n  }\n\n                                                                                                                           \n  public get ebsEnvEndpointHostedZoneId(): string | undefined {\n    return Fact.find(this.name, FactName.EBS_ENV_ENDPOINT_HOSTED_ZONE_ID);\n  }\n\n                                                                                                                                            \n  public get vpcEndpointServiceNamePrefix(): string | undefined {\n    return Fact.find(this.name, FactName.VPC_ENDPOINT_SERVICE_NAME_PREFIX);\n  }\n\n                                                                                                                                                   \n  public servicePrincipal(service: string): string | undefined {\n    return Fact.find(this.name, FactName.servicePrincipal(service));\n  }\n\n                                                             \n  public get elbv2Account(): string | undefined {\n    return Fact.find(this.name, FactName.ELBV2_ACCOUNT);\n  }\n\n                                                                                                                                                      \n  public get dlcRepositoryAccount(): string | undefined {\n    return Fact.find(this.name, FactName.DLC_REPOSITORY_ACCOUNT);\n  }\n\n                                                                                                                                                                                                                                         \n  public cloudwatchLambdaInsightsArn(insightsVersion: string, architecture?: string): string | undefined {\n    return Fact.find(this.name, FactName.cloudwatchLambdaInsightsVersion(insightsVersion, architecture));\n  }\n\n                                                                                                                                                        \n  public get appMeshRepositoryAccount(): string | undefined {\n    return Fact.find(this.name, FactName.APPMESH_ECR_ACCOUNT);\n  }\n\n                                                                      \n  public get firehoseCidrBlock(): string | undefined {\n    return Fact.find(this.name, FactName.FIREHOSE_CIDR_BLOCK);\n  }\n}\n"],
  "mappings": "sJAAA,eAAA,QAAA,kBACA,OAAA,QAAA,UAGA,gBAAuB,CAkCrB,YAAoC,KAAY,CAAZ,KAAA,KAAA,eAhClB,UAAO,CACvB,MAAO,QAAA,KAAK,QAAQ,IAAI,WAAW,WAIvB,WAAU,SAAgB,CACtC,KAAM,KAAoC,GAC1C,SAAW,cAAc,YAAW,QAAS,CAC3C,KAAM,MAAO,OAAA,KAAK,KAAK,WAAW,KAAM,UACxC,AAAI,MACF,KAAI,WAAW,MAAQ,MAG3B,MAAO,WAIK,kBAAiB,SAAkB,WAAoB,CACnE,KAAM,KAA8B,GACpC,SAAW,CAAC,OAAQ,QAAU,QAAO,QAAQ,WAAW,UAAU,WAChE,AAAI,WAAW,SAAS,eAAA,qBAAqB,QAAQ,YACnD,KAAI,QAAU,OAGlB,MAAO,WAIK,KAAI,KAAY,CAC5B,MAAO,IAAI,YAAW,SAMb,+BAA4B,CACrC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,mCAAqC,SAIjE,eAAY,CACrB,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,kBAI5B,YAAS,CAClB,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,cAI5B,0BAAuB,CAChC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,+BAI5B,8BAA2B,CACpC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,6CAI5B,6BAA0B,CACnC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,oCAI5B,+BAA4B,CACrC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,kCAIhC,iBAAiB,QAAe,CACrC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,iBAAiB,aAI7C,eAAY,CACrB,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,kBAI5B,uBAAoB,CAC7B,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,wBAIhC,4BAA4B,gBAAyB,aAAqB,CAC/E,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,gCAAgC,gBAAiB,kBAI7E,2BAAwB,CACjC,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,wBAI5B,oBAAiB,CAC1B,MAAO,QAAA,KAAK,KAAK,KAAK,KAAM,OAAA,SAAS,sBAlGzC,QAAA,WAAA",
  "names": []
}
