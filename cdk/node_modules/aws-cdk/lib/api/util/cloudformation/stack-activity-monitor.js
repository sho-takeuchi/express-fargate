"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrentActivityPrinter = exports.HistoryActivityPrinter = exports.StackActivityMonitor = exports.StackActivityProgress = void 0;
const util = require("util");
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const chalk = require("chalk");
const logging_1 = require("../../../logging");
const display_1 = require("../display");
/**
 * Supported display modes for stack deployment activity
 */
var StackActivityProgress;
(function (StackActivityProgress) {
    /**
     * Displays a progress bar with only the events for the resource currently being deployed
     */
    StackActivityProgress["BAR"] = "bar";
    /**
     * Displays complete history with all CloudFormation stack events
     */
    StackActivityProgress["EVENTS"] = "events";
})(StackActivityProgress = exports.StackActivityProgress || (exports.StackActivityProgress = {}));
class StackActivityMonitor {
    constructor(cfn, stackName, printer, stack, changeSetCreationTime) {
        var _a;
        this.cfn = cfn;
        this.stackName = stackName;
        this.printer = printer;
        this.stack = stack;
        this.active = false;
        this.activity = {};
        this.startTime = (_a = changeSetCreationTime === null || changeSetCreationTime === void 0 ? void 0 : changeSetCreationTime.getTime()) !== null && _a !== void 0 ? _a : Date.now();
    }
    /**
     * Create a Stack Activity Monitor using a default printer, based on context clues
     */
    static withDefaultPrinter(cfn, stackName, stackArtifact, options = {}) {
        var _a, _b;
        const stream = process.stderr;
        const props = {
            resourceTypeColumnWidth: calcMaxResourceTypeLength(stackArtifact.template),
            resourcesTotal: options.resourcesTotal,
            stream,
        };
        const isWindows = process.platform === 'win32';
        const verbose = (_a = options.logLevel) !== null && _a !== void 0 ? _a : logging_1.logLevel;
        // On some CI systems (such as CircleCI) output still reports as a TTY so we also
        // need an individual check for whether we're running on CI.
        // see: https://discuss.circleci.com/t/circleci-terminal-is-a-tty-but-term-is-not-set/9965
        const fancyOutputAvailable = !isWindows && stream.isTTY && !options.ci;
        const progress = (_b = options.progress) !== null && _b !== void 0 ? _b : StackActivityProgress.BAR;
        const printer = fancyOutputAvailable && !verbose && (progress === StackActivityProgress.BAR)
            ? new CurrentActivityPrinter(props)
            : new HistoryActivityPrinter(props);
        return new StackActivityMonitor(cfn, stackName, printer, stackArtifact, options.changeSetCreationTime);
    }
    start() {
        this.active = true;
        this.printer.start();
        this.scheduleNextTick();
        return this;
    }
    async stop() {
        this.active = false;
        if (this.tickTimer) {
            clearTimeout(this.tickTimer);
        }
        // Do a final poll for all events. This is to handle the situation where DescribeStackStatus
        // already returned an error, but the monitor hasn't seen all the events yet and we'd end
        // up not printing the failure reason to users.
        await this.finalPollToEnd();
        this.printer.stop();
    }
    scheduleNextTick() {
        if (!this.active) {
            return;
        }
        this.tickTimer = setTimeout(() => void (this.tick()), this.printer.updateSleep);
    }
    async tick() {
        if (!this.active) {
            return;
        }
        try {
            this.readPromise = this.readNewEvents();
            await this.readPromise;
            this.readPromise = undefined;
            // We might have been stop()ped while the network call was in progress.
            if (!this.active) {
                return;
            }
            this.printer.print();
        }
        catch (e) {
            logging_1.error('Error occurred while monitoring stack: %s', e);
        }
        this.scheduleNextTick();
    }
    findMetadataFor(logicalId) {
        var _a, _b;
        const metadata = (_b = (_a = this.stack) === null || _a === void 0 ? void 0 : _a.manifest) === null || _b === void 0 ? void 0 : _b.metadata;
        if (!logicalId || !metadata) {
            return undefined;
        }
        for (const path of Object.keys(metadata)) {
            const entry = metadata[path]
                .filter(e => e.type === cxschema.ArtifactMetadataEntryType.LOGICAL_ID)
                .find(e => e.data === logicalId);
            if (entry) {
                return {
                    entry,
                    constructPath: this.simplifyConstructPath(path),
                };
            }
        }
        return undefined;
    }
    /**
     * Reads all new events from the stack history
     *
     * The events are returned in reverse chronological order; we continue to the next page if we
     * see a next page and the last event in the page is new to us (and within the time window).
     * haven't seen the final event
     */
    async readNewEvents() {
        var _a;
        const events = [];
        try {
            let nextToken;
            let finished = false;
            while (!finished) {
                const response = await this.cfn.describeStackEvents({ StackName: this.stackName, NextToken: nextToken }).promise();
                const eventPage = (_a = response === null || response === void 0 ? void 0 : response.StackEvents) !== null && _a !== void 0 ? _a : [];
                for (const event of eventPage) {
                    // Event from before we were interested in 'em
                    if (event.Timestamp.valueOf() < this.startTime) {
                        finished = true;
                        break;
                    }
                    // Already seen this one
                    if (event.EventId in this.activity) {
                        finished = true;
                        break;
                    }
                    // Fresh event
                    events.push(this.activity[event.EventId] = {
                        event: event,
                        metadata: this.findMetadataFor(event.LogicalResourceId),
                    });
                }
                // We're also done if there's nothing left to read
                nextToken = response === null || response === void 0 ? void 0 : response.NextToken;
                if (nextToken === undefined) {
                    finished = true;
                }
            }
        }
        catch (e) {
            if (e.code === 'ValidationError' && e.message === `Stack [${this.stackName}] does not exist`) {
                return;
            }
            throw e;
        }
        events.reverse();
        for (const event of events) {
            this.printer.addActivity(event);
        }
    }
    /**
     * Perform a final poll to the end and flush out all events to the printer
     *
     * Finish any poll currently in progress, then do a final one until we've
     * reached the last page.
     */
    async finalPollToEnd() {
        // If we were doing a poll, finish that first. It was started before
        // the moment we were sure we weren't going to get any new events anymore
        // so we need to do a new one anyway. Need to wait for this one though
        // because our state is single-threaded.
        if (this.readPromise) {
            await this.readPromise;
        }
        await this.readNewEvents();
    }
    simplifyConstructPath(path) {
        path = path.replace(/\/Resource$/, '');
        path = path.replace(/^\//, ''); // remove "/" prefix
        // remove "<stack-name>/" prefix
        if (path.startsWith(this.stackName + '/')) {
            path = path.substr(this.stackName.length + 1);
        }
        return path;
    }
}
exports.StackActivityMonitor = StackActivityMonitor;
function padRight(n, x) {
    return x + ' '.repeat(Math.max(0, n - x.length));
}
/**
 * Infamous padLeft()
 */
function padLeft(n, x) {
    return ' '.repeat(Math.max(0, n - x.length)) + x;
}
function calcMaxResourceTypeLength(template) {
    const resources = (template && template.Resources) || {};
    let maxWidth = 0;
    for (const id of Object.keys(resources)) {
        const type = resources[id].Type || '';
        if (type.length > maxWidth) {
            maxWidth = type.length;
        }
    }
    return maxWidth;
}
class ActivityPrinterBase {
    constructor(props) {
        this.props = props;
        /**
         * Fetch new activity every 5 seconds
         */
        this.updateSleep = 5000;
        /**
         * A list of resource IDs which are currently being processed
         */
        this.resourcesInProgress = {};
        /**
         * Previous completion state observed by logical ID
         *
         * We use this to detect that if we see a DELETE_COMPLETE after a
         * CREATE_COMPLETE, it's actually a rollback and we should DECREASE
         * resourcesDone instead of increase it
         */
        this.resourcesPrevCompleteState = {};
        /**
         * Count of resources that have reported a _COMPLETE status
         */
        this.resourcesDone = 0;
        /**
         * How many digits we need to represent the total count (for lining up the status reporting)
         */
        this.resourceDigits = 0;
        this.rollingBack = false;
        this.failures = new Array();
        // +1 because the stack also emits a "COMPLETE" event at the end, and that wasn't
        // counted yet. This makes it line up with the amount of events we expect.
        this.resourcesTotal = props.resourcesTotal ? props.resourcesTotal + 1 : undefined;
        // How many digits does this number take to represent?
        this.resourceDigits = this.resourcesTotal ? Math.ceil(Math.log10(this.resourcesTotal)) : 0;
        this.stream = props.stream;
    }
    addActivity(activity) {
        var _a;
        const status = activity.event.ResourceStatus;
        if (!status || !activity.event.LogicalResourceId) {
            return;
        }
        if (status === 'ROLLBACK_IN_PROGRESS' || status === 'UPDATE_ROLLBACK_IN_PROGRESS') {
            // Only triggered on the stack once we've started doing a rollback
            this.rollingBack = true;
        }
        if (status.endsWith('_IN_PROGRESS')) {
            this.resourcesInProgress[activity.event.LogicalResourceId] = activity;
        }
        if (hasErrorMessage(status)) {
            const isCancelled = ((_a = activity.event.ResourceStatusReason) !== null && _a !== void 0 ? _a : '').indexOf('cancelled') > -1;
            // Cancelled is not an interesting failure reason
            if (!isCancelled) {
                this.failures.push(activity);
            }
        }
        if (status.endsWith('_COMPLETE') || status.endsWith('_FAILED')) {
            delete this.resourcesInProgress[activity.event.LogicalResourceId];
        }
        if (status.endsWith('_COMPLETE_CLEANUP_IN_PROGRESS')) {
            this.resourcesDone++;
        }
        if (status.endsWith('_COMPLETE')) {
            const prevState = this.resourcesPrevCompleteState[activity.event.LogicalResourceId];
            if (!prevState) {
                this.resourcesDone++;
            }
            else {
                // If we completed this before and we're completing it AGAIN, means we're rolling back.
                // Protect against silly underflow.
                this.resourcesDone--;
                if (this.resourcesDone < 0) {
                    this.resourcesDone = 0;
                }
            }
            this.resourcesPrevCompleteState[activity.event.LogicalResourceId] = status;
        }
    }
    start() {
        // Empty on purpose
    }
    stop() {
        // Empty on purpose
    }
}
/**
 * Activity Printer which shows a full log of all CloudFormation events
 *
 * When there hasn't been activity for a while, it will print the resources
 * that are currently in progress, to show what's holding up the deployment.
 */
class HistoryActivityPrinter extends ActivityPrinterBase {
    constructor(props) {
        super(props);
        /**
         * Last time we printed something to the console.
         *
         * Used to measure timeout for progress reporting.
         */
        this.lastPrintTime = Date.now();
        /**
         * Number of ms of change absence before we tell the user about the resources that are currently in progress.
         */
        this.inProgressDelay = 30000;
        this.printable = new Array();
    }
    addActivity(activity) {
        super.addActivity(activity);
        this.printable.push(activity);
        this.print();
    }
    print() {
        for (const activity of this.printable) {
            this.printOne(activity);
        }
        this.printable.splice(0, this.printable.length);
        this.printInProgress();
    }
    stop() {
        // Print failures at the end
        if (this.failures.length > 0) {
            this.stream.write('\nFailed resources:\n');
            for (const failure of this.failures) {
                // Root stack failures are not interesting
                if (failure.event.StackName === failure.event.LogicalResourceId) {
                    continue;
                }
                this.printOne(failure, false);
            }
        }
    }
    printOne(activity, progress) {
        const e = activity.event;
        const color = colorFromStatusResult(e.ResourceStatus);
        let reasonColor = chalk.cyan;
        let stackTrace = '';
        const md = activity.metadata;
        if (md && e.ResourceStatus && e.ResourceStatus.indexOf('FAILED') !== -1) {
            stackTrace = md.entry.trace ? `\n\t${md.entry.trace.join('\n\t\\_ ')}` : '';
            reasonColor = chalk.red;
        }
        const resourceName = md ? md.constructPath : (e.LogicalResourceId || '');
        const logicalId = resourceName !== e.LogicalResourceId ? `(${e.LogicalResourceId}) ` : '';
        this.stream.write(util.format('%s | %s%s | %s | %s | %s %s%s%s\n', e.StackName, (progress !== false ? `${this.progress()} | ` : ''), new Date(e.Timestamp).toLocaleTimeString(), color(padRight(STATUS_WIDTH, (e.ResourceStatus || '').substr(0, STATUS_WIDTH))), // pad left and trim
        padRight(this.props.resourceTypeColumnWidth, e.ResourceType || ''), color(chalk.bold(resourceName)), logicalId, reasonColor(chalk.bold(e.ResourceStatusReason ? e.ResourceStatusReason : '')), reasonColor(stackTrace)));
        this.lastPrintTime = Date.now();
    }
    /**
     * Report the current progress as a [34/42] string, or just [34] if the total is unknown
     */
    progress() {
        if (this.resourcesTotal == null) {
            // Don't have total, show simple count and hope the human knows
            return padLeft(3, util.format('%s', this.resourcesDone)); // max 500 resources
        }
        return util.format('%s/%s', padLeft(this.resourceDigits, this.resourcesDone.toString()), padLeft(this.resourceDigits, this.resourcesTotal != null ? this.resourcesTotal.toString() : '?'));
    }
    /**
     * If some resources are taking a while to create, notify the user about what's currently in progress
     */
    printInProgress() {
        if (Date.now() < this.lastPrintTime + this.inProgressDelay) {
            return;
        }
        if (Object.keys(this.resourcesInProgress).length > 0) {
            this.stream.write(util.format('%s Currently in progress: %s\n', this.progress(), chalk.bold(Object.keys(this.resourcesInProgress).join(', '))));
        }
        // We cheat a bit here. To prevent printInProgress() from repeatedly triggering,
        // we set the timestamp into the future. It will be reset whenever a regular print
        // occurs, after which we can be triggered again.
        this.lastPrintTime = +Infinity;
    }
}
exports.HistoryActivityPrinter = HistoryActivityPrinter;
/**
 * Activity Printer which shows the resources currently being updated
 *
 * It will continuously reupdate the terminal and show only the resources
 * that are currently being updated, in addition to a progress bar which
 * shows how far along the deployment is.
 *
 * Resources that have failed will always be shown, and will be recapitulated
 * along with their stack trace when the monitoring ends.
 *
 * Resources that failed deployment because they have been cancelled are
 * not included.
 */
class CurrentActivityPrinter extends ActivityPrinterBase {
    constructor(props) {
        super(props);
        /**
         * This looks very disorienting sleeping for 5 seconds. Update quicker.
         */
        this.updateSleep = 2000;
        this.oldLogLevel = 0 /* DEFAULT */;
        this.block = new display_1.RewritableBlock(this.stream);
    }
    print() {
        var _a;
        const lines = [];
        // Add a progress bar at the top
        const progressWidth = Math.max(Math.min(((_a = this.block.width) !== null && _a !== void 0 ? _a : 80) - PROGRESSBAR_EXTRA_SPACE - 1, MAX_PROGRESSBAR_WIDTH), MIN_PROGRESSBAR_WIDTH);
        const prog = this.progressBar(progressWidth);
        if (prog) {
            lines.push('  ' + prog, '');
        }
        // Normally we'd only print "resources in progress", but it's also useful
        // to keep an eye on the failures and know about the specific errors asquickly
        // as possible (while the stack is still rolling back), so add those in.
        const toPrint = [...this.failures, ...Object.values(this.resourcesInProgress)];
        toPrint.sort((a, b) => a.event.Timestamp.getTime() - b.event.Timestamp.getTime());
        lines.push(...toPrint.map(res => {
            var _a, _b, _c;
            const color = colorFromStatusActivity(res.event.ResourceStatus);
            const resourceName = (_c = (_b = (_a = res.metadata) === null || _a === void 0 ? void 0 : _a.constructPath) !== null && _b !== void 0 ? _b : res.event.LogicalResourceId) !== null && _c !== void 0 ? _c : '';
            return util.format('%s | %s | %s | %s%s', padLeft(TIMESTAMP_WIDTH, new Date(res.event.Timestamp).toLocaleTimeString()), color(padRight(STATUS_WIDTH, (res.event.ResourceStatus || '').substr(0, STATUS_WIDTH))), padRight(this.props.resourceTypeColumnWidth, res.event.ResourceType || ''), color(chalk.bold(shorten(40, resourceName))), this.failureReasonOnNextLine(res));
        }));
        this.block.displayLines(lines);
    }
    start() {
        // Need to prevent the waiter from printing 'stack not stable' every 5 seconds, it messes
        // with the output calculations.
        this.oldLogLevel = logging_1.logLevel;
        logging_1.setLogLevel(0 /* DEFAULT */);
    }
    stop() {
        var _a, _b, _c;
        logging_1.setLogLevel(this.oldLogLevel);
        // Print failures at the end
        const lines = new Array();
        for (const failure of this.failures) {
            // Root stack failures are not interesting
            if (failure.event.StackName === failure.event.LogicalResourceId) {
                continue;
            }
            lines.push(util.format(chalk.red('%s | %s | %s | %s%s') + '\n', padLeft(TIMESTAMP_WIDTH, new Date(failure.event.Timestamp).toLocaleTimeString()), padRight(STATUS_WIDTH, (failure.event.ResourceStatus || '').substr(0, STATUS_WIDTH)), padRight(this.props.resourceTypeColumnWidth, failure.event.ResourceType || ''), shorten(40, (_a = failure.event.LogicalResourceId) !== null && _a !== void 0 ? _a : ''), this.failureReasonOnNextLine(failure)));
            const trace = (_c = (_b = failure.metadata) === null || _b === void 0 ? void 0 : _b.entry) === null || _c === void 0 ? void 0 : _c.trace;
            if (trace) {
                lines.push(chalk.red(`\t${trace.join('\n\t\\_ ')}\n`));
            }
        }
        // Display in the same block space, otherwise we're going to have silly empty lines.
        this.block.displayLines(lines);
    }
    progressBar(width) {
        if (!this.resourcesTotal) {
            return '';
        }
        const fraction = Math.min(this.resourcesDone / this.resourcesTotal, 1);
        const innerWidth = Math.max(1, width - 2);
        const chars = innerWidth * fraction;
        const remainder = chars - Math.floor(chars);
        const fullChars = FULL_BLOCK.repeat(Math.floor(chars));
        const partialChar = PARTIAL_BLOCK[Math.floor(remainder * PARTIAL_BLOCK.length)];
        const filler = '·'.repeat(innerWidth - Math.floor(chars) - (partialChar ? 1 : 0));
        const color = this.rollingBack ? chalk.yellow : chalk.green;
        return '[' + color(fullChars + partialChar) + filler + `] (${this.resourcesDone}/${this.resourcesTotal})`;
    }
    failureReasonOnNextLine(activity) {
        var _a, _b;
        return hasErrorMessage((_a = activity.event.ResourceStatus) !== null && _a !== void 0 ? _a : '')
            ? `\n${' '.repeat(TIMESTAMP_WIDTH + STATUS_WIDTH + 6)}${chalk.red((_b = activity.event.ResourceStatusReason) !== null && _b !== void 0 ? _b : '')}`
            : '';
    }
}
exports.CurrentActivityPrinter = CurrentActivityPrinter;
const FULL_BLOCK = '█';
const PARTIAL_BLOCK = ['', '▏', '▎', '▍', '▌', '▋', '▊', '▉'];
const MAX_PROGRESSBAR_WIDTH = 60;
const MIN_PROGRESSBAR_WIDTH = 10;
const PROGRESSBAR_EXTRA_SPACE = 2 /* leading spaces */ + 2 /* brackets */ + 4 /* progress number decoration */ + 6 /* 2 progress numbers up to 999 */;
function hasErrorMessage(status) {
    return status.endsWith('_FAILED') || status === 'ROLLBACK_IN_PROGRESS' || status === 'UPDATE_ROLLBACK_IN_PROGRESS';
}
function colorFromStatusResult(status) {
    if (!status) {
        return chalk.reset;
    }
    if (status.indexOf('FAILED') !== -1) {
        return chalk.red;
    }
    if (status.indexOf('ROLLBACK') !== -1) {
        return chalk.yellow;
    }
    if (status.indexOf('COMPLETE') !== -1) {
        return chalk.green;
    }
    return chalk.reset;
}
function colorFromStatusActivity(status) {
    if (!status) {
        return chalk.reset;
    }
    if (status.endsWith('_FAILED')) {
        return chalk.red;
    }
    if (status.startsWith('CREATE_') || status.startsWith('UPDATE_')) {
        return chalk.green;
    }
    // For stacks, it may also be 'UPDDATE_ROLLBACK_IN_PROGRESS'
    if (status.indexOf('ROLLBACK_') !== -1) {
        return chalk.yellow;
    }
    if (status.startsWith('DELETE_')) {
        return chalk.yellow;
    }
    return chalk.reset;
}
function shorten(maxWidth, p) {
    if (p.length <= maxWidth) {
        return p;
    }
    const half = Math.floor((maxWidth - 3) / 2);
    return p.substr(0, half) + '...' + p.substr(p.length - half);
}
const TIMESTAMP_WIDTH = 12;
const STATUS_WIDTH = 20;
//# sourceMappingURL=data:application/json;base64,