"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.realHandler = exports.handler = exports.builder = exports.aliases = exports.describe = exports.command = void 0;
const childProcess = require("child_process");
const process = require("process");
const chalk = require("chalk");
const logging_1 = require("../../lib/logging");
exports.command = 'docs';
exports.describe = 'Opens the reference documentation in a browser';
exports.aliases = ['doc'];
const defaultBrowserCommand = {
    darwin: 'open %u',
    win32: 'start %u',
};
exports.builder = {
    browser: {
        alias: 'b',
        desc: 'the command to use to open the browser, using %u as a placeholder for the path of the file to open',
        type: 'string',
        default: process.platform in defaultBrowserCommand ? defaultBrowserCommand[process.platform] : 'xdg-open %u',
    },
};
function handler(args) {
    args.commandHandler = realHandler;
}
exports.handler = handler;
async function realHandler(options) {
    const url = 'https://docs.aws.amazon.com/cdk/api/v2/';
    logging_1.print(chalk.green(url));
    const browserCommand = options.args.browser.replace(/%u/g, url);
    logging_1.debug(`Opening documentation ${chalk.green(browserCommand)}`);
    return new Promise((resolve, _reject) => {
        childProcess.exec(browserCommand, (err, stdout, stderr) => {
            if (err) {
                logging_1.debug(`An error occurred when trying to open a browser: ${err.stack || err.message}`);
                return resolve(0);
            }
            if (stdout) {
                logging_1.debug(stdout);
            }
            if (stderr) {
                logging_1.warning(stderr);
            }
            resolve(0);
        });
    });
}
exports.realHandler = realHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRvY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1DQUFtQztBQUNuQywrQkFBK0I7QUFFL0IsK0NBQTBEO0FBRzdDLFFBQUEsT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUNqQixRQUFBLFFBQVEsR0FBRyxnREFBZ0QsQ0FBQztBQUM1RCxRQUFBLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRS9CLE1BQU0scUJBQXFCLEdBQTBDO0lBQ25FLE1BQU0sRUFBRSxTQUFTO0lBQ2pCLEtBQUssRUFBRSxVQUFVO0NBQ2xCLENBQUM7QUFFVyxRQUFBLE9BQU8sR0FBRztJQUNyQixPQUFPLEVBQUU7UUFDUCxLQUFLLEVBQUUsR0FBRztRQUNWLElBQUksRUFBRSxvR0FBb0c7UUFDMUcsSUFBSSxFQUFFLFFBQVE7UUFDZCxPQUFPLEVBQUUsT0FBTyxDQUFDLFFBQVEsSUFBSSxxQkFBcUIsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhO0tBQzdHO0NBQ0YsQ0FBQztBQU1GLFNBQWdCLE9BQU8sQ0FBQyxJQUFxQjtJQUMzQyxJQUFJLENBQUMsY0FBYyxHQUFHLFdBQVcsQ0FBQztBQUNwQyxDQUFDO0FBRkQsMEJBRUM7QUFFTSxLQUFLLFVBQVUsV0FBVyxDQUFDLE9BQXVCO0lBQ3ZELE1BQU0sR0FBRyxHQUFHLHlDQUF5QyxDQUFDO0lBQ3RELGVBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEIsTUFBTSxjQUFjLEdBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFrQixDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDNUUsZUFBSyxDQUFDLHlCQUF5QixLQUFLLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5RCxPQUFPLElBQUksT0FBTyxDQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFO1FBQzlDLFlBQVksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUN4RCxJQUFJLEdBQUcsRUFBRTtnQkFDUCxlQUFLLENBQUMsb0RBQW9ELEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ3RGLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ25CO1lBQ0QsSUFBSSxNQUFNLEVBQUU7Z0JBQUUsZUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQUU7WUFDOUIsSUFBSSxNQUFNLEVBQUU7Z0JBQUUsaUJBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUFFO1lBQ2hDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBaEJELGtDQWdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNoaWxkUHJvY2VzcyBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCAqIGFzIHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgKiBhcyB5YXJncyBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBkZWJ1ZywgcHJpbnQsIHdhcm5pbmcgfSBmcm9tICcuLi8uLi9saWIvbG9nZ2luZyc7XG5pbXBvcnQgeyBDb21tYW5kT3B0aW9ucyB9IGZyb20gJy4uL2NvbW1hbmQtYXBpJztcblxuZXhwb3J0IGNvbnN0IGNvbW1hbmQgPSAnZG9jcyc7XG5leHBvcnQgY29uc3QgZGVzY3JpYmUgPSAnT3BlbnMgdGhlIHJlZmVyZW5jZSBkb2N1bWVudGF0aW9uIGluIGEgYnJvd3Nlcic7XG5leHBvcnQgY29uc3QgYWxpYXNlcyA9IFsnZG9jJ107XG5cbmNvbnN0IGRlZmF1bHRCcm93c2VyQ29tbWFuZDogeyBba2V5IGluIE5vZGVKUy5QbGF0Zm9ybV0/OiBzdHJpbmcgfSA9IHtcbiAgZGFyd2luOiAnb3BlbiAldScsXG4gIHdpbjMyOiAnc3RhcnQgJXUnLFxufTtcblxuZXhwb3J0IGNvbnN0IGJ1aWxkZXIgPSB7XG4gIGJyb3dzZXI6IHtcbiAgICBhbGlhczogJ2InLFxuICAgIGRlc2M6ICd0aGUgY29tbWFuZCB0byB1c2UgdG8gb3BlbiB0aGUgYnJvd3NlciwgdXNpbmcgJXUgYXMgYSBwbGFjZWhvbGRlciBmb3IgdGhlIHBhdGggb2YgdGhlIGZpbGUgdG8gb3BlbicsXG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgZGVmYXVsdDogcHJvY2Vzcy5wbGF0Zm9ybSBpbiBkZWZhdWx0QnJvd3NlckNvbW1hbmQgPyBkZWZhdWx0QnJvd3NlckNvbW1hbmRbcHJvY2Vzcy5wbGF0Zm9ybV0gOiAneGRnLW9wZW4gJXUnLFxuICB9LFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBBcmd1bWVudHMgZXh0ZW5kcyB5YXJncy5Bcmd1bWVudHMge1xuICBicm93c2VyOiBzdHJpbmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZXIoYXJnczogeWFyZ3MuQXJndW1lbnRzKSB7XG4gIGFyZ3MuY29tbWFuZEhhbmRsZXIgPSByZWFsSGFuZGxlcjtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYWxIYW5kbGVyKG9wdGlvbnM6IENvbW1hbmRPcHRpb25zKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgY29uc3QgdXJsID0gJ2h0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jZGsvYXBpL3YyLyc7XG4gIHByaW50KGNoYWxrLmdyZWVuKHVybCkpO1xuICBjb25zdCBicm93c2VyQ29tbWFuZCA9IChvcHRpb25zLmFyZ3MuYnJvd3NlciBhcyBzdHJpbmcpLnJlcGxhY2UoLyV1L2csIHVybCk7XG4gIGRlYnVnKGBPcGVuaW5nIGRvY3VtZW50YXRpb24gJHtjaGFsay5ncmVlbihicm93c2VyQ29tbWFuZCl9YCk7XG4gIHJldHVybiBuZXcgUHJvbWlzZTxudW1iZXI+KChyZXNvbHZlLCBfcmVqZWN0KSA9PiB7XG4gICAgY2hpbGRQcm9jZXNzLmV4ZWMoYnJvd3NlckNvbW1hbmQsIChlcnIsIHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGRlYnVnKGBBbiBlcnJvciBvY2N1cnJlZCB3aGVuIHRyeWluZyB0byBvcGVuIGEgYnJvd3NlcjogJHtlcnIuc3RhY2sgfHwgZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIHJldHVybiByZXNvbHZlKDApO1xuICAgICAgfVxuICAgICAgaWYgKHN0ZG91dCkgeyBkZWJ1ZyhzdGRvdXQpOyB9XG4gICAgICBpZiAoc3RkZXJyKSB7IHdhcm5pbmcoc3RkZXJyKTsgfVxuICAgICAgcmVzb2x2ZSgwKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=